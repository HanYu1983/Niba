
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public interface IEventSender
{
    void OnAddReceiver(object receiver);
    void OnRemoveReceiver(object receiver);
}

public class EventManager
{
    HashSet<IEventSender> _senders = new HashSet<IEventSender>();
    HashSet<object> _receivers = new HashSet<object>();

    public static EventManager Singleton = new EventManager();

    public void Add(object obj)
    {
        AddReceiver(obj);
        if (obj is IEventSender)
        {
            AddSender((IEventSender)obj);
        }
    }

    public void Remove(object obj)
    {
        RemoveReceiver(obj);
        if (obj is IEventSender)
        {
            RemoveSender((IEventSender)obj);
        }
    }

    public void AddSender(IEventSender sender)
    {
        _senders.Add(sender);
        _receivers.ToList().ForEach(receiver => sender.OnAddReceiver(receiver));
    }

    public void AddReceiver(object receiver)
    {
        _receivers.Add(receiver);
        _senders.ToList().ForEach(sender => sender.OnAddReceiver(receiver));
    }

    public void RemoveSender(IEventSender sender)
    {
        _receivers.ToList().ForEach(receiver => sender.OnRemoveReceiver(receiver));
        _senders.Remove(sender);
    }

    public void RemoveReceiver(object receiver)
    {
        _senders.ToList().ForEach(sender => sender.OnRemoveReceiver(receiver));
        _receivers.Remove(receiver);
    }
}



public delegate void Observe(DefaultEventSender e, object o);
public delegate void OnRemoveReceiver(DefaultEventSender e, object o);

public class DefaultEventSender : IEventSender
{
    public Observe _onAdd, _onRemove;
    HashSet<object> _receivers = new HashSet<object>();
    public IEnumerable<object> Receivers { get { return _receivers; } }

    public DefaultEventSender(Observe onAdd, Observe onRemove)
    {
        _onAdd = onAdd;
        _onRemove = onRemove;
    }

    public DefaultEventSender(Type t)
    {
        this._onAdd = (DefaultEventSender e, object o) =>
        {
            if (o.GetType().IsAssignableFrom(t))
            {
                e.AddReceiver(o);
            }
        };
        this._onRemove = (DefaultEventSender e, object o) =>
        {
            if (o.GetType().IsAssignableFrom(t))
            {
                e.RemoveReceiver(o);
            }
        };
    }

    public void AddReceiver(object receiver)
    {
        _receivers.Add(receiver);
    }

    public void RemoveReceiver(object receiver)
    {
        _receivers.Remove(receiver);
    }

    public void OnAddReceiver(object receiver)
    {
        _onAdd(this, receiver);
    }
    public void OnRemoveReceiver(object receiver)
    {
        _onRemove(this, receiver);
    }
}