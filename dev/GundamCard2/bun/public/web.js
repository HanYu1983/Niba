var __create = Object.create;
var { getPrototypeOf: __getProtoOf, defineProperty: __defProp, getOwnPropertyNames: __getOwnPropNames } = Object;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: !0
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: !0,
      configurable: !0,
      set: (newValue) => all[name] = () => newValue
    });
};

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
    var ReactVersion = "18.3.1", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function")
        return maybeIterator;
      return null;
    }
    var ReactCurrentDispatcher = {
      current: null
    }, ReactCurrentBatchConfig = {
      transition: null
    }, ReactCurrentActQueue = {
      current: null,
      isBatchingLegacy: !1,
      didScheduleLegacyUpdate: !1
    }, ReactCurrentOwner = {
      current: null
    }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
      currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
      currentExtraStackFrame = stack;
    }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
      var stack = "";
      if (currentExtraStackFrame)
        stack += currentExtraStackFrame;
      var impl = ReactDebugCurrentFrame.getCurrentStack;
      if (impl)
        stack += impl() || "";
      return stack;
    };
    var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
      ReactCurrentDispatcher,
      ReactCurrentBatchConfig,
      ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++)
          args[_key - 1] = arguments[_key];
        printWarning("warn", format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++)
          args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "")
          format += "%s", args = args.concat([stack]);
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey])
          return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
      }
    }
    var ReactNoopUpdateQueue = {
      isMounted: function(publicInstance) {
        return !1;
      },
      enqueueForceUpdate: function(publicInstance, callback, callerName) {
        warnNoop(publicInstance, "forceUpdate");
      },
      enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, "replaceState");
      },
      enqueueSetState: function(publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, "setState");
      }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    function Component(props, context, updater) {
      this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
      if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null)
        throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    }, Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    {
      var deprecatedAPIs = {
        isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
        replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
      }, defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function() {
            warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            return;
          }
        });
      };
      for (var fnName in deprecatedAPIs)
        if (deprecatedAPIs.hasOwnProperty(fnName))
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    function PureComponent(props, context, updater) {
      this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
    pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
    function createRef() {
      var refObject = {
        current: null
      };
      return Object.seal(refObject), refObject;
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      try {
        return testStringCoercion(value), !1;
      } catch (e) {
        return !0;
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      if (willCoercionThrow(value))
        return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName)
        return displayName;
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type.tag === "number")
        error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if (typeof type === "function")
        return type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null)
              return outerName;
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
      if (hasOwnProperty.call(config, "ref")) {
        var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
        if (getter && getter.isReactWarning)
          return !1;
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning)
          return !1;
      }
      return config.key !== void 0;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function() {
        if (!specialPropKeyWarningShown)
          specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
      };
      warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: !0
      });
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function() {
        if (!specialPropRefWarningShown)
          specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
      };
      warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
        get: warnAboutAccessingRef,
        configurable: !0
      });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
      if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
        var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (!didWarnAboutStringRefs[componentName])
          error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref), didWarnAboutStringRefs[componentName] = !0;
      }
    }
    var ReactElement = function(type, key, ref, self, source, owner, props) {
      var element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref,
        props,
        _owner: owner
      };
      if (element._store = {}, Object.defineProperty(element._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(element, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: self
      }), Object.defineProperty(element, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: source
      }), Object.freeze)
        Object.freeze(element.props), Object.freeze(element);
      return element;
    };
    function createElement(type, config, children) {
      var propName, props = {}, key = null, ref = null, self = null, source = null;
      if (config != null) {
        if (hasValidRef(config))
          ref = config.ref, warnIfStringRefCannotBeAutoConverted(config);
        if (hasValidKey(config))
          checkKeyStringCoercion(config.key), key = "" + config.key;
        self = config.__self === void 0 ? null : config.__self, source = config.__source === void 0 ? null : config.__source;
        for (propName in config)
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName))
            props[propName] = config[propName];
      }
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1)
        props.children = children;
      else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0;i < childrenLength; i++)
          childArray[i] = arguments[i + 2];
        if (Object.freeze)
          Object.freeze(childArray);
        props.children = childArray;
      }
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps)
          if (props[propName] === void 0)
            props[propName] = defaultProps[propName];
      }
      if (key || ref) {
        var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
        if (key)
          defineKeyPropWarningGetter(props, displayName);
        if (ref)
          defineRefPropWarningGetter(props, displayName);
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    function cloneElement(element, config, children) {
      if (element === null || element === void 0)
        throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
      var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self = element._self, source = element._source, owner = element._owner;
      if (config != null) {
        if (hasValidRef(config))
          ref = config.ref, owner = ReactCurrentOwner.current;
        if (hasValidKey(config))
          checkKeyStringCoercion(config.key), key = "" + config.key;
        var defaultProps;
        if (element.type && element.type.defaultProps)
          defaultProps = element.type.defaultProps;
        for (propName in config)
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName))
            if (config[propName] === void 0 && defaultProps !== void 0)
              props[propName] = defaultProps[propName];
            else
              props[propName] = config[propName];
      }
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1)
        props.children = children;
      else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0;i < childrenLength; i++)
          childArray[i] = arguments[i + 2];
        props.children = childArray;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = ".", SUBSEPARATOR = ":";
    function escape(key) {
      var escapeRegex = /[=:]/g, escaperLookup = {
        "=": "=0",
        ":": "=2"
      }, escapedString = key.replace(escapeRegex, function(match) {
        return escaperLookup[match];
      });
      return "$" + escapedString;
    }
    var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return text.replace(userProvidedKeyEscapeRegex, "$&/");
    }
    function getElementKey(element, index) {
      if (typeof element === "object" && element !== null && element.key != null)
        return checkKeyStringCoercion(element.key), escape("" + element.key);
      return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === "undefined" || type === "boolean")
        children = null;
      var invokeCallback = !1;
      if (children === null)
        invokeCallback = !0;
      else
        switch (type) {
          case "string":
          case "number":
            invokeCallback = !0;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = !0;
            }
        }
      if (invokeCallback) {
        var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
        if (isArray(mappedChild)) {
          var escapedChildKey = "";
          if (childKey != null)
            escapedChildKey = escapeUserProvidedKey(childKey) + "/";
          mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            if (mappedChild.key && (!_child || _child.key !== mappedChild.key))
              checkKeyStringCoercion(mappedChild.key);
            mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
          }
          array.push(mappedChild);
        }
        return 1;
      }
      var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
      if (isArray(children))
        for (var i = 0;i < children.length; i++)
          child = children[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === "function") {
          var iterableChildren = children;
          if (iteratorFn === iterableChildren.entries) {
            if (!didWarnAboutMaps)
              warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            didWarnAboutMaps = !0;
          }
          var iterator = iteratorFn.call(iterableChildren), step, ii = 0;
          while (!(step = iterator.next()).done)
            child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        } else if (type === "object") {
          var childrenString = String(children);
          throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
        }
      }
      return subtreeCount;
    }
    function mapChildren(children, func, context) {
      if (children == null)
        return children;
      var result = [], count = 0;
      return mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      }), result;
    }
    function countChildren(children) {
      var n = 0;
      return mapChildren(children, function() {
        n++;
      }), n;
    }
    function forEachChildren(children, forEachFunc, forEachContext) {
      mapChildren(children, function() {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    }
    function toArray(children) {
      return mapChildren(children, function(child) {
        return child;
      }) || [];
    }
    function onlyChild(children) {
      if (!isValidElement(children))
        throw new Error("React.Children.only expected to receive a single React element child.");
      return children;
    }
    function createContext(defaultValue) {
      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
      {
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context
        };
        Object.defineProperties(Consumer, {
          Provider: {
            get: function() {
              if (!hasWarnedAboutUsingConsumerProvider)
                hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
              return context.Provider;
            },
            set: function(_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function() {
              return context._currentValue;
            },
            set: function(_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function() {
              return context._currentValue2;
            },
            set: function(_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function() {
              return context._threadCount;
            },
            set: function(_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function() {
              if (!hasWarnedAboutUsingNestedContextConsumers)
                hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              return context.Consumer;
            }
          },
          displayName: {
            get: function() {
              return context.displayName;
            },
            set: function(displayName) {
              if (!hasWarnedAboutDisplayNameOnConsumer)
                warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0;
            }
          }
        }), context.Consumer = Consumer;
      }
      return context._currentRenderer = null, context._currentRenderer2 = null, context;
    }
    var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
    function lazyInitializer(payload) {
      if (payload._status === Uninitialized) {
        var ctor = payload._result, thenable = ctor();
        if (thenable.then(function(moduleObject2) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            var resolved = payload;
            resolved._status = Resolved, resolved._result = moduleObject2;
          }
        }, function(error2) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            var rejected = payload;
            rejected._status = Rejected, rejected._result = error2;
          }
        }), payload._status === Uninitialized) {
          var pending = payload;
          pending._status = Pending, pending._result = thenable;
        }
      }
      if (payload._status === Resolved) {
        var moduleObject = payload._result;
        if (moduleObject === void 0)
          error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
        if (!("default" in moduleObject))
          error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
        return moduleObject.default;
      } else
        throw payload._result;
    }
    function lazy(ctor) {
      var payload = {
        _status: Uninitialized,
        _result: ctor
      }, lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: payload,
        _init: lazyInitializer
      };
      {
        var defaultProps, propTypes;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: !0,
            get: function() {
              return defaultProps;
            },
            set: function(newDefaultProps) {
              error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                enumerable: !0
              });
            }
          },
          propTypes: {
            configurable: !0,
            get: function() {
              return propTypes;
            },
            set: function(newPropTypes) {
              error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                enumerable: !0
              });
            }
          }
        });
      }
      return lazyType;
    }
    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE)
          error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== "function")
          error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
        else if (render.length !== 0 && render.length !== 2)
          error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null)
            error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
      }
      var elementType = {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render
      };
      {
        var ownName;
        Object.defineProperty(elementType, "displayName", {
          enumerable: !1,
          configurable: !0,
          get: function() {
            return ownName;
          },
          set: function(name) {
            if (ownName = name, !render.name && !render.displayName)
              render.displayName = name;
          }
        });
      }
      return elementType;
    }
    var REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function")
        return !0;
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing)
        return !0;
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0)
          return !0;
      }
      return !1;
    }
    function memo(type, compare) {
      if (!isValidElementType(type))
        error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
      var elementType = {
        $$typeof: REACT_MEMO_TYPE,
        type,
        compare: compare === void 0 ? null : compare
      };
      {
        var ownName;
        Object.defineProperty(elementType, "displayName", {
          enumerable: !1,
          configurable: !0,
          get: function() {
            return ownName;
          },
          set: function(name) {
            if (ownName = name, !type.name && !type.displayName)
              type.displayName = name;
          }
        });
      }
      return elementType;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      if (dispatcher === null)
        error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return dispatcher;
    }
    function useContext(Context) {
      var dispatcher = resolveDispatcher();
      if (Context._context !== void 0) {
        var realContext = Context._context;
        if (realContext.Consumer === Context)
          error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
        else if (realContext.Provider === Context)
          error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
      }
      return dispatcher.useContext(Context);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    function useTransition() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useDeferredValue(value);
    }
    function useId() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = !0;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
          var props = {
            configurable: !0,
            enumerable: !0,
            value: disabledLog,
            writable: !0
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        if (disabledDepth--, disabledDepth === 0) {
          var props = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0)
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0)
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        return "\n" + prefix + name;
      }
    }
    var reentry = !1, componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0)
          return frame;
      }
      var control;
      reentry = !0;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          if (Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
            c--;
          for (;s >= 1 && c >= 0; s--, c--)
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1)
                do
                  if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>"))
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    if (typeof fn === "function")
                      componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (s >= 1 && c >= 0);
              break;
            }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      if (typeof fn === "function")
        componentFrameCache.set(fn, syntheticFrame);
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      return describeNativeComponentFrame(fn, !1);
    }
    function shouldConstruct(Component2) {
      var prototype = Component2.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null)
        return "";
      if (typeof type === "function")
        return describeNativeComponentFrame(type, shouldConstruct(type));
      if (typeof type === "string")
        return describeBuiltInComponentFrame(type);
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      return "";
    }
    var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
      } else
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs)
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw err.name = "Invariant Violation", err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error))
              setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null);
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures))
              loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null);
          }
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      if (element) {
        var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        setExtraStackFrame(stack);
      } else
        setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown = !1;
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (name)
          return "\n\nCheck the render method of `" + name + "`.";
      }
      return "";
    }
    function getSourceInfoErrorAddendum(source) {
      if (source !== void 0) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
        return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
      }
      return "";
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== void 0)
        return getSourceInfoErrorAddendum(elementProps.__source);
      return "";
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();
      if (!info) {
        var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
        if (parentName)
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
      return info;
    }
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null)
        return;
      element._store.validated = !0;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo])
        return;
      ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
      var childOwner = "";
      if (element && element._owner && element._owner !== ReactCurrentOwner.current)
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
      setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
    }
    function validateChildKeys(node, parentType) {
      if (typeof node !== "object")
        return;
      if (isArray(node))
        for (var i = 0;i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child))
            validateExplicitKey(child, parentType);
        }
      else if (isValidElement(node)) {
        if (node._store)
          node._store.validated = !0;
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === "function") {
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node), step;
            while (!(step = iterator.next()).done)
              if (isValidElement(step.value))
                validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string")
          return;
        var propTypes;
        if (typeof type === "function")
          propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
          propTypes = type.propTypes;
        else
          return;
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = !0;
          var _name = getComponentNameFromType(type);
          error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved)
          error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0;i < keys.length; i++) {
          var key = keys[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null)
          setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null);
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);
      if (!validType) {
        var info = "";
        if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0)
          info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
        if (sourceInfo)
          info += sourceInfo;
        else
          info += getDeclarationErrorAddendum();
        var typeString;
        if (type === null)
          typeString = "null";
        else if (isArray(type))
          typeString = "array";
        else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE)
          typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?";
        else
          typeString = typeof type;
        error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
      }
      var element = createElement.apply(this, arguments);
      if (element == null)
        return element;
      if (validType)
        for (var i = 2;i < arguments.length; i++)
          validateChildKeys(arguments[i], type);
      if (type === REACT_FRAGMENT_TYPE)
        validateFragmentProps(element);
      else
        validatePropTypes(element);
      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = !1;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      {
        if (!didWarnAboutDeprecatedCreateFactory)
          didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        });
      }
      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2;i < arguments.length; i++)
        validateChildKeys(arguments[i], newElement.type);
      return validatePropTypes(newElement), newElement;
    }
    function startTransition(scope, options) {
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = {};
      var currentTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set;
      try {
        scope();
      } finally {
        if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
          var updatedFibersCount = currentTransition._updatedFibers.size;
          if (updatedFibersCount > 10)
            warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
          currentTransition._updatedFibers.clear();
        }
      }
    }
    var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
    function enqueueTask(task) {
      if (enqueueTaskImpl === null)
        try {
          var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module && module[requireString];
          enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function(callback) {
            if (didWarnAboutMessageChannel === !1) {
              if (didWarnAboutMessageChannel = !0, typeof MessageChannel === "undefined")
                error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
            }
            var channel = new MessageChannel;
            channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
          };
        }
      return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0, didWarnNoAwaitAct = !1;
    function act(callback) {
      {
        var prevActScopeDepth = actScopeDepth;
        if (actScopeDepth++, ReactCurrentActQueue.current === null)
          ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
        try {
          if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null)
              ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue);
          }
        } catch (error2) {
          throw popActScope(prevActScopeDepth), error2;
        } finally {
          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === "object" && typeof result.then === "function") {
          var thenableResult = result, wasAwaited = !1, thenable = {
            then: function(resolve, reject) {
              wasAwaited = !0, thenableResult.then(function(returnValue2) {
                if (popActScope(prevActScopeDepth), actScopeDepth === 0)
                  recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                else
                  resolve(returnValue2);
              }, function(error2) {
                popActScope(prevActScopeDepth), reject(error2);
              });
            }
          };
          if (!didWarnNoAwaitAct && typeof Promise !== "undefined")
            Promise.resolve().then(function() {
            }).then(function() {
              if (!wasAwaited)
                didWarnNoAwaitAct = !0, error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
            });
          return thenable;
        } else {
          var returnValue = result;
          if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
            var _queue = ReactCurrentActQueue.current;
            if (_queue !== null)
              flushActQueue(_queue), ReactCurrentActQueue.current = null;
            var _thenable = {
              then: function(resolve, reject) {
                if (ReactCurrentActQueue.current === null)
                  ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                else
                  resolve(returnValue);
              }
            };
            return _thenable;
          } else {
            var _thenable2 = {
              then: function(resolve, reject) {
                resolve(returnValue);
              }
            };
            return _thenable2;
          }
        }
      }
    }
    function popActScope(prevActScopeDepth) {
      {
        if (prevActScopeDepth !== actScopeDepth - 1)
          error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
      }
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null)
          try {
            flushActQueue(queue), enqueueTask(function() {
              if (queue.length === 0)
                ReactCurrentActQueue.current = null, resolve(returnValue);
              else
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
          } catch (error2) {
            reject(error2);
          }
        else
          resolve(returnValue);
      }
    }
    var isFlushing = !1;
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = !0;
        var i = 0;
        try {
          for (;i < queue.length; i++) {
            var callback = queue[i];
            do
              callback = callback(!0);
            while (callback !== null);
          }
          queue.length = 0;
        } catch (error2) {
          throw queue = queue.slice(i + 1), error2;
        } finally {
          isFlushing = !1;
        }
      }
    }
    var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray,
      only: onlyChild
    };
    if (exports.Children = Children, exports.Component = Component, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.act = act, exports.cloneElement = cloneElement$1, exports.createContext = createContext, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef, exports.isValidElement = isValidElement, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback, exports.useContext = useContext, exports.useDebugValue = useDebugValue, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect, exports.useId = useId, exports.useImperativeHandle = useImperativeHandle, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect, exports.useMemo = useMemo, exports.useReducer = useReducer, exports.useRef = useRef, exports.useState = useState, exports.useSyncExternalStore = useSyncExternalStore, exports.useTransition = useTransition, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
  })();
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
    var enableSchedulerDebugging = !1, enableProfiling = !1, frameYieldMs = 5;
    function push(heap, node) {
      var index = heap.length;
      heap.push(node), siftUp(heap, node, index);
    }
    function peek(heap) {
      return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
      if (heap.length === 0)
        return null;
      var first = heap[0], last = heap.pop();
      if (last !== first)
        heap[0] = last, siftDown(heap, last, 0);
      return first;
    }
    function siftUp(heap, node, i) {
      var index = i;
      while (index > 0) {
        var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
        if (compare(parent, node) > 0)
          heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
        else
          return;
      }
    }
    function siftDown(heap, node, i) {
      var index = i, length = heap.length, halfLength = length >>> 1;
      while (index < halfLength) {
        var leftIndex = (index + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
        if (compare(left, node) < 0)
          if (rightIndex < length && compare(right, left) < 0)
            heap[index] = right, heap[rightIndex] = node, index = rightIndex;
          else
            heap[index] = left, heap[leftIndex] = node, index = leftIndex;
        else if (rightIndex < length && compare(right, node) < 0)
          heap[index] = right, heap[rightIndex] = node, index = rightIndex;
        else
          return;
      }
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return diff !== 0 ? diff : a.id - b.id;
    }
    var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
    if (hasPerformanceNow) {
      var localPerformance = performance;
      exports.unstable_now = function() {
        return localPerformance.now();
      };
    } else {
      var localDate = Date, initialTime = localDate.now();
      exports.unstable_now = function() {
        return localDate.now() - initialTime;
      };
    }
    var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5000, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = typeof setTimeout === "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null, isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
      var timer = peek(timerQueue);
      while (timer !== null) {
        if (timer.callback === null)
          pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else
          return;
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      if (isHostTimeoutScheduled = !1, advanceTimers(currentTime), !isHostCallbackScheduled)
        if (peek(taskQueue) !== null)
          isHostCallbackScheduled = !0, requestHostCallback(flushWork);
        else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null)
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
    }
    function flushWork(hasTimeRemaining, initialTime2) {
      if (isHostCallbackScheduled = !1, isHostTimeoutScheduled)
        isHostTimeoutScheduled = !1, cancelHostTimeout();
      isPerformingWork = !0;
      var previousPriorityLevel = currentPriorityLevel;
      try {
        if (enableProfiling)
          try {
            return workLoop(hasTimeRemaining, initialTime2);
          } catch (error) {
            if (currentTask !== null) {
              var currentTime = exports.unstable_now();
              markTaskErrored(currentTask, currentTime), currentTask.isQueued = !1;
            }
            throw error;
          }
        else
          return workLoop(hasTimeRemaining, initialTime2);
      } finally {
        currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
      }
    }
    function workLoop(hasTimeRemaining, initialTime2) {
      var currentTime = initialTime2;
      advanceTimers(currentTime), currentTask = peek(taskQueue);
      while (currentTask !== null && !enableSchedulerDebugging) {
        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost()))
          break;
        var callback = currentTask.callback;
        if (typeof callback === "function") {
          currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
          if (currentTime = exports.unstable_now(), typeof continuationCallback === "function")
            currentTask.callback = continuationCallback;
          else if (currentTask === peek(taskQueue))
            pop(taskQueue);
          advanceTimers(currentTime);
        } else
          pop(taskQueue);
        currentTask = peek(taskQueue);
      }
      if (currentTask !== null)
        return !0;
      else {
        var firstTimer = peek(timerQueue);
        if (firstTimer !== null)
          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        return !1;
      }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_next(eventHandler) {
      var priorityLevel;
      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          priorityLevel = NormalPriority;
          break;
        default:
          priorityLevel = currentPriorityLevel;
          break;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function() {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
      var currentTime = exports.unstable_now(), startTime2;
      if (typeof options === "object" && options !== null) {
        var delay = options.delay;
        if (typeof delay === "number" && delay > 0)
          startTime2 = currentTime + delay;
        else
          startTime2 = currentTime;
      } else
        startTime2 = currentTime;
      var timeout;
      switch (priorityLevel) {
        case ImmediatePriority:
          timeout = IMMEDIATE_PRIORITY_TIMEOUT;
          break;
        case UserBlockingPriority:
          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
          break;
        case IdlePriority:
          timeout = IDLE_PRIORITY_TIMEOUT;
          break;
        case LowPriority:
          timeout = LOW_PRIORITY_TIMEOUT;
          break;
        case NormalPriority:
        default:
          timeout = NORMAL_PRIORITY_TIMEOUT;
          break;
      }
      var expirationTime = startTime2 + timeout, newTask = {
        id: taskIdCounter++,
        callback,
        priorityLevel,
        startTime: startTime2,
        expirationTime,
        sortIndex: -1
      };
      if (startTime2 > currentTime) {
        if (newTask.sortIndex = startTime2, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue)) {
          if (isHostTimeoutScheduled)
            cancelHostTimeout();
          else
            isHostTimeoutScheduled = !0;
          requestHostTimeout(handleTimeout, startTime2 - currentTime);
        }
      } else if (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork)
        isHostCallbackScheduled = !0, requestHostCallback(flushWork);
      return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
      if (!isHostCallbackScheduled && !isPerformingWork)
        isHostCallbackScheduled = !0, requestHostCallback(flushWork);
    }
    function unstable_getFirstCallbackNode() {
      return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
      task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }
    var isMessageLoopRunning = !1, scheduledHostCallback = null, taskTimeoutID = -1, frameInterval = frameYieldMs, startTime = -1;
    function shouldYieldToHost() {
      var timeElapsed = exports.unstable_now() - startTime;
      if (timeElapsed < frameInterval)
        return !1;
      return !0;
    }
    function requestPaint() {
    }
    function forceFrameRate(fps) {
      if (fps < 0 || fps > 125) {
        console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
        return;
      }
      if (fps > 0)
        frameInterval = Math.floor(1000 / fps);
      else
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now();
        startTime = currentTime;
        var hasTimeRemaining = !0, hasMoreWork = !0;
        try {
          hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
        } finally {
          if (hasMoreWork)
            schedulePerformWorkUntilDeadline();
          else
            isMessageLoopRunning = !1, scheduledHostCallback = null;
        }
      } else
        isMessageLoopRunning = !1;
    }, schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === "function")
      schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
      };
    else if (typeof MessageChannel !== "undefined") {
      var channel = new MessageChannel, port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline, schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
      };
    } else
      schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
      };
    function requestHostCallback(callback) {
      if (scheduledHostCallback = callback, !isMessageLoopRunning)
        isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline();
    }
    function requestHostTimeout(callback, ms) {
      taskTimeoutID = localSetTimeout(function() {
        callback(exports.unstable_now());
      }, ms);
    }
    function cancelHostTimeout() {
      localClearTimeout(taskTimeoutID), taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint, unstable_Profiling = null;
    if (exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_forceFrameRate = forceFrameRate, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_shouldYield = shouldYieldToHost, exports.unstable_wrapCallback = unstable_wrapCallback, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
  })();
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react_development(), 1), Scheduler = __toESM(require_scheduler_development(), 1);
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = !1;
    function setSuppressWarning(newSuppressWarning) {
      suppressWarning = newSuppressWarning;
    }
    function warn(format) {
      if (!suppressWarning) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++)
          args[_key - 1] = arguments[_key];
        printWarning("warn", format, args);
      }
    }
    function error(format) {
      if (!suppressWarning) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++)
          args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "")
          format += "%s", args = args.concat([stack]);
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, ScopeComponent = 21, OffscreenComponent = 22, LegacyHiddenComponent = 23, CacheComponent = 24, TracingMarkerComponent = 25, enableClientRenderFallbackOnTextMismatch = !0, enableNewReconciler = !1, enableLazyContextPropagation = !1, enableLegacyHidden = !1, enableSuspenseAvoidThisFallback = !1, disableCommentsAsDOMContainers = !0, enableCustomElementPropertySupport = !1, warnAboutStringRefs = !0, enableSchedulingProfiler = !0, enableProfilerTimer = !0, enableProfilerCommitHooks = !0, allNativeEvents = /* @__PURE__ */ new Set, registrationNameDependencies = {}, possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      if (registrationNameDependencies[registrationName])
        error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        if (possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick")
          possibleRegistrationNames.ondblclick = registrationName;
      }
      for (var i = 0;i < dependencies.length; i++)
        allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined", hasOwnProperty = Object.prototype.hasOwnProperty;
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      try {
        return testStringCoercion(value), !1;
      } catch (e) {
        return !0;
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      if (willCoercionThrow(value))
        return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
    }
    function checkKeyStringCoercion(value) {
      if (willCoercionThrow(value))
        return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
    }
    function checkPropStringCoercion(value, propName) {
      if (willCoercionThrow(value))
        return error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      if (willCoercionThrow(value))
        return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
    }
    function checkHtmlStringCoercion(value) {
      if (willCoercionThrow(value))
        return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
    }
    function checkFormFieldValueStringCoercion(value) {
      if (willCoercionThrow(value))
        return error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
    }
    var RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return !0;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
        return !1;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return validatedAttributeNameCache[attributeName] = !0, !0;
      return illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null)
        return propertyInfo.type === RESERVED;
      if (isCustomComponentTag)
        return !1;
      if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))
        return !0;
      return !1;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED)
        return !1;
      switch (typeof value) {
        case "function":
        case "symbol":
          return !0;
        case "boolean": {
          if (isCustomComponentTag)
            return !1;
          if (propertyInfo !== null)
            return !propertyInfo.acceptsBooleans;
          else {
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
        }
        default:
          return !1;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === "undefined")
        return !0;
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
        return !0;
      if (isCustomComponentTag)
        return !1;
      if (propertyInfo !== null)
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === !1;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      return !1;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
    }
    var properties = {}, reservedProps = [
      "children",
      "dangerouslySetInnerHTML",
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    reservedProps.forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, !1, name, null, !1, !1);
    }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, !1, attributeName, null, !1, !1);
    }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, !1, name.toLowerCase(), null, !1, !1);
    }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, !1, name, null, !1, !1);
    }), [
      "allowFullScreen",
      "async",
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      "itemScope"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, !1, name.toLowerCase(), null, !1, !1);
    }), [
      "checked",
      "multiple",
      "muted",
      "selected"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, !0, name, null, !1, !1);
    }), [
      "capture",
      "download"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, !1, name, null, !1, !1);
    }), [
      "cols",
      "rows",
      "size",
      "span"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, !1, name, null, !1, !1);
    }), ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, !1, name.toLowerCase(), null, !1, !1);
    });
    var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
      return token[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, !1, attributeName, null, !1, !1);
    }), [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, !1, attributeName, "http://www.w3.org/1999/xlink", !1, !1);
    }), [
      "xml:base",
      "xml:lang",
      "xml:space"
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, !1, attributeName, "http://www.w3.org/XML/1998/namespace", !1, !1);
    }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, !1, attributeName.toLowerCase(), null, !1, !1);
    });
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, !1, attributeName.toLowerCase(), null, !0, !0);
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
    function sanitizeURL(url) {
      if (!didWarn && isJavaScriptProtocol.test(url))
        didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
    }
    function getValueForProperty(node, name, expected, propertyInfo) {
      if (propertyInfo.mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        return node[propertyName];
      } else {
        if (checkAttributeStringCoercion(expected, name), propertyInfo.sanitizeURL)
          sanitizeURL("" + expected);
        var attributeName = propertyInfo.attributeName, stringValue = null;
        if (propertyInfo.type === OVERLOADED_BOOLEAN) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === "")
              return !0;
            if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
              return value;
            if (value === "" + expected)
              return expected;
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
            return node.getAttribute(attributeName);
          if (propertyInfo.type === BOOLEAN)
            return expected;
          stringValue = node.getAttribute(attributeName);
        }
        if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
          return stringValue === null ? expected : stringValue;
        else if (stringValue === "" + expected)
          return expected;
        else
          return stringValue;
      }
    }
    function getValueForAttribute(node, name, expected, isCustomComponentTag) {
      {
        if (!isAttributeNameSafe(name))
          return;
        if (!node.hasAttribute(name))
          return expected === void 0 ? void 0 : null;
        var value = node.getAttribute(name);
        if (checkAttributeStringCoercion(expected, name), value === "" + expected)
          return expected;
        return value;
      }
    }
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag))
        return;
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag))
        value = null;
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null)
            node.removeAttribute(_attributeName);
          else
            checkAttributeStringCoercion(value, name), node.setAttribute(_attributeName, "" + value);
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? !1 : "";
        } else
          node[propertyName] = value;
        return;
      }
      var { attributeName, attributeNamespace } = propertyInfo;
      if (value === null)
        node.removeAttribute(attributeName);
      else {
        var _type = propertyInfo.type, attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === !0)
          attributeValue = "";
        else if (checkAttributeStringCoercion(value, attributeName), attributeValue = "" + value, propertyInfo.sanitizeURL)
          sanitizeURL(attributeValue.toString());
        if (attributeNamespace)
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        else
          node.setAttribute(attributeName, attributeValue);
      }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_CACHE_TYPE = Symbol.for("react.cache"), REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function")
        return maybeIterator;
      return null;
    }
    var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = !0;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
          var props = {
            configurable: !0,
            enumerable: !0,
            value: disabledLog,
            writable: !0
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        if (disabledDepth--, disabledDepth === 0) {
          var props = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0)
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0)
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        return "\n" + prefix + name;
      }
    }
    var reentry = !1, componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0)
          return frame;
      }
      var control;
      reentry = !0;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          if (Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
            c--;
          for (;s >= 1 && c >= 0; s--, c--)
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1)
                do
                  if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>"))
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    if (typeof fn === "function")
                      componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (s >= 1 && c >= 0);
              break;
            }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      if (typeof fn === "function")
        componentFrameCache.set(fn, syntheticFrame);
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      return describeNativeComponentFrame(ctor, !0);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      return describeNativeComponentFrame(fn, !1);
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null)
        return "";
      if (typeof type === "function")
        return describeNativeComponentFrame(type, shouldConstruct(type));
      if (typeof type === "string")
        return describeBuiltInComponentFrame(type);
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      return "";
    }
    function describeFiber(fiber) {
      var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source = fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame("Lazy");
        case SuspenseComponent:
          return describeBuiltInComponentFrame("Suspense");
        case SuspenseListComponent:
          return describeBuiltInComponentFrame("SuspenseList");
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "", node = workInProgress2;
        do
          info += describeFiber(node), node = node.return;
        while (node);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName)
        return displayName;
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null)
        return null;
      if (typeof type.tag === "number")
        error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if (typeof type === "function")
        return type.displayName || type.name || null;
      if (typeof type === "string")
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object")
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null)
              return outerName;
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
      var { tag, type } = fiber;
      switch (tag) {
        case CacheComponent:
          return "Cache";
        case ContextConsumer:
          var context = type;
          return getContextName$1(context) + ".Consumer";
        case ContextProvider:
          var provider = type;
          return getContextName$1(provider._context) + ".Provider";
        case DehydratedFragment:
          return "DehydratedFragment";
        case ForwardRef:
          return getWrappedName$1(type, type.render, "ForwardRef");
        case Fragment:
          return "Fragment";
        case HostComponent:
          return type;
        case HostPortal:
          return "Portal";
        case HostRoot:
          return "Root";
        case HostText:
          return "Text";
        case LazyComponent:
          return getComponentNameFromType(type);
        case Mode:
          if (type === REACT_STRICT_MODE_TYPE)
            return "StrictMode";
          return "Mode";
        case OffscreenComponent:
          return "Offscreen";
        case Profiler:
          return "Profiler";
        case ScopeComponent:
          return "Scope";
        case SuspenseComponent:
          return "Suspense";
        case SuspenseListComponent:
          return "SuspenseList";
        case TracingMarkerComponent:
          return "TracingMarker";
        case ClassComponent:
        case FunctionComponent:
        case IncompleteClassComponent:
        case IndeterminateComponent:
        case MemoComponent:
        case SimpleMemoComponent:
          if (typeof type === "function")
            return type.displayName || type.name || null;
          if (typeof type === "string")
            return type;
          break;
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null)
          return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined")
          return getComponentNameFromFiber(owner);
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null)
          return "";
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = !1;
    }
    function setCurrentFiber(fiber) {
      ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev, current = fiber, isRendering = !1;
    }
    function getCurrentFiber() {
      return current;
    }
    function setIsRendering(rendering) {
      isRendering = rendering;
    }
    function toString(value) {
      return "" + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          return checkFormFieldValueStringCoercion(value), value;
        default:
          return "";
      }
    }
    var hasReadOnlyValue = {
      button: !0,
      checkbox: !0,
      image: !0,
      hidden: !0,
      radio: !0,
      reset: !0,
      submit: !0
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null))
          error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null))
          error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
    }
    function isCheckable(elem) {
      var { type, nodeName } = elem;
      return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
      return node._valueTracker;
    }
    function detachTracker(node) {
      node._valueTracker = null;
    }
    function getValueFromNode(node) {
      var value = "";
      if (!node)
        return value;
      if (isCheckable(node))
        value = node.checked ? "true" : "false";
      else
        value = node.value;
      return value;
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      checkFormFieldValueStringCoercion(node[valueField]);
      var currentValue = "" + node[valueField];
      if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function")
        return;
      var { get: get2, set: set2 } = descriptor;
      Object.defineProperty(node, valueField, {
        configurable: !0,
        get: function() {
          return get2.call(this);
        },
        set: function(value) {
          checkFormFieldValueStringCoercion(value), currentValue = "" + value, set2.call(this, value);
        }
      }), Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value) {
          checkFormFieldValueStringCoercion(value), currentValue = "" + value;
        },
        stopTracking: function() {
          detachTracker(node), delete node[valueField];
        }
      };
      return tracker;
    }
    function track(node) {
      if (getTracker(node))
        return;
      node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
      if (!node)
        return !1;
      var tracker = getTracker(node);
      if (!tracker)
        return !0;
      var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
      if (nextValue !== lastValue)
        return tracker.setValue(nextValue), !0;
      return !1;
    }
    function getActiveElement(doc) {
      if (doc = doc || (typeof document !== "undefined" ? document : void 0), typeof doc === "undefined")
        return null;
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1;
    function isControlled(props) {
      var usesChecked = props.type === "checkbox" || props.type === "radio";
      return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
      var node = element, checked = props.checked, hostProps = assign({}, props, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        if (checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked)
          error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0;
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue)
          error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = !0;
      }
      var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node = element, checked = props.checked;
      if (checked != null)
        setValueForProperty(node, "checked", checked, !1);
    }
    function updateWrapper(element, props) {
      var node = element;
      {
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled)
          error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0;
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled)
          error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0;
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value), type = props.type;
      if (value != null) {
        if (type === "number") {
          if (value === 0 && node.value === "" || node.value != value)
            node.value = toString(value);
        } else if (node.value !== toString(value))
          node.value = toString(value);
      } else if (type === "submit" || type === "reset") {
        node.removeAttribute("value");
        return;
      }
      if (props.hasOwnProperty("value"))
        setDefaultValue(node, props.type, value);
      else if (props.hasOwnProperty("defaultValue"))
        setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
      if (props.checked == null && props.defaultChecked != null)
        node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating2) {
      var node = element;
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type, isButton = type === "submit" || type === "reset";
        if (isButton && (props.value === void 0 || props.value === null))
          return;
        var initialValue = toString(node._wrapperState.initialValue);
        if (!isHydrating2) {
          if (initialValue !== node.value)
            node.value = initialValue;
        }
        node.defaultValue = initialValue;
      }
      var name = node.name;
      if (name !== "")
        node.name = "";
      if (node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name !== "")
        node.name = name;
    }
    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props), updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === "radio" && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode)
          queryRoot = queryRoot.parentNode;
        checkAttributeStringCoercion(name, "name");
        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
        for (var i = 0;i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form)
            continue;
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps)
            throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
        }
      }
    }
    function setDefaultValue(node, type, value) {
      if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
        if (value == null)
          node.defaultValue = toString(node._wrapperState.initialValue);
        else if (node.defaultValue !== toString(value))
          node.defaultValue = toString(value);
      }
    }
    var didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1;
    function validateProps(element, props) {
      {
        if (props.value == null) {
          if (typeof props.children === "object" && props.children !== null)
            React.Children.forEach(props.children, function(child) {
              if (child == null)
                return;
              if (typeof child === "string" || typeof child === "number")
                return;
              if (!didWarnInvalidChild)
                didWarnInvalidChild = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
            });
          else if (props.dangerouslySetInnerHTML != null) {
            if (!didWarnInvalidInnerHTML)
              didWarnInvalidInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
          }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption)
          error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0;
      }
    }
    function postMountWrapper$1(element, props) {
      if (props.value != null)
        element.setAttribute("value", toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1 = !1;
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName)
        return "\n\nCheck the render method of `" + ownerName + "`.";
      return "";
    }
    var valuePropNames = ["value", "defaultValue"];
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps("select", props);
        for (var i = 0;i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null)
            continue;
          var propNameIsArray = isArray(props[propName]);
          if (props.multiple && !propNameIsArray)
            error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
          else if (!props.multiple && propNameIsArray)
            error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
      }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options2 = node.options;
      if (multiple) {
        var selectedValues = propValue, selectedValue = {};
        for (var i = 0;i < selectedValues.length; i++)
          selectedValue["$" + selectedValues[i]] = !0;
        for (var _i = 0;_i < options2.length; _i++) {
          var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
          if (options2[_i].selected !== selected)
            options2[_i].selected = selected;
          if (selected && setDefaultSelected)
            options2[_i].defaultSelected = !0;
        }
      } else {
        var _selectedValue = toString(getToStringValue(propValue)), defaultSelected = null;
        for (var _i2 = 0;_i2 < options2.length; _i2++) {
          if (options2[_i2].value === _selectedValue) {
            if (options2[_i2].selected = !0, setDefaultSelected)
              options2[_i2].defaultSelected = !0;
            return;
          }
          if (defaultSelected === null && !options2[_i2].disabled)
            defaultSelected = options2[_i2];
        }
        if (defaultSelected !== null)
          defaultSelected.selected = !0;
      }
    }
    function getHostProps$1(element, props) {
      return assign({}, props, {
        value: void 0
      });
    }
    function initWrapperState$1(element, props) {
      var node = element;
      if (checkSelectPropTypes(props), node._wrapperState = {
        wasMultiple: !!props.multiple
      }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1)
        error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0;
    }
    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;
      if (value != null)
        updateOptions(node, !!props.multiple, value, !1);
      else if (props.defaultValue != null)
        updateOptions(node, !!props.multiple, props.defaultValue, !0);
    }
    function postUpdateWrapper(element, props) {
      var node = element, wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null)
        updateOptions(node, !!props.multiple, value, !1);
      else if (wasMultiple !== !!props.multiple)
        if (props.defaultValue != null)
          updateOptions(node, !!props.multiple, props.defaultValue, !0);
        else
          updateOptions(node, !!props.multiple, props.multiple ? [] : "", !1);
    }
    function restoreControlledState$1(element, props) {
      var node = element, value = props.value;
      if (value != null)
        updateOptions(node, !!props.multiple, value, !1);
    }
    var didWarnValDefaultVal = !1;
    function getHostProps$2(element, props) {
      var node = element;
      if (props.dangerouslySetInnerHTML != null)
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      var hostProps = assign({}, props, {
        value: void 0,
        defaultValue: void 0,
        children: toString(node._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node = element;
      if (checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal)
        error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0;
      var initialValue = props.value;
      if (initialValue == null) {
        var { children, defaultValue } = props;
        if (children != null) {
          error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          {
            if (defaultValue != null)
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (isArray(children)) {
              if (children.length > 1)
                throw new Error("<textarea> can only have at most one child.");
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null)
          defaultValue = "";
        initialValue = defaultValue;
      }
      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        var newValue = toString(value);
        if (newValue !== node.value)
          node.value = newValue;
        if (props.defaultValue == null && node.defaultValue !== newValue)
          node.defaultValue = newValue;
      }
      if (defaultValue != null)
        node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
      var node = element, textContent = node.textContent;
      if (textContent === node._wrapperState.initialValue) {
        if (textContent !== "" && textContent !== null)
          node.value = textContent;
      }
    }
    function restoreControlledState$2(element, props) {
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    function getIntrinsicNamespace(type) {
      switch (type) {
        case "svg":
          return SVG_NAMESPACE;
        case "math":
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE)
        return getIntrinsicNamespace(type);
      if (parentNamespace === SVG_NAMESPACE && type === "foreignObject")
        return HTML_NAMESPACE;
      return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction)
        return function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      else
        return func;
    }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
      if (node.namespaceURI === SVG_NAMESPACE) {
        if (!("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          var svgNode = reusableSVGContainer.firstChild;
          while (node.firstChild)
            node.removeChild(node.firstChild);
          while (svgNode.firstChild)
            node.appendChild(svgNode.firstChild);
          return;
        }
      }
      node.innerHTML = html;
    }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    }, shorthandToLonghand = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    }, isUnitlessNumber = {
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      columns: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridArea: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowSpan: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnSpan: !0,
      gridColumnStart: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0
    };
    function prefixKey(prefix2, key) {
      return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix2) {
        isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
      });
    });
    function dangerousStyleValue(name, value, isCustomProperty) {
      var isEmpty = value == null || typeof value === "boolean" || value === "";
      if (isEmpty)
        return "";
      if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
        return value + "px";
      return checkCSSPropertyStringCoercion(value, name), ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {
    };
    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
          return character.toUpperCase();
        });
      }, warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name])
          return;
        warnedStyleNames[name] = !0, error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
      }, warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name])
          return;
        warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
      }, warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value])
          return;
        warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
      }, warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue)
          return;
        warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name);
      }, warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue)
          return;
        warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name);
      };
      warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1)
          warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name))
          warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value))
          warnStyleValueWithSemicolon(name, value);
        if (typeof value === "number") {
          if (isNaN(value))
            warnStyleValueIsNaN(name, value);
          else if (!isFinite(value))
            warnStyleValueIsInfinity(name, value);
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles) {
      {
        var serialized = "", delimiter = "";
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName))
            continue;
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty), delimiter = ";";
          }
        }
        return serialized || null;
      }
    }
    function setValueForStyles(node, styles) {
      var style2 = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName))
          continue;
        var isCustomProperty = styleName.indexOf("--") === 0;
        if (!isCustomProperty)
          warnValidStyle$1(styleName, styles[styleName]);
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === "float")
          styleName = "cssFloat";
        if (isCustomProperty)
          style2.setProperty(styleName, styleValue);
        else
          style2[styleName] = styleValue;
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === "boolean" || value === "";
    }
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0;i < longhands.length; i++)
          expanded[longhands[i]] = key;
      }
      return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles)
          return;
        var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + "," + correctOriginalKey;
            if (warnedAbout[warningKey])
              continue;
            warnedAbout[warningKey] = !0, error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
          }
        }
      }
    }
    var omittedCloseTags = {
      area: !0,
      base: !0,
      br: !0,
      col: !0,
      embed: !0,
      hr: !0,
      img: !0,
      input: !0,
      keygen: !0,
      link: !0,
      meta: !0,
      param: !0,
      source: !0,
      track: !0,
      wbr: !0
    }, voidElementTags = assign({
      menuitem: !0
    }, omittedCloseTags), HTML = "__html";
    function assertValidProps(tag, props) {
      if (!props)
        return;
      if (voidElementTags[tag]) {
        if (props.children != null || props.dangerouslySetInnerHTML != null)
          throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (props.children != null)
          throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML))
          throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
      }
      if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null)
        error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
      if (props.style != null && typeof props.style !== "object")
        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1)
        return typeof props.is === "string";
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    var possibleStandardNames = {
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    }, ariaProperties = {
      "aria-current": 0,
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      "aria-hidden": 0,
      "aria-invalid": 0,
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
          return !0;
        if (rARIACamel.test(name)) {
          var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null)
            return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
          if (name !== correctName)
            return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null)
            return warnedProperties[name] = !0, !1;
          if (name !== standardName)
            return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
        }
      }
      return !0;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid)
            invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1)
          error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1)
          error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props))
        return;
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = !1;
    function validateProperties$1(type, props) {
      {
        if (type !== "input" && type !== "textarea" && type !== "select")
          return;
        if (props != null && props.value === null && !didWarnValueNull)
          if (didWarnValueNull = !0, type === "select" && props.multiple)
            error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
          else
            error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
      }
    }
    var validateProperty$1 = function() {
    };
    {
      var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
          return !0;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
          return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
        if (eventRegistry != null) {
          var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
          if (registrationNameDependencies2.hasOwnProperty(name))
            return !0;
          var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
          if (registrationName != null)
            return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
          if (EVENT_NAME_REGEX.test(name))
            return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name))
            error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
          return warnedProperties$1[name] = !0, !0;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name))
          return !0;
        if (lowerCasedName === "innerhtml")
          return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
        if (lowerCasedName === "aria")
          return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
        if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string")
          return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
        if (typeof value === "number" && isNaN(value))
          return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
        var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name)
            return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
        } else if (!isReserved && name !== lowerCasedName)
          return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1)) {
          if (value)
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
          else
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          return warnedProperties$1[name] = !0, !0;
        }
        if (isReserved)
          return !0;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1))
          return warnedProperties$1[name] = !0, !1;
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN)
          return error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0, !0;
        return !0;
      };
    }
    var warnUnknownProperties = function(type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid)
            unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1)
          error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1)
          error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props))
        return;
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 2, IS_CAPTURE_PHASE = 4, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE, currentReplayingEvent = null;
    function setReplayingEvent(event) {
      if (currentReplayingEvent !== null)
        error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
      currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
      if (currentReplayingEvent === null)
        error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
      currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
      return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      if (target.correspondingUseElement)
        target = target.correspondingUseElement;
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null, restoreTarget = null, restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance)
        return;
      if (typeof restoreImpl !== "function")
        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var stateNode = internalInstance.stateNode;
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget)
        if (restoreQueue)
          restoreQueue.push(target);
        else
          restoreQueue = [target];
      else
        restoreTarget = target;
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget)
        return;
      var target = restoreTarget, queuedTargets = restoreQueue;
      if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets)
        for (var i = 0;i < queuedTargets.length; i++)
          restoreStateOfTarget(queuedTargets[i]);
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    }, flushSyncImpl = function() {
    }, isInsideEventHandler = !1;
    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates)
        flushSyncImpl(), restoreStateIfNeeded();
    }
    function batchedUpdates(fn, a, b) {
      if (isInsideEventHandler)
        return fn(a, b);
      isInsideEventHandler = !0;
      try {
        return batchedUpdatesImpl(fn, a, b);
      } finally {
        isInsideEventHandler = !1, finishEventHandler();
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl, flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(props.disabled && isInteractive(type));
        default:
          return !1;
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null)
        return null;
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null)
        return null;
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props))
        return null;
      if (listener && typeof listener !== "function")
        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      return listener;
    }
    var passiveBrowserEventsSupported = !1;
    if (canUseDOM)
      try {
        var options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = !0;
          }
        }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = !1;
      }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error2) {
        this.onError(error2);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
      var fakeNode = document.createElement("react");
      invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
        if (typeof document === "undefined" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
        function restoreAfterDispatch() {
          if (fakeNode.removeEventListener(evtType, callCallback2, !1), typeof window.event !== "undefined" && window.hasOwnProperty("event"))
            window.event = windowEvent;
        }
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        function callCallback2() {
          didCall = !0, restoreAfterDispatch(), func.apply(context, funcArgs), didError = !1;
        }
        var error2, didSetError = !1, isCrossOriginError = !1;
        function handleWindowError(event) {
          if (error2 = event.error, didSetError = !0, error2 === null && event.colno === 0 && event.lineno === 0)
            isCrossOriginError = !0;
          if (event.defaultPrevented) {
            if (error2 != null && typeof error2 === "object")
              try {
                error2._suppressLogging = !0;
              } catch (inner) {
              }
          }
        }
        var evtType = "react-" + (name ? name : "invokeguardedcallback");
        if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, !1), evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), windowEventDescriptor)
          Object.defineProperty(window, "event", windowEventDescriptor);
        if (didCall && didError) {
          if (!didSetError)
            error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
          else if (isCrossOriginError)
            error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
          this.onError(error2);
        }
        if (window.removeEventListener("error", handleWindowError), !didCall)
          return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
      };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {
      onError: function(error2) {
        hasError = !0, caughtError = error2;
      }
    };
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = !1, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      if (invokeGuardedCallback.apply(this, arguments), hasError) {
        var error2 = clearCaughtError();
        if (!hasRethrowError)
          hasRethrowError = !0, rethrowError = error2;
      }
    }
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error2 = rethrowError;
        throw hasRethrowError = !1, rethrowError = null, error2;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error2 = caughtError;
        return hasError = !1, caughtError = null, error2;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function get(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== void 0;
    }
    function set(key, value) {
      key._reactInternals = value;
    }
    var NoFlags = 0, PerformedWork = 1, Placement = 2, Update = 4, ChildDeletion = 16, ContentReset = 32, Callback = 64, DidCapture = 128, ForceClientRender = 256, Ref = 512, Snapshot = 1024, Passive = 2048, Hydrating = 4096, Visibility = 8192, StoreConsistency = 16384, LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency, HostEffectMask = 32767, Incomplete = 32768, ShouldCapture = 65536, ForceUpdateForLegacySuspense = 131072, Forked = 1048576, RefStatic = 2097152, LayoutStatic = 4194304, PassiveStatic = 8388608, MountLayoutDev = 16777216, MountPassiveDev = 33554432, BeforeMutationMask = Update | Snapshot | 0, MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility, LayoutMask = Update | Callback | Ref | Visibility, PassiveMask = Passive | ChildDeletion, StaticMask = LayoutStatic | PassiveStatic | RefStatic, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node = fiber, nearestMounted = fiber;
      if (!fiber.alternate) {
        var nextNode = node;
        do {
          if (node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags)
            nearestMounted = node.return;
          nextNode = node.return;
        } while (nextNode);
      } else
        while (node.return)
          node = node.return;
      if (node.tag === HostRoot)
        return nearestMounted;
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current2 = fiber.alternate;
          if (current2 !== null)
            suspenseState = current2.memoizedState;
        }
        if (suspenseState !== null)
          return suspenseState.dehydrated;
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner, instance = ownerFiber.stateNode;
          if (!instance._warnedAboutRefsInRender)
            error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
          instance._warnedAboutRefsInRender = !0;
        }
      }
      var fiber = get(component);
      if (!fiber)
        return !1;
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        var nearestMounted = getNearestMountedFiber(fiber);
        if (nearestMounted === null)
          throw new Error("Unable to find node on an unmounted component.");
        if (nearestMounted !== fiber)
          return null;
        return fiber;
      }
      var a = fiber, b = alternate;
      while (!0) {
        var parentA = a.return;
        if (parentA === null)
          break;
        var parentB = parentA.alternate;
        if (parentB === null) {
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a)
              return assertIsMounted(parentA), fiber;
            if (child === b)
              return assertIsMounted(parentA), alternate;
            child = child.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return)
          a = parentA, b = parentB;
        else {
          var didFindChild = !1, _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = !0, a = parentA, b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = !0, b = parentA, a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = !0, a = parentB, b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = !0, b = parentB, a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (a.alternate !== b)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (a.tag !== HostRoot)
        throw new Error("Unable to find node on an unmounted component.");
      if (a.stateNode.current === a)
        return fiber;
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText)
        return node;
      var child = node.child;
      while (child !== null) {
        var match = findCurrentHostFiberImpl(child);
        if (match !== null)
          return match;
        child = child.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText)
        return node;
      var child = node.child;
      while (child !== null) {
        if (child.tag !== HostPortal) {
          var match = findCurrentHostFiberWithNoPortalsImpl(child);
          if (match !== null)
            return match;
        }
        child = child.sibling;
      }
      return null;
    }
    var scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue2 = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined")
        return !1;
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled)
        return !0;
      if (!hook.supportsFiber)
        return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
        if (enableSchedulingProfiler)
          internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          });
        rendererID = hook.inject(internals), injectedHook = hook;
      } catch (err) {
        error("React instrumentation encountered an error: %s.", err);
      }
      if (hook.checkDCE)
        return !0;
      else
        return !1;
    }
    function onScheduleRoot(root2, children) {
      if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function")
        try {
          injectedHook.onScheduleFiberRoot(rendererID, root2, children);
        } catch (err) {
          if (!hasLoggedError)
            hasLoggedError = !0, error("React instrumentation encountered an error: %s", err);
        }
    }
    function onCommitRoot(root2, eventPriority) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function")
        try {
          var didError = (root2.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            var schedulerPriority;
            switch (eventPriority) {
              case DiscreteEventPriority:
                schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority;
                break;
            }
            injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
          } else
            injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
        } catch (err) {
          if (!hasLoggedError)
            hasLoggedError = !0, error("React instrumentation encountered an error: %s", err);
        }
    }
    function onPostCommitRoot(root2) {
      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function")
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root2);
        } catch (err) {
          if (!hasLoggedError)
            hasLoggedError = !0, error("React instrumentation encountered an error: %s", err);
        }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function")
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          if (!hasLoggedError)
            hasLoggedError = !0, error("React instrumentation encountered an error: %s", err);
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      {
        if (typeof unstable_yieldValue2 === "function")
          unstable_setDisableYieldValue2(newIsStrictMode), setSuppressWarning(newIsStrictMode);
        if (injectedHook && typeof injectedHook.setStrictMode === "function")
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            if (!hasLoggedError)
              hasLoggedError = !0, error("React instrumentation encountered an error: %s", err);
          }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      {
        var map = /* @__PURE__ */ new Map, lane = 1;
        for (var index2 = 0;index2 < TotalLanes; index2++) {
          var label = getLabelForLane(lane);
          map.set(lane, label), lane *= 2;
        }
        return map;
      }
    }
    function markCommitStarted(lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function")
        injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function")
        injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function")
        injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function")
        injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function")
        injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function")
        injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function")
        injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function")
        injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function")
        injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function")
        injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function")
        injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function")
        injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function")
        injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function")
        injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function")
        injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function")
        injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function")
        injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function")
        injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function")
        injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function")
        injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function")
        injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function")
        injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function")
        injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function")
        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
    function clz32Fallback(x) {
      var asUint = x >>> 0;
      if (asUint === 0)
        return 32;
      return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31, NoLanes = 0, NoLane = 0, SyncLane = 1, InputContinuousHydrationLane = 2, InputContinuousLane = 4, DefaultHydrationLane = 8, DefaultLane = 16, TransitionHydrationLane = 32, TransitionLanes = 4194240, TransitionLane1 = 64, TransitionLane2 = 128, TransitionLane3 = 256, TransitionLane4 = 512, TransitionLane5 = 1024, TransitionLane6 = 2048, TransitionLane7 = 4096, TransitionLane8 = 8192, TransitionLane9 = 16384, TransitionLane10 = 32768, TransitionLane11 = 65536, TransitionLane12 = 131072, TransitionLane13 = 262144, TransitionLane14 = 524288, TransitionLane15 = 1048576, TransitionLane16 = 2097152, RetryLanes = 130023424, RetryLane1 = 4194304, RetryLane2 = 8388608, RetryLane3 = 16777216, RetryLane4 = 33554432, RetryLane5 = 67108864, SomeRetryLane = RetryLane1, SelectiveHydrationLane = 134217728, NonIdleLanes = 268435455, IdleHydrationLane = 268435456, IdleLane = 536870912, OffscreenLane = 1073741824;
    function getLabelForLane(lane) {
      {
        if (lane & SyncLane)
          return "Sync";
        if (lane & InputContinuousHydrationLane)
          return "InputContinuousHydration";
        if (lane & InputContinuousLane)
          return "InputContinuous";
        if (lane & DefaultHydrationLane)
          return "DefaultHydration";
        if (lane & DefaultLane)
          return "Default";
        if (lane & TransitionHydrationLane)
          return "TransitionHydration";
        if (lane & TransitionLanes)
          return "Transition";
        if (lane & RetryLanes)
          return "Retry";
        if (lane & SelectiveHydrationLane)
          return "SelectiveHydration";
        if (lane & IdleHydrationLane)
          return "IdleHydration";
        if (lane & IdleLane)
          return "Idle";
        if (lane & OffscreenLane)
          return "Offscreen";
      }
    }
    var NoTimestamp = -1, nextTransitionLane = TransitionLane1, nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
      switch (getHighestPriorityLane(lanes)) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return lanes & TransitionLanes;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          return error("Should have found matching lanes. This is a bug in React."), lanes;
      }
    }
    function getNextLanes(root2, wipLanes) {
      var pendingLanes = root2.pendingLanes;
      if (pendingLanes === NoLanes)
        return NoLanes;
      var nextLanes = NoLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, nonIdlePendingLanes = pendingLanes & NonIdleLanes;
      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        if (nonIdleUnblockedLanes !== NoLanes)
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
          if (nonIdlePingedLanes !== NoLanes)
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
        }
      } else {
        var unblockedLanes = pendingLanes & ~suspendedLanes;
        if (unblockedLanes !== NoLanes)
          nextLanes = getHighestPriorityLanes(unblockedLanes);
        else if (pingedLanes !== NoLanes)
          nextLanes = getHighestPriorityLanes(pingedLanes);
      }
      if (nextLanes === NoLanes)
        return NoLanes;
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
        var nextLane = getHighestPriorityLane(nextLanes), wipLane = getHighestPriorityLane(wipLanes);
        if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)
          return wipLanes;
      }
      if ((nextLanes & InputContinuousLane) !== NoLanes)
        nextLanes |= pendingLanes & DefaultLane;
      var entangledLanes = root2.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root2.entanglements, lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          nextLanes |= entanglements[index2], lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root2, lanes) {
      var eventTimes = root2.eventTimes, mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, eventTime = eventTimes[index2];
        if (eventTime > mostRecentEventTime)
          mostRecentEventTime = eventTime;
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return currentTime + 5000;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return NoTimestamp;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return NoTimestamp;
        default:
          return error("Should have found matching lanes. This is a bug in React."), NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root2, currentTime) {
      var { pendingLanes, suspendedLanes, pingedLanes, expirationTimes } = root2, lanes = pendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, expirationTime = expirationTimes[index2];
        if (expirationTime === NoTimestamp) {
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes)
            expirationTimes[index2] = computeExpirationTime(lane, currentTime);
        } else if (expirationTime <= currentTime)
          root2.expiredLanes |= lane;
        lanes &= ~lane;
      }
    }
    function getHighestPriorityPendingLanes(root2) {
      return getHighestPriorityLanes(root2.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root2) {
      var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes)
        return everythingButOffscreen;
      if (everythingButOffscreen & OffscreenLane)
        return OffscreenLane;
      return NoLanes;
    }
    function includesSyncLane(lanes) {
      return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
      return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root2, lanes) {
      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
      return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root2, lanes) {
      return (lanes & root2.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
      return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      if (nextTransitionLane <<= 1, (nextTransitionLane & TransitionLanes) === NoLanes)
        nextTransitionLane = TransitionLane1;
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      if (nextRetryLane <<= 1, (nextRetryLane & RetryLanes) === NoLanes)
        nextRetryLane = RetryLane1;
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set2, subset) {
      return (set2 & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set2, subset) {
      return set2 & ~subset;
    }
    function intersectLanes(a, b) {
      return a & b;
    }
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      var laneMap = [];
      for (var i = 0;i < TotalLanes; i++)
        laneMap.push(initial);
      return laneMap;
    }
    function markRootUpdated(root2, updateLane, eventTime) {
      if (root2.pendingLanes |= updateLane, updateLane !== IdleLane)
        root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes;
      var eventTimes = root2.eventTimes, index2 = laneToIndex(updateLane);
      eventTimes[index2] = eventTime;
    }
    function markRootSuspended(root2, suspendedLanes) {
      root2.suspendedLanes |= suspendedLanes, root2.pingedLanes &= ~suspendedLanes;
      var expirationTimes = root2.expirationTimes, lanes = suspendedLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
        expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
      }
    }
    function markRootPinged(root2, pingedLanes, eventTime) {
      root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root2, remainingLanes) {
      var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
      root2.pendingLanes = remainingLanes, root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes, root2.expiredLanes &= remainingLanes, root2.mutableReadLanes &= remainingLanes, root2.entangledLanes &= remainingLanes;
      var { entanglements, eventTimes, expirationTimes } = root2, lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
        entanglements[index2] = NoLanes, eventTimes[index2] = NoTimestamp, expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
      }
    }
    function markRootEntangled(root2, entangledLanes) {
      var rootEntangledLanes = root2.entangledLanes |= entangledLanes, entanglements = root2.entanglements, lanes = rootEntangledLanes;
      while (lanes) {
        var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
        if (lane & entangledLanes | entanglements[index2] & entangledLanes)
          entanglements[index2] |= entangledLanes;
        lanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root2, renderLanes2) {
      var renderLane = getHighestPriorityLane(renderLanes2), lane;
      switch (renderLane) {
        case InputContinuousLane:
          lane = InputContinuousHydrationLane;
          break;
        case DefaultLane:
          lane = DefaultHydrationLane;
          break;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          lane = TransitionHydrationLane;
          break;
        case IdleLane:
          lane = IdleHydrationLane;
          break;
        default:
          lane = NoLane;
          break;
      }
      if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane)
        return NoLane;
      return lane;
    }
    function addFiberToLanesMap(root2, fiber, lanes) {
      if (!isDevToolsPresent)
        return;
      var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
        updaters.add(fiber), lanes &= ~lane;
      }
    }
    function movePendingFibersToMemoized(root2, lanes) {
      if (!isDevToolsPresent)
        return;
      var { pendingUpdatersLaneMap, memoizedUpdaters } = root2;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
        if (updaters.size > 0)
          updaters.forEach(function(fiber) {
            var alternate = fiber.alternate;
            if (alternate === null || !memoizedUpdaters.has(alternate))
              memoizedUpdaters.add(fiber);
          }), updaters.clear();
        lanes &= ~lane;
      }
    }
    function getTransitionsForLanes(root2, lanes) {
      return null;
    }
    var DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
      return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
      currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        return currentUpdatePriority = priority, fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    }
    function higherEventPriority(a, b) {
      return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
      return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
      return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
      var lane = getHighestPriorityLane(lanes);
      if (!isHigherEventPriority(DiscreteEventPriority, lane))
        return DiscreteEventPriority;
      if (!isHigherEventPriority(ContinuousEventPriority, lane))
        return ContinuousEventPriority;
      if (includesNonIdleWork(lane))
        return DefaultEventPriority;
      return IdleEventPriority;
    }
    function isRootDehydrated(root2) {
      var currentState = root2.current.memoizedState;
      return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
      _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
      _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
      getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map, queuedPointerCaptures = /* @__PURE__ */ new Map, queuedExplicitHydrationTargets = [], discreteReplayableEvents = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout": {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null)
            attemptContinuousHydration(_fiber2);
        }
        return queuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1)
        targetContainers.push(targetContainer);
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin": {
          var focusEvent = nativeEvent;
          return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), !0;
        }
        case "dragenter": {
          var dragEvent = nativeEvent;
          return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), !0;
        }
        case "mouseover": {
          var mouseEvent = nativeEvent;
          return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), !0;
        }
        case "pointerover": {
          var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
          return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), !0;
        }
        case "gotpointercapture": {
          var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
          return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), !0;
        }
      }
      return !1;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2)) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
      var updatePriority = getCurrentUpdatePriority$1(), queuedTarget = {
        blockedOn: null,
        target,
        priority: updatePriority
      }, i = 0;
      for (;i < queuedExplicitHydrationTargets.length; i++)
        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority))
          break;
      if (queuedExplicitHydrationTargets.splice(i, 0, queuedTarget), i === 0)
        attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null)
        return !1;
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0], nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          var nativeEvent = queuedEvent.nativeEvent, nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          setReplayingEvent(nativeEventClone), nativeEvent.target.dispatchEvent(nativeEventClone), resetReplayingEvent();
        } else {
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null)
            attemptContinuousHydration(_fiber3);
          return queuedEvent.blockedOn = nextBlockedOn, !1;
        }
        targetContainers.shift();
      }
      return !0;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent))
        map.delete(key);
    }
    function replayUnblockedEvents() {
      if (hasScheduledReplayAttempt = !1, queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus))
        queuedFocus = null;
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag))
        queuedDrag = null;
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse))
        queuedMouse = null;
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        if (queuedEvent.blockedOn = null, !hasScheduledReplayAttempt)
          hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
      }
    }
    function retryIfBlockedOn(unblocked) {
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i = 1;i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked)
            queuedEvent.blockedOn = null;
        }
      }
      if (queuedFocus !== null)
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      if (queuedDrag !== null)
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      if (queuedMouse !== null)
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      var unblock = function(queuedEvent2) {
        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
      };
      queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
      for (var _i = 0;_i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked)
          queuedTarget.blockedOn = null;
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null)
          break;
        else if (attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null)
          queuedExplicitHydrationTargets.shift();
      }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = !0;
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriority(domEventName), listenerWrapper;
      switch (eventPriority) {
        case DiscreteEventPriority:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        case DefaultEventPriority:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(DiscreteEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(ContinuousEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled)
        return;
      dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
        return;
      }
      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        nativeEvent.stopPropagation();
        return;
      }
      if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
        while (blockedOn !== null) {
          var fiber = getInstanceFromNode(blockedOn);
          if (fiber !== null)
            attemptSynchronousHydration(fiber);
          var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (nextBlockedOn === null)
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          if (nextBlockedOn === blockedOn)
            break;
          blockedOn = nextBlockedOn;
        }
        if (blockedOn !== null)
          nativeEvent.stopPropagation();
        return;
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null)
          targetInst = null;
        else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null)
              return instance;
            targetInst = null;
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2))
              return getContainerFromFiber(nearestMounted);
            targetInst = null;
          } else if (nearestMounted !== targetInst)
            targetInst = null;
        }
      }
      return return_targetInst = targetInst, null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message": {
          var schedulerPriority = getCurrentPriorityLevel();
          switch (schedulerPriority) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        }
        default:
          return DefaultEventPriority;
      }
    }
    function addEventBubbleListener(target, eventType, listener) {
      return target.addEventListener(eventType, listener, !1), listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      return target.addEventListener(eventType, listener, !0), listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      return target.addEventListener(eventType, listener, {
        capture: !0,
        passive
      }), listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      return target.addEventListener(eventType, listener, {
        passive
      }), listener;
    }
    var root = null, startText = null, fallbackText = null;
    function initialize(nativeEventTarget) {
      return root = nativeEventTarget, startText = getText(), !0;
    }
    function reset() {
      root = null, startText = null, fallbackText = null;
    }
    function getData() {
      if (fallbackText)
        return fallbackText;
      var start, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
      for (start = 0;start < startLength; start++)
        if (startValue[start] !== endValue[start])
          break;
      var minEnd = startLength - start;
      for (end = 1;end <= minEnd; end++)
        if (startValue[startLength - end] !== endValue[endLength - end])
          break;
      var sliceTail = end > 1 ? 1 - end : void 0;
      return fallbackText = endValue.slice(start, sliceTail), fallbackText;
    }
    function getText() {
      if ("value" in root)
        return root.value;
      return root.textContent;
    }
    function getEventCharCode(nativeEvent) {
      var charCode, keyCode = nativeEvent.keyCode;
      if ("charCode" in nativeEvent) {
        if (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13)
          charCode = 13;
      } else
        charCode = keyCode;
      if (charCode === 10)
        charCode = 13;
      if (charCode >= 32 || charCode === 13)
        return charCode;
      return 0;
    }
    function functionThatReturnsTrue() {
      return !0;
    }
    function functionThatReturnsFalse() {
      return !1;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName))
            continue;
          var normalize = Interface[_propName];
          if (normalize)
            this[_propName] = normalize(nativeEvent);
          else
            this[_propName] = nativeEvent[_propName];
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === !1;
        if (defaultPrevented)
          this.isDefaultPrevented = functionThatReturnsTrue;
        else
          this.isDefaultPrevented = functionThatReturnsFalse;
        return this.isPropagationStopped = functionThatReturnsFalse, this;
      }
      return assign(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = !0;
          var event = this.nativeEvent;
          if (!event)
            return;
          if (event.preventDefault)
            event.preventDefault();
          else if (typeof event.returnValue !== "unknown")
            event.returnValue = !1;
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          if (!event)
            return;
          if (event.stopPropagation)
            event.stopPropagation();
          else if (typeof event.cancelBubble !== "unknown")
            event.cancelBubble = !0;
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function() {
        },
        isPersistent: functionThatReturnsTrue
      }), SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
      view: 0,
      detail: 0
    }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === "mousemove")
          lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY;
        else
          lastMovementX = 0, lastMovementY = 0;
        lastMouseEvent = event;
      }
    }
    var MouseEventInterface = assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        if (event.relatedTarget === void 0)
          return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event)
          return event.movementX;
        return updateMouseMovementPolyfillState(event), lastMovementX;
      },
      movementY: function(event) {
        if ("movementY" in event)
          return event.movementY;
        return lastMovementY;
      }
    }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
      dataTransfer: 0
    }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
      relatedTarget: 0
    }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
      data: 0
    }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, translateToKey = {
      "8": "Backspace",
      "9": "Tab",
      "12": "Clear",
      "13": "Enter",
      "16": "Shift",
      "17": "Control",
      "18": "Alt",
      "19": "Pause",
      "20": "CapsLock",
      "27": "Escape",
      "32": " ",
      "33": "PageUp",
      "34": "PageDown",
      "35": "End",
      "36": "Home",
      "37": "ArrowLeft",
      "38": "ArrowUp",
      "39": "ArrowRight",
      "40": "ArrowDown",
      "45": "Insert",
      "46": "Delete",
      "112": "F1",
      "113": "F2",
      "114": "F3",
      "115": "F4",
      "116": "F5",
      "117": "F6",
      "118": "F7",
      "119": "F8",
      "120": "F9",
      "121": "F10",
      "122": "F11",
      "123": "F12",
      "144": "NumLock",
      "145": "ScrollLock",
      "224": "Meta"
    };
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified")
          return key;
      }
      if (nativeEvent.type === "keypress") {
        var charCode = getEventCharCode(nativeEvent);
        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup")
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
      return "";
    }
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState)
        return nativeEvent.getModifierState(keyArg);
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : !1;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      charCode: function(event) {
        if (event.type === "keypress")
          return getEventCharCode(event);
        return 0;
      },
      keyCode: function(event) {
        if (event.type === "keydown" || event.type === "keyup")
          return event.keyCode;
        return 0;
      },
      which: function(event) {
        if (event.type === "keypress")
          return getEventCharCode(event);
        if (event.type === "keydown" || event.type === "keyup")
          return event.keyCode;
        return 0;
      }
    }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
    if (canUseDOM && "documentMode" in document)
      documentMode = document.documentMode;
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var hasSpaceKeypress = !1;
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === "object" && "data" in detail)
        return detail.data;
      return null;
    }
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === "ko";
    }
    var isComposing = !1;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType, fallbackData;
      if (canUseCompositionEvent)
        eventType = getCompositionEventType(domEventName);
      else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent))
          eventType = "onCompositionStart";
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent))
        eventType = "onCompositionEnd";
      if (!eventType)
        return null;
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        if (!isComposing && eventType === "onCompositionStart")
          isComposing = initialize(nativeEventTarget);
        else if (eventType === "onCompositionEnd") {
          if (isComposing)
            fallbackData = getData();
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        if (dispatchQueue.push({
          event,
          listeners
        }), fallbackData)
          event.data = fallbackData;
        else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null)
            event.data = customData;
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE)
            return null;
          return hasSpaceKeypress = !0, SPACEBAR_CHAR;
        case "textInput":
          var chars = nativeEvent.data;
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress)
            return null;
          return chars;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          return reset(), isComposing = !1, chars;
        }
        return null;
      }
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!isKeypressCommand(nativeEvent)) {
            if (nativeEvent.char && nativeEvent.char.length > 1)
              return nativeEvent.char;
            else if (nativeEvent.which)
              return String.fromCharCode(nativeEvent.which);
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent)
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      else
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      if (!chars)
        return null;
      var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        }), event.data = chars;
      }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
      color: !0,
      date: !0,
      datetime: !0,
      "datetime-local": !0,
      email: !0,
      month: !0,
      number: !0,
      password: !0,
      range: !0,
      search: !0,
      tel: !0,
      text: !0,
      time: !0,
      url: !0,
      week: !0
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === "input")
        return !!supportedInputTypes[elem.type];
      if (nodeName === "textarea")
        return !0;
      return !1;
    }
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM)
        return !1;
      var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
      if (!isSupported) {
        var element = document.createElement("div");
        element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] === "function";
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, "onChange");
      if (listeners.length > 0) {
        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    var activeElement = null, activeElementInst = null;
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode))
        return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change")
        return targetInst;
    }
    var isInputEventSupported = !1;
    if (canUseDOM)
      isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    function stopWatchingForValueChange() {
      if (!activeElement)
        return;
      activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== "value")
        return;
      if (getInstIfValueChanged(activeElementInst))
        manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === "focusin")
        stopWatchingForValueChange(), startWatchingForValueChange(target, targetInst);
      else if (domEventName === "focusout")
        stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
        return getInstIfValueChanged(activeElementInst);
    }
    function shouldUseClickEvent(elem) {
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click")
        return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change")
        return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
      var state = node._wrapperState;
      if (!state || !state.controlled || node.type !== "number")
        return;
      setDefaultValue(node, "number", node.value);
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode))
        getTargetInstFunc = getTargetInstForChangeEvent;
      else if (isTextInputElement(targetNode))
        if (isInputEventSupported)
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        else
          getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill;
      else if (shouldUseClickEvent(targetNode))
        getTargetInstFunc = getTargetInstForClickEvent;
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc)
        handleEventFunc(domEventName, targetNode, targetInst);
      if (domEventName === "focusout")
        handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
      if (isOverEvent && !isReplayingEvent(nativeEvent)) {
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related))
            return;
        }
      }
      if (!isOutEvent && !isOverEvent)
        return;
      var win;
      if (nativeEventTarget.window === nativeEventTarget)
        win = nativeEventTarget;
      else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc)
          win = doc.defaultView || doc.parentWindow;
        else
          win = window;
      }
      var from, to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText)
            to = null;
        }
      } else
        from = null, to = targetInst;
      if (from === to)
        return;
      var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
      if (domEventName === "pointerout" || domEventName === "pointerover")
        SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer";
      var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
      leave.target = fromNode, leave.relatedTarget = toNode;
      var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB))
        return !0;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null)
        return !1;
      var keysA = Object.keys(objA), keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return !1;
      for (var i = 0;i < keysA.length; i++) {
        var currentKey = keysA[i];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
          return !1;
      }
      return !0;
    }
    function getLeafNode(node) {
      while (node && node.firstChild)
        node = node.firstChild;
      return node;
    }
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling)
          return node.nextSibling;
        node = node.parentNode;
      }
    }
    function getNodeForCharacterOffset(root2, offset) {
      var node = getLeafNode(root2), nodeStart = 0, nodeEnd = 0;
      while (node) {
        if (node.nodeType === TEXT_NODE) {
          if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset && nodeEnd >= offset)
            return {
              node,
              offset: offset - nodeStart
            };
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0)
        return null;
      var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
      try {
        anchorNode.nodeType, focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
      outer:
        while (!0) {
          var next = null;
          while (!0) {
            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE))
              start = length + anchorOffset;
            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE))
              end = length + focusOffset;
            if (node.nodeType === TEXT_NODE)
              length += node.nodeValue.length;
            if ((next = node.firstChild) === null)
              break;
            parentNode = node, node = next;
          }
          while (!0) {
            if (node === outerNode)
              break outer;
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset)
              start = length;
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset)
              end = length;
            if ((next = node.nextSibling) !== null)
              break;
            node = parentNode, parentNode = node.parentNode;
          }
          node = next;
        }
      if (start === -1 || end === -1)
        return null;
      return {
        start,
        end
      };
    }
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
      if (!win.getSelection)
        return;
      var selection = win.getSelection(), length = node.textContent.length, start = Math.min(offsets.start, length), end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
      if (!selection.extend && start > end) {
        var temp = end;
        end = start, start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start), endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset)
          return;
        var range = doc.createRange();
        if (range.setStart(startMarker.node, startMarker.offset), selection.removeAllRanges(), start > end)
          selection.addRange(range), selection.extend(endMarker.node, endMarker.offset);
        else
          range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range);
      }
    }
    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode)
        return !1;
      else if (outerNode === innerNode)
        return !0;
      else if (isTextNode(outerNode))
        return !1;
      else if (isTextNode(innerNode))
        return containsNode(outerNode, innerNode.parentNode);
      else if ("contains" in outerNode)
        return outerNode.contains(innerNode);
      else if (outerNode.compareDocumentPosition)
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      else
        return !1;
    }
    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
      try {
        return typeof iframe.contentWindow.location.href === "string";
      } catch (err) {
        return !1;
      }
    }
    function getActiveElementDeep() {
      var win = window, element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element))
          win = element.contentWindow;
        else
          return element;
        element = getActiveElement(win.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem))
          setSelection(priorFocusedElem, priorSelectionRange);
        var ancestors = [], ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode)
          if (ancestor.nodeType === ELEMENT_NODE)
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
        if (typeof priorFocusedElem.focus === "function")
          priorFocusedElem.focus();
        for (var i = 0;i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
        }
      }
    }
    function getSelection(input) {
      var selection;
      if ("selectionStart" in input)
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      else
        selection = getOffsets(input);
      return selection || {
        start: 0,
        end: 0
      };
    }
    function setSelection(input, offsets) {
      var { start, end } = offsets;
      if (end === void 0)
        end = start;
      if ("selectionStart" in input)
        input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length);
      else
        setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1;
    function getSelection$1(node) {
      if ("selectionStart" in node && hasSelectionCapabilities(node))
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))
        return;
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          }), event.target = activeElement$1;
        }
      }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(targetNode) || targetNode.contentEditable === "true")
            activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null;
          break;
        case "focusout":
          activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
          break;
        case "mousedown":
          mouseDown = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = !1, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent)
            break;
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes2 = {};
      return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    }, prefixedEventNames = {}, style = {};
    if (canUseDOM) {
      if (style = document.createElement("div").style, !("AnimationEvent" in window))
        delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation;
      if (!("TransitionEvent" in window))
        delete vendorPrefixes.transitionend.transition;
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName])
        return prefixedEventNames[eventName];
      else if (!vendorPrefixes[eventName])
        return eventName;
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap)
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
          return prefixedEventNames[eventName] = prefixMap[styleProp];
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map, simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName), registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function registerSimpleEvents() {
      for (var i = 0;i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase(), capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd"), registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration"), registerSimpleEvent(ANIMATION_START, "onAnimationStart"), registerSimpleEvent("dblclick", "onDoubleClick"), registerSimpleEvent("focusin", "onFocus"), registerSimpleEvent("focusout", "onBlur"), registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === void 0)
        return;
      var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
      switch (domEventName) {
        case "keypress":
          if (getEventCharCode(nativeEvent) === 0)
            return;
        case "keydown":
        case "keyup":
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case "focusin":
          reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "focusout":
          reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "beforeblur":
        case "afterblur":
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "click":
          if (nativeEvent.button === 2)
            return;
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case "scroll":
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case "wheel":
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case "copy":
        case "cut":
        case "paste":
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      if (shouldProcessPolyfillPlugins)
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase)
        for (var i = dispatchListeners.length - 1;i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped())
            return;
          executeDispatch(event, listener, currentTarget), previousInstance = instance;
        }
      else
        for (var _i = 0;_i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped())
            return;
          executeDispatch(event, _listener, _currentTarget), previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0;i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      if (!nonDelegatedEvents.has(domEventName))
        error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
      var isCapturePhaseListener = !1, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey))
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey);
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener)
        error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
      var eventSystemFlags = 0;
      if (isCapturePhaseListener)
        eventSystemFlags |= IS_CAPTURE_PHASE;
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = !0, allNativeEvents.forEach(function(domEventName) {
          if (domEventName !== "selectionchange") {
            if (!nonDelegatedEvents.has(domEventName))
              listenToNativeEvent(domEventName, !1, rootContainerElement);
            listenToNativeEvent(domEventName, !0, rootContainerElement);
          }
        });
        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        if (ownerDocument !== null) {
          if (!ownerDocument[listeningMarker])
            ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument);
        }
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
      if (passiveBrowserEventsSupported) {
        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel")
          isPassiveListener = !0;
      }
      targetContainer = targetContainer;
      var unsubscribeListener;
      if (isCapturePhaseListener)
        if (isPassiveListener !== void 0)
          unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else
          unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
      else if (isPassiveListener !== void 0)
        unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
      else
        unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        if (targetInst !== null) {
          var node = targetInst;
          mainLoop:
            while (!0) {
              if (node === null)
                return;
              var nodeTag = node.tag;
              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node.stateNode.containerInfo;
                if (isMatchingRootContainer(container, targetContainerNode))
                  break;
                if (nodeTag === HostPortal) {
                  var grandNode = node.return;
                  while (grandNode !== null) {
                    var grandTag = grandNode.tag;
                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo;
                      if (isMatchingRootContainer(grandContainer, targetContainerNode))
                        return;
                    }
                    grandNode = grandNode.return;
                  }
                }
                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container);
                  if (parentNode === null)
                    return;
                  var parentTag = parentNode.tag;
                  if (parentTag === HostComponent || parentTag === HostText) {
                    node = ancestorInst = parentNode;
                    continue mainLoop;
                  }
                  container = container.parentNode;
                }
              }
              node = node.return;
            }
        }
      }
      batchedUpdates(function() {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance,
        listener,
        currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
      var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null;
      while (instance !== null) {
        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
        if (tag === HostComponent && stateNode !== null) {
          if (lastHostComponent = stateNode, reactEventName !== null) {
            var listener = getListener(instance, reactEventName);
            if (listener != null)
              listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
        }
        if (accumulateTargetOnly)
          break;
        instance = instance.return;
      }
      return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + "Capture", listeners = [], instance = targetFiber;
      while (instance !== null) {
        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode, captureListener = getListener(instance, captureName);
          if (captureListener != null)
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          var bubbleListener = getListener(instance, reactName);
          if (bubbleListener != null)
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
        instance = instance.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null)
        return null;
      do
        inst = inst.return;
      while (inst && inst.tag !== HostComponent);
      if (inst)
        return inst;
      return null;
    }
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA, nodeB = instB, depthA = 0;
      for (var tempA = nodeA;tempA; tempA = getParent(tempA))
        depthA++;
      var depthB = 0;
      for (var tempB = nodeB;tempB; tempB = getParent(tempB))
        depthB++;
      while (depthA - depthB > 0)
        nodeA = getParent(nodeA), depthA--;
      while (depthB - depthA > 0)
        nodeB = getParent(nodeB), depthB--;
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
          return nodeA;
        nodeA = getParent(nodeA), nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName, listeners = [], instance = target;
      while (instance !== null) {
        if (instance === common)
          break;
        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common)
          break;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance, registrationName);
            if (captureListener != null)
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance, registrationName);
            if (bubbleListener != null)
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
        instance = instance.return;
      }
      if (listeners.length !== 0)
        dispatchQueue.push({
          event,
          listeners
        });
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      if (from !== null)
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, !1);
      if (to !== null && enterEvent !== null)
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, !0);
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = !1, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", warnedUnknownTags, validatePropertiesInDevelopment, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeHTML;
    warnedUnknownTags = {
      dialog: !0,
      webview: !0
    }, validatePropertiesInDevelopment = function(type, props) {
      validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, {
        registrationNameDependencies,
        possibleRegistrationNames
      });
    }, canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode, warnForPropDifference = function(propName, serverValue, clientValue) {
      if (didWarnInvalidHydration)
        return;
      var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
      if (normalizedServerValue === normalizedClientValue)
        return;
      didWarnInvalidHydration = !0, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    }, warnForExtraAttributes = function(attributeNames) {
      if (didWarnInvalidHydration)
        return;
      didWarnInvalidHydration = !0;
      var names = [];
      attributeNames.forEach(function(name) {
        names.push(name);
      }), error("Extra attributes from the server: %s", names);
    }, warnForInvalidEventListener = function(registrationName, listener) {
      if (listener === !1)
        error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
      else
        error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }, normalizeHTML = function(parent, html) {
      var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
      return testElement.innerHTML = html, testElement.innerHTML;
    };
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      checkHtmlStringCoercion(markup);
      var markupString = typeof markup === "string" ? markup : "" + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText)
        return;
      if (shouldWarnDev) {
        if (!didWarnInvalidHydration)
          didWarnInvalidHydration = !0, error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      }
      if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch)
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
      node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey))
          continue;
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          if (nextProp)
            Object.freeze(nextProp);
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          if (nextHtml != null)
            setInnerHTML(domElement, nextHtml);
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            var canSetTextContent = tag !== "textarea" || nextProp !== "";
            if (canSetTextContent)
              setTextContent(domElement, nextProp);
          } else if (typeof nextProp === "number")
            setTextContent(domElement, "" + nextProp);
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function")
              warnForInvalidEventListener(propKey, nextProp);
            if (propKey === "onScroll")
              listenToNonDelegatedEvent("scroll", domElement);
          }
        } else if (nextProp != null)
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      for (var i = 0;i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i], propValue = updatePayload[i + 1];
        if (propKey === STYLE)
          setValueForStyles(domElement, propValue);
        else if (propKey === DANGEROUSLY_SET_INNER_HTML)
          setInnerHTML(domElement, propValue);
        else if (propKey === CHILDREN)
          setTextContent(domElement, propValue);
        else
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE)
        namespaceURI = getIntrinsicNamespace(type);
      if (namespaceURI === HTML_NAMESPACE) {
        if (isCustomComponentTag = isCustomComponent(type, props), !isCustomComponentTag && type !== type.toLowerCase())
          error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
        if (type === "script") {
          var div = ownerDocument.createElement("div");
          div.innerHTML = "<script></script>";
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === "string")
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        else if (domElement = ownerDocument.createElement(type), type === "select") {
          var node = domElement;
          if (props.multiple)
            node.multiple = !0;
          else if (props.size)
            node.size = props.size;
        }
      } else
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      if (namespaceURI === HTML_NAMESPACE) {
        if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type))
          warnedUnknownTags[type] = !0, error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      validatePropertiesInDevelopment(tag, rawProps);
      var props;
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement), props = rawProps;
          break;
        case "video":
        case "audio":
          for (var i = 0;i < mediaEventTypes.length; i++)
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          props = rawProps;
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement), props = rawProps;
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
          break;
        case "input":
          initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps), props = rawProps;
          break;
        case "select":
          initWrapperState$1(domElement, rawProps), props = getHostProps$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
        default:
          props = rawProps;
      }
      switch (assertValidProps(tag, props), setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag), tag) {
        case "input":
          track(domElement), postMountWrapper(domElement, rawProps, !1);
          break;
        case "textarea":
          track(domElement), postMountWrapper$3(domElement);
          break;
        case "option":
          postMountWrapper$1(domElement, rawProps);
          break;
        case "select":
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === "function")
            trapClickOnNonInteractiveElement(domElement);
          break;
      }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      validatePropertiesInDevelopment(tag, nextRawProps);
      var updatePayload = null, lastProps, nextProps;
      switch (tag) {
        case "input":
          lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload = [];
          break;
        case "select":
          lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload = [];
          break;
        case "textarea":
          lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload = [];
          break;
        default:
          if (lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function")
            trapClickOnNonInteractiveElement(domElement);
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey, styleName, styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null)
          continue;
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle)
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates)
                styleUpdates = {};
              styleUpdates[styleName] = "";
            }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
          ;
        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (!updatePayload)
            updatePayload = [];
        } else
          (updatePayload = updatePayload || []).push(propKey, null);
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey], lastProp = lastProps != null ? lastProps[propKey] : void 0;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null)
          continue;
        if (propKey === STYLE) {
          if (nextProp)
            Object.freeze(nextProp);
          if (lastProp) {
            for (styleName in lastProp)
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates)
                  styleUpdates = {};
                styleUpdates[styleName] = "";
              }
            for (styleName in nextProp)
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates)
                  styleUpdates = {};
                styleUpdates[styleName] = nextProp[styleName];
              }
          } else {
            if (!styleUpdates) {
              if (!updatePayload)
                updatePayload = [];
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml)
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string" || typeof nextProp === "number")
            (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function")
              warnForInvalidEventListener(propKey, nextProp);
            if (propKey === "onScroll")
              listenToNonDelegatedEvent("scroll", domElement);
          }
          if (!updatePayload && lastProp !== nextProp)
            updatePayload = [];
        } else
          (updatePayload = updatePayload || []).push(propKey, nextProp);
      }
      if (styleUpdates)
        validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null)
        updateChecked(domElement, nextRawProps);
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps), isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      switch (updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag), tag) {
        case "input":
          updateWrapper(domElement, nextRawProps);
          break;
        case "textarea":
          updateWrapper$1(domElement, nextRawProps);
          break;
        case "select":
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName))
          return null;
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
      var isCustomComponentTag, extraAttributeNames;
      switch (isCustomComponentTag = isCustomComponent(tag, rawProps), validatePropertiesInDevelopment(tag, rawProps), tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (var i = 0;i < mediaEventTypes.length; i++)
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "input":
          initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          break;
        case "select":
          initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = /* @__PURE__ */ new Set;
        var attributes = domElement.attributes;
        for (var _i = 0;_i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey))
          continue;
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            if (domElement.textContent !== nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0)
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === "number") {
            if (domElement.textContent !== "" + nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0)
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              updatePayload = [CHILDREN, "" + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function")
              warnForInvalidEventListener(propKey, nextProp);
            if (propKey === "onScroll")
              listenToNonDelegatedEvent("scroll", domElement);
          }
        } else if (shouldWarnDev && !0 && typeof isCustomComponentTag === "boolean") {
          var serverValue = void 0, propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
          if (rawProps[SUPPRESS_HYDRATION_WARNING] === !0)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
            ;
          else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML)
                warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE) {
            if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              if (serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue)
                warnForPropDifference(propKey, serverValue, expectedStyle);
            }
          } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
            if (extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue)
              warnForPropDifference(propKey, serverValue, nextProp);
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = !1;
            if (propertyInfo !== null)
              extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE)
                ownNamespace = getIntrinsicNamespace(tag);
              if (ownNamespace === HTML_NAMESPACE)
                extraAttributeNames.delete(propKey.toLowerCase());
              else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey)
                  isMismatchDueToBadCasing = !0, extraAttributeNames.delete(standardName);
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            var dontWarnCustomElement = enableCustomElementPropertySupport;
            if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing)
              warnForPropDifference(propKey, serverValue, nextProp);
          }
        }
      }
      if (shouldWarnDev) {
        if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== !0)
          warnForExtraAttributes(extraAttributeNames);
      }
      switch (tag) {
        case "input":
          track(domElement), postMountWrapper(domElement, rawProps, !0);
          break;
        case "textarea":
          track(domElement), postMountWrapper$3(domElement);
          break;
        case "select":
        case "option":
          break;
        default:
          if (typeof rawProps.onClick === "function")
            trapClickOnNonInteractiveElement(domElement);
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration)
          return;
        didWarnInvalidHydration = !0, error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration)
          return;
        didWarnInvalidHydration = !0, error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration)
          return;
        didWarnInvalidHydration = !0, error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === "")
          return;
        if (didWarnInvalidHydration)
          return;
        didWarnInvalidHydration = !0, error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case "input":
          restoreControlledState(domElement, props);
          return;
        case "textarea":
          restoreControlledState$2(domElement, props);
          return;
        case "select":
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function() {
    }, updatedAncestorInfo = function() {
    };
    {
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        "foreignObject",
        "desc",
        "title"
      ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo), info = {
          tag
        };
        if (inScopeTags.indexOf(tag) !== -1)
          ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null;
        if (buttonScopeTags.indexOf(tag) !== -1)
          ancestorInfo.pTagInButtonScope = null;
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p")
          ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null;
        if (ancestorInfo.current = info, tag === "form")
          ancestorInfo.formTag = info;
        if (tag === "a")
          ancestorInfo.aTagInScope = info;
        if (tag === "button")
          ancestorInfo.buttonTagInScope = info;
        if (tag === "nobr")
          ancestorInfo.nobrTagInScope = info;
        if (tag === "p")
          ancestorInfo.pTagInButtonScope = info;
        if (tag === "li")
          ancestorInfo.listItemTagAutoclosing = info;
        if (tag === "dd" || tag === "dt")
          ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
      };
      var isTagValidWithParent = function(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return !0;
      }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      }, didWarn$1 = {};
      validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null)
            error("validateDOMNesting: when childText is passed, childTag should be null");
          childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor)
          return;
        var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey])
          return;
        didWarn$1[warnKey] = !0;
        var tagDisplayName = childTag, whitespaceInfo = "";
        if (childTag === "#text")
          if (/\S/.test(childText))
            tagDisplayName = "Text nodes";
          else
            tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
        else
          tagDisplayName = "<" + childTag + ">";
        if (invalidParent) {
          var info = "";
          if (ancestorTag === "table" && childTag === "tr")
            info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
          error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else
          error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
      var type, namespace, nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE: {
          type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
          var root2 = rootContainerInstance.documentElement;
          namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
          break;
        }
        default: {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
          type = container.tagName, namespace = getChildNamespace(ownNamespace, type);
          break;
        }
      }
      {
        var validatedTag = type.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getPublicInstance(instance) {
      return instance;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
      var activeInstance = null;
      return setEnabled(!1), activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        if (validateDOMNesting(type, null, hostContextDev.ancestorInfo), typeof props.children === "string" || typeof props.children === "number") {
          var string = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      switch (setInitialProperties(domElement, type, props, rootContainerInstance), type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!props.autoFocus;
        case "img":
          return !0;
        default:
          return !1;
      }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
          var string = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      return precacheFiberNode(internalInstanceHandle, textNode), textNode;
    }
    function getCurrentEventPriority() {
      var currentEvent = window.event;
      if (currentEvent === void 0)
        return DefaultEventPriority;
      return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0, noTimeout = -1, localPromise = typeof Promise === "function" ? Promise : void 0, scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error2) {
      setTimeout(function() {
        throw error2;
      });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          if (newProps.autoFocus)
            domElement.focus();
          return;
        case "img": {
          if (newProps.src)
            domElement.src = newProps.src;
          return;
        }
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      updateProperties(domElement, updatePayload, type, oldProps, newProps), updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE)
        parentNode = container.parentNode, parentNode.insertBefore(child, container);
      else
        parentNode = container, parentNode.appendChild(child);
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null)
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE)
        container.parentNode.insertBefore(child, beforeChild);
      else
        container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE)
        container.parentNode.removeChild(child);
      else
        container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance, depth = 0;
      do {
        var nextNode = node.nextSibling;
        if (parentInstance.removeChild(node), nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;
          if (data === SUSPENSE_END_DATA)
            if (depth === 0) {
              parentInstance.removeChild(nextNode), retryIfBlockedOn(suspenseInstance);
              return;
            } else
              depth--;
          else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA)
            depth++;
        }
        node = nextNode;
      } while (node);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE)
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      else if (container.nodeType === ELEMENT_NODE)
        clearSuspenseBoundary(container, suspenseInstance);
      retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
      instance = instance;
      var style2 = instance.style;
      if (typeof style2.setProperty === "function")
        style2.setProperty("display", "none", "important");
      else
        style2.display = "none";
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE$1], display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
      instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE)
        container.textContent = "";
      else if (container.nodeType === DOCUMENT_NODE) {
        if (container.documentElement)
          container.removeChild(container.documentElement);
      }
    }
    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase())
        return null;
      return instance;
    }
    function canHydrateTextInstance(instance, text) {
      if (text === "" || instance.nodeType !== TEXT_NODE)
        return null;
      return instance;
    }
    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE)
        return null;
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
      var dataset = instance.nextSibling && instance.nextSibling.dataset, digest, message, stack;
      if (dataset)
        digest = dataset.dgst, message = dataset.msg, stack = dataset.stck;
      return {
        message,
        digest,
        stack
      };
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
      for (;node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
          break;
        if (nodeType === COMMENT_NODE) {
          var nodeData = node.data;
          if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA)
            break;
          if (nodeData === SUSPENSE_END_DATA)
            return null;
        }
      }
      return node;
    }
    function getNextHydratableSibling(instance) {
      return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
      return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
      return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling, depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_END_DATA)
            if (depth === 0)
              return getNextHydratableSibling(node);
            else
              depth--;
          else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA)
            depth++;
        }
        node = node.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      var node = targetInstance.previousSibling, depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA)
            if (depth === 0)
              return node;
            else
              depth--;
          else if (data === SUSPENSE_END_DATA)
            depth++;
        }
        node = node.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
      return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
      var shouldWarnDev = !0;
      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) {
        var shouldWarnDev = !0;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
      if (instance.nodeType === ELEMENT_NODE)
        warnForDeletedHydratableElement(parentContainer, instance);
      else if (instance.nodeType === COMMENT_NODE)
        ;
      else
        warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          if (instance.nodeType === ELEMENT_NODE)
            warnForDeletedHydratableElement(parentNode, instance);
          else if (instance.nodeType === COMMENT_NODE)
            ;
          else
            warnForDeletedHydratableText(parentNode, instance);
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0)
        if (instance.nodeType === ELEMENT_NODE)
          warnForDeletedHydratableElement(parentInstance, instance);
        else if (instance.nodeType === COMMENT_NODE)
          ;
        else
          warnForDeletedHydratableText(parentInstance, instance);
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
      warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
      warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedElement(parentNode, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedText(parentNode, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0)
        warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0)
        warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
      error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
      listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
      delete node[internalInstanceKey], delete node[internalPropsKey], delete node[internalEventHandlersKey], delete node[internalEventHandlerListenersKey], delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
      node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
      node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
      return !!node[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst)
        return targetInst;
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst)
                return targetSuspenseInst;
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode, parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
      if (inst)
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot)
          return inst;
        else
          return null;
      return null;
    }
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText)
        return inst.stateNode;
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
      node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
      var elementListenerSet = node[internalEventHandlersKey];
      if (elementListenerSet === void 0)
        elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set;
      return elementListenerSet;
    }
    var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
      } else
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs)
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw err.name = "Invariant Violation", err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error))
              setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null);
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures))
              loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null);
          }
      }
    }
    var valueStack = [], fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor, fiber) {
      if (index < 0) {
        error("Unexpected pop.");
        return;
      }
      if (fiber !== fiberStack[index])
        error("Unexpected Fiber popped.");
      cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
    }
    function push(cursor, value, fiber) {
      index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
    }
    var warnedAboutMissingGetChildContext = {}, emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component))
          return previousContext;
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
      {
        var instance = workInProgress2.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress2, unmaskedContext) {
      {
        var type = workInProgress2.type, contextTypes = type.contextTypes;
        if (!contextTypes)
          return emptyContextObject;
        var instance = workInProgress2.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
          return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for (var key in contextTypes)
          context[key] = unmaskedContext[key];
        {
          var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name);
        }
        if (instance)
          cacheContext(workInProgress2, unmaskedContext, context);
        return context;
      }
    }
    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== void 0;
      }
    }
    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (contextStackCursor.current !== emptyContextObject)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance = fiber.stateNode, childContextTypes = type.childContextTypes;
        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName])
              warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
          }
          return parentContext;
        }
        var childContext = instance.getChildContext();
        for (var contextKey in childContext)
          if (!(contextKey in childContextTypes))
            throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        {
          var name = getComponentNameFromFiber(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name);
        }
        return assign({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress2) {
      {
        var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), !0;
      }
    }
    function invalidateContextProvider(workInProgress2, type, didChange) {
      {
        var instance = workInProgress2.stateNode;
        if (!instance)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
          var mergedContext = processChildContext(workInProgress2, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
        } else
          pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;
            case ClassComponent: {
              var Component = node.type;
              if (isContextProvider(Component))
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          node = node.return;
        } while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var LegacyRoot = 0, ConcurrentRoot = 1, syncQueue = null, includesLegacySyncCallbacks = !1, isFlushingSyncQueue = !1;
    function scheduleSyncCallback(callback) {
      if (syncQueue === null)
        syncQueue = [callback];
      else
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = !0, scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
      if (includesLegacySyncCallbacks)
        flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = !0;
        var i = 0, previousUpdatePriority = getCurrentUpdatePriority();
        try {
          var isSync = !0, queue = syncQueue;
          setCurrentUpdatePriority(DiscreteEventPriority);
          for (;i < queue.length; i++) {
            var callback = queue[i];
            do
              callback = callback(isSync);
            while (callback !== null);
          }
          syncQueue = null, includesLegacySyncCallbacks = !1;
        } catch (error2) {
          if (syncQueue !== null)
            syncQueue = syncQueue.slice(i + 1);
          throw scheduleCallback(ImmediatePriority, flushSyncCallbacks), error2;
        } finally {
          setCurrentUpdatePriority(previousUpdatePriority), isFlushingSyncQueue = !1;
        }
      }
      return null;
    }
    var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
    function isForkedChild(workInProgress2) {
      return warnIfNotHydrating(), (workInProgress2.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress2) {
      return warnIfNotHydrating(), treeForkCount;
    }
    function getTreeId() {
      var overflow = treeContextOverflow, idWithLeadingBit = treeContextId, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
      return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating(), forkStack[forkStackIndex++] = treeForkCount, forkStack[forkStackIndex++] = treeForkProvider, treeForkProvider = workInProgress2, treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index2) {
      warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId, baseOverflow = treeContextOverflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length = getBitLength(totalChildren) + baseLength;
      if (length > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
        treeContextId = 1 << restOfLength | id, treeContextOverflow = overflow;
      } else {
        var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
        treeContextId = 1 << length | _id, treeContextOverflow = _overflow;
      }
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      var returnFiber = workInProgress2.return;
      if (returnFiber !== null) {
        var numberOfForks = 1, slotIndex = 0;
        pushTreeFork(workInProgress2, numberOfForks), pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
    }
    function getBitLength(number) {
      return 32 - clz32(number);
    }
    function getLeadingBit(id) {
      return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress2) {
      while (workInProgress2 === treeForkProvider)
        treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
      while (workInProgress2 === treeContextProvider)
        treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
    }
    function getSuspendedTreeContext() {
      if (warnIfNotHydrating(), treeContextProvider !== null)
        return {
          id: treeContextId,
          overflow: treeContextOverflow
        };
      else
        return null;
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = suspendedContext.id, treeContextOverflow = suspendedContext.overflow, treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      if (!getIsHydrating())
        error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1, hydrationErrors = null;
    function warnIfHydrating() {
      if (isHydrating)
        error("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function markDidThrowWhileHydratingDEV() {
      didSuspendOrErrorDEV = !0;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
      return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      return nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, !0;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
      if (nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, treeContext !== null)
        restoreSuspendedTreeContext(fiber, treeContext);
      return !0;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
      switch (returnFiber.tag) {
        case HostRoot: {
          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
          break;
        }
        case HostComponent: {
          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
          break;
        }
        case SuspenseComponent: {
          var suspenseState = returnFiber.memoizedState;
          if (suspenseState.dehydrated !== null)
            didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
          break;
        }
      }
    }
    function deleteHydratableInstance(returnFiber, instance) {
      warnUnhydratedInstance(returnFiber, instance);
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance, childToDelete.return = returnFiber;
      var deletions = returnFiber.deletions;
      if (deletions === null)
        returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion;
      else
        deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      {
        if (didSuspendOrErrorDEV)
          return;
        switch (returnFiber.tag) {
          case HostRoot: {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var { type, pendingProps: props } = fiber;
                didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                break;
            }
            break;
          }
          case HostComponent: {
            var { type: parentType, memoizedProps: parentProps, stateNode: parentInstance } = returnFiber;
            switch (fiber.tag) {
              case HostComponent: {
                var { type: _type, pendingProps: _props } = fiber, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                break;
              }
              case HostText: {
                var _text = fiber.pendingProps, _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                break;
              }
            }
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState, _parentInstance = suspenseState.dehydrated;
            if (_parentInstance !== null)
              switch (fiber.tag) {
                case HostComponent:
                  var { type: _type2, pendingProps: _props2 } = fiber;
                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                  break;
                case HostText:
                  var _text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement, warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent: {
          var { type, pendingProps: props } = fiber, instance = canHydrateInstance(nextInstance, type);
          if (instance !== null)
            return fiber.stateNode = instance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(instance), !0;
          return !1;
        }
        case HostText: {
          var text = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null)
            return fiber.stateNode = textInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, !0;
          return !1;
        }
        case SuspenseComponent: {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            return dehydratedFragment.return = fiber, fiber.child = dehydratedFragment, hydrationParentFiber = fiber, nextHydratableInstance = null, !0;
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating)
        return;
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        if (shouldClientRenderOnMismatch(fiber))
          warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch();
        insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        if (shouldClientRenderOnMismatch(fiber))
          warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch();
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        var prevHydrationParentFiber = hydrationParentFiber;
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
          return;
        }
        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
      }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance = fiber.stateNode, shouldWarnIfMismatchDev = !didSuspendOrErrorDEV, updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
      if (fiber.updateQueue = updatePayload, updatePayload !== null)
        return !0;
      return !1;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var { stateNode: textInstance, memoizedProps: textContent } = fiber, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null)
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
              break;
            }
            case HostComponent: {
              var { type: parentType, memoizedProps: parentProps, stateNode: parentInstance } = returnFiber, _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
              break;
            }
          }
      }
      return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)
        parent = parent.return;
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber)
        return !1;
      if (!isHydrating)
        return popToNextHostParent(fiber), isHydrating = !0, !1;
      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance)
          if (shouldClientRenderOnMismatch(fiber))
            warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
          else
            while (nextInstance)
              deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
      }
      if (popToNextHostParent(fiber), fiber.tag === SuspenseComponent)
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      else
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return !0;
    }
    function hasUnhydratedTailNodes() {
      return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance)
        warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
    }
    function resetHydrationState() {
      hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1;
    }
    function upgradeHydrationErrorsToRecoverable() {
      if (hydrationErrors !== null)
        queueRecoverableErrors(hydrationErrors), hydrationErrors = null;
    }
    function getIsHydrating() {
      return isHydrating;
    }
    function queueHydrationError(error2) {
      if (hydrationErrors === null)
        hydrationErrors = [error2];
      else
        hydrationErrors.push(error2);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = null;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function(fiber, instance) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(fiber, instance) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null, node = fiber;
        while (node !== null) {
          if (node.mode & StrictLegacyMode)
            maybeStrictRoot = node;
          node = node.return;
        }
        return maybeStrictRoot;
      }, setToSortedString = function(set2) {
        var array = [];
        return set2.forEach(function(value) {
          array.push(value);
        }), array.sort().join(", ");
      }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set;
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type))
          return;
        if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0)
          pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function")
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0)
          pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function")
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0)
          pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function")
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
      }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set;
        if (pendingComponentWillMountWarnings.length > 0)
          pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = [];
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set;
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0)
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = [];
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set;
        if (pendingComponentWillReceivePropsWarnings.length > 0)
          pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = [];
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set;
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0)
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set;
        if (pendingComponentWillUpdateWarnings.length > 0)
          pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = [];
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set;
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0)
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = [];
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map, didWarnAboutLegacyContext = /* @__PURE__ */ new Set;
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type))
          return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
          if (warningsForRoot === void 0)
            warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          warningsForRoot.push(fiber);
        }
      }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
          if (fiberArray.length === 0)
            return;
          var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set;
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber), error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      }, ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = /* @__PURE__ */ new Map;
      };
    }
    var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = !1, didWarnAboutGenerators = !1, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
      if (child === null || typeof child !== "object")
        return;
      if (!child._store || child._store.validated || child.key != null)
        return;
      if (typeof child._store !== "object")
        throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
      child._store.validated = !0;
      var componentName = getComponentNameFromFiber(returnFiber) || "Component";
      if (ownerHasKeyUseWarning[componentName])
        return;
      ownerHasKeyUseWarning[componentName] = !0, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function isReactClass(type) {
      return type.prototype && type.prototype.isReactComponent;
    }
    function coerceRef(returnFiber, current2, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
        if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self) && !(element._owner && element._owner.tag !== ClassComponent) && !(typeof element.type === "function" && !isReactClass(element.type)) && element._owner) {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (!didWarnAboutStringRefs[componentName])
            error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef), didWarnAboutStringRefs[componentName] = !0;
        }
        if (element._owner) {
          var owner = element._owner, inst;
          if (owner) {
            var ownerFiber = owner;
            if (ownerFiber.tag !== ClassComponent)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            inst = ownerFiber.stateNode;
          }
          if (!inst)
            throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          var resolvedInst = inst;
          checkPropStringCoercion(mixedRef, "ref");
          var stringRef = "" + mixedRef;
          if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef)
            return current2.ref;
          var ref = function(value) {
            var refs = resolvedInst.refs;
            if (value === null)
              delete refs[stringRef];
            else
              refs[stringRef] = value;
          };
          return ref._stringRef = stringRef, ref;
        } else {
          if (typeof mixedRef !== "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!element._owner)
            throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var childString = Object.prototype.toString.call(newChild);
      throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName])
          return;
        ownerHasFunctionTypeWarning[componentName] = !0, error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function resolveLazy(lazyType) {
      var { _payload: payload, _init: init } = lazyType;
      return init(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects)
          return;
        var deletions = returnFiber.deletions;
        if (deletions === null)
          returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion;
        else
          deletions.push(childToDelete);
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects)
          return null;
        var childToDelete = currentFirstChild;
        while (childToDelete !== null)
          deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = /* @__PURE__ */ new Map, existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null)
            existingChildren.set(existingChild.key, existingChild);
          else
            existingChildren.set(existingChild.index, existingChild);
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        var clone = createWorkInProgress(fiber, pendingProps);
        return clone.index = 0, clone.sibling = null, clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        if (newFiber.index = newIndex, !shouldTrackSideEffects)
          return newFiber.flags |= Forked, lastPlacedIndex;
        var current2 = newFiber.alternate;
        if (current2 !== null) {
          var oldIndex = current2.index;
          if (oldIndex < lastPlacedIndex)
            return newFiber.flags |= Placement, lastPlacedIndex;
          else
            return oldIndex;
        } else
          return newFiber.flags |= Placement, lastPlacedIndex;
      }
      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null)
          newFiber.flags |= Placement;
        return newFiber;
      }
      function updateTextNode(returnFiber, current2, textContent, lanes) {
        if (current2 === null || current2.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        } else {
          var existing = useFiber(current2, textContent);
          return existing.return = returnFiber, existing;
        }
      }
      function updateElement(returnFiber, current2, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
        if (current2 !== null) {
          if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
            var existing = useFiber(current2, element.props);
            return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
          }
        }
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
      }
      function updatePortal(returnFiber, current2, portal, lanes) {
        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        } else {
          var existing = useFiber(current2, portal.children || []);
          return existing.return = returnFiber, existing;
        }
      }
      function updateFragment2(returnFiber, current2, fragment, lanes, key) {
        if (current2 === null || current2.tag !== Fragment) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          return created.return = returnFiber, created;
        } else {
          var existing = useFiber(current2, fragment);
          return existing.return = returnFiber, existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
              return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
            }
            case REACT_PORTAL_TYPE: {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              return _created2.return = returnFiber, _created2;
            }
            case REACT_LAZY_TYPE: {
              var { _payload: payload, _init: init } = newChild;
              return createChild(returnFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            return _created3.return = returnFiber, _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "function")
          warnOnFunctionType(returnFiber);
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          if (key !== null)
            return null;
          return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              if (newChild.key === key)
                return updateElement(returnFiber, oldFiber, newChild, lanes);
              else
                return null;
            case REACT_PORTAL_TYPE:
              if (newChild.key === key)
                return updatePortal(returnFiber, oldFiber, newChild, lanes);
              else
                return null;
            case REACT_LAZY_TYPE: {
              var { _payload: payload, _init: init } = newChild;
              return updateSlot(returnFiber, oldFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null)
              return null;
            return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "function")
          warnOnFunctionType(returnFiber);
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }
            case REACT_PORTAL_TYPE: {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
            }
            case REACT_LAZY_TYPE:
              var { _payload: payload, _init: init } = newChild;
              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "function")
          warnOnFunctionType(returnFiber);
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== "object" || child === null)
            return knownKeys;
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== "string")
                break;
              if (knownKeys === null) {
                knownKeys = /* @__PURE__ */ new Set, knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted \u2014 the behavior is unsupported and " + "could change in a future version.", key);
              break;
            case REACT_LAZY_TYPE:
              var { _payload: payload, _init: init } = child;
              warnOnInvalidKey(init(payload), knownKeys, returnFiber);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        {
          var knownKeys = null;
          for (var i = 0;i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null;
        for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx)
            nextOldFiber = oldFiber, oldFiber = null;
          else
            nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            if (oldFiber === null)
              oldFiber = nextOldFiber;
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null)
              deleteChild(returnFiber, oldFiber);
          }
          if (lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null)
            resultingFirstChild = newFiber;
          else
            previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null)
              continue;
            if (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null)
              resultingFirstChild = _newFiber;
            else
              previousNewFiber.sibling = _newFiber;
            previousNewFiber = _newFiber;
          }
          if (getIsHydrating()) {
            var _numberOfForks = newIdx;
            pushTreeFork(returnFiber, _numberOfForks);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (;newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null)
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
            }
            if (lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null)
              resultingFirstChild = _newFiber2;
            else
              previousNewFiber.sibling = _newFiber2;
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects)
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        if (getIsHydrating()) {
          var _numberOfForks2 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks2);
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (typeof iteratorFn !== "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
            if (!didWarnAboutGenerators)
              error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
            didWarnAboutGenerators = !0;
          }
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps)
              error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            didWarnAboutMaps = !0;
          }
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null, _step = _newChildren.next();
            for (;!_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (newChildren == null)
          throw new Error("An iterable object provided no iterator.");
        var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next();
        for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx)
            nextOldFiber = oldFiber, oldFiber = null;
          else
            nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            if (oldFiber === null)
              oldFiber = nextOldFiber;
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null)
              deleteChild(returnFiber, oldFiber);
          }
          if (lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null)
            resultingFirstChild = newFiber;
          else
            previousNewFiber.sibling = newFiber;
          previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (step.done) {
          if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null)
              continue;
            if (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null)
              resultingFirstChild = _newFiber3;
            else
              previousNewFiber.sibling = _newFiber3;
            previousNewFiber = _newFiber3;
          }
          if (getIsHydrating()) {
            var _numberOfForks3 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks3);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (;!step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null)
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
            }
            if (lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null)
              resultingFirstChild = _newFiber4;
            else
              previousNewFiber.sibling = _newFiber4;
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects)
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        if (getIsHydrating()) {
          var _numberOfForks4 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks4);
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          return existing.return = returnFiber, existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        return created.return = returnFiber, created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key, child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              if (child.tag === Fragment) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
              }
            } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var _existing = useFiber(child, element.props);
              return _existing.ref = coerceRef(returnFiber, child, element), _existing.return = returnFiber, _existing._debugSource = element._source, _existing._debugOwner = element._owner, _existing;
            }
            deleteRemainingChildren(returnFiber, child);
            break;
          } else
            deleteChild(returnFiber, child);
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          return created.return = returnFiber, created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key, child = currentFirstChild;
        while (child !== null) {
          if (child.key === key)
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              return existing.return = returnFiber, existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          else
            deleteChild(returnFiber, child);
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        return created.return = returnFiber, created;
      }
      function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment)
          newChild = newChild.props.children;
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_LAZY_TYPE:
              var { _payload: payload, _init: init } = newChild;
              return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
          }
          if (isArray(newChild))
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          if (getIteratorFn(newChild))
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number")
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
        if (typeof newChild === "function")
          warnOnFunctionType(returnFiber);
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers2;
    }
    var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1);
    function cloneChildFibers(current2, workInProgress2) {
      if (current2 !== null && workInProgress2.child !== current2.child)
        throw new Error("Resuming work not yet implemented.");
      if (workInProgress2.child === null)
        return;
      var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress2.child = newChild, newChild.return = workInProgress2;
      while (currentChild.sibling !== null)
        currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
      newChild.sibling = null;
    }
    function resetChildFibers(workInProgress2, lanes) {
      var child = workInProgress2.child;
      while (child !== null)
        resetWorkInProgress(child, lanes), child = child.sibling;
    }
    var valueCursor = createCursor(null), rendererSigil;
    rendererSigil = {};
    var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
    function resetContextDependencies() {
      currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
    }
    function enterDisallowedContextReadInDEV() {
      isDisallowedContextReadInDEV = !0;
    }
    function exitDisallowedContextReadInDEV() {
      isDisallowedContextReadInDEV = !1;
    }
    function pushProvider(providerFiber, context, nextValue) {
      {
        push(valueCursor, context._currentValue, providerFiber), context._currentValue = nextValue;
        {
          if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil)
            error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber), context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      var node = parent;
      while (node !== null) {
        var alternate = node.alternate;
        if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
          if (node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null)
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2))
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        if (node === propagationRoot)
          break;
        node = node.return;
      }
      if (node !== propagationRoot)
        error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress2, context, renderLanes2) {
      propagateContextChange_eager(workInProgress2, context, renderLanes2);
    }
    function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
      var fiber = workInProgress2.child;
      if (fiber !== null)
        fiber.return = workInProgress2;
      while (fiber !== null) {
        var nextFiber = void 0, list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            if (dependency.context === context) {
              if (fiber.tag === ClassComponent) {
                var lane = pickArbitraryLane(renderLanes2), update = createUpdate(NoTimestamp, lane);
                update.tag = ForceUpdate;
                var updateQueue = fiber.updateQueue;
                if (updateQueue === null)
                  ;
                else {
                  var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
                  if (pending === null)
                    update.next = update;
                  else
                    update.next = pending.next, pending.next = update;
                  sharedQueue.pending = update;
                }
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
              var alternate = fiber.alternate;
              if (alternate !== null)
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
              scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2), list.lanes = mergeLanes(list.lanes, renderLanes2);
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider)
          nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
        else if (fiber.tag === DehydratedFragment) {
          var parentSuspense = fiber.return;
          if (parentSuspense === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
          var _alternate = parentSuspense.alternate;
          if (_alternate !== null)
            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
          scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2), nextFiber = fiber.sibling;
        } else
          nextFiber = fiber.child;
        if (nextFiber !== null)
          nextFiber.return = fiber;
        else {
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              sibling.return = nextFiber.return, nextFiber = sibling;
              break;
            }
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress2, renderLanes2) {
      currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastFullyObservedContext = null;
      var dependencies = workInProgress2.dependencies;
      if (dependencies !== null) {
        var firstContext = dependencies.firstContext;
        if (firstContext !== null) {
          if (includesSomeLane(dependencies.lanes, renderLanes2))
            markWorkInProgressReceivedUpdate();
          dependencies.firstContext = null;
        }
      }
    }
    function readContext(context) {
      if (isDisallowedContextReadInDEV)
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var value = context._currentValue;
      if (lastFullyObservedContext === context)
        ;
      else {
        var contextItem = {
          context,
          memoizedValue: value,
          next: null
        };
        if (lastContextDependency === null) {
          if (currentlyRenderingFiber === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem
          };
        } else
          lastContextDependency = lastContextDependency.next = contextItem;
      }
      return value;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
      if (concurrentQueues === null)
        concurrentQueues = [queue];
      else
        concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
      if (concurrentQueues !== null) {
        for (var i = 0;i < concurrentQueues.length; i++) {
          var queue = concurrentQueues[i], lastInterleavedUpdate = queue.interleaved;
          if (lastInterleavedUpdate !== null) {
            queue.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = queue.pending;
            if (lastPendingUpdate !== null) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate, lastInterleavedUpdate.next = firstPendingUpdate;
            }
            queue.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null)
        update.next = update, pushConcurrentUpdateQueue(queue);
      else
        update.next = interleaved.next, interleaved.next = update;
      return queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null)
        update.next = update, pushConcurrentUpdateQueue(queue);
      else
        update.next = interleaved.next, interleaved.next = update;
      queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null)
        update.next = update, pushConcurrentUpdateQueue(queue);
      else
        update.next = interleaved.next, interleaved.next = update;
      return queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null)
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags)
        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
      var node = sourceFiber, parent = sourceFiber.return;
      while (parent !== null) {
        if (parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null)
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        else if ((parent.flags & (Placement | Hydrating)) !== NoFlags)
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        node = parent, parent = parent.return;
      }
      if (node.tag === HostRoot) {
        var root2 = node.stateNode;
        return root2;
      } else
        return null;
    }
    var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = !1, currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: NoLanes
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress2) {
      var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
      if (queue === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress2.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime,
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null)
        return null;
      var sharedQueue = updateQueue.shared;
      if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate)
        error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0;
      if (isUnsafeClassRenderPhaseUpdate()) {
        var pending = sharedQueue.pending;
        if (pending === null)
          update.next = update;
        else
          update.next = pending.next, pending.next = update;
        return sharedQueue.pending = update, unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      } else
        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root2, fiber, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null)
        return;
      var sharedQueue = updateQueue.shared;
      if (isTransitionLane(lane)) {
        var queueLanes = sharedQueue.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        sharedQueue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var { updateQueue: queue, alternate: current2 } = workInProgress2;
      if (current2 !== null) {
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null)
                newFirst = newLast = clone;
              else
                newLast.next = clone, newLast = clone;
              update = update.next;
            } while (update !== null);
            if (newLast === null)
              newFirst = newLast = capturedUpdate;
            else
              newLast.next = capturedUpdate, newLast = capturedUpdate;
          } else
            newFirst = newLast = capturedUpdate;
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          }, workInProgress2.updateQueue = queue;
          return;
        }
      }
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null)
        queue.firstBaseUpdate = capturedUpdate;
      else
        lastBaseUpdate.next = capturedUpdate;
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState: {
          var payload = update.payload;
          if (typeof payload === "function") {
            enterDisallowedContextReadInDEV();
            var nextState = payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(!0);
                try {
                  payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(!1);
                }
              }
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
        case CaptureUpdate:
          workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
        case UpdateState: {
          var _payload = update.payload, partialState;
          if (typeof _payload === "function") {
            enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(!0);
                try {
                  _payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(!1);
                }
              }
              exitDisallowedContextReadInDEV();
            }
          } else
            partialState = _payload;
          if (partialState === null || partialState === void 0)
            return prevState;
          return assign({}, prevState, partialState);
        }
        case ForceUpdate:
          return hasForceUpdate = !0, prevState;
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
      var queue = workInProgress2.updateQueue;
      hasForceUpdate = !1, currentlyProcessingQueue = queue.shared;
      var { firstBaseUpdate, lastBaseUpdate } = queue, pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        if (lastPendingUpdate.next = null, lastBaseUpdate === null)
          firstBaseUpdate = firstPendingUpdate;
        else
          lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null)
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            else
              currentLastBaseUpdate.next = firstPendingUpdate;
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      if (firstBaseUpdate !== null) {
        var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update = firstBaseUpdate;
        do {
          var { lane: updateLane, eventTime: updateEventTime } = update;
          if (!isSubsetOfLanes(renderLanes2, updateLane)) {
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null)
              newFirstBaseUpdate = newLastBaseUpdate = clone, newBaseState = newState;
            else
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null && update.lane !== NoLane) {
              workInProgress2.flags |= Callback;
              var effects = queue.effects;
              if (effects === null)
                queue.effects = [update];
              else
                effects.push(update);
            }
          }
          if (update = update.next, update === null)
            if (pendingQueue = queue.shared.pending, pendingQueue === null)
              break;
            else {
              var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null, update = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
            }
        } while (!0);
        if (newLastBaseUpdate === null)
          newBaseState = newState;
        queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate;
        var lastInterleaved = queue.shared.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do
            newLanes = mergeLanes(newLanes, interleaved.lane), interleaved = interleaved.next;
          while (interleaved !== lastInterleaved);
        } else if (firstBaseUpdate === null)
          queue.shared.lanes = NoLanes;
        markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
      }
      currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = !1;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      var effects = finishedQueue.effects;
      if (finishedQueue.effects = null, effects !== null)
        for (var i = 0;i < effects.length; i++) {
          var effect = effects[i], callback = effect.callback;
          if (callback !== null)
            effect.callback = null, callCallback(callback, instance);
        }
    }
    var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (c === NO_CONTEXT)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current), context = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context, fiber.type);
      if (context === nextContext)
        return;
      push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber)
        return;
      pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
      var nextState = workInProgress2.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null)
          return !0;
        return !1;
      }
      var props = workInProgress2.memoizedProps;
      return !0;
    }
    function findFirstSuspended(row) {
      var node = row;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
              return node;
          }
        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
          var didSuspend = (node.flags & DidCapture) !== NoFlags;
          if (didSuspend)
            return node;
        } else if (node.child !== null) {
          node.child.return = node, node = node.child;
          continue;
        }
        if (node === row)
          return null;
        while (node.sibling === null) {
          if (node.return === null || node.return === row)
            return null;
          node = node.return;
        }
        node.sibling.return = node.return, node = node.sibling;
      }
      return null;
    }
    var NoFlags$1 = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive$1 = 8, workInProgressSources = [];
    function resetWorkInProgressVersions() {
      for (var i = 0;i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        mutableSource._workInProgressVersionPrimary = null;
      }
      workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root2, mutableSource) {
      var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
      if (root2.mutableSourceEagerHydrationData == null)
        root2.mutableSourceEagerHydrationData = [mutableSource, version];
      else
        root2.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$2 } = ReactSharedInternals, didWarnAboutMismatchedHooksForComponent, didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set;
    var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null)
          hookTypesDev = [hookName];
        else
          hookTypesDev.push(hookName);
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          if (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
            warnOnHookMismatchInDev(hookName);
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      if (deps !== void 0 && deps !== null && !isArray(deps))
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          if (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null) {
            var table = "", secondColumnStart = 30;
            for (var i = 0;i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i + 1 + ". " + oldHookName;
              while (row.length < secondColumnStart)
                row += " ";
              row += newHookName + "\n", table += row;
            }
            error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      if (ignorePreviousDependencies)
        return !1;
      if (prevDeps === null)
        return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
      if (nextDeps.length !== prevDeps.length)
        error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
      for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i]))
          continue;
        return !1;
      }
      return !0;
    }
    function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      if (renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null)
        ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
      else if (hookTypesDev !== null)
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
      else
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
      var children = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          if (didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, numberOfReRenders >= RE_RENDER_LIMIT)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          numberOfReRenders += 1, ignorePreviousDependencies = !1, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode)
        error("Internal React error: Expected static flag was missing. Please notify the React team.");
      if (didScheduleRenderPhaseUpdate = !1, didRenderTooFewHooks)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return children;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      return localIdCounter = 0, didRenderIdHook;
    }
    function bailoutHooks(current2, workInProgress2, lanes) {
      if (workInProgress2.updateQueue = current2.updateQueue, (workInProgress2.mode & StrictEffectsMode) !== NoMode)
        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
      else
        workInProgress2.flags &= ~(Passive | Update);
      current2.lanes = removeLanes(current2.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null)
            queue.pending = null;
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = !1;
      }
      renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null)
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      else
        workInProgressHook = workInProgressHook.next = hook;
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      var nextCurrentHook;
      if (currentHook === null) {
        var current2 = currentlyRenderingFiber$1.alternate;
        if (current2 !== null)
          nextCurrentHook = current2.memoizedState;
        else
          nextCurrentHook = null;
      } else
        nextCurrentHook = currentHook.next;
      var nextWorkInProgressHook;
      if (workInProgressHook === null)
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      else
        nextWorkInProgressHook = workInProgressHook.next;
      if (nextWorkInProgressHook !== null)
        workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
      else {
        if (nextCurrentHook === null)
          throw new Error("Rendered more hooks than during the previous render.");
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null)
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        else
          workInProgressHook = workInProgressHook.next = newHook;
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook(), initialState;
      if (init !== void 0)
        initialState = init(initialArg);
      else
        initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook(), queue = hook.queue;
      if (queue === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      queue.lastRenderedReducer = reducer;
      var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
        }
        if (current2.baseQueue !== baseQueue)
          error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
        current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
      }
      if (baseQueue !== null) {
        var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null)
              newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState;
            else
              newBaseQueueLast = newBaseQueueLast.next = clone;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                lane: NoLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            if (update.hasEagerState)
              newState = update.eagerState;
            else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null)
          newBaseState = newState;
        else
          newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(newState, hook.memoizedState))
          markWorkInProgressReceivedUpdate();
        hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
      }
      var lastInterleaved = queue.interleaved;
      if (lastInterleaved !== null) {
        var interleaved = lastInterleaved;
        do {
          var interleavedLane = interleaved.lane;
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane), markSkippedUpdateLanes(interleavedLane), interleaved = interleaved.next;
        } while (interleaved !== lastInterleaved);
      } else if (baseQueue === null)
        queue.lanes = NoLanes;
      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook(), queue = hook.queue;
      if (queue === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      queue.lastRenderedReducer = reducer;
      var { dispatch, pending: lastRenderPhaseUpdate } = queue, newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update = firstRenderPhaseUpdate;
        do {
          var action = update.action;
          newState = reducer(newState, action), update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        if (!objectIs(newState, hook.memoizedState))
          markWorkInProgressReceivedUpdate();
        if (hook.memoizedState = newState, hook.baseQueue === null)
          hook.baseState = newState;
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      return;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      return;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook(), nextSnapshot, isHydrating2 = getIsHydrating();
      if (isHydrating2) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        if (nextSnapshot = getServerSnapshot(), !didWarnUncachedGetSnapshot) {
          if (nextSnapshot !== getServerSnapshot())
            error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0;
        }
      } else {
        if (nextSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          if (!objectIs(nextSnapshot, cachedSnapshot))
            error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0;
        }
        var root2 = getWorkInProgressRoot();
        if (root2 === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        if (!includesBlockingLane(root2, renderLanes))
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot
      };
      return hook.queue = inst, mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null), nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
      if (!didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();
        if (!objectIs(nextSnapshot, cachedSnapshot))
          error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0;
      }
      var prevSnapshot = hook.memoizedState, snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
      if (snapshotChanged)
        hook.memoizedState = nextSnapshot, markWorkInProgressReceivedUpdate();
      var inst = hook.queue;
      if (updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        var root2 = getWorkInProgressRoot();
        if (root2 === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        if (!includesBlockingLane(root2, renderLanes))
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= StoreConsistency;
      var check = {
        getSnapshot,
        value: renderedSnapshot
      }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null)
        componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.stores = [check];
      else {
        var stores = componentUpdateQueue.stores;
        if (stores === null)
          componentUpdateQueue.stores = [check];
        else
          stores.push(check);
      }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      if (inst.value = nextSnapshot, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst))
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
      var handleStoreChange = function() {
        if (checkIfSnapshotChanged(inst))
          forceStoreRerender(fiber);
      };
      return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
      var { getSnapshot: latestGetSnapshot, value: prevValue } = inst;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(prevValue, nextValue);
      } catch (error2) {
        return !0;
      }
    }
    function forceStoreRerender(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
      if (root2 !== null)
        scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === "function")
        initialState = initialState();
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag,
        create,
        destroy,
        deps,
        next: null
      }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null)
        componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
      else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null)
          componentUpdateQueue.lastEffect = effect.next = effect;
        else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      {
        var _ref2 = {
          current: initialValue
        };
        return hook.memoizedState = _ref2, _ref2;
      }
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        if (destroy = prevEffect.destroy, nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
      else
        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
      return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
      return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = Update;
      if (fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
        fiberFlags |= MountLayoutDev;
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === "function") {
        var refCallback = ref, _inst = create();
        return refCallback(_inst), function() {
          refCallback(null);
        };
      } else if (ref !== null && ref !== void 0) {
        var refObject = ref;
        if (!refObject.hasOwnProperty("current"))
          error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
        var _inst2 = create();
        return refObject.current = _inst2, function() {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      if (typeof create !== "function")
        error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null, fiberFlags = Update;
      if (fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
        fiberFlags |= MountLayoutDev;
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
      if (typeof create !== "function")
        error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
      return hook.memoizedState = [callback, nextDeps], callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
      }
      return hook.memoizedState = [callback, nextDeps], callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
      return hook.memoizedState = [nextValue, nextDeps], nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
      }
      var nextValue = nextCreate();
      return hook.memoizedState = [nextValue, nextDeps], nextValue;
    }
    function mountDeferredValue(value) {
      var hook = mountWorkInProgressHook();
      return hook.memoizedState = value, value;
    }
    function updateDeferredValue(value) {
      var hook = updateWorkInProgressHook(), resolvedCurrentHook = currentHook, prevValue = resolvedCurrentHook.memoizedState;
      return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      if (currentHook === null)
        return hook.memoizedState = value, value;
      else {
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
      if (shouldDeferValue) {
        if (!objectIs(value, prevValue)) {
          var deferredLane = claimNextTransitionLane();
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane), markSkippedUpdateLanes(deferredLane), hook.baseState = !0;
        }
        return prevValue;
      } else {
        if (hook.baseState)
          hook.baseState = !1, markWorkInProgressReceivedUpdate();
        return hook.memoizedState = value, value;
      }
    }
    function startTransition(setPending, callback, options2) {
      var previousPriority = getCurrentUpdatePriority();
      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority)), setPending(!0);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set;
      try {
        setPending(!1), callback();
      } finally {
        if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$2.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
          var updatedFibersCount = currentTransition._updatedFibers.size;
          if (updatedFibersCount > 10)
            warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
          currentTransition._updatedFibers.clear();
        }
      }
    }
    function mountTransition() {
      var _mountState = mountState(!1), isPending = _mountState[0], setPending = _mountState[1], start = startTransition.bind(null, setPending), hook = mountWorkInProgressHook();
      return hook.memoizedState = start, [isPending, start];
    }
    function updateTransition() {
      var _updateState = updateState(), isPending = _updateState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var _rerenderState = rerenderState(), isPending = _rerenderState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
      return [isPending, start];
    }
    var isUpdatingOpaqueValueInRenderPhase = !1;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
      var hook = mountWorkInProgressHook(), root2 = getWorkInProgressRoot(), identifierPrefix = root2.identifierPrefix, id;
      if (getIsHydrating()) {
        var treeId = getTreeId();
        id = ":" + identifierPrefix + "R" + treeId;
        var localId = localIdCounter++;
        if (localId > 0)
          id += "H" + localId.toString(32);
        id += ":";
      } else {
        var globalClientId = globalClientIdCounter++;
        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      }
      return hook.memoizedState = id, id;
    }
    function updateId() {
      var hook = updateWorkInProgressHook(), id = hook.memoizedState;
      return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
      if (typeof arguments[3] === "function")
        error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var lane = requestUpdateLane(fiber), update = {
        lane,
        action,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber))
        enqueueRenderPhaseUpdate(queue, update);
      else {
        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
      if (typeof arguments[3] === "function")
        error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var lane = requestUpdateLane(fiber), update = {
        lane,
        action,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber))
        enqueueRenderPhaseUpdate(queue, update);
      else {
        var alternate = fiber.alternate;
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action);
              if (update.hasEagerState = !0, update.eagerState = eagerState, objectIs(eagerState, currentState)) {
                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                return;
              }
            } catch (error2) {
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          }
        }
        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
      var pending = queue.pending;
      if (pending === null)
        update.next = update;
      else
        update.next = pending.next, pending.next = update;
      queue.pending = update;
    }
    function entangleTransitionUpdate(root2, queue, lane) {
      if (isTransitionLane(lane)) {
        var queueLanes = queue.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        queue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
      }
    }
    function markUpdateInDevTools(fiber, lane, action) {
      markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
      readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), mountDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", mountHookTypesDev(), mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), mountDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", updateHookTypesDev(), mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return warnInvalidContextAccess(), readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", warnInvalidHookAccess(), mountHookTypesDev(), mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return warnInvalidContextAccess(), readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return warnInvalidContextAccess(), readContext(context);
        },
        useCallback: function(callback, deps) {
          return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
        },
        useContext: function(context) {
          return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
        },
        useEffect: function(create, deps) {
          return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
        },
        useDeferredValue: function(value) {
          return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
        },
        useTransition: function() {
          return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
    function isCurrentUpdateNested() {
      return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
      nestedUpdateScheduled = !0;
    }
    function resetNestedUpdateFlag() {
      currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
    }
    function syncNestedUpdateFlag() {
      currentUpdateIsNested = nestedUpdateScheduled, nestedUpdateScheduled = !1;
    }
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      if (profilerStartTime = now$1(), fiber.actualStartTime < 0)
        fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        if (fiber.actualDuration += elapsedTime, overrideBaseTime)
          fiber.selfBaseDuration = elapsedTime;
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (layoutEffectStartTime >= 0) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              root2.effectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              parentStateNode.effectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (passiveEffectStartTime >= 0) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              if (root2 !== null)
                root2.passiveEffectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              if (parentStateNode !== null)
                parentStateNode.passiveEffectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
      passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      var child = fiber.child;
      while (child)
        fiber.actualDuration += child.actualDuration, child = child.sibling;
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = assign({}, baseProps), defaultProps = Component.defaultProps;
        for (var propName in defaultProps)
          if (props[propName] === void 0)
            props[propName] = defaultProps[propName];
        return props;
      }
      return baseProps;
    }
    var fakeInternalInstance = {}, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType, didWarnAboutLegacyContext$1;
    {
      didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set, didWarnAboutUninitializedState = /* @__PURE__ */ new Set, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set, didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set, didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set, didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set, didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set, didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set, didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set;
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set;
      warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function")
          return;
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key))
          didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
      }, warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === void 0) {
          var componentName = getComponentNameFromType(type) || "Component";
          if (!didWarnAboutUndefinedDerivedState.has(componentName))
            didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
        }
      }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
      if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted,
      enqueueSetState: function(inst, payload, callback) {
        var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
        if (update.payload = payload, callback !== void 0 && callback !== null)
          warnOnInvalidCallback(callback, "setState"), update.callback = callback;
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane);
        markStateUpdateScheduled(fiber, lane);
      },
      enqueueReplaceState: function(inst, payload, callback) {
        var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
        if (update.tag = ReplaceState, update.payload = payload, callback !== void 0 && callback !== null)
          warnOnInvalidCallback(callback, "replaceState"), update.callback = callback;
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane);
        markStateUpdateScheduled(fiber, lane);
      },
      enqueueForceUpdate: function(inst, callback) {
        var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
        if (update.tag = ForceUpdate, callback !== void 0 && callback !== null)
          warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback;
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane);
        markForceUpdateScheduled(fiber, lane);
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress2.stateNode;
      if (typeof instance.shouldComponentUpdate === "function") {
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          if (shouldUpdate === void 0)
            error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent)
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      return !0;
    }
    function checkClassInstance(workInProgress2, ctor, newProps) {
      var instance = workInProgress2.stateNode;
      {
        var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
        if (!renderPresent)
          if (ctor.prototype && typeof ctor.prototype.render === "function")
            error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
          else
            error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state)
          error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved)
          error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes)
          error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType)
          error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        {
          if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && (workInProgress2.mode & StrictLegacyMode) === NoMode)
            didWarnAboutLegacyContext$1.add(ctor), error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
          if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && (workInProgress2.mode & StrictLegacyMode) === NoMode)
            didWarnAboutLegacyContext$1.add(ctor), error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
          if (instance.contextTypes)
            error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor))
            didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === "function")
          error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined")
          error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        if (typeof instance.componentDidUnmount === "function")
          error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === "function")
          error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === "function")
          error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function")
          error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== void 0 && hasMutatedProps)
          error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps)
          error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor))
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        if (typeof instance.getDerivedStateFromProps === "function")
          error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === "function")
          error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === "function")
          error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray(_state)))
          error("%s.state: must be set to an object or null", name);
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object")
          error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
      }
    }
    function adoptClassInstance(workInProgress2, instance) {
      instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress2, ctor, props) {
      var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject, context = emptyContextObject, contextType = ctor.contextType;
      if ("contextType" in ctor) {
        var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
        if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
          didWarnAboutInvalidateContextType.add(ctor);
          var addendum = "";
          if (contextType === void 0)
            addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
          else if (typeof contextType !== "object")
            addendum = " However, it is set to a " + typeof contextType + ".";
          else if (contextType.$$typeof === REACT_PROVIDER_TYPE)
            addendum = " Did you accidentally pass the Context.Provider instead?";
          else if (contextType._context !== void 0)
            addendum = " Did you accidentally pass the Context.Consumer instead?";
          else
            addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
          error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
        }
      }
      if (typeof contextType === "object" && contextType !== null)
        context = readContext(contextType);
      else {
        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0, context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
      }
      var instance = new ctor(props, context);
      if (workInProgress2.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(!0);
        try {
          instance = new ctor(props, context);
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
      adoptClassInstance(workInProgress2, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutUninitializedState.has(componentName))
            didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
        }
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0)
            foundWillMountName = "componentWillMount";
          else if (typeof instance.UNSAFE_componentWillMount === "function")
            foundWillMountName = "UNSAFE_componentWillMount";
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0)
            foundWillReceivePropsName = "componentWillReceiveProps";
          else if (typeof instance.UNSAFE_componentWillReceiveProps === "function")
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0)
            foundWillUpdateName = "componentWillUpdate";
          else if (typeof instance.UNSAFE_componentWillUpdate === "function")
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName))
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
          }
        }
      }
      if (isLegacyContextConsumer)
        cacheContext(workInProgress2, unmaskedContext, context);
      return instance;
    }
    function callComponentWillMount(workInProgress2, instance) {
      var oldState = instance.state;
      if (typeof instance.componentWillMount === "function")
        instance.componentWillMount();
      if (typeof instance.UNSAFE_componentWillMount === "function")
        instance.UNSAFE_componentWillMount();
      if (oldState !== instance.state)
        error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
      var oldState = instance.state;
      if (typeof instance.componentWillReceiveProps === "function")
        instance.componentWillReceiveProps(newProps, nextContext);
      if (typeof instance.UNSAFE_componentWillReceiveProps === "function")
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      if (instance.state !== oldState) {
        {
          var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
          if (!didWarnAboutStateAssignmentForComponent.has(componentName))
            didWarnAboutStateAssignmentForComponent.add(componentName), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      checkClassInstance(workInProgress2, ctor, newProps);
      var instance = workInProgress2.stateNode;
      instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = {}, initializeUpdateQueue(workInProgress2);
      var contextType = ctor.contextType;
      if (typeof contextType === "object" && contextType !== null)
        instance.context = readContext(contextType);
      else {
        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
        instance.context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      {
        if (instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName))
            didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
        }
        if (workInProgress2.mode & StrictLegacyMode)
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
      }
      instance.state = workInProgress2.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === "function")
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState;
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function"))
        callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState;
      if (typeof instance.componentDidMount === "function") {
        var fiberFlags = Update;
        if (fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode)
          fiberFlags |= MountLayoutDev;
        workInProgress2.flags |= fiberFlags;
      }
    }
    function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      var { stateNode: instance, memoizedProps: oldProps } = workInProgress2;
      instance.props = oldProps;
      var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null)
        nextContext = readContext(contextType);
      else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext)
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
      if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          if (fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode)
            fiberFlags |= MountLayoutDev;
          workInProgress2.flags |= fiberFlags;
        }
        return !1;
      }
      if (typeof getDerivedStateFromProps === "function")
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState;
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          if (typeof instance.componentWillMount === "function")
            instance.componentWillMount();
          if (typeof instance.UNSAFE_componentWillMount === "function")
            instance.UNSAFE_componentWillMount();
        }
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags = Update;
          if (_fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode)
            _fiberFlags |= MountLayoutDev;
          workInProgress2.flags |= _fiberFlags;
        }
      } else {
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags2 = Update;
          if (_fiberFlags2 |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode)
            _fiberFlags2 |= MountLayoutDev;
          workInProgress2.flags |= _fiberFlags2;
        }
        workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
      }
      return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
    }
    function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
      var instance = workInProgress2.stateNode;
      cloneUpdateQueue(current2, workInProgress2);
      var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
      instance.props = oldProps;
      var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null)
        nextContext = readContext(contextType);
      else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext)
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
      if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState)
            workInProgress2.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState)
            workInProgress2.flags |= Snapshot;
        }
        return !1;
      }
      if (typeof getDerivedStateFromProps === "function")
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState;
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
          if (typeof instance.componentWillUpdate === "function")
            instance.componentWillUpdate(newProps, newState, nextContext);
          if (typeof instance.UNSAFE_componentWillUpdate === "function")
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
        }
        if (typeof instance.componentDidUpdate === "function")
          workInProgress2.flags |= Update;
        if (typeof instance.getSnapshotBeforeUpdate === "function")
          workInProgress2.flags |= Snapshot;
      } else {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState)
            workInProgress2.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState)
            workInProgress2.flags |= Snapshot;
        }
        workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
      }
      return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
    }
    function createCapturedValueAtFiber(value, source) {
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source),
        digest: null
      };
    }
    function createCapturedValue(value, digest, stack) {
      return {
        value,
        source: null,
        stack: stack != null ? stack : null,
        digest: digest != null ? digest : null
      };
    }
    function showErrorDialog(boundary, errorInfo) {
      return !0;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog(boundary, errorInfo);
        if (logError === !1)
          return;
        var { value: error2, source, stack } = errorInfo, componentStack = stack !== null ? stack : "";
        if (error2 != null && error2._suppressLogging) {
          if (boundary.tag === ClassComponent)
            return;
          console.error(error2);
        }
        var componentName = source ? getComponentNameFromFiber(source) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage;
        if (boundary.tag === HostRoot)
          errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
        else {
          var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
          errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
        }
        var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
        console.error(combinedMessage);
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate, update.payload = {
        element: null
      };
      var error2 = errorInfo.value;
      return update.callback = function() {
        onUncaughtError(error2), logCapturedError(fiber, errorInfo);
      }, update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error$1 = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error$1);
        }, update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === "function")
        update.callback = function callback() {
          if (markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo), typeof getDerivedStateFromError !== "function")
            markLegacyErrorBoundaryAsFailed(this);
          var { value: error$12, stack } = errorInfo;
          if (this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          }), typeof getDerivedStateFromError !== "function") {
            if (!includesSomeLane(fiber.lanes, SyncLane))
              error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
          }
        };
      return update;
    }
    function attachPingListener(root2, wakeable, lanes) {
      var pingCache = root2.pingCache, threadIDs;
      if (pingCache === null)
        pingCache = root2.pingCache = new PossiblyWeakMap$1, threadIDs = /* @__PURE__ */ new Set, pingCache.set(wakeable, threadIDs);
      else if (threadIDs = pingCache.get(wakeable), threadIDs === void 0)
        threadIDs = /* @__PURE__ */ new Set, pingCache.set(wakeable, threadIDs);
      if (!threadIDs.has(lanes)) {
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
        if (isDevToolsPresent)
          restorePendingUpdaters(root2, lanes);
        wakeable.then(ping, ping);
      }
    }
    function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
      var wakeables = suspenseBoundary.updateQueue;
      if (wakeables === null) {
        var updateQueue = /* @__PURE__ */ new Set;
        updateQueue.add(wakeable), suspenseBoundary.updateQueue = updateQueue;
      } else
        wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
      var tag = sourceFiber.tag;
      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
        var currentSource = sourceFiber.alternate;
        if (currentSource)
          sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes;
        else
          sourceFiber.updateQueue = null, sourceFiber.memoizedState = null;
      }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      var node = returnFiber;
      do {
        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node))
          return node;
        node = node.return;
      } while (node !== null);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
        if (suspenseBoundary === returnFiber)
          suspenseBoundary.flags |= ShouldCapture;
        else {
          if (suspenseBoundary.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null)
              sourceFiber.tag = IncompleteClassComponent;
            else {
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate, enqueueUpdate(sourceFiber, update, SyncLane);
            }
          }
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
        }
        return suspenseBoundary;
      }
      return suspenseBoundary.flags |= ShouldCapture, suspenseBoundary.lanes = rootRenderLanes, suspenseBoundary;
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
      if (sourceFiber.flags |= Incomplete, isDevToolsPresent)
        restorePendingUpdaters(root2, rootRenderLanes);
      if (value !== null && typeof value === "object" && typeof value.then === "function") {
        var wakeable = value;
        if (resetSuspendedComponent(sourceFiber), getIsHydrating() && sourceFiber.mode & ConcurrentMode)
          markDidThrowWhileHydratingDEV();
        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (suspenseBoundary !== null) {
          if (suspenseBoundary.flags &= ~ForceClientRender, markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), suspenseBoundary.mode & ConcurrentMode)
            attachPingListener(root2, wakeable, rootRenderLanes);
          attachRetryListener(suspenseBoundary, root2, wakeable);
          return;
        } else {
          if (!includesSyncLane(rootRenderLanes)) {
            attachPingListener(root2, wakeable, rootRenderLanes), renderDidSuspendDelayIfPossible();
            return;
          }
          var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          value = uncaughtSuspenseError;
        }
      } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
        markDidThrowWhileHydratingDEV();
        var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (_suspenseBoundary !== null) {
          if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags)
            _suspenseBoundary.flags |= ForceClientRender;
          markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
          return;
        }
      }
      value = createCapturedValueAtFiber(value, sourceFiber), renderDidError(value);
      var workInProgress2 = returnFiber;
      do {
        switch (workInProgress2.tag) {
          case HostRoot: {
            var _errorInfo = value;
            workInProgress2.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
            enqueueCapturedUpdate(workInProgress2, update);
            return;
          }
          case ClassComponent:
            var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
            if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress2.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
              var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            break;
        }
        workInProgress2 = workInProgress2.return;
      } while (workInProgress2 !== null);
    }
    function getSuspendedCache() {
      return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions, didWarnAboutDefaultPropsOnFunctionComponent;
    didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = !1, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {}, didWarnAboutDefaultPropsOnFunctionComponent = {};
    function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
      if (current2 === null)
        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      else
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
    }
    function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
    }
    function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (workInProgress2.type !== workInProgress2.elementType) {
        var innerPropTypes = Component.propTypes;
        if (innerPropTypes)
          checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
      }
      var render2 = Component.render, ref = workInProgress2.ref, nextChildren, hasId;
      prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
      {
        if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        setIsRendering(!1);
      }
      if (markComponentRenderStopped(), current2 !== null && !didReceiveUpdate)
        return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      if (getIsHydrating() && hasId)
        pushMaterializedTreeId(workInProgress2);
      return workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (current2 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
          var resolvedType = type;
          return resolvedType = resolveFunctionForHotReloading(type), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes)
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
          if (Component.defaultProps !== void 0) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName])
              error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName), didWarnAboutDefaultPropsOnFunctionComponent[componentName] = !0;
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
      }
      {
        var _type = Component.type, _innerPropTypes = _type.propTypes;
        if (_innerPropTypes)
          checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
      }
      var currentChild = current2.child, hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
      if (!hasScheduledUpdateOrContext) {
        var prevProps = currentChild.memoizedProps, compare = Component.compare;
        if (compare = compare !== null ? compare : shallowEqual, compare(prevProps, nextProps) && current2.ref === workInProgress2.ref)
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      workInProgress2.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
    }
    function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (workInProgress2.type !== workInProgress2.elementType) {
        var outerMemoType = workInProgress2.elementType;
        if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
          var lazyComponent = outerMemoType, payload = lazyComponent._payload, init = lazyComponent._init;
          try {
            outerMemoType = init(payload);
          } catch (x) {
            outerMemoType = null;
          }
          var outerPropTypes = outerMemoType && outerMemoType.propTypes;
          if (outerPropTypes)
            checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
        }
      }
      if (current2 !== null) {
        var prevProps = current2.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
          if (didReceiveUpdate = !1, workInProgress2.pendingProps = nextProps = prevProps, !checkScheduledUpdateOrContext(current2, renderLanes2))
            return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags)
            didReceiveUpdate = !0;
        }
      }
      return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
      if (nextProps.mode === "hidden" || enableLegacyHidden)
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          var nextState = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
          var spawnedCachePool = null, nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
          } else
            nextBaseLanes = renderLanes2;
          workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes,
            cachePool: spawnedCachePool,
            transitions: null
          };
          return workInProgress2.memoizedState = _nextState, workInProgress2.updateQueue = null, pushRenderLanes(workInProgress2, nextBaseLanes), null;
        } else {
          var _nextState2 = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState2;
          var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
          pushRenderLanes(workInProgress2, subtreeRenderLanes2);
        }
      else {
        var _subtreeRenderLanes;
        if (prevState !== null)
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null;
        else
          _subtreeRenderLanes = renderLanes2;
        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
      }
      return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateFragment(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps;
      return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateMode(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps.children;
      return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateProfiler(current2, workInProgress2, renderLanes2) {
      {
        workInProgress2.flags |= Update;
        {
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
        }
      }
      var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
      return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function markRef(current2, workInProgress2) {
      var ref = workInProgress2.ref;
      if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref)
        workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
    }
    function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (workInProgress2.type !== workInProgress2.elementType) {
        var innerPropTypes = Component.propTypes;
        if (innerPropTypes)
          checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !0);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      var nextChildren, hasId;
      prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
      {
        if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        setIsRendering(!1);
      }
      if (markComponentRenderStopped(), current2 !== null && !didReceiveUpdate)
        return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      if (getIsHydrating() && hasId)
        pushMaterializedTreeId(workInProgress2);
      return workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        switch (shouldError(workInProgress2)) {
          case !1: {
            var { stateNode: _instance, type: ctor } = workInProgress2, tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context), state = tempInstance.state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          }
          case !0: {
            workInProgress2.flags |= DidCapture, workInProgress2.flags |= ShouldCapture;
            var error$1 = new Error("Simulated error coming from DevTools"), lane = pickArbitraryLane(renderLanes2);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
            enqueueCapturedUpdate(workInProgress2, update);
            break;
          }
        }
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes)
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
      }
      var hasContext;
      if (isContextProvider(Component))
        hasContext = !0, pushContextProvider(workInProgress2);
      else
        hasContext = !1;
      prepareToReadContext(workInProgress2, renderLanes2);
      var instance = workInProgress2.stateNode, shouldUpdate;
      if (instance === null)
        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), shouldUpdate = !0;
      else if (current2 === null)
        shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      else
        shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
      var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
      {
        var inst = workInProgress2.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps)
            error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
          didWarnAboutReassigningProps = !0;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
      markRef(current2, workInProgress2);
      var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        if (hasContext)
          invalidateContextProvider(workInProgress2, Component, !1);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      var instance = workInProgress2.stateNode;
      ReactCurrentOwner$1.current = workInProgress2;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function")
        nextChildren = null, stopProfilerTimerIfRunning();
      else {
        markComponentRenderStarted(workInProgress2);
        {
          if (setIsRendering(!0), nextChildren = instance.render(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              instance.render();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        markComponentRenderStopped();
      }
      if (workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError)
        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
      else
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      if (workInProgress2.memoizedState = instance.state, hasContext)
        invalidateContextProvider(workInProgress2, Component, !0);
      return workInProgress2.child;
    }
    function pushHostRootContext(workInProgress2) {
      var root2 = workInProgress2.stateNode;
      if (root2.pendingContext)
        pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
      else if (root2.context)
        pushTopLevelContextObject(workInProgress2, root2.context, !1);
      pushHostContainer(workInProgress2, root2.containerInfo);
    }
    function updateHostRoot(current2, workInProgress2, renderLanes2) {
      if (pushHostRootContext(workInProgress2), current2 === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var { pendingProps: nextProps, memoizedState: prevState } = workInProgress2, prevChildren = prevState.element;
      cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
      var { memoizedState: nextState, stateNode: root2 } = workInProgress2, nextChildren = nextState.element;
      if (prevState.isDehydrated) {
        var overrideState = {
          element: nextChildren,
          isDehydrated: !1,
          cache: nextState.cache,
          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
          transitions: nextState.transitions
        }, updateQueue = workInProgress2.updateQueue;
        if (updateQueue.baseState = overrideState, workInProgress2.memoizedState = overrideState, workInProgress2.flags & ForceClientRender) {
          var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
        } else if (nextChildren !== prevChildren) {
          var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
        } else {
          enterHydrationState(workInProgress2);
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node = child;
          while (node)
            node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
        }
      } else {
        if (resetHydrationState(), nextChildren === prevChildren)
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
      return resetHydrationState(), queueHydrationError(recoverableError), workInProgress2.flags |= ForceClientRender, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateHostComponent(current2, workInProgress2, renderLanes2) {
      if (pushHostContext(workInProgress2), current2 === null)
        tryToClaimNextHydratableInstance(workInProgress2);
      var { type, pendingProps: nextProps } = workInProgress2, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild)
        nextChildren = null;
      else if (prevProps !== null && shouldSetTextContent(type, prevProps))
        workInProgress2.flags |= ContentReset;
      return markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
    }
    function updateHostText(current2, workInProgress2) {
      if (current2 === null)
        tryToClaimNextHydratableInstance(workInProgress2);
      return null;
    }
    function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps, lazyComponent = elementType, payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload);
      workInProgress2.type = Component;
      var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component), resolvedProps = resolveDefaultProps(Component, props), child;
      switch (resolvedTag) {
        case FunctionComponent:
          return validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.type = Component = resolveFunctionForHotReloading(Component), child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
        case ClassComponent:
          return workInProgress2.type = Component = resolveClassForHotReloading(Component), child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
        case ForwardRef:
          return workInProgress2.type = Component = resolveForwardRefForHotReloading(Component), child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
        case MemoComponent: {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerPropTypes = Component.propTypes;
            if (outerPropTypes)
              checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
          }
          return child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2), child;
        }
      }
      var hint = "";
      if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE)
        hint = " Did you wrap a component in React.lazy() more than once?";
      throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2), workInProgress2.tag = ClassComponent;
      var hasContext;
      if (isContextProvider(Component))
        hasContext = !0, pushContextProvider(workInProgress2);
      else
        hasContext = !1;
      return prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
    }
    function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps, context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !1);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var value, hasId;
      markComponentRenderStarted(workInProgress2);
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutBadClass[componentName])
            error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0;
        }
        if (workInProgress2.mode & StrictLegacyMode)
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
        setIsRendering(!0), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook(), setIsRendering(!1);
      }
      if (markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
        var _componentName = getComponentNameFromType(Component) || "Unknown";
        if (!didWarnAboutModulePatternComponent[_componentName])
          error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0;
      }
      if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
        {
          var _componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName2])
            error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0;
        }
        workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
        var hasContext = !1;
        if (isContextProvider(Component))
          hasContext = !0, pushContextProvider(workInProgress2);
        else
          hasContext = !1;
        return workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component, props, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
      } else {
        if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        if (getIsHydrating() && hasId)
          pushMaterializedTreeId(workInProgress2);
        return reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      {
        if (Component) {
          if (Component.childContextTypes)
            error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
        }
        if (workInProgress2.ref !== null) {
          var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName)
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          var warningKey = ownerName || "", debugSource = workInProgress2._debugSource;
          if (debugSource)
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          if (!didWarnAboutFunctionRefs[warningKey])
            didWarnAboutFunctionRefs[warningKey] = !0, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
        }
        if (Component.defaultProps !== void 0) {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName])
            error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName), didWarnAboutDefaultPropsOnFunctionComponent[componentName] = !0;
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName3 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3])
            error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0;
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName4 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4])
            error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0;
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return {
        baseLanes: renderLanes2,
        cachePool: getSuspendedCache(),
        transitions: null
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
      var cachePool = null;
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
        cachePool,
        transitions: prevOffscreenState.transitions
      };
    }
    function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        var suspenseState = current2.memoizedState;
        if (suspenseState === null)
          return !1;
      }
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
      return removeLanes(current2.childLanes, renderLanes2);
    }
    function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      if (shouldSuspend(workInProgress2))
        workInProgress2.flags |= DidCapture;
      var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current2))
        showFallback = !0, workInProgress2.flags &= ~DidCapture;
      else if (current2 === null || current2.memoizedState !== null)
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      if (suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
        var suspenseState = workInProgress2.memoizedState;
        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;
          if (dehydrated !== null)
            return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
        }
        var { children: nextPrimaryChildren, fallback: nextFallbackChildren } = nextProps;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
          return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
        } else
          return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
      } else {
        var prevState = current2.memoizedState;
        if (prevState !== null) {
          var _dehydrated = prevState.dehydrated;
          if (_dehydrated !== null)
            return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
        }
        if (showFallback) {
          var { fallback: _nextFallbackChildren, children: _nextPrimaryChildren } = nextProps, fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2), _primaryChildFragment2 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
          return _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
        } else {
          var _nextPrimaryChildren2 = nextProps.children, _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
          return workInProgress2.memoizedState = null, _primaryChildFragment3;
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
      var mode = workInProgress2.mode, primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
      return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var { mode, child: progressedPrimaryFragment } = workInProgress2, primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      }, primaryChildFragment, fallbackChildFragment;
      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
        if (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode)
          primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0;
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      } else
        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      return primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
      return createWorkInProgress(current2, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
      var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: "visible",
        children: primaryChildren
      });
      if ((workInProgress2.mode & ConcurrentMode) === NoMode)
        primaryChildFragment.lanes = renderLanes2;
      if (primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null) {
        var deletions = workInProgress2.deletions;
        if (deletions === null)
          workInProgress2.deletions = [currentFallbackChildFragment], workInProgress2.flags |= ChildDeletion;
        else
          deletions.push(currentFallbackChildFragment);
      }
      return workInProgress2.child = primaryChildFragment, primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      }, primaryChildFragment;
      if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
        var progressedPrimaryFragment = workInProgress2.child;
        if (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode)
          primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        workInProgress2.deletions = null;
      } else
        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps), primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null)
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      else
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null), fallbackChildFragment.flags |= Placement;
      return fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
      if (recoverableError !== null)
        queueHydrationError(recoverableError);
      reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      var nextProps = workInProgress2.pendingProps, primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
      return primaryChildFragment.flags |= Placement, workInProgress2.memoizedState = null, primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var fiberMode = workInProgress2.mode, primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
      if (fallbackChildFragment.flags |= Placement, primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, (workInProgress2.mode & ConcurrentMode) !== NoMode)
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode)
        error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), workInProgress2.lanes = laneToLanes(SyncLane);
      else if (isSuspenseInstanceFallback(suspenseInstance))
        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
      else
        workInProgress2.lanes = laneToLanes(OffscreenLane);
      return null;
    }
    function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
      if (!didSuspend) {
        if (warnIfHydrating(), (workInProgress2.mode & ConcurrentMode) === NoMode)
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var digest, message, stack;
          {
            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
            digest = _getSuspenseInstanceF.digest, message = _getSuspenseInstanceF.message, stack = _getSuspenseInstanceF.stack;
          }
          var error2;
          if (message)
            error2 = new Error(message);
          else
            error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          var capturedValue = createCapturedValue(error2, digest, stack);
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root2 = getWorkInProgressRoot();
          if (root2 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane), scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture, workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          return registerSuspenseInstanceRetry(suspenseInstance, retry), null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          return primaryChildFragment.flags |= Hydrating, primaryChildFragment;
        }
      } else if (workInProgress2.flags & ForceClientRender) {
        workInProgress2.flags &= ~ForceClientRender;
        var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
        return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
      } else if (workInProgress2.memoizedState !== null)
        return workInProgress2.child = current2.child, workInProgress2.flags |= DidCapture, null;
      else {
        var { children: nextPrimaryChildren, fallback: nextFallbackChildren } = nextProps, fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment4 = workInProgress2.child;
        return _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
      }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
      var alternate = fiber.alternate;
      if (alternate !== null)
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
      var node = firstChild;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null)
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
        } else if (node.tag === SuspenseListComponent)
          scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
        else if (node.child !== null) {
          node.child.return = node, node = node.child;
          continue;
        }
        if (node === workInProgress2)
          return;
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress2)
            return;
          node = node.return;
        }
        node.sibling.return = node.return, node = node.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      var row = firstChild, lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        if (currentRow !== null && findFirstSuspended(currentRow) === null)
          lastContentRow = row;
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
        if (didWarnAboutRevealOrder[revealOrder] = !0, typeof revealOrder === "string")
          switch (revealOrder.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }
            default:
              error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              break;
          }
        else
          error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
    }
    function validateTailOptions(tailMode, revealOrder) {
      if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
        if (tailMode !== "collapsed" && tailMode !== "hidden")
          didWarnAboutTailOptions[tailMode] = !0, error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
        else if (revealOrder !== "forwards" && revealOrder !== "backwards")
          didWarnAboutTailOptions[tailMode] = !0, error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
    function validateSuspenseListNestedChild(childSlot, index2) {
      {
        var isAnArray = isArray(childSlot), isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
          var type = isAnArray ? "array" : "iterable";
          return error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type), !1;
        }
      }
      return !0;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== !1)
        if (isArray(children)) {
          for (var i = 0;i < children.length; i++)
            if (!validateSuspenseListNestedChild(children[i], i))
              return;
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var childrenIterator = iteratorFn.call(children);
            if (childrenIterator) {
              var step = childrenIterator.next(), _i = 0;
              for (;!step.done; step = childrenIterator.next()) {
                if (!validateSuspenseListNestedChild(step.value, _i))
                  return;
                _i++;
              }
            }
          } else
            error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
        }
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      if (renderState === null)
        workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        };
      else
        renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode;
    }
    function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
      validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback)
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
      else {
        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore)
          propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & ConcurrentMode) === NoMode)
        workInProgress2.memoizedState = null;
      else
        switch (revealOrder) {
          case "forwards": {
            var lastContentRow = findLastContentRow(workInProgress2.child), tail;
            if (lastContentRow === null)
              tail = workInProgress2.child, workInProgress2.child = null;
            else
              tail = lastContentRow.sibling, lastContentRow.sibling = null;
            initSuspenseListRenderState(workInProgress2, !1, tail, lastContentRow, tailMode);
            break;
          }
          case "backwards": {
            var _tail = null, row = workInProgress2.child;
            workInProgress2.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress2.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail, _tail = row, row = nextRow;
            }
            initSuspenseListRenderState(workInProgress2, !0, _tail, null, tailMode);
            break;
          }
          case "together": {
            initSuspenseListRenderState(workInProgress2, !1, null, null, void 0);
            break;
          }
          default:
            workInProgress2.memoizedState = null;
        }
      return workInProgress2.child;
    }
    function updatePortalComponent(current2, workInProgress2, renderLanes2) {
      pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
      var nextChildren = workInProgress2.pendingProps;
      if (current2 === null)
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      else
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = !1;
    function updateContextProvider(current2, workInProgress2, renderLanes2) {
      var providerType = workInProgress2.type, context = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
      {
        if (!("value" in newProps)) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider)
            hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
        }
        var providerPropTypes = workInProgress2.type.propTypes;
        if (providerPropTypes)
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
      }
      if (pushProvider(workInProgress2, context, newValue), oldProps !== null) {
        var oldValue = oldProps.value;
        if (objectIs(oldValue, newValue)) {
          if (oldProps.children === newProps.children && !hasContextChanged())
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        } else
          propagateContextChange(workInProgress2, context, renderLanes2);
      }
      var newChildren = newProps.children;
      return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = !1;
    function updateContextConsumer(current2, workInProgress2, renderLanes2) {
      var context = workInProgress2.type;
      if (context._context === void 0) {
        if (context !== context.Consumer) {
          if (!hasWarnedAboutUsingContextAsConsumer)
            hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
        }
      } else
        context = context._context;
      var newProps = workInProgress2.pendingProps, render2 = newProps.children;
      if (typeof render2 !== "function")
        error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
      prepareToReadContext(workInProgress2, renderLanes2);
      var newValue = readContext(context);
      markComponentRenderStarted(workInProgress2);
      var newChildren;
      return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), newChildren = render2(newValue), setIsRendering(!1), markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = !0;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        if (current2 !== null)
          current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement;
      }
    }
    function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
      if (current2 !== null)
        workInProgress2.dependencies = current2.dependencies;
      if (stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), !includesSomeLane(renderLanes2, workInProgress2.childLanes))
        return null;
      return cloneChildFibers(current2, workInProgress2), workInProgress2.child;
    }
    function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null)
          throw new Error("Cannot swap the root fiber.");
        if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
          returnFiber.child = newWorkInProgress;
        else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null)
            throw new Error("Expected parent to have a child.");
          while (prevSibling.sibling !== oldWorkInProgress)
            if (prevSibling = prevSibling.sibling, prevSibling === null)
              throw new Error("Expected to find the previous sibling.");
          prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null)
          returnFiber.deletions = [current2], returnFiber.flags |= ChildDeletion;
        else
          deletions.push(current2);
        return newWorkInProgress.flags |= Placement, newWorkInProgress;
      }
    }
    function checkScheduledUpdateOrContext(current2, renderLanes2) {
      var updateLanes = current2.lanes;
      if (includesSomeLane(updateLanes, renderLanes2))
        return !0;
      return !1;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress2);
          var root2 = workInProgress2.stateNode;
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress2);
          break;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component))
            pushContextProvider(workInProgress2);
          break;
        }
        case HostPortal:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case ContextProvider: {
          var newValue = workInProgress2.memoizedProps.value, context = workInProgress2.type._context;
          pushProvider(workInProgress2, context, newValue);
          break;
        }
        case Profiler:
          {
            var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (hasChildWork)
              workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
            }
          }
          break;
        case SuspenseComponent: {
          var state = workInProgress2.memoizedState;
          if (state !== null) {
            if (state.dehydrated !== null)
              return pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current)), workInProgress2.flags |= DidCapture, null;
            var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
            if (includesSomeLane(renderLanes2, primaryChildLanes))
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              if (child !== null)
                return child.sibling;
              else
                return null;
            }
          } else
            pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
          break;
        }
        case SuspenseListComponent: {
          var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
          if (didSuspendBefore) {
            if (_hasChildWork)
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            workInProgress2.flags |= DidCapture;
          }
          var renderState = workInProgress2.memoizedState;
          if (renderState !== null)
            renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null;
          if (pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
            break;
          else
            return null;
        }
        case OffscreenComponent:
        case LegacyHiddenComponent:
          return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
      }
      return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
    }
    function beginWork(current2, workInProgress2, renderLanes2) {
      if (workInProgress2._debugNeedsRemount && current2 !== null)
        return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
      if (current2 !== null) {
        var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type)
          didReceiveUpdate = !0;
        else {
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags)
            return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
          if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags)
            didReceiveUpdate = !0;
          else
            didReceiveUpdate = !1;
        }
      } else if (didReceiveUpdate = !1, getIsHydrating() && isForkedChild(workInProgress2)) {
        var slotIndex = workInProgress2.index, numberOfForks = getForksAtLevel();
        pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
      switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
        case IndeterminateComponent:
          return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
        case LazyComponent: {
          var elementType = workInProgress2.elementType;
          return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
        }
        case FunctionComponent: {
          var { type: Component, pendingProps: unresolvedProps } = workInProgress2, resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
          return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
        }
        case ClassComponent: {
          var { type: _Component, pendingProps: _unresolvedProps } = workInProgress2, _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
          return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
        }
        case HostRoot:
          return updateHostRoot(current2, workInProgress2, renderLanes2);
        case HostComponent:
          return updateHostComponent(current2, workInProgress2, renderLanes2);
        case HostText:
          return updateHostText(current2, workInProgress2);
        case SuspenseComponent:
          return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
        case HostPortal:
          return updatePortalComponent(current2, workInProgress2, renderLanes2);
        case ForwardRef: {
          var { type, pendingProps: _unresolvedProps2 } = workInProgress2, _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
        }
        case Fragment:
          return updateFragment(current2, workInProgress2, renderLanes2);
        case Mode:
          return updateMode(current2, workInProgress2, renderLanes2);
        case Profiler:
          return updateProfiler(current2, workInProgress2, renderLanes2);
        case ContextProvider:
          return updateContextProvider(current2, workInProgress2, renderLanes2);
        case ContextConsumer:
          return updateContextConsumer(current2, workInProgress2, renderLanes2);
        case MemoComponent: {
          var { type: _type2, pendingProps: _unresolvedProps3 } = workInProgress2, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerPropTypes = _type2.propTypes;
            if (outerPropTypes)
              checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
          }
          return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
        }
        case SimpleMemoComponent:
          return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        case IncompleteClassComponent: {
          var { type: _Component2, pendingProps: _unresolvedProps4 } = workInProgress2, _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
          return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
        }
        case SuspenseListComponent:
          return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
        case ScopeComponent:
          break;
        case OffscreenComponent:
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= Update;
    }
    function markRef$1(workInProgress2) {
      workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
    }
    var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
    appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
      var node = workInProgress2.child;
      while (node !== null) {
        if (node.tag === HostComponent || node.tag === HostText)
          appendInitialChild(parent, node.stateNode);
        else if (node.tag === HostPortal)
          ;
        else if (node.child !== null) {
          node.child.return = node, node = node.child;
          continue;
        }
        if (node === workInProgress2)
          return;
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress2)
            return;
          node = node.return;
        }
        node.sibling.return = node.return, node = node.sibling;
      }
    }, updateHostContainer = function(current2, workInProgress2) {
    }, updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
      var oldProps = current2.memoizedProps;
      if (oldProps === newProps)
        return;
      var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
      if (workInProgress2.updateQueue = updatePayload, updatePayload)
        markUpdate(workInProgress2);
    }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
      if (oldText !== newText)
        markUpdate(workInProgress2);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating())
        return;
      switch (renderState.tailMode) {
        case "hidden": {
          var tailNode = renderState.tail, lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null)
              lastTailNode = tailNode;
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null)
            renderState.tail = null;
          else
            lastTailNode.sibling = null;
          break;
        }
        case "collapsed": {
          var _tailNode = renderState.tail, _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null)
              _lastTailNode = _tailNode;
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null)
            if (!hasRenderedATailFallback && renderState.tail !== null)
              renderState.tail.sibling = null;
            else
              renderState.tail = null;
          else
            _lastTailNode.sibling = null;
          break;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = NoLanes, subtreeFlags = NoFlags;
      if (!didBailout) {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var { actualDuration, selfBaseDuration: treeBaseDuration, child } = completedWork;
          while (child !== null)
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, actualDuration += child.actualDuration, treeBaseDuration += child.treeBaseDuration, child = child.sibling;
          completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null)
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), subtreeFlags |= _child.subtreeFlags, subtreeFlags |= _child.flags, _child.return = completedWork, _child = _child.sibling;
        }
        completedWork.subtreeFlags |= subtreeFlags;
      } else {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var { selfBaseDuration: _treeBaseDuration, child: _child2 } = completedWork;
          while (_child2 !== null)
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)), subtreeFlags |= _child2.subtreeFlags & StaticMask, subtreeFlags |= _child2.flags & StaticMask, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          var _child3 = completedWork.child;
          while (_child3 !== null)
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)), subtreeFlags |= _child3.subtreeFlags & StaticMask, subtreeFlags |= _child3.flags & StaticMask, _child3.return = completedWork, _child3 = _child3.sibling;
        }
        completedWork.subtreeFlags |= subtreeFlags;
      }
      return completedWork.childLanes = newChildLanes, didBailout;
    }
    function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
      if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags)
        return warnIfUnhydratedTailNodes(workInProgress2), resetHydrationState(), workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture, !1;
      var wasHydrated = popHydrationState(workInProgress2);
      if (nextState !== null && nextState.dehydrated !== null)
        if (current2 === null) {
          if (!wasHydrated)
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          if (prepareToHydrateHostSuspenseInstance(workInProgress2), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
            var isTimedOutSuspense = nextState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = workInProgress2.child;
              if (primaryChildFragment !== null)
                workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
          return !1;
        } else {
          if (resetHydrationState(), (workInProgress2.flags & DidCapture) === NoFlags)
            workInProgress2.memoizedState = null;
          if (workInProgress2.flags |= Update, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
            var _isTimedOutSuspense = nextState !== null;
            if (_isTimedOutSuspense) {
              var _primaryChildFragment = workInProgress2.child;
              if (_primaryChildFragment !== null)
                workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
            }
          }
          return !1;
        }
      else
        return upgradeHydrationErrorsToRecoverable(), !0;
    }
    function completeWork(current2, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      switch (popTreeContext(workInProgress2), workInProgress2.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          return bubbleProperties(workInProgress2), null;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component))
            popContext(workInProgress2);
          return bubbleProperties(workInProgress2), null;
        }
        case HostRoot: {
          var fiberRoot = workInProgress2.stateNode;
          if (popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions(), fiberRoot.pendingContext)
            fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null;
          if (current2 === null || current2.child === null) {
            var wasHydrated = popHydrationState(workInProgress2);
            if (wasHydrated)
              markUpdate(workInProgress2);
            else if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags)
                workInProgress2.flags |= Snapshot, upgradeHydrationErrorsToRecoverable();
            }
          }
          return updateHostContainer(current2, workInProgress2), bubbleProperties(workInProgress2), null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          var rootContainerInstance = getRootHostContainer(), type = workInProgress2.type;
          if (current2 !== null && workInProgress2.stateNode != null) {
            if (updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref)
              markRef$1(workInProgress2);
          } else {
            if (!newProps) {
              if (workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return bubbleProperties(workInProgress2), null;
            }
            var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext))
                markUpdate(workInProgress2);
            } else {
              var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
              if (appendAllChildren(instance, workInProgress2, !1, !1), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type, newProps, rootContainerInstance))
                markUpdate(workInProgress2);
            }
            if (workInProgress2.ref !== null)
              markRef$1(workInProgress2);
          }
          return bubbleProperties(workInProgress2), null;
        }
        case HostText: {
          var newText = newProps;
          if (current2 && workInProgress2.stateNode != null) {
            var oldText = current2.memoizedProps;
            updateHostText$1(current2, workInProgress2, oldText, newText);
          } else {
            if (typeof newText !== "string") {
              if (workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            }
            var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress2))
                markUpdate(workInProgress2);
            } else
              workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
          }
          return bubbleProperties(workInProgress2), null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var nextState = workInProgress2.memoizedState;
          if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
            if (!fallthroughToNormalSuspensePath)
              if (workInProgress2.flags & ShouldCapture)
                return workInProgress2;
              else
                return null;
          }
          if ((workInProgress2.flags & DidCapture) !== NoFlags) {
            if (workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode)
              transferActualDuration(workInProgress2);
            return workInProgress2;
          }
          var nextDidTimeout = nextState !== null, prevDidTimeout = current2 !== null && current2.memoizedState !== null;
          if (nextDidTimeout !== prevDidTimeout) {
            if (nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              if (_offscreenFiber2.flags |= Visibility, (workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== !0 || !enableSuspenseAvoidThisFallback);
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext))
                  renderDidSuspend();
                else
                  renderDidSuspendDelayIfPossible();
              }
            }
          }
          var wakeables = workInProgress2.updateQueue;
          if (wakeables !== null)
            workInProgress2.flags |= Update;
          if (bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
            if (nextDidTimeout) {
              var primaryChildFragment = workInProgress2.child;
              if (primaryChildFragment !== null)
                workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
          return null;
        }
        case HostPortal:
          if (popHostContainer(workInProgress2), updateHostContainer(current2, workInProgress2), current2 === null)
            preparePortalMount(workInProgress2.stateNode.containerInfo);
          return bubbleProperties(workInProgress2), null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          return popProvider(context, workInProgress2), bubbleProperties(workInProgress2), null;
        case IncompleteClassComponent: {
          var _Component = workInProgress2.type;
          if (isContextProvider(_Component))
            popContext(workInProgress2);
          return bubbleProperties(workInProgress2), null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          var renderState = workInProgress2.memoizedState;
          if (renderState === null)
            return bubbleProperties(workInProgress2), null;
          var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
          if (renderedTail === null)
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
              if (!cannotBeSuspended) {
                var row = workInProgress2.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = !0, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, !1);
                    var newThenables = suspended.updateQueue;
                    if (newThenables !== null)
                      workInProgress2.updateQueue = newThenables, workInProgress2.flags |= Update;
                    return workInProgress2.subtreeFlags = NoFlags, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                  }
                  row = row.sibling;
                }
              }
              if (renderState.tail !== null && now() > getRenderTargetTime())
                workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane;
            } else
              cutOffTailIfNeeded(renderState, !1);
          else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress2.flags |= DidCapture, didSuspendAlready = !0;
                var _newThenables = _suspended.updateQueue;
                if (_newThenables !== null)
                  workInProgress2.updateQueue = _newThenables, workInProgress2.flags |= Update;
                if (cutOffTailIfNeeded(renderState, !0), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating())
                  return bubbleProperties(workInProgress2), null;
              } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane)
                workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane;
            }
            if (renderState.isBackwards)
              renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
            else {
              var previousSibling = renderState.last;
              if (previousSibling !== null)
                previousSibling.sibling = renderedTail;
              else
                workInProgress2.child = renderedTail;
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            var next = renderState.tail;
            renderState.rendering = next, renderState.tail = next.sibling, renderState.renderingStartTime = now(), next.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready)
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            else
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            return pushSuspenseContext(workInProgress2, suspenseContext), next;
          }
          return bubbleProperties(workInProgress2), null;
        }
        case ScopeComponent:
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          popRenderLanes(workInProgress2);
          var _nextState = workInProgress2.memoizedState, nextIsHidden = _nextState !== null;
          if (current2 !== null) {
            var _prevState = current2.memoizedState, prevIsHidden = _prevState !== null;
            if (prevIsHidden !== nextIsHidden && !enableLegacyHidden)
              workInProgress2.flags |= Visibility;
          }
          if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode)
            bubbleProperties(workInProgress2);
          else if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
            if (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & (Placement | Update))
              workInProgress2.flags |= Visibility;
          }
          return null;
        }
        case CacheComponent:
          return null;
        case TracingMarkerComponent:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current2, workInProgress2, renderLanes2) {
      switch (popTreeContext(workInProgress2), workInProgress2.tag) {
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component))
            popContext(workInProgress2);
          var flags = workInProgress2.flags;
          if (flags & ShouldCapture) {
            if (workInProgress2.flags = flags & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode)
              transferActualDuration(workInProgress2);
            return workInProgress2;
          }
          return null;
        }
        case HostRoot: {
          var root2 = workInProgress2.stateNode;
          popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
          var _flags = workInProgress2.flags;
          if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags)
            return workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2;
          return null;
        }
        case HostComponent:
          return popHostContext(workInProgress2), null;
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (workInProgress2.alternate === null)
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            resetHydrationState();
          }
          var _flags2 = workInProgress2.flags;
          if (_flags2 & ShouldCapture) {
            if (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode)
              transferActualDuration(workInProgress2);
            return workInProgress2;
          }
          return null;
        }
        case SuspenseListComponent:
          return popSuspenseContext(workInProgress2), null;
        case HostPortal:
          return popHostContainer(workInProgress2), null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          return popProvider(context, workInProgress2), null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          return popRenderLanes(workInProgress2), null;
        case CacheComponent:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
      switch (popTreeContext(interruptedWork), interruptedWork.tag) {
        case ClassComponent: {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== void 0)
            popContext(interruptedWork);
          break;
        }
        case HostRoot: {
          var root2 = interruptedWork.stateNode;
          popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
          break;
        }
        case HostComponent: {
          popHostContext(interruptedWork);
          break;
        }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          var context = interruptedWork.type._context;
          popProvider(context, interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set;
    var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null;
    function reportUncaughtErrorInDEV(error2) {
      invokeGuardedCallback(null, function() {
        throw error2;
      }), clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current2, instance) {
      if (instance.props = current2.memoizedProps, instance.state = current2.memoizedState, current2.mode & ProfileMode)
        try {
          startLayoutEffectTimer(), instance.componentWillUnmount();
        } finally {
          recordLayoutEffectDuration(current2);
        }
      else
        instance.componentWillUnmount();
    };
    function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
      try {
        commitHookEffectListMount(Layout, current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
      try {
        callComponentWillUnmountWithTimer(current2, instance);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
      try {
        instance.componentDidMount();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyAttachRef(current2, nearestMountedAncestor) {
      try {
        commitAttachRef(current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyDetachRef(current2, nearestMountedAncestor) {
      var ref = current2.ref;
      if (ref !== null)
        if (typeof ref === "function") {
          var retVal;
          try {
            if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current2);
              }
            else
              retVal = ref(null);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
          if (typeof retVal === "function")
            error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
        } else
          ref.current = null;
    }
    function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    var focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = !1;
    function commitBeforeMutationEffects(root2, firstChild) {
      focusedInstanceHandle = prepareForCommit(root2.containerInfo), nextEffect = firstChild, commitBeforeMutationEffects_begin();
      var shouldFire = shouldFireAfterActiveInstanceBlur;
      return shouldFireAfterActiveInstanceBlur = !1, focusedInstanceHandle = null, shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect, child = fiber.child;
        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null)
          child.return = fiber, nextEffect = child;
        else
          commitBeforeMutationEffects_complete();
      }
    }
    function commitBeforeMutationEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          commitBeforeMutationEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
      var { alternate: current2, flags } = finishedWork;
      if ((flags & Snapshot) !== NoFlags) {
        switch (setCurrentFiber(finishedWork), finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            break;
          case ClassComponent: {
            if (current2 !== null) {
              var { memoizedProps: prevProps, memoizedState: prevState } = current2, instance = finishedWork.stateNode;
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps)
                  error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                if (instance.state !== finishedWork.memoizedState)
                  error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === void 0 && !didWarnSet.has(finishedWork.type))
                  didWarnSet.add(finishedWork.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
              }
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          }
          case HostRoot: {
            {
              var root2 = finishedWork.stateNode;
              clearContainer(root2.containerInfo);
            }
            break;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        resetCurrentFiber();
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next, effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            if (effect.destroy = void 0, destroy !== void 0) {
              if ((flags & Passive$1) !== NoFlags$1)
                markComponentPassiveEffectUnmountStarted(finishedWork);
              else if ((flags & Layout) !== NoFlags$1)
                markComponentLayoutEffectUnmountStarted(finishedWork);
              if ((flags & Insertion) !== NoFlags$1)
                setIsRunningInsertionEffect(!0);
              if (safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags & Insertion) !== NoFlags$1)
                setIsRunningInsertionEffect(!1);
              if ((flags & Passive$1) !== NoFlags$1)
                markComponentPassiveEffectUnmountStopped();
              else if ((flags & Layout) !== NoFlags$1)
                markComponentLayoutEffectUnmountStopped();
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next, effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            if ((flags & Passive$1) !== NoFlags$1)
              markComponentPassiveEffectMountStarted(finishedWork);
            else if ((flags & Layout) !== NoFlags$1)
              markComponentLayoutEffectMountStarted(finishedWork);
            var create = effect.create;
            if ((flags & Insertion) !== NoFlags$1)
              setIsRunningInsertionEffect(!0);
            if (effect.destroy = create(), (flags & Insertion) !== NoFlags$1)
              setIsRunningInsertionEffect(!1);
            if ((flags & Passive$1) !== NoFlags$1)
              markComponentPassiveEffectMountStopped();
            else if ((flags & Layout) !== NoFlags$1)
              markComponentLayoutEffectMountStopped();
            {
              var destroy = effect.destroy;
              if (destroy !== void 0 && typeof destroy !== "function") {
                var hookName = void 0;
                if ((effect.tag & Layout) !== NoFlags)
                  hookName = "useLayoutEffect";
                else if ((effect.tag & Insertion) !== NoFlags)
                  hookName = "useInsertionEffect";
                else
                  hookName = "useEffect";
                var addendum = void 0;
                if (destroy === null)
                  addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                else if (typeof destroy.then === "function")
                  addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                else
                  addendum = " You returned: " + destroy;
                error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
      if ((finishedWork.flags & Update) !== NoFlags)
        switch (finishedWork.tag) {
          case Profiler: {
            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit, commitTime2 = getCommitTime(), phase = finishedWork.alternate === null ? "mount" : "update";
            if (isCurrentUpdateNested())
              phase = "nested-update";
            if (typeof onPostCommit === "function")
              onPostCommit(id, phase, passiveEffectDuration, commitTime2);
            var parentFiber = finishedWork.return;
            outer:
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.passiveEffectDuration += passiveEffectDuration;
                    break outer;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.passiveEffectDuration += passiveEffectDuration;
                    break outer;
                }
                parentFiber = parentFiber.return;
              }
            break;
          }
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
      if ((finishedWork.flags & LayoutMask) !== NoFlags)
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden)
              if (finishedWork.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), commitHookEffectListMount(Layout | HasEffect, finishedWork);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              else
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
            break;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (!offscreenSubtreeWasHidden)
                if (current2 === null) {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps)
                      error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    if (instance.state !== finishedWork.memoizedState)
                      error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidMount();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps)
                      error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    if (instance.state !== finishedWork.memoizedState)
                      error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps)
                  error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                if (instance.state !== finishedWork.memoizedState)
                  error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            break;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null)
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            break;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var { type, memoizedProps: props } = finishedWork;
              commitMount(_instance2, type, props);
            }
            break;
          }
          case HostText:
            break;
          case HostPortal:
            break;
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime(), phase = current2 === null ? "mount" : "update";
              if (isCurrentUpdateNested())
                phase = "nested-update";
              if (typeof onRender === "function")
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              {
                if (typeof onCommit === "function")
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            }
            break;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
          case TracingMarkerComponent:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      if (!offscreenSubtreeWasHidden) {
        if (finishedWork.flags & Ref)
          commitAttachRef(finishedWork);
      }
    }
    function reappearLayoutEffectsOnFiber(node) {
      switch (node.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (node.mode & ProfileMode)
            try {
              startLayoutEffectTimer(), safelyCallCommitHookLayoutEffectListMount(node, node.return);
            } finally {
              recordLayoutEffectDuration(node);
            }
          else
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          break;
        }
        case ClassComponent: {
          var instance = node.stateNode;
          if (typeof instance.componentDidMount === "function")
            safelyCallComponentDidMount(node, node.return, instance);
          safelyAttachRef(node, node.return);
          break;
        }
        case HostComponent: {
          safelyAttachRef(node, node.return);
          break;
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      var hostSubtreeRoot = null;
      {
        var node = finishedWork;
        while (!0) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                if (isHidden)
                  hideInstance(instance);
                else
                  unhideInstance(node.stateNode, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null)
              try {
                var _instance3 = node.stateNode;
                if (isHidden)
                  hideTextInstance(_instance3);
                else
                  unhideTextInstance(_instance3, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
            ;
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === finishedWork)
            return;
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork)
              return;
            if (hostSubtreeRoot === node)
              hostSubtreeRoot = null;
            node = node.return;
          }
          if (hostSubtreeRoot === node)
            hostSubtreeRoot = null;
          node.sibling.return = node.return, node = node.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode, instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        if (typeof ref === "function") {
          var retVal;
          if (finishedWork.mode & ProfileMode)
            try {
              startLayoutEffectTimer(), retVal = ref(instanceToUse);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          else
            retVal = ref(instanceToUse);
          if (typeof retVal === "function")
            error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
        } else {
          if (!ref.hasOwnProperty("current"))
            error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
          ref.current = instanceToUse;
        }
      }
    }
    function detachFiberMutation(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null)
        alternate.return = null;
      fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null)
        fiber.alternate = null, detachFiberAfterEffects(alternate);
      {
        if (fiber.child = null, fiber.deletions = null, fiber.sibling = null, fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null)
            detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null, fiber._debugOwner = null, fiber.return = null, fiber.dependencies = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.stateNode = null, fiber.updateQueue = null;
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent))
          return parent;
        parent = parent.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      var node = fiber;
      siblings:
        while (!0) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return))
              return null;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.flags & Placement)
              continue siblings;
            if (node.child === null || node.tag === HostPortal)
              continue siblings;
            else
              node.child.return = node, node = node.child;
          }
          if (!(node.flags & Placement))
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      switch (parentFiber.tag) {
        case HostComponent: {
          var parent = parentFiber.stateNode;
          if (parentFiber.flags & ContentReset)
            resetTextContent(parent), parentFiber.flags &= ~ContentReset;
          var before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        }
        case HostRoot:
        case HostPortal: {
          var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before)
          insertInContainerBefore(parent, stateNode, before);
        else
          appendChildToContainer(parent, stateNode);
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null)
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before)
          insertBefore(parent, stateNode, before);
        else
          appendChild(parent, stateNode);
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null)
            insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
        }
      }
    }
    var hostParent = null, hostParentIsContainer = !1;
    function commitDeletionEffects(root2, returnFiber, deletedFiber) {
      {
        var parent = returnFiber;
        findParent:
          while (parent !== null) {
            switch (parent.tag) {
              case HostComponent: {
                hostParent = parent.stateNode, hostParentIsContainer = !1;
                break findParent;
              }
              case HostRoot: {
                hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                break findParent;
              }
              case HostPortal: {
                hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                break findParent;
              }
            }
            parent = parent.return;
          }
        if (hostParent === null)
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber), hostParent = null, hostParentIsContainer = !1;
      }
      detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      var child = parent.child;
      while (child !== null)
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child), child = child.sibling;
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      switch (onCommitUnmount(deletedFiber), deletedFiber.tag) {
        case HostComponent:
          if (!offscreenSubtreeWasHidden)
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case HostText: {
          {
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            if (hostParent = null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = prevHostParent, hostParentIsContainer = prevHostParentIsContainer, hostParent !== null)
              if (hostParentIsContainer)
                removeChildFromContainer(hostParent, deletedFiber.stateNode);
              else
                removeChild(hostParent, deletedFiber.stateNode);
          }
          return;
        }
        case DehydratedFragment: {
          if (hostParent !== null)
            if (hostParentIsContainer)
              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
            else
              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
          return;
        }
        case HostPortal: {
          {
            var _prevHostParent = hostParent, _prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo, hostParentIsContainer = !0, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = _prevHostParent, hostParentIsContainer = _prevHostParentIsContainer;
          }
          return;
        }
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (!offscreenSubtreeWasHidden) {
            var updateQueue = deletedFiber.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next, effect = firstEffect;
                do {
                  var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                  if (destroy !== void 0) {
                    if ((tag & Insertion) !== NoFlags$1)
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    else if ((tag & Layout) !== NoFlags$1) {
                      if (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & ProfileMode)
                        startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber);
                      else
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ClassComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var instance = deletedFiber.stateNode;
            if (typeof instance.componentWillUnmount === "function")
              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ScopeComponent: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case OffscreenComponent: {
          if (deletedFiber.mode & ConcurrentMode) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        }
        default: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
      }
    }
    function commitSuspenseCallback(finishedWork) {
      var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current2 = finishedWork.alternate;
        if (current2 !== null) {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null)
              commitHydratedSuspenseInstance(suspenseInstance);
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null)
          retryCache = finishedWork.stateNode = new PossiblyWeakSet;
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            if (retryCache.add(wakeable), isDevToolsPresent)
              if (inProgressLanes !== null && inProgressRoot !== null)
                restorePendingUpdaters(inProgressRoot, inProgressLanes);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root2, finishedWork, committedLanes) {
      inProgressLanes = committedLanes, inProgressRoot = root2, setCurrentFiber(finishedWork), commitMutationEffectsOnFiber(finishedWork, root2), setCurrentFiber(finishedWork), inProgressLanes = null, inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
      var deletions = parentFiber.deletions;
      if (deletions !== null)
        for (var i = 0;i < deletions.length; i++) {
          var childToDelete = deletions[i];
          try {
            commitDeletionEffects(root2, parentFiber, childToDelete);
          } catch (error2) {
            captureCommitPhaseError(childToDelete, parentFiber, error2);
          }
        }
      var prevDebugFiber = getCurrentFiber();
      if (parentFiber.subtreeFlags & MutationMask) {
        var child = parentFiber.child;
        while (child !== null)
          setCurrentFiber(child), commitMutationEffectsOnFiber(child, root2), child = child.sibling;
      }
      setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
      var { alternate: current2, flags } = finishedWork;
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update) {
            try {
              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer(), commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              recordLayoutEffectDuration(finishedWork);
            } else
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
          }
          return;
        }
        case ClassComponent: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Ref) {
            if (current2 !== null)
              safelyDetachRef(current2, current2.return);
          }
          return;
        }
        case HostComponent: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Ref) {
            if (current2 !== null)
              safelyDetachRef(current2, current2.return);
          }
          {
            if (finishedWork.flags & ContentReset) {
              var instance = finishedWork.stateNode;
              try {
                resetTextContent(instance);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            if (flags & Update) {
              var _instance4 = finishedWork.stateNode;
              if (_instance4 != null) {
                var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type = finishedWork.type, updatePayload = finishedWork.updateQueue;
                if (finishedWork.updateQueue = null, updatePayload !== null)
                  try {
                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
              }
            }
          }
          return;
        }
        case HostText: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update) {
            if (finishedWork.stateNode === null)
              throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            var { stateNode: textInstance, memoizedProps: newText } = finishedWork, oldText = current2 !== null ? current2.memoizedProps : newText;
            try {
              commitTextUpdate(textInstance, oldText, newText);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
          return;
        }
        case HostRoot: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update) {
            if (current2 !== null) {
              var prevRootState = current2.memoizedState;
              if (prevRootState.isDehydrated)
                try {
                  commitHydratedContainer(root2.containerInfo);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
          }
          return;
        }
        case HostPortal: {
          recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
          return;
        }
        case SuspenseComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
          var offscreenFiber = finishedWork.child;
          if (offscreenFiber.flags & Visibility) {
            var { stateNode: offscreenInstance, memoizedState: newState } = offscreenFiber, isHidden = newState !== null;
            if (offscreenInstance.isHidden = isHidden, isHidden) {
              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
              if (!wasHidden)
                markCommitTimeOfFallback();
            }
          }
          if (flags & Update) {
            try {
              commitSuspenseCallback(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case OffscreenComponent: {
          var _wasHidden = current2 !== null && current2.memoizedState !== null;
          if (finishedWork.mode & ConcurrentMode) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden, recursivelyTraverseMutationEffects(root2, finishedWork), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else
            recursivelyTraverseMutationEffects(root2, finishedWork);
          if (commitReconciliationEffects(finishedWork), flags & Visibility) {
            var { stateNode: _offscreenInstance, memoizedState: _newState } = finishedWork, _isHidden = _newState !== null, offscreenBoundary = finishedWork;
            if (_offscreenInstance.isHidden = _isHidden, _isHidden) {
              if (!_wasHidden) {
                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                  nextEffect = offscreenBoundary;
                  var offscreenChild = offscreenBoundary.child;
                  while (offscreenChild !== null)
                    nextEffect = offscreenChild, disappearLayoutEffects_begin(offscreenChild), offscreenChild = offscreenChild.sibling;
                }
              }
            }
            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
          }
          return;
        }
        case SuspenseListComponent: {
          if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags & Update)
            attachSuspenseRetryListeners(finishedWork);
          return;
        }
        case ScopeComponent:
          return;
        default: {
          recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
          return;
        }
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & Placement) {
        try {
          commitPlacement(finishedWork);
        } catch (error2) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
        }
        finishedWork.flags &= ~Placement;
      }
      if (flags & Hydrating)
        finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root2, committedLanes) {
      inProgressLanes = committedLanes, inProgressRoot = root2, nextEffect = finishedWork, commitLayoutEffects_begin(finishedWork, root2, committedLanes), inProgressLanes = null, inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
      while (nextEffect !== null) {
        var fiber = nextEffect, firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent && isModernRoot) {
          var isHidden = fiber.memoizedState !== null, newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
          if (newOffscreenSubtreeIsHidden) {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            continue;
          } else {
            var current2 = fiber.alternate, wasHidden = current2 !== null && current2.memoizedState !== null, newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            if (offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden, offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden)
              nextEffect = fiber, reappearLayoutEffects_begin(fiber);
            var child = firstChild;
            while (child !== null)
              nextEffect = child, commitLayoutEffects_begin(child, root2, committedLanes), child = child.sibling;
            nextEffect = fiber, offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden, commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            continue;
          }
        }
        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null)
          firstChild.return = fiber, nextEffect = firstChild;
        else
          commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & LayoutMask) !== NoFlags) {
          var current2 = fiber.alternate;
          setCurrentFiber(fiber);
          try {
            commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect, firstChild = fiber.child;
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (fiber.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), commitHookEffectListUnmount(Layout, fiber, fiber.return);
              } finally {
                recordLayoutEffectDuration(fiber);
              }
            else
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            break;
          }
          case ClassComponent: {
            safelyDetachRef(fiber, fiber.return);
            var instance = fiber.stateNode;
            if (typeof instance.componentWillUnmount === "function")
              safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            break;
          }
          case HostComponent: {
            safelyDetachRef(fiber, fiber.return);
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              disappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
            break;
          }
        }
        if (firstChild !== null)
          firstChild.return = fiber, nextEffect = firstChild;
        else
          disappearLayoutEffects_complete(subtreeRoot);
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect, firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent) {
          var isHidden = fiber.memoizedState !== null;
          if (isHidden) {
            reappearLayoutEffects_complete(subtreeRoot);
            continue;
          }
        }
        if (firstChild !== null)
          firstChild.return = fiber, nextEffect = firstChild;
        else
          reappearLayoutEffects_complete(subtreeRoot);
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          reappearLayoutEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        if (resetCurrentFiber(), fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
      nextEffect = finishedWork, commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect, firstChild = fiber.child;
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null)
          firstChild.return = fiber, nextEffect = firstChild;
        else
          commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
      }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          try {
            commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            } finally {
              recordPassiveEffectDuration(finishedWork);
            }
          } else
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
      }
    }
    function commitPassiveUnmountEffects(firstChild) {
      nextEffect = firstChild, commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect, child = fiber.child;
        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
          var deletions = fiber.deletions;
          if (deletions !== null) {
            for (var i = 0;i < deletions.length; i++) {
              var fiberToDelete = deletions[i];
              nextEffect = fiberToDelete, commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
            }
            {
              var previousFiber = fiber.alternate;
              if (previousFiber !== null) {
                var detachedChild = previousFiber.child;
                if (detachedChild !== null) {
                  previousFiber.child = null;
                  do {
                    var detachedSibling = detachedChild.sibling;
                    detachedChild.sibling = null, detachedChild = detachedSibling;
                  } while (detachedChild !== null);
                }
              }
            }
            nextEffect = fiber;
          }
        }
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null)
          child.return = fiber, nextEffect = child;
        else
          commitPassiveUnmountEffects_complete();
      }
    }
    function commitPassiveUnmountEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags)
          setCurrentFiber(fiber), commitPassiveUnmountOnFiber(fiber), resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return, nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode)
            startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return), recordPassiveEffectDuration(finishedWork);
          else
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          break;
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber), commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor), resetCurrentFiber();
        var child = fiber.child;
        if (child !== null)
          child.return = fiber, nextEffect = child;
        else
          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect, sibling = fiber.sibling, returnFiber = fiber.return;
        if (detachFiberAfterEffects(fiber), fiber === deletedSubtreeRoot) {
          nextEffect = null;
          return;
        }
        if (sibling !== null) {
          sibling.return = returnFiber, nextEffect = sibling;
          return;
        }
        nextEffect = returnFiber;
      }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
      switch (current2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (current2.mode & ProfileMode)
            startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor), recordPassiveEffectDuration(current2);
          else
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
          break;
        }
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          try {
            commitHookEffectListMount(Layout | HasEffect, fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          break;
        }
        case ClassComponent: {
          var instance = fiber.stateNode;
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          break;
        }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          try {
            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          break;
        }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          try {
            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          break;
        }
        case ClassComponent: {
          var instance = fiber.stateNode;
          if (typeof instance.componentWillUnmount === "function")
            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
          break;
        }
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          try {
            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
      }
    }
    var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      COMPONENT_TYPE = symbolFor("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class"), ROLE_TYPE = symbolFor("selector.role"), TEST_NAME_TYPE = symbolFor("selector.test_id"), TEXT_TYPE = symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      commitHooks.forEach(function(commitHook) {
        return commitHook();
      });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
      {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0, jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== !1;
      }
    }
    function isConcurrentActEnvironment() {
      {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null)
          error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
      }
    }
    var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = 0, BatchedContext = 1, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, pendingPassiveProfilerEffects = [], pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, isRunningInsertionEffect = !1;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
        return now();
      if (currentEventTime !== NoTimestamp)
        return currentEventTime;
      return currentEventTime = now(), currentEventTime;
    }
    function requestUpdateLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode)
        return SyncLane;
      else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes)
        return pickArbitraryLane(workInProgressRootRenderLanes);
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (ReactCurrentBatchConfig$3.transition !== null) {
          var transition = ReactCurrentBatchConfig$3.transition;
          if (!transition._updatedFibers)
            transition._updatedFibers = /* @__PURE__ */ new Set;
          transition._updatedFibers.add(fiber);
        }
        if (currentEventTransitionLane === NoLane)
          currentEventTransitionLane = claimNextTransitionLane();
        return currentEventTransitionLane;
      }
      var updateLane = getCurrentUpdatePriority();
      if (updateLane !== NoLane)
        return updateLane;
      var eventLane = getCurrentEventPriority();
      return eventLane;
    }
    function requestRetryLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode)
        return SyncLane;
      return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
      if (checkForNestedUpdates(), isRunningInsertionEffect)
        error("useInsertionEffect must not schedule updates.");
      if (isFlushingPassiveEffects)
        didScheduleUpdateDuringPassiveEffects = !0;
      if (markRootUpdated(root2, lane, eventTime), (executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot)
        warnAboutRenderPhaseUpdatesInDEV(fiber);
      else {
        if (isDevToolsPresent)
          addFiberToLanesMap(root2, fiber, lane);
        if (warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot) {
          if ((executionContext & RenderContext) === NoContext)
            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
          if (workInProgressRootExitStatus === RootSuspendedWithDelay)
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        }
        if (ensureRootIsScheduled(root2, eventTime), lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy)
          resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode();
      }
    }
    function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
      var current2 = root2.current;
      current2.lanes = lane, markRootUpdated(root2, lane, eventTime), ensureRootIsScheduled(root2, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
      return (executionContext & RenderContext) !== NoContext;
    }
    function ensureRootIsScheduled(root2, currentTime) {
      var existingCallbackNode = root2.callbackNode;
      markStarvedLanesAsExpired(root2, currentTime);
      var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (nextLanes === NoLanes) {
        if (existingCallbackNode !== null)
          cancelCallback$1(existingCallbackNode);
        root2.callbackNode = null, root2.callbackPriority = NoLane;
        return;
      }
      var newCallbackPriority = getHighestPriorityLane(nextLanes), existingCallbackPriority = root2.callbackPriority;
      if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
        if (existingCallbackNode == null && existingCallbackPriority !== SyncLane)
          error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      if (existingCallbackNode != null)
        cancelCallback$1(existingCallbackNode);
      var newCallbackNode;
      if (newCallbackPriority === SyncLane) {
        if (root2.tag === LegacyRoot) {
          if (ReactCurrentActQueue$1.isBatchingLegacy !== null)
            ReactCurrentActQueue$1.didScheduleLegacyUpdate = !0;
          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
        } else
          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
        if (ReactCurrentActQueue$1.current !== null)
          ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
        else
          scheduleMicrotask(function() {
            if ((executionContext & (RenderContext | CommitContext)) === NoContext)
              flushSyncCallbacks();
          });
        newCallbackNode = null;
      } else {
        var schedulerPriorityLevel;
        switch (lanesToEventPriority(nextLanes)) {
          case DiscreteEventPriority:
            schedulerPriorityLevel = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            schedulerPriorityLevel = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            schedulerPriorityLevel = NormalPriority;
            break;
          case IdleEventPriority:
            schedulerPriorityLevel = IdlePriority;
            break;
          default:
            schedulerPriorityLevel = NormalPriority;
            break;
        }
        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
      }
      root2.callbackPriority = newCallbackPriority, root2.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root2, didTimeout) {
      if (resetNestedUpdateFlag(), currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw new Error("Should not already be working.");
      var originalCallbackNode = root2.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        if (root2.callbackNode !== originalCallbackNode)
          return null;
      }
      var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes)
        return null;
      var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout, exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
      if (exitStatus !== RootInProgress) {
        if (exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes)
            lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
        }
        if (exitStatus === RootDidNotComplete)
          markRootSuspended$1(root2, lanes);
        else {
          var renderWasConcurrent = !includesBlockingLane(root2, lanes), finishedWork = root2.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
            if (exitStatus = renderRootSync(root2, lanes), exitStatus === RootErrored) {
              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (_errorRetryLanes !== NoLanes)
                lanes = _errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
            }
            if (exitStatus === RootFatalErrored) {
              var _fatalError = workInProgressRootFatalError;
              throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), _fatalError;
            }
          }
          root2.finishedWork = finishedWork, root2.finishedLanes = lanes, finishConcurrentRender(root2, exitStatus, lanes);
        }
      }
      if (ensureRootIsScheduled(root2, now()), root2.callbackNode === originalCallbackNode)
        return performConcurrentWorkOnRoot.bind(null, root2);
      return null;
    }
    function recoverFromConcurrentError(root2, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      if (isRootDehydrated(root2)) {
        var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
        rootWorkInProgress.flags |= ForceClientRender, errorHydratingContainer(root2.containerInfo);
      }
      var exitStatus = renderRootSync(root2, errorRetryLanes);
      if (exitStatus !== RootErrored) {
        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
        if (workInProgressRootRecoverableErrors = errorsFromFirstAttempt, errorsFromSecondAttempt !== null)
          queueRecoverableErrors(errorsFromSecondAttempt);
      }
      return exitStatus;
    }
    function queueRecoverableErrors(errors) {
      if (workInProgressRootRecoverableErrors === null)
        workInProgressRootRecoverableErrors = errors;
      else
        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root2, exitStatus, lanes) {
      switch (exitStatus) {
        case RootInProgress:
        case RootFatalErrored:
          throw new Error("Root did not complete. This is a bug in React.");
        case RootErrored: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspended: {
          if (markRootSuspended$1(root2, lanes), includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root2, NoLanes);
              if (nextLanes !== NoLanes)
                break;
              var suspendedLanes = root2.suspendedLanes;
              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                var eventTime = requestEventTime();
                markRootPinged(root2, suspendedLanes);
                break;
              }
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspendedWithDelay: {
          if (markRootSuspended$1(root2, lanes), includesOnlyTransitions(lanes))
            break;
          if (!shouldForceFlushFallbacksInDEV()) {
            var mostRecentEventTime = getMostRecentEventTime(root2, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
            if (_msUntilTimeout > 10) {
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootCompleted: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      var node = finishedWork;
      while (!0) {
        if (node.flags & StoreConsistency) {
          var updateQueue = node.updateQueue;
          if (updateQueue !== null) {
            var checks = updateQueue.stores;
            if (checks !== null)
              for (var i = 0;i < checks.length; i++) {
                var check = checks[i], getSnapshot = check.getSnapshot, renderedValue = check.value;
                try {
                  if (!objectIs(getSnapshot(), renderedValue))
                    return !1;
                } catch (error2) {
                  return !1;
                }
              }
          }
        }
        var child = node.child;
        if (node.subtreeFlags & StoreConsistency && child !== null) {
          child.return = node, node = child;
          continue;
        }
        if (node === finishedWork)
          return !0;
        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork)
            return !0;
          node = node.return;
        }
        node.sibling.return = node.return, node = node.sibling;
      }
      return !0;
    }
    function markRootSuspended$1(root2, suspendedLanes) {
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes), markRootSuspended(root2, suspendedLanes);
    }
    function performSyncWorkOnRoot(root2) {
      if (syncNestedUpdateFlag(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw new Error("Should not already be working.");
      flushPassiveEffects();
      var lanes = getNextLanes(root2, NoLanes);
      if (!includesSomeLane(lanes, SyncLane))
        return ensureRootIsScheduled(root2, now()), null;
      var exitStatus = renderRootSync(root2, lanes);
      if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
        if (errorRetryLanes !== NoLanes)
          lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
      }
      if (exitStatus === RootDidNotComplete)
        throw new Error("Root did not complete. This is a bug in React.");
      var finishedWork = root2.current.alternate;
      return root2.finishedWork = finishedWork, root2.finishedLanes = lanes, commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions), ensureRootIsScheduled(root2, now()), null;
    }
    function flushRoot(root2, lanes) {
      if (lanes !== NoLanes) {
        if (markRootEntangled(root2, mergeLanes(lanes, SyncLane)), ensureRootIsScheduled(root2, now()), (executionContext & (RenderContext | CommitContext)) === NoContext)
          resetRenderTimer(), flushSyncCallbacks();
      }
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        if (executionContext = prevExecutionContext, executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy)
          resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode();
      }
    }
    function discreteUpdates(fn, a, b, c, d) {
      var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn(a, b, c, d);
      } finally {
        if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext)
          resetRenderTimer();
      }
    }
    function flushSync(fn) {
      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext)
        flushPassiveEffects();
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
      try {
        if (ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn)
          return fn();
        else
          return;
      } finally {
        if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext)
          flushSyncCallbacks();
      }
    }
    function isAlreadyRendering() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root2, lanes) {
      root2.finishedWork = null, root2.finishedLanes = NoLanes;
      var timeoutHandle = root2.timeoutHandle;
      if (timeoutHandle !== noTimeout)
        root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle);
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork), interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root2;
      var rootWorkInProgress = createWorkInProgress(root2.current, null);
      return workInProgress = rootWorkInProgress, workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, finishQueueingConcurrentUpdates(), ReactStrictModeWarnings.discardPendingWarnings(), rootWorkInProgress;
    }
    function handleError(root2, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
            workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode)
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0);
          if (enableSchedulingProfiler)
            if (markComponentRenderStopped(), thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
            } else
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
          throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          if (thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null)
            erroredWork = erroredWork.return, workInProgress = erroredWork;
          else
            erroredWork = workInProgress;
          continue;
        }
        return;
      } while (!0);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      if (ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null)
        return ContextOnlyDispatcher;
      else
        return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootInProgress)
        workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored)
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)))
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error2) {
      if (workInProgressRootExitStatus !== RootSuspendedWithDelay)
        workInProgressRootExitStatus = RootErrored;
      if (workInProgressRootConcurrentErrors === null)
        workInProgressRootConcurrentErrors = [error2];
      else
        workInProgressRootConcurrentErrors.push(error2);
    }
    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          if (memoizedUpdaters.size > 0)
            restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear();
          movePendingFibersToMemoized(root2, lanes);
        }
        workInProgressTransitions = getTransitionsForLanes(), prepareFreshStack(root2, lanes);
      }
      markRenderStarted(lanes);
      do
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      while (!0);
      if (resetContextDependencies(), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
    }
    function workLoopSync() {
      while (workInProgress !== null)
        performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          if (memoizedUpdaters.size > 0)
            restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear();
          movePendingFibersToMemoized(root2, lanes);
        }
        workInProgressTransitions = getTransitionsForLanes(), resetRenderTimer(), prepareFreshStack(root2, lanes);
      }
      markRenderStarted(lanes);
      do
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      while (!0);
      if (resetContextDependencies(), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null)
        return markRenderYielded(), RootInProgress;
      else
        return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
    }
    function workLoopConcurrent() {
      while (workInProgress !== null && !shouldYield())
        performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
      var current2 = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next;
      if ((unitOfWork.mode & ProfileMode) !== NoMode)
        startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0);
      else
        next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
      if (resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null)
        completeUnitOfWork(unitOfWork);
      else
        workInProgress = next;
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var { alternate: current2, return: returnFiber } = completedWork;
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode)
            next = completeWork(current2, completedWork, subtreeRenderLanes);
          else
            startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
          if (resetCurrentFiber(), next !== null) {
            workInProgress = next;
            return;
          }
        } else {
          var _next = unwindWork(current2, completedWork);
          if (_next !== null) {
            _next.flags &= HostEffectMask, workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
            var { actualDuration, child } = completedWork;
            while (child !== null)
              actualDuration += child.actualDuration, child = child.sibling;
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null)
            returnFiber.flags |= Incomplete, returnFiber.subtreeFlags = NoFlags, returnFiber.deletions = null;
          else {
            workInProgressRootExitStatus = RootDidNotComplete, workInProgress = null;
            return;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          workInProgress = siblingFiber;
          return;
        }
        completedWork = returnFiber, workInProgress = completedWork;
      } while (completedWork !== null);
      if (workInProgressRootExitStatus === RootInProgress)
        workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root2, recoverableErrors, transitions) {
      var previousUpdateLanePriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition, setCurrentUpdatePriority(previousUpdateLanePriority);
      }
      return null;
    }
    function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
      do
        flushPassiveEffects();
      while (rootWithPendingPassiveEffects !== null);
      if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw new Error("Should not already be working.");
      var { finishedWork, finishedLanes: lanes } = root2;
      if (markCommitStarted(lanes), finishedWork === null)
        return markCommitStopped(), null;
      else if (lanes === NoLanes)
        error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
      if (root2.finishedWork = null, root2.finishedLanes = NoLanes, finishedWork === root2.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      root2.callbackNode = null, root2.callbackPriority = NoLane;
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      if (markRootFinished(root2, remainingLanes), root2 === workInProgressRoot)
        workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes;
      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
        if (!rootDoesHavePassiveEffects)
          rootDoesHavePassiveEffects = !0, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority, function() {
            return flushPassiveEffects(), null;
          });
      }
      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags, rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      if (subtreeHasEffects || rootHasEffect) {
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(DiscreteEventPriority);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext, ReactCurrentOwner$2.current = null;
        var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
        recordCommitTime(), commitMutationEffects(root2, finishedWork, lanes), resetAfterCommit(root2.containerInfo), root2.current = finishedWork, markLayoutEffectsStarted(lanes), commitLayoutEffects(finishedWork, root2, lanes), markLayoutEffectsStopped(), requestPaint(), executionContext = prevExecutionContext, setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
      } else
        root2.current = finishedWork, recordCommitTime();
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects)
        rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes;
      else
        nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null;
      if (remainingLanes = root2.pendingLanes, remainingLanes === NoLanes)
        legacyErrorBoundariesThatAlreadyFailed = null;
      if (!rootDidHavePassiveEffects)
        commitDoubleInvokeEffectsInDEV(root2.current, !1);
      if (onCommitRoot(finishedWork.stateNode, renderPriorityLevel), isDevToolsPresent)
        root2.memoizedUpdaters.clear();
      if (onCommitRoot$1(), ensureRootIsScheduled(root2, now()), recoverableErrors !== null) {
        var onRecoverableError = root2.onRecoverableError;
        for (var i = 0;i < recoverableErrors.length; i++) {
          var recoverableError = recoverableErrors[i], componentStack = recoverableError.stack, digest = recoverableError.digest;
          onRecoverableError(recoverableError.value, {
            componentStack,
            digest
          });
        }
      }
      if (hasUncaughtError) {
        hasUncaughtError = !1;
        var error$1 = firstUncaughtError;
        throw firstUncaughtError = null, error$1;
      }
      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot)
        flushPassiveEffects();
      if (remainingLanes = root2.pendingLanes, includesSomeLane(remainingLanes, SyncLane))
        if (markNestedUpdateScheduled(), root2 === rootWithNestedUpdates)
          nestedUpdateCount++;
        else
          nestedUpdateCount = 0, rootWithNestedUpdates = root2;
      else
        nestedUpdateCount = 0;
      return flushSyncCallbacks(), markCommitStopped(), null;
    }
    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects !== null) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = lowerEventPriority(DefaultEventPriority, renderPriority), prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(priority), flushPassiveEffectsImpl();
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
        }
      }
      return !1;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      if (pendingPassiveProfilerEffects.push(fiber), !rootDoesHavePassiveEffects)
        rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        });
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null)
        return !1;
      var transitions = pendingPassiveTransitions;
      pendingPassiveTransitions = null;
      var root2 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
      if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw new Error("Cannot flush passive effects while already rendering.");
      isFlushingPassiveEffects = !0, didScheduleUpdateDuringPassiveEffects = !1, markPassiveEffectsStarted(lanes);
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext, commitPassiveUnmountEffects(root2.current), commitPassiveMountEffects(root2, root2.current, lanes, transitions);
      {
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for (var i = 0;i < profilerEffects.length; i++) {
          var _fiber = profilerEffects[i];
          commitPassiveEffectDurations(root2, _fiber);
        }
      }
      markPassiveEffectsStopped(), commitDoubleInvokeEffectsInDEV(root2.current, !0), executionContext = prevExecutionContext, flushSyncCallbacks();
      {
        if (didScheduleUpdateDuringPassiveEffects)
          if (root2 === rootWithPassiveNestedUpdates)
            nestedPassiveUpdateCount++;
          else
            nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root2;
        else
          nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1;
      }
      onPostCommitRoot(root2);
      {
        var stateNode = root2.current.stateNode;
        stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
      }
      return !0;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null)
        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
      else
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error2) {
      if (!hasUncaughtError)
        hasUncaughtError = !0, firstUncaughtError = error2;
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
      var errorInfo = createCapturedValueAtFiber(error2, sourceFiber), update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane), root2 = enqueueUpdate(rootFiber, update, SyncLane), eventTime = requestEventTime();
      if (root2 !== null)
        markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime);
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      if (reportUncaughtErrorInDEV(error$1), setIsRunningInsertionEffect(!1), sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        return;
      }
      var fiber = null;
      fiber = nearestMountedAncestor;
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
          return;
        } else if (fiber.tag === ClassComponent) {
          var { type: ctor, stateNode: instance } = fiber;
          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber), update = createClassErrorUpdate(fiber, errorInfo, SyncLane), root2 = enqueueUpdate(fiber, update, SyncLane), eventTime = requestEventTime();
            if (root2 !== null)
              markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime);
            return;
          }
        }
        fiber = fiber.return;
      }
      error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
      var pingCache = root2.pingCache;
      if (pingCache !== null)
        pingCache.delete(wakeable);
      var eventTime = requestEventTime();
      if (markRootPinged(root2, pingedLanes), warnIfSuspenseResolutionNotWrappedWithActDEV(root2), workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes))
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
          prepareFreshStack(root2, NoLanes);
        else
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
      ensureRootIsScheduled(root2, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      if (retryLane === NoLane)
        retryLane = requestRetryLane(boundaryFiber);
      var eventTime = requestEventTime(), root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      if (root2 !== null)
        markRootUpdated(root2, retryLane, eventTime), ensureRootIsScheduled(root2, eventTime);
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState, retryLane = NoLane;
      if (suspenseState !== null)
        retryLane = suspenseState.retryLane;
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane, retryCache;
      switch (boundaryFiber.tag) {
        case SuspenseComponent:
          retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          if (suspenseState !== null)
            retryLane = suspenseState.retryLane;
          break;
        case SuspenseListComponent:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      if (retryCache !== null)
        retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
        throw nestedUpdateCount = 0, rootWithNestedUpdates = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT)
        nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      {
        if (setCurrentFiber(fiber), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV), hasPassiveEffects)
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        if (invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV), hasPassiveEffects)
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
      }
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      {
        var current2 = firstChild, subtreeRoot = null;
        while (current2 !== null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags)
            current2 = current2.child;
          else {
            if ((current2.flags & fiberFlags) !== NoFlags)
              invokeEffectFn(current2);
            if (current2.sibling !== null)
              current2 = current2.sibling;
            else
              current2 = subtreeRoot = current2.return;
          }
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext)
          return;
        if (!(fiber.mode & ConcurrentMode))
          return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent)
          return;
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
            return;
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else
          didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
        var previousFiber = current;
        try {
          setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          if (previousFiber)
            setCurrentFiber(fiber);
          else
            resetCurrentFiber();
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function(current2, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current2, unitOfWork, lanes);
        } catch (originalError) {
          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function")
            throw originalError;
          if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(current2, unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode)
            startProfilerTimer(unitOfWork);
          if (invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
            var replayError = clearCaughtError();
            if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging)
              originalError._suppressLogging = !0;
          }
          throw originalError;
        }
      };
    }
    var didWarnAboutUpdateInRender = !1, didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set;
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown", dedupeKey = renderingComponentName;
            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
              error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
            }
            break;
          }
          case ClassComponent: {
            if (!didWarnAboutUpdateInRender)
              error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0;
            break;
          }
        }
    }
    function restorePendingUpdaters(root2, lanes) {
      if (isDevToolsPresent) {
        var memoizedUpdaters = root2.memoizedUpdaters;
        memoizedUpdaters.forEach(function(schedulingFiber) {
          addFiberToLanesMap(root2, schedulingFiber, lanes);
        });
      }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
      {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null)
          return actQueue.push(callback), fakeActCallbackNode;
        else
          return scheduleCallback(priorityLevel, callback);
      }
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode === fakeActCallbackNode)
        return;
      return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
      return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      {
        if (fiber.mode & ConcurrentMode) {
          if (!isConcurrentActEnvironment())
            return;
        } else {
          if (!isLegacyActEnvironment())
            return;
          if (executionContext !== NoContext)
            return;
          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent)
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber), error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
          } finally {
            if (previousFiber)
              setCurrentFiber(fiber);
            else
              resetCurrentFiber();
          }
        }
      }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
      if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null)
        error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
      isRunningInsertionEffect = isRunning;
    }
    var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
      resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null)
          return type;
        var family = resolveFamily(type);
        if (family === void 0)
          return type;
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null)
          return type;
        var family = resolveFamily(type);
        if (family === void 0) {
          if (type !== null && type !== void 0 && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== void 0)
                syntheticType.displayName = type.displayName;
              return syntheticType;
            }
          }
          return type;
        }
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null)
          return !1;
        var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = !1, $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent: {
            if (typeof nextType === "function")
              needsCompareFamilies = !0;
            break;
          }
          case FunctionComponent: {
            if (typeof nextType === "function")
              needsCompareFamilies = !0;
            else if ($$typeofNextType === REACT_LAZY_TYPE)
              needsCompareFamilies = !0;
            break;
          }
          case ForwardRef: {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE)
              needsCompareFamilies = !0;
            else if ($$typeofNextType === REACT_LAZY_TYPE)
              needsCompareFamilies = !0;
            break;
          }
          case MemoComponent:
          case SimpleMemoComponent: {
            if ($$typeofNextType === REACT_MEMO_TYPE)
              needsCompareFamilies = !0;
            else if ($$typeofNextType === REACT_LAZY_TYPE)
              needsCompareFamilies = !0;
            break;
          }
          default:
            return !1;
        }
        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
            return !0;
        }
        return !1;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null)
          return;
        if (typeof WeakSet !== "function")
          return;
        if (failedBoundaries === null)
          failedBoundaries = /* @__PURE__ */ new WeakSet;
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function(root2, update) {
      {
        if (resolveFamily === null)
          return;
        var { staleFamilies, updatedFamilies } = update;
        flushPassiveEffects(), flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
        });
      }
    }, scheduleRoot = function(root2, element) {
      {
        if (root2.context !== emptyContextObject)
          return;
        flushPassiveEffects(), flushSync(function() {
          updateContainer(element, root2, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var { alternate, child, sibling, tag, type } = fiber, candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = !1, needsRemount = !1;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== void 0) {
            if (staleFamilies.has(family))
              needsRemount = !0;
            else if (updatedFamilies.has(family))
              if (tag === ClassComponent)
                needsRemount = !0;
              else
                needsRender = !0;
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate))
            needsRemount = !0;
        }
        if (needsRemount)
          fiber._debugNeedsRemount = !0;
        if (needsRemount || needsRender) {
          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (_root !== null)
            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount)
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null)
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
      }
    }
    var findHostInstancesForRefresh = function(root2, families) {
      {
        var hostInstances = /* @__PURE__ */ new Set, types = new Set(families.map(function(family) {
          return family.current;
        }));
        return findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances), hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var { child, sibling, tag, type } = fiber, candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = !1;
        if (candidateType !== null) {
          if (types.has(candidateType))
            didMatch = !0;
        }
        if (didMatch)
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        else if (child !== null)
          findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null)
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances)
          return;
        var node = fiber;
        while (!0) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }
          if (node.return === null)
            throw new Error("Expected to reach root first.");
          node = node.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber, foundHostInstances = !1;
        while (!0) {
          if (node.tag === HostComponent)
            foundHostInstances = !0, hostInstances.add(node.stateNode);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === fiber)
            return foundHostInstances;
          while (node.sibling === null) {
            if (node.return === null || node.return === fiber)
              return foundHostInstances;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }
      return !1;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = !1;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        ;
      } catch (e) {
        hasBadMapPolyfill = !0;
      }
    }
    function FiberNode(tag, pendingProps, key, mode) {
      if (this.tag = tag, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode, this.flags = NoFlags, this.subtreeFlags = NoFlags, this.deletions = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions === "function")
        Object.preventExtensions(this);
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function")
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      else if (Component !== void 0 && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE)
          return ForwardRef;
        if ($$typeof === REACT_MEMO_TYPE)
          return MemoComponent;
      }
      return IndeterminateComponent;
    }
    function createWorkInProgress(current2, pendingProps) {
      var workInProgress2 = current2.alternate;
      if (workInProgress2 === null)
        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2;
      else
        workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1;
      workInProgress2.flags = current2.flags & StaticMask, workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
      var currentDependencies = current2.dependencies;
      switch (workInProgress2.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
        case IndeterminateComponent:
        case FunctionComponent:
        case SimpleMemoComponent:
          workInProgress2.type = resolveFunctionForHotReloading(current2.type);
          break;
        case ClassComponent:
          workInProgress2.type = resolveClassForHotReloading(current2.type);
          break;
        case ForwardRef:
          workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
          break;
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= StaticMask | Placement;
      var current2 = workInProgress2.alternate;
      if (current2 === null)
        workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = NoFlags, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
      else {
        workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
      }
      return workInProgress2;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
      var mode;
      if (tag === ConcurrentRoot) {
        if (mode = ConcurrentMode, isStrictMode === !0)
          mode |= StrictLegacyMode, mode |= StrictEffectsMode;
      } else
        mode = NoMode;
      if (isDevToolsPresent)
        mode |= ProfileMode;
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent, resolvedType = type;
      if (typeof type === "function")
        if (shouldConstruct$1(type))
          fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType);
        else
          resolvedType = resolveFunctionForHotReloading(resolvedType);
      else if (typeof type === "string")
        fiberTag = HostComponent;
      else
        getTag:
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              if (fiberTag = Mode, mode |= StrictLegacyMode, (mode & ConcurrentMode) !== NoMode)
                mode |= StrictEffectsMode;
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default: {
              if (typeof type === "object" && type !== null)
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent, resolvedType = null;
                    break getTag;
                }
              var info = "";
              {
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0)
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName)
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
            }
          }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      return fiber.elementType = type, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      owner = element._owner;
      var { type, key, props: pendingProps } = element, fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      return fiber.lanes = lanes, fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      if (typeof pendingProps.id !== "string")
        error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      return fiber.elementType = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      return fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      return fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes;
      var primaryChildInstance = {
        isHidden: !1
      };
      return fiber.stateNode = primaryChildInstance, fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      return fiber.lanes = lanes, fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      return fiber.elementType = "DELETED", fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(DehydratedFragment, null, null, NoMode);
      return fiber.stateNode = dehydratedNode, fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [], fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      return fiber.lanes = lanes, fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      }, fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null)
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      return target.tag = source.tag, target.key = source.key, target.elementType = source.elementType, target.type = source.type, target.stateNode = source.stateNode, target.return = source.return, target.child = source.child, target.sibling = source.sibling, target.index = source.index, target.ref = source.ref, target.pendingProps = source.pendingProps, target.memoizedProps = source.memoizedProps, target.updateQueue = source.updateQueue, target.memoizedState = source.memoizedState, target.dependencies = source.dependencies, target.mode = source.mode, target.flags = source.flags, target.subtreeFlags = source.subtreeFlags, target.deletions = source.deletions, target.lanes = source.lanes, target.childLanes = source.childLanes, target.alternate = source.alternate, target.actualDuration = source.actualDuration, target.actualStartTime = source.actualStartTime, target.selfBaseDuration = source.selfBaseDuration, target.treeBaseDuration = source.treeBaseDuration, target._debugSource = source._debugSource, target._debugOwner = source._debugOwner, target._debugNeedsRemount = source._debugNeedsRemount, target._debugHookTypes = source._debugHookTypes, target;
    }
    function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
      this.tag = tag, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = NoLane, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.identifierPrefix = identifierPrefix, this.onRecoverableError = onRecoverableError, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set;
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for (var _i = 0;_i < TotalLanes; _i++)
          pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set);
      }
      switch (tag) {
        case ConcurrentRoot:
          this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
          break;
        case LegacyRoot:
          this._debugRootType = hydrate2 ? "hydrate()" : "render()";
          break;
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError), uninitializedFiber = createHostRootFiber(tag, isStrictMode);
      root2.current = uninitializedFiber, uninitializedFiber.stateNode = root2;
      {
        var _initialState = {
          element: initialChildren,
          isDehydrated: hydrate2,
          cache: null,
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
      }
      return initializeUpdateQueue(uninitializedFiber), root2;
    }
    var ReactVersion = "18.3.1";
    function createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return checkKeyStringCoercion(key), {
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = !1, didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
      if (!parentComponent)
        return emptyContextObject;
      var fiber = get(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component))
          return processChildContext(fiber, Component, parentContext);
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === void 0)
          if (typeof component.render === "function")
            throw new Error("Unable to find node on an unmounted component.");
          else {
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null)
          return null;
        if (hostFiber.mode & StrictLegacyMode) {
          var componentName = getComponentNameFromFiber(fiber) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = !0;
            var previousFiber = current;
            try {
              if (setCurrentFiber(hostFiber), fiber.mode & StrictLegacyMode)
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              else
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
            } finally {
              if (previousFiber)
                setCurrentFiber(previousFiber);
              else
                resetCurrentFiber();
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = !1, initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = !0, root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      root2.context = getContextForSubtree(null);
      var current2 = root2.current, eventTime = requestEventTime(), lane = requestUpdateLane(current2), update = createUpdate(eventTime, lane);
      return update.callback = callback !== void 0 && callback !== null ? callback : null, enqueueUpdate(current2, update, lane), scheduleInitialHydrationOnRoot(root2, lane, eventTime), root2;
    }
    function updateContainer(element, container, parentComponent, callback) {
      onScheduleRoot(container, element);
      var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
      markRenderScheduled(lane);
      var context = getContextForSubtree(parentComponent);
      if (container.context === null)
        container.context = context;
      else
        container.pendingContext = context;
      if (isRendering && current !== null && !didWarnAboutNestedUpdates)
        didWarnAboutNestedUpdates = !0, error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
      var update = createUpdate(eventTime, lane);
      if (update.payload = {
        element
      }, callback = callback === void 0 ? null : callback, callback !== null) {
        if (typeof callback !== "function")
          error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
        update.callback = callback;
      }
      var root2 = enqueueUpdate(current$1, update, lane);
      if (root2 !== null)
        scheduleUpdateOnFiber(root2, current$1, lane, eventTime), entangleTransitions(root2, current$1, lane);
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child)
        return null;
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function attemptSynchronousHydration$1(fiber) {
      switch (fiber.tag) {
        case HostRoot: {
          var root2 = fiber.stateNode;
          if (isRootDehydrated(root2)) {
            var lanes = getHighestPriorityPendingLanes(root2);
            flushRoot(root2, lanes);
          }
          break;
        }
        case SuspenseComponent: {
          flushSync(function() {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
            }
          });
          var retryLane = SyncLane;
          markRetryLaneIfNotHydrated(fiber, retryLane);
          break;
        }
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null)
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate)
        markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent)
        return;
      var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent)
        return;
      var lane = requestUpdateLane(fiber), root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null)
        return null;
      return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
      return null;
    };
    function shouldError(fiber) {
      return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
      return !1;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function(obj, path, index2) {
        var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index2 + 1 === path.length) {
          if (isArray(updated))
            updated.splice(key, 1);
          else
            delete updated[key];
          return updated;
        }
        return updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1), updated;
      }, copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      }, copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
        var oldKey = oldPath[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index2 + 1 === oldPath.length) {
          var newKey = newPath[index2];
          if (updated[newKey] = updated[oldKey], isArray(updated))
            updated.splice(oldKey, 1);
          else
            delete updated[oldKey];
        } else
          updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
        return updated;
      }, copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var i = 0;i < newPath.length - 1; i++)
            if (oldPath[i] !== newPath[i]) {
              warn("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      }, copyWithSetImpl = function(obj, path, index2, value) {
        if (index2 >= path.length)
          return value;
        var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
        return updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value), updated;
      }, copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      }, findHook = function(fiber, id) {
        var currentHook2 = fiber.memoizedState;
        while (currentHook2 !== null && id > 0)
          currentHook2 = currentHook2.next, id--;
        return currentHook2;
      };
      overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value);
          hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null)
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }, overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null)
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }, overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null)
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }, overrideProps = function(fiber, path, value) {
        if (fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value), fiber.alternate)
          fiber.alternate.pendingProps = fiber.pendingProps;
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }, overridePropsDeletePath = function(fiber, path) {
        if (fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path), fiber.alternate)
          fiber.alternate.pendingProps = fiber.pendingProps;
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
        if (fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate)
          fiber.alternate.pendingProps = fiber.pendingProps;
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }, scheduleUpdate = function(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null)
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }, setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      }, setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null)
        return null;
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState,
        overrideHookStateDeletePath,
        overrideHookStateRenamePath,
        overrideProps,
        overridePropsDeletePath,
        overridePropsRenamePath,
        setErrorHandler,
        setSuspenseHandler,
        scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher2,
        findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        findHostInstancesForRefresh,
        scheduleRefresh,
        scheduleRoot,
        setRefreshHandler,
        getCurrentFiber: getCurrentFiberForDevTools,
        reconcilerVersion: ReactVersion
      });
    }
    var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
      console.error(error2);
    };
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root2 = this._internalRoot;
      if (root2 === null)
        throw new Error("Cannot update an unmounted root.");
      {
        if (typeof arguments[1] === "function")
          error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1]))
          error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== "undefined")
          error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root2.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root2.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container)
              error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
          }
        }
      }
      updateContainer(children, root2, null, null);
    }, ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      if (typeof arguments[0] === "function")
        error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var root2 = this._internalRoot;
      if (root2 !== null) {
        this._internalRoot = null;
        var container = root2.containerInfo;
        if (isAlreadyRendering())
          error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
        flushSync(function() {
          updateContainer(null, root2, null, null);
        }), unmarkContainerAsRoot(container);
      }
    };
    function createRoot(container, options2) {
      if (!isValidContainer(container))
        throw new Error("createRoot(...): Target container is not a DOM element.");
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
      if (options2 !== null && options2 !== void 0) {
        if (options2.hydrate)
          warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
        else if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE)
          error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
        if (options2.unstable_strictMode === !0)
          isStrictMode = !0;
        if (options2.identifierPrefix !== void 0)
          identifierPrefix = options2.identifierPrefix;
        if (options2.onRecoverableError !== void 0)
          onRecoverableError = options2.onRecoverableError;
        if (options2.transitionCallbacks !== void 0)
          transitionCallbacks = options2.transitionCallbacks;
      }
      var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root2.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      return listenToAllSupportedEvents(rootContainerElement), new ReactDOMRoot(root2);
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
      if (target)
        queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options2) {
      if (!isValidContainer(container))
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      if (warnIfReactDOMContainerInDEV(container), initialChildren === void 0)
        error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
      var hydrationCallbacks = options2 != null ? options2 : null, mutableSources = options2 != null && options2.hydratedSources || null, isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        if (options2.unstable_strictMode === !0)
          isStrictMode = !0;
        if (options2.identifierPrefix !== void 0)
          identifierPrefix = options2.identifierPrefix;
        if (options2.onRecoverableError !== void 0)
          onRecoverableError = options2.onRecoverableError;
      }
      var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      if (markContainerAsRoot(root2.current, container), listenToAllSupportedEvents(container), mutableSources)
        for (var i = 0;i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root2, mutableSource);
        }
      return new ReactDOMHydrationRoot(root2);
    }
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
      {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY")
          error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container))
          if (container._reactRootContainer)
            error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
          else
            error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
      }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
      if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
        if (hostInstance) {
          if (hostInstance.parentNode !== container)
            error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
      }
      var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
      if (hasNonRootReactChild && !isRootRenderedBySomeReact)
        error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
      if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY")
        error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
      if (!container)
        return null;
      if (container.nodeType === DOCUMENT_NODE)
        return container.documentElement;
      else
        return container.firstChild;
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root2);
            originalCallback.call(instance);
          };
        }
        var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, !1, !1, "", noopOnRecoverableError);
        container._reactRootContainer = root2, markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(rootContainerElement), flushSync(), root2;
      } else {
        var rootSibling;
        while (rootSibling = container.lastChild)
          container.removeChild(rootSibling);
        if (typeof callback === "function") {
          var _originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(_root);
            _originalCallback.call(instance);
          };
        }
        var _root = createContainer(container, LegacyRoot, null, !1, !1, "", noopOnRecoverableError);
        container._reactRootContainer = _root, markContainerAsRoot(_root.current, container);
        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(_rootContainerElement), flushSync(function() {
          updateContainer(initialChildren, _root, parentComponent, callback);
        }), _root;
      }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      if (callback !== null && typeof callback !== "function")
        error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
      var maybeRoot = container._reactRootContainer, root2;
      if (!maybeRoot)
        root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      else {
        if (root2 = maybeRoot, typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root2);
            originalCallback.call(instance);
          };
        }
        updateContainer(children, root2, parentComponent, callback);
      }
      return getPublicRootInstance(root2);
    }
    var didWarnAboutFindDOMNode = !1;
    function findDOMNode(componentOrElement) {
      {
        if (!didWarnAboutFindDOMNode)
          didWarnAboutFindDOMNode = !0, error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender)
            error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
          owner.stateNode._warnedAboutRefsInRender = !0;
        }
      }
      if (componentOrElement == null)
        return null;
      if (componentOrElement.nodeType === ELEMENT_NODE)
        return componentOrElement;
      return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
    }
    function hydrate(element, container, callback) {
      if (error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
        throw new Error("Target container is not a DOM element.");
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot)
          error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
    }
    function render(element, container, callback) {
      if (error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
        throw new Error("Target container is not a DOM element.");
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot)
          error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      if (error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(containerNode))
        throw new Error("Target container is not a DOM element.");
      if (parentComponent == null || !has(parentComponent))
        throw new Error("parentComponent must be a valid React Component");
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
    }
    var didWarnAboutUnmountComponentAtNode = !1;
    function unmountComponentAtNode(container) {
      if (!didWarnAboutUnmountComponentAtNode)
        didWarnAboutUnmountComponentAtNode = !0, error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
      if (!isValidContainerLegacy(container))
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot)
          error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact)
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
        }
        return flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
            container._reactRootContainer = null, unmarkContainerAsRoot(container);
          });
        }), !0;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild)
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
        }
        return !1;
      }
    }
    if (setAttemptSynchronousHydration(attemptSynchronousHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setGetCurrentUpdatePriority(getCurrentUpdatePriority), setAttemptHydrationAtPriority(runWithPriority), typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function")
      error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!isValidContainer(container))
        throw new Error("Target container is not a DOM element.");
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
      usingClientEntryPoint: !1,
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
    };
    function createRoot$1(container, options2) {
      if (!Internals.usingClientEntryPoint)
        error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
      return createRoot(container, options2);
    }
    function hydrateRoot$1(container, initialChildren, options2) {
      if (!Internals.usingClientEntryPoint)
        error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
      return hydrateRoot(container, initialChildren, options2);
    }
    function flushSync$1(fn) {
      if (isAlreadyRendering())
        error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
      return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-dom"
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) {
      if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
        var protocol = window.location.protocol;
        if (/^(https?|file):$/.test(protocol))
          console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
      }
    }
    if (exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.createRoot = createRoot$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync$1, exports.hydrate = hydrate, exports.hydrateRoot = hydrateRoot$1, exports.render = render, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function")
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
  })();
});

// node_modules/react-dom/client.js
var require_client = __commonJS((exports) => {
  var m = __toESM(require_react_dom_development(), 1);
  i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = !0;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = !1;
    }
  }, exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = !0;
    try {
      return m.hydrateRoot(c, h, o);
    } finally {
      i.usingClientEntryPoint = !1;
    }
  };
  var i;
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react_development(), 1);
  (function() {
    var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object")
        return null;
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function")
        return maybeIterator;
      return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++)
          args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "")
          format += "%s", args = args.concat([stack]);
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type3) {
      if (typeof type3 === "string" || typeof type3 === "function")
        return !0;
      if (type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || enableDebugTracing || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type3 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing)
        return !0;
      if (typeof type3 === "object" && type3 !== null) {
        if (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MODULE_REFERENCE || type3.getModuleId !== void 0)
          return !0;
      }
      return !1;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName)
        return displayName;
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type3) {
      return type3.displayName || "Context";
    }
    function getComponentNameFromType(type3) {
      if (type3 == null)
        return null;
      if (typeof type3.tag === "number")
        error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if (typeof type3 === "function")
        return type3.displayName || type3.name || null;
      if (typeof type3 === "string")
        return type3;
      switch (type3) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type3 === "object")
        switch (type3.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context2 = type3;
            return getContextName(context2) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type3;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type3, type3.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type3.displayName || null;
            if (outerName !== null)
              return outerName;
            return getComponentNameFromType(type3.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type3, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      return null;
    }
    var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = !0;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
          var props = {
            configurable: !0,
            enumerable: !0,
            value: disabledLog,
            writable: !0
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        if (disabledDepth--, disabledDepth === 0) {
          var props = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0)
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0)
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        return "\n" + prefix + name;
      }
    }
    var reentry = !1, componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0)
          return frame;
      }
      var control;
      reentry = !0;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          if (Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
            c--;
          for (;s >= 1 && c >= 0; s--, c--)
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1)
                do
                  if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>"))
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    if (typeof fn === "function")
                      componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (s >= 1 && c >= 0);
              break;
            }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      if (typeof fn === "function")
        componentFrameCache.set(fn, syntheticFrame);
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      return describeNativeComponentFrame(fn, !1);
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type3, source, ownerFn) {
      if (type3 == null)
        return "";
      if (typeof type3 === "function")
        return describeNativeComponentFrame(type3, shouldConstruct(type3));
      if (typeof type3 === "string")
        return describeBuiltInComponentFrame(type3);
      switch (type3) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type3 === "object")
        switch (type3.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type3.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type3.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type3, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame.setExtraStackFrame(stack);
      } else
        ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs)
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw err.name = "Invariant Violation", err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error))
              setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null);
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures))
              loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null);
          }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag, type3 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type3;
      }
    }
    function willCoercionThrow(value) {
      try {
        return testStringCoercion(value), !1;
      } catch (e) {
        return !0;
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      if (willCoercionThrow(value))
        return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config2) {
      if (hasOwnProperty.call(config2, "ref")) {
        var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
        if (getter && getter.isReactWarning)
          return !1;
      }
      return config2.ref !== void 0;
    }
    function hasValidKey(config2) {
      if (hasOwnProperty.call(config2, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
        if (getter && getter.isReactWarning)
          return !1;
      }
      return config2.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config2, self) {
      if (typeof config2.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
        var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (!didWarnAboutStringRefs[componentName])
          error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref), didWarnAboutStringRefs[componentName] = !0;
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown)
            specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown)
            specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
    }
    var ReactElement = function(type3, key, ref, self, source, owner, props) {
      var element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type3,
        key,
        ref,
        props,
        _owner: owner
      };
      if (element._store = {}, Object.defineProperty(element._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(element, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: self
      }), Object.defineProperty(element, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: source
      }), Object.freeze)
        Object.freeze(element.props), Object.freeze(element);
      return element;
    };
    function jsxDEV(type3, config2, maybeKey, source, self) {
      {
        var propName, props = {}, key = null, ref = null;
        if (maybeKey !== void 0)
          checkKeyStringCoercion(maybeKey), key = "" + maybeKey;
        if (hasValidKey(config2))
          checkKeyStringCoercion(config2.key), key = "" + config2.key;
        if (hasValidRef(config2))
          ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2, self);
        for (propName in config2)
          if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName))
            props[propName] = config2[propName];
        if (type3 && type3.defaultProps) {
          var defaultProps = type3.defaultProps;
          for (propName in defaultProps)
            if (props[propName] === void 0)
              props[propName] = defaultProps[propName];
        }
        if (key || ref) {
          var displayName = typeof type3 === "function" ? type3.displayName || type3.name || "Unknown" : type3;
          if (key)
            defineKeyPropWarningGetter(props, displayName);
          if (ref)
            defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type3, key, ref, self, source, ReactCurrentOwner.current, props);
      }
    }
    var { ReactCurrentOwner: ReactCurrentOwner$1, ReactDebugCurrentFrame: ReactDebugCurrentFrame$1 } = ReactSharedInternals;
    function setCurrentlyValidatingElement$1(element) {
      if (element) {
        var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
      } else
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown = !1;
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name)
            return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName)
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null)
          return;
        element._store.validated = !0;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo])
          return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current)
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node, parentType) {
      {
        if (typeof node !== "object")
          return;
        if (isArray(node))
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child))
              validateExplicitKey(child, parentType);
          }
        else if (isValidElement(node)) {
          if (node._store)
            node._store.validated = !0;
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node), step;
              while (!(step = iterator.next()).done)
                if (isValidElement(step.value))
                  validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type3 = element.type;
        if (type3 === null || type3 === void 0 || typeof type3 === "string")
          return;
        var propTypes;
        if (typeof type3 === "function")
          propTypes = type3.propTypes;
        else if (typeof type3 === "object" && (type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MEMO_TYPE))
          propTypes = type3.propTypes;
        else
          return;
        if (propTypes) {
          var name = getComponentNameFromType(type3);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type3.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = !0;
          var _name = getComponentNameFromType(type3);
          error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type3.getDefaultProps === "function" && !type3.getDefaultProps.isReactClassApproved)
          error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys4 = Object.keys(fragment.props);
        for (var i = 0;i < keys4.length; i++) {
          var key = keys4[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null)
          setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null);
      }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type3, props, key, isStaticChildren, source, self) {
      {
        var validType = isValidElementType(type3);
        if (!validType) {
          var info = "";
          if (type3 === void 0 || typeof type3 === "object" && type3 !== null && Object.keys(type3).length === 0)
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo)
            info += sourceInfo;
          else
            info += getDeclarationErrorAddendum();
          var typeString;
          if (type3 === null)
            typeString = "null";
          else if (isArray(type3))
            typeString = "array";
          else if (type3 !== void 0 && type3.$$typeof === REACT_ELEMENT_TYPE)
            typeString = "<" + (getComponentNameFromType(type3.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?";
          else
            typeString = typeof type3;
          error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type3, props, key, source, self);
        if (element == null)
          return element;
        if (validType) {
          var children2 = props.children;
          if (children2 !== void 0)
            if (isStaticChildren)
              if (isArray(children2)) {
                for (var i = 0;i < children2.length; i++)
                  validateChildKeys(children2[i], type3);
                if (Object.freeze)
                  Object.freeze(children2);
              } else
                error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              validateChildKeys(children2, type3);
        }
        if (hasOwnProperty.call(props, "key")) {
          var componentName = getComponentNameFromType(type3), keys4 = Object.keys(props).filter(function(k) {
            return k !== "key";
          }), beforeExample = keys4.length > 0 ? "{key: someKey, " + keys4.join(": ..., ") + ": ...}" : "{key: someKey}";
          if (!didWarnAboutKeySpread[componentName + beforeExample]) {
            var afterExample = keys4.length > 0 ? "{" + keys4.join(": ..., ") + ": ...}" : "{}";
            error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName), didWarnAboutKeySpread[componentName + beforeExample] = !0;
          }
        }
        if (type3 === REACT_FRAGMENT_TYPE)
          validateFragmentProps(element);
        else
          validatePropTypes(element);
        return element;
      }
    }
    var jsxDEV$1 = jsxWithValidation;
    exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
  })();
});

// src/web.tsx
var ReactDom = __toESM(require_client(), 1);

// src/client/component/AppView.tsx
var import_react13 = __toESM(require_react_development(), 1);

// src/game/define/PlayerID.ts
var exports_PlayerID = {};
__export(exports_PlayerID, {
  PlayerIDFn: () => PlayerIDFn,
  PlayerB: () => PlayerB,
  PlayerA: () => PlayerA
});
function getOpponent(playerID) {
  return playerID == PlayerA ? PlayerB : PlayerA;
}
var PlayerA = "PlayerA", PlayerB = "PlayerB", PlayerIDFn = {
  getAll: () => [PlayerA, PlayerB],
  getOpponent,
  fromRelatedPlayerSideKeyword(kw, playerID) {
    return kw == "\u81EA\u8ECD" ? playerID : getOpponent(playerID);
  }
};

// src/client/tool/appContext/index.tsx
var import_react = __toESM(require_react_development(), 1);

// src/game/define/Timing.ts
var exports_Timing = {};
__export(exports_Timing, {
  PhaseFn: () => PhaseFn
});
var PhaseFn = {
  eq(l, r) {
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2];
  },
  isFreeTiming(phase) {
    switch (phase[0]) {
      case "\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA":
      case "\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA":
      case "\u914D\u5099\u30D5\u30A7\u30A4\u30BA":
        return phase[1] == "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0";
      case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
        return phase[2] == "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0" || phase[2] == "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02";
    }
  },
  isRuleEffect(phase) {
    switch (phase[0]) {
      case "\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA":
      case "\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA":
      case "\u914D\u5099\u30D5\u30A7\u30A4\u30BA":
        return phase[1] == "\u898F\u5B9A\u306E\u52B9\u679C";
      case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
        return phase[2] == "\u898F\u5B9A\u306E\u52B9\u679C";
    }
  },
  getAll() {
    return [
      ["\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u958B\u59CB"],
      ["\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u7D42\u4E86"],
      ["\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u958B\u59CB"],
      ["\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u7D42\u4E86"],
      ["\u914D\u5099\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u958B\u59CB"],
      ["\u914D\u5099\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u914D\u5099\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u7D42\u4E86"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u7D42\u4E86"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u7D42\u4E86"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u7D42\u4E86"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7", "\u898F\u5B9A\u306E\u52B9\u679C"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7", "\u30B9\u30C6\u30C3\u30D7\u7D42\u4E86"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642", "\u30C0\u30E1\u30FC\u30B8\u30EA\u30BB\u30C3\u30C8"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642", "\u52B9\u679C\u89E3\u6C7A"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642", "\u624B\u672D\u8ABF\u6574"],
      ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642", "\u52B9\u679C\u7D42\u4E86\u3002\u30BF\u30FC\u30F3\u7D42\u4E86"]
    ];
  },
  getFirst() {
    return this.getAll()[0];
  },
  getLast() {
    const all = this.getAll();
    return all[all.length - 1];
  },
  getLastTriigerEffect() {
    return ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642", "\u52B9\u679C\u89E3\u6C7A"];
  },
  getNext(timing) {
    const all = this.getAll(), idx = (this.getSeqId(timing) + 1) % all.length;
    return all[idx];
  },
  getSeqId(timing) {
    return this.getAll().findIndex((t) => this.eq(t, timing));
  }
};

// src/game/gameState/PhaseComponent.ts
var exports_PhaseComponent = {};
__export(exports_PhaseComponent, {
  setPhase: () => setPhase,
  getPhase: () => getPhase
});

// src/tool/logger.ts
var hideCategory = [
  "triggerEvent",
  "getPlayEffects",
  "getConditionTitleFn",
  "doEffect",
  "applyFlow",
  "handleAttackDamage",
  "getGlobalEffects",
  "getEffectTips",
  "createEffectTips",
  "getActionTitleFn",
  "getLogicTreeActionConditions",
  "createCommandEffectTips",
  "setEffectTips",
  "doTriggerEvent",
  "createPlayEffects",
  "getConditionTitleFn",
  "createPlayCardEffects",
  "addImmediateEffectIfCanPayCost",
  "doItemSetRollState",
  "doActiveEffect",
  "testCompress",
  "createPlayerScore",
  "AppContextProvider",
  "OnClickFlowConfirm",
  "OnViewModel",
  "onCardChange",
  "onActionStart",
  "onActionEnd",
  "onItemAdd",
  "onSetPhase",
  "onItemStateChange",
  "onItemStateDestroyReasonChange",
  "onAddImmediateEffect",
  "onEvent",
  "onEffectStart",
  "onEffectEnd",
  "onItemMove"
], filterCategory = !0, logCategory = (category, ...msg) => {
  if (filterCategory) {
    if (hideCategory.find((c) => c == category))
      return;
  }
  console.log(`[${(/* @__PURE__ */ new Date()).toLocaleTimeString()}][${category}]`, ...msg);
};

// src/tool/table/index.ts
function addCard(table, position, cardId) {
  return {
    ...table,
    cardStack: {
      ...table.cardStack,
      [position]: [...table.cardStack[position] || [], cardId]
    }
  };
}
function getCardsByPosition(table, position) {
  if (table.cardStack[position] == null)
    return [];
  return table.cardStack[position];
}
function moveCard(table, fromPosition, toPosition, cardId, options) {
  if (fromPosition == toPosition)
    return console.warn(`moveCard from ${fromPosition} to ${toPosition}. ignore`), table;
  if (table.cardStack[fromPosition]?.includes(cardId) != !0)
    throw new Error(`table from ${fromPosition} not exist ${cardId}`);
  const updatedFromStack = table.cardStack[fromPosition]?.filter((id) => id !== cardId) || [];
  let updatedToStack = table.cardStack[toPosition] || [];
  if (options?.insertId != null) {
    if (options.insertId < 0)
      throw new Error(`insertId not < 0: ${options.insertId}`);
    if (options.insertId == 0)
      updatedToStack = [cardId, ...updatedToStack];
    else
      updatedToStack = [...updatedToStack.slice(0, options.insertId), cardId, ...updatedToStack.slice(options.insertId)];
  } else
    updatedToStack = [...updatedToStack, cardId];
  return {
    ...table,
    cardStack: {
      ...table.cardStack,
      [fromPosition]: updatedFromStack,
      [toPosition]: updatedToStack
    }
  };
}
function getCardPosition(table, cardId) {
  for (let [key, value] of Object.entries(table.cardStack))
    if (value.includes(cardId))
      return key;
  return null;
}
function shuffleCards(ctx2, position) {
  const cards = ctx2.cardStack[position];
  if (!cards)
    return ctx2;
  const shuffledCards = [...cards].sort(() => Math.random() - 0.5);
  return {
    ...ctx2,
    cardStack: {
      ...ctx2.cardStack,
      [position]: shuffledCards
    }
  };
}
var DEFAULT_TABLE = {
  cardStack: {}
}, TableFns = {
  addCard,
  moveCard,
  getCardPosition,
  getCardsByPosition,
  shuffleCards,
  assertDup(table) {
    for (let key in table.cardStack) {
      const cardIdSets = {}, cs = table.cardStack[key];
      for (let cardId of cs) {
        if (cardIdSets[cardId])
          throw new Error(`dup !! ${cardId} in ${key}`);
        cardIdSets[cardId] = !0;
      }
    }
  }
};

// src/game/gameState/MessageComponent.ts
function addMessage(ctx2, msg) {
  if (msg.id == 0)
    msg.id = ctx2.messageTopId;
  msg.effect = ctx2.messagesCurrentEffect || void 0;
  let nextMsgs = [msg, ...ctx2.messages];
  if (nextMsgs.length > 200)
    nextMsgs = nextMsgs.slice(0, 200);
  return {
    ...ctx2,
    messageTopId: ctx2.messageTopId + 1,
    messages: nextMsgs
  };
}
function setMessageCurrentEffect(ctx2, effect) {
  return {
    ...ctx2,
    messagesCurrentEffect: effect
  };
}

// src/game/gameState/EventCenter.ts
function assertIsGameState(ctx2) {
  if (ctx2.isGameState != !0)
    throw new Error("must is gameState");
}
var EventCenterFn = {
  onTargetMessingError(ctx2, effect, e) {
    assertIsGameState(ctx2);
    const msg = `\u5C0D\u8C61\u907A\u5931: ${e.message}:${effect.text.description}`;
    return ctx2 = addMessage(ctx2, { id: 0, description: msg }), console.warn("======================="), console.warn(msg), ctx2;
  },
  onAddImmediateEffectButConditionFail(ctx2, effect, cets) {
    assertIsGameState(ctx2);
    const msg = `\u5C07\u767C\u52D5\u8D77\u52D5\u6548\u679C\u4F46\u689D\u4EF6\u4E0D\u8DB3: ${cets.flatMap((cet) => cet.tipOrErrors.flatMap((toe) => toe.errors)).join("|")}: ${effect.text.description}`;
    return ctx2 = addMessage(ctx2, { id: 0, description: msg }), console.warn("======================="), console.warn(msg), ctx2;
  },
  onAddImmediateEffect(ctx2, effect) {
    return assertIsGameState(ctx2), logCategory("onAddImmediateEffect", `${effect.description}`, effect), ctx2;
  },
  onEvent(ctx2, evt) {
    return assertIsGameState(ctx2), logCategory("onEvent", `${JSON.stringify(evt.title)} ${JSON.stringify(evt.cardIds)}`, evt.title, evt.cardIds), ctx2 = addMessage(ctx2, { id: 0, description: `onEvent: ${evt.title[0]} ${JSON.stringify(evt.cardIds)}` }), ctx2;
  },
  onEffectStart(ctx2, effect) {
    return assertIsGameState(ctx2), logCategory("onEffectStart", `${effect.text.description}`), ctx2 = setMessageCurrentEffect(ctx2, effect), ctx2 = addMessage(ctx2, { id: 0, description: `onEffectStart: ${effect.text.description}` }), ctx2;
  },
  onEffectEnd(ctx2, effect) {
    return assertIsGameState(ctx2), logCategory("onEffectEnd", `${effect.text.description}`), ctx2 = setMessageCurrentEffect(ctx2, null), ctx2 = addMessage(ctx2, { id: 0, description: `onEffectEnd: ${effect.text.description}` }), ctx2;
  },
  onActionStart(ctx2, effect, action) {
    return assertIsGameState(ctx2), logCategory("onActionStart", `${action.description}`), ctx2;
  },
  onActionEnd(ctx2, effect, action) {
    return assertIsGameState(ctx2), logCategory("onActionEnd", `${action.description}`), ctx2;
  },
  onItemStateDestroyReasonChange(ctx2, old, curr) {
    if (assertIsGameState(ctx2), old.destroyReason == null && curr.destroyReason)
      logCategory("onItemStateDestroyReasonChange", `\u88AB\u7834\u58DE\u5C1A\u672A\u9032\u5165\u5806\u758A:${curr.id}`), ctx2 = addMessage(ctx2, { id: 0, description: `\u88AB\u7834\u58DE\u5C1A\u672A\u9032\u5165\u5806\u758A:${curr.id}` });
    else if (old.destroyReason && curr.destroyReason == null)
      logCategory("onItemStateDestroyReasonChange", `\u7834\u58DE\u88AB\u53D6\u6D88:${curr.id}`), ctx2 = addMessage(ctx2, { id: 0, description: `\u7834\u58DE\u88AB\u53D6\u6D88:${curr.id}` });
    return ctx2;
  },
  onItemDamageChange(ctx2, old, curr) {
    assertIsGameState(ctx2);
    const msg = `\u50B7\u5BB3\u8B8A\u5316: ${curr.id} ${old.damage} => ${curr.damage}`;
    return logCategory("onItemDamageChange", msg), ctx2 = addMessage(ctx2, { id: 0, description: msg }), ctx2;
  },
  onItemStateChange(ctx2, old, curr) {
    if (assertIsGameState(ctx2), old.destroyReason != curr.destroyReason)
      ctx2 = EventCenterFn.onItemStateDestroyReasonChange(ctx2, old, curr);
    if (old.damage != curr.damage)
      ctx2 = EventCenterFn.onItemDamageChange(ctx2, old, curr);
    let msg = null;
    if (old.globalEffects.length != curr.globalEffects.length)
      msg = `${curr.id}.globalEffects.length ${old.globalEffects.length} => ${curr.globalEffects.length}`;
    if (msg)
      ctx2 = addMessage(ctx2, { id: 0, description: msg }), logCategory("onItemStateChange", msg);
    return ctx2;
  },
  onCardChange(ctx2, old, curr) {
    assertIsGameState(ctx2);
    let msg = null;
    if (old.isFaceDown != curr.isFaceDown)
      msg = `${curr.id}.isFaceDown ${old.isFaceDown} => ${curr.isFaceDown}`;
    if (old.isRoll != curr.isRoll)
      msg = `${curr.id}.isRoll ${old.isRoll} => ${curr.isRoll}`;
    if (old.protoID != curr.protoID)
      msg = `${curr.id}.protoID ${old.protoID} => ${curr.protoID}`;
    if (msg)
      ctx2 = addMessage(ctx2, { id: 0, description: msg }), logCategory("onCardChange", msg);
    return ctx2;
  },
  onPlayerStateChange(ctx2, old, curr) {
    return assertIsGameState(ctx2), ctx2 = addMessage(ctx2, { id: 0, description: `onPlayerStateChange:${curr.id}` }), ctx2;
  },
  onSetSetGroupParent(ctx2, parentId, itemId) {
    return assertIsGameState(ctx2), ctx2 = addMessage(ctx2, { id: 0, description: `onSetSetGroupParent:${parentId} ${itemId}` }), ctx2;
  },
  onSetPhase(ctx2, old, curr) {
    return assertIsGameState(ctx2), logCategory("onSetPhase", `${curr}`), ctx2 = addMessage(ctx2, { id: 0, description: `onSetPhase:${curr}` }), ctx2;
  },
  onItemAdd(ctx2, itemId) {
    return assertIsGameState(ctx2), logCategory("onItemAdd", `${itemId}`), ctx2;
  },
  onCountryDamage(ctx2, playerId, damage) {
    assertIsGameState(ctx2);
    const msg = `\u672C\u570B\u53D7\u5230\u50B7\u5BB3: ${playerId} => ${damage} damage`;
    return ctx2 = addMessage(ctx2, { id: 0, description: msg }), logCategory("onCountryDamage", msg), ctx2;
  },
  onItemMove(ctx2, from, to, itemId) {
    return assertIsGameState(ctx2), logCategory("onItemMove", `${itemId} = ${from} => ${to}`), ctx2 = addMessage(ctx2, { id: 0, description: `onItemMove:${itemId} = ${from} => ${to}` }), ctx2;
  },
  onItemDelete(ctx2, itemId) {
    return assertIsGameState(ctx2), logCategory("onItemDelete", `${itemId}`), ctx2;
  },
  onTableChange(ctx2, old, curr) {
    assertIsGameState(ctx2);
    for (let oldBasyouStr in old.cardStack)
      for (let itemId of old.cardStack[oldBasyouStr]) {
        const newBasyouStr = TableFns.getCardPosition(curr, itemId);
        if (newBasyouStr == null)
          ctx2 = EventCenterFn.onItemDelete(ctx2, itemId);
        else if (newBasyouStr != oldBasyouStr)
          ;
      }
    for (let newBasyouStr in curr.cardStack)
      for (let itemId of curr.cardStack[newBasyouStr]) {
        const oldBasyouStr = TableFns.getCardPosition(old, itemId);
        if (oldBasyouStr == null)
          ctx2 = EventCenterFn.onItemAdd(ctx2, itemId);
        else if (newBasyouStr != oldBasyouStr)
          ctx2 = EventCenterFn.onItemMove(ctx2, oldBasyouStr, newBasyouStr, itemId);
      }
    return ctx2;
  }
};

// src/game/gameState/PhaseComponent.ts
function setPhase(ctx2, timing) {
  const old = ctx2.phase;
  return ctx2 = {
    ...ctx2,
    phase: timing
  }, ctx2 = EventCenterFn.onSetPhase(ctx2, old, ctx2.phase), ctx2;
}
function getPhase(ctx2) {
  return ctx2.phase;
}

// src/game/define/BaSyou.ts
var exports_BaSyou = {};
__export(exports_BaSyou, {
  RelatedBaSyouFn: () => RelatedBaSyouFn,
  BaSyouKeywordFn: () => BaSyouKeywordFn,
  AbsoluteBaSyouFn: () => AbsoluteBaSyouFn
});

// node_modules/ramda/es/internal/_isPlaceholder.js
function _isPlaceholder(a) {
  return a != null && typeof a === "object" && a["@@functional/placeholder"] === !0;
}

// node_modules/ramda/es/internal/_curry1.js
function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a))
      return f1;
    else
      return fn.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_curry2.js
function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function(_b) {
          return fn(a, _b);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function(_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

// node_modules/ramda/es/add.js
var add = /* @__PURE__ */ _curry2(function add2(a, b) {
  return Number(a) + Number(b);
}), add_default = add;

// node_modules/ramda/es/internal/_concat.js
function _concat(set1, set2) {
  set1 = set1 || [], set2 = set2 || [];
  var idx, len1 = set1.length, len2 = set2.length, result = [];
  idx = 0;
  while (idx < len1)
    result[result.length] = set1[idx], idx += 1;
  idx = 0;
  while (idx < len2)
    result[result.length] = set2[idx], idx += 1;
  return result;
}

// node_modules/ramda/es/internal/_arity.js
function _arity(n, fn) {
  switch (n) {
    case 0:
      return function() {
        return fn.apply(this, arguments);
      };
    case 1:
      return function(a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function(a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function(a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function(a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function(a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function(a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function(a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function(a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
  }
}

// node_modules/ramda/es/internal/_curryN.js
function _curryN(length, received, fn) {
  return function() {
    var combined = [], argsIdx = 0, left = length, combinedIdx = 0, hasPlaceholder = !1;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length))
        result = received[combinedIdx];
      else
        result = arguments[argsIdx], argsIdx += 1;
      if (combined[combinedIdx] = result, !_isPlaceholder(result))
        left -= 1;
      else
        hasPlaceholder = !0;
      combinedIdx += 1;
    }
    return !hasPlaceholder && left <= 0 ? fn.apply(this, combined) : _arity(Math.max(0, left), _curryN(length, combined, fn));
  };
}

// node_modules/ramda/es/curryN.js
var curryN = /* @__PURE__ */ _curry2(function curryN2(length, fn) {
  if (length === 1)
    return _curry1(fn);
  return _arity(length, _curryN(length, [], fn));
}), curryN_default = curryN;

// node_modules/ramda/es/internal/_curry3.js
function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function(_b, _c) {
          return fn(a, _b, _c);
        });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function(_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function(_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function(_c) {
          return fn(a, b, _c);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function(_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function(_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function(_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

// node_modules/ramda/es/internal/_isArray.js
var _isArray_default = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
};

// node_modules/ramda/es/internal/_isTransformer.js
function _isTransformer(obj) {
  return obj != null && typeof obj["@@transducer/step"] === "function";
}

// node_modules/ramda/es/internal/_dispatchable.js
function _dispatchable(methodNames, transducerCreator, fn) {
  return function() {
    if (arguments.length === 0)
      return fn();
    var obj = arguments[arguments.length - 1];
    if (!_isArray_default(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === "function")
          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_xfBase.js
var _xfBase_default = {
  init: function() {
    return this.xf["@@transducer/init"]();
  },
  result: function(result) {
    return this.xf["@@transducer/result"](result);
  }
};

// node_modules/ramda/es/internal/_arrayFromIterator.js
function _arrayFromIterator(iter) {
  var list = [], next;
  while (!(next = iter.next()).done)
    list.push(next.value);
  return list;
}

// node_modules/ramda/es/internal/_includesWith.js
function _includesWith(pred, x, list) {
  var idx = 0, len = list.length;
  while (idx < len) {
    if (pred(x, list[idx]))
      return !0;
    idx += 1;
  }
  return !1;
}

// node_modules/ramda/es/internal/_functionName.js
function _functionName(f) {
  var match = String(f).match(/^function (\w*)/);
  return match == null ? "" : match[1];
}

// node_modules/ramda/es/internal/_has.js
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/ramda/es/internal/_objectIs.js
function _objectIs(a, b) {
  if (a === b)
    return a !== 0 || 1 / a === 1 / b;
  else
    return a !== a && b !== b;
}
var _objectIs_default = typeof Object.is === "function" ? Object.is : _objectIs;

// node_modules/ramda/es/internal/_isArguments.js
var toString = Object.prototype.toString, _isArguments = /* @__PURE__ */ function() {
  return toString.call(arguments) === "[object Arguments]" ? function _isArguments(x) {
    return toString.call(x) === "[object Arguments]";
  } : function _isArguments(x) {
    return _has("callee", x);
  };
}(), _isArguments_default = _isArguments;

// node_modules/ramda/es/keys.js
var hasEnumBug = !/* @__PURE__ */ {
  toString: null
}.propertyIsEnumerable("toString"), nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"], hasArgsEnumBug = /* @__PURE__ */ function() {
  return arguments.propertyIsEnumerable("length");
}(), contains = function contains2(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item)
      return !0;
    idx += 1;
  }
  return !1;
}, keys = typeof Object.keys === "function" && !hasArgsEnumBug ? /* @__PURE__ */ _curry1(function keys2(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) : /* @__PURE__ */ _curry1(function keys3(obj) {
  if (Object(obj) !== obj)
    return [];
  var prop, nIdx, ks = [], checkArgsLength = hasArgsEnumBug && _isArguments_default(obj);
  for (prop in obj)
    if (_has(prop, obj) && (!checkArgsLength || prop !== "length"))
      ks[ks.length] = prop;
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      if (prop = nonEnumerableProps[nIdx], _has(prop, obj) && !contains(ks, prop))
        ks[ks.length] = prop;
      nIdx -= 1;
    }
  }
  return ks;
}), keys_default = keys;

// node_modules/ramda/es/type.js
var type = /* @__PURE__ */ _curry1(function type2(val) {
  return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
}), type_default = type;

// node_modules/ramda/es/internal/_equals.js
function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator), b = _arrayFromIterator(bIterator);
  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  }
  return !_includesWith(function(b2, aItem) {
    return !_includesWith(eq, aItem, b2);
  }, b, a);
}
function _equals(a, b, stackA, stackB) {
  if (_objectIs_default(a, b))
    return !0;
  var typeA = type_default(a);
  if (typeA !== type_default(b))
    return !1;
  if (typeof a["fantasy-land/equals"] === "function" || typeof b["fantasy-land/equals"] === "function")
    return typeof a["fantasy-land/equals"] === "function" && a["fantasy-land/equals"](b) && typeof b["fantasy-land/equals"] === "function" && b["fantasy-land/equals"](a);
  if (typeof a.equals === "function" || typeof b.equals === "function")
    return typeof a.equals === "function" && a.equals(b) && typeof b.equals === "function" && b.equals(a);
  switch (typeA) {
    case "Arguments":
    case "Array":
    case "Object":
      if (typeof a.constructor === "function" && _functionName(a.constructor) === "Promise")
        return a === b;
      break;
    case "Boolean":
    case "Number":
    case "String":
      if (!(typeof a === typeof b && _objectIs_default(a.valueOf(), b.valueOf())))
        return !1;
      break;
    case "Date":
      if (!_objectIs_default(a.valueOf(), b.valueOf()))
        return !1;
      break;
    case "Error":
      return a.name === b.name && a.message === b.message;
    case "RegExp":
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode))
        return !1;
      break;
  }
  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a)
      return stackB[idx] === b;
    idx -= 1;
  }
  switch (typeA) {
    case "Map":
      if (a.size !== b.size)
        return !1;
      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
    case "Set":
      if (a.size !== b.size)
        return !1;
      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
    case "Arguments":
    case "Array":
    case "Object":
    case "Boolean":
    case "Number":
    case "String":
    case "Date":
    case "Error":
    case "RegExp":
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "ArrayBuffer":
      break;
    default:
      return !1;
  }
  var keysA = keys_default(a);
  if (keysA.length !== keys_default(b).length)
    return !1;
  var extendedStackA = stackA.concat([a]), extendedStackB = stackB.concat([b]);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB)))
      return !1;
    idx -= 1;
  }
  return !0;
}

// node_modules/ramda/es/equals.js
var equals = /* @__PURE__ */ _curry2(function equals2(a, b) {
  return _equals(a, b, [], []);
}), equals_default = equals;

// node_modules/ramda/es/internal/_indexOf.js
function _indexOf(list, a, idx) {
  var inf, item;
  if (typeof list.indexOf === "function")
    switch (typeof a) {
      case "number":
        if (a === 0) {
          inf = 1 / a;
          while (idx < list.length) {
            if (item = list[idx], item === 0 && 1 / item === inf)
              return idx;
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          while (idx < list.length) {
            if (item = list[idx], typeof item === "number" && item !== item)
              return idx;
            idx += 1;
          }
          return -1;
        }
        return list.indexOf(a, idx);
      case "string":
      case "boolean":
      case "function":
      case "undefined":
        return list.indexOf(a, idx);
      case "object":
        if (a === null)
          return list.indexOf(a, idx);
    }
  while (idx < list.length) {
    if (equals_default(list[idx], a))
      return idx;
    idx += 1;
  }
  return -1;
}

// node_modules/ramda/es/internal/_includes.js
function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}

// node_modules/ramda/es/internal/_map.js
function _map(fn, functor) {
  var idx = 0, len = functor.length, result = Array(len);
  while (idx < len)
    result[idx] = fn(functor[idx]), idx += 1;
  return result;
}

// node_modules/ramda/es/internal/_quote.js
function _quote(s) {
  var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
  return '"' + escaped.replace(/"/g, '\\"') + '"';
}

// node_modules/ramda/es/internal/_toISOString.js
var pad = function pad2(n) {
  return (n < 10 ? "0" : "") + n;
}, _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d) {
  return d.toISOString();
} : function _toISOString3(d) {
  return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + "Z";
}, _toISOString_default = _toISOString;

// node_modules/ramda/es/internal/_complement.js
function _complement(f) {
  return function() {
    return !f.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_arrayReduce.js
function _arrayReduce(reducer, acc, list) {
  var index = 0, length = list.length;
  while (index < length)
    acc = reducer(acc, list[index]), index += 1;
  return acc;
}

// node_modules/ramda/es/internal/_filter.js
function _filter(fn, list) {
  var idx = 0, len = list.length, result = [];
  while (idx < len) {
    if (fn(list[idx]))
      result[result.length] = list[idx];
    idx += 1;
  }
  return result;
}

// node_modules/ramda/es/internal/_isObject.js
function _isObject(x) {
  return Object.prototype.toString.call(x) === "[object Object]";
}

// node_modules/ramda/es/internal/_xfilter.js
var XFilter = /* @__PURE__ */ function() {
  function XFilter2(f, xf) {
    this.xf = xf, this.f = f;
  }
  return XFilter2.prototype["@@transducer/init"] = _xfBase_default.init, XFilter2.prototype["@@transducer/result"] = _xfBase_default.result, XFilter2.prototype["@@transducer/step"] = function(result, input) {
    return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
  }, XFilter2;
}();
function _xfilter(f) {
  return function(xf) {
    return new XFilter(f, xf);
  };
}

// node_modules/ramda/es/filter.js
var filter = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
  return _isObject(filterable) ? _arrayReduce(function(acc, key) {
    if (pred(filterable[key]))
      acc[key] = filterable[key];
    return acc;
  }, {}, keys_default(filterable)) : _filter(pred, filterable);
})), filter_default = filter;

// node_modules/ramda/es/reject.js
var reject = /* @__PURE__ */ _curry2(function reject2(pred, filterable) {
  return filter_default(_complement(pred), filterable);
}), reject_default = reject;

// node_modules/ramda/es/internal/_toString.js
function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? "<Circular>" : _toString(y, xs);
  }, mapPairs = function(obj, keys4) {
    return _map(function(k) {
      return _quote(k) + ": " + recur(obj[k]);
    }, keys4.slice().sort());
  };
  switch (Object.prototype.toString.call(x)) {
    case "[object Arguments]":
      return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
    case "[object Array]":
      return "[" + _map(recur, x).concat(mapPairs(x, reject_default(function(k) {
        return /^\d+$/.test(k);
      }, keys_default(x)))).join(", ") + "]";
    case "[object Boolean]":
      return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
    case "[object Date]":
      return "new Date(" + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString_default(x))) + ")";
    case "[object Map]":
      return "new Map(" + recur(Array.from(x)) + ")";
    case "[object Null]":
      return "null";
    case "[object Number]":
      return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === -1 / 0 ? "-0" : x.toString(10);
    case "[object Set]":
      return "new Set(" + recur(Array.from(x).sort()) + ")";
    case "[object String]":
      return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
    case "[object Undefined]":
      return "undefined";
    default:
      if (typeof x.toString === "function") {
        var repr = x.toString();
        if (repr !== "[object Object]")
          return repr;
      }
      return "{" + mapPairs(x, keys_default(x)).join(", ") + "}";
  }
}

// node_modules/ramda/es/toString.js
var toString2 = /* @__PURE__ */ _curry1(function toString3(val) {
  return _toString(val, []);
}), toString_default = toString2;

// node_modules/ramda/es/internal/_xmap.js
var XMap = /* @__PURE__ */ function() {
  function XMap2(f, xf) {
    this.xf = xf, this.f = f;
  }
  return XMap2.prototype["@@transducer/init"] = _xfBase_default.init, XMap2.prototype["@@transducer/result"] = _xfBase_default.result, XMap2.prototype["@@transducer/step"] = function(result, input) {
    return this.xf["@@transducer/step"](result, this.f(input));
  }, XMap2;
}(), _xmap = function _xmap2(f) {
  return function(xf) {
    return new XMap(f, xf);
  };
}, _xmap_default = _xmap;

// node_modules/ramda/es/map.js
var map = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/map", "map"], _xmap_default, function map2(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case "[object Function]":
      return curryN_default(functor.length, function() {
        return fn.call(this, functor.apply(this, arguments));
      });
    case "[object Object]":
      return _arrayReduce(function(acc, key) {
        return acc[key] = fn(functor[key]), acc;
      }, {}, keys_default(functor));
    default:
      return _map(fn, functor);
  }
})), map_default = map;

// node_modules/ramda/es/internal/_isInteger.js
var _isInteger_default = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};

// node_modules/ramda/es/internal/_isString.js
function _isString(x) {
  return Object.prototype.toString.call(x) === "[object String]";
}

// node_modules/ramda/es/internal/_isArrayLike.js
var _isArrayLike = /* @__PURE__ */ _curry1(function isArrayLike(x) {
  if (_isArray_default(x))
    return !0;
  if (!x)
    return !1;
  if (typeof x !== "object")
    return !1;
  if (_isString(x))
    return !1;
  if (x.length === 0)
    return !0;
  if (x.length > 0)
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  return !1;
}), _isArrayLike_default = _isArrayLike;

// node_modules/ramda/es/internal/_createReduce.js
var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
function _createReduce(arrayReduce, methodReduce, iterableReduce) {
  return function _reduce(xf, acc, list) {
    if (_isArrayLike_default(list))
      return arrayReduce(xf, acc, list);
    if (list == null)
      return acc;
    if (typeof list["fantasy-land/reduce"] === "function")
      return methodReduce(xf, acc, list, "fantasy-land/reduce");
    if (list[symIterator] != null)
      return iterableReduce(xf, acc, list[symIterator]());
    if (typeof list.next === "function")
      return iterableReduce(xf, acc, list);
    if (typeof list.reduce === "function")
      return methodReduce(xf, acc, list, "reduce");
    throw new TypeError("reduce: list must be array or iterable");
  };
}

// node_modules/ramda/es/internal/_xArrayReduce.js
function _xArrayReduce(xf, acc, list) {
  var idx = 0, len = list.length;
  while (idx < len) {
    if (acc = xf["@@transducer/step"](acc, list[idx]), acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    idx += 1;
  }
  return xf["@@transducer/result"](acc);
}

// node_modules/ramda/es/bind.js
var bind = /* @__PURE__ */ _curry2(function bind2(fn, thisObj) {
  return _arity(fn.length, function() {
    return fn.apply(thisObj, arguments);
  });
}), bind_default = bind;

// node_modules/ramda/es/internal/_xReduce.js
function _xIterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    if (acc = xf["@@transducer/step"](acc, step.value), acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    step = iter.next();
  }
  return xf["@@transducer/result"](acc);
}
function _xMethodReduce(xf, acc, obj, methodName) {
  return xf["@@transducer/result"](obj[methodName](bind_default(xf["@@transducer/step"], xf), acc));
}
var _xReduce = /* @__PURE__ */ _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce), _xReduce_default = _xReduce;

// node_modules/ramda/es/internal/_xwrap.js
var XWrap = /* @__PURE__ */ function() {
  function XWrap2(fn) {
    this.f = fn;
  }
  return XWrap2.prototype["@@transducer/init"] = function() {
    throw new Error("init not implemented on XWrap");
  }, XWrap2.prototype["@@transducer/result"] = function(acc) {
    return acc;
  }, XWrap2.prototype["@@transducer/step"] = function(acc, x) {
    return this.f(acc, x);
  }, XWrap2;
}();
function _xwrap(fn) {
  return new XWrap(fn);
}

// node_modules/ramda/es/reduce.js
var reduce = /* @__PURE__ */ _curry3(function(xf, acc, list) {
  return _xReduce_default(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
}), reduce_default = reduce;

// node_modules/ramda/es/always.js
var always = /* @__PURE__ */ _curry1(function always2(val) {
  return function() {
    return val;
  };
}), always_default = always;
// node_modules/ramda/es/internal/_reduce.js
function _iterableReduce(reducer, acc, iter) {
  var step = iter.next();
  while (!step.done)
    acc = reducer(acc, step.value), step = iter.next();
  return acc;
}
function _methodReduce(reducer, acc, obj, methodName) {
  return obj[methodName](reducer, acc);
}
var _reduce = /* @__PURE__ */ _createReduce(_arrayReduce, _methodReduce, _iterableReduce), _reduce_default = _reduce;

// node_modules/ramda/es/ap.js
var ap = /* @__PURE__ */ _curry2(function ap2(applyF, applyX) {
  return typeof applyX["fantasy-land/ap"] === "function" ? applyX["fantasy-land/ap"](applyF) : typeof applyF.ap === "function" ? applyF.ap(applyX) : typeof applyF === "function" ? function(x) {
    return applyF(x)(applyX(x));
  } : _reduce_default(function(acc, f) {
    return _concat(acc, map_default(f, applyX));
  }, [], applyF);
}), ap_default = ap;

// node_modules/ramda/es/internal/_assoc.js
function _assoc(prop, val, obj) {
  if (_isInteger_default(prop) && _isArray_default(obj)) {
    var arr = [].concat(obj);
    return arr[prop] = val, arr;
  }
  var result = {};
  for (var p in obj)
    result[p] = obj[p];
  return result[prop] = val, result;
}

// node_modules/ramda/es/isNil.js
var isNil = /* @__PURE__ */ _curry1(function isNil2(x) {
  return x == null;
}), isNil_default = isNil;

// node_modules/ramda/es/assocPath.js
var assocPath = /* @__PURE__ */ _curry3(function assocPath2(path, val, obj) {
  if (path.length === 0)
    return val;
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = !isNil_default(obj) && _has(idx, obj) && typeof obj[idx] === "object" ? obj[idx] : _isInteger_default(path[1]) ? [] : {};
    val = assocPath2(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  return _assoc(idx, val, obj);
}), assocPath_default = assocPath;

// node_modules/ramda/es/assoc.js
var assoc = /* @__PURE__ */ _curry3(function assoc2(prop, val, obj) {
  return assocPath_default([prop], val, obj);
}), assoc_default = assoc;
// node_modules/ramda/es/internal/_isFunction.js
function _isFunction(x) {
  var type3 = Object.prototype.toString.call(x);
  return type3 === "[object Function]" || type3 === "[object AsyncFunction]" || type3 === "[object GeneratorFunction]" || type3 === "[object AsyncGeneratorFunction]";
}

// node_modules/ramda/es/liftN.js
var liftN = /* @__PURE__ */ _curry2(function liftN2(arity, fn) {
  var lifted = curryN_default(arity, fn);
  return curryN_default(arity, function() {
    return _arrayReduce(ap_default, map_default(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
}), liftN_default = liftN;

// node_modules/ramda/es/lift.js
var lift = /* @__PURE__ */ _curry1(function lift2(fn) {
  return liftN_default(fn.length, fn);
}), lift_default = lift;

// node_modules/ramda/es/internal/_makeFlat.js
function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j, result = [], idx = 0, ilen = list.length;
    while (idx < ilen) {
      if (_isArrayLike_default(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx], j = 0, jlen = value.length;
        while (j < jlen)
          result[result.length] = value[j], j += 1;
      } else
        result[result.length] = list[idx];
      idx += 1;
    }
    return result;
  };
}

// node_modules/ramda/es/internal/_pipe.js
function _pipe(f, g) {
  return function() {
    return g.call(this, f.apply(this, arguments));
  };
}

// node_modules/ramda/es/internal/_checkForMethod.js
function _checkForMethod(methodname, fn) {
  return function() {
    var length = arguments.length;
    if (length === 0)
      return fn();
    var obj = arguments[length - 1];
    return _isArray_default(obj) || typeof obj[methodname] !== "function" ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}

// node_modules/ramda/es/slice.js
var slice = /* @__PURE__ */ _curry3(/* @__PURE__ */ _checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
})), slice_default = slice;

// node_modules/ramda/es/tail.js
var tail = /* @__PURE__ */ _curry1(/* @__PURE__ */ _checkForMethod("tail", /* @__PURE__ */ slice_default(1, 1 / 0))), tail_default = tail;

// node_modules/ramda/es/pipe.js
function pipe() {
  if (arguments.length === 0)
    throw new Error("pipe requires at least one argument");
  return _arity(arguments[0].length, reduce_default(_pipe, arguments[0], tail_default(arguments)));
}

// node_modules/ramda/es/concat.js
var concat = /* @__PURE__ */ _curry2(function concat2(a, b) {
  if (_isArray_default(a)) {
    if (_isArray_default(b))
      return a.concat(b);
    throw new TypeError(toString_default(b) + " is not an array");
  }
  if (_isString(a)) {
    if (_isString(b))
      return a + b;
    throw new TypeError(toString_default(b) + " is not a string");
  }
  if (a != null && _isFunction(a["fantasy-land/concat"]))
    return a["fantasy-land/concat"](b);
  if (a != null && _isFunction(a.concat))
    return a.concat(b);
  throw new TypeError(toString_default(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
}), concat_default = concat;
// node_modules/ramda/es/remove.js
var remove = /* @__PURE__ */ _curry3(function remove2(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  return result.splice(start, count), result;
}), remove_default = remove;

// node_modules/ramda/es/internal/_dissoc.js
function _dissoc(prop, obj) {
  if (obj == null)
    return obj;
  if (_isInteger_default(prop) && _isArray_default(obj))
    return remove_default(prop, 1, obj);
  var result = {};
  for (var p in obj)
    result[p] = obj[p];
  return delete result[prop], result;
}

// node_modules/ramda/es/dissocPath.js
function _shallowCloneObject(prop, obj) {
  if (_isInteger_default(prop) && _isArray_default(obj))
    return [].concat(obj);
  var result = {};
  for (var p in obj)
    result[p] = obj[p];
  return result;
}
var dissocPath = /* @__PURE__ */ _curry2(function dissocPath2(path, obj) {
  if (obj == null)
    return obj;
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return _dissoc(path[0], obj);
    default:
      var head = path[0], tail2 = Array.prototype.slice.call(path, 1);
      if (obj[head] == null)
        return _shallowCloneObject(head, obj);
      else
        return assoc_default(head, dissocPath2(tail2, obj[head]), obj);
  }
}), dissocPath_default = dissocPath;

// node_modules/ramda/es/dissoc.js
var dissoc = /* @__PURE__ */ _curry2(function dissoc2(prop, obj) {
  return dissocPath_default([prop], obj);
}), dissoc_default = dissoc;
// node_modules/ramda/es/flatten.js
var flatten = /* @__PURE__ */ _curry1(/* @__PURE__ */ _makeFlat(!0)), flatten_default = flatten;
// node_modules/ramda/es/fromPairs.js
var fromPairs = /* @__PURE__ */ _curry1(function fromPairs2(pairs) {
  var result = {}, idx = 0;
  while (idx < pairs.length)
    result[pairs[idx][0]] = pairs[idx][1], idx += 1;
  return result;
}), fromPairs_default = fromPairs;
// node_modules/ramda/es/ifElse.js
var ifElse = /* @__PURE__ */ _curry3(function ifElse2(condition, onTrue, onFalse) {
  return curryN_default(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
}), ifElse_default = ifElse;
// node_modules/ramda/es/internal/_isNumber.js
function _isNumber(x) {
  return Object.prototype.toString.call(x) === "[object Number]";
}
// node_modules/ramda/es/sum.js
var sum = /* @__PURE__ */ reduce_default(add_default, 0), sum_default = sum;
// node_modules/ramda/es/range.js
var range = /* @__PURE__ */ _curry2(function range2(from, to) {
  if (!(_isNumber(from) && _isNumber(to)))
    throw new TypeError("Both arguments to range must be numbers");
  var result = Array(from < to ? to - from : 0), finish = from < 0 ? to + Math.abs(from) : to - from, idx = 0;
  while (idx < finish)
    result[idx] = idx + from, idx += 1;
  return result;
}), range_default = range;
// node_modules/ramda/es/times.js
var times = /* @__PURE__ */ _curry2(function times2(fn, n) {
  var len = Number(n);
  if (len < 0 || isNaN(len))
    throw new RangeError("n must be a non-negative number");
  var idx = 0, list = Array(len);
  while (idx < len)
    list[idx] = fn(idx), idx += 1;
  return list;
}), times_default = times;

// node_modules/ramda/es/repeat.js
var repeat = /* @__PURE__ */ _curry2(function repeat2(value, n) {
  return times_default(always_default(value), n);
}), repeat_default = repeat;
// node_modules/ramda/es/toPairs.js
var toPairs = /* @__PURE__ */ _curry1(function toPairs2(obj) {
  var pairs = [];
  for (var prop in obj)
    if (_has(prop, obj))
      pairs[pairs.length] = [prop, obj[prop]];
  return pairs;
}), toPairs_default = toPairs;
// node_modules/ramda/es/zipObj.js
var zipObj = /* @__PURE__ */ _curry2(function zipObj2(keys4, values) {
  var idx = 0, len = Math.min(keys4.length, values.length), out = {};
  while (idx < len)
    out[keys4[idx]] = values[idx], idx += 1;
  return out;
}), zipObj_default = zipObj;
// src/game/define/BaSyou.ts
var BaSyouKeywordFn = {
  isBa(k) {
    switch (k) {
      case "\u6226\u95D8\u30A8\u30EA\u30A22":
      case "\u6226\u95D8\u30A8\u30EA\u30A21":
      case "\u914D\u5099\u30A8\u30EA\u30A2":
        return !0;
      default:
        return !1;
    }
  },
  getAll() {
    return ["\u672C\u56FD", "\u6368\u3066\u5C71", "G\u30BE\u30FC\u30F3", "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9", "\u624B\u672D", "\u30CF\u30F3\u30AC\u30FC", "\u53D6\u308A\u9664\u304B\u308C\u305F\u30AB\u30FC\u30C9", "\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22", "\u914D\u5099\u30A8\u30EA\u30A2"];
  },
  getBaAll() {
    return BaSyouKeywordFn.getAll().filter(BaSyouKeywordFn.isBa);
  },
  getTextOn() {
    return BaSyouKeywordFn.getAll().filter((kw) => ["\u672C\u56FD", "\u53D6\u308A\u9664\u304B\u308C\u305F\u30AB\u30FC\u30C9", "\u6368\u3066\u5C71"].includes(kw) == !1);
  },
  getBattleArea() {
    return ["\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22"];
  }
}, AbsoluteBaSyouFn = {
  toString(baSyou) {
    return JSON.stringify(baSyou.value);
  },
  fromString(id) {
    return {
      id: "AbsoluteBaSyou",
      value: JSON.parse(id)
    };
  },
  of(p, k) {
    return {
      id: "AbsoluteBaSyou",
      value: [p, k]
    };
  },
  getBaSyouKeyword(baSyou) {
    return baSyou.value[1];
  },
  setBaSyouKeyword(baSyou, kw) {
    return AbsoluteBaSyouFn.of(baSyou.value[0], kw);
  },
  setPlayerID(baSyou, p) {
    return AbsoluteBaSyouFn.of(p, baSyou.value[1]);
  },
  getPlayerID(baSyou) {
    return baSyou.value[0];
  },
  setOpponentPlayerID(baSyou) {
    return AbsoluteBaSyouFn.of(PlayerIDFn.getOpponent(baSyou.value[0]), baSyou.value[1]);
  },
  getAll() {
    return lift_default(AbsoluteBaSyouFn.of)(PlayerIDFn.getAll(), BaSyouKeywordFn.getAll());
  },
  getBaAll() {
    return lift_default(AbsoluteBaSyouFn.of)(PlayerIDFn.getAll(), BaSyouKeywordFn.getBaAll());
  },
  getTextOn() {
    return lift_default(AbsoluteBaSyouFn.of)(PlayerIDFn.getAll(), BaSyouKeywordFn.getTextOn());
  },
  getBattleArea() {
    return lift_default(AbsoluteBaSyouFn.of)(PlayerIDFn.getAll(), BaSyouKeywordFn.getBattleArea());
  },
  eq(left, right) {
    return AbsoluteBaSyouFn.toString(left) == AbsoluteBaSyouFn.toString(right);
  }
}, RelatedBaSyouFn = {
  of(side, kw) {
    return {
      id: "RelatedBaSyou",
      value: [side, kw]
    };
  }
};

// src/game/gameState/EffectStackComponent.ts
var exports_EffectStackComponent = {};
__export(exports_EffectStackComponent, {
  setCommandEffects: () => setCommandEffects,
  setCommandEffectTips: () => setCommandEffectTips,
  removeEffect: () => removeEffect,
  isStackEffect: () => isStackEffect,
  isImmediateEffect: () => isImmediateEffect,
  getTopEffect: () => getTopEffect,
  getStackEffects: () => getStackEffects,
  getImmediateEffects: () => getImmediateEffects,
  getEffects: () => getEffects,
  getEffect: () => getEffect,
  getCutInDestroyEffects: () => getCutInDestroyEffects,
  getCommandEffecTips: () => getCommandEffecTips,
  clearDestroyEffects: () => clearDestroyEffects,
  addStackEffect: () => addStackEffect,
  addImmediateEffect: () => addImmediateEffect,
  addDestroyEffect: () => addDestroyEffect
});

// node_modules/uuid/dist/esm-browser/stringify.js
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
var byteToHex = [];
for (i = 0;i < 256; ++i)
  byteToHex.push((i + 256).toString(16).slice(1));
var i;

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues, rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !getRandomValues)
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/v7.js
function v7(options, buf, offset) {
  options = options || {};
  var i = buf && offset || 0, b = buf || new Uint8Array(16), rnds = options.random || (options.rng || rng)(), msecs = options.msecs !== void 0 ? options.msecs : Date.now(), seq = options.seq !== void 0 ? options.seq : null, seqHigh = _seqHigh, seqLow = _seqLow;
  if (msecs > _msecs && options.msecs === void 0) {
    if (_msecs = msecs, seq !== null)
      seqHigh = null, seqLow = null;
  }
  if (seq !== null) {
    if (seq > 2147483647)
      seq = 2147483647;
    seqHigh = seq >>> 19 & 4095, seqLow = seq & 524287;
  }
  if (seqHigh === null || seqLow === null)
    seqHigh = rnds[6] & 127, seqHigh = seqHigh << 8 | rnds[7], seqLow = rnds[8] & 63, seqLow = seqLow << 8 | rnds[9], seqLow = seqLow << 5 | rnds[10] >>> 3;
  if (msecs + 1e4 > _msecs && seq === null) {
    if (++seqLow > 524287) {
      if (seqLow = 0, ++seqHigh > 4095)
        seqHigh = 0, _msecs++;
    }
  } else
    _msecs = msecs;
  return _seqHigh = seqHigh, _seqLow = seqLow, b[i++] = _msecs / 1099511627776 & 255, b[i++] = _msecs / 4294967296 & 255, b[i++] = _msecs / 16777216 & 255, b[i++] = _msecs / 65536 & 255, b[i++] = _msecs / 256 & 255, b[i++] = _msecs & 255, b[i++] = seqHigh >>> 4 & 15 | 112, b[i++] = seqHigh & 255, b[i++] = seqLow >>> 13 & 63 | 128, b[i++] = seqLow >>> 5 & 255, b[i++] = seqLow << 3 & 255 | rnds[10] & 7, b[i++] = rnds[11], b[i++] = rnds[12], b[i++] = rnds[13], b[i++] = rnds[14], b[i++] = rnds[15], buf || unsafeStringify(b);
}
var _seqLow = null, _seqHigh = null, _msecs = 0, v7_default = v7;
// src/game/tool/index.ts
var ToolFn = {
  getUUID(prefix = "") {
    return prefix + "_" + v7_default();
  }
};

// src/game/gameState/EffectStackComponent.ts
function isStackEffect(ctx2, id) {
  return ctx2.stackEffect.includes(id);
}
function isImmediateEffect(ctx2, id) {
  return ctx2.immediateEffect.includes(id);
}
function getTopEffect(ctx2) {
  if (ctx2.stackEffect.length === 0)
    return null;
  return getEffect(ctx2, ctx2.stackEffect[0]);
}
function getEffect(ctx2, id) {
  if (ctx2.effects[id] == null)
    throw new Error(`effect not found: ${id}`);
  return ctx2.effects[id];
}
function getEffects(ctx2) {
  return ctx2.effects;
}
function removeEffect(ctx2, id) {
  return {
    ...ctx2,
    effects: dissoc_default(id, ctx2.effects),
    stackEffect: ctx2.stackEffect.filter((_id) => _id != id),
    immediateEffect: ctx2.immediateEffect.filter((_id) => _id != id),
    destroyEffect: ctx2.destroyEffect.filter((_id) => _id != id)
  };
}
function addStackEffect(ctx2, block) {
  if (block.id == "")
    block.id = ToolFn.getUUID("addStackEffect");
  if (block.text.id == "")
    block.text.id = ToolFn.getUUID("addStackEffect");
  return {
    ...ctx2,
    stackEffect: [block.id, ...ctx2.stackEffect],
    effects: assoc_default(block.id, block, ctx2.effects)
  };
}
function addImmediateEffect(ctx2, block) {
  if (block.id == "")
    block.id = ToolFn.getUUID("addImmediateEffect");
  if (block.text.id == "")
    block.text.id = ToolFn.getUUID("addImmediateEffect");
  return ctx2 = EventCenterFn.onAddImmediateEffect(ctx2, block), {
    ...ctx2,
    immediateEffect: [block.id, ...ctx2.immediateEffect],
    effects: assoc_default(block.id, block, ctx2.effects)
  };
}
function getStackEffects(ctx2) {
  return ctx2.stackEffect.map((id) => getEffect(ctx2, id));
}
function getImmediateEffects(ctx2) {
  return ctx2.immediateEffect.map((id) => getEffect(ctx2, id));
}
function addDestroyEffect(ctx2, block) {
  if (ctx2.effects[block.id])
    return console.warn(`\u7834\u58DE\u6548\u679C\u4E0D\u5FC5\u91CD\u5FA9\u52A0\u5165: ${block.id}`), ctx2;
  return {
    ...ctx2,
    destroyEffect: [block.id, ...ctx2.destroyEffect],
    effects: {
      ...ctx2.effects,
      [block.id]: block
    }
  };
}
function clearDestroyEffects(ctx2) {
  const effects = { ...ctx2.effects };
  for (let k of ctx2.destroyEffect)
    delete effects[k];
  return {
    ...ctx2,
    destroyEffect: [],
    effects
  };
}
function getCutInDestroyEffects(ctx2) {
  return Object.keys(getEffects(ctx2)).filter((id) => isStackEffect(ctx2, id)).map((id) => getEffect(ctx2, id)).filter((e) => e.reason[0] == "Destroy");
}
function setCommandEffects(ctx2, addeds) {
  const effects = { ...ctx2.effects };
  for (let k of ctx2.commandEffects)
    delete effects[k];
  for (let added of addeds)
    effects[added.id] = added;
  return {
    ...ctx2,
    commandEffects: addeds.map((e) => e.id),
    effects
  };
}
function setCommandEffectTips(ctx2, effects) {
  return {
    ...ctx2,
    commandEffectTips: effects
  };
}
function getCommandEffecTips(ctx2) {
  return ctx2.commandEffectTips;
}

// src/game/gameState/IsBattleComponent.ts
var exports_IsBattleComponent = {};
__export(exports_IsBattleComponent, {
  isBattle: () => isBattle,
  checkIsBattle: () => checkIsBattle
});

// src/game/gameState/GameState.ts
var exports_GameState = {};
__export(exports_GameState, {
  createGameState: () => createGameState
});

// src/game/gameState/SetGroupComponent.ts
var exports_SetGroupComponent = {};
__export(exports_SetGroupComponent, {
  setSetGroupParent: () => setSetGroupParent,
  removeSetGroupParent: () => removeSetGroupParent,
  getSetGroupRoot: () => getSetGroupRoot,
  getSetGroupChildren: () => getSetGroupChildren,
  getSetGroup: () => getSetGroup,
  createSetGroupComponent: () => createSetGroupComponent
});

// src/tool/ItemGroup.ts
function identity() {
  return {
    itemGroupParent: {},
    itemGroupChildren: {}
  };
}
function createItemGroup() {
  return {
    itemGroupParent: {},
    itemGroupChildren: {}
  };
}
function deleteItemGroupParent(ctx2, id) {
  const parent = ctx2.itemGroupParent[id];
  if (!parent)
    return ctx2;
  const itemGroupParent = { ...ctx2.itemGroupParent };
  return delete itemGroupParent[id], {
    ...ctx2,
    itemGroupParent,
    itemGroupChildren: {
      ...ctx2.itemGroupChildren,
      [parent]: ctx2.itemGroupChildren[parent].filter((child) => child !== id)
    }
  };
}
function assertCircleRef(ctx2, id) {
  let visited = [];
  function checkCircle(currentId) {
    if (visited.includes(currentId))
      throw new Error("Circular reference detected");
    visited.push(currentId);
    const parent = ctx2.itemGroupParent[currentId];
    if (parent)
      checkCircle(parent);
  }
  checkCircle(id);
}
function setItemGroupParent(ctx2, id, parent) {
  const updatedCtx = deleteItemGroupParent(ctx2, id);
  return ctx2 = {
    ...updatedCtx,
    itemGroupParent: { ...updatedCtx.itemGroupParent, [id]: parent },
    itemGroupChildren: {
      ...updatedCtx.itemGroupChildren,
      [parent]: [...updatedCtx.itemGroupChildren[parent] || [], id]
    }
  }, assertCircleRef(ctx2, id), ctx2;
}
function getItemGroupParent(ctx2, id) {
  return ctx2.itemGroupParent[id];
}
function getItemGroupParentRoot(ctx2, id) {
  let currentId = id;
  while (!0) {
    const parent = getItemGroupParent(ctx2, currentId);
    if (!parent)
      return currentId;
    currentId = parent;
  }
}
function getItemGroup(ctx2, id) {
  const children = ctx2.itemGroupChildren[id] || [];
  return [id, ...children.flatMap((child) => getItemGroup(ctx2, child))];
}
function getItemGroupFromRoot(ctx2, id) {
  return getItemGroup(ctx2, getItemGroupParentRoot(ctx2, id));
}
function deleteItemGroup(ctx2, id) {
  const willDeleteIds = getItemGroup(ctx2, id);
  ctx2 = deleteItemGroupParent(ctx2, id);
  const updatedParent = { ...ctx2.itemGroupParent }, updatedChildren = { ...ctx2.itemGroupChildren };
  return willDeleteIds.forEach((willDeleteId) => {
    delete updatedParent[willDeleteId], delete updatedChildren[willDeleteId];
  }), {
    ...ctx2,
    itemGroupParent: updatedParent,
    itemGroupChildren: updatedChildren
  };
}
var ItemGroupFn = {
  identity,
  createItemGroup,
  setItemGroupParent,
  getItemGroupParent,
  getItemGroupParentRoot,
  getItemGroup,
  getItemGroupFromRoot,
  deleteItemGroup
};

// src/game/gameState/SetGroupComponent.ts
function createSetGroupComponent() {
  return {
    setGroup: ItemGroupFn.createItemGroup()
  };
}
function getSetGroup(ctx2, itemId) {
  return ItemGroupFn.getItemGroupFromRoot(ctx2.setGroup, itemId);
}
function getSetGroupChildren(ctx2, itemId) {
  return ItemGroupFn.getItemGroup(ctx2.setGroup, itemId);
}
function getSetGroupRoot(ctx2, cardID) {
  return ItemGroupFn.getItemGroupParentRoot(ctx2.setGroup, cardID);
}
function setSetGroupParent(ctx2, parentCardId, cardId) {
  return ctx2 = {
    ...ctx2,
    setGroup: ItemGroupFn.setItemGroupParent(ctx2.setGroup, cardId, parentCardId)
  }, ctx2 = EventCenterFn.onSetSetGroupParent(ctx2, parentCardId, cardId), ctx2;
}
function removeSetGroupParent(ctx2, cardId) {
  return ctx2 = {
    ...ctx2,
    setGroup: ItemGroupFn.deleteItemGroup(ctx2.setGroup, cardId)
  }, ctx2;
}

// src/game/gameState/GameState.ts
function createGameState() {
  return {
    isGameState: !0,
    cards: {},
    effects: {},
    table: DEFAULT_TABLE,
    chips: {},
    chipProtos: {},
    itemStates: {},
    phase: PhaseFn.getAll()[0],
    playerStates: {},
    activePlayerID: null,
    immediateEffect: [],
    stackEffect: [],
    destroyEffect: [],
    commandEffects: [],
    commandEffectTips: [],
    isBattle: {},
    coins: {},
    coinId2cardId: {},
    globalEffectPool: {},
    messageTopId: 0,
    messages: [],
    messagesCurrentEffect: null,
    messagesIsPlayerRead: {},
    turn: 0,
    ...createSetGroupComponent()
  };
}

// src/game/gameState/ItemTableComponent.ts
var exports_ItemTableComponent = {};
__export(exports_ItemTableComponent, {
  shuffleItems: () => shuffleItems,
  isCoin: () => isCoin,
  isChip: () => isChip,
  isCardLike: () => isCardLike,
  isCard: () => isCard,
  getItemPrototype: () => getItemPrototype,
  getItemOwner: () => getItemOwner,
  getItemIdsByPlayerId: () => getItemIdsByPlayerId,
  getItemIdsByBasyou: () => getItemIdsByBasyou,
  getItemIds: () => getItemIds,
  getItemController: () => getItemController,
  getItemBaSyou: () => getItemBaSyou,
  getItem: () => getItem,
  getCardLikeItemIds: () => getCardLikeItemIds,
  getAbsoluteBaSyouFromBaSyou: () => getAbsoluteBaSyouFromBaSyou,
  createStrBaSyouPair: () => createStrBaSyouPair,
  assertTargetMissingError: () => assertTargetMissingError,
  addCoinsToCard: () => addCoinsToCard
});

// src/game/gameState/CardTableComponent.ts
var exports_CardTableComponent = {};
__export(exports_CardTableComponent, {
  setCard: () => setCard,
  mapCardsWithBasyou: () => mapCardsWithBasyou,
  mapCard: () => mapCard,
  getCards: () => getCards,
  getCardOwner: () => getCardOwner,
  getCardIds: () => getCardIds,
  getCard: () => getCard,
  createCardWithProtoIds: () => createCardWithProtoIds,
  addCards: () => addCards
});
function getCard(ctx2, cardId) {
  if (ctx2.cards[cardId] == null)
    throw new Error(`card not found: ${cardId}`);
  return ctx2.cards[cardId];
}
function setCard(ctx2, id, card) {
  const oldCard = getCard(ctx2, id);
  return ctx2 = {
    ...ctx2,
    cards: {
      ...ctx2.cards,
      [id]: card
    }
  }, ctx2 = EventCenterFn.onCardChange(ctx2, oldCard, getCard(ctx2, id)), ctx2;
}
function mapCard(ctx2, id, f) {
  return setCard(ctx2, id, f(getCard(ctx2, id)));
}
function getCardIds(ctx2) {
  return Object.keys(ctx2.cards);
}
function getCards(ctx2) {
  return Object.values(ctx2.cards);
}
function mapCardsWithBasyou(ctx2, f) {
  return toPairs_default(ctx2.table.cardStack).map(([k, cardIds]) => {
    const basyou = AbsoluteBaSyouFn.fromString(k), cards = cardIds.map((cardId) => getCard(ctx2, cardId));
    return [basyou, cards];
  }).reduce((ctx3, [basyou, cards]) => {
    return cards.map((card) => f(basyou, card)).reduce((ctx4, card) => setCard(ctx4, card.id, card), ctx3);
  }, ctx2);
}
function createCardWithProtoIds(ctx2, basyou, cardProtoIds) {
  const cardLen = Object.keys(ctx2.cards).length;
  return ctx2 = addCards(ctx2, basyou, cardProtoIds.map((protoId, i) => {
    const ownerID = AbsoluteBaSyouFn.getPlayerID(basyou);
    return {
      id: `${ownerID}_${cardLen + i}`,
      protoID: protoId,
      ownerID
    };
  })), ctx2;
}
function addCards(ctx2, basyou, addedCards) {
  const old = ctx2.table;
  return ctx2 = addedCards.reduce((ctx3, newCard) => {
    const ownerID = AbsoluteBaSyouFn.getPlayerID(basyou);
    if (newCard.id == "") {
      const cardLen = Object.keys(ctx3.cards).length, cardId = `${ownerID}_${cardLen}`;
      newCard.id = cardId;
    }
    if (newCard.ownerID == null)
      newCard.ownerID = ownerID;
    const table = TableFns.addCard(ctx3.table, AbsoluteBaSyouFn.toString(basyou), newCard.id);
    return {
      ...ctx3,
      table,
      cards: {
        ...ctx3.cards,
        [newCard.id]: newCard
      }
    };
  }, ctx2), ctx2 = EventCenterFn.onTableChange(ctx2, old, ctx2.table), ctx2;
}
function getCardOwner(ctx2, cardID) {
  const card = getCard(ctx2, cardID);
  if (card == null)
    throw new Error("[getCardOwner] card not found");
  if (card.ownerID == null)
    throw new Error("[getCardOwner] card.ownerID not found");
  return card.ownerID;
}

// src/game/gameState/CoinTableComponent.ts
var exports_CoinTableComponent = {};
__export(exports_CoinTableComponent, {
  removeCoinIds: () => removeCoinIds,
  getCoins: () => getCoins,
  getCoinOwner: () => getCoinOwner,
  getCoinIdsByCardId: () => getCoinIdsByCardId,
  getCoinIds: () => getCoinIds,
  getCoin: () => getCoin,
  getCardIdByCoinId: () => getCardIdByCoinId,
  addCoins: () => addCoins
});
function getCoin(ctx2, id) {
  if (ctx2.coins[id] == null)
    throw new Error("card not found");
  return ctx2.coins[id];
}
function getCoinIds(ctx2) {
  return Object.keys(ctx2.coins);
}
function getCoins(ctx2) {
  return Object.values(ctx2.coins);
}
function addCoins(ctx2, cardId, added) {
  return {
    ...ctx2,
    coins: {
      ...ctx2.coins,
      ...fromPairs_default(added.map((v) => [v.id, v]))
    },
    coinId2cardId: {
      ...ctx2.coinId2cardId,
      ...fromPairs_default(added.map((v) => [v.id, cardId]))
    }
  };
}
function getCardIdByCoinId(ctx2, id) {
  if (ctx2.coinId2cardId[id] == null)
    throw new Error(`coin cardId not found: ${id}`);
  return ctx2.coinId2cardId[id];
}
function getCoinIdsByCardId(ctx2, cardId) {
  return Object.keys(ctx2.coinId2cardId).filter((coinId) => ctx2.coinId2cardId[coinId] == cardId);
}
function removeCoinIds(ctx2, ids) {
  const coinId2cardId = { ...ctx2.coinId2cardId }, coins = { ...ctx2.coins };
  for (let id of ids)
    delete coinId2cardId[id], delete coins[id];
  return {
    ...ctx2,
    coinId2cardId,
    coins
  };
}
function getCoinOwner(ctx2, id) {
  const item = getCoin(ctx2, id);
  if (item.ownerID == null)
    throw new Error("[getChipOwner] Coin.ownerID not found");
  return item.ownerID;
}

// src/game/gameState/ChipTableComponent.ts
function getChip(ctx2, chipId) {
  if (ctx2.chips[chipId] == null)
    throw new Error("Chip not found");
  return ctx2.chips[chipId];
}
function setChip(ctx2, id, card) {
  return {
    ...ctx2,
    chips: {
      ...ctx2.chips,
      [id]: card
    }
  };
}
function getChipIds(ctx2) {
  return Object.keys(ctx2.chips);
}
function getChipPrototype(ctx2, k) {
  if (ctx2.chipProtos[k] == null)
    throw new Error(`chipProto not found: ${k}`);
  return ctx2.chipProtos[k];
}
function getChipOwner(ctx2, chipId) {
  const Chip = getChip(ctx2, chipId);
  if (Chip == null)
    throw new Error("[getChipOwner] Chip not found");
  if (Chip.ownerID == null)
    throw new Error("[getChipOwner] Chip.ownerID not found");
  return Chip.ownerID;
}

// src/game/define/GameError.ts
var exports_GameError = {};
__export(exports_GameError, {
  testGameError: () => testGameError,
  TipError: () => TipError,
  TargetMissingError: () => TargetMissingError,
  GameError: () => GameError
});
function testGameError() {
  if (new TipError("") instanceof TargetMissingError != !1)
    throw new Error;
  if (new TargetMissingError("") instanceof TipError != !0)
    throw new Error;
}

class GameError extends Error {
  info;
  constructor(message, info) {
    super(message);
    this.name = "GameError", this.info = info || {};
  }
}

class TipError extends GameError {
  constructor(message, info) {
    super(message, info);
    this.name = "TipError";
  }
}

class TargetMissingError extends TipError {
  constructor(message, info) {
    super(message, info);
    this.name = "TargetMissingError";
  }
}

// src/game/define/CardPrototype.ts
var exports_CardPrototype = {};
__export(exports_CardPrototype, {
  CardColorFn: () => CardColorFn,
  CardCategoryFn: () => CardCategoryFn
});
var CardCategoryFn = {
  createAll() {
    return [
      "\u30E6\u30CB\u30C3\u30C8",
      "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC",
      "\u30B3\u30DE\u30F3\u30C9",
      "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3",
      "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)",
      "ACE",
      "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF"
    ];
  },
  createRemaining(values) {
    return CardCategoryFn.createAll().filter((category) => !values.includes(category));
  }
}, CardColorFn = {
  getAll() {
    return ["\u7DD1", "\u8336", "\u9752", "\u767D", "\u7D2B", "\u9ED2", "\u8D64"];
  }
};

// src/game/define/CardText.ts
var exports_CardText = {};
__export(exports_CardText, {
  getOnSituationFn: () => getOnSituationFn,
  createRollCostRequire: () => createRollCostRequire,
  TextSpeicalEffectFn: () => TextSpeicalEffectFn,
  LogicTreeActionFn: () => LogicTreeActionFn,
  ConditionFn: () => ConditionFn,
  CardTextFn: () => CardTextFn,
  ActionFn: () => ActionFn
});

// src/tool/logicTree.ts
function or(tree) {
  return tree.type === "Or";
}
function and(tree) {
  return tree.type === "And";
}
function leaf(tree) {
  return tree.type === "Leaf";
}
function children(tree) {
  return tree.children || [];
}
function crossProduct(a, b) {
  return a.flatMap((x) => b.map((y) => [].concat(x, y)));
}
function enumerateAll(tree) {
  if (!tree)
    return [];
  if (or(tree))
    return children(tree).flatMap(enumerateAll);
  if (and(tree))
    return children(tree).map(enumerateAll).reduce(crossProduct, [[]]);
  if (leaf(tree))
    return [[tree.value]];
  throw new Error(`Unknown tree structure ${tree}`);
}
function has(tree, keys4) {
  return enumerateAll(tree).some((set) => keys4.length === set.length && keys4.every((key) => set.includes(key)));
}
function testEnumerateAll() {
  const tree1 = {
    type: "And",
    children: [
      { type: "Leaf", value: "action-1" },
      { type: "Leaf", value: "action-2" },
      {
        type: "Or",
        children: [
          { type: "Leaf", value: "action-3" },
          { type: "Leaf", value: "action-4" },
          {
            type: "Or",
            children: [
              { type: "Leaf", value: "5" },
              { type: "Leaf", value: "6" }
            ]
          }
        ]
      },
      {
        type: "And",
        children: [
          { type: "Leaf", value: "action-7" },
          { type: "Leaf", value: "action-8" }
        ]
      },
      {
        type: "And",
        children: [
          {
            type: "Or",
            children: [
              { type: "Leaf", value: "action-9" },
              { type: "Leaf", value: "action-10" }
            ]
          },
          { type: "Leaf", value: "action-11" }
        ]
      }
    ]
  }, tree2 = {
    type: "And",
    children: [
      { type: "Leaf", value: "5" },
      { type: "Leaf", value: "6" },
      {
        type: "Or",
        children: [
          { type: "Leaf", value: "1" },
          {
            type: "Or",
            children: [
              { type: "Leaf", value: "2" },
              { type: "Leaf", value: "3" }
            ]
          }
        ]
      }
    ]
  }, tree3 = {
    type: "And",
    children: [
      { type: "Leaf", value: "5" },
      { type: "Leaf", value: "6" },
      {
        type: "Or",
        children: [
          { type: "Leaf", value: "1" },
          {
            type: "Or",
            children: [
              { type: "Leaf", value: "2" },
              { type: "Leaf", value: "3" }
            ]
          }
        ]
      },
      {
        type: "Or",
        children: [
          { type: "Leaf", value: "7" },
          {
            type: "And",
            children: [
              { type: "Leaf", value: "8" },
              { type: "Leaf", value: "9" }
            ]
          }
        ]
      }
    ]
  }, result1 = [
    [
      "action-1",
      "action-2",
      "action-3",
      "action-7",
      "action-8",
      "action-9",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "action-3",
      "action-7",
      "action-8",
      "action-10",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "action-4",
      "action-7",
      "action-8",
      "action-9",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "action-4",
      "action-7",
      "action-8",
      "action-10",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "5",
      "action-7",
      "action-8",
      "action-9",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "5",
      "action-7",
      "action-8",
      "action-10",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "6",
      "action-7",
      "action-8",
      "action-9",
      "action-11"
    ],
    [
      "action-1",
      "action-2",
      "6",
      "action-7",
      "action-8",
      "action-10",
      "action-11"
    ]
  ], result2 = [["5", "6", "1"], ["5", "6", "2"], ["5", "6", "3"]], result3 = [
    ["5", "6", "1", "7"],
    ["5", "6", "1", "8", "9"],
    ["5", "6", "2", "7"],
    ["5", "6", "2", "8", "9"],
    ["5", "6", "3", "7"],
    ["5", "6", "3", "8", "9"]
  ], assertEqual = (expected, actual) => {
    if (JSON.stringify(expected) !== JSON.stringify(actual))
      throw new Error(`Expected ${JSON.stringify(expected)} but got ${JSON.stringify(actual)}`);
  };
  assertEqual(result1, enumerateAll(tree1)), assertEqual(result2, enumerateAll(tree2)), assertEqual(result3, enumerateAll(tree3));
}
function tests() {
  testEnumerateAll();
}
var LogicTreeFn = {
  or,
  and,
  leaf,
  children,
  crossProduct,
  enumerateAll,
  has,
  tests
};

// src/game/define/Tip.ts
var exports_Tip = {};
__export(exports_Tip, {
  TipFn: () => TipFn
});
var TipFn = {
  createTotalCostKey: () => "\u5408\u8A08\u56FD\u529B\u3014x\u3015",
  createRollColorKey(i, color) {
    return `\u6A6B\u7F6E\u652F\u4ED8${i}[${color}]`;
  },
  createConditionKeyOfPayColorX(proto) {
    if (proto.color == null)
      throw new Error;
    return `${proto.color}X`;
  },
  createGoEarthKey: () => "\u53BB\u5730\u7403",
  createGoSpaceKey: () => "\u53BB\u5B87\u5B99",
  getWant(tip) {
    switch (tip.title[0]) {
      case "\u30AB\u30FC\u30C9":
      case "\u30C6\u30AD\u30B9\u30C8":
      case "StringOptions":
      case "BattleBonus":
      case "GlobalEffects":
      case "BaSyou":
        return tip.title[1];
    }
  },
  getSelection(tip) {
    switch (tip.title[0]) {
      case "\u30AB\u30FC\u30C9":
      case "\u30C6\u30AD\u30B9\u30C8":
      case "StringOptions":
      case "BattleBonus":
      case "GlobalEffects":
      case "BaSyou":
        return tip.title[2];
    }
  },
  passWantToSelection(tip) {
    switch (tip.title[0]) {
      case "\u30AB\u30FC\u30C9":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
      case "\u30C6\u30AD\u30B9\u30C8":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
      case "StringOptions":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
      case "BattleBonus":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
      case "GlobalEffects":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
      case "BaSyou":
        return {
          ...tip,
          title: [tip.title[0], tip.title[1], tip.title[1]]
        };
    }
  },
  checkTipSatisfies(tip) {
    const selection = this.getSelection(tip);
    if (tip.count != null && tip.count != selection.length)
      return new TipError(`count ${selection.length} not right: ${tip.title[0]}/${tip.count}`);
    if (tip.min != null && selection.length < tip.min)
      return new TipError(`min ${selection.length} not right: ${tip.title[0]}/${tip.min}`);
    if (tip.max != null && selection.length > tip.max)
      return new TipError(`max ${selection.length} not right: ${tip.title[0]}/${tip.max}`);
    return null;
  }
};

// src/game/define/CardText.ts
function getCondition(ctx2, conditionId) {
  if (ctx2.conditions?.[conditionId] == null)
    throw console.log(ctx2.conditions), new Error(`condition not found: ${conditionId}`);
  return ctx2.conditions[conditionId];
}
function getOnSituationFn(ctx) {
  if (ctx.onSituation == null)
    return function(ctx2) {
      return [];
    };
  return eval(ctx.onSituation + ";_");
}
function createRollCostRequire(costNum, color) {
  let ret = {};
  for (let i = 0;i < costNum; ++i) {
    const key = TipFn.createRollColorKey(i, color);
    ret = {
      ...ret,
      [key]: {
        title: ["RollColor", color],
        actions: [
          {
            title: ["_\u30ED\u30FC\u30EB\u3059\u308B", "\u30ED\u30FC\u30EB"],
            vars: [key]
          }
        ],
        groupKey: "\u652F\u4ED8\u6A6B\u7F6E\u570B\u529B"
      }
    };
  }
  return ret;
}
var TextSpeicalEffectFn = {
  isSameKeyword(left, right) {
    return left[0] == right[0];
  }
}, ActionFn = {
  getTitleFn(ctx) {
    if (typeof ctx.title != "string")
      throw new Error("action.title must be string");
    try {
      return eval(ctx.title + ";_");
    } catch (e) {
      throw console.log(`\u539F\u5B57\u4E32:[${ctx.title}]`), e;
    }
  }
}, ConditionFn = {
  getTitleFn(ctx) {
    if (ctx.title == null)
      return () => {
        return null;
      };
    if (typeof ctx.title != "string")
      throw new Error("condition.title must be string");
    try {
      return eval(ctx.title + ";_");
    } catch (e) {
      throw console.log(`\u539F\u5B57\u4E32:[${ctx.title}]`), e;
    }
  },
  getActions(ctx2) {
    if (ctx2.actions == null)
      return [];
    return ctx2.actions;
  },
  getActionTitleFns(ctx2, genActionFn) {
    if (ctx2.actions == null)
      return [];
    return ctx2.actions.map(genActionFn);
  }
}, LogicTreeActionFn = {
  getActions(ctx2) {
    if (ctx2.actions == null)
      return [];
    return ctx2.actions;
  },
  getActionTitleFns(ctx2, genActionFn) {
    if (ctx2.actions == null)
      return [];
    return ctx2.actions.map(genActionFn);
  }
}, CardTextFn = {
  getCondition,
  getLogicTreeAction(ctx2, id) {
    if (ctx2.logicTreeActions?.[id] == null)
      throw new Error(`logic not found: ${id}`);
    return ctx2.logicTreeActions[id];
  },
  getLogicTreeTreeLeafs(ctx2, logicTreeCommand) {
    if (logicTreeCommand.logicTree == null)
      return Object.keys(ctx2.conditions || {}).map((k) => {
        return {
          type: "Leaf",
          value: k
        };
      });
    return [logicTreeCommand.logicTree];
  },
  getLogicTreeActionConditions(ctx2, logicTreeCommand) {
    if (logicTreeCommand.logicTree == null) {
      const conditionIds = Object.keys(ctx2.conditions || {}), conditions = conditionIds.map((conditionId) => getCondition(ctx2, conditionId));
      return [zipObj_default(conditionIds, conditions)];
    }
    const conditionIdsList = LogicTreeFn.enumerateAll(logicTreeCommand.logicTree);
    return logCategory("getLogicTreeActionConditions", "text.id", ctx2.id), logCategory("getLogicTreeActionConditions", "logicTree", logicTreeCommand.logicTree, conditionIdsList), logCategory("getLogicTreeActionConditions", "text.conditions", ctx2.conditions), conditionIdsList.map((conditionIds) => {
      const conditions = conditionIds.map((conditionId) => getCondition(ctx2, conditionId));
      return zipObj_default(conditionIds, conditions);
    });
  },
  getOnEventFn(ctx) {
    if (ctx.onEvent == null)
      return function(a) {
        return a;
      };
    if (typeof ctx.onEvent != "string")
      throw new Error("condition.title must be string");
    return eval(ctx.onEvent + ";_");
  }
};

// src/script/index.ts
async function importJson(path) {
  return (await import(path)).default;
}
async function importJs(path) {
  return await import(path);
}
async function loadPrototype(imgID) {
  if (_preloadPrototype[imgID])
    return _preloadPrototype[imgID];
  let proto = {
    id: imgID
  };
  if (imgID.split("_").length > 1) {
    const [prodid, ...parts] = imgID.split("_"), info_25 = parts.join("_"), data = (await importJson(`./data/${prodid}.json`)).data.find((d) => {
      return d.info_25 == info_25;
    });
    if (data) {
      const { id, info_2: title, info_3: categoryStr, info_4: totalCostLengthStr, info_5: colorCost, info_6: gsignProperty, info_7: bp1, info_8: bp2, info_9: bp3, info_10: area, info_11: characteristic } = data, textstr = data.info_12.substr(0, 60), description = data.info_15, prod = data.info_16, rarity = data.info_17, color = data.info_18, categoryMapping = {
        UNIT: "\u30E6\u30CB\u30C3\u30C8",
        CHARACTER: "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC",
        COMMAND: "\u30B3\u30DE\u30F3\u30C9",
        OPERATION: "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3",
        "OPERATION(UNIT)": "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)",
        "OPERATION\uFF08UNIT\uFF09": "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)",
        ACE: "ACE",
        GRAPHIC: "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF"
      }, texts = [], matches = textstr.matchAll(/([^：　［］（）〔〕]+)/g);
      let allSp = [], currSp = [];
      for (let match of matches) {
        const curr = match[0];
        if (curr.length >= 10)
          continue;
        if (["\u9AD8\u6A5F\u52D5", "\u901F\u653B", "\u5F37\u8972", "\u3010PS\u88C5\u7532\u3011", "\u30AF\u30A4\u30C3\u30AF", "\u6226\u95D8\u914D\u5099", "\u30B9\u30C6\u30A4", "1\u679A\u5236\u9650"].includes(curr)) {
          allSp.push(curr);
          continue;
        }
        if (currSp.length == 0) {
          const match2 = curr.match(/(.?)(０|１|２|３|４|５|６|７|８|９|R+)(毎?)/);
          if (match2) {
            const [_, colorstr, rollcoststr, every] = match2;
            currSp.push([colorstr, rollcoststr, every]);
            continue;
          }
        }
        if (currSp.length == 1) {
          if (["\u4F9B\u7D66", "\u30B2\u30A4\u30F3"].includes(curr))
            currSp.push(curr), allSp.push(currSp.slice()), currSp.length = 0;
          else if (["\u30B5\u30A4\u30B3\u30DF\u30E5", "\u7BC4\u56F2\u5175\u5668", "\u30B2\u30A4\u30F3", "\u6539\u88C5", "\u5171\u6709", "\u30AF\u30ED\u30B9\u30A6\u30A7\u30DD\u30F3"].includes(curr))
            currSp.push(curr);
          else
            currSp.shift();
          continue;
        }
        if (currSp.length == 2) {
          currSp.push(curr), allSp.push(currSp.slice()), currSp.length = 0;
          continue;
        }
      }
      if (currSp.length > 1)
        throw console.log(currSp), new Error;
      allSp.forEach((sp) => {
        if (typeof sp == "string") {
          switch (sp) {
            case "\u9AD8\u6A5F\u52D5":
            case "\u901F\u653B":
            case "\u5F37\u8972":
            case "\u3010PS\u88C5\u7532\u3011":
            case "\u30AF\u30A4\u30C3\u30AF":
            case "\u6226\u95D8\u914D\u5099":
            case "\u30B9\u30C6\u30A4":
            case "1\u679A\u5236\u9650":
              texts.push({ id: "", title: ["\u7279\u6B8A\u578B", [sp]], description: sp });
              break;
            default:
              throw new Error;
          }
          return;
        }
        if (Array.isArray(sp) && Array.isArray(sp[0])) {
          const [[colorstr, rollcoststr, every], titlestr, char] = sp, color2 = colorstr == "" ? null : colorstr;
          let conditions = {};
          if (rollcoststr == "R")
            conditions.R = {
              actions: [
                {
                  title: ["_\u30ED\u30FC\u30EB\u3059\u308B", "\u30ED\u30FC\u30EB"]
                }
              ]
            };
          else {
            const rollcost = "\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19".indexOf(rollcoststr);
            if (rollcost == -1)
              throw new Error;
            conditions = {
              ...conditions,
              ...createRollCostRequire(rollcost, color2)
            };
          }
          let title2 = null;
          switch (titlestr) {
            case "\u4F9B\u7D66":
            case "\u30B2\u30A4\u30F3": {
              title2 = ["\u7279\u6B8A\u578B", titlestr];
              break;
            }
            case "\u30B5\u30A4\u30B3\u30DF\u30E5":
            case "\u7BC4\u56F2\u5175\u5668": {
              const num = "\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19".indexOf(char);
              title2 = ["\u7279\u6B8A\u578B", [titlestr, num]];
              break;
            }
            case "\u30B2\u30A4\u30F3":
            case "\u6539\u88C5":
            case "\u5171\u6709":
            case "\u30AF\u30ED\u30B9\u30A6\u30A7\u30DD\u30F3":
              title2 = ["\u7279\u6B8A\u578B", [titlestr, char]];
              break;
          }
          if (title2 == null)
            throw new Error;
          const text = {
            id: "",
            title: title2,
            isEachTime: every == "\u6BCE",
            description: `\u3014${colorstr}${rollcoststr}${every}\u3015${titlestr}[${char}]`,
            conditions
          };
          texts.push(text);
          return;
        }
        throw new Error;
      });
      const category = categoryMapping[categoryStr];
      if (category == null)
        throw new Error(`unknown categoryStr: ${categoryStr}`);
      const originData = {
        originCardId: id,
        title,
        category,
        color,
        totalCost: totalCostLengthStr == "X" ? "X" : parseInt(totalCostLengthStr, 10),
        rollCost: parseColors(color, colorCost),
        battlePoint: [parseBp(bp1), parseBp(bp2), parseBp(bp3)],
        battleArea: parseArea(area),
        characteristic,
        description,
        isCross: title.indexOf("\uFF3B\u2020\uFF3D") != -1,
        rarity,
        gsign: [[color], gsignProperty],
        texts
      };
      proto = {
        ...proto,
        ...originData
      };
    } else
      console.log(`loadPrototype not found: ${imgID}`);
  }
  {
    const scriptProto = (await importJs(`./ext/${imgID}`).catch(() => {
      return console.log(`script/${imgID}.ts not found. use default`), { prototype: {} };
    })).prototype;
    proto = {
      ...proto,
      ...scriptProto,
      texts: [
        ...scriptProto.texts || [],
        ...proto.texts || []
      ]
    };
  }
  if (proto.texts) {
    for (let i in proto.texts) {
      const text = proto.texts[i];
      if (text.id == "")
        text.id = `loadPrototype_${proto.id}_text_${i}`;
    }
    if (proto.commandText && proto.commandText.id == "")
      proto.commandText.id = `${proto.id}_text_command`;
  }
  return _preloadPrototype[imgID] = proto, proto;
}
function getPrototype(imgId) {
  if (_preloadPrototype[imgId] == null)
    throw new Error(`imgId not found: ${imgId}`);
  return _preloadPrototype[imgId];
}
function getImgSrc(imgID) {
  return `https://storage.googleapis.com/particle-resources/cardPackage/gundamWarN/${imgID}.jpg`;
}
function parseColors(color, colorCostLength) {
  if (colorCostLength == "X")
    return "X";
  if (colorCostLength == "-")
    return [];
  const onlyNum = parseInt(colorCostLength, 10);
  if (isNaN(onlyNum) == !1)
    return repeat_default(color, onlyNum);
  const parsedColors = colorCostLength.split(/(\d+)/).filter(Boolean).map((part, index) => {
    if (index % 2 === 0)
      return part;
    else
      return parseInt(part, 10);
  });
  if (parsedColors.length % 2 == 0) {
    const pairs = [];
    for (let i = 0;i < parsedColors.length; i += 2)
      pairs.push([parsedColors[i], parsedColors[i + 1]]);
    const ret = [];
    for (let [str, num] of pairs)
      if (num == 1)
        ret.push(str);
      else if (num > 1)
        ret.push(...repeat_default(str, num));
  }
  if (CardColorFn.getAll().includes(color))
    return [color];
  throw new Error(`parseColors ${color} ${colorCostLength}`);
}
function parseBp(bp) {
  if (bp == "-")
    return "*";
  const ret = parseInt(bp, 10);
  if (Number.isNaN(ret))
    throw new Error(`parseBp error: ${bp}`);
  return ret;
}
function parseArea(a) {
  if (a == "\u5B87\u3001\u5730")
    return ["\u5730\u7403\u30A8\u30EA\u30A2", "\u5B87\u5B99\u30A8\u30EA\u30A2"];
  if (a == "\u5B87")
    return ["\u5B87\u5B99\u30A8\u30EA\u30A2"];
  if (a == "\u5730")
    return ["\u5730\u7403\u30A8\u30EA\u30A2"];
  return [];
}
var _preloadPrototype = {};

// src/game/gameState/ItemTableComponent.ts
function isCard(ctx2, id) {
  return getCardIds(ctx2).includes(id);
}
function isChip(ctx2, id) {
  return getChipIds(ctx2).includes(id);
}
function isCoin(ctx2, id) {
  return getCoinIds(ctx2).includes(id);
}
function isCardLike(ctx2) {
  return (itemId) => {
    return isCard(ctx2, itemId) || isChip(ctx2, itemId);
  };
}
function addCoinsToCard(ctx2, target, coins) {
  assertTargetMissingError(ctx2, target);
  const [targetItemId, targetOriginBasyou] = target;
  if (isCard(ctx2, targetItemId))
    return ctx2 = addCoins(ctx2, targetItemId, coins), ctx2;
  throw new Error(`addCoinsToCard unknown item: ${targetItemId}`);
}
function shuffleItems(ctx2, basyou) {
  const oldTable = ctx2.table;
  return ctx2 = {
    ...ctx2,
    table: TableFns.shuffleCards(ctx2.table, AbsoluteBaSyouFn.toString(basyou))
  }, ctx2 = EventCenterFn.onTableChange(ctx2, oldTable, ctx2.table), ctx2;
}
function getItem(ctx2, id) {
  if (isCard(ctx2, id))
    return getCard(ctx2, id);
  if (isChip(ctx2, id))
    return getChip(ctx2, id);
  if (isCoin(ctx2, id))
    return getCoin(ctx2, id);
  throw new Error(`item id not found in itemTable: ${id}`);
}
function getItemIds(ctx2) {
  return [
    ...Object.keys(ctx2.cards),
    ...Object.keys(ctx2.chips),
    ...Object.keys(ctx2.coins)
  ];
}
function getCardLikeItemIds(ctx2) {
  return [
    ...Object.keys(ctx2.cards),
    ...Object.keys(ctx2.chips)
  ];
}
function getItemIdsByPlayerId(ctx2, isBa, playerId) {
  return (isBa ? lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getBaAll()) : lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getTextOn())).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou));
}
function getItemIdsByBasyou(ctx2, basyou) {
  return TableFns.getCardsByPosition(ctx2.table, AbsoluteBaSyouFn.toString(basyou));
}
function getItemController(ctx2, id) {
  if (isCard(ctx2, id) || isChip(ctx2, id))
    return getItemBaSyou(ctx2, id).value[0];
  if (isCoin(ctx2, id))
    return getItemBaSyou(ctx2, getCardIdByCoinId(ctx2, id)).value[0];
  throw new Error(`getItemController unknown item: ${id}`);
}
function getItemOwner(ctx2, id) {
  if (isCard(ctx2, id))
    return getCardOwner(ctx2, id);
  if (isChip(ctx2, id))
    return getChipOwner(ctx2, id);
  if (isCoin(ctx2, id))
    return getCoinOwner(ctx2, id);
  throw new Error(`getItemOwner unknown item: ${id}`);
}
function getItemBaSyou(ctx2, id) {
  if (isCard(ctx2, id) || isChip(ctx2, id)) {
    const cardPosition = TableFns.getCardPosition(ctx2.table, id);
    if (cardPosition == null)
      throw new Error("[getController] cardPosition not found");
    return AbsoluteBaSyouFn.fromString(cardPosition);
  }
  if (isCoin(ctx2, id))
    throw new Error("coin no basyou");
  throw new Error(`getItemBaSyou unknown item: ${id}`);
}
function createStrBaSyouPair(ctx2, id) {
  return [id, getItemBaSyou(ctx2, id)];
}
function getItemPrototype(ctx2, itemId) {
  if (isCard(ctx2, itemId))
    return getPrototype(getCard(ctx2, itemId).protoID || "unknown");
  if (isChip(ctx2, itemId))
    return getChipPrototype(ctx2, getChip(ctx2, itemId).protoID || "unknown");
  if (isCoin(ctx2, itemId))
    throw new Error(`coin no prototype: ${itemId}`);
  throw new Error(`getItemPrototype unknown item: ${itemId}`);
}
function getAbsoluteBaSyouFromBaSyou(ctx2, itemId, baSyou) {
  if (baSyou.id == "AbsoluteBaSyou")
    return baSyou;
  const _playerID = (() => {
    switch (baSyou.value[0]) {
      case "\u6301\u3061\u4E3B":
        return getItemOwner(ctx2, itemId);
      case "\u81EA\u8ECD":
        return getItemController(ctx2, itemId);
      case "\u6575\u8ECD":
        return PlayerIDFn.getOpponent(getItemController(ctx2, itemId));
    }
  })();
  return AbsoluteBaSyouFn.of(_playerID, baSyou.value[1]);
}
function assertTargetMissingError(ctx2, [itemId, originBasyou]) {
  if (isCard(ctx2, itemId) || isChip(ctx2, itemId)) {
    const nowBasyou = getItemBaSyou(ctx2, itemId);
    if (AbsoluteBaSyouFn.eq(nowBasyou, originBasyou) == !1)
      throw new TargetMissingError(`assertTargetMissingError: ${itemId} from ${AbsoluteBaSyouFn.toString(originBasyou)} now ${AbsoluteBaSyouFn.toString(nowBasyou)}`);
  } else if (isCoin(ctx2, itemId))
    throw new Error("coin not support");
  else
    throw new Error(`unknown cardId type ${itemId}`);
}

// src/game/gameState/IsBattleComponent.ts
function checkIsBattle(ctx2) {
  return [
    AbsoluteBaSyouFn.of(PlayerA, "\u6226\u95D8\u30A8\u30EA\u30A21"),
    AbsoluteBaSyouFn.of(PlayerA, "\u6226\u95D8\u30A8\u30EA\u30A22")
  ].reduce((ctx3, battleArea) => {
    const baSyouID1 = AbsoluteBaSyouFn.toString(battleArea), baSyouID2 = AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.setOpponentPlayerID(battleArea));
    if (ctx3.table.cardStack[baSyouID1]?.length && ctx3.table.cardStack[baSyouID2]?.length)
      return {
        ...ctx3,
        isBattle: {
          ...ctx3.isBattle,
          [baSyouID1]: !0,
          [baSyouID2]: !0
        }
      };
    return {
      ...ctx3,
      isBattle: {
        ...ctx3.isBattle,
        [baSyouID1]: !1,
        [baSyouID2]: !1
      }
    };
  }, ctx2);
}
function isBattle(ctx2, cardID, cardID2) {
  const baSyou1 = getItemBaSyou(ctx2, cardID);
  if (ctx2.isBattle[AbsoluteBaSyouFn.toString(baSyou1)] != !0)
    return !1;
  if (cardID2 != null) {
    const baSyou2 = AbsoluteBaSyouFn.setOpponentPlayerID(baSyou1);
    if (ctx2.table.cardStack[AbsoluteBaSyouFn.toString(baSyou2)].find((cardId) => {
      return cardId == cardID2;
    }) != null == !1)
      return !1;
  }
  return !0;
}

// src/game/define/Effect.ts
var exports_Effect = {};
__export(exports_Effect, {
  EffectFn: () => EffectFn
});
var EffectFn = {
  isFakeCardID(string) {
    return string.startsWith("SystemFakeCardID_");
  },
  getCardID(ctx2) {
    switch (ctx2.reason[0]) {
      case "GameRule":
        return `SystemFakeCardID_${ctx2.text.id}`;
      case "PlayText":
      case "PlayCard":
      case "\u5834\u306B\u51FA\u308B":
      case "Destroy":
      case "Situation":
      case "Event":
        return ctx2.reason[2];
    }
  },
  getPlayerID(ctx2) {
    switch (ctx2.reason[0]) {
      case "GameRule":
        if (ctx2.reason[1] == null)
          throw new Error(`this GameRule not playerID: ${ctx2.id} ${ctx2.description}`);
        return ctx2.reason[1];
      case "PlayText":
      case "\u5834\u306B\u51FA\u308B":
      case "PlayCard":
      case "Destroy":
      case "Situation":
      case "Event":
        return ctx2.reason[1];
    }
  },
  getSituation(ctx2) {
    switch (ctx2.reason[0]) {
      case "Situation":
        return ctx2.reason[3];
      default:
        throw new Error(`${ctx2.reason[0]} no Situation`);
    }
  },
  getDestroyReason(ctx2) {
    switch (ctx2.reason[0]) {
      case "Destroy":
        return ctx2.reason[3];
      default:
        throw new Error(`${ctx2.reason[0]} no DestroyReason`);
    }
  },
  getEvent(ctx2) {
    switch (ctx2.reason[0]) {
      case "Event":
        return ctx2.reason[3];
      default:
        throw new Error(`${ctx2.reason[0]} no Event`);
    }
  },
  fromEffectBasic(e, options) {
    return {
      id: "",
      reason: options?.reason || e.reason,
      description: e.description,
      isOption: options?.isOption,
      text: {
        id: e.text.id,
        title: e.text.title,
        description: e.text.description,
        conditions: options?.conditions || void 0,
        logicTreeActions: options?.logicTreeAction ? [options.logicTreeAction] : [
          {
            actions: []
          }
        ]
      }
    };
  }
};

// src/game/gameState/doEffect.ts
var exports_doEffect = {};
__export(exports_doEffect, {
  setTipSelectionForUser: () => setTipSelectionForUser,
  setEffectTips: () => setEffectTips,
  setCardTipTextRefs: () => setCardTipTextRefs,
  setCardTipStrBaSyouPairs: () => setCardTipStrBaSyouPairs,
  getCardTipTextRefs: () => getCardTipTextRefs,
  getCardTipStrings: () => getCardTipStrings,
  getCardTipStrBaSyouPairs: () => getCardTipStrBaSyouPairs,
  getCardTipSelection: () => getCardTipSelection,
  getCardTipBattleBonus: () => getCardTipBattleBonus,
  doEffect: () => doEffect,
  createPlayTextEffectFromEffect: () => createPlayTextEffectFromEffect,
  createEffectTips: () => createEffectTips,
  createCommandEffectTips: () => createCommandEffectTips,
  clearTipSelectionForUser: () => clearTipSelectionForUser,
  assertTipForUserSelection: () => assertTipForUserSelection,
  assertEffectCanPass: () => assertEffectCanPass,
  addImmediateEffectIfCanPayCost: () => addImmediateEffectIfCanPayCost
});

// src/game/gameState/ItemStateComponent.ts
var exports_ItemStateComponent = {};
__export(exports_ItemStateComponent, {
  setItemState: () => setItemState,
  mapItemStateValues: () => mapItemStateValues,
  mapItemState: () => mapItemState,
  getItemStateValues: () => getItemStateValues,
  getItemState: () => getItemState
});

// src/game/define/ItemState.ts
var exports_ItemState = {};
__export(exports_ItemState, {
  ItemStateFn: () => ItemStateFn
});
function clearTip(ctx2, key) {
  return ctx2 = {
    ...ctx2,
    tips: dissoc_default(key, ctx2.tips)
  }, ctx2;
}
var ItemStateFn = {
  identity() {
    return {
      id: "",
      damage: 0,
      destroyReason: null,
      flags: {},
      tips: {},
      globalEffects: {},
      varNamesRemoveOnTurnEnd: {}
    };
  },
  setFlag(ctx2, name, v, options) {
    if (ctx2 = {
      ...ctx2,
      flags: assoc_default(name, v, ctx2.flags)
    }, options?.isRemoveOnTurnEnd)
      ctx2 = {
        ...ctx2,
        varNamesRemoveOnTurnEnd: assoc_default(name, !0, ctx2.varNamesRemoveOnTurnEnd)
      };
    return ctx2;
  },
  removeFlag(ctx2, k) {
    return {
      ...ctx2,
      flags: dissoc_default(k, ctx2.flags)
    };
  },
  getTip(ctx2, k) {
    if (ctx2.tips[k] == null)
      throw new TipError(`cardId: ${ctx2.id} target not set yet: ${k}`);
    return ctx2.tips[k];
  },
  hasTip(ctx2, k) {
    return ctx2.tips[k] != null;
  },
  setTip(ctx2, k, tip) {
    return ctx2 = {
      ...ctx2,
      tips: assoc_default(k, tip, ctx2.tips)
    }, ctx2;
  },
  clearTip,
  damage(ctx2, v) {
    return {
      ...ctx2,
      damage: ctx2.damage + v
    };
  },
  setMoreTotalRollCostLengthPlay(ctx2, x) {
    return ctx2 = ItemStateFn.setFlag(ctx2, "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4", x), ctx2 = {
      ...ctx2,
      varNamesRemoveOnTurnEnd: assoc_default("\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4", !0, ctx2.varNamesRemoveOnTurnEnd)
    }, ctx2;
  },
  getMoreTotalRollCostLengthPlay(ctx2) {
    return ctx2.flags["\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4"] || 0;
  },
  getGlobalEffects(ctx2) {
    return Object.values(ctx2.globalEffects);
  },
  setGlobalEffect(ctx2, name, ge, options) {
    if (name == null)
      name = ToolFn.getUUID("setGlobalEffect");
    if (ctx2 = {
      ...ctx2,
      globalEffects: assoc_default(name, ge, ctx2.globalEffects)
    }, options?.isRemoveOnTurnEnd)
      ctx2 = {
        ...ctx2,
        varNamesRemoveOnTurnEnd: assoc_default(name, !0, ctx2.varNamesRemoveOnTurnEnd)
      };
    return ctx2;
  },
  onCutEnd(ctx2) {
    return ctx2;
  },
  onDamageReset(ctx2) {
    return {
      ...ctx2,
      damage: 0
    };
  },
  onTurnEnd(ctx2) {
    for (let varName in ctx2.varNamesRemoveOnTurnEnd)
      ctx2 = {
        ...ctx2,
        flags: dissoc_default(varName, ctx2.flags),
        globalEffects: dissoc_default(varName, ctx2.globalEffects)
      };
    return ctx2 = {
      ...ctx2,
      varNamesRemoveOnTurnEnd: {},
      isOpenForGain: !1,
      isCheat: !1,
      isFirstTurn: !1,
      textIdsUseThisTurn: []
    }, ctx2;
  }
};

// src/game/gameState/ItemStateComponent.ts
function getItemState(ctx2, cardID) {
  return ctx2.itemStates[cardID] || { ...ItemStateFn.identity(), id: cardID };
}
function setItemState(ctx2, cardID, cardState) {
  const old = getItemState(ctx2, cardID);
  return ctx2 = { ...ctx2, itemStates: assoc_default(cardID, cardState, ctx2.itemStates) }, ctx2 = EventCenterFn.onItemStateChange(ctx2, old, getItemState(ctx2, cardID)), ctx2;
}
function getItemStateValues(ctx2) {
  return Object.values(ctx2.itemStates);
}
function mapItemStateValues(ctx2, fn) {
  for (let k in ctx2.itemStates)
    ctx2 = mapItemState(ctx2, k, fn);
  return ctx2;
}
function mapItemState(ctx2, k, fn) {
  const old = getItemState(ctx2, k), curr = fn(old);
  return ctx2 = setItemState(ctx2, k, curr), ctx2;
}

// src/game/gameState/card.ts
var exports_card = {};
__export(exports_card, {
  isCardMaster: () => isCardMaster,
  isCardCanReroll: () => isCardCanReroll,
  getItemRuntimeCategory: () => getItemRuntimeCategory,
  getItemIsCanRoll: () => getItemIsCanRoll,
  getItemIsCanReroll: () => getItemIsCanReroll,
  getItemCharacteristic: () => getItemCharacteristic,
  getCardTotalCostLength: () => getCardTotalCostLength,
  getCardTitle: () => getCardTitle,
  getCardTexts: () => getCardTexts,
  getCardTextFromCardTextRef: () => getCardTextFromCardTextRef,
  getCardSpecialText: () => getCardSpecialText,
  getCardRollCostLength: () => getCardRollCostLength,
  getCardIdsCanPayRollCost: () => getCardIdsCanPayRollCost,
  getCardIdsCanPayRollColor: () => getCardIdsCanPayRollColor,
  getCardHasSpeicalEffect: () => getCardHasSpeicalEffect,
  getCardGSignProperty: () => getCardGSignProperty,
  getCardGSign: () => getCardGSign,
  getCardColor: () => getCardColor,
  getCardBattlePoint: () => getCardBattlePoint,
  getCardBattleArea: () => getCardBattleArea
});

// src/game/define/BattlePoint.ts
var exports_BattlePoint = {};
__export(exports_BattlePoint, {
  BattlePointFn: () => BattlePointFn
});
function getValue(v) {
  if (v == "*")
    return 0;
  return v;
}
function add3([x, y, z], [x2, y2, z2]) {
  return [
    Math.max(0, getValue(x) + getValue(x2)),
    Math.max(0, getValue(y) + getValue(y2)),
    Math.max(0, getValue(z) + getValue(z2))
  ];
}
var BattlePointFn = {
  getAllStar: () => ["*", "*", "*"],
  add: add3,
  getValue,
  toBattleBonus(v) {
    return [getValue(v[0]), getValue(v[1]), getValue(v[2])];
  },
  eq(l, r) {
    return JSON.stringify(l) == JSON.stringify(r);
  }
};

// src/game/gameState/globalEffects.ts
var exports_globalEffects = {};
__export(exports_globalEffects, {
  setGlobalEffects: () => setGlobalEffects,
  getGlobalEffects: () => getGlobalEffects,
  createAllCardTexts: () => createAllCardTexts,
  clearGlobalEffects: () => clearGlobalEffects
});

// src/game/gameState/createTextsFromSpecialEffect.ts
function createTextsFromSpecialEffect(ctx2, text) {
  if (text.title[0] != "\u7279\u6B8A\u578B")
    throw new Error("text not \u7279\u6B8A\u578B");
  const specialEffect = text.title[1];
  switch (specialEffect[0]) {
    case "\u3010PS\u88C5\u7532\u3011":
      return [
        {
          id: text.id,
          title: ["\u81EA\u52D5\u578B", "\u8D77\u52D5"],
          description: "\u51FA\u5834\u6642\u76F4\u7ACB\u51FA\u5834"
        },
        {
          id: text.id,
          title: ["\u81EA\u52D5\u578B", "\u8D77\u52D5"],
          description: "\u9019\u5F35\u5361\u51FA\u73FE\u5728\u6230\u5340\u6642, \u4E0B\u56DE\u5408\u958B\u59CB\u6642\u56DE\u5230\u6301\u6709\u8005\u624B\u4E0A. \u4F46\u5982\u679C\u548C\u6301\u6709\u88DC\u7D66\u6216\u4F9B\u7D66\u7684\u5361\u7D44\u5408\u90E8\u968A\u7684\u6642\u5019, \u4E0A\u8FF0\u7684\u6548\u679C\u4E0D\u767C\u52D5.",
          onEvent: function _(ctx3, effect, { GameStateFn, DefineFn }) {
            const cardId = DefineFn.EffectFn.getCardID(effect), evt = DefineFn.EffectFn.getEvent(effect);
            if (evt.title[0] == "GameEventOnMove" && (DefineFn.AbsoluteBaSyouFn.getBaSyouKeyword(evt.title[2]) == "\u6226\u95D8\u30A8\u30EA\u30A21" || DefineFn.AbsoluteBaSyouFn.getBaSyouKeyword(evt.title[2]) == "\u6226\u95D8\u30A8\u30EA\u30A22")) {
              if (evt.cardIds?.includes(cardId))
                if (GameStateFn.isBattleGroupHasA(ctx3, ["\u4F9B\u7D66"], cardId))
                  ;
                else
                  ctx3 = GameStateFn.mapItemState(ctx3, cardId, (is) => DefineFn.ItemStateFn.setFlag(is, "return", !0));
              else if (DefineFn.AbsoluteBaSyouFn.eq(GameStateFn.getItemBaSyou(ctx3, cardId), evt.title[2])) {
                if (GameStateFn.isBattleGroupHasA(ctx3, ["\u4F9B\u7D66"], cardId))
                  ctx3 = GameStateFn.mapItemState(ctx3, cardId, (is) => DefineFn.ItemStateFn.removeFlag(is, "return"));
              }
            }
            if (evt.title[0] == "GameEventOnTiming" && DefineFn.PhaseFn.eq(evt.title[1], DefineFn.PhaseFn.getFirst())) {
              const cardId2 = DefineFn.EffectFn.getCardID(effect), cardController = GameStateFn.getItemController(ctx3, cardId2);
              if (GameStateFn.getItemState(ctx3, cardId2).flags.return)
                ctx3 = GameStateFn.doItemMove(ctx3, DefineFn.AbsoluteBaSyouFn.of(cardController, "\u624B\u672D"), [cardId2, GameStateFn.getItemBaSyou(ctx3, cardId2)]), ctx3 = GameStateFn.mapItemState(ctx3, cardId2, (is) => DefineFn.ItemStateFn.removeFlag(is, "return"));
            }
            return ctx3;
          }.toString()
        }
      ];
    case "\u30AF\u30ED\u30B9\u30A6\u30A7\u30DD\u30F3": {
      const [_, A] = specialEffect;
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"]],
          description: "\uFF08\u6226\u95D8\u30D5\u30A7\u30A4\u30BA\uFF09\uFF1A\uFF3B \uFF3D\u306E\u7279\u5FB4\u3092\u6301\u3064\u81EA\u8ECD\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u306F\u3001\u30BF\u30FC\u30F3\u7D42\u4E86\u6642\u307E\u3067\u3001\u3053\u306E\u30AB\u30FC\u30C9\u306E\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064\u3068\u540C\u3058\u30C6\u30AD\u30B9\u30C8\u3092\u5F97\u308B\u3002\u305F\u3060\u3057\u540C\u3058\u30C6\u30AD\u30B9\u30C8\u306F\u5F97\u3089\u308C\u306A\u3044\uFF09",
          conditions: {
            ...text.conditions,
            "\u3053\u306E\u30AB\u30FC\u30C9\u306E\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064": {
              title: ["\u3053\u306E\u30AB\u30FC\u30C9\u306E_\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064", !0, 1]
            },
            "\uFF3B \uFF3D\u306E\u7279\u5FB4\u3092\u6301\u3064\u81EA\u8ECD\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u306F": {
              title: ["_\u672C\u6765\u306E\u8A18\u8FF0\u306B\uFF62\u7279\u5FB4\uFF1A_\u88C5\u5F3E\uFF63\u3092\u6301\u3064_\u81EA\u8ECD_G_\uFF11\u679A", !1, A, "\u81EA\u8ECD", "\u30E6\u30CB\u30C3\u30C8", 1],
              exceptItemSelf: !0,
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const cardId = DefineFn.EffectFn.getCardID(effect), pairs = GameStateFn.getCardTipStrBaSyouPairs(ctx3, "\uFF3B \uFF3D\u306E\u7279\u5FB4\u3092\u6301\u3064\u81EA\u8ECD\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u306F", cardId), textRefIds = GameStateFn.getCardTipTextRefs(ctx3, "\u3053\u306E\u30AB\u30FC\u30C9\u306E\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064", cardId).map((tr) => tr.textId);
                    for (let pair2 of pairs)
                      if (GameStateFn.getCardTexts(ctx3, pair2[0]).find((text2) => textRefIds.includes(text2.id)))
                        throw new DefineFn.TipError(`\u5DF2\u6709\u540C\u6A23\u7684\u5167\u6587: ${JSON.stringify(textRefIds)}`, { hasSameText: !0 });
                    return ctx3;
                  }.toString()
                }
              ]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: ["cutIn", [
                    {
                      title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                        const cardId = DefineFn.EffectFn.getCardID(effect), pairs = GameStateFn.getCardTipStrBaSyouPairs(ctx3, "\uFF3B \uFF3D\u306E\u7279\u5FB4\u3092\u6301\u3064\u81EA\u8ECD\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u306F", cardId), textRefs = GameStateFn.getCardTipTextRefs(ctx3, "\u3053\u306E\u30AB\u30FC\u30C9\u306E\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064", cardId);
                        for (let pair2 of pairs) {
                          GameStateFn.assertTargetMissingError(ctx3, pair2);
                          const [targetCardId, targetBasyou] = pair2;
                          ctx3 = GameStateFn.mapItemState(ctx3, targetCardId, (targetItemState) => {
                            for (let textRef of textRefs) {
                              if (GameStateFn.getCardTexts(ctx3, targetItemState.id).find((text2) => text2.id == textRef.textId) != null)
                                continue;
                              targetItemState = DefineFn.ItemStateFn.setGlobalEffect(targetItemState, null, {
                                title: ["AddTextRef", textRef],
                                cardIds: [targetItemState.id]
                              }, { isRemoveOnTurnEnd: !0 });
                            }
                            return targetItemState;
                          });
                        }
                        return ctx3;
                      }.toString()
                    }
                  ]]
                }
              ]
            }
          ]
        }
      ];
    }
    case "\u30B2\u30A4\u30F3":
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"]],
          description: "\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408, \u6253\u958B\u81EA\u8ECD\u672C\u570B\u4E0A\u76841\u5F35\u5361\u548C\u9019\u5F35\u5361\u540CGsignProperty\u7684\u60C5\u6CC1, \u9019\u5F35\u5361\u56DE\u5408\u7D50\u675F\u524D+x/+x/+x, x\u70BA\u6253\u958B\u7684\u5361\u7684\u6A2A\u7F6E\u8CBB\u7528\u6578\u91CF, \u9019\u500B\u6548\u679C1\u56DE\u5408\u53EA\u80FD\u75281\u6B21",
          conditions: {
            ...text.conditions,
            "\u9019\u500B\u6548\u679C1\u56DE\u5408\u53EA\u80FD\u75281\u6B21": {
              actions: [
                {
                  title: ["\u3053\u306E\u8A18\u8FF0\u306E\u52B9\u679C\u306F\u3001\u30D7\u30EC\u30A4\u30E4\u30FC\u6BCE\u306B\uFF11\u30BF\u30FC\u30F3\u306B\uFF11\u56DE\u307E\u3067\u89E3\u6C7A\u3067\u304D\u308B"]
                }
              ]
            },
            "\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408": {
              actions: [
                {
                  title: ["Entity", {
                    isThisCard: !0,
                    at: ["\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22"],
                    count: 1
                  }]
                }
              ]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const newE = DefineFn.EffectFn.fromEffectBasic(effect, {
                      conditions: {
                        "\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408, \u6253\u958B\u81EA\u8ECD\u672C\u570B\u4E0A\u76841\u5F35\u5361": {
                          title: function _(ctx4, effect2, bridge) {
                            const { GameStateFn: GameStateFn2, DefineFn: DefineFn2 } = bridge, cardId = DefineFn2.EffectFn.getCardID(effect2), from = GameStateFn2.getItemBaSyou(ctx4, cardId);
                            if (DefineFn2.BaSyouKeywordFn.getBattleArea().includes(DefineFn2.AbsoluteBaSyouFn.getBaSyouKeyword(from)))
                              return GameStateFn2.createConditionTitleFn({
                                title: ["Entity", {
                                  see: [DefineFn2.RelatedBaSyouFn.of("\u81EA\u8ECD", "\u672C\u56FD"), 1, 1],
                                  count: 1
                                }],
                                actions: [
                                  {
                                    title: ["_\u30ED\u30FC\u30EB\u3059\u308B", "\u6253\u958B"],
                                    vars: ["\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408, \u6253\u958B\u81EA\u8ECD\u672C\u570B\u4E0A\u76841\u5F35\u5361"]
                                  }
                                ]
                              }, {})(ctx4, effect2, bridge);
                            return null;
                          }.toString()
                        }
                      },
                      logicTreeAction: {
                        actions: [
                          {
                            title: function _(ctx4, effect2, { GameStateFn: GameStateFn2, DefineFn: DefineFn2, ToolFn: ToolFn2 }) {
                              const cardId = DefineFn2.EffectFn.getCardID(effect2);
                              if (DefineFn2.ItemStateFn.hasTip(GameStateFn2.getItemState(ctx4, cardId), "\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408, \u6253\u958B\u81EA\u8ECD\u672C\u570B\u4E0A\u76841\u5F35\u5361") == !1)
                                return ctx4;
                              const pairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx4, "\u9019\u5F35\u5361\u5728\u6230\u5340\u7684\u5834\u5408, \u6253\u958B\u81EA\u8ECD\u672C\u570B\u4E0A\u76841\u5F35\u5361", cardId);
                              if (pairs.length == 0)
                                throw new Error(`pairs must not 0: ${effect2.text.description}`);
                              const [openCardId] = pairs[0];
                              if (GameStateFn2.getCardGSignProperty(ctx4, openCardId) == GameStateFn2.getCardGSignProperty(ctx4, cardId)) {
                                const bonus = GameStateFn2.getCardRollCostLength(ctx4, openCardId), gainBonus = [bonus, bonus, bonus];
                                ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u300C\u30B2\u30A4\u30F3\u300D\u306E\u52B9\u679C\u3067\u6226\u95D8\u4FEE\u6B63\u3092\u5F97\u308B\u5834\u5408", gainBonus], cardIds: [cardId] });
                                const hasCase1 = GameStateFn2.getCardTexts(ctx4, cardId).find((text2) => text2.description == "\u300E\u8D77\u52D5\u300F\uFF1A\u3053\u306E\u30AB\u30FC\u30C9\u306F\u3001\u300C\u30B2\u30A4\u30F3\u300D\u306E\u52B9\u679C\u3067\u6226\u95D8\u4FEE\u6B63\u3092\u5F97\u308B\u5834\u5408\u3001\u305D\u306E\u6226\u95D8\u4FEE\u6B63\u306E\u4EE3\u308F\u308A\u306B\u3001\u30BF\u30FC\u30F3\u7D42\u4E86\u6642\u307E\u3067\uFF0B\uFF14\uFF0F\xB1\uFF10\uFF0F\xB1\uFF10\u3092\u5F97\u308B\u4E8B\u304C\u3067\u304D\u308B\u3002") != null, hasCase2 = GameStateFn2.getCardTexts(ctx4, cardId).find((text2) => text2.description == "\u300E\u8D77\u52D5\u300F\uFF1A\u3053\u306E\u30AB\u30FC\u30C9\u306F\u3001\u300C\u30B2\u30A4\u30F3\u300D\u306E\u52B9\u679C\u3067\u6226\u95D8\u4FEE\u6B63\u3092\u5F97\u308B\u5834\u5408\u3001\u305D\u306E\u6226\u95D8\u4FEE\u6B63\u3092\u5F97\u308B\u4EE3\u308F\u308A\u306B\u3001\u30BF\u30FC\u30F3\u7D42\u4E86\u6642\u307E\u3067\u3001\u300C\u901F\u653B\u300D\u3092\u5F97\u308B\u4E8B\u304C\u3067\u304D\u308B\u3002") != null;
                                if (hasCase1)
                                  ctx4 = GameStateFn2.doItemSetGlobalEffectsUntilEndOfTurn(ctx4, [{ title: ["\uFF0Bx\uFF0F\uFF0Bx\uFF0F\uFF0Bx\u3092\u5F97\u308B", [4, 0, 0]], cardIds: [cardId] }], GameStateFn2.createStrBaSyouPair(ctx4, cardId));
                                else if (hasCase2)
                                  ctx4 = GameStateFn2.doItemSetGlobalEffectsUntilEndOfTurn(ctx4, [{ title: ["AddText", { id: ToolFn2.getUUID("hasCase2"), title: ["\u7279\u6B8A\u578B", ["\u901F\u653B"]] }], cardIds: [cardId] }], GameStateFn2.createStrBaSyouPair(ctx4, cardId));
                                else
                                  ctx4 = GameStateFn2.mapItemState(ctx4, cardId, (is) => DefineFn2.ItemStateFn.setGlobalEffect(is, null, {
                                    title: ["\uFF0Bx\uFF0F\uFF0Bx\uFF0F\uFF0Bx\u3092\u5F97\u308B", gainBonus],
                                    cardIds: [cardId]
                                  }, { isRemoveOnTurnEnd: !0 })), ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u300C\u30B2\u30A4\u30F3\u300D\u306E\u52B9\u679C\u3067\u6226\u95D8\u4FEE\u6B63\u3092\u5F97\u305F\u5834\u5408", gainBonus], cardIds: [cardId] });
                              }
                              return ctx4;
                            }.toString()
                          }
                        ]
                      }
                    });
                    return ctx3 = GameStateFn.addStackEffect(ctx3, newE), ctx3;
                  }.toString()
                }
              ]
            }
          ]
        }
      ];
    case "\u4F9B\u7D66":
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u81EA\u8ECD", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7"]],
          description: "\u9019\u5F35\u5361\u4EE5\u5916\u7684\u81EA\u8ECD\u6A5F\u9AD41\u5F35\u91CD\u7F6E",
          conditions: {
            ...text.conditions,
            "\u9019\u5F35\u5361\u4EE5\u5916\u7684\u81EA\u8ECD\u6A5F\u9AD41\u5F35": {
              title: ["_\u81EA\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A", "\u81EA\u8ECD", "\u30E6\u30CB\u30C3\u30C8", 1],
              exceptItemSelf: !0
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: ["cutIn", [
                    {
                      title: ["_\u30ED\u30FC\u30EB\u3059\u308B", "\u30EA\u30ED\u30FC\u30EB"],
                      vars: ["\u9019\u5F35\u5361\u4EE5\u5916\u7684\u81EA\u8ECD\u6A5F\u9AD41\u5F35"]
                    }
                  ]]
                }
              ]
            }
          ]
        }
      ];
    case "\u30B5\u30A4\u30B3\u30DF\u30E5": {
      const [_, x] = specialEffect;
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7"]],
          description: "\u4EA4\u6230\u4E2D\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35x\u50B7\u5BB3. \u9019\u500B\u6548\u679C\u53EA\u6709\u5728\u540C\u5340\u4E2D\u6709NT\u624D\u80FD\u4F7F\u7528.",
          conditions: {
            ...text.conditions,
            "\u4EA4\u6230\u4E2D\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35": {
              title: ["_\u4EA4\u6226\u4E2D\u306E_\u81EA\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A", "\u4EA4\u6226\u4E2D", "\u6575\u8ECD", "\u30E6\u30CB\u30C3\u30C8", 1]
            },
            "\u540C\u5340\u4E2D\u6709NT\u624D\u80FD\u4F7F\u7528": {
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const cardId = DefineFn.EffectFn.getCardID(effect), from = GameStateFn.getItemBaSyou(ctx3, cardId);
                    if (GameStateFn.getItemIdsByBasyou(ctx3, from).filter((itemId) => GameStateFn.getItemCharacteristic(ctx3, itemId).indexOf("NT")).length > 0 == !1)
                      throw new Error("no NT in the same area");
                    return ctx3;
                  }.toString()
                }
              ]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: ["cutIn", [
                    {
                      title: ["_\uFF11\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B", x],
                      vars: ["\u4EA4\u6230\u4E2D\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35"]
                    }
                  ]]
                }
              ]
            }
          ]
        }
      ];
    }
    case "\u7BC4\u56F2\u5175\u5668": {
      const [_, x] = specialEffect;
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7"]],
          description: "\u548C\u9019\u5F35\u5361\u4EA4\u6230\u7684\u9632\u79A6\u529Bx\u4EE5\u4E0B\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35\u7834\u58DE",
          conditions: {
            ...text.conditions,
            "\u9019\u5F35\u5361\u4EA4\u6230\u7684\u9632\u79A6\u529Bx\u4EE5\u4E0B\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35": {
              title: ["Entity", {
                isBattleWithThis: !0,
                compareBattlePoint: ["\u9632\u5FA1\u529B", "<=", x],
                isDestroy: !1,
                side: "\u6575\u8ECD",
                is: ["\u30E6\u30CB\u30C3\u30C8"],
                count: 1
              }]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: ["cutIn", [
                    {
                      title: ["_\u30ED\u30FC\u30EB\u3059\u308B", "\u7834\u58DE"],
                      vars: ["\u9019\u5F35\u5361\u4EA4\u6230\u7684\u9632\u79A6\u529Bx\u4EE5\u4E0B\u7684\u6575\u8ECD\u6A5F\u9AD41\u5F35"]
                    }
                  ]]
                }
              ]
            }
          ]
        }
      ];
    }
    case "\u5171\u6709": {
      const [_, A] = specialEffect;
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u5E38\u6642"]],
          description: "\u770B\u81EA\u5DF1\u672C\u570B\u5168\u90E8\u7684\u5361,\u53EF\u4EE5\u5F9E\u4E2D\u627E\u51FA\u7279\u5FB5A\u76841\u5F35\u5361\u79FB\u5230HANGER,\u90A3\u500B\u6642\u5019\u672C\u570B\u6D17\u724C.\u9019\u500B\u6548\u679C\u53EA\u6709\u9019\u5F35\u5361\u5F9E\u624B\u4E2D\u6253\u51FA\u7684\u56DE\u5408\u53EF\u4EE5\u4F7F\u7528",
          conditions: {
            ...text.conditions,
            "\u9019\u500B\u6548\u679C\u53EA\u6709\u9019\u5F35\u5361\u5F9E\u624B\u4E2D\u6253\u51FA\u7684\u56DE\u5408\u53EF\u4EE5\u4F7F\u7528": {
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const cardId = DefineFn.EffectFn.getCardID(effect);
                    if (GameStateFn.getItemState(ctx3, cardId).isFirstTurn != !0)
                      throw new DefineFn.TipError(`\u9019\u500B\u6548\u679C\u53EA\u6709\u9019\u5F35\u5361\u5F9E\u624B\u4E2D\u6253\u51FA\u7684\u56DE\u5408\u53EF\u4EE5\u4F7F\u7528:${effect.text.description}`);
                    return ctx3;
                  }.toString()
                }
              ]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const { A: A2 } = { A: "" }, newE = DefineFn.EffectFn.fromEffectBasic(effect, {
                      conditions: {
                        "\u770B\u81EA\u5DF1\u672C\u570B\u5168\u90E8\u7684\u5361,\u53EF\u4EE5\u5F9E\u4E2D\u627E\u51FA\u7279\u5FB5A\u76841\u5F35\u5361\u79FB\u5230HANGER,\u90A3\u500B\u6642\u5019\u672C\u570B\u6D17\u724C": {
                          title: ["_\u81EA\u8ECD_\u672C\u570B\u627E\u51FA\u7279\u5FB5_A\u7684_1\u5F35\u5361", "\u81EA\u8ECD", "\u672C\u56FD", A2, 1],
                          actions: [
                            {
                              title: ["\u770B\u81EA\u5DF1_\u672C\u570B\u5168\u90E8\u7684\u5361", "\u672C\u56FD"]
                            }
                          ]
                        }
                      },
                      logicTreeAction: {
                        actions: [
                          {
                            title: function _(ctx4, effect2, { GameStateFn: GameStateFn2, DefineFn: DefineFn2 }) {
                              const cardId = DefineFn2.EffectFn.getCardID(effect2), cardController = GameStateFn2.getItemController(ctx4, cardId), pairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx4, "\u770B\u81EA\u5DF1\u672C\u570B\u5168\u90E8\u7684\u5361,\u53EF\u4EE5\u5F9E\u4E2D\u627E\u51FA\u7279\u5FB5A\u76841\u5F35\u5361\u79FB\u5230HANGER,\u90A3\u500B\u6642\u5019\u672C\u570B\u6D17\u724C", cardId);
                              if (pairs.length) {
                                for (let pair2 of pairs)
                                  ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.of(cardController, "\u30CF\u30F3\u30AC\u30FC"), pair2);
                                ctx4 = GameStateFn2.shuffleItems(ctx4, DefineFn2.AbsoluteBaSyouFn.of(cardController, "\u672C\u56FD"));
                              }
                              return ctx4;
                            }.toString()
                          }
                        ]
                      }
                    });
                    return ctx3 = GameStateFn.addStackEffect(ctx3, newE), ctx3;
                  }.toString().replace('{ A: "" }', JSON.stringify({ A }))
                }
              ]
            }
          ]
        }
      ];
    }
    case "\u6539\u88C5": {
      const [_, A] = specialEffect;
      return [
        {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"]],
          description: "\u6253\u958B\u81EA\u8ECD\u624B\u88E1\u6216\u6307\u5B9AHANGER\u4E2D\u7279\u5FB5A\u4E26\u5408\u8A08\u570B\u529Bx\u4EE5\u4E0B\u76841\u5F35\u5361, \u548C\u9019\u5F35\u5361\u91CD\u7F6E\u72C0\u614B\u7F6E\u63DB, \u9019\u5F35\u5361\u7F6E\u63DB\u5F8C\u5EE2\u68C4. x\u70BA\u81EA\u8ECDG\u7684\u5F35\u6578",
          conditions: {
            ...text.conditions,
            "\u6253\u958B\u81EA\u8ECD\u624B\u88E1\u6216\u6307\u5B9AHANGER\u4E2D\u7279\u5FB5A\u4E26\u5408\u8A08\u570B\u529Bx\u4EE5\u4E0B\u76841\u5F35\u5361": {
              title: function _(ctx3, effect, bridge) {
                const { A: A2 } = { A: "" };
                if (A2 == "")
                  throw new Error("A\u6C92\u6709\u88AB\u5B57\u4E32\u7F6E\u63DB");
                const { GameStateFn, DefineFn } = bridge, cardId = DefineFn.EffectFn.getCardID(effect), cardController = GameStateFn.getItemController(ctx3, cardId), gCount = GameStateFn.getItemIdsByBasyou(ctx3, DefineFn.AbsoluteBaSyouFn.of(cardController, "G\u30BE\u30FC\u30F3")).length;
                return GameStateFn.createConditionTitleFn({
                  title: ["\u6253\u958B\u81EA\u8ECD\u624B\u88E1\u6216\u6307\u5B9AHANGER\u4E2D\u7279\u5FB5_A\u4E26\u5408\u8A08\u570B\u529B_x\u4EE5\u4E0B\u7684_1\u5F35\u5361", A2, gCount, 1]
                }, {})(ctx3, effect, bridge);
              }.toString().replace('{ A: "" }', JSON.stringify({ A }))
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
                    const newE = DefineFn.EffectFn.fromEffectBasic(effect, {
                      logicTreeAction: {
                        actions: [
                          {
                            title: function _(ctx4, effect2, { GameStateFn: GameStateFn2, DefineFn: DefineFn2 }) {
                              const cardId = DefineFn2.EffectFn.getCardID(effect2), basyou = GameStateFn2.getItemBaSyou(ctx4, cardId), pairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx4, "\u6253\u958B\u81EA\u8ECD\u624B\u88E1\u6216\u6307\u5B9AHANGER\u4E2D\u7279\u5FB5A\u4E26\u5408\u8A08\u570B\u529Bx\u4EE5\u4E0B\u76841\u5F35\u5361", cardId);
                              if (pairs.length == 0)
                                throw new Error(`pairs must not 0: ${effect2.text.description}`);
                              const targetPair = pairs[0];
                              return GameStateFn2.assertTargetMissingError(ctx4, targetPair), ctx4 = GameStateFn2.doItemSwap(ctx4, [cardId, basyou], targetPair), ctx4 = GameStateFn2.doItemSetRollState(ctx4, !1, [cardId, basyou], { isSkipTargetMissing: !0 }), ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.setBaSyouKeyword(basyou, "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"), targetPair), ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u300C\u6539\u88C5\u300D\u306E\u52B9\u679C\u3067\u5EC3\u68C4\u3055\u308C\u308B\u5834\u5408"], cardIds: [targetPair[0]] }), ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u300C\u6539\u88C5\u300D\u306E\u52B9\u679C\u3067\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId] }), ctx4;
                            }.toString()
                          }
                        ]
                      }
                    });
                    return ctx3 = GameStateFn.addStackEffect(ctx3, newE), ctx3;
                  }.toString()
                }
              ]
            }
          ]
        }
      ];
    }
  }
  return [];
}

// src/game/gameState/globalEffects.ts
function getGlobalEffects(ctx2, situation) {
  const key = JSON.stringify(situation), cached = ctx2.globalEffectPool[key];
  if (cached)
    return logCategory("getGlobalEffects", "useCache"), cached;
  return getSituationEffects(ctx2, situation);
}
function setGlobalEffects(ctx2, situation, ges) {
  const key = JSON.stringify(situation);
  return {
    ...ctx2,
    globalEffectPool: {
      ...ctx2.globalEffectPool,
      [key]: ges
    }
  };
}
function clearGlobalEffects(ctx2) {
  return {
    ...ctx2,
    globalEffectPool: {}
  };
}
function getSituationEffects(ctx2, situation) {
  const bridge = createBridge(), ges = createAllCardTexts(ctx2, situation).flatMap(([item, texts]) => {
    return texts.map((text, i) => {
      const cardController = getItemController(ctx2, item.id), fn = getOnSituationFn(text), effect = {
        id: ToolFn.getUUID("getSituationEffects"),
        reason: ["Situation", cardController, item.id, situation],
        text
      };
      return [fn, effect];
    }).flatMap(([fn, effect]) => {
      return fn(ctx2, effect, bridge);
    });
  }), itemStateGes = getItemStateValues(ctx2).flatMap(ItemStateFn.getGlobalEffects), gGes = [AbsoluteBaSyouFn.of(PlayerA, "G\u30BE\u30FC\u30F3"), AbsoluteBaSyouFn.of(PlayerB, "G\u30BE\u30FC\u30F3")].flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).filter((itemId) => getCard(ctx2, itemId).isRoll != !0).map((itemId) => {
    return { title: ["\u767C\u751F\u570B\u529B", getItemPrototype(ctx2, itemId).gsign?.[0] || []], cardIds: [itemId] };
  });
  return [...ges, ...itemStateGes, ...gGes];
}
function createAllCardTexts(ctx2, situation) {
  const getTextGroup1 = pipe(always_default(AbsoluteBaSyouFn.getBaAll()), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, (itemIds) => itemIds.filter((itemId) => isCard(ctx2, itemId) || isChip(ctx2, itemId)), map_default((itemId) => getItem(ctx2, itemId)), map_default((item) => {
    let texts = (getItemPrototype(ctx2, item.id).texts || []).flatMap((text) => {
      if (text.title[0] == "\u7279\u6B8A\u578B")
        return createTextsFromSpecialEffect(ctx2, text);
      return [text];
    });
    return texts = texts.filter((text) => text.title[0] == "\u81EA\u52D5\u578B" && (text.title[1] == "\u5E38\u99D0" || text.title[1] == "\u8D77\u52D5")), [item, texts];
  })), getTextGroup2 = pipe(always_default(AbsoluteBaSyouFn.getTextOn()), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, (itemIds) => itemIds.filter((itemId) => isCard(ctx2, itemId) || isChip(ctx2, itemId)), map_default((itemId) => getItem(ctx2, itemId)), map_default((item) => {
    let texts = (getItemPrototype(ctx2, item.id).texts || []).flatMap((text) => {
      if (text.title[0] == "\u7279\u6B8A\u578B")
        return createTextsFromSpecialEffect(ctx2, text);
      return [text];
    });
    return texts = texts.filter((text) => text.title[0] == "\u81EA\u52D5\u578B" && text.title[1] == "\u6052\u5E38" || text.title[0] == "\u4F7F\u7528\u578B"), [item, texts];
  })), getTextGroup3 = pipe(always_default([AbsoluteBaSyouFn.of(PlayerA, "G\u30BE\u30FC\u30F3"), AbsoluteBaSyouFn.of(PlayerB, "G\u30BE\u30FC\u30F3")]), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, (itemIds) => itemIds.filter((itemId) => isCard(ctx2, itemId) || isChip(ctx2, itemId)), map_default((itemId) => getItem(ctx2, itemId)), map_default((item) => {
    let texts = (getItemPrototype(ctx2, item.id).texts || []).flatMap((text) => {
      if (text.protectLevel == 2 && text.title[0] == "\u7279\u6B8A\u578B")
        return createTextsFromSpecialEffect(ctx2, text);
      return [text];
    });
    return texts = texts.filter((text) => text.protectLevel == 2 && text.title[0] == "\u81EA\u52D5\u578B" && (text.title[1] == "\u5E38\u99D0" || text.title[1] == "\u8D77\u52D5")), [item, texts];
  })), getTextGroup4 = pipe(always_default(getCardIds(ctx2)), map_default((cardId) => {
    const proto = getItemPrototype(ctx2, cardId);
    if (proto.commandText?.onSituation)
      return [getCard(ctx2, cardId), [proto.commandText]];
    return null;
  }), (infos) => infos.filter((v) => v)), allCardTexts = [...getTextGroup1(), ...getTextGroup2(), ...getTextGroup3(), ...getTextGroup4()], bridge = createBridge(), ges = allCardTexts.flatMap(([item, texts]) => {
    return texts.map((text, i) => {
      const cardController = getItemController(ctx2, item.id), fn = getOnSituationFn(text), effect = {
        id: ToolFn.getUUID("getSituationEffects"),
        reason: ["Situation", cardController, item.id, situation],
        text
      };
      return [fn, effect];
    }).flatMap(([fn, effect]) => {
      return fn(ctx2, effect, bridge);
    });
  }), itemStateGes = getItemStateValues(ctx2).flatMap(ItemStateFn.getGlobalEffects), gesLayer1 = [...ges, ...itemStateGes], textsLayer2 = gesLayer1.filter((ge) => ge.title[0] == "AddText").map((ge) => [ge.cardIds, ge.title[1]]).flatMap(([itemIds, text]) => {
    return itemIds.flatMap((itemId) => {
      const texts = text.title[0] == "\u7279\u6B8A\u578B" ? createTextsFromSpecialEffect(ctx2, text) : [text];
      return [[getItem(ctx2, itemId), texts]];
    });
  }), textsLayer2_2 = gesLayer1.filter((ge) => ge.title[0] == "AddTextRef").map((ge) => [ge.cardIds, ge.title[1]]).flatMap(([itemIds, textRef]) => {
    return itemIds.flatMap((itemId) => {
      const text = getCardTextFromCardTextRef(ctx2, textRef), texts = text.title[0] == "\u7279\u6B8A\u578B" ? createTextsFromSpecialEffect(ctx2, text) : [text];
      return [[getItem(ctx2, itemId), texts]];
    });
  });
  return [...allCardTexts, ...textsLayer2, ...textsLayer2_2];
}

// src/game/gameState/card.ts
function getCardTextFromCardTextRef(ctx2, textRef) {
  const { cardId, textId } = textRef, text = getItemPrototype(ctx2, cardId).texts?.find((text2) => text2.id == textId);
  if (text == null)
    throw new Error(`textRef not found: ${cardId} => ${textId}`);
  return text;
}
function getCardSpecialText(ctx2, cardID, text) {
  if (text.title[0] != "\u7279\u6B8A\u578B")
    return text;
  switch (text.title[1][0]) {
    case "\u30B5\u30A4\u30B3\u30DF\u30E5":
    case "\u7BC4\u56F2\u5175\u5668": {
      const [name, value] = text.title[1], ges = getGlobalEffects(ctx2, null);
      ctx2 = setGlobalEffects(ctx2, null, ges);
      const bonus = ges.filter((ge) => ge.cardIds.includes(cardID)).map((ge) => {
        if (ge.title[0] == "SpecialEffectBonus" && ge.title[1][0] == name)
          return ge.title[1][1];
        return 0;
      }).reduce((a, b) => a + b, 0), title = ["\u7279\u6B8A\u578B", [name, value + bonus]];
      return {
        ...text,
        title,
        description: JSON.stringify(title[1])
      };
    }
    default:
      return text;
  }
}
function getCardTexts(ctx2, cardID) {
  const ges = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, ges);
  const addedTexts = ges.flatMap((e) => {
    if (e.cardIds.includes(cardID) && e.title[0] == "AddText")
      return [e.title[1]];
    if (e.cardIds.includes(cardID) && e.title[0] == "AddTextRef")
      return [getCardTextFromCardTextRef(ctx2, e.title[1])];
    return [];
  }).filter((v) => v);
  return [...getItemPrototype(ctx2, cardID).texts || [], ...addedTexts].map((text) => {
    if (text.title[0] == "\u7279\u6B8A\u578B")
      return getCardSpecialText(ctx2, cardID, text);
    return text;
  });
}
function getItemCharacteristic(ctx2, cardID) {
  return getItemPrototype(ctx2, cardID).characteristic || "";
}
function getCardColor(ctx2, cardID) {
  const prototype = getItemPrototype(ctx2, cardID);
  if (prototype.color == null)
    throw new Error(`color not define: ${prototype.id}`);
  return prototype.color;
}
function getCardGSign(ctx2, cardID) {
  const prototype = getItemPrototype(ctx2, cardID);
  if (prototype.gsign == null)
    throw new Error(`gsign not define: ${prototype.id}`);
  return prototype.gsign;
}
function getCardGSignProperty(ctx2, cardID) {
  const prototype = getItemPrototype(ctx2, cardID);
  if (prototype.gsign == null)
    throw new Error(`gsign not define: ${prototype.id}`);
  return prototype.gsign[1];
}
function getCardTitle(ctx2, cardID) {
  return getItemPrototype(ctx2, cardID).title || "unknown";
}
function getCardRollCostLength(ctx2, cardID) {
  return getItemPrototype(ctx2, cardID).rollCost?.length || 0;
}
function getCardTotalCostLength(ctx2, cardID) {
  const prototype = getItemPrototype(ctx2, cardID), gEffects = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, gEffects);
  const added = pipe(always_default(gEffects), map_default((ge) => {
    if (ge.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)" && ge.cardIds.includes(cardID))
      return ge.title[1];
    return 0;
  }), sum_default)();
  let totalCost = 0;
  if (prototype.totalCost == null)
    ;
  else if (prototype.totalCost == "X")
    totalCost = getCardIdsCanPayRollCost(ctx2, getItemController(ctx2, cardID), null).length;
  else
    totalCost = prototype.totalCost;
  return totalCost + added;
}
function getCardIdsCanPayRollCost(ctx2, playerId, situation) {
  const ges = getGlobalEffects(ctx2, situation);
  return ctx2 = setGlobalEffects(ctx2, situation, ges), ges.filter((ge) => ge.title[0] == "\u767C\u751F\u570B\u529B").flatMap((ge) => ge.cardIds).filter((cardId) => getCard(ctx2, cardId).isRoll != !0).filter((cardId) => getItemController(ctx2, cardId) == playerId);
}
function getCardBattlePoint(ctx2, cardID) {
  ctx2 = clearGlobalEffects(ctx2);
  const globalEffects = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, globalEffects);
  const card = getCard(ctx2, cardID), bonusFromGlobalEffects = globalEffects.map((ge) => {
    if (ge.title[0] == "AddText" && ge.cardIds.includes(cardID) && ge.title[1].title[0] == "TextBattleBonus")
      return ge.title[1].title[1];
    if (ge.title[0] == "\uFF0Bx\uFF0F\uFF0Bx\uFF0F\uFF0Bx\u3092\u5F97\u308B" && ge.cardIds.includes(cardID))
      return ge.title[1];
    return [0, 0, 0];
  }), bonusFormCoin = getCoins(ctx2).map((coin) => {
    if (coin.title[0] == "BattleBonus" && getCardIdByCoinId(ctx2, coin.id) == cardID)
      return coin.title[1];
    return [0, 0, 0];
  }), prototype = getItemPrototype(ctx2, card.id);
  return [...bonusFromGlobalEffects, ...bonusFormCoin].reduce(BattlePointFn.add, prototype.battlePoint || BattlePointFn.getAllStar());
}
function getCardHasSpeicalEffect(ctx2, a, cardID) {
  return getCardTexts(ctx2, cardID).filter((e) => e.title[0] == "\u7279\u6B8A\u578B" && TextSpeicalEffectFn.isSameKeyword(e.title[1], a)).length > 0;
}
function isCardCanReroll(ctx2, cardID, situation) {
  switch (getItemBaSyou(ctx2, cardID).value[1]) {
    case "G\u30BE\u30FC\u30F3":
    case "\u914D\u5099\u30A8\u30EA\u30A2":
    case "\u6226\u95D8\u30A8\u30EA\u30A22":
    case "\u6226\u95D8\u30A8\u30EA\u30A21":
      break;
    default:
      return !1;
  }
  const baSyou = getItemBaSyou(ctx2, cardID), setGroup = getSetGroupChildren(ctx2, cardID);
  return !0;
}
function isCardMaster(ctx2, unitCardID, cardID) {
  const match = getItemCharacteristic(ctx2, unitCardID).match(/専用「(.+?)」/);
  if (match == null)
    return !1;
  const [_, masterName] = match;
  if (masterName != getCardTitle(ctx2, cardID))
    return !1;
  return !0;
}
function getCardBattleArea(ctx2, cardID) {
  const card = getCard(ctx2, cardID);
  if (card == null)
    throw new Error("card not found");
  return getItemPrototype(ctx2, card.id).battleArea || [];
}
function getItemRuntimeCategory(ctx2, itemId) {
  if (AbsoluteBaSyouFn.getBaSyouKeyword(getItemBaSyou(ctx2, itemId)) == "G\u30BE\u30FC\u30F3")
    return "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF";
  if (isChip(ctx2, itemId))
    return "\u30E6\u30CB\u30C3\u30C8";
  if (isCard(ctx2, itemId)) {
    const category = getItemPrototype(ctx2, itemId).category;
    if (category == null)
      throw new Error(`card category not found: ${itemId}`);
    return category;
  }
  throw new Error(`getCardRuntimeCategory unknown item type: ${itemId}`);
}
function getItemIsCanReroll(ctx2, itemId) {
  return !0;
}
function getItemIsCanRoll(ctx2, itemId) {
  return !0;
}
function getCardIdsCanPayRollColor(ctx2, situation, playerId, color) {
  const ges = getGlobalEffects(ctx2, situation);
  return ctx2 = setGlobalEffects(ctx2, situation, ges), ges.flatMap((ge) => {
    if (ge.cardIds.length == 0)
      return [];
    if (getItemController(ctx2, ge.cardIds[0]) != playerId)
      return [];
    if (ge.title[0] == "\u767C\u751F\u570B\u529B") {
      const gainColors = ge.title[1];
      if (color == null || color == "\u7D2B" || gainColors.includes(color))
        return ge.cardIds.map((cardId) => ({ cardId, colors: gainColors }));
    }
    if (ge.title[0] == "\u3053\u306E\u30AB\u30FC\u30C9\u3092\u81EA\u8ECDG\u3068\u3057\u3066\u30ED\u30FC\u30EB\u3067\u304D\u308B")
      return ge.cardIds.filter((cardId) => getCard(ctx2, cardId).isRoll != !0).map((cardId) => {
        const colors = getItemPrototype(ctx2, cardId).gsign?.[0] || [];
        return { cardId, colors };
      });
    if (ge.title[0] == "_\u767D\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064_\u81EA\u8ECD_G\u3068\u3057\u3066\u6271\u3046\u4E8B\u304C\u3067\u304D\u308B" && ge.title[2] == "\u81EA\u8ECD" && ge.title[3] == "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF") {
      const cardIds = ge.cardIds.filter((cardId) => getItemController(ctx2, cardId) == playerId).filter((cardId) => getCard(ctx2, cardId).isRoll != !0), colors = ge.title[1];
      return cardIds.map((cardId) => {
        return { cardId, colors };
      });
    }
    return [];
  });
}

// src/game/gameState/battleGroup.ts
var exports_battleGroup = {};
__export(exports_battleGroup, {
  isBattleGroupHasA: () => isBattleGroupHasA,
  getBattleGroupBattlePoint: () => getBattleGroupBattlePoint,
  getBattleGroup: () => getBattleGroup
});

// src/game/gameState/setGroup.ts
var exports_setGroup = {};
__export(exports_setGroup, {
  isSetGroupHasA: () => isSetGroupHasA,
  isRangeUnit: () => isRangeUnit,
  isMeleeUnit: () => isMeleeUnit,
  getSetGroupBattlePoint: () => getSetGroupBattlePoint
});
function getSetGroupBattlePoint(ctx2, cardId) {
  return pipe(always_default(getSetGroupChildren(ctx2, cardId)), map_default((setGroupCardID) => getCardBattlePoint(ctx2, setGroupCardID)), reduce_default(BattlePointFn.add, BattlePointFn.getAllStar()), BattlePointFn.toBattleBonus)();
}
function isSetGroupHasA(ctx2, a, cardId) {
  return getSetGroupChildren(ctx2, cardId).some((cardId2) => getCardHasSpeicalEffect(ctx2, a, cardId2));
}
function isMeleeUnit(ctx2, itemId) {
  const [atk, range3, hp] = getSetGroupBattlePoint(ctx2, itemId);
  if (range3 == 0 && atk > 0)
    return !0;
  if (atk - range3 >= 2)
    return !0;
  return !1;
}
function isRangeUnit(ctx2, itemId) {
  const [atk, range3, hp] = getSetGroupBattlePoint(ctx2, itemId);
  if (range3 == 0)
    return !1;
  return isMeleeUnit(ctx2, itemId) == !1;
}

// src/game/gameState/battleGroup.ts
function getBattleGroup(ctx2, baSyou) {
  return getItemIdsByBasyou(ctx2, baSyou).filter((cardId) => {
    return getSetGroupRoot(ctx2, cardId) == cardId;
  });
}
function getBattleGroupBattlePoint(ctx2, unitCardIDs) {
  if (unitCardIDs.length == 0)
    return 0;
  const attackPower = unitCardIDs.map((cardID, i) => {
    if (getItemState(ctx2, cardID).destroyReason != null)
      return 0;
    const card = getCard(ctx2, cardID);
    if (card == null)
      throw new Error("card not found");
    if (card.isRoll)
      return 0;
    const [melee, range3, _] = getSetGroupBattlePoint(ctx2, cardID);
    if (i == 0)
      return melee;
    return range3;
  }).reduce((acc, c) => acc + c, 0), ges = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, ges);
  const bonus = ges.map((ge) => {
    if (ge.title[0] == "\u3053\u306E\u30AB\u30FC\u30C9\u306E\u90E8\u968A\u306E\u90E8\u968A\u6226\u95D8\u529B\u3092_\uFF0B\uFF13\u3059\u308B") {
      const times3 = unitCardIDs.filter((unitId) => ge.cardIds.includes(unitId)).length;
      return ge.title[1] * times3;
    }
    return 0;
  }).reduce((acc, c) => acc + c, 0), opponentBasyou = AbsoluteBaSyouFn.setOpponentPlayerID(getItemBaSyou(ctx2, unitCardIDs[0])), opponentBattleGroup = getBattleGroup(ctx2, opponentBasyou), bonus2 = ges.map((ge) => {
    if (ge.title[0] == "\u3053\u306E\u30AB\u30FC\u30C9\u3068\u4EA4\u6226\u4E2D\u306E\u6575\u8ECD\u90E8\u968A\u306E\u90E8\u968A\u6226\u95D8\u529B\u3092_\uFF0D\uFF13\u3059\u308B") {
      const times3 = opponentBattleGroup.filter((unitId) => ge.cardIds.includes(unitId)).length;
      return ge.title[1] * times3;
    }
    return 0;
  }).reduce((acc, c) => acc + c, 0);
  return attackPower + bonus + bonus2;
}
function isBattleGroupHasA(ctx2, a, cardID) {
  const baSyou = getItemBaSyou(ctx2, cardID);
  return getBattleGroup(ctx2, baSyou).some((bg) => isSetGroupHasA(ctx2, a, bg));
}

// src/game/gameState/player.ts
var exports_player = {};
__export(exports_player, {
  isPlayerHasBattleGroup: () => isPlayerHasBattleGroup,
  getPlayerUnitIds: () => getPlayerUnitIds,
  getPlayerOperationIds: () => getPlayerOperationIds,
  getPlayerJunkyardIds: () => getPlayerJunkyardIds,
  getPlayerHandIds: () => getPlayerHandIds,
  getPlayerGIds: () => getPlayerGIds,
  getPlayerDestroyIds: () => getPlayerDestroyIds,
  getPlayerCharacterIds: () => getPlayerCharacterIds,
  doRuleBattleDamage: () => doRuleBattleDamage2,
  doPlayerAttack: () => doPlayerAttack,
  doBattleDamage: () => doBattleDamage,
  createPreviewEffectScore: () => createPreviewEffectScore,
  createPlayerScore: () => createPlayerScore
});

// src/game/gameState/doTriggerEvent.ts
var exports_doTriggerEvent = {};
__export(exports_doTriggerEvent, {
  doTriggerEvent: () => doTriggerEvent
});

// src/game/gameState/PlayerStateComponent.ts
var exports_PlayerStateComponent = {};
__export(exports_PlayerStateComponent, {
  setPlayerState: () => setPlayerState,
  mapPlayerState: () => mapPlayerState,
  getPlayerState: () => getPlayerState
});

// src/game/define/PlayerState.ts
var PlayerStateFn = {
  identity() {
    return {
      id: "",
      turn: 0,
      playGCount: 0,
      confirmPhase: !1,
      textIdsUseThisTurn: {}
    };
  },
  onTurnEnd(ps) {
    return {
      ...ps,
      playGCount: 0,
      textIdsUseThisTurn: {}
    };
  }
};

// src/game/gameState/PlayerStateComponent.ts
function getPlayerState(ctx2, playerId) {
  return ctx2.playerStates[playerId] || { ...PlayerStateFn.identity(), id: playerId };
}
function setPlayerState(ctx2, playerId, cardState) {
  const old = getPlayerState(ctx2, playerId);
  return ctx2 = { ...ctx2, playerStates: assoc_default(playerId, cardState, ctx2.playerStates) }, ctx2 = EventCenterFn.onPlayerStateChange(ctx2, old, getPlayerState(ctx2, playerId)), ctx2;
}
function mapPlayerState(ctx2, playerId, fn) {
  const old = getPlayerState(ctx2, playerId), curr = fn(old);
  return ctx2 = setPlayerState(ctx2, playerId, curr), ctx2;
}

// src/game/gameState/ActivePlayerComponent.ts
var exports_ActivePlayerComponent = {};
__export(exports_ActivePlayerComponent, {
  setActivePlayerID: () => setActivePlayerID,
  getActivePlayerID: () => getActivePlayerID
});
function setActivePlayerID(ctx2, playerId) {
  return {
    ...ctx2,
    activePlayerID: playerId
  };
}
function getActivePlayerID(ctx2) {
  if (ctx2.activePlayerID == null)
    throw new Error("activePlayerID not set yet");
  return ctx2.activePlayerID;
}

// src/game/gameState/createOnEventTitleFn.ts
var exports_createOnEventTitleFn = {};
__export(exports_createOnEventTitleFn, {
  createOnEventTitleFn: () => createOnEventTitleFn
});

// src/game/gameState/createActionTitleFn.ts
var exports_createActionTitleFn = {};
__export(exports_createActionTitleFn, {
  createPlayerIdFromRelated: () => createPlayerIdFromRelated2,
  createActionTitleFn: () => createActionTitleFn,
  createAbsoluteBaSyouFromBaSyou: () => createAbsoluteBaSyouFromBaSyou
});

// src/game/define/Coin.ts
var exports_Coin = {};
__export(exports_Coin, {
  CoinFn: () => CoinFn
});
var CoinFn = {
  battleBonus(playerId, v) {
    return {
      id: ToolFn.getUUID("coin"),
      title: ["BattleBonus", v],
      ownerID: playerId
    };
  }
};

// src/game/gameState/doItemMove.ts
var exports_doItemMove = {};
__export(exports_doItemMove, {
  onMoveItem: () => onMoveItem,
  doItemMove: () => doItemMove
});
function doItemMove(ctx2, to, [itemId, from], options) {
  if (options?.isSkipTargetMissing)
    ;
  else
    assertTargetMissingError(ctx2, [itemId, from]);
  if (isCard(ctx2, itemId) || isChip(ctx2, itemId)) {
    const oldTable = ctx2.table;
    {
      const ges = getGlobalEffects(ctx2, null);
      ctx2 = setGlobalEffects(ctx2, null, ges);
      const redirectEs = ges.filter((ge) => ge.title[0] == "\u5834\u3001\u307E\u305F\u306F\u624B\u672D\u304B\u3089\u3001\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u30AB\u30FC\u30C9\u304C\u79FB\u308B\u5834\u5408\u3001\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u79FB\u308B\u4EE3\u308F\u308A\u306B\u30B2\u30FC\u30E0\u304B\u3089\u53D6\u308A\u9664\u304B\u308C\u308B");
      if (redirectEs.length) {
        const textControllers = redirectEs.flatMap((e) => e.cardIds).map((id) => getItemController(ctx2, id));
        if (BaSyouKeywordFn.getBaAll().concat(["\u30CF\u30F3\u30AC\u30FC"]).includes(AbsoluteBaSyouFn.getBaSyouKeyword(from)) && AbsoluteBaSyouFn.getBaSyouKeyword(to) == "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9" && textControllers.includes(AbsoluteBaSyouFn.getPlayerID(to)))
          to = AbsoluteBaSyouFn.setBaSyouKeyword(to, "\u53D6\u308A\u9664\u304B\u308C\u305F\u30AB\u30FC\u30C9");
      }
    }
    return getSetGroupChildren(ctx2, itemId).forEach((itemId2) => {
      const from2 = getItemBaSyou(ctx2, itemId2);
      ctx2 = {
        ...ctx2,
        table: TableFns.moveCard(ctx2.table, AbsoluteBaSyouFn.toString(from2), AbsoluteBaSyouFn.toString(to), itemId2, { insertId: options?.insertId })
      }, ctx2 = onMoveItem(ctx2, to, [itemId2, from2]);
    }), ctx2 = EventCenterFn.onTableChange(ctx2, oldTable, ctx2.table), ctx2;
  }
  if (isCoin(ctx2, itemId))
    throw new Error(`coin can not move: ${itemId}`);
  throw new Error(`moveItem unknown item: ${itemId}`);
}
function onMoveItem(ctx2, to, [cardId, from]) {
  if (ctx2 = clearGlobalEffects(ctx2), AbsoluteBaSyouFn.getBaSyouKeyword(from) == "\u624B\u672D") {
    if (AbsoluteBaSyouFn.getBaSyouKeyword(to) == "\u30D7\u30EC\u30A4\u3055\u308C\u3066\u3044\u308B\u30AB\u30FC\u30C9")
      ctx2 = doTriggerEvent(ctx2, {
        title: ["\u30D7\u30EC\u30A4\u3057\u305F\u5834\u5408"],
        cardIds: [cardId]
      });
  }
  if (BaSyouKeywordFn.isBa(AbsoluteBaSyouFn.getBaSyouKeyword(from)) == !1 && BaSyouKeywordFn.isBa(AbsoluteBaSyouFn.getBaSyouKeyword(to)))
    ctx2 = mapItemState(ctx2, cardId, (is) => {
      return {
        ...is,
        isFirstTurn: !0
      };
    }), ctx2 = mapCard(ctx2, cardId, (card) => {
      return {
        ...card,
        isFaceDown: !1
      };
    }), ctx2 = doTriggerEvent(ctx2, {
      title: ["\u5834\u306B\u51FA\u305F\u5834\u5408"],
      cardIds: [cardId]
    });
  if (BaSyouKeywordFn.isBa(AbsoluteBaSyouFn.getBaSyouKeyword(from)) == !0 && BaSyouKeywordFn.isBa(AbsoluteBaSyouFn.getBaSyouKeyword(to)) == !1) {
    ctx2 = mapItemState(ctx2, cardId, (is) => {
      return {
        ...is,
        damage: 0,
        destroyReason: null
      };
    }), ctx2 = removeCoinIds(ctx2, getCoinIdsByCardId(ctx2, cardId)), ctx2 = removeSetGroupParent(ctx2, cardId);
    for (let effect of getCutInDestroyEffects(ctx2))
      if (EffectFn.getCardID(effect) == cardId)
        ctx2 = removeEffect(ctx2, effect.id);
  }
  if (["\u6368\u3066\u5C71", "\u672C\u56FD", "\u624B\u672D"].includes(AbsoluteBaSyouFn.getBaSyouKeyword(to)))
    ctx2 = mapCard(ctx2, cardId, (card) => {
      return {
        ...card,
        isRoll: !1,
        isFaceDown: !0
      };
    });
  else if (["\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9", "\u30CF\u30F3\u30AC\u30FC", "\u30D7\u30EC\u30A4\u3055\u308C\u3066\u3044\u308B\u30AB\u30FC\u30C9", "\u53D6\u308A\u9664\u304B\u308C\u305F\u30AB\u30FC\u30C9"].includes(AbsoluteBaSyouFn.getBaSyouKeyword(to)))
    ctx2 = mapCard(ctx2, cardId, (card) => {
      return {
        ...card,
        isRoll: !1,
        isFaceDown: !1
      };
    });
  else if (["G\u30BE\u30FC\u30F3"].includes(AbsoluteBaSyouFn.getBaSyouKeyword(to)))
    ctx2 = mapCard(ctx2, cardId, (card) => {
      return {
        ...card,
        isFaceDown: !1
      };
    });
  return ctx2 = doTriggerEvent(ctx2, {
    title: ["GameEventOnMove", from, to],
    cardIds: [cardId]
  }), ctx2;
}

// src/game/gameState/doItemSwap.ts
var exports_doItemSwap = {};
__export(exports_doItemSwap, {
  doItemSwap: () => doItemSwap
});
function doItemSwap(ctx2, pair1, pair2, options) {
  if (options?.isSkipTargetMissing)
    ;
  else
    assertTargetMissingError(ctx2, pair1), assertTargetMissingError(ctx2, pair2);
  const [itemId1] = pair1, [itemId2] = pair2;
  if (isCard(ctx2, itemId1) && isCard(ctx2, itemId2)) {
    const card1 = getCard(ctx2, itemId1), card2 = getCard(ctx2, itemId2);
    ctx2 = setCard(ctx2, card1.id, { ...card1, protoID: card2.protoID, isRoll: card2.isRoll }), ctx2 = setCard(ctx2, card2.id, { ...card2, protoID: card1.protoID, isRoll: card1.isRoll });
    const is1 = getItemState(ctx2, itemId1), is2 = getItemState(ctx2, itemId2);
    return ctx2 = setItemState(ctx2, is1.id, { ...is2, id: is1.id }), ctx2 = setItemState(ctx2, is2.id, { ...is1, id: is2.id }), ctx2;
  }
  throw new Error("swapCard not yet support");
}

// src/game/gameState/doItemDamage.ts
var exports_doItemDamage = {};
__export(exports_doItemDamage, {
  doItemDamage: () => doItemDamage
});

// src/game/gameState/createDestroyEffect.ts
function createDestroyEffect(ctx2, reason, cardId) {
  return {
    id: `createDestroyEffect_${cardId}`,
    reason: ["Destroy", reason.playerID, cardId, reason],
    text: {
      id: `createDestroyEffect_text_${cardId}`,
      title: [],
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect2, { DefineFn, GameStateFn }) {
                const cardId2 = DefineFn.EffectFn.getCardID(effect2), cardOwner = GameStateFn.getItemOwner(ctx3, cardId2);
                return ctx3 = GameStateFn.doItemMove(ctx3, DefineFn.AbsoluteBaSyouFn.of(cardOwner, "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"), [cardId2, GameStateFn.getItemBaSyou(ctx3, cardId2)], { isSkipTargetMissing: !0 }), ctx3 = GameStateFn.mapItemState(ctx3, cardId2, (is) => {
                  return {
                    ...is,
                    damage: 0
                  };
                }), ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/doItemDamage.ts
function doItemDamage(ctx2, playerId, damage, target, options) {
  if (options?.isSkipTargetMissing)
    ;
  else
    assertTargetMissingError(ctx2, target);
  const [targetItemId, targetOriginBasyou] = target;
  if (isCard(ctx2, targetItemId) || isChip(ctx2, targetItemId)) {
    let cardState = getItemState(ctx2, targetItemId);
    cardState = ItemStateFn.damage(cardState, damage), ctx2 = setItemState(ctx2, targetItemId, cardState);
    const [_, _2, hp] = getSetGroupBattlePoint(ctx2, targetItemId);
    if (hp <= cardState.damage) {
      const effect = createDestroyEffect(ctx2, { id: "\u901A\u5E38\u30C0\u30E1\u30FC\u30B8", playerID: playerId }, targetItemId);
      ctx2 = addDestroyEffect(ctx2, effect);
    }
    return ctx2;
  }
  throw new Error(`doItemDamage unknown item: ${targetItemId}`);
}

// src/game/gameState/doItemSetRollState.ts
var exports_doItemSetRollState = {};
__export(exports_doItemSetRollState, {
  doItemSetRollState: () => doItemSetRollState
});

// src/game/define/Card.ts
var exports_Card = {};
__export(exports_Card, {
  CardFn: () => CardFn
});
var CardFn = {
  setIsRoll(ctx2, isRoll) {
    return {
      ...ctx2,
      isRoll
    };
  }
};

// src/game/define/Chip.ts
var ChipFn = {
  setIsRoll(ctx2, isRoll) {
    return {
      ...ctx2,
      isRoll
    };
  }
};

// src/game/gameState/doItemSetRollState.ts
function doItemSetRollState(ctx2, isRoll, [itemId, originBasyou], options) {
  if (options?.isSkipTargetMissing)
    ;
  else
    assertTargetMissingError(ctx2, [itemId, originBasyou]);
  const itemIds = getSetGroup(ctx2, itemId);
  return logCategory("doItemSetRollState", isRoll, itemIds), ctx2 = itemIds.reduce((ctx3, willRollItemId) => {
    if (isCard(ctx3, willRollItemId)) {
      let willRollItem = getCard(ctx3, willRollItemId);
      if (options?.isSkipTargetMissing)
        ;
      else if (willRollItem.id == itemId && willRollItem.isRoll == isRoll)
        throw new TargetMissingError(`card already isRoll: ${willRollItem.isRoll}: ${willRollItem.id}`);
      return willRollItem = CardFn.setIsRoll(willRollItem, isRoll), ctx3 = setCard(ctx3, willRollItemId, willRollItem), ctx3;
    }
    if (isChip(ctx3, willRollItemId)) {
      let willRollItem = getChip(ctx3, willRollItemId);
      if (options?.isSkipTargetMissing)
        ;
      else if (willRollItem.id == itemId && willRollItem.isRoll == isRoll)
        throw new TargetMissingError(`chip already isRoll: ${willRollItem.isRoll}: ${willRollItem.id}`);
      return willRollItem = ChipFn.setIsRoll(willRollItem, isRoll), ctx3 = setChip(ctx3, willRollItemId, willRollItem), ctx3;
    }
    return ctx3;
  }, ctx2), ctx2;
}

// src/game/gameState/doCountryDamage.ts
var exports_doCountryDamage = {};
__export(exports_doCountryDamage, {
  doCountryDamage: () => doCountryDamage
});
function doCountryDamage(ctx2, playerId, damage, options) {
  if (damage == 0)
    return ctx2;
  if (damage < 0) {
    const from2 = AbsoluteBaSyouFn.of(playerId, "\u6368\u3066\u5C71"), pairs2 = getItemIdsByBasyou(ctx2, from2).map((itemId) => {
      return [itemId, from2];
    }).slice(0, damage), to2 = AbsoluteBaSyouFn.of(playerId, "\u672C\u56FD");
    for (let pair2 of pairs2)
      ctx2 = doItemMove(ctx2, to2, pair2, { isSkipTargetMissing: !0 });
    return ctx2;
  }
  const from = AbsoluteBaSyouFn.of(playerId, "\u672C\u56FD"), pairs = getItemIdsByBasyou(ctx2, from).map((itemId) => {
    return [itemId, from];
  }).slice(0, damage), to = AbsoluteBaSyouFn.of(playerId, "\u6368\u3066\u5C71");
  for (let pair2 of pairs)
    ctx2 = doItemMove(ctx2, to, pair2, { isSkipTargetMissing: !0 });
  return ctx2 = doTriggerEvent(ctx2, {
    title: ["\u81EA\u8ECD\u672C\u56FD\u306B\u6226\u95D8\u30C0\u30E1\u30FC\u30B8\u304C\u4E0E\u3048\u3089\u308C\u305F\u5834\u5408"],
    playerId
  }), ctx2 = EventCenterFn.onCountryDamage(ctx2, playerId, damage), ctx2;
}

// src/game/gameState/doItemSetDestroy.ts
var exports_doItemSetDestroy = {};
__export(exports_doItemSetDestroy, {
  doItemSetDestroy: () => doItemSetDestroy,
  createMinusDestroyEffectAndPush: () => createMinusDestroyEffectAndPush
});
function doItemSetDestroy(ctx2, reason, [itemId, from], options) {
  if (options?.isSkipTargetMissing)
    ;
  else if (assertTargetMissingError(ctx2, [itemId, from]), reason) {
    if (getItemState(ctx2, itemId).destroyReason)
      throw new TargetMissingError(`already destroy: ${itemId}`, {});
  } else {
    if (getItemState(ctx2, itemId).destroyReason == null)
      throw new TargetMissingError(`not destroy: ${itemId}`, {});
    if (getItemState(ctx2, itemId).destroyReason?.id == "\u30DE\u30A4\u30CA\u30B9\u306E\u6226\u95D8\u4FEE\u6B63")
      throw new Error("\u30DE\u30A4\u30CA\u30B9\u306E\u6226\u95D8\u4FEE\u6B63\u7684\u7834\u58DE\u4E0D\u80FD\u88AB\u9078\u5230");
  }
  if (isCard(ctx2, itemId) || isChip(ctx2, itemId))
    return getSetGroupChildren(ctx2, itemId).forEach((setGroupId) => {
      const isDestroyEffect = getCutInDestroyEffects(ctx2).find((e) => EffectFn.getCardID(e) == setGroupId);
      if (reason) {
        if (getItemState(ctx2, setGroupId).destroyReason)
          return;
        ctx2 = mapItemState(ctx2, setGroupId, (is) => {
          return { ...is, destroyReason: reason };
        }), ctx2 = addDestroyEffect(ctx2, createDestroyEffect(ctx2, reason, setGroupId));
      } else {
        if (getItemState(ctx2, setGroupId).destroyReason?.id == "\u30DE\u30A4\u30CA\u30B9\u306E\u6226\u95D8\u4FEE\u6B63")
          return;
        if (ctx2 = mapItemState(ctx2, setGroupId, (is) => {
          return { ...is, destroyReason: null };
        }), isDestroyEffect)
          ctx2 = removeEffect(ctx2, isDestroyEffect.id);
      }
    }), ctx2;
  if (isCoin(ctx2, itemId))
    throw new Error(`coin can not move: ${itemId}`);
  throw new Error(`moveItem unknown item: ${itemId}`);
}
function createMinusDestroyEffectAndPush(ctx2) {
  return AbsoluteBaSyouFn.getBaAll().flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).forEach((cardId) => {
    if (EffectFn.isFakeCardID(cardId))
      return ctx2;
    const cs = getItemState(ctx2, cardId);
    if (getSetGroupRoot(ctx2, cardId) != cardId)
      return;
    const runtimeCate = getItemRuntimeCategory(ctx2, cardId);
    if (runtimeCate == "ACE" || runtimeCate == "\u30E6\u30CB\u30C3\u30C8")
      ;
    else
      return;
    const [_, _2, hp] = getSetGroupBattlePoint(ctx2, cardId);
    if (hp <= 0) {
      const destroyReason = {
        id: "\u30DE\u30A4\u30CA\u30B9\u306E\u6226\u95D8\u4FEE\u6B63",
        playerID: getItemController(ctx2, cs.id)
      }, effect = createDestroyEffect(ctx2, destroyReason, cs.id);
      return ctx2 = addDestroyEffect(ctx2, effect), ctx2;
    }
    return ctx2;
  }), ctx2;
}

// src/game/gameState/doItemSetGlobalEffectsUntilEndOfTurn.ts
var exports_doItemSetGlobalEffectsUntilEndOfTurn = {};
__export(exports_doItemSetGlobalEffectsUntilEndOfTurn, {
  doItemSetGlobalEffectsUntilEndOfTurn: () => doItemSetGlobalEffectsUntilEndOfTurn
});
function doItemSetGlobalEffectsUntilEndOfTurn(ctx2, egs, [itemId, originBasyou], options) {
  if (options?.isSkipTargetMissing)
    ;
  else
    assertTargetMissingError(ctx2, [itemId, originBasyou]);
  if (isCard(ctx2, itemId) || isChip(ctx2, itemId)) {
    let cs = getItemState(ctx2, itemId);
    for (let eg of egs)
      cs = ItemStateFn.setGlobalEffect(cs, null, eg, { isRemoveOnTurnEnd: !0 });
    return ctx2 = setItemState(ctx2, itemId, cs), ctx2;
  }
  if (isCoin(ctx2, itemId))
    throw new Error(`coin can not doItemSetGlobalEffectsUntilEndOfTurn: ${itemId}`);
  throw new Error(`doItemSetGlobalEffectsUntilEndOfTurn unknown item: ${itemId}`);
}

// src/game/gameState/doPlayerDrawCard.ts
var exports_doPlayerDrawCard = {};
__export(exports_doPlayerDrawCard, {
  doPlayerDrawCard: () => doPlayerDrawCard
});
function doPlayerDrawCard(ctx2, count, playerId) {
  const fromBasyou = AbsoluteBaSyouFn.of(playerId, "\u672C\u56FD"), pairs = getItemIdsByBasyou(ctx2, fromBasyou).slice(0, count).map((cardId) => {
    return [cardId, fromBasyou];
  });
  for (let pair2 of pairs)
    ctx2 = doItemMove(ctx2, AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"), pair2);
  return ctx2;
}

// src/game/gameState/Entity.ts
var exports_Entity = {};
__export(exports_Entity, {
  createTipByEntitySearch: () => createTipByEntitySearch,
  createEntityIterator: () => createEntityIterator,
  EntityFn: () => EntityFn
});
function createEntityIterator(ctx2) {
  const destroyEffects = getCutInDestroyEffects(ctx2), rets = [];
  return [PlayerA, PlayerB].map((playerId) => {
    BaSyouKeywordFn.getAll().map((basyouKw) => {
      const basyou = AbsoluteBaSyouFn.of(playerId, basyouKw);
      getItemIdsByBasyou(ctx2, basyou).map((itemId) => {
        const item = getItem(ctx2, itemId), destroyEffect = destroyEffects.find((e) => EffectFn.getCardID(e) == itemId), entity = {
          itemController: playerId,
          itemId,
          itemState: getItemState(ctx2, itemId),
          item,
          isCard: isCard(ctx2, item.id),
          isCoin: !1,
          isChip: isChip(ctx2, item.id),
          baSyouKeyword: basyouKw,
          destroyReason: destroyEffect?.reason[0] == "Destroy" ? destroyEffect.reason[3] : null,
          prototype: getItemPrototype(ctx2, itemId)
        };
        rets.push(entity);
      });
    });
  }), getCoinIds(ctx2).map((coinId) => {
    const coin = getCoin(ctx2, coinId), entity = {
      itemController: getCoinOwner(ctx2, coin.id),
      itemId: coin.id,
      itemState: getItemState(ctx2, coin.id),
      item: coin,
      isCard: !1,
      isCoin: !0,
      isChip: !1,
      baSyouKeyword: null,
      destroyReason: null,
      prototype: null
    };
    rets.push(entity);
  }), rets;
}
function createTipByEntitySearch(ctx2, cardId, options) {
  let entityList = createEntityIterator(ctx2);
  if (options.isBattle != null)
    entityList = entityList.filter(EntityFn.filterIsBattle(ctx2, null, options.isBattle));
  if (options.isBattleWithThis != null)
    entityList = entityList.filter(EntityFn.filterIsBattle(ctx2, cardId, options.isBattleWithThis));
  const cheatCardIds = [];
  if (options.isThisCard)
    entityList = entityList.filter((entity) => entity.itemId == cardId);
  if (options.isBattleGroupFirst) {
    const basyou = getItemBaSyou(ctx2, cardId);
    if (basyou.value[1] == "\u6226\u95D8\u30A8\u30EA\u30A21" || basyou.value[1] == "\u6226\u95D8\u30A8\u30EA\u30A22") {
      const ids = lift_default(AbsoluteBaSyouFn.of)(PlayerIDFn.getAll(), ["\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22"]).flatMap((basyou2) => {
        return getItemIdsByBasyou(ctx2, basyou2).slice(0, 1);
      });
      entityList = entityList.filter((entity) => ids.includes(entity.itemId));
    } else
      entityList = [];
  }
  if (options.isThisBattleGroup) {
    const basyou = getItemBaSyou(ctx2, cardId);
    if (basyou.value[1] == "\u6226\u95D8\u30A8\u30EA\u30A21" || basyou.value[1] == "\u6226\u95D8\u30A8\u30EA\u30A22") {
      const battleGroupIds = getBattleGroup(ctx2, getItemBaSyou(ctx2, cardId));
      entityList = entityList.filter((entity) => battleGroupIds.includes(entity.itemId));
    } else
      entityList = [];
  }
  if (options.hasSelfCardId != null) {
    const absoluteBasyou = getItemBaSyou(ctx2, cardId);
    entityList = entityList.filter(EntityFn.filterController(AbsoluteBaSyouFn.getPlayerID(absoluteBasyou))), entityList = entityList.filter(EntityFn.filterAtBaSyous([AbsoluteBaSyouFn.getBaSyouKeyword(absoluteBasyou)]));
  }
  if (options.see) {
    const [basyou, min, max] = options.see, absoluteBasyou = createAbsoluteBaSyouFromBaSyou(ctx2, cardId, basyou);
    if (entityList = entityList.filter(EntityFn.filterController(AbsoluteBaSyouFn.getPlayerID(absoluteBasyou))), entityList = entityList.filter(EntityFn.filterAtBaSyous([AbsoluteBaSyouFn.getBaSyouKeyword(absoluteBasyou)])), entityList.length < min)
      throw new TipError(`must at least ${min} for see`);
    cheatCardIds.push(...entityList.map((e) => e.itemId).slice(0, max)), entityList = entityList.slice(0, max);
  }
  if (options.isCanSetCharacter != null)
    entityList = entityList.filter(EntityFn.filterIsSetGroupRoot(ctx2, !0)).filter(EntityFn.filterCanSetCharacter(ctx2));
  else if (options.is?.includes("\u30E6\u30CB\u30C3\u30C8"))
    entityList = entityList.filter(EntityFn.filterIsSetGroupRoot(ctx2, !0));
  else if (options.isSetGroup != null)
    entityList = entityList.filter(EntityFn.filterIsSetGroupRoot(ctx2, options.isSetGroup));
  if (options.compareBattlePoint) {
    entityList = entityList.filter(EntityFn.filterIsSetGroupRoot(ctx2, !0));
    const [kw, op, value] = options.compareBattlePoint;
    entityList = entityList.filter((entity) => {
      const [atk, range3, hp] = getSetGroupBattlePoint(ctx2, entity.itemId);
      switch (kw) {
        case "\u653B\u6483\u529B":
          switch (op) {
            case "<=":
              return atk <= value;
            case ">=":
              return atk >= value;
            case "==":
              return atk == value;
          }
        case "\u9632\u5FA1\u529B":
          switch (op) {
            case "<=":
              return hp <= value;
            case ">=":
              return hp >= value;
            case "==":
              return hp == value;
          }
        case "\u5408\u8A08\u56FD\u529B": {
          const totalCost = getCardTotalCostLength(ctx2, entity.itemId);
          switch (op) {
            case "<=":
              return totalCost <= value;
            case ">=":
              return totalCost >= value;
            case "==":
              return totalCost == value;
          }
        }
      }
      return !1;
    });
  }
  if (options.isMaster != null)
    entityList = entityList.filter((entity) => isCardMaster(ctx2, getSetGroupRoot(ctx2, entity.itemId), entity.itemId));
  if (options.title)
    entityList = entityList.filter((entity) => options.title?.includes(entity.prototype?.title || ""));
  if (options.at?.length)
    entityList = entityList.filter(EntityFn.filterAtBaSyous(options.at));
  if (options.atBa != null)
    entityList = entityList.filter(EntityFn.filterAtBaSyous(BaSyouKeywordFn.getBaAll()));
  if (options.side) {
    const cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(options.side || "\u81EA\u8ECD", cardController);
    entityList = entityList.filter(EntityFn.filterController(playerId));
  }
  if (options.is?.length)
    entityList = entityList.filter(EntityFn.filterRuntimeCategory(ctx2, options.is));
  if (options.cardCategory?.length)
    entityList = entityList.filter(EntityFn.filterCategory(ctx2, options.cardCategory));
  if (options.color?.length)
    entityList = entityList.filter(EntityFn.filterItemColor(ctx2, options.color));
  if (options.hasSetCard != null)
    entityList = entityList.filter(EntityFn.filterHasSetCard(ctx2, options.hasSetCard));
  if (options.isDestroy != null)
    entityList = entityList.filter(EntityFn.filterIsDestroy(options.isDestroy));
  if (options.hasSpecialEffect != null)
    entityList = entityList.filter(EntityFn.filterHasSpecialEffect(ctx2, options.hasSpecialEffect));
  if (options.hasChar != null)
    entityList = entityList.filter(EntityFn.filterHasChar(ctx2, options.hasChar));
  if (options.hasGSignProperty)
    entityList = entityList.filter((entity) => isCardLike(ctx2)(entity.itemId) && options.hasGSignProperty?.includes(getCardGSignProperty(ctx2, entity.itemId)));
  if (options.exceptCardIds?.length)
    entityList = entityList.filter((entity) => options.exceptCardIds?.includes(entity.itemId) != !0);
  entityList = entityList.filter(EntityFn.filterDistinct);
  const pairs = entityList.map((entity) => {
    if (entity.baSyouKeyword == null)
      throw new Error;
    return [entity.itemId, AbsoluteBaSyouFn.of(entity.itemController, entity.baSyouKeyword)];
  });
  let tipPairs = pairs;
  if (options.max != null)
    tipPairs = tipPairs.slice(0, options.max);
  else if (options.min != null)
    tipPairs = tipPairs.slice(0, options.min);
  else if (options.count != null)
    tipPairs = tipPairs.slice(0, options.count);
  if (options.isRepeat) {
    if (options.count == null)
      throw new Error;
    if (tipPairs.length > 0) {
      while (tipPairs.length < options.count)
        tipPairs = [...tipPairs, ...tipPairs];
      tipPairs = tipPairs.slice(0, options.count);
    }
  }
  const tip = {
    title: ["\u30AB\u30FC\u30C9", pairs, tipPairs],
    isRepeat: options.isRepeat
  };
  if (options.min != null)
    tip.min = options.min;
  if (options.max != null)
    tip.max = options.max;
  if (options.count != null)
    tip.count = options.count;
  if (cheatCardIds.length)
    tip.cheatCardIds = cheatCardIds;
  if (options.asMuchAsPossible) {
    if (options.max == null)
      throw new Error;
    tip.min = Math.min(pairs.length, options.max);
  }
  return tip;
}
var EntityFn = {
  filterAtBaSyous(kws) {
    return (entity) => {
      if (entity.baSyouKeyword == null)
        return !1;
      return kws.includes(entity.baSyouKeyword);
    };
  },
  filterAtBattleArea(v) {
    return (entity) => {
      return (entity.baSyouKeyword == "\u6226\u95D8\u30A8\u30EA\u30A21" || entity.baSyouKeyword == "\u6226\u95D8\u30A8\u30EA\u30A22") == v;
    };
  },
  filterAtBa(v) {
    return (entity) => {
      if (entity.baSyouKeyword == null)
        return !1;
      return BaSyouKeywordFn.isBa(entity.baSyouKeyword) == v;
    };
  },
  filterController(playerId) {
    return (entity) => {
      return entity.itemController == playerId;
    };
  },
  filterIsDestroy(v) {
    return (entity) => {
      return (entity.destroyReason != null && entity.destroyReason.id != "\u30DE\u30A4\u30CA\u30B9\u306E\u6226\u95D8\u4FEE\u6B63") == v;
    };
  },
  filterIsBattle(ctx2, targetId, v) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return isBattle(ctx2, entity.itemId, targetId) == v;
    };
  },
  filterRuntimeCategory(ctx2, category) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return category.includes(getItemRuntimeCategory(ctx2, entity.itemId));
    };
  },
  filterCategory(ctx2, category) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      const targetCate = getItemPrototype(ctx2, entity.itemId).category;
      if (targetCate == null)
        return !1;
      return category.includes(targetCate);
    };
  },
  filterItemController(ctx2, playerId) {
    return (entity) => {
      return getItemController(ctx2, entity.itemId) == playerId;
    };
  },
  filterItemColor(ctx2, color) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return color.includes(getCardColor(ctx2, entity.itemId));
    };
  },
  filterIsSetGroupRoot(ctx2, v) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return getSetGroupRoot(ctx2, entity.itemId) == entity.itemId == v;
    };
  },
  filterCanSetCharacter(ctx2) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return getSetGroup(ctx2, entity.itemId).filter((itemId) => getItemRuntimeCategory(ctx2, itemId) == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC").length == 0;
    };
  },
  filterHasSetCard(ctx2, v) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return getSetGroup(ctx2, entity.itemId).length > 1 == v;
    };
  },
  filterHasSpecialEffect(ctx2, vs) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return vs.some((v) => isSetGroupHasA(ctx2, v, entity.itemId));
    };
  },
  filterHasChar(ctx2, vs) {
    return (entity) => {
      if (isCardLike(ctx2)(entity.itemId) == !1)
        return !1;
      return vs.some((v) => getItemCharacteristic(ctx2, entity.itemId).indexOf(v) != -1);
    };
  },
  filterDistinct(cet, index, self) {
    return index === self.findIndex((c) => c.itemId === cet.itemId);
  }
};

// src/game/gameState/createActionTitleFn.ts
function createPlayerIdFromRelated2(ctx2, cardId, re) {
  switch (re) {
    case "\u81EA\u8ECD":
      return getItemController(ctx2, cardId);
    case "\u6575\u8ECD":
      return PlayerIDFn.getOpponent(getItemController(ctx2, cardId));
    case "\u6301\u3061\u4E3B":
      return getItemOwner(ctx2, cardId);
  }
}
function createAbsoluteBaSyouFromBaSyou(ctx2, cardId, re) {
  if (re.id == "AbsoluteBaSyou")
    return re;
  return AbsoluteBaSyouFn.of(createPlayerIdFromRelated2(ctx2, cardId, re.value[0]), re.value[1]);
}
function createActionTitleFn(action) {
  if (typeof action.title == "string")
    return ActionFn.getTitleFn(action);
  switch (action.title[0]) {
    case "\u540C\u56DE\u5408\u4E0A\u9650": {
      const [_, times3] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), ps = getItemState(ctx2, cardId);
        if (effect.text.isEachTime)
          ;
        else if ((ps.textIdsUseThisTurn || []).filter((tid) => tid == effect.text.id).length >= times3)
          throw new TipError(`\u540C\u56DE\u5408\u4E0A\u9650: ${effect.text.description}`);
        return ctx2 = mapItemState(ctx2, cardId, (ps2) => {
          return {
            ...ps2,
            textIdsUseThisTurn: [effect.text.id, ...ps2.textIdsUseThisTurn || []]
          };
        }), ctx2;
      };
    }
    case "Entity": {
      const [_, options] = action.title;
      if ([options.max, options.min, options.count].every((v) => v == null))
        throw new Error("Entity search must has one of min, max, count");
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), tip = createTipByEntitySearch(ctx2, cardId, options), error = TipFn.checkTipSatisfies(tip);
        if (error)
          throw error;
        return ctx2;
      };
    }
    case "\u3053\u306E\u8A18\u8FF0\u306E\u52B9\u679C\u306F\u3001\u30D7\u30EC\u30A4\u30E4\u30FC\u6BCE\u306B\uFF11\u30BF\u30FC\u30F3\u306B\uFF11\u56DE\u307E\u3067\u89E3\u6C7A\u3067\u304D\u308B":
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId);
        if (getPlayerState(ctx2, cardController).textIdsUseThisTurn[effect.text.id])
          throw new TargetMissingError("\u3053\u306E\u8A18\u8FF0\u306E\u52B9\u679C\u306F\u3001\u30D7\u30EC\u30A4\u30E4\u30FC\u6BCE\u306B\uFF11\u30BF\u30FC\u30F3\u306B\uFF11\u56DE\u307E\u3067\u89E3\u6C7A\u3067\u304D\u308B");
        return ctx2 = mapPlayerState(ctx2, cardController, (ps) => ({
          ...ps,
          textIdsUseThisTurn: {
            ...ps.textIdsUseThisTurn,
            [effect.text.id]: !0
          }
        })), ctx2;
      };
    case "_\u81EA\u8ECD_\u672C\u56FD\u3092\u30B7\u30E3\u30C3\u30D5\u30EB\u3059\u308B": {
      const [_, side, basyouKw] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = createPlayerIdFromRelated2(ctx2, cardId, side), basyou = AbsoluteBaSyouFn.of(playerId, basyouKw);
        return ctx2 = shuffleItems(ctx2, basyou), ctx2;
      };
    }
    case "Action": {
      const [_, options] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), pairs = varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        });
        for (let pair2 of pairs)
          if (options.move)
            ctx2 = doItemMove(ctx2, createAbsoluteBaSyouFromBaSyou(ctx2, cardId, options.move), pair2);
        return ctx2;
      };
    }
    case "triggerEvent": {
      const [_, event] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        return ctx2 = doTriggerEvent(ctx2, { ...event, effect, cardIds: [cardId] }), ctx2;
      };
    }
    case "cutIn": {
      const [_, actions] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        return ctx2 = addStackEffect(ctx2, {
          id: "",
          description: effect.text.description,
          reason: ["PlayText", EffectFn.getPlayerID(effect), cardId, effect.text.id],
          text: {
            id: effect.text.id,
            description: effect.text.description,
            title: [],
            logicTreeActions: [
              {
                actions
              }
            ]
          }
        }), ctx2;
      };
    }
    case "_\u30ED\u30FC\u30EB\u3059\u308B": {
      const [_, whatToDo] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), pairs = varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        });
        switch (whatToDo) {
          case "\u30ED\u30FC\u30EB": {
            for (let pair2 of pairs)
              ctx2 = doItemSetRollState(ctx2, !0, pair2);
            return ctx2;
          }
          case "\u30EA\u30ED\u30FC\u30EB": {
            for (let pair2 of pairs)
              ctx2 = doItemSetRollState(ctx2, !1, pair2);
            return ctx2;
          }
          case "\u6253\u958B": {
            for (let pair2 of pairs)
              assertTargetMissingError(ctx2, pair2), ctx2 = mapItemState(ctx2, pair2[0], (is) => ({ ...is, isOpenForGain: !0 }));
            return ctx2;
          }
          case "\u7834\u58DE": {
            for (let pair2 of pairs)
              ctx2 = doItemSetDestroy(ctx2, { id: "\u7834\u58CA\u3059\u308B", playerID: cardController }, pair2);
            return ctx2;
          }
          case "\u5EC3\u68C4": {
            for (let pair2 of pairs)
              ctx2 = doItemMove(ctx2, AbsoluteBaSyouFn.setBaSyouKeyword(pair2[1], "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"), pair2);
            return ctx2;
          }
          case "\u7834\u58CA\u3092\u7121\u52B9": {
            for (let pair2 of pairs)
              ctx2 = doItemSetDestroy(ctx2, null, pair2);
            return ctx2;
          }
          case "\u898B": {
            for (let pair2 of pairs)
              ctx2 = mapItemState(ctx2, pair2[0], (is) => ({ ...is, isCheat: !0 }));
            return ctx2;
          }
        }
      };
    }
    case "_\u6575\u8ECD\u672C\u56FD\u306B_\uFF11\u30C0\u30E1\u30FC\u30B8": {
      const [_, side, damage] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController);
        return ctx2 = doCountryDamage(ctx2, playerId, damage), ctx2;
      };
    }
    case "_\u306E_\u30CF\u30F3\u30AC\u30FC\u306B\u79FB\u3059": {
      const [_, side, basyouKw] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), pairs = varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        }), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController), to = AbsoluteBaSyouFn.of(playerId, basyouKw);
        for (let pair2 of pairs)
          ctx2 = doItemMove(ctx2, to, pair2);
        return ctx2;
      };
    }
    case "\u770B\u81EA\u5DF1_\u672C\u570B\u5168\u90E8\u7684\u5361": {
      const [_, basyouKw] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId);
        for (let itemId of getItemIdsByBasyou(ctx2, AbsoluteBaSyouFn.of(cardController, basyouKw)))
          ctx2 = mapItemState(ctx2, itemId, (is) => ({ ...is, isCheat: !0 }));
        return ctx2;
      };
    }
    case "_\uFF11\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B": {
      const [_, damage] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId);
        return ctx2 = (varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        })).reduce((ctx3, pair2) => {
          return doItemDamage(ctx3, cardController, damage, pair2);
        }, ctx2), ctx2;
      };
    }
    case "_\uFF11\u8CAB\u901A\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u308B": {
      const [_, damage] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), basyous = varNames2 == null ? [getItemBaSyou(ctx2, cardId)] : varNames2.flatMap((varName) => {
          return getCardTipSelection(ctx2, varName, cardId, { assertTitle: ["BaSyou", [], []] });
        }), [nextCtx, _2] = doBattleDamage(ctx2, cardController, basyous.flatMap((basyou) => getBattleGroup(ctx2, basyou)), damage, { isNotRule: !0 });
        return ctx2 = nextCtx, ctx2;
      };
    }
    case "_\uFF0D\uFF11\uFF0F\uFF0D\uFF11\uFF0F\uFF0D\uFF11\u30B3\u30A4\u30F3_\uFF11\u500B\u3092\u4E57\u305B\u308B": {
      const [_, bonus, x] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = EffectFn.getPlayerID(effect), pairs = varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        });
        if (pairs.length == 0)
          throw new Error(`pairs must not 0: ${action.title} ${action.vars}`);
        const [targetCardId, targetBasyou] = pairs[0], coins = range_default(0, x).map((i) => CoinFn.battleBonus(playerId, bonus));
        return ctx2 = addCoinsToCard(ctx2, [targetCardId, targetBasyou], coins), ctx2;
      };
    }
    case "\u79FB\u9664\u5361\u72C0\u614B_\u65D7\u6A19": {
      const [_, flagName] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        let cardState = getItemState(ctx2, cardId);
        return cardState = ItemStateFn.removeFlag(cardState, flagName), ctx2 = setItemState(ctx2, cardId, cardState), ctx2;
      };
    }
    case "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642\u307E\u3067\u300C\u901F\u653B\u300D\u3092\u5F97\u308B\u3002": {
      const [_, ges] = action.title, varNames2 = action.vars;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), pairs = varNames2 == null ? [[cardId, getItemBaSyou(ctx2, cardId)]] : varNames2.flatMap((varName) => {
          return getCardTipStrBaSyouPairs(ctx2, varName, cardId);
        });
        for (let [targetCardId, targetBaSyou] of pairs) {
          const gesForCard = ges.map((ge) => {
            return {
              ...ge,
              cardIds: [targetCardId]
            };
          });
          ctx2 = doItemSetGlobalEffectsUntilEndOfTurn(ctx2, gesForCard, [targetCardId, targetBaSyou]);
        }
        return ctx2;
      };
    }
    case "\u30AB\u30FC\u30C9_\uFF11\u679A\u3092\u5F15\u304F": {
      const [_, count] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId);
        return ctx2 = doPlayerDrawCard(ctx2, count, cardController), ctx2;
      };
    }
    case "\u30EA\u30ED\u30FC\u30EB\u72B6\u614B\u3067\u7F6E\u304D\u63DB\u3048\u308B":
      const varNames = action.vars;
      if (varNames == null)
        throw new Error(`action.var not found: ${action.title[0]}`);
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), [target1] = getCardTipStrBaSyouPairs(ctx2, varNames[0], cardId), [target2] = getCardTipStrBaSyouPairs(ctx2, varNames[1], cardId);
        return ctx2 = doItemSwap(ctx2, target1, target2), ctx2 = doItemSetRollState(ctx2, !1, target2, { isSkipTargetMissing: !0 }), ctx2;
      };
    case "\u5408\u8A08\u56FD\u529B\u3014x\u3015": {
      const [_, x] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), cardIdsCanPay = getCardIdsCanPayRollCost(ctx2, cardController, null);
        if (cardIdsCanPay.length < x)
          throw new TargetMissingError(`\u5408\u8A08\u56FD\u529B\u3014x\u3015:${cardIdsCanPay.length} < ${x}. ${effect.text.description}`);
        return ctx2 = setCardTipStrBaSyouPairs(ctx2, TipFn.createTotalCostKey(), cardIdsCanPay.map((cardId2) => createStrBaSyouPair(ctx2, cardId2)), cardId), ctx2;
      };
    }
    case "_\u6575\u8ECD_\u30E6\u30CB\u30C3\u30C8\u304C_\u6226\u95D8\u30A8\u30EA\u30A2\u306B\u3044\u308B\u5834\u5408": {
      const [_, side, category, areas] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], areas).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category).map((cardId2) => [cardId2, basyou]));
        if (pairs.length == 0)
          throw new TargetMissingError(`${action.title[0]} ${pairs.length}`);
        return ctx2;
      };
    }
    case "\u9019\u5F35\u5361\u5728_\u6230\u5340\u7684\u5834\u5408": {
      const [_, areas] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), from = getItemBaSyou(ctx2, cardId);
        if (areas.includes(AbsoluteBaSyouFn.getBaSyouKeyword(from)))
          ;
        else
          throw new TargetMissingError(`${action.title} ${cardId} not in ${JSON.stringify(areas)}`);
        return ctx2;
      };
    }
    case "_\u9ED2\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064_\u81EA\u8ECD_G\u304C_\uFF15\u679A\u4EE5\u4E0A\u3042\u308B\u5834\u5408": {
      const [_, color, side, category, count] = action.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController), gsignCount = getItemIdsByPlayerId(ctx2, !1, playerId).filter((itemId) => getItemPrototype(ctx2, itemId).gsign?.[0].includes(color)).filter((itemId) => getItemRuntimeCategory(ctx2, itemId) == category).length;
        if (gsignCount < count)
          throw new TargetMissingError(`you have ${gsignCount}. must ${count}: ${action.title[0]}`);
        return ctx2;
      };
    }
  }
}

// src/game/gameState/createOnEventTitleFn.ts
function createOnEventTitleFn(text) {
  if (text.onEvent == null || typeof text.onEvent == "string")
    return CardTextFn.getOnEventFn(text);
  switch (text.onEvent[0]) {
    case "GameEventOnTimingDoAction": {
      const [_, timing, action] = text.onEvent;
      return function(ctx2, effect) {
        const event = EffectFn.getEvent(effect);
        if (event.title[0] == "GameEventOnTiming" && PhaseFn.eq(event.title[1], timing))
          return createActionTitleFn(action)(ctx2, effect, null);
        return ctx2;
      };
    }
  }
}

// src/game/gameState/doTriggerEvent.ts
function doTriggerEvent(ctx2, event) {
  logCategory("doTriggerEvent", event.title, event.cardIds);
  const bridge = createBridge();
  if (createAllCardTexts(ctx2, null).forEach((info) => {
    const [item, texts] = info;
    texts.forEach((text) => {
      const effect = {
        id: `doTriggerEvent_${item.id}_${text.id}`,
        reason: ["Event", getItemController(ctx2, item.id), item.id, event],
        text
      };
      ctx2 = createOnEventTitleFn(text)(ctx2, effect, bridge);
    });
  }), event.title[0] == "\u30AB\u30C3\u30C8\u7D42\u4E86\u6642")
    ctx2 = mapItemStateValues(ctx2, (cs) => {
      return ItemStateFn.onCutEnd(cs);
    });
  if (event.title[0] == "GameEventOnTiming") {
    const onPhase = event.title[1];
    if (onPhase[0] == "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA" && onPhase[1] == "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642")
      switch (onPhase[2]) {
        case "\u30C0\u30E1\u30FC\u30B8\u30EA\u30BB\u30C3\u30C8":
          ctx2 = mapItemStateValues(ctx2, (cs) => {
            return ItemStateFn.onDamageReset(cs);
          });
          break;
        case "\u52B9\u679C\u89E3\u6C7A":
        case "\u624B\u672D\u8ABF\u6574":
          break;
        case "\u52B9\u679C\u7D42\u4E86\u3002\u30BF\u30FC\u30F3\u7D42\u4E86": {
          ctx2 = mapItemStateValues(ctx2, (cs) => {
            return ItemStateFn.onTurnEnd(cs);
          });
          const activePlayerId = getActivePlayerID(ctx2);
          ctx2 = mapPlayerState(ctx2, activePlayerId, (ps) => {
            return PlayerStateFn.onTurnEnd(ps);
          });
          break;
        }
      }
  }
  return ctx2 = EventCenterFn.onEvent(ctx2, event), ctx2;
}

// src/game/gameState/player.ts
function isPlayerHasBattleGroup(ctx2, playerId) {
  return pipe(always_default([
    AbsoluteBaSyouFn.of(playerId, "\u6226\u95D8\u30A8\u30EA\u30A22"),
    AbsoluteBaSyouFn.of(playerId, "\u6226\u95D8\u30A8\u30EA\u30A21")
  ]), map_default((baSyou) => getItemIdsByBasyou(ctx2, baSyou).length), sum_default)() > 0;
}
function doBattleDamage(ctx2, playerId, guardUnits, attackPower, options) {
  if (guardUnits.length)
    ctx2 = guardUnits.map((cardID) => {
      const cs = getItemState(ctx2, cardID);
      if (attackPower <= 0)
        return cs;
      const [_, _2, hp] = getSetGroupBattlePoint(ctx2, cardID), live = hp - cs.damage;
      if (live <= 0)
        return cs;
      if (attackPower -= live, attackPower >= 0) {
        const reason = {
          id: "\u6226\u95D8\u30C0\u30E1\u30FC\u30B8",
          playerID: playerId
        };
        return ctx2 = doItemSetDestroy(ctx2, reason, createStrBaSyouPair(ctx2, cardID), { isSkipTargetMissing: !0 }), {
          ...cs,
          damage: hp,
          destroyReason: reason
        };
      }
      const nextLive = -attackPower, nextDamage = hp - nextLive;
      attackPower = 0;
      const gameEvent = {
        title: ["\u6226\u95D8\u30C0\u30E1\u30FC\u30B8\u3092\u53D7\u3051\u305F\u5834\u5408", { isNotRule: options?.isNotRule }],
        cardIds: [cs.id],
        playerId
      };
      return ctx2 = doTriggerEvent(ctx2, gameEvent), {
        ...cs,
        damage: nextDamage
      };
    }).reduce((ctx3, cs) => {
      return setItemState(ctx3, cs.id, cs);
    }, ctx2);
  return [ctx2, attackPower];
}
function doRuleBattleDamage2(ctx2, speedPhase, currentAttackPlayerID, currentGuardPlayerID, willAttackUnits, willGuardUnits, willAttackPower) {
  if (logCategory("handleAttackDamage", "speed", speedPhase), logCategory("handleAttackDamage", "willAttackUnits", willAttackUnits), logCategory("handleAttackDamage", "willGuardUnits", willGuardUnits), logCategory("handleAttackDamage", "willAttackPower", willAttackPower), willAttackUnits.length) {
    const hasSpeedAttack = isBattleGroupHasA(ctx2, ["\u901F\u653B"], willAttackUnits[0]);
    if (hasSpeedAttack && speedPhase == 1 || hasSpeedAttack == !1 && speedPhase == 2) {
      let currentAttackPower = willAttackPower;
      if (logCategory("handleAttackDamage", "attack", currentAttackPower), willGuardUnits.length)
        [ctx2, currentAttackPower] = doBattleDamage(ctx2, currentAttackPlayerID, willGuardUnits, currentAttackPower);
      if (currentAttackPlayerID == getActivePlayerID(ctx2) && currentAttackPower > 0) {
        if (isBattle(ctx2, willAttackUnits[0], null) == !1 || isBattleGroupHasA(ctx2, ["\u5F37\u8972"], willAttackUnits[0]))
          ctx2 = doCountryDamage(ctx2, currentGuardPlayerID, currentAttackPower), ctx2 = doTriggerEvent(ctx2, {
            title: ["\u3053\u306E\u30AB\u30FC\u30C9\u306E\u90E8\u968A\u304C\u6575\u8ECD\u672C\u56FD\u306B\u6226\u95D8\u30C0\u30E1\u30FC\u30B8\u3092\u4E0E\u3048\u305F\u5834\u5408"],
            cardIds: willAttackUnits
          });
      }
    }
  }
  return ctx2;
}
function doPlayerAttack(ctx2, attackPlayerID, where, speedPhase) {
  const guardPlayerID = PlayerIDFn.getOpponent(attackPlayerID), attackUnits = getBattleGroup(ctx2, AbsoluteBaSyouFn.of(attackPlayerID, where)), attackPower = getBattleGroupBattlePoint(ctx2, attackUnits), guardUnits = getBattleGroup(ctx2, AbsoluteBaSyouFn.of(guardPlayerID, where)), guardPower = getBattleGroupBattlePoint(ctx2, guardUnits);
  return ctx2 = doRuleBattleDamage2(ctx2, speedPhase, attackPlayerID, guardPlayerID, attackUnits, guardUnits, attackPower), ctx2 = doRuleBattleDamage2(ctx2, speedPhase, guardPlayerID, attackPlayerID, guardUnits, attackUnits, guardPower), [...attackUnits, ...guardUnits].forEach((cardId) => {
    const itemState = getItemState(ctx2, cardId), [_, _2, hp] = getSetGroupBattlePoint(ctx2, cardId);
    if (hp <= itemState.damage)
      ctx2 = addDestroyEffect(ctx2, createDestroyEffect(ctx2, { id: "\u6226\u95D8\u30C0\u30E1\u30FC\u30B8", playerID: PlayerIDFn.getOpponent(getItemController(ctx2, cardId)) }, cardId));
  }), ctx2;
}
function getPlayerGIds(ctx2, playerId) {
  return getItemIdsByBasyou(ctx2, AbsoluteBaSyouFn.of(playerId, "G\u30BE\u30FC\u30F3"));
}
function getPlayerHandIds(ctx2, playerId) {
  return getItemIdsByBasyou(ctx2, AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"));
}
function getPlayerJunkyardIds(ctx2, playerId) {
  return getItemIdsByBasyou(ctx2, AbsoluteBaSyouFn.of(playerId, "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"));
}
function getPlayerDestroyIds(ctx2, playerId) {
  return getCutInDestroyEffects(ctx2).map((e) => EffectFn.getCardID(e)).filter((itemId) => getItemController(ctx2, itemId) == playerId);
}
function getPlayerUnitIds(ctx2, playerId) {
  return lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).filter((itemId) => getItemPrototype(ctx2, itemId).category == "\u30E6\u30CB\u30C3\u30C8");
}
function getPlayerCharacterIds(ctx2, playerId) {
  return lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).filter((itemId) => getItemPrototype(ctx2, itemId).category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC");
}
function getPlayerOperationIds(ctx2, playerId) {
  return lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).filter((itemId) => getItemPrototype(ctx2, itemId).category == "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3");
}
function createPlayerScore(ctx2, playerId) {
  const units = getPlayerUnitIds(ctx2, playerId), chars = getPlayerCharacterIds(ctx2, playerId), gs = getPlayerGIds(ctx2, playerId), ops = getPlayerOperationIds(ctx2, playerId), hands = getPlayerHandIds(ctx2, playerId), destroyIds = ctx2.destroyEffect.filter((eid) => getItemController(ctx2, EffectFn.getCardID(getEffect(ctx2, eid))) == playerId), junkyardIds = getPlayerJunkyardIds(ctx2, playerId), gScore = gs.length * 3, unitScore = units.length * 5, charScore = chars.length, opScore = Math.max(3, ops.length) * 3, handScore = hands.length * 3, destroyScore = destroyIds.length * -10, junkyardScore = junkyardIds.length * -1, rollScore = [...gs, ...units].filter((itemId) => getCard(ctx2, itemId).isRoll).length * -5, bpScore = units.map((id) => {
    if (getCard(ctx2, id).isRoll)
      return 0;
    const [atk, range3, hp] = getSetGroupBattlePoint(ctx2, id);
    return atk + range3 + hp;
  }).reduce((acc, c) => acc + c, 0), specialScore1 = units.filter((id) => getCardHasSpeicalEffect(ctx2, ["\u901F\u653B"], id)).length * 2, specialScore2 = units.filter((id) => getCardHasSpeicalEffect(ctx2, ["\u9AD8\u6A5F\u52D5"], id)).length * 2, specialScore3 = units.filter((id) => getCardHasSpeicalEffect(ctx2, ["\u5F37\u8972"], id)).length * 2, total = gScore + unitScore + charScore + opScore + handScore + destroyScore + junkyardScore + rollScore + bpScore + specialScore1 + specialScore2 + specialScore3;
  return logCategory("createPlayerScore", "=======", playerId), logCategory("createPlayerScore", "gScore:", gScore), logCategory("createPlayerScore", "unitScore:", unitScore), logCategory("createPlayerScore", "charScore:", charScore), logCategory("createPlayerScore", "opScore:", opScore), logCategory("createPlayerScore", "handScore:", handScore), logCategory("createPlayerScore", "destroyScore:", destroyScore), logCategory("createPlayerScore", "junkyardScore:", junkyardScore), logCategory("createPlayerScore", "rollScore:", rollScore), logCategory("createPlayerScore", "bpScore:", bpScore), logCategory("createPlayerScore", "specialScore1:", specialScore1), logCategory("createPlayerScore", "specialScore2:", specialScore2), logCategory("createPlayerScore", "specialScore3:", specialScore3), logCategory("createPlayerScore", "total:", total), total;
}
function createPreviewEffectScore(ctx2, playerId, effects, options) {
  const opponentId = PlayerIDFn.getOpponent(playerId), scoreA = createPlayerScore(ctx2, playerId), scoreB = createPlayerScore(ctx2, opponentId), score = scoreA - scoreB;
  let effectScorePairs = effects.map((eff) => {
    try {
      let ctx22 = JSON.parse(JSON.stringify(ctx2));
      ctx22.stackEffect = [], ctx22.immediateEffect = [], ctx22 = setTipSelectionForUser(ctx22, eff, 0, 0), ctx22 = doEffect(ctx22, eff, 0, 0);
      for (let i = 0;i < 99; ++i) {
        let eff2 = getTopEffect(ctx22);
        if (eff2 == null)
          break;
        ctx22 = setTipSelectionForUser(ctx22, eff2, 0, 0), ctx22 = doEffect(ctx22, eff2, 0, 0), ctx22 = removeEffect(ctx22, eff2.id);
      }
      for (let i = 0;i < 99; ++i) {
        const eff2 = getImmediateEffects(ctx22)[0];
        if (eff2 == null)
          break;
        ctx22 = setTipSelectionForUser(ctx22, eff2, 0, 0), ctx22 = doEffect(ctx22, eff2, 0, 0), ctx22 = removeEffect(ctx22, eff2.id);
      }
      const scoreA2 = createPlayerScore(ctx22, playerId), scoreB2 = createPlayerScore(ctx22, opponentId), score2 = scoreA2 - scoreB2;
      return [eff.id, score2];
    } catch (e) {
      console.warn(`AI\u8A08\u7B97\u6642\u4F8B\u5916\uFF0C\u5FFD\u7565:${e.message}`);
    }
    return [eff.id, 0];
  });
  if (effectScorePairs.sort(([_, s1], [_2, s2]) => s2 - s1), options?.isMoreThenOrigin)
    effectScorePairs = effectScorePairs.filter(([_, s]) => s >= score);
  return effectScorePairs;
}

// src/game/gameState/RuntimeBattleAreaComponent.ts
var exports_RuntimeBattleAreaComponent = {};
__export(exports_RuntimeBattleAreaComponent, {
  getRuntimeBattleArea: () => getRuntimeBattleArea
});
function getRuntimeBattleArea(ctx2, kw) {
  switch (kw) {
    case "\u6226\u95D8\u30A8\u30EA\u30A21":
      return "\u5730\u7403\u30A8\u30EA\u30A2";
    case "\u6226\u95D8\u30A8\u30EA\u30A22":
      return "\u5B87\u5B99\u30A8\u30EA\u30A2";
    default:
      throw new Error(`unknown :${kw}`);
  }
}

// src/game/gameState/createPlayCardEffects.ts
var exports_createPlayCardEffects = {};
__export(exports_createPlayCardEffects, {
  createUnitGoStageEffectFromPlayEffect: () => createUnitGoStageEffectFromPlayEffect,
  createRollCostConditions: () => createRollCostConditions,
  createPlayCardEffects: () => createPlayCardEffects,
  createCharOpUnitGoStageEffectFromPlayEffect: () => createCharOpUnitGoStageEffectFromPlayEffect
});
function createRollCostConditions(ctx2, proto, rollCost, bonus) {
  if (rollCost == "X") {
    if (proto.color == null)
      throw new Error;
    return {
      [TipFn.createConditionKeyOfPayColorX(proto)]: {
        title: ["RollColor", proto.color]
      }
    };
  }
  return CardColorFn.getAll().map((tc) => createRollCostRequire(Math.max(0, rollCost.filter((c) => c == tc).length + bonus), tc)).reduce((ctx3, cons) => ({ ...ctx3, ...cons }));
}
function createPlayCardEffects(ctx2, cardId) {
  const ret = [], prototype = getItemPrototype(ctx2, cardId), playerId = getItemOwner(ctx2, cardId), cardRollCostLength = getCardTotalCostLength(ctx2, cardId), costConditions = prototype.category != "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF" ? {
    "\u5408\u8A08\u56FD\u529B\u3014x\u3015": {
      actions: [
        {
          title: ["\u5408\u8A08\u56FD\u529B\u3014x\u3015", cardRollCostLength]
        }
      ]
    }
  } : {}, rollCostConditions = createRollCostConditions(ctx2, prototype, prototype.rollCost || [], 0);
  {
    const text = prototype.texts?.find((text2) => text2.description == "\u300E\u6052\u5E38\u300F\uFF1A\u3053\u306E\u30AB\u30FC\u30C9\u306F\u3001\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u72B6\u614B\u3067\u30D7\u30EC\u30A4\u3059\u308B\u5834\u5408\u3001\u30BB\u30C3\u30C8\u5148\u3068\u3057\u3066\u3001\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3068\u540C\u3058\u5C5E\u6027\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u3092\u3001\u81EA\u8ECD\u914D\u5099\u30A8\u30EA\u30A2\u306B\u30ED\u30FC\u30EB\u72B6\u614B\u3067\u51FA\u3057\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3092\u30BB\u30C3\u30C8\u3067\u304D\u308B\u3002");
    if (text && getItemBaSyou(ctx2, cardId).value[1] == "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9") {
      const effect = {
        id: `createPlayCardEffects_${cardId}_\u300E\u6052\u5E38\u300F\uFF1A\u3053\u306E\u30AB\u30FC\u30C9\u306F\u3001\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u72B6\u614B\u3067\u30D7\u30EC\u30A4\u3059\u308B\u5834\u5408\u3001\u30BB\u30C3\u30C8\u5148\u3068\u3057\u3066\u3001\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3068\u540C\u3058\u5C5E\u6027\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064\u30E6\u30CB\u30C3\u30C8\uFF11\u679A\u3092\u3001\u81EA\u8ECD\u914D\u5099\u30A8\u30EA\u30A2\u306B\u30ED\u30FC\u30EB\u72B6\u614B\u3067\u51FA\u3057\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3092\u30BB\u30C3\u30C8\u3067\u304D\u308B\u3002`,
        reason: ["PlayCard", playerId, cardId, { isPlayCharacter: !0 }],
        description: text.description,
        isOption: !0,
        text: {
          id: text.id,
          title: ["\u4F7F\u7528\u578B", ["\u81EA\u8ECD", "\u914D\u5099\u30D5\u30A7\u30A4\u30BA"]],
          description: text.description,
          conditions: {
            ...costConditions,
            ...rollCostConditions,
            "\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3068\u540C\u3058\u5C5E\u6027\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064\u30E6\u30CB\u30C3\u30C8\uFF11\u679A": {
              title: ["Entity", {
                side: "\u81EA\u8ECD",
                at: ["\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"],
                hasGSignProperty: [getCardGSignProperty(ctx2, cardId)],
                is: ["\u30E6\u30CB\u30C3\u30C8"],
                count: 1
              }]
            }
          },
          logicTreeActions: [
            {
              actions: [
                {
                  title: function _(ctx3, effect2, { DefineFn, GameStateFn, ToolFn: ToolFn2 }) {
                    const cardId2 = DefineFn.EffectFn.getCardID(effect2), from = GameStateFn.getItemBaSyou(ctx3, cardId2);
                    return ctx3 = GameStateFn.doItemMove(ctx3, DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from, "\u30D7\u30EC\u30A4\u3055\u308C\u3066\u3044\u308B\u30AB\u30FC\u30C9"), [cardId2, from]), GameStateFn.addStackEffect(ctx3, {
                      id: `${effect2.id}_\u5834\u306B\u51FA\u308B`,
                      reason: ["\u5834\u306B\u51FA\u308B", DefineFn.EffectFn.getPlayerID(effect2), DefineFn.EffectFn.getCardID(effect2)],
                      description: effect2.text.description,
                      text: {
                        id: effect2.text.id,
                        description: effect2.text.description,
                        title: [],
                        logicTreeActions: [
                          {
                            actions: [
                              {
                                title: function _(ctx4, effect3, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                                  const cardId3 = DefineFn2.EffectFn.getCardID(effect3), cardController = GameStateFn2.getItemController(ctx4, cardId3);
                                  ctx4 = GameStateFn2.doItemSetRollState(ctx4, !1, GameStateFn2.createStrBaSyouPair(ctx4, cardId3), { isSkipTargetMissing: !0 }), ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.of(cardController, "\u914D\u5099\u30A8\u30EA\u30A2"), GameStateFn2.createStrBaSyouPair(ctx4, cardId3));
                                  const unitPairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx4, "\u81EA\u8ECD\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u3001\u3053\u306E\u30AB\u30FC\u30C9\u3068\u540C\u3058\u5C5E\u6027\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064\u30E6\u30CB\u30C3\u30C8\uFF11\u679A", cardId3);
                                  for (let pair2 of unitPairs) {
                                    ctx4 = GameStateFn2.doItemSetRollState(ctx4, !1, pair2, { isSkipTargetMissing: !0 }), ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.of(cardController, "\u914D\u5099\u30A8\u30EA\u30A2"), pair2), ctx4 = GameStateFn2.setSetGroupParent(ctx4, pair2[0], cardId3);
                                    break;
                                  }
                                  return ctx4;
                                }.toString()
                              }
                            ]
                          }
                        ]
                      }
                    });
                  }.toString()
                }
              ]
            }
          ]
        }
      };
      ret.push(effect);
    }
  }
  const characterConditions = prototype.category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC" || prototype.category == "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)" ? {
    "\u4E00\u500B\u81EA\u8ECD\u6A5F\u9AD4": {
      title: ["Entity", {
        at: ["\u914D\u5099\u30A8\u30EA\u30A2"],
        isCanSetCharacter: !0,
        side: "\u81EA\u8ECD",
        is: ["\u30E6\u30CB\u30C3\u30C8"],
        count: 1
      }]
    }
  } : {}, conditions = {
    ...costConditions,
    ...rollCostConditions,
    ...characterConditions
  }, logicLeafs = Object.keys(conditions).map((k) => {
    return {
      type: "Leaf",
      value: k
    };
  }), logicTree = {
    type: "And",
    children: prototype.commandText?.logicTreeActions?.[0] ? [...logicLeafs, ...CardTextFn.getLogicTreeTreeLeafs(prototype.commandText, prototype.commandText.logicTreeActions[0])] : logicLeafs
  }, description = `Play ${prototype.title}`, playCardEffect = {
    id: `createPlayCardEffects_${cardId}`,
    reason: ["PlayCard", playerId, cardId, {
      isPlayUnit: prototype.category == "\u30E6\u30CB\u30C3\u30C8",
      isPlayCharacter: prototype.category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC",
      isPlayCommand: prototype.category == "\u30B3\u30DE\u30F3\u30C9"
    }],
    description,
    text: {
      id: prototype.commandText?.id || `createPlayCardEffects_text_${cardId}`,
      title: prototype.commandText?.title || ["\u4F7F\u7528\u578B", ["\u81EA\u8ECD", "\u914D\u5099\u30D5\u30A7\u30A4\u30BA"]],
      description,
      conditions: {
        ...conditions,
        ...prototype.commandText?.conditions
      },
      logicTreeActions: [
        {
          logicTree,
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn, GameStateFn, ToolFn: ToolFn2 }) {
                const cardId2 = DefineFn.EffectFn.getCardID(effect), prototype2 = GameStateFn.getItemPrototype(ctx3, cardId2), from = GameStateFn.getItemBaSyou(ctx3, cardId2);
                if (ctx3 = GameStateFn.doItemMove(ctx3, DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from, "\u30D7\u30EC\u30A4\u3055\u308C\u3066\u3044\u308B\u30AB\u30FC\u30C9"), [cardId2, from]), prototype2.category == "\u30E6\u30CB\u30C3\u30C8") {
                  const newE = GameStateFn.createUnitGoStageEffectFromPlayEffect(ctx3, effect);
                  return GameStateFn.addStackEffect(ctx3, newE);
                }
                if (prototype2.category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC" || prototype2.category == "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)") {
                  const newE = GameStateFn.createCharOpUnitGoStageEffectFromPlayEffect(ctx3, effect);
                  return GameStateFn.addStackEffect(ctx3, newE);
                }
                if (prototype2.category == "\u30B3\u30DE\u30F3\u30C9")
                  return GameStateFn.addStackEffect(ctx3, {
                    id: `${effect.id}_\u5834\u306B\u51FA\u308B`,
                    reason: ["\u5834\u306B\u51FA\u308B", DefineFn.EffectFn.getPlayerID(effect), DefineFn.EffectFn.getCardID(effect)],
                    description: effect.text.description,
                    text: {
                      id: prototype2.commandText?.id || `getPlayCardEffects_commentText_${cardId2}`,
                      description: prototype2.commandText?.description || "unknown",
                      title: [],
                      logicTreeActions: [
                        {
                          actions: [
                            {
                              title: function _(ctx4, effect2, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                                const cardId3 = DefineFn2.EffectFn.getCardID(effect2), from2 = GameStateFn2.getItemBaSyou(ctx4, cardId3), to = DefineFn2.AbsoluteBaSyouFn.setBaSyouKeyword(from2, "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9");
                                return ctx4 = GameStateFn2.doItemMove(ctx4, to, [cardId3, from2]), ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId3] }), ctx4;
                              }.toString()
                            },
                            ...prototype2.commandText?.logicTreeActions?.[0]?.actions || []
                          ]
                        }
                      ]
                    }
                  });
                if (prototype2.category == "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF") {
                  const cardId3 = DefineFn.EffectFn.getCardID(effect), from2 = GameStateFn.getItemBaSyou(ctx3, cardId3), to = DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from2, "G\u30BE\u30FC\u30F3");
                  return ctx3 = GameStateFn.doItemMove(ctx3, to, [cardId3, from2]), ctx3 = GameStateFn.doTriggerEvent(ctx3, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId3] }), ctx3;
                }
                if (prototype2.category == "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3") {
                  const cardId3 = DefineFn.EffectFn.getCardID(effect), from2 = GameStateFn.getItemBaSyou(ctx3, cardId3), to = DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from2, "\u914D\u5099\u30A8\u30EA\u30A2");
                  return ctx3 = GameStateFn.doItemMove(ctx3, to, [cardId3, from2]), ctx3 = GameStateFn.doTriggerEvent(ctx3, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId3] }), ctx3;
                }
                if (prototype2.category == "ACE")
                  throw new Error(`not support category: ${prototype2.category}`);
                return ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
  ret.push(playCardEffect);
  const ges = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, ges);
  {
    const morePlayEfs = ges.filter((g) => (g.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B" || g.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B_\u3001\u30ED\u30FC\u30EB\u30B3\u30B9\u30C8\uFF0B_\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B") && g.cardIds.includes(cardId));
    if (morePlayEfs.length > 0) {
      let copyOriginCondition = playCardEffect.text.conditions || {};
      if (getCard(ctx2, cardId).protoID == "179027_09D_C_BK063R_black") {
        const rollCostBonus = getGlobalEffects(ctx2, null).map((ge) => {
          if (ge.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B_\u3001\u30ED\u30FC\u30EB\u30B3\u30B9\u30C8\uFF0B_\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B" && ge.cardIds.includes(cardId))
            return ge.title[2];
          return 0;
        }).reduce((a, b) => a + b, 0);
        for (let rollCostKey of Object.keys(rollCostConditions))
          delete copyOriginCondition[rollCostKey];
        const newRollCostConditions = createRollCostConditions(ctx2, prototype, prototype.rollCost || [], rollCostBonus);
        copyOriginCondition = {
          ...copyOriginCondition,
          ...newRollCostConditions
        };
      }
      const addedLength = pipe(always_default(morePlayEfs), map_default((g) => g.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B" || g.title[0] == "\u5408\u8A08\u56FD\u529B\uFF0B_\u3001\u30ED\u30FC\u30EB\u30B3\u30B9\u30C8\uFF0B_\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B" ? g.title[1] : 0), sum_default)();
      copyOriginCondition = {
        ...copyOriginCondition,
        "\u5408\u8A08\u56FD\u529B\u3014x\u3015": {
          actions: [
            {
              title: ["\u5408\u8A08\u56FD\u529B\u3014x\u3015", cardRollCostLength + addedLength]
            }
          ]
        }
      };
      let totalCostPlusPlayEffect = JSON.parse(JSON.stringify(playCardEffect));
      if (totalCostPlusPlayEffect = {
        ...totalCostPlusPlayEffect,
        id: `totalCostPlusPlayEffect_${cardId}`,
        description: "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B",
        text: {
          ...totalCostPlusPlayEffect.text,
          id: prototype.commandText?.id || `totalCostPlusPlayEffect_text_${cardId}`,
          description: "\u5408\u8A08\u56FD\u529B\uFF0B(\uFF11)\u3057\u3066\u30D7\u30EC\u30A4\u3067\u304D\u308B",
          conditions: copyOriginCondition
        }
      }, totalCostPlusPlayEffect.text.logicTreeActions?.[0] == null)
        throw new Error("morePlayCardEffect.text.logicTreeActions?.[0] == null");
      if (getCard(ctx2, cardId).protoID == "179027_09D_C_BK063R_black") {
        const logicLeafs2 = Object.keys(copyOriginCondition).map((k) => {
          return {
            type: "Leaf",
            value: k
          };
        }), logicTree2 = {
          type: "And",
          children: prototype.commandText?.logicTreeActions?.[0] ? [...logicLeafs2, ...CardTextFn.getLogicTreeTreeLeafs(prototype.commandText, prototype.commandText.logicTreeActions[0])] : logicLeafs2
        };
        totalCostPlusPlayEffect.text.logicTreeActions[0].logicTree = logicTree2;
      }
      totalCostPlusPlayEffect.text.logicTreeActions[0].actions.push({
        title: function _(ctx3, effect, { GameStateFn, DefineFn }) {
          const { addedLength: addedLength2 } = { addedLength: 0 }, cardId2 = DefineFn.EffectFn.getCardID(effect);
          let cs = GameStateFn.getItemState(ctx3, cardId2);
          return cs = DefineFn.ItemStateFn.setMoreTotalRollCostLengthPlay(cs, addedLength2), ctx3 = GameStateFn.setItemState(ctx3, cardId2, cs), ctx3;
        }.toString().replace("{ addedLength: 0 }", `{addedLength: ${addedLength}}`)
      }), ret.push(totalCostPlusPlayEffect);
    }
  }
  if (prototype.category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC" && getCardHasSpeicalEffect(ctx2, ["\u30B9\u30C6\u30A4"], cardId)) {
    let stayPlayEffect = JSON.parse(JSON.stringify(playCardEffect));
    stayPlayEffect = {
      ...stayPlayEffect,
      id: `stayPlayEffect_${cardId}`,
      description: "\u30B9\u30C6\u30A4",
      text: {
        ...stayPlayEffect.text,
        id: `stayPlayEffect_text_${cardId}`,
        description: "\u30B9\u30C6\u30A4",
        conditions: {
          ...dissoc_default("\u4E00\u500B\u81EA\u8ECD\u6A5F\u9AD4", stayPlayEffect.text.conditions || {})
        },
        logicTreeActions: [
          {
            actions: [
              {
                title: function _(ctx3, effect, { DefineFn, GameStateFn, ToolFn: ToolFn2 }) {
                  const cardId2 = DefineFn.EffectFn.getCardID(effect), from = GameStateFn.getItemBaSyou(ctx3, cardId2);
                  return ctx3 = GameStateFn.doItemMove(ctx3, DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from, "\u30D7\u30EC\u30A4\u3055\u308C\u3066\u3044\u308B\u30AB\u30FC\u30C9"), [cardId2, from]), GameStateFn.addStackEffect(ctx3, {
                    id: ToolFn2.getUUID("getPlayCardEffects"),
                    reason: ["\u5834\u306B\u51FA\u308B", DefineFn.EffectFn.getPlayerID(effect), DefineFn.EffectFn.getCardID(effect)],
                    description: effect.text.description,
                    text: {
                      id: effect.text.id,
                      description: effect.text.description,
                      title: [],
                      logicTreeActions: [
                        {
                          actions: [
                            {
                              title: function _(ctx4, effect2, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                                const cardId3 = DefineFn2.EffectFn.getCardID(effect2), from2 = GameStateFn2.getItemBaSyou(ctx4, cardId3), to = DefineFn2.AbsoluteBaSyouFn.setBaSyouKeyword(from2, "\u914D\u5099\u30A8\u30EA\u30A2");
                                return ctx4 = GameStateFn2.doItemMove(ctx4, to, [cardId3, from2]), ctx4 = GameStateFn2.doTriggerEvent(ctx4, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId3] }), ctx4;
                              }.toString()
                            }
                          ]
                        }
                      ]
                    }
                  });
                }.toString()
              }
            ]
          }
        ]
      }
    }, ret.push(stayPlayEffect);
  }
  return ret;
}
function createUnitGoStageEffectFromPlayEffect(ctx2, effect) {
  const cardId = EffectFn.getCardID(effect);
  if (getItemPrototype(ctx2, cardId).category == "\u30E6\u30CB\u30C3\u30C8")
    return {
      id: `createUnitGoStageEffectFromPlayEffect_${cardId}`,
      reason: ["\u5834\u306B\u51FA\u308B", EffectFn.getPlayerID(effect), EffectFn.getCardID(effect)],
      description: effect.text.description,
      text: {
        id: effect.text.id,
        description: effect.text.description,
        title: [],
        logicTreeActions: [
          {
            actions: [
              {
                title: function _(ctx3, effect2, { DefineFn, GameStateFn }) {
                  const cardId2 = DefineFn.EffectFn.getCardID(effect2), from = GameStateFn.getItemBaSyou(ctx3, cardId2), to = DefineFn.AbsoluteBaSyouFn.setBaSyouKeyword(from, "\u914D\u5099\u30A8\u30EA\u30A2");
                  ctx3 = GameStateFn.doItemMove(ctx3, to, [cardId2, from]);
                  const hasHigh = GameStateFn.getCardHasSpeicalEffect(ctx3, ["\u6226\u95D8\u914D\u5099"], cardId2), hasPS = GameStateFn.getCardHasSpeicalEffect(ctx3, ["\u3010PS\u88C5\u7532\u3011"], cardId2), isRoll = (hasHigh || hasPS) == !1;
                  return ctx3 = GameStateFn.doItemSetRollState(ctx3, isRoll, [cardId2, GameStateFn.getItemBaSyou(ctx3, cardId2)], { isSkipTargetMissing: !0 }), ctx3 = GameStateFn.doTriggerEvent(ctx3, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId2] }), ctx3;
                }.toString()
              }
            ]
          }
        ]
      }
    };
  throw new Error;
}
function createCharOpUnitGoStageEffectFromPlayEffect(ctx2, effect) {
  const cardId = EffectFn.getCardID(effect), prototype = getItemPrototype(ctx2, cardId);
  if (prototype.category == "\u30AD\u30E3\u30E9\u30AF\u30BF\u30FC" || prototype.category == "\u30AA\u30DA\u30EC\u30FC\u30B7\u30E7\u30F3(\u30E6\u30CB\u30C3\u30C8)")
    return {
      id: `createCharOpUnitGoStageEffectFromPlayEffect_${cardId}`,
      reason: ["\u5834\u306B\u51FA\u308B", EffectFn.getPlayerID(effect), EffectFn.getCardID(effect)],
      description: effect.text.description,
      text: {
        id: effect.text.id,
        description: effect.text.description,
        title: [],
        logicTreeActions: [
          {
            actions: [
              {
                title: function _(ctx3, effect2, { DefineFn, GameStateFn }) {
                  const cardId2 = DefineFn.EffectFn.getCardID(effect2), pairs = GameStateFn.getCardTipStrBaSyouPairs(ctx3, "\u4E00\u500B\u81EA\u8ECD\u6A5F\u9AD4", cardId2);
                  if (pairs.length == 0)
                    throw new Error(`pairs must not 0: ${effect2.text.description}`);
                  const [targetCardId, targetBasyou] = pairs[0], from = GameStateFn.getItemBaSyou(ctx3, cardId2), to = targetBasyou;
                  ctx3 = GameStateFn.doItemMove(ctx3, to, [cardId2, from]);
                  const isRoll = GameStateFn.getCard(ctx3, targetCardId).isRoll || !1;
                  return ctx3 = GameStateFn.mapCard(ctx3, cardId2, (is) => ({ ...is, isRoll })), ctx3 = GameStateFn.setSetGroupParent(ctx3, targetCardId, cardId2), ctx3 = GameStateFn.doTriggerEvent(ctx3, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"], cardIds: [cardId2] }), ctx3 = GameStateFn.doTriggerEvent(ctx3, { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u30BB\u30C3\u30C8\u3055\u308C\u305F\u5834\u5408"], cardIds: [cardId2] }), ctx3;
                }.toString()
              }
            ]
          }
        ]
      }
    };
  throw new Error;
}

// src/game/gameState/getNextPhase.ts
var exports_getNextPhase = {};
__export(exports_getNextPhase, {
  setNextPhase: () => setNextPhase,
  getNextPhase: () => getNextPhase
});
function getNextPhase(ctx2) {
  return PhaseFn.getNext(getPhase(ctx2));
}
function setNextPhase(ctx2) {
  return setPhase(ctx2, getNextPhase(ctx2));
}

// src/game/gameState/createConditionTitleFn.ts
var exports_createConditionTitleFn = {};
__export(exports_createConditionTitleFn, {
  createConditionTitleFn: () => createConditionTitleFn
});
function createConditionTitleFn(condition, options) {
  if (condition.title == null || typeof condition.title == "string")
    return ConditionFn.getTitleFn(condition);
  switch (logCategory("getConditionTitleFn", condition.title), condition.title[0]) {
    case "_\u6575\u8ECD\u90E8\u968A_\uFF11\u3064": {
      const [_2, side, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController), basyous = lift_default(AbsoluteBaSyouFn.of)([playerId], ["\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22"]).filter((basyou) => getItemIdsByBasyou(ctx2, basyou).length);
        return {
          title: ["BaSyou", basyous, basyous.slice(0, count)],
          count
        };
      };
    }
    case "_\u6575\u8ECD_\u30E6\u30CB\u30C3\u30C8\u304C_\uFF13\u679A\u4EE5\u4E0A\u3044\u308B\u5834\u5408": {
      const [_2, side, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController);
        if (lift_default(AbsoluteBaSyouFn.of)([playerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).length < count)
          throw new TipError("_\u6575\u8ECD_\u30E6\u30CB\u30C3\u30C8\u304C_\uFF13\u679A\u4EE5\u4E0A\u3044\u308B\u5834\u5408");
        return null;
      };
    }
    case "_\u6575\u8ECD\u90E8\u968A\u304C\u3044\u308B\u5834\u5408": {
      const [_2, side] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController);
        if (lift_default(AbsoluteBaSyouFn.of)([playerId], ["\u6226\u95D8\u30A8\u30EA\u30A21", "\u6226\u95D8\u30A8\u30EA\u30A22"]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou)).length == 0)
          throw new TipError("_\u6575\u8ECD\u90E8\u968A\u304C\u3044\u308B\u5834\u5408");
        return null;
      };
    }
    case "_\u81EA\u8ECD_\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9\u306B\u3042\u308B\u3001_\u9ED2\u306EG\u30B5\u30A4\u30F3\u3092\u6301\u3064\u5168\u3066\u306E\u30AB\u30FC\u30C9\u306F": {
      const [_2, side, basyouKw, color] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), playerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController), pairs = lift_default(AbsoluteBaSyouFn.of)([playerId], [basyouKw]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemPrototype(ctx2, cardId2).gsign?.[0].includes(color)).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs]
        };
      };
    }
    case "_\u81EA\u8ECD_\u672C\u56FD\u306E\u4E0A\u306E\u30AB\u30FC\u30C9_\uFF11\uFF5E_\uFF14\u679A\u3092\u898B\u3066\u3001\u305D\u306E\u4E2D\u306B\u3042\u308B\u3001\u300C\u7279\u5FB4\uFF1A_\u30D8\u30A4\u30BA\u30EB\u7CFB\u300D\u3092\u6301\u3064_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A": {
      const [_2, side, basyouKw, min, max, char, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], [basyouKw]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemCharacteristic(ctx2, cardId2).includes(char)).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).map((cardId2) => [cardId2, basyou])).slice(0, max);
        if (pairs.length < min)
          throw new TargetMissingError(`length is ${pairs.length}, min is ${min}: ${effect.text.description}`);
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          count
        };
      };
    }
    case "\u3053\u306E\u30AB\u30FC\u30C9\u306E_\u672C\u6765\u306E\u30C6\u30AD\u30B9\u30C8\uFF11\u3064": {
      const [_2, isOrigin, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), textRefs = (isOrigin ? getItemPrototype(ctx2, cardId).texts || [] : getCardTexts(ctx2, cardId)).filter((text) => (text.title[0] == "\u7279\u6B8A\u578B" && text.title[1][0] == "\u30AF\u30ED\u30B9\u30A6\u30A7\u30DD\u30F3") == !1).map((text) => {
          return {
            cardId,
            textId: text.id
          };
        });
        return logCategory("getConditionTitleFn", textRefs), {
          title: ["\u30C6\u30AD\u30B9\u30C8", textRefs, textRefs.slice(0, count)],
          count
        };
      };
    }
    case "_\u672C\u6765\u306E\u8A18\u8FF0\u306B\uFF62\u7279\u5FB4\uFF1A_\u88C5\u5F3E\uFF63\u3092\u6301\u3064_\u81EA\u8ECD_G_\uFF11\u679A": {
      const [_2, isOrigin, targetChar, side, category2, count] = condition.title, exceptItemSelf = condition.exceptItemSelf;
      return function(ctx2, effect) {
        const fromCardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, fromCardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId);
        if (category2 == "\u30B0\u30E9\u30D5\u30A3\u30C3\u30AF") {
          const pairs = [AbsoluteBaSyouFn.of(targetPlayerId, "G\u30BE\u30FC\u30F3")].flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId) => {
            if (exceptItemSelf && fromCardId == cardId)
              return !1;
            if (getCard(ctx2, cardId).isRoll)
              return !1;
            if (isOrigin)
              return getItemPrototype(ctx2, cardId).characteristic?.includes(targetChar);
            else
              return getItemCharacteristic(ctx2, cardId);
          }).map((cardId) => [cardId, basyou]));
          return {
            title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
            count
          };
        } else {
          const pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId) => getSetGroupRoot(ctx2, cardId)).filter((cardId) => getItemRuntimeCategory(ctx2, cardId) == category2).filter((cardId) => {
            if (exceptItemSelf && fromCardId == cardId)
              return !1;
            if (isOrigin)
              return getItemPrototype(ctx2, cardId).characteristic?.includes(targetChar);
            else
              return getItemCharacteristic(ctx2, cardId).includes(targetChar);
          }).map((cardId) => [cardId, basyou]));
          return {
            title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
            count
          };
        }
      };
    }
    case "_\u6226\u95D8\u30A8\u30EA\u30A2\u306B\u3044\u308B_\u6575\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\uFF5E_\uFF12\u679A": {
      const [_2, basyouKws, side, category2, min, max] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], basyouKws).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, max)],
          min,
          max
        };
      };
    }
    case "_\u81EA\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A": {
      const [_2, side, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          count: 1
        };
      };
    }
    case "_\u81EA\u8ECD\u624B\u672D\u3001\u307E\u305F\u306F\u81EA\u8ECD\u30CF\u30F3\u30AC\u30FC\u306B\u3042\u308B\u3001_\uFF16\u4EE5\u4E0B\u306E\u5408\u8A08\u56FD\u529B\u3092\u6301\u3064_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A\u3092": {
      const [_2, side, totalCost, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], ["\u624B\u672D", "\u30CF\u30F3\u30AC\u30FC"]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).filter((cardId2) => getCardTotalCostLength(ctx2, cardId2) <= totalCost).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          min: count
        };
      };
    }
    case "\u6253\u958B\u81EA\u8ECD\u624B\u88E1\u6216\u6307\u5B9AHANGER\u4E2D\u7279\u5FB5_A\u4E26\u5408\u8A08\u570B\u529B_x\u4EE5\u4E0B\u7684_1\u5F35\u5361": {
      const [_2, char, x, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), pairs = lift_default(AbsoluteBaSyouFn.of)([playerId], ["\u624B\u672D", "\u30CF\u30F3\u30AC\u30FC"]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemPrototype(ctx2, cardId2).category == "\u30E6\u30CB\u30C3\u30C8").filter((cardId2) => getItemCharacteristic(ctx2, cardId2).includes(char)).filter((cardId2) => getCardTotalCostLength(ctx2, cardId2) <= x).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          count
        };
      };
    }
    case "_\u81EA\u8ECD_\u672C\u570B\u4E0A\u7684_1\u5F35\u5361": {
      const [_2, side, basyouKw, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], [basyouKw]).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          min: count
        };
      };
    }
    case "\u9019\u5F35\u5361\u4EA4\u6230\u7684\u9632\u79A6\u529B_x\u4EE5\u4E0B\u7684\u6575\u8ECD\u6A5F\u9AD4_1\u5F35": {
      const [_2, x, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        if (AbsoluteBaSyouFn.getBaSyouKeyword(getItemBaSyou(ctx2, cardId)) == "\u6226\u95D8\u30A8\u30EA\u30A21" || AbsoluteBaSyouFn.getBaSyouKeyword(getItemBaSyou(ctx2, cardId)) == "\u6226\u95D8\u30A8\u30EA\u30A22")
          ;
        else
          return null;
        const cardController = getItemController(ctx2, cardId), opponentId = PlayerIDFn.getOpponent(cardController), from = AbsoluteBaSyouFn.setPlayerID(getItemBaSyou(ctx2, cardId), opponentId), pairs = getItemIdsByBasyou(ctx2, from).map((itemId) => getSetGroupRoot(ctx2, itemId)).filter((itemId) => {
          const [_3, def, _22] = getSetGroupBattlePoint(ctx2, itemId);
          return def <= x;
        }).map((itemId) => [itemId, from]);
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          min: count
        };
      };
    }
    case "_\u81EA\u8ECD_\u672C\u570B\u627E\u51FA\u7279\u5FB5_A\u7684_1\u5F35\u5361": {
      const [_2, side, basyouKw, char, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), from = AbsoluteBaSyouFn.of(targetPlayerId, basyouKw), itemIdAtBasyou = getItemIdsByBasyou(ctx2, from), pairs = itemIdAtBasyou.filter((itemId) => {
          return getItemCharacteristic(ctx2, itemId).indexOf(char) != -1;
        }).map((targetId) => [targetId, from]);
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          max: count,
          cheatCardIds: itemIdAtBasyou
        };
      };
    }
    case "RollColor": {
      const [_2, color] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId);
        let situation = { title: ["\u30ED\u30FC\u30EB\u30B3\u30B9\u30C8\u306E\u652F\u6255\u3044\u306B\u304A\u3044\u3066"] };
        if (effect.reason[0] == "PlayCard" && effect.reason[3].isPlayCommand) {
          if (getItemPrototype(ctx2, cardId).category?.includes("\u88C5\u5F3E"))
            situation = { title: ["\u300C\u7279\u5FB4\uFF1A\u88C5\u5F3E\u300D\u3092\u6301\u3064\u81EA\u8ECD\u30B3\u30DE\u30F3\u30C9\u306E\u52B9\u679C\u3067\u81EA\u8ECDG\u3092\u30ED\u30FC\u30EB\u3059\u308B\u5834\u5408"] };
        }
        const cardIdColors = getCardIdsCanPayRollColor(ctx2, situation, cardController, color);
        let colorIds = [];
        if (color == null)
          colorIds = cardIdColors.map((gId) => gId.cardId).slice(0, 1);
        else if (color == "\u7D2B") {
          if (colorIds = cardIdColors.filter((gId) => gId.colors.length == 1 && gId.colors[0] == color).map((gId) => gId.cardId).slice(0, 1), colorIds.length == 0) {
            if (colorIds = cardIdColors.filter((gId) => gId.colors.length == 1).map((gId) => gId.cardId).slice(0, 2), colorIds.length < 2)
              colorIds = cardIdColors.filter((gId) => gId.colors.length > 1).map((gId) => gId.cardId).slice(0, 2);
          }
        } else if (colorIds = cardIdColors.filter((gId) => gId.colors.length == 1 && gId.colors[0] == color).map((gId) => gId.cardId).slice(0, 1), colorIds.length == 0)
          colorIds = cardIdColors.filter((gId) => gId.colors.length > 1 && gId.colors.includes(color)).map((gId) => gId.cardId).slice(0, 1);
        const cardIdColorsPairs = cardIdColors.map((gId) => gId.cardId).map((colorId) => [colorId, getItemBaSyou(ctx2, colorId)]), pairs = colorIds.map((colorId) => [colorId, getItemBaSyou(ctx2, colorId)]);
        return {
          title: ["\u30AB\u30FC\u30C9", cardIdColorsPairs, pairs],
          min: Math.max(1, pairs.length)
        };
      };
    }
    case "_\u4EA4\u6226\u4E2D\u306E_\u81EA\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A": {
      const [_2, battleStr, side, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), playerId = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, playerId), pairs = lift_default(AbsoluteBaSyouFn.of)([targetPlayerId], BaSyouKeywordFn.getBaAll()).flatMap((basyou) => getItemIdsByBasyou(ctx2, basyou).filter((cardId2) => getItemRuntimeCategory(ctx2, cardId2) == category2).filter((cardId2) => isBattle(ctx2, cardId2, null) == (battleStr == "\u4EA4\u6226\u4E2D")).map((cardId2) => [cardId2, basyou]));
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          count: 1
        };
      };
    }
    case "_\u914D\u5099\u30A8\u30EA\u30A2\u306B\u3044\u308B\u3001\u300C\u7279\u5FB4\uFF1A_T3\u90E8\u968A\u300D\u3092\u6301\u3064_\u81EA\u8ECD_\u30E6\u30CB\u30C3\u30C8_\uFF11\u679A": {
      const [_2, basyouKw, char, side, category2, count] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect), cardController = getItemController(ctx2, cardId), targetPlayerId = PlayerIDFn.fromRelatedPlayerSideKeyword(side, cardController), from = AbsoluteBaSyouFn.of(targetPlayerId, basyouKw), pairs = getItemIdsByBasyou(ctx2, from).filter((itemId) => {
          return getItemCharacteristic(ctx2, itemId).indexOf(char) != -1;
        }).filter((itemId) => {
          return getItemRuntimeCategory(ctx2, itemId) == category2;
        }).map((targetId) => [targetId, from]);
        return {
          title: ["\u30AB\u30FC\u30C9", pairs, pairs.slice(0, count)],
          min: count
        };
      };
    }
    case "\u3053\u306E\u30BB\u30C3\u30C8\u30B0\u30EB\u30FC\u30D7\u306E_\u30E6\u30CB\u30C3\u30C8\u306F":
      const [_, category] = condition.title;
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        switch (category) {
          case "\u30E6\u30CB\u30C3\u30C8":
            const targetId = getSetGroupRoot(ctx2, cardId), pair3 = [targetId, getItemBaSyou(ctx2, targetId)];
            return {
              title: ["\u30AB\u30FC\u30C9", [pair3], [pair3]],
              min: 1
            };
          default:
            throw new Error(`\u3053\u306E\u30BB\u30C3\u30C8\u30B0\u30EB\u30FC\u30D7\u306E_\u30E6\u30CB\u30C3\u30C8\u306F: not support ${category}`);
        }
      };
    case "Entity": {
      const [_2, options2] = condition.title;
      if ([options2.max, options2.min, options2.count].every((v) => v == null))
        throw new Error("Entity search must has one of min, max, count");
      return function(ctx2, effect) {
        const cardId = EffectFn.getCardID(effect);
        return createTipByEntitySearch(ctx2, cardId, options2);
      };
    }
  }
}

// src/game/gameState/index.ts
var GameStateFn = {
  ...exports_GameState,
  ...exports_ItemStateComponent,
  ...exports_EffectStackComponent,
  ...exports_IsBattleComponent,
  ...exports_SetGroupComponent,
  ...exports_CardTableComponent,
  ...exports_CoinTableComponent,
  ...exports_ItemTableComponent,
  ...exports_card,
  ...exports_battleGroup,
  ...exports_doEffect,
  ...exports_player,
  ...exports_setGroup,
  ...exports_doTriggerEvent,
  ...exports_PhaseComponent,
  ...exports_globalEffects,
  ...exports_ActivePlayerComponent,
  ...exports_PlayerStateComponent,
  ...exports_RuntimeBattleAreaComponent,
  ...exports_createPlayCardEffects,
  ...exports_getNextPhase,
  ...exports_doItemSwap,
  ...exports_doItemMove,
  ...exports_createConditionTitleFn,
  ...exports_createActionTitleFn,
  ...exports_createOnEventTitleFn,
  ...exports_doItemSetRollState,
  ...exports_doCountryDamage,
  ...exports_doItemSetDestroy,
  ...exports_doItemSetGlobalEffectsUntilEndOfTurn,
  ...exports_Entity,
  ...exports_doPlayerDrawCard,
  ...exports_doItemDamage
};

// src/game/define/GameEvent.ts
var exports_GameEvent = {};

// src/game/define/GlobalEffect.ts
var exports_GlobalEffect = {};

// src/game/define/CommandEffectTip.ts
var exports_CommandEffectTip = {};
__export(exports_CommandEffectTip, {
  TipOrErrorsFn: () => TipOrErrorsFn,
  CommandEffecTipFn: () => CommandEffecTipFn
});
var TipOrErrorsFn = {
  filterNoError(cet) {
    return cet.errors.length == 0;
  },
  filterError(cet) {
    return cet.errors.length > 0;
  },
  filterPlayerId(effects, playerID) {
    return (cet) => {
      const effect = effects[cet.effectId];
      if (effect == null)
        throw new Error;
      const effectCreator = EffectFn.getPlayerID(effect);
      if (effect.text.conditions?.[cet.conditionKey]?.relatedPlayerSideKeyword == "\u6575\u8ECD")
        return effectCreator != playerID;
      return effectCreator == playerID;
    };
  }
}, CommandEffecTipFn = {
  filterPlayerId(effects, playerID) {
    return (cet) => {
      const effect = effects[cet.effectId];
      if (effect == null)
        throw new Error;
      return EffectFn.getPlayerID(effect) == playerID;
    };
  },
  not(fn) {
    return (cet) => {
      return !fn(cet);
    };
  },
  filterNoError(cet) {
    return cet.tipOrErrors.every((toes) => toes.errors.length == 0);
  },
  filterEffectDistinct(cet, index, self) {
    return index === self.findIndex((c) => c.effectId === cet.effectId);
  }
};

// src/game/define/index.ts
var DefineFn = {
  ...exports_BaSyou,
  ...exports_BattlePoint,
  ...exports_CardPrototype,
  ...exports_Effect,
  ...exports_GameEvent,
  ...exports_GlobalEffect,
  ...exports_PlayerID,
  ...exports_Tip,
  ...exports_CardText,
  ...exports_Timing,
  ...exports_Coin,
  ...exports_Tip,
  ...exports_ItemState,
  ...exports_GameError,
  ...exports_Card,
  ...exports_CommandEffectTip
};

// src/game/bridge/createBridge.ts
function createBridge() {
  return {
    GameStateFn,
    DefineFn,
    ToolFn
  };
}

// src/game/gameState/doEffect.ts
function doEffect(ctx2, effect, logicId, logicSubId) {
  logCategory("doEffect", effect.id, effect.text.id, effect.text.description), ctx2 = EventCenterFn.onEffectStart(ctx2, effect), assertEffectCanPass(ctx2, effect, logicId, logicSubId);
  const ltacs = CardTextFn.getLogicTreeActionConditions(effect.text, CardTextFn.getLogicTreeAction(effect.text, logicId))[logicSubId];
  if (ltacs == null)
    throw new Error(`ltasc not found: ${logicId}/${logicSubId}`);
  const bridge = createBridge(), conditionIds = Object.keys(ltacs), cardId = EffectFn.getCardID(effect);
  conditionIds.forEach((conditionKey) => {
    logCategory("doEffect", "conditionKey", conditionKey);
    const condition = CardTextFn.getCondition(effect.text, conditionKey), actions = ConditionFn.getActions(condition);
    for (let action of actions)
      EventCenterFn.onActionStart(ctx2, effect, action), ctx2 = createActionTitleFn(action)(ctx2, effect, bridge), EventCenterFn.onActionEnd(ctx2, effect, action);
  });
  const lta = CardTextFn.getLogicTreeAction(effect.text, logicId);
  for (let action of LogicTreeActionFn.getActions(lta))
    EventCenterFn.onActionStart(ctx2, effect, action), ctx2 = createActionTitleFn(action)(ctx2, effect, bridge), EventCenterFn.onActionEnd(ctx2, effect, action);
  return ctx2 = EventCenterFn.onEffectEnd(ctx2, effect), ctx2;
}
function assertTipForUserSelection(ctx2, effect, cardId) {
  const userTips = getItemState(ctx2, cardId).tips, groupSets = {};
  Object.entries(effect.text.conditions || {}).forEach(([conditionKey, con]) => {
    if (con.groupKey) {
      const userTip = userTips[conditionKey];
      if (userTip == null)
        return;
      if (userTip.isRepeat)
        return;
      switch (userTip.title[0]) {
        case "\u30AB\u30FC\u30C9": {
          const userCardIds = userTip.title[2].map((p) => p[0]);
          let groupSetsWithKey = groupSets[con.groupKey] || [];
          groupSetsWithKey = [...userCardIds, ...groupSetsWithKey], groupSetsWithKey.forEach((gid) => {
            if (groupSetsWithKey.filter((gid2) => gid2 == gid).length > 1)
              throw console.warn(con.groupKey, groupSetsWithKey), new TipError(`\u6709\u91CD\u5FA9\u7684\u5C0D\u8C61: ${con.groupKey} ${JSON.stringify(groupSetsWithKey)}`);
          }), groupSets[con.groupKey] = groupSetsWithKey;
        }
      }
    }
  });
}
function createEffectTips(ctx2, effect, logicId, logicSubId, options) {
  const ltacs = CardTextFn.getLogicTreeActionConditions(effect.text, CardTextFn.getLogicTreeAction(effect.text, logicId))[logicSubId];
  if (ltacs == null)
    throw new Error(`ltasc not found: ${logicId}/${logicSubId}`);
  const bridge = createBridge();
  return Object.keys(ltacs).map((key) => {
    const con = ltacs[key];
    logCategory("createEffectTips", key, con.title);
    const errors = [];
    let tip = null;
    try {
      if (tip = createConditionTitleFn(con)(ctx2, effect, bridge), tip?.isGameState)
        throw console.log("\u5FEB\u901F\u6AA2\u67E5\u662F\u4E0D\u5BEB\u932F\u56DE\u50B3\u6210GameState, \u61C9\u8A72\u8981\u56DE\u50B3Tip|null:", key, con.title), new Error;
    } catch (e) {
      if (e instanceof TipError) {
        if (options?.isAssert)
          throw e;
        errors.push(e.message);
      } else
        throw e;
    }
    if (tip) {
      if (options?.isCheckUserSelection)
        try {
          const cardId = EffectFn.getCardID(effect);
          ItemStateFn.getTip(getItemState(ctx2, cardId), key), assertTipForUserSelection(ctx2, effect, cardId);
        } catch (e) {
          if (e instanceof TipError) {
            if (options.isAssert)
              throw e;
            errors.push(e.message);
          } else
            throw e;
        }
      try {
        logCategory("createEffectTips", "tip");
        const error = TipFn.checkTipSatisfies(tip);
        if (error)
          throw error;
        const cardId = EffectFn.getCardID(effect);
        ctx2 = mapItemState(ctx2, cardId, (is) => ItemStateFn.setTip(is, key, tip));
      } catch (e) {
        if (e instanceof TipError) {
          if (options?.isAssert)
            throw e;
          errors.push(e.message);
        } else
          throw e;
      }
    }
    return ctx2 = ConditionFn.getActionTitleFns(con, createActionTitleFn).reduce((ctx3, fn) => {
      try {
        return ctx3 = fn(ctx3, effect, bridge), ctx3;
      } catch (e) {
        if (e instanceof TipError) {
          if (options?.isAssert)
            throw e;
          return errors.push(e.message), ctx3;
        } else
          throw e;
      }
    }, ctx2), { effectId: effect.id, conditionKey: key, tip, errors };
  });
}
function setEffectTips(ctx2, e, toes) {
  switch (logCategory("setEffectTips", "effect", e.description), e.reason[0]) {
    case "Event":
    case "GameRule":
    case "Destroy":
    case "\u5834\u306B\u51FA\u308B":
    case "PlayCard":
    case "PlayText": {
      const cardId = EffectFn.getCardID(e);
      return logCategory("setEffectTips", "cardId", cardId), toes.forEach((toe) => {
        if (toe.errors.length)
          throw new Error(toe.errors.join("|"));
        const tip = toe.tip;
        if (tip == null)
          return;
        const key = toe.conditionKey;
        logCategory("setEffectTips", key, tip.title), ctx2 = mapItemState(ctx2, cardId, (is) => ItemStateFn.setTip(is, key, tip));
      }), ctx2;
    }
    default:
      throw new Error(`unknown effect reason: ${e.reason[0]}`);
  }
}
function setTipSelectionForUser(ctx2, e, logicId, logicSubId) {
  return setEffectTips(ctx2, e, createEffectTips(ctx2, e, logicId, logicSubId));
}
function clearTipSelectionForUser(ctx2, effect, logicId, logicSubId) {
  const ltacs = CardTextFn.getLogicTreeActionConditions(effect.text, CardTextFn.getLogicTreeAction(effect.text, logicId))[logicSubId];
  if (ltacs == null)
    throw new Error(`ltasc not found: ${logicId}/${logicSubId}`);
  return Object.keys(ltacs).forEach((key) => {
    const cardId = EffectFn.getCardID(effect);
    if (getItemState(ctx2, cardId).tips[key])
      ctx2 = mapItemState(ctx2, cardId, (is) => ItemStateFn.clearTip(is, key));
  }), ctx2;
}
function assertEffectCanPass(ctx2, effect, logicId, logicSubId) {
  createEffectTips(ctx2, effect, logicId, logicSubId, { isCheckUserSelection: !0, isAssert: !0 });
}
function createCommandEffectTips(ctx2, effect) {
  if (logCategory("createCommandEffectTips", "effect.id", effect.id), logCategory("createCommandEffectTips", "effect.text.id", effect.text.id, effect.description), effect.text.logicTreeActions)
    return effect.text.logicTreeActions.flatMap((lta, logicId) => {
      return CardTextFn.getLogicTreeActionConditions(effect.text, lta).map((conditions, logicSubId) => {
        ctx2 = clearTipSelectionForUser(ctx2, effect, logicId, logicSubId);
        const conTipErrors = createEffectTips(ctx2, effect, logicId, logicSubId);
        return {
          effectId: effect.id,
          conditionKeys: Object.keys(conditions),
          logicID: logicId,
          logicSubID: logicSubId,
          tipOrErrors: conTipErrors
        };
      });
    });
  return [];
}
function getCardTipSelection(ctx2, varName, cardId, options) {
  const cardState = getItemState(ctx2, cardId), tip = ItemStateFn.getTip(cardState, varName), tipError = TipFn.checkTipSatisfies(tip);
  if (tipError)
    throw tipError;
  if (options?.assertTitle && options.assertTitle[0] != tip.title[0])
    throw new Error(`tip title not right: ${tip.title[0]} != ${options.assertTitle[0]}`);
  switch (tip.title[0]) {
    case "\u30AB\u30FC\u30C9":
    case "\u30C6\u30AD\u30B9\u30C8":
    case "StringOptions":
    case "BattleBonus":
    case "GlobalEffects":
    case "BaSyou":
      return TipFn.getSelection(tip);
  }
}
function getCardTipTextRefs(ctx2, varName, cardId) {
  return getCardTipSelection(ctx2, varName, cardId, { assertTitle: ["\u30C6\u30AD\u30B9\u30C8", [], []] });
}
function setCardTipTextRefs(ctx2, varName, pairs, cardId) {
  let cs = getItemState(ctx2, cardId);
  return cs = ItemStateFn.setTip(cs, varName, { title: ["\u30C6\u30AD\u30B9\u30C8", [], pairs] }), ctx2 = setItemState(ctx2, cardId, cs), ctx2;
}
function getCardTipStrBaSyouPairs(ctx2, varName, cardId) {
  return getCardTipSelection(ctx2, varName, cardId, { assertTitle: ["\u30AB\u30FC\u30C9", [], []] });
}
function setCardTipStrBaSyouPairs(ctx2, varName, pairs, cardId) {
  let cs = getItemState(ctx2, cardId);
  return cs = ItemStateFn.setTip(cs, varName, { title: ["\u30AB\u30FC\u30C9", [], pairs] }), ctx2 = setItemState(ctx2, cardId, cs), ctx2;
}
function getCardTipBattleBonus(ctx2, varName, cardId) {
  return getCardTipSelection(ctx2, varName, cardId, { assertTitle: ["BattleBonus", [], []] });
}
function getCardTipStrings(ctx2, varName, cardId) {
  return getCardTipSelection(ctx2, varName, cardId, { assertTitle: ["StringOptions", [], []] });
}
function createPlayTextEffectFromEffect(ctx2, e, options) {
  const cardId = EffectFn.getCardID(e), cardController = getItemController(ctx2, cardId);
  if (options?.logicTreeAction?.logicTree)
    options.logicTreeAction.logicTree = {
      type: "And",
      children: [
        {
          type: "Leaf",
          value: "\u540C\u56DE\u5408\u4E0A\u9650"
        },
        options.logicTreeAction.logicTree
      ]
    };
  if (options?.conditions)
    options.conditions = {
      ...options.conditions,
      "\u540C\u56DE\u5408\u4E0A\u9650": {
        actions: [
          {
            title: ["\u540C\u56DE\u5408\u4E0A\u9650", 1]
          }
        ]
      }
    };
  return EffectFn.fromEffectBasic(e, {
    ...options,
    reason: ["PlayText", cardController, cardId, e.text.id]
  });
}
function addImmediateEffectIfCanPayCost(ctx2, effect) {
  const cets = createCommandEffectTips(ctx2, effect);
  if (cets.filter(CommandEffecTipFn.filterNoError).length == 0)
    return ctx2 = EventCenterFn.onAddImmediateEffectButConditionFail(ctx2, effect, cets), ctx2;
  return addImmediateEffect(ctx2, effect);
}

// src/game/gameStateWithFlowMemory/effect.ts
function doActiveEffect(ctx2, playerID, effectID, logicId, logicSubId) {
  if (logCategory("doEffect", effectID), getActiveEffectID(ctx2) != effectID)
    throw new Error("activeEffectID != effectID");
  const effect = getEffect(ctx2, effectID);
  if (effect == null)
    throw new Error("effect not found");
  const isStackEffect_ = isStackEffect(ctx2, effectID);
  try {
    ctx2 = doEffect(ctx2, effect, logicId, logicSubId);
  } catch (e) {
    if (e instanceof TargetMissingError)
      ctx2 = EventCenterFn.onTargetMessingError(ctx2, effect, e);
    else
      throw e;
  }
  if (ctx2 = clearActiveEffectID(ctx2), ctx2 = removeEffect(ctx2, effectID), isStackEffect_)
    ctx2 = {
      ...ctx2,
      stackEffectMemory: [...ctx2.stackEffectMemory, effect]
    };
  if (isStackEffect_ && ctx2.stackEffect.length == 0)
    ctx2 = {
      ...ctx2,
      flowMemory: {
        ...ctx2.flowMemory,
        shouldTriggerStackEffectFinishedEvent: !0
      }
    };
  return ctx2;
}
function setActiveEffectID(ctx2, playerID, effectID) {
  if (getActiveEffectID(ctx2) != null)
    throw new Error("\u6709\u4EBA\u5728\u57F7\u884C\u5176\u5B83\u6307\u4EE4");
  const effect = getEffect(ctx2, effectID);
  if (effect == null)
    throw new Error("\u8F38\u5165\u7684\u6548\u679C\u4E0D\u5B58\u5728\uFF0C\u6D41\u7A0B\u6709\u8AA4");
  if (EffectFn.getPlayerID(effect) != playerID)
    throw new Error("\u4F60\u4E0D\u662F\u63A7\u5236\u8005");
  const cetsNoErr = createCommandEffectTips(ctx2, effect).filter(CommandEffecTipFn.filterNoError);
  if (cetsNoErr.length == 0)
    throw console.log(JSON.stringify(effect, null, 2)), new Error("\u8F38\u5165\u7684\u6548\u679C\u7121\u6CD5\u652F\u4ED8\uFF0C\u6D41\u7A0B\u6709\u8AA4");
  for (let cet of cetsNoErr)
    ctx2 = clearTipSelectionForUser(ctx2, effect, cet.logicID, cet.logicSubID);
  return ctx2 = {
    ...ctx2,
    flowMemory: {
      ...ctx2.flowMemory,
      activeEffectID: effectID,
      activeLogicID: cetsNoErr.length == 1 ? cetsNoErr[0].logicID : null,
      activeLogicSubID: cetsNoErr.length == 1 ? cetsNoErr[0].logicSubID : null
    }
  }, ctx2;
}
function cancelActiveEffectID(ctx2, playerID) {
  const activeEffectID = getActiveEffectID(ctx2);
  if (activeEffectID == null)
    throw new Error("[cancelEffectID] activeEffectID not exist");
  const effect = getEffect(ctx2, activeEffectID);
  if (effect == null)
    return ctx2;
  if (EffectFn.getPlayerID(effect) != playerID)
    throw new Error("[cancelEffectID] \u4F60\u4E0D\u662F\u63A7\u5236\u8005");
  return ctx2 = clearActiveEffectID(ctx2), ctx2;
}
function getActiveEffectID(ctx2) {
  return ctx2.flowMemory.activeEffectID;
}
function clearActiveEffectID(ctx2) {
  return {
    ...ctx2,
    flowMemory: {
      ...ctx2.flowMemory,
      activeEffectID: null,
      activeLogicID: null,
      activeLogicSubID: null
    }
  };
}
function getActiveLogicID(ctx2) {
  return ctx2.flowMemory.activeLogicID;
}
function getActiveLogicSubID(ctx2) {
  return ctx2.flowMemory.activeLogicSubID;
}
function setActiveLogicID(ctx2, logicID, logicSubID) {
  return {
    ...ctx2,
    flowMemory: {
      ...ctx2.flowMemory,
      activeLogicID: logicID,
      activeLogicSubID: logicSubID
    }
  };
}
function deleteImmediateEffect(ctx2, playerID, effectID) {
  const effect = getEffect(ctx2, effectID);
  if (effect == null)
    throw new Error("effect not found " + effectID);
  if (EffectFn.getPlayerID(effect) != playerID)
    throw new Error("you are not controller");
  if (effect.isOption != !0)
    throw new Error("isOption must true");
  return removeEffect(ctx2, effectID);
}

// src/game/gameState/createPlayGEffects.ts
function createPlayGEffects(ctx2, cardId) {
  const playerId = getItemOwner(ctx2, cardId);
  return {
    id: `createPlayGEffects_${cardId}`,
    reason: ["PlayCard", playerId, cardId, { isPlayG: !0 }],
    description: "PlayG",
    text: {
      id: `createPlayGEffects_text_${cardId}`,
      title: ["\u4F7F\u7528\u578B", ["\u81EA\u8ECD", "\u914D\u5099\u30D5\u30A7\u30A4\u30BA"]],
      description: "PlayG",
      conditions: {
        "\u51FAG\u4E0A\u9650": {
          actions: [
            {
              title: function _(ctx3, effect2, { DefineFn: DefineFn2, GameStateFn: GameStateFn2, ToolFn: ToolFn2 }) {
                const cardId2 = DefineFn2.EffectFn.getCardID(effect2), cardController = GameStateFn2.getItemController(ctx3, cardId2), ps = GameStateFn2.getPlayerState(ctx3, cardController);
                if (ps.playGCount > 0)
                  throw new DefineFn2.TipError(`\u51FAG\u4E0A\u9650: ${ps.playGCount}`, { isPlayGLimit: !0 });
                return ctx3 = GameStateFn2.mapPlayerState(ctx3, cardController, (ps2) => {
                  return {
                    ...ps2,
                    playGCount: ps2.playGCount + 1
                  };
                }), ctx3;
              }.toString()
            }
          ]
        }
      },
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect2, { DefineFn: DefineFn2, GameStateFn: GameStateFn2, ToolFn: ToolFn2 }) {
                const cardId2 = DefineFn2.EffectFn.getCardID(effect2), from = GameStateFn2.getItemBaSyou(ctx3, cardId2);
                return ctx3 = GameStateFn2.doItemMove(ctx3, DefineFn2.AbsoluteBaSyouFn.setBaSyouKeyword(from, "G\u30BE\u30FC\u30F3"), [cardId2, from]), ctx3;
              }.toString()
            },
            {
              title: ["triggerEvent", { title: ["\u30D7\u30EC\u30A4\u3055\u308C\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"] }]
            },
            {
              title: ["triggerEvent", { title: ["\u3053\u306E\u30AB\u30FC\u30C9\u304CG\u3068\u3057\u3066\u5834\u306B\u51FA\u305F\u5834\u5408"] }]
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/createPlayEffects.ts
function createPlayEffects(ctx2, playerId) {
  const ges = getGlobalEffects(ctx2, null);
  ctx2 = setGlobalEffects(ctx2, null, ges);
  const canPlayByText = ges.filter((ge) => ge.title[0] == "\u81EA\u8ECD\u624B\u672D\u306B\u3042\u308B\u304B\u306E\u3088\u3046\u306B\u30D7\u30EC\u30A4\u3067\u304D\u308B").flatMap((ge) => ge.cardIds).filter((itemId) => AbsoluteBaSyouFn.getPlayerID(getItemBaSyou(ctx2, itemId)) == playerId), getPlayCardEffectsF = ifElse_default(always_default(PhaseFn.eq(getPhase(ctx2), ["\u914D\u5099\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"])), pipe(always_default([AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"), AbsoluteBaSyouFn.of(playerId, "\u30CF\u30F3\u30AC\u30FC")]), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, concat_default(canPlayByText), map_default((cardId) => {
    if (getItemPrototype(ctx2, cardId).category == "\u30B3\u30DE\u30F3\u30C9")
      return [];
    return createPlayCardEffects(ctx2, cardId).filter((eff) => inTiming(eff.text));
  }), flatten_default), ifElse_default(always_default(PhaseFn.isFreeTiming(getPhase(ctx2))), pipe(always_default([AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"), AbsoluteBaSyouFn.of(playerId, "\u30CF\u30F3\u30AC\u30FC")]), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, concat_default(canPlayByText), map_default((cardId) => {
    if (getItemPrototype(ctx2, cardId).category == "\u30B3\u30DE\u30F3\u30C9")
      return [];
    if (getCardHasSpeicalEffect(ctx2, ["\u30AF\u30A4\u30C3\u30AF"], cardId))
      return createPlayCardEffects(ctx2, cardId);
    return [];
  }), flatten_default), always_default([]))), getPlayGF = ifElse_default(always_default(PhaseFn.eq(getPhase(ctx2), ["\u914D\u5099\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0"])), pipe(always_default([AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"), AbsoluteBaSyouFn.of(playerId, "\u30CF\u30F3\u30AC\u30FC")]), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, concat_default(canPlayByText), map_default((cardId) => {
    const card = getCard(ctx2, cardId), eff = createPlayGEffects(ctx2, card.id);
    if (inTiming(eff.text))
      return [eff];
    return [];
  }), flatten_default), always_default([])), getPlayTextF = pipe(always_default(lift_default(AbsoluteBaSyouFn.of)([playerId], [...BaSyouKeywordFn.getBaAll(), "G\u30BE\u30FC\u30F3"])), map_default((basyou) => {
    return getItemIdsByBasyou(ctx2, basyou).flatMap((cardId) => getCardTexts(ctx2, cardId).flatMap((text) => {
      if (AbsoluteBaSyouFn.getBaSyouKeyword(basyou) == "G\u30BE\u30FC\u30F3") {
        if (text.protectLevel != 2)
          return [];
      }
      switch (text.title[0]) {
        case "\u4F7F\u7528\u578B":
          return [text];
        case "\u7279\u6B8A\u578B":
          return createTextsFromSpecialEffect(ctx2, text).filter((text2) => text2.title[0] == "\u4F7F\u7528\u578B");
      }
      return [];
    }).filter(inTiming).map((text) => {
      const playTextConditions = {
        "\u540C\u56DE\u5408\u4E0A\u9650": {
          actions: [
            {
              title: ["\u540C\u56DE\u5408\u4E0A\u9650", 1]
            }
          ]
        }
      };
      return {
        id: `createPlayEffects_${playerId}_${cardId}_${text.id}`,
        reason: ["PlayText", playerId, cardId, text.id],
        description: text.description,
        text: {
          ...text,
          conditions: {
            ...text.conditions,
            ...playTextConditions
          }
        }
      };
    }));
  }), flatten_default), getPlayCommandF = ifElse_default(always_default(PhaseFn.isFreeTiming(getPhase(ctx2))), pipe(always_default([AbsoluteBaSyouFn.of(playerId, "\u624B\u672D"), AbsoluteBaSyouFn.of(playerId, "\u30CF\u30F3\u30AC\u30FC")]), map_default((basyou) => getItemIdsByBasyou(ctx2, basyou)), flatten_default, concat_default(canPlayByText), map_default((cardId) => {
    const card = getCard(ctx2, cardId), proto = getItemPrototype(ctx2, card.id);
    if (proto.commandText && inTiming(proto.commandText))
      return createPlayCardEffects(ctx2, card.id);
    return [];
  }), flatten_default), always_default([]));
  function inTiming(text) {
    const siYouTiming = (() => {
      if (text.title[0] == "\u4F7F\u7528\u578B")
        return text.title[1];
      throw new Error("not support:" + text.title[0] + ":" + text.description);
    })();
    switch (siYouTiming[0]) {
      case "\u81EA\u8ECD":
        if (ctx2.activePlayerID != playerId)
          return logCategory("createPlayEffects", `ctx.activePlayerID != ${playerId}`, text.title, text.description), !1;
        break;
      case "\u6575\u8ECD":
        if (ctx2.activePlayerID == playerId)
          return logCategory("createPlayEffects", `ctx.activePlayerID == ${playerId}`, text.title, text.description), !1;
        break;
      case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
        if (ctx2.phase[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA")
          return logCategory("createPlayEffects", 'ctx.timing[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"', text.title, text.description), !1;
        break;
      case "\u653B\u6483\u30B9\u30C6\u30C3\u30D7":
      case "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7":
      case "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7":
      case "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7":
        if (ctx2.phase[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA")
          return logCategory("createPlayEffects", 'ctx.timing[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"', text.title, text.description), !1;
        if (ctx2.phase[1] != siYouTiming[0])
          return logCategory("createPlayEffects", `ctx.timing[1] != ${siYouTiming[0]}`, text.title, text.description), !1;
        break;
    }
    switch (siYouTiming[0]) {
      case "\u81EA\u8ECD":
      case "\u6575\u8ECD":
        switch (siYouTiming[1]) {
          case "\u914D\u5099\u30D5\u30A7\u30A4\u30BA":
          case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
            if (ctx2.phase[0] != siYouTiming[1])
              return logCategory("createPlayEffects", `ctx.timing[0] != ${siYouTiming[1]}`, text.title, text.description), !1;
            break;
          case "\u653B\u6483\u30B9\u30C6\u30C3\u30D7":
          case "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7":
          case "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7":
          case "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7":
            if (ctx2.phase[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA")
              return logCategory("createPlayEffects", 'ctx.timing[0] != "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA"', ctx2.phase, text.title, text.description), !1;
            if (ctx2.phase[1] != siYouTiming[1])
              return logCategory("createPlayEffects", `ctx.timing[1] != ${siYouTiming[1]}`, ctx2.phase, text.title, text.description), !1;
            break;
        }
        break;
    }
    return !0;
  }
  return [...getPlayCardEffectsF(), ...getPlayGF(), ...getPlayCommandF(), ...getPlayTextF()];
}

// src/game/gameState/updateCommand.ts
function updateCommand(ctx2) {
  const playerAEffects = createPlayEffects(ctx2, PlayerA), playerBEffects = createPlayEffects(ctx2, PlayerB), allEffects = [...playerAEffects, ...playerBEffects];
  ctx2 = setCommandEffects(ctx2, allEffects);
  const testedEffects = allEffects.flatMap((e) => createCommandEffectTips(ctx2, e));
  return ctx2 = setCommandEffectTips(ctx2, testedEffects), ctx2;
}
function getPlayerCommands(ctx2, playerID) {
  return ctx2.commandEffectTips.filter(CommandEffecTipFn.filterPlayerId(getEffects(ctx2), playerID));
}
function getPlayerCommandsFilterNoError(ctx2, playerID) {
  return getPlayerCommands(ctx2, playerID).filter(CommandEffecTipFn.filterNoError);
}
function getPlayerCommandsFilterNoErrorDistinct(ctx2, playerID) {
  return getPlayerCommandsFilterNoError(ctx2, playerID).filter(CommandEffecTipFn.filterEffectDistinct);
}

// src/game/gameState/doCutInDestroyEffectsAndClear.ts
function doCutInDestroyEffectsAndClear(ctx2, ordered) {
  const destryEffectIds = ordered || ctx2.destroyEffect;
  return ctx2 = {
    ...ctx2,
    destroyEffect: [],
    stackEffect: [...destryEffectIds, ...ctx2.stackEffect]
  }, destryEffectIds.map((i) => getEffect(ctx2, i)).forEach((e) => {
    if (e.reason[0] != "Destroy")
      throw new Error;
    const reason = e.reason[3], itemId = EffectFn.getCardID(e);
    ctx2 = doTriggerEvent(ctx2, { title: ["\u7834\u58CA\u3055\u308C\u305F\u5834\u5408", reason], cardIds: [itemId] });
  }), ctx2;
}

// src/game/gameState/createAttackPhaseRuleEffect.ts
function createAttackPhaseRuleEffect(ctx2, playerId) {
  const phase = getPhase(ctx2);
  return {
    id: `createAttackPhaseRuleEffect_${playerId}`,
    reason: ["GameRule", playerId, { isAttack: phase[1] == "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", isDefence: phase[1] == "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7" }],
    description: "\u51FA\u64CA",
    isOption: !0,
    text: {
      id: `createAttackPhaseRuleEffect_text_${playerId}`,
      title: [],
      description: "\u51FA\u64CA",
      conditions: {
        [TipFn.createGoEarthKey()]: {
          title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
            const runtimeBattleArea = GameStateFn2.getRuntimeBattleArea(ctx3, "\u6226\u95D8\u30A8\u30EA\u30A21");
            if (runtimeBattleArea == "\u5B87\u5B99\u30A8\u30EA\u30A2")
              return null;
            const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), opponentPlayerId = DefineFn2.PlayerIDFn.getOpponent(playerId2);
            let unitIds = GameStateFn2.getItemIdsByBasyou(ctx3, DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u914D\u5099\u30A8\u30EA\u30A2")).filter((cardId) => GameStateFn2.getSetGroupRoot(ctx3, cardId) == cardId).filter((cardId) => GameStateFn2.getCardBattleArea(ctx3, cardId).includes(runtimeBattleArea)).filter((cardId) => GameStateFn2.getCard(ctx3, cardId).isRoll != !0);
            const opponentUnitIds = GameStateFn2.getBattleGroup(ctx3, DefineFn2.AbsoluteBaSyouFn.of(opponentPlayerId, "\u6226\u95D8\u30A8\u30EA\u30A21"));
            if (opponentUnitIds.length) {
              if (GameStateFn2.isBattleGroupHasA(ctx3, ["\u9AD8\u6A5F\u52D5"], opponentUnitIds[0]))
                unitIds = unitIds.filter((id) => GameStateFn2.isBattleGroupHasA(ctx3, ["\u9AD8\u6A5F\u52D5"], id));
            }
            return {
              title: ["\u30AB\u30FC\u30C9", unitIds.map((id) => {
                return [id, GameStateFn2.getItemBaSyou(ctx3, id)];
              }), []],
              flags: { isGoBattleArea1: !0 }
            };
          }.toString(),
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), fackCardId = DefineFn2.EffectFn.getCardID(effect), earthPairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx3, "\u53BB\u5730\u7403", fackCardId);
                for (let pair3 of earthPairs)
                  ctx3 = GameStateFn2.doItemMove(ctx3, DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u6226\u95D8\u30A8\u30EA\u30A21"), pair3);
                return ctx3;
              }.toString()
            }
          ],
          groupKey: "\u51FA\u64CA"
        },
        [TipFn.createGoSpaceKey()]: {
          title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
            const runtimeBattleArea = GameStateFn2.getRuntimeBattleArea(ctx3, "\u6226\u95D8\u30A8\u30EA\u30A22");
            if (runtimeBattleArea == "\u5730\u7403\u30A8\u30EA\u30A2")
              return null;
            const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), opponentPlayerId = DefineFn2.PlayerIDFn.getOpponent(playerId2);
            let unitIds = GameStateFn2.getItemIdsByBasyou(ctx3, DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u914D\u5099\u30A8\u30EA\u30A2")).filter((cardId) => GameStateFn2.getSetGroupRoot(ctx3, cardId) == cardId).filter((cardId) => GameStateFn2.getCardBattleArea(ctx3, cardId).includes(runtimeBattleArea)).filter((cardId) => GameStateFn2.getCard(ctx3, cardId).isRoll != !0);
            const opponentUnitIds = GameStateFn2.getBattleGroup(ctx3, DefineFn2.AbsoluteBaSyouFn.of(opponentPlayerId, "\u6226\u95D8\u30A8\u30EA\u30A22"));
            if (opponentUnitIds.length) {
              if (GameStateFn2.isBattleGroupHasA(ctx3, ["\u9AD8\u6A5F\u52D5"], opponentUnitIds[0]))
                unitIds = unitIds.filter((id) => GameStateFn2.isBattleGroupHasA(ctx3, ["\u9AD8\u6A5F\u52D5"], id));
            }
            return {
              title: ["\u30AB\u30FC\u30C9", unitIds.map((id) => {
                return [id, GameStateFn2.getItemBaSyou(ctx3, id)];
              }), []],
              flags: { isGoBattleArea2: !0 }
            };
          }.toString(),
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), fackCardId = DefineFn2.EffectFn.getCardID(effect), spacePairs = GameStateFn2.getCardTipStrBaSyouPairs(ctx3, "\u53BB\u5B87\u5B99", fackCardId);
                for (let pair3 of spacePairs)
                  ctx3 = GameStateFn2.doItemMove(ctx3, DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u6226\u95D8\u30A8\u30EA\u30A22"), pair3);
                return ctx3;
              }.toString()
            }
          ],
          groupKey: "\u51FA\u64CA"
        }
      },
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const fackCardId = DefineFn2.EffectFn.getCardID(effect), phase2 = GameStateFn2.getPhase(ctx3), pairs1 = GameStateFn2.getCardTipStrBaSyouPairs(ctx3, "\u53BB\u5730\u7403", fackCardId), pairs2 = GameStateFn2.getCardTipStrBaSyouPairs(ctx3, "\u53BB\u5B87\u5B99", fackCardId);
                if (DefineFn2.PhaseFn.eq(phase2, ["\u6226\u95D8\u30D5\u30A7\u30A4\u30BA", "\u653B\u6483\u30B9\u30C6\u30C3\u30D7", "\u898F\u5B9A\u306E\u52B9\u679C"]))
                  ctx3 = GameStateFn2.doTriggerEvent(ctx3, {
                    title: ["\u3053\u306E\u30AB\u30FC\u30C9\u304C\u653B\u6483\u306B\u51FA\u6483\u3057\u305F\u5834\u5408"],
                    cardIds: [...pairs1, ...pairs2].map((p) => p[0])
                  });
                return ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/createDamageRuleEffect.ts
function createDamageRuleEffect(ctx2, playerId) {
  return {
    id: `createDamageRuleEffect_${playerId}`,
    reason: ["GameRule", playerId, { isDamageCheck: !0 }],
    text: {
      id: `createDamageRuleEffect_text_${playerId}`,
      title: [],
      description: "getDamageRuleEffect",
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect);
                return ctx3 = GameStateFn2.doPlayerAttack(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A21", 1), ctx3 = GameStateFn2.doPlayerAttack(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A22", 1), ctx3 = GameStateFn2.doPlayerAttack(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A21", 2), ctx3 = GameStateFn2.doPlayerAttack(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A22", 2), ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/createReturnRuleEffect.ts
function createReturnRuleEffect(ctx2, playerId) {
  return {
    id: `createReturnRuleEffect_${playerId}`,
    reason: ["GameRule", playerId, { isReturn: !0 }],
    text: {
      id: `createReturnRuleEffect_text_${playerId}`,
      title: [],
      description: "getReturnRuleEffect",
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), opponentId = DefineFn2.PlayerIDFn.getOpponent(playerId2);
                ctx3 = _processKw(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A21"), ctx3 = _processKw(ctx3, playerId2, "\u6226\u95D8\u30A8\u30EA\u30A22"), ctx3 = _processKw(ctx3, opponentId, "\u6226\u95D8\u30A8\u30EA\u30A21"), ctx3 = _processKw(ctx3, opponentId, "\u6226\u95D8\u30A8\u30EA\u30A22");
                function _processKw(ctx4, playerId3, fromKw) {
                  const from = DefineFn2.AbsoluteBaSyouFn.of(playerId3, fromKw), runtimeArea1 = GameStateFn2.getRuntimeBattleArea(ctx4, fromKw), unitIdsAtArea1 = GameStateFn2.getItemIdsByBasyou(ctx4, from);
                  for (let cardId of unitIdsAtArea1) {
                    const target = [cardId, from];
                    if (GameStateFn2.getSetGroupRoot(ctx4, cardId) != cardId)
                      continue;
                    if (GameStateFn2.getCardBattleArea(ctx4, cardId).includes(runtimeArea1))
                      ctx4 = GameStateFn2.doItemSetRollState(ctx4, !0, target, { isSkipTargetMissing: !0 }), ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.of(playerId3, "\u914D\u5099\u30A8\u30EA\u30A2"), target, { isSkipTargetMissing: !0 });
                    else
                      ctx4 = GameStateFn2.doItemMove(ctx4, DefineFn2.AbsoluteBaSyouFn.of(playerId3, "\u30B8\u30E3\u30F3\u30AF\u30E4\u30FC\u30C9"), target, { isSkipTargetMissing: !0 });
                  }
                  return ctx4;
                }
                return ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/createDrawPhaseRuleEffect.ts
function createDrawPhaseRuleEffect(ctx2, playerId) {
  return {
    id: `createDrawPhaseRuleEffect_${playerId}`,
    reason: ["GameRule", playerId, { isDraw: !0 }],
    text: {
      id: `createDrawPhaseRuleEffect_text_${playerId}`,
      title: [],
      description: "\u62BD\u724C\u968E\u6BB5\u898F\u5B9A\u6548\u679C",
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), from = DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u672C\u56FD"), cardIds = GameStateFn2.getItemIdsByBasyou(ctx3, from).slice(0, 1);
                for (let cardId of cardIds)
                  ctx3 = GameStateFn2.doItemMove(ctx3, DefineFn2.AbsoluteBaSyouFn.of(playerId2, "\u624B\u672D"), [cardId, from]);
                return ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameState/createRerollPhaseRuleEffect.ts
function createRerollPhaseRuleEffect(ctx2, playerId) {
  return {
    id: `createRerollPhaseRuleEffect_${playerId}`,
    reason: ["GameRule", playerId, { isReroll: !0 }],
    text: {
      id: `createRerollPhaseRuleEffect_text_${playerId}`,
      title: [],
      description: "getRerollPhaseRuleEffect",
      logicTreeActions: [
        {
          actions: [
            {
              title: function _(ctx3, effect, { DefineFn: DefineFn2, GameStateFn: GameStateFn2 }) {
                const playerId2 = DefineFn2.EffectFn.getPlayerID(effect), pairs = ["\u914D\u5099\u30A8\u30EA\u30A2", "G\u30BE\u30FC\u30F3"].flatMap((kw) => {
                  const basyou = DefineFn2.AbsoluteBaSyouFn.of(playerId2, kw);
                  return GameStateFn2.getItemIdsByBasyou(ctx3, basyou).filter((cardId) => GameStateFn2.getItemIsCanReroll(ctx3, cardId)).map((cardId) => {
                    return [cardId, basyou];
                  });
                });
                for (let pair3 of pairs)
                  ctx3 = GameStateFn2.doItemSetRollState(ctx3, !1, pair3, { isSkipTargetMissing: !0 });
                return ctx3;
              }.toString()
            }
          ]
        }
      ]
    }
  };
}

// src/game/gameStateWithFlowMemory/applyFlow.ts
function applyFlow(ctx2, playerID, flow) {
  switch (logCategory("applyFlow", `${playerID} ${flow.id} ${flow.description}`, playerID, flow), flow.id) {
    case "FlowSetActiveEffectID": {
      if (flow.effectID == null)
        throw new Error("effectID not found");
      if (ctx2 = setActiveEffectID(ctx2, playerID, flow.effectID), (!!ctx2.flowMemory.hasPlayerPassCut[PlayerA] && !!ctx2.flowMemory.hasPlayerPassCut[PlayerB]) == !1)
        ctx2 = {
          ...ctx2,
          flowMemory: {
            ...ctx2.flowMemory,
            hasPlayerPassCut: {}
          }
        };
      return ctx2;
    }
    case "FlowCancelActiveEffectID":
      return cancelActiveEffectID(ctx2, playerID);
    case "FlowDeleteImmediateEffect": {
      if (flow.effectID == null)
        throw new Error("effectID not found");
      return deleteImmediateEffect(ctx2, playerID, flow.effectID);
    }
    case "FlowSetActiveLogicID":
      return setActiveLogicID(ctx2, flow.logicID, flow.logicSubID);
    case "FlowDoEffect": {
      if (flow.effectID == null)
        throw new Error("effectID not found");
      if (flow.logicID == null)
        throw new Error("logicID not found");
      if (flow.logicSubID == null)
        throw new Error("logicSubID not found");
      return ctx2 = doActiveEffect(ctx2, playerID, flow.effectID, flow.logicID, flow.logicSubID), ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPhase: {}
        }
      }, ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPayCost: {}
        }
      }, ctx2 = updateCommand(ctx2), ctx2;
    }
    case "FlowPassPhase":
      return {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPhase: {
            ...ctx2.flowMemory.hasPlayerPassPhase,
            [playerID]: !0
          }
        }
      };
    case "FlowCancelPassPhase":
      return {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPhase: {
            ...ctx2.flowMemory.hasPlayerPassPhase,
            [playerID]: !1
          }
        }
      };
    case "FlowPassCut":
      return {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassCut: {
            ...ctx2.flowMemory.hasPlayerPassCut,
            [playerID]: !0
          }
        }
      };
    case "FlowCancelPassCut":
      return {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassCut: {
            ...ctx2.flowMemory.hasPlayerPassCut,
            [playerID]: !1
          }
        }
      };
    case "FlowTriggerTextEvent":
      if (ctx2.flowMemory.hasTriggerEvent)
        return logCategory("applyFlow", "\u5DF2\u7D93\u57F7\u884C\u904EtriggerTextEvent"), ctx2;
      if (ctx2.flowMemory.state != "playing") {
        switch (ctx2.flowMemory.state) {
          case "prepareDeck": {
            ctx2 = shuffleItems(ctx2, AbsoluteBaSyouFn.of(PlayerA, "\u672C\u56FD")), ctx2 = shuffleItems(ctx2, AbsoluteBaSyouFn.of(PlayerB, "\u672C\u56FD")), ctx2 = {
              ...ctx2,
              flowMemory: {
                ...ctx2.flowMemory,
                state: "whoFirst"
              }
            };
            break;
          }
          case "whoFirst": {
            ctx2 = {
              ...ctx2,
              flowMemory: {
                ...ctx2.flowMemory,
                state: "draw6AndConfirm"
              }
            };
            break;
          }
          case "draw6AndConfirm": {
            {
              const from = AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.of(PlayerA, "\u672C\u56FD")), to = AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.of(PlayerA, "\u624B\u672D")), cards = ctx2.table.cardStack[from].slice(0, 6);
              ctx2.table.cardStack[from] = ctx2.table.cardStack[from].slice(6), ctx2.table.cardStack[to] = [...cards, ...ctx2.table.cardStack[to] || []];
            }
            {
              const from = AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.of(PlayerB, "\u672C\u56FD")), to = AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.of(PlayerB, "\u624B\u672D")), cards = ctx2.table.cardStack[from].slice(0, 6);
              ctx2.table.cardStack[from] = ctx2.table.cardStack[from].slice(6), ctx2.table.cardStack[to] = [...cards, ...ctx2.table.cardStack[to] || []];
            }
            ctx2 = {
              ...ctx2,
              phase: ["\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA", "\u30D5\u30A7\u30A4\u30BA\u958B\u59CB"]
            }, ctx2 = {
              ...ctx2,
              flowMemory: {
                ...ctx2.flowMemory,
                state: "playing"
              }
            };
            break;
          }
        }
        return ctx2;
      }
      if (flow.event.title[0] == "GameEventOnTiming" && PhaseFn.eq(flow.event.title[1], ctx2.phase))
        ;
      else
        throw new Error(`\u4F60\u8981\u89F8\u767C\u7684\u968E\u6BB5\u548C\u73FE\u968E\u6BB5\u4E0D\u7B26: ${flow.event.title[1]} != ${ctx2.phase}`);
      if (ctx2.activePlayerID == null)
        throw new Error("activePlayerID not found");
      switch (ctx2.phase[0]) {
        case "\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA": {
          switch (ctx2.phase[1]) {
            case "\u898F\u5B9A\u306E\u52B9\u679C": {
              ctx2 = addImmediateEffect(ctx2, createDrawPhaseRuleEffect(ctx2, ctx2.activePlayerID));
              break;
            }
            default:
              ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
          }
          break;
        }
        case "\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA": {
          switch (ctx2.phase[1]) {
            case "\u898F\u5B9A\u306E\u52B9\u679C": {
              ctx2 = addImmediateEffect(ctx2, createRerollPhaseRuleEffect(ctx2, ctx2.activePlayerID));
              break;
            }
            default:
              ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
          }
          break;
        }
        case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA": {
          switch (ctx2.phase[1]) {
            case "\u653B\u6483\u30B9\u30C6\u30C3\u30D7": {
              switch (ctx2.phase[2]) {
                case "\u898F\u5B9A\u306E\u52B9\u679C": {
                  ctx2 = addImmediateEffect(ctx2, createAttackPhaseRuleEffect(ctx2, ctx2.activePlayerID));
                  break;
                }
                case "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB": {
                  ctx2 = checkIsBattle(ctx2), ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
                  break;
                }
                default:
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
              }
              break;
            }
            case "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7": {
              switch (ctx2.phase[2]) {
                case "\u898F\u5B9A\u306E\u52B9\u679C": {
                  ctx2 = addImmediateEffect(ctx2, createAttackPhaseRuleEffect(ctx2, PlayerIDFn.getOpponent(ctx2.activePlayerID)));
                  break;
                }
                case "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB": {
                  ctx2 = checkIsBattle(ctx2), ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
                  break;
                }
                default:
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
              }
              break;
            }
            case "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7": {
              switch (ctx2.phase[2]) {
                case "\u898F\u5B9A\u306E\u52B9\u679C": {
                  ctx2 = addImmediateEffect(ctx2, createDamageRuleEffect(ctx2, ctx2.activePlayerID));
                  break;
                }
                case "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB": {
                  ctx2 = checkIsBattle(ctx2), ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
                  break;
                }
                default:
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
              }
              break;
            }
            case "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7": {
              switch (ctx2.phase[2]) {
                case "\u898F\u5B9A\u306E\u52B9\u679C": {
                  ctx2 = addImmediateEffect(ctx2, createReturnRuleEffect(ctx2, ctx2.activePlayerID));
                  break;
                }
                case "\u30B9\u30C6\u30C3\u30D7\u958B\u59CB": {
                  ctx2 = checkIsBattle(ctx2), ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
                  break;
                }
                default:
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
              }
              break;
            }
            case "\u30BF\u30FC\u30F3\u7D42\u4E86\u6642":
              switch (ctx2.phase[2]) {
                case "\u30C0\u30E1\u30FC\u30B8\u30EA\u30BB\u30C3\u30C8":
                  break;
                case "\u52B9\u679C\u89E3\u6C7A": {
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
                  break;
                }
                case "\u624B\u672D\u8ABF\u6574":
                  break;
                case "\u52B9\u679C\u7D42\u4E86\u3002\u30BF\u30FC\u30F3\u7D42\u4E86": {
                  if (ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] }), ctx2.activePlayerID == null)
                    throw new Error("activePlayerID not found");
                  ctx2 = {
                    ...ctx2,
                    activePlayerID: PlayerIDFn.getOpponent(ctx2.activePlayerID),
                    turn: ctx2.turn + 1
                  };
                  break;
                }
                default:
                  ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
              }
          }
          break;
        }
        default:
          ctx2 = doTriggerEvent(ctx2, { title: ["GameEventOnTiming", ctx2.phase] });
      }
      return ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasTriggerEvent: !0
        }
      }, ctx2;
    case "FlowUpdateCommand":
      return ctx2 = updateCommand(ctx2), ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasTriggerEvent: !0
        }
      }, ctx2;
    case "FlowNextTiming":
      return ctx2 = setNextPhase(ctx2), ctx2 = updateCommand(ctx2), ctx2 = createMinusDestroyEffectAndPush(ctx2), ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasTriggerEvent: !1
        }
      }, ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPhase: {}
        }
      }, ctx2;
    case "FlowHandleStackEffectFinished":
      return ctx2 = doTriggerEvent(ctx2, {
        title: ["\u30AB\u30C3\u30C8\u7D42\u4E86\u6642", ctx2.stackEffectMemory]
      }), ctx2 = {
        ...ctx2,
        stackEffectMemory: [],
        flowMemory: {
          ...ctx2.flowMemory,
          shouldTriggerStackEffectFinishedEvent: !1
        }
      }, ctx2;
    case "FlowPassPayCost": {
      if (getEffect(ctx2, flow.effectID) == null)
        throw new Error(`effectID not found:${flow.effectID}`);
      return ctx2 = {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassPayCost: {
            ...ctx2.flowMemory.hasPlayerPassPayCost,
            [playerID]: !0
          }
        }
      }, ctx2;
    }
    case "FlowMakeDestroyOrder":
      return ctx2 = doCutInDestroyEffectsAndClear(ctx2, flow.destroyEffect.map((i) => i.id)), {
        ...ctx2,
        flowMemory: {
          ...ctx2.flowMemory,
          hasPlayerPassCut: {}
        }
      };
    case "FlowSetTipSelection": {
      const effect = getEffect(ctx2, flow.effectID), cardId = EffectFn.getCardID(effect);
      return ctx2 = mapItemState(ctx2, cardId, (is) => ItemStateFn.setTip(is, flow.conditionKey, flow.tip)), assertTipForUserSelection(ctx2, effect, cardId), ctx2;
    }
  }
  return ctx2;
}

// src/game/gameStateWithFlowMemory/GameStateWithFlowMemory.ts
function createGameStateWithFlowMemory() {
  return {
    ...createGameState(),
    stackEffectMemory: [],
    flowMemory: DEFAULT_FLOW_MEMORY
  };
}
function initState(ctx2, deckA, deckB) {
  return ctx2 = createCardWithProtoIds(ctx2, AbsoluteBaSyouFn.of(PlayerA, "\u672C\u56FD"), deckA), ctx2 = createCardWithProtoIds(ctx2, AbsoluteBaSyouFn.of(PlayerB, "\u672C\u56FD"), deckB), ctx2 = shuffleItems(ctx2, AbsoluteBaSyouFn.of(PlayerA, "\u672C\u56FD")), ctx2 = shuffleItems(ctx2, AbsoluteBaSyouFn.of(PlayerB, "\u672C\u56FD")), ctx2 = initCardFace(ctx2), ctx2 = setActivePlayerID(ctx2, PlayerA), ctx2 = {
    ...ctx2,
    flowMemory: DEFAULT_FLOW_MEMORY
  }, ctx2;
}
function initCardFace(ctx2) {
  return mapCardsWithBasyou(ctx2, (baSyou, card) => {
    switch (baSyou.value[1]) {
      case "\u672C\u56FD":
      case "\u6368\u3066\u5C71":
      case "\u624B\u672D":
        return {
          ...card,
          isFaceDown: !0
        };
      default:
        return {
          ...card,
          isFaceDown: !1
        };
    }
  });
}
var DEFAULT_FLOW_MEMORY = {
  state: "prepareDeck",
  hasTriggerEvent: !1,
  hasPlayerPassPhase: {},
  hasPlayerPassCut: {},
  hasPlayerPassPayCost: {},
  shouldTriggerStackEffectFinishedEvent: !1,
  activeEffectID: null,
  activeLogicID: null,
  activeLogicSubID: null
};

// src/client/define/GameContext.ts
function createGameContext() {
  return {
    varsPool: {},
    gameState: createGameStateWithFlowMemory(),
    versionID: 0
  };
}

// node_modules/tslib/tslib.es6.mjs
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i.return))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) {
    for (var i = 0, l = from.length, ar;i < l; i++)
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var extendStatics = function(d, b) {
  return extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  }, extendStatics(d, b);
};

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance), instance.stack = new Error().stack;
  }, ctorFunc = createImpl(_super);
  return ctorFunc.prototype = Object.create(Error.prototype), ctorFunc.prototype.constructor = ctorFunc, ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this), this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "", this.name = "UnsubscriptionError", this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer))
    finalizer();
  else
    finalizer.unsubscribe();
}
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown, this.closed = !1, this._parentage = null, this._finalizers = null;
  }
  return Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b, errors;
    if (!this.closed) {
      this.closed = !0;
      var _parentage = this._parentage;
      if (_parentage)
        if (this._parentage = null, Array.isArray(_parentage))
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next();!_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        else
          _parentage.remove(this);
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer))
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next();!_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              if (errors = errors !== null && errors !== void 0 ? errors : [], err instanceof UnsubscriptionError)
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              else
                errors.push(err);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors)
        throw new UnsubscriptionError(errors);
    }
  }, Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this)
      if (this.closed)
        execFinalizer(teardown);
      else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this))
            return;
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
  }, Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }, Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }, Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent)
      this._parentage = null;
    else if (Array.isArray(_parentage))
      arrRemove(_parentage, parent);
  }, Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    if (_finalizers && arrRemove(_finalizers, teardown), teardown instanceof Subscription2)
      teardown._removeParent(this);
  }, Subscription2.EMPTY = function() {
    var empty = new Subscription2;
    return empty.closed = !0, empty;
  }(), Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: !1,
  useDeprecatedNextContext: !1
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout) {
    var args = [];
    for (var _i = 2;_i < arguments.length; _i++)
      args[_i - 2] = arguments[_i];
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout)
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError)
      onUnhandledError(err);
    else
      throw err;
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot)
      context = { errorThrown: !1, error: null };
    if (cb(), isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      if (context = null, errorThrown)
        throw error;
    }
  } else
    cb();
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context)
    context.errorThrown = !0, context.error = err;
}
var context = null;

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
function bind3(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling)
    captureError(error);
  else
    reportUnhandledError(error);
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    if (_this.isStopped = !1, destination) {
      if (_this.destination = destination, isSubscription(destination))
        destination.add(_this);
    } else
      _this.destination = EMPTY_OBSERVER;
    return _this;
  }
  return Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }, Subscriber2.prototype.next = function(value) {
    if (this.isStopped)
      handleStoppedNotification(nextNotification(value), this);
    else
      this._next(value);
  }, Subscriber2.prototype.error = function(err) {
    if (this.isStopped)
      handleStoppedNotification(errorNotification(err), this);
    else
      this.isStopped = !0, this._error(err);
  }, Subscriber2.prototype.complete = function() {
    if (this.isStopped)
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    else
      this.isStopped = !0, this._complete();
  }, Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed)
      this.isStopped = !0, _super.prototype.unsubscribe.call(this), this.destination = null;
  }, Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  }, Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }, Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind, ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  return ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next)
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
  }, ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error)
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    else
      handleUnhandledError(err);
  }, ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete)
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
  }, ConsumerObserver2;
}(), SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this, partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext)
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    else {
      var context_1;
      if (_this && config.useDeprecatedNextContext)
        context_1 = Object.create(observerOrNext), context_1.unsubscribe = function() {
          return _this.unsubscribe();
        }, partialObserver = {
          next: observerOrNext.next && bind3(observerOrNext.next, context_1),
          error: observerOrNext.error && bind3(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind3(observerOrNext.complete, context_1)
        };
      else
        partialObserver = observerOrNext;
    }
    return _this.destination = new ConsumerObserver(partialObserver), _this;
  }
  return SafeSubscriber2;
}(Subscriber);
var EMPTY_OBSERVER = {
  closed: !0,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity2(x) {
  return x;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0)
    return identity2;
  if (fns.length === 1)
    return fns[0];
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe)
      this._subscribe = subscribe;
  }
  return Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2;
    return observable2.source = this, observable2.operator = operator, observable2;
  }, Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this, subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    return errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    }), subscriber;
  }, Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }, Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject3) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject3(err), subscriber.unsubscribe();
          }
        },
        error: reject3,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  }, Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  }, Observable2.prototype[observable] = function() {
    return this;
  }, Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0;_i < arguments.length; _i++)
      operations[_i] = arguments[_i];
    return pipeFromArray(operations)(this);
  }, Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    return promiseCtor = getPromiseCtor(promiseCtor), new promiseCtor(function(resolve, reject3) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject3(err);
      }, function() {
        return resolve(value);
      });
    });
  }, Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  }, Observable2;
}();

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source))
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    return _this.onFinalize = onFinalize, _this.shouldUnsubscribe = shouldUnsubscribe, _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next, _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error, _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete, _this;
  }
  return OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this), !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 || _a.call(this));
    }
  }, OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this), this.name = "ObjectUnsubscribedError", this.message = "object unsubscribed";
  };
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    return _this.closed = !1, _this.currentObservers = null, _this.observers = [], _this.isStopped = !1, _this.hasError = !1, _this.thrownError = null, _this;
  }
  return Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    return subject.operator = operator, subject;
  }, Subject2.prototype._throwIfClosed = function() {
    if (this.closed)
      throw new ObjectUnsubscribedError;
  }, Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      if (_this._throwIfClosed(), !_this.isStopped) {
        if (!_this.currentObservers)
          _this.currentObservers = Array.from(_this.observers);
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next();!_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  }, Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      if (_this._throwIfClosed(), !_this.isStopped) {
        _this.hasError = _this.isStopped = !0, _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length)
          observers.shift().error(err);
      }
    });
  }, Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      if (_this._throwIfClosed(), !_this.isStopped) {
        _this.isStopped = !0;
        var observers = _this.observers;
        while (observers.length)
          observers.shift().complete();
      }
    });
  }, Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = !0, this.observers = this.currentObservers = null;
  }, Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: !1,
    configurable: !0
  }), Subject2.prototype._trySubscribe = function(subscriber) {
    return this._throwIfClosed(), _super.prototype._trySubscribe.call(this, subscriber);
  }, Subject2.prototype._subscribe = function(subscriber) {
    return this._throwIfClosed(), this._checkFinalizedStatuses(subscriber), this._innerSubscribe(subscriber);
  }, Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this, _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped)
      return EMPTY_SUBSCRIPTION;
    return this.currentObservers = null, observers.push(subscriber), new Subscription(function() {
      _this.currentObservers = null, arrRemove(observers, subscriber);
    });
  }, Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError)
      subscriber.error(thrownError);
    else if (isStopped)
      subscriber.complete();
  }, Subject2.prototype.asObservable = function() {
    var observable2 = new Observable;
    return observable2.source = this, observable2;
  }, Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  }, Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    return _this.destination = destination, _this.source = source, _this;
  }
  return AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 || _b.call(_a, value);
  }, AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 || _b.call(_a, err);
  }, AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 || _b.call(_a);
  }, AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  }, AnonymousSubject2;
}(Subject);
// node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed, state = seed, index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = !0, value), emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state), subscriber.complete();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/scan.js
function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, !0));
}
// src/client/tool/appContext/eventCenter.ts
var OnEvent = new Subject, OnError = new Subject;

// src/game/gameStateWithFlowMemory/queryFlow.ts
function queryFlow(ctx2, playerID) {
  if ([PlayerA, PlayerB].map((pid) => {
    return AbsoluteBaSyouFn.toString(AbsoluteBaSyouFn.of(pid, "\u672C\u56FD"));
  }).map((baSyouID) => {
    return ctx2.table.cardStack[baSyouID] || [];
  }).filter((cards) => {
    return cards.length == 0;
  }).length > 0)
    return [{ id: "FlowWaitPlayer", description: "\u904A\u6232\u7D50\u675F" }];
  const activeEffectID = getActiveEffectID(ctx2);
  if (activeEffectID != null) {
    const currentActiveEffect = getEffect(ctx2, activeEffectID);
    if (currentActiveEffect == null)
      throw new Error("activeEffectID not found");
    const activeLogicID = getActiveLogicID(ctx2);
    if (activeLogicID == null) {
      if (EffectFn.getPlayerID(currentActiveEffect) != playerID)
        return [
          {
            id: "FlowObserveEffect",
            effectID: activeEffectID,
            description: `\u89C0\u5BDF\u6B63\u5728\u652F\u4ED8\u7684\u6548\u679C: ${currentActiveEffect.description}`
          }
        ];
      const cets = createCommandEffectTips(ctx2, currentActiveEffect).filter(CommandEffecTipFn.filterNoError);
      if (cets.length == 0)
        throw new Error("cets.length must > 0");
      return [
        {
          id: "FlowSetActiveLogicID",
          logicID: cets[0].logicID,
          logicSubID: cets[0].logicSubID,
          tips: cets
        }
      ];
    }
    const activeLogicSubID = getActiveLogicSubID(ctx2);
    if (activeLogicSubID == null)
      throw new Error("activeLogicSubID must exist now");
    if (!0) {
      const effectCreator = EffectFn.getPlayerID(currentActiveEffect), playerTips = createEffectTips(ctx2, currentActiveEffect, activeLogicID, activeLogicSubID, { isCheckUserSelection: !0 }).filter((toe) => toe.errors.length != 0).filter(TipOrErrorsFn.filterPlayerId(getEffects(ctx2), playerID)).map((info) => {
        if (info.tip == null)
          throw new Error("\u9019\u88E1\u6642\u5019\u6709\u932F\u8AA4\u7684\u53EA\u80FD\u662FTIP\u5B58\u5728\u7684\u5834\u5408, \u5176\u5B83\u7684\u60C5\u6CC1\u61C9\u8A72\u5728\u4F7F\u7528\u8005\u53D6\u5F97\u6307\u4EE4\u6642\u5C31\u904E\u6FFE\u6389\u4E86");
        return {
          id: "FlowSetTipSelection",
          effectID: currentActiveEffect.id,
          conditionKey: info.conditionKey,
          tip: info.tip,
          description: `${info.conditionKey}`
        };
      }), isPass = !!ctx2.flowMemory.hasPlayerPassPayCost[playerID], isOpponentPass = !!ctx2.flowMemory.hasPlayerPassPayCost[PlayerIDFn.getOpponent(playerID)];
      if (isPass && isOpponentPass) {
        if (effectCreator != playerID)
          return [
            {
              id: "FlowObserveEffect",
              effectID: activeEffectID,
              description: `\u89C0\u5BDF\u6B63\u5728\u652F\u4ED8\u7684\u6548\u679C: ${currentActiveEffect.description}`
            }
          ];
        return [
          {
            id: "FlowDoEffect",
            effectID: activeEffectID,
            logicID: activeLogicID,
            logicSubID: activeLogicSubID
          }
        ];
      } else if (isPass || isOpponentPass)
        if (effectCreator == playerID) {
          if (isPass)
            return [
              {
                id: "FlowObserveEffect",
                effectID: activeEffectID,
                description: `\u89C0\u5BDF\u6B63\u5728\u652F\u4ED8\u7684\u6548\u679C: ${currentActiveEffect.description}`
              }
            ];
        } else {
          if (isOpponentPass == !1)
            return [
              {
                id: "FlowObserveEffect",
                effectID: activeEffectID,
                description: `\u89C0\u5BDF\u6B63\u5728\u652F\u4ED8\u7684\u6548\u679C: ${currentActiveEffect.description}`
              }
            ];
          return [
            ...playerTips.length ? playerTips : [{
              id: "FlowPassPayCost",
              effectID: activeEffectID
            }]
          ];
        }
      if (effectCreator != playerID)
        return [
          {
            id: "FlowWaitPlayer",
            description: "\u7B49\u5F85\u5C0D\u65B9\u652F\u4ED8ActiveEffectID"
          }
        ];
      return [
        {
          id: "FlowCancelActiveEffectID",
          description: "\u53D6\u6D88\u652F\u4ED8\u6548\u679C\uFF0C\u8B93\u5176\u5B83\u73A9\u5BB6\u53EF\u4EE5\u652F\u4ED8"
        },
        ...playerTips.length ? playerTips : [{
          id: "FlowPassPayCost",
          effectID: activeEffectID
        }]
      ];
    }
    if (EffectFn.getPlayerID(currentActiveEffect) != playerID)
      return [
        {
          id: "FlowWaitPlayer",
          description: "\u7B49\u5F85\u5C0D\u65B9\u652F\u4ED8ActiveEffectID"
        },
        {
          id: "FlowObserveEffect",
          effectID: activeEffectID,
          description: `\u89C0\u5BDF\u6B63\u5728\u652F\u4ED8\u7684\u6548\u679C: ${currentActiveEffect.description}`
        }
      ];
    return [
      {
        id: "FlowCancelActiveEffectID",
        description: "\u53D6\u6D88\u652F\u4ED8\u6548\u679C\uFF0C\u8B93\u5176\u5B83\u73A9\u5BB6\u53EF\u4EE5\u652F\u4ED8"
      },
      {
        id: "FlowDoEffect",
        effectID: activeEffectID,
        logicID: 0,
        logicSubID: 0
      }
    ];
  }
  if (ctx2.immediateEffect.length) {
    const isActivePlayer = ctx2.activePlayerID == playerID, myEffects = [], opponentEffect = [];
    if (ctx2.immediateEffect.forEach((effectID) => {
      const effect = getEffect(ctx2, effectID);
      if (EffectFn.getPlayerID(effect) == playerID)
        myEffects.push(effect);
      else
        opponentEffect.push(effect);
    }), isActivePlayer == !1) {
      if (opponentEffect.length)
        return [
          {
            id: "FlowWaitPlayer",
            description: "\u7B49\u5F85\u4E3B\u52D5\u73A9\u5BB6\u8655\u7406\u8D77\u52D5\u6548\u679C"
          }
        ];
    }
    if (myEffects.length == 0)
      return [
        {
          id: "FlowWaitPlayer",
          description: "\u7B49\u5F85\u88AB\u52D5\u73A9\u5BB6\u8655\u7406\u8D77\u52D5\u6548\u679C"
        }
      ];
    const myEffectsOK = myEffects.filter((e) => {
      if (createCommandEffectTips(ctx2, e).filter(CommandEffecTipFn.filterNoError).length == 0)
        return !1;
      return !0;
    }), optionEffects = myEffects.filter((v) => v.isOption || myEffectsOK.map((e) => e.id).includes(v.id) == !1);
    return [
      ...myEffectsOK.length ? [
        {
          id: "FlowSetActiveEffectID",
          effectID: myEffectsOK[0].id,
          description: "\u9078\u64C7\u4E00\u500B\u8D77\u52D5\u6548\u679C",
          tips: myEffectsOK
        }
      ] : [],
      ...optionEffects.length ? [
        {
          id: "FlowDeleteImmediateEffect",
          effectID: optionEffects[0].id,
          description: "\u4F60\u53EF\u4EE5\u653E\u68C4\u9019\u4E9B\u6548\u679C",
          tips: optionEffects
        }
      ] : []
    ];
  }
  if (ctx2.flowMemory.shouldTriggerStackEffectFinishedEvent) {
    if (ctx2.activePlayerID == playerID == !1)
      return [
        {
          id: "FlowWaitPlayer",
          description: "\u7B49\u5F85\u4E3B\u52D5\u73A9\u5BB6\u8655\u7406"
        }
      ];
    return [
      {
        id: "FlowHandleStackEffectFinished",
        description: "\u8655\u7406\u5806\u758A\u7D50\u675F"
      }
    ];
  }
  const myCommandList = getPlayerCommandsFilterNoErrorDistinct(ctx2, playerID).map((tip) => tip.effectId).map((id) => getEffect(ctx2, id));
  if (ctx2.stackEffect.length) {
    const effect = getTopEffect(ctx2);
    if (effect == null)
      throw new Error(`effect not found: ${ctx2.stackEffect.length}`);
    if (effect.id == null)
      throw new Error("effect.id not found");
    const controller = EffectFn.getPlayerID(effect);
    if ((!!ctx2.flowMemory.hasPlayerPassCut[PlayerA] && !!ctx2.flowMemory.hasPlayerPassCut[PlayerB]) == !1) {
      if (ctx2.flowMemory.hasPlayerPassCut[playerID])
        return [
          {
            id: "FlowCancelPassCut"
          }
        ];
      if (controller == playerID) {
        const opponentPlayerID = playerID == PlayerA ? PlayerB : PlayerA;
        if (!ctx2.flowMemory.hasPlayerPassCut[opponentPlayerID])
          return [
            {
              id: "FlowWaitPlayer",
              description: "\u73FE\u5728\u7684\u5207\u5165\u512A\u5148\u6B0A\u5728\u5C0D\u65B9"
            }
          ];
      }
      return [
        ...(() => {
          if (myCommandList.length == 0)
            return [];
          return [
            {
              id: "FlowSetActiveEffectID",
              effectID: myCommandList[0].id,
              tips: myCommandList,
              description: "\u4F60\u53EF\u4EE5\u5207\u5165"
            }
          ];
        })(),
        {
          id: "FlowPassCut"
        }
      ];
    }
    if (controller != playerID)
      return [
        {
          id: "FlowWaitPlayer",
          description: "\u7B49\u5F85\u6548\u679C\u63A7\u5236\u8005\u8655\u7406"
        }
      ];
    return [
      {
        id: "FlowSetActiveEffectID",
        effectID: effect.id,
        description: "\u652F\u4ED8\u6700\u4E0A\u65B9\u7684\u5806\u758A\u6548\u679C",
        tips: [effect]
      }
    ];
  }
  SelectDestroyOrder: {
    switch (ctx2.phase[0]) {
      case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
        switch (ctx2.phase[1]) {
          case "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7":
            switch (ctx2.phase[2]) {
              case "\u898F\u5B9A\u306E\u52B9\u679C":
                break SelectDestroyOrder;
            }
        }
    }
    const willAddedDestroyEffects = ctx2.destroyEffect.map((aid) => getEffect(ctx2, aid));
    if (willAddedDestroyEffects.length) {
      if (ctx2.activePlayerID == playerID == !1)
        return [
          {
            id: "FlowWaitPlayer",
            description: "\u7B49\u5F85\u4E3B\u52D5\u73A9\u5BB6\u6C7A\u5B9A\u7834\u58DE\u5EE2\u68C4\u6548\u679C\u7684\u9806\u5E8F"
          }
        ];
      return [
        {
          id: "FlowMakeDestroyOrder",
          destroyEffect: willAddedDestroyEffects,
          description: "\u6C7A\u5B9A\u7834\u58DE\u5EE2\u68C4\u6548\u679C\u7684\u9806\u5E8F"
        }
      ];
    }
  }
  const handleFreeTiming = () => {
    if ((!!ctx2.flowMemory.hasPlayerPassPhase[PlayerA] && !!ctx2.flowMemory.hasPlayerPassPhase[PlayerB]) == !1) {
      if (ctx2.flowMemory.hasPlayerPassPhase[playerID])
        return [
          {
            id: "FlowCancelPassPhase",
            description: `\u7B49\u5F85\u5C0D\u65B9\u7D50\u675F\u6216\u662F\u53D6\u6D88[${ctx2.phase}]\u7D50\u675F`
          }
        ];
      return [
        {
          id: "FlowPassPhase",
          description: `\u5BA3\u544A[${ctx2.phase}]\u7D50\u675F`
        },
        ...(() => {
          if (myCommandList.length == 0)
            return [];
          return [
            {
              id: "FlowSetActiveEffectID",
              effectID: myCommandList[0].id,
              description: "\u9078\u64C7\u4E00\u500B\u6307\u4EE4",
              tips: myCommandList
            }
          ];
        })()
      ];
    }
    if (playerID != ctx2.activePlayerID)
      return [
        {
          id: "FlowWaitPlayer",
          description: "\u7B49\u5F85\u4F3A\u670D\u5668\u8655\u7406"
        }
      ];
    return [
      {
        id: "FlowNextTiming"
      }
    ];
  };
  if (ctx2.flowMemory.state == "playing") {
    const phase = ctx2.phase;
    switch (phase[0]) {
      case "\u30C9\u30ED\u30FC\u30D5\u30A7\u30A4\u30BA":
      case "\u30EA\u30ED\u30FC\u30EB\u30D5\u30A7\u30A4\u30BA":
      case "\u914D\u5099\u30D5\u30A7\u30A4\u30BA":
        switch (phase[1]) {
          case "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0":
            return handleFreeTiming();
        }
        break;
      case "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA":
        switch (phase[1]) {
          case "\u653B\u6483\u30B9\u30C6\u30C3\u30D7":
          case "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7":
          case "\u5E30\u9084\u30B9\u30C6\u30C3\u30D7":
          case "\u30C0\u30E1\u30FC\u30B8\u5224\u5B9A\u30B9\u30C6\u30C3\u30D7":
            switch (phase[2]) {
              case "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B0":
              case "\u30D5\u30EA\u30FC\u30BF\u30A4\u30DF\u30F3\u30B02":
                return handleFreeTiming();
            }
        }
        break;
    }
  }
  if (playerID != ctx2.activePlayerID)
    return [
      {
        id: "FlowWaitPlayer",
        description: "\u7B49\u5F85\u4F3A\u670D\u5668\u8655\u7406"
      }
    ];
  if (ctx2.flowMemory.hasTriggerEvent)
    return [{ id: "FlowNextTiming" }];
  return [
    {
      id: "FlowTriggerTextEvent",
      event: {
        title: ["GameEventOnTiming", ctx2.phase]
      }
    }
  ];
}

// src/client/tool/appContext/OnViewModel.ts
var DEFAULT_VIEW_MODEL = {
  model: createGameContext(),
  playerCommands: {},
  cardSelection: [],
  cardPositionSelection: [],
  localMemory: {
    clientId: null,
    timing: PhaseFn.getFirst(),
    lastPassPhase: !1
  }
}, OnViewModel = OnEvent.pipe(scan((viewModel, evt) => {
  window.__gameState__ = viewModel.model.gameState, logCategory("OnViewModel", "evt", evt);
  try {
    switch (evt.id) {
      case "OnClickNewGame": {
        let ctx2 = createGameContext();
        ctx2 = {
          ...ctx2,
          versionID: 0
        };
        const { deckA, deckB } = evt;
        ctx2.gameState = initState(ctx2.gameState, deckA, deckB);
        const playerAFlow = queryFlow(ctx2.gameState, PlayerA), playerBFlow = queryFlow(ctx2.gameState, PlayerB);
        return {
          ...DEFAULT_VIEW_MODEL,
          model: ctx2,
          playerCommands: {
            [PlayerA]: playerAFlow,
            [PlayerB]: playerBFlow
          }
        };
      }
      case "OnClickFlowConfirm": {
        if (evt.versionID != viewModel.model.versionID)
          return console.warn(`versionID not match, ignore this changes: ${evt.versionID} != origin ${viewModel.model.versionID}`), viewModel;
        logCategory("OnClickFlowConfirm", "before applyFlow", viewModel.model.gameState);
        const gameState = applyFlow(viewModel.model.gameState, evt.clientId, evt.flow);
        logCategory("OnClickFlowConfirm", "after applyFlow", viewModel.model.gameState);
        const playerAFlow = queryFlow(gameState, PlayerA), playerBFlow = queryFlow(gameState, PlayerB);
        return {
          ...viewModel,
          model: {
            ...viewModel.model,
            gameState,
            versionID: viewModel.model.versionID + 1
          },
          playerCommands: {
            [PlayerA]: playerAFlow,
            [PlayerB]: playerBFlow
          },
          cardSelection: [],
          localMemory: {
            clientId: evt.clientId,
            timing: getPhase(gameState),
            lastPassPhase: gameState.flowMemory.hasPlayerPassPhase[evt.clientId] || !1
          }
        };
      }
      case "OnClickRequireTargetConfirm":
        return { ...viewModel, cardSelection: [] };
      case "OnClickChangeClient":
        return viewModel;
      case "OnModelFromFirebase":
        return viewModel;
      case "OnClickCardEvent":
        if (viewModel.cardSelection.includes(evt.card.id))
          return {
            ...viewModel,
            cardSelection: viewModel.cardSelection.filter((v) => v != evt.card.id)
          };
        return {
          ...viewModel,
          cardSelection: [...viewModel.cardSelection, evt.card.id]
        };
      default:
        return console.log(`unknown evt ${evt}`), viewModel;
    }
  } catch (e) {
    console.log(viewModel.model.gameState), OnError.next(e);
  }
  return viewModel;
}, DEFAULT_VIEW_MODEL));

// src/client/tool/appContext/index.tsx
var jsx_dev_runtime = __toESM(require_react_jsx_dev_runtime_development(), 1), AppContext = import_react.createContext({
  viewModel: DEFAULT_VIEW_MODEL
}), AppContextProvider = (props) => {
  const [viewModel, setViewModel] = import_react.useState(DEFAULT_VIEW_MODEL);
  return import_react.useEffect(() => {
    const subscriber = OnViewModel.subscribe((model) => {
      logCategory("AppContextProvider", "OnViewModel", model), setViewModel(model);
    });
    return () => {
      subscriber.unsubscribe();
    };
  }, []), import_react.useEffect(() => {
  }, []), /* @__PURE__ */ jsx_dev_runtime.jsxDEV(AppContext.Provider, {
    value: {
      viewModel
    },
    children: props.children
  }, void 0, !1, void 0, this);
};

// src/client/component/ClientView.tsx
var import_react8 = __toESM(require_react_development(), 1);

// src/client/component/FlowListView.tsx
var import_react5 = __toESM(require_react_development(), 1);

// src/client/component/EffectView.tsx
var import_react3 = __toESM(require_react_development(), 1);

// src/client/component/CardView.tsx
var import_react2 = __toESM(require_react_development(), 1);
var jsx_dev_runtime2 = __toESM(require_react_jsx_dev_runtime_development(), 1), CARD_SIZE = 100, CardView = (props) => {
  if (props.cardID == null || props.clientId == null)
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("img", {
      src: "https://particle-979.appspot.com/common/images/card/cardback_0.jpg",
      style: { height: props.size || CARD_SIZE }
    }, void 0, !1, void 0, this);
  const appContext = import_react2.useContext(AppContext), flows = import_react2.useMemo(() => {
    return appContext.viewModel.playerCommands[props.clientId || "unknown"] || [];
  }, [appContext.viewModel.playerCommands]), tipTargetCardIds = import_react2.useMemo(() => {
    return flows.filter((flow) => flow.id == "FlowSetTipSelection").flatMap((flow) => {
      switch (flow.tip.title[0]) {
        case "\u30AB\u30FC\u30C9":
          return flow.tip.title[1].map((i) => i[0]);
      }
      return [];
    });
  }, [flows]), card = import_react2.useMemo(() => {
    return getCard(appContext.viewModel.model.gameState, props.cardID || "unknown");
  }, [props.cardID, appContext.viewModel.model.gameState]), renderItemState = import_react2.useMemo(() => {
    const itemState = getItemState(appContext.viewModel.model.gameState, props.cardID || "unknown");
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      children: [
        /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: [
            "damage: ",
            itemState.damage
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: [
            "destroy: ",
            itemState.destroyReason?.id
          ]
        }, void 0, !0, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [props.cardID, appContext.viewModel.model.gameState]), isVisible = import_react2.useMemo(() => {
    if (props.isCheat)
      return !0;
    if (card.isFaceDown)
      switch (getItemBaSyou(appContext.viewModel.model.gameState, card.id).value[1]) {
        case "\u624B\u672D": {
          if (getItemController(appContext.viewModel.model.gameState, card.id) == props.clientId)
            return !0;
          break;
        }
        default:
          break;
      }
    return card.isFaceDown != !0;
  }, [props.clientId, props.isCheat, card, appContext.viewModel.model.gameState]), renderBp = import_react2.useMemo(() => {
    const bp = getSetGroupBattlePoint(appContext.viewModel.model.gameState, props.cardID || "unknown");
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      children: [
        bp[0],
        "/",
        bp[1],
        "/",
        bp[2]
      ]
    }, void 0, !0, void 0, this);
  }, [appContext.viewModel.model.gameState, props.cardID]), renderCoin = import_react2.useMemo(() => {
    if (getSetGroupRoot(appContext.viewModel.model.gameState, props.cardID || "unknown") == props.cardID == !1)
      return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {}, void 0, !1, void 0, this);
    const coins = getCoinIdsByCardId(appContext.viewModel.model.gameState, props.cardID || "unknown").map((id) => getCoin(appContext.viewModel.model.gameState, id));
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      children: coins.map((coin, i) => {
        return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: JSON.stringify(coin.title)
        }, i, !1, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [appContext.viewModel.model.gameState, props.cardID]), renderGlobalEffects = import_react2.useMemo(() => {
    if (getSetGroupRoot(appContext.viewModel.model.gameState, props.cardID || "unknown") == props.cardID == !1)
      return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {}, void 0, !1, void 0, this);
    const ges = getGlobalEffects(appContext.viewModel.model.gameState, null).filter((ge) => ge.cardIds.includes(props.cardID || "unknown"));
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      children: ges.map((ge, i) => {
        if (ge.title[0] == "AddTextRef")
          return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
            children: getCardTextFromCardTextRef(appContext.viewModel.model.gameState, ge.title[1]).description
          }, i, !1, void 0, this);
        if (ge.title[0] == "AddText")
          return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
            children: ge.title[1].description
          }, i, !1, void 0, this);
        return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: JSON.stringify(ge.title)
        }, i, !1, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [appContext.viewModel.model.gameState, props.cardID]), renderText = import_react2.useMemo(() => {
    const proto = getItemPrototype(appContext.viewModel.model.gameState, props.cardID || "unknown");
    if (props.isShowInfo != !0)
      return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {}, void 0, !1, void 0, this);
    let texts = getCardTexts(appContext.viewModel.model.gameState, props.cardID || "unknown");
    return texts = [...proto.commandText ? [proto.commandText] : [], ...texts], /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      children: [
        /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: proto.title
        }, void 0, !1, void 0, this),
        texts.map((text, i) => {
          return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
            children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
              style: { border: "1px solid black" },
              children: text.description
            }, void 0, !1, void 0, this)
          }, i, !1, void 0, this);
        }),
        /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          children: proto.characteristic
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
          style: { color: "grey" },
          children: proto.description
        }, void 0, !1, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [appContext.viewModel.model.gameState, props.cardID, props.isShowInfo]), renderCmds = import_react2.useMemo(() => {
    if (props.isShowCmd)
      return flows.flatMap((flow) => {
        if (flow?.id == "FlowSetActiveEffectID")
          return flow.tips.filter((e) => EffectFn.getCardID(e) == props.cardID).map((tip, i) => {
            return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
              children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("button", {
                style: { width: "100%" },
                onClick: () => {
                  OnEvent.next({
                    id: "OnClickFlowConfirm",
                    clientId: props.clientId || "unknown",
                    flow: { ...flow, effectID: tip.id },
                    versionID: appContext.viewModel.model.versionID
                  });
                },
                children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
                  children: tip.text.description || tip.description
                }, void 0, !1, void 0, this)
              }, void 0, !1, void 0, this)
            }, `FlowSetActiveEffectID_${i}`, !1, void 0, this);
          });
        if (flow?.id == "FlowDeleteImmediateEffect")
          return flow.tips.filter((e) => EffectFn.getCardID(e) == props.cardID).map((tip, i) => {
            return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
              children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("button", {
                style: { width: "100%" },
                onClick: () => {
                  OnEvent.next({
                    id: "OnClickFlowConfirm",
                    clientId: props.clientId || "unknown",
                    flow: { ...flow, effectID: tip.id },
                    versionID: appContext.viewModel.model.versionID
                  });
                },
                children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
                  children: [
                    "\u53D6\u6D88\u6548\u679C\uFF1A",
                    tip.text.description || tip.description
                  ]
                }, void 0, !0, void 0, this)
              }, void 0, !1, void 0, this)
            }, `FlowDeleteImmediateEffect_${i}`, !1, void 0, this);
          });
        return [];
      });
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {}, void 0, !1, void 0, this);
  }, [props.isShowCmd, flows]);
  return import_react2.useMemo(() => {
    const imgSrc = isVisible ? getImgSrc(card.protoID || "unknown") : "https://particle-979.appspot.com/common/images/card/cardback_0.jpg", isSelect = appContext.viewModel.cardSelection.includes(card.id);
    return /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
      style: {
        ...tipTargetCardIds.includes(card.id) ? {
          border: "2px solid lightgreen"
        } : null
      },
      children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
        style: {
          border: "2px solid black",
          ...isSelect ? { border: "2px solid red" } : null
        },
        onClick: () => {
          if (props.enabled == !1)
            return;
          OnEvent.next({ id: "OnClickCardEvent", card });
        },
        children: [
          /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
            style: {
              ...card.isRoll ? { transform: "rotate(90deg)" } : null
            },
            children: /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("img", {
              src: imgSrc,
              style: { height: props.size || CARD_SIZE }
            }, void 0, !1, void 0, this)
          }, void 0, !1, void 0, this),
          isVisible ? /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {
            children: [
              /* @__PURE__ */ jsx_dev_runtime2.jsxDEV("div", {
                children: card.id
              }, void 0, !1, void 0, this),
              renderCmds,
              renderBp,
              renderCoin,
              renderGlobalEffects,
              renderItemState,
              renderText
            ]
          }, void 0, !0, void 0, this) : /* @__PURE__ */ jsx_dev_runtime2.jsxDEV(jsx_dev_runtime2.Fragment, {}, void 0, !1, void 0, this)
        ]
      }, void 0, !0, void 0, this)
    }, void 0, !1, void 0, this);
  }, [props, card, isVisible, appContext.viewModel.cardSelection, renderCmds, renderBp, renderCoin, renderGlobalEffects, tipTargetCardIds, renderItemState]);
};

// src/client/component/EffectView.tsx
var jsx_dev_runtime3 = __toESM(require_react_jsx_dev_runtime_development(), 1), EffectView = (props) => {
  const appContext = import_react3.useContext(AppContext), effect = import_react3.useMemo(() => {
    try {
      return getEffect(appContext.viewModel.model.gameState, props.effectID);
    } catch (e) {
      return console.error(e), e.message;
    }
  }, [appContext.viewModel.model.gameState, props.effectID]);
  if (typeof effect == "string")
    return /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
      children: [
        props.effectID,
        ":",
        effect
      ]
    }, void 0, !0, void 0, this);
  const cardID = import_react3.useMemo(() => {
    switch (effect.reason[0]) {
      case "Destroy":
      case "Event":
      case "PlayCard":
      case "PlayText":
      case "Situation":
      case "\u5834\u306B\u51FA\u308B":
        return EffectFn.getCardID(effect);
      case "GameRule":
        return null;
    }
  }, [effect]);
  return import_react3.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
      children: [
        /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
          children: effect.id
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
          children: JSON.stringify(effect.reason)
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
          children: effect.isOption ? "\u53EF\u53D6\u6D88" : "\u4E0D\u53EF\u53D6\u6D88"
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime3.jsxDEV(CardView, {
          enabled: !0,
          clientId: props.clientId,
          cardID: cardID || void 0,
          isShowCmd: !1
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime3.jsxDEV("div", {
          children: effect.text.description || effect.description
        }, void 0, !1, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [props, cardID, effect]);
};

// src/client/component/FlowSetTipSelectionView.tsx
var import_react4 = __toESM(require_react_development(), 1);
var jsx_dev_runtime4 = __toESM(require_react_jsx_dev_runtime_development(), 1), FlowSetTipSelectionView = (props) => {
  const appContext = import_react4.useContext(AppContext), renderWant = import_react4.useMemo(() => {
    const wants = TipFn.getWant(props.flow.tip);
    switch (props.flow.tip.title[0]) {
      case "\u30AB\u30FC\u30C9": {
        const cardIds = wants.map((p) => p[0]);
        return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
          style: {
            display: "flex",
            border: "2px solid black",
            overflow: "scroll"
          },
          children: cardIds.map((cardId) => {
            const isCheat = props.flow.tip.cheatCardIds?.includes(cardId);
            return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV(CardView, {
              enabled: !0,
              clientId: props.clientId,
              cardID: cardId,
              size: 200,
              isCheat
            }, cardId, !1, void 0, this);
          })
        }, void 0, !1, void 0, this);
      }
      case "GlobalEffects":
      case "BaSyou":
      case "StringOptions":
      case "BattleBonus":
        return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
          style: {
            display: "flex",
            border: "2px solid black",
            overflow: "scroll"
          },
          children: wants.map((value, i) => {
            return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
              children: /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("button", {
                onClick: () => {
                  const tip = {
                    title: [
                      props.flow.tip.title[0],
                      TipFn.getWant(props.flow.tip),
                      [value]
                    ]
                  };
                  OnEvent.next({
                    id: "OnClickFlowConfirm",
                    clientId: props.clientId,
                    flow: { ...props.flow, tip },
                    versionID: appContext.viewModel.model.versionID
                  });
                },
                children: JSON.stringify(value)
              }, void 0, !1, void 0, this)
            }, i, !1, void 0, this);
          })
        }, void 0, !1, void 0, this);
      case "\u30C6\u30AD\u30B9\u30C8":
        return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
          style: {
            display: "flex",
            border: "2px solid black",
            overflow: "scroll"
          },
          children: wants.map((value, i) => {
            return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
              children: /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("button", {
                onClick: () => {
                  const tip = {
                    title: [
                      "\u30C6\u30AD\u30B9\u30C8",
                      TipFn.getWant(props.flow.tip),
                      [value]
                    ]
                  };
                  OnEvent.next({
                    id: "OnClickFlowConfirm",
                    clientId: props.clientId,
                    flow: { ...props.flow, tip },
                    versionID: appContext.viewModel.model.versionID
                  });
                },
                children: getCardTextFromCardTextRef(appContext.viewModel.model.gameState, value).description
              }, void 0, !1, void 0, this)
            }, i, !1, void 0, this);
          })
        }, void 0, !1, void 0, this);
    }
    return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
      children: [
        "not support ",
        props.flow.tip.title[0]
      ]
    }, void 0, !0, void 0, this);
  }, [props, appContext.viewModel.model.gameState]), userSelection = import_react4.useMemo(() => {
    const wants = TipFn.getWant(props.flow.tip);
    switch (props.flow.tip.title[0]) {
      case "\u30AB\u30FC\u30C9": {
        const wantCardIds = wants.map((p) => p[0]);
        return appContext.viewModel.cardSelection.filter((cardId) => wantCardIds.includes(cardId));
      }
    }
    return [];
  }, [props.flow.tip, appContext.viewModel.cardSelection]), userTip = import_react4.useMemo(() => {
    return {
      ...props.flow.tip,
      title: [
        "\u30AB\u30FC\u30C9",
        TipFn.getWant(props.flow.tip),
        userSelection.map((cardId) => createStrBaSyouPair(appContext.viewModel.model.gameState, cardId))
      ]
    };
  }, [props.flow.tip, userSelection, appContext.viewModel.model.gameState]), renderButton = import_react4.useMemo(() => {
    const effect = getEffect(appContext.viewModel.model.gameState, props.flow.effectID), error = TipFn.checkTipSatisfies(userTip);
    if (error)
      return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
        children: [
          error.message,
          ":",
          effect.description
        ]
      }, void 0, !0, void 0, this);
    const flow = {
      ...props.flow,
      tip: userTip
    };
    return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("button", {
      style: { height: 50 },
      onClick: () => {
        OnEvent.next({
          id: "OnClickFlowConfirm",
          clientId: props.clientId,
          flow,
          versionID: appContext.viewModel.model.versionID
        });
      },
      children: "OK"
    }, void 0, !1, void 0, this);
  }, [props.flow, userTip]);
  return import_react4.useMemo(() => {
    const effect = getEffect(appContext.viewModel.model.gameState, props.flow.effectID);
    return /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
      style: props.style,
      children: /* @__PURE__ */ jsx_dev_runtime4.jsxDEV("div", {
        children: [
          renderButton,
          renderWant
        ]
      }, void 0, !0, void 0, this)
    }, void 0, !1, void 0, this);
  }, [props, renderWant, renderButton]);
};

// src/client/component/FlowListView.tsx
var jsx_dev_runtime5 = __toESM(require_react_jsx_dev_runtime_development(), 1), FlowListView = (props) => {
  const appContext = import_react5.useContext(AppContext), flows = import_react5.useMemo(() => {
    return appContext.viewModel.playerCommands[props.clientId] || [];
  }, [appContext.viewModel.playerCommands[props.clientId]]);
  return import_react5.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
      style: props.style,
      children: flows.map((flow, i) => {
        return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
          style: { border: "1px solid black" },
          children: [
            /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("button", {
              style: {
                height: 50
              },
              onClick: () => {
                OnEvent.next({
                  id: "OnClickFlowConfirm",
                  clientId: props.clientId,
                  flow,
                  versionID: appContext.viewModel.model.versionID
                });
              },
              children: [
                flow.id,
                "(",
                flow.description,
                ")"
              ]
            }, void 0, !0, void 0, this),
            (() => {
              switch (flow.id) {
                case "FlowPassPayCost":
                  return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(EffectView, {
                    enabled: !0,
                    clientId: props.clientId,
                    effectID: flow.effectID
                  }, void 0, !1, void 0, this);
                case "FlowDoEffect":
                case "FlowObserveEffect":
                  return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(EffectView, {
                    enabled: !1,
                    clientId: props.clientId,
                    effectID: flow.effectID
                  }, void 0, !1, void 0, this);
                case "FlowSetActiveLogicID":
                  return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
                    children: [
                      /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
                        children: "\u9078\u64C7\u4E00\u500B\u884C\u70BA"
                      }, void 0, !1, void 0, this),
                      flow.tips.map((tip, i2) => {
                        return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("button", {
                          onClick: () => {
                            OnEvent.next({
                              id: "OnClickFlowConfirm",
                              clientId: props.clientId,
                              flow: { ...flow, logicID: tip.logicID, logicSubID: tip.logicSubID },
                              versionID: appContext.viewModel.model.versionID
                            });
                          },
                          children: JSON.stringify(tip.conditionKeys)
                        }, i2, !1, void 0, this);
                      })
                    ]
                  }, void 0, !0, void 0, this);
                case "FlowSetTipSelection":
                  return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
                    style: { border: "1px solid black" },
                    children: /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(FlowSetTipSelectionView, {
                      clientId: props.clientId,
                      flow
                    }, void 0, !1, void 0, this)
                  }, void 0, !1, void 0, this);
                case "FlowSetActiveEffectID":
                  return flow.tips.filter((tip) => tip.reason[0] == "GameRule").map((tip, i2) => {
                    return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("div", {
                      style: { display: "flex", width: "100%" },
                      children: tip.reason[0] == "GameRule" ? /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(jsx_dev_runtime5.Fragment, {
                        children: /* @__PURE__ */ jsx_dev_runtime5.jsxDEV("button", {
                          style: { flex: 1, height: 50 },
                          onClick: () => {
                            OnEvent.next({
                              id: "OnClickFlowConfirm",
                              clientId: props.clientId,
                              flow: { ...flow, effectID: tip.id },
                              versionID: appContext.viewModel.model.versionID
                            });
                          },
                          children: tip.text.description || tip.description
                        }, void 0, !1, void 0, this)
                      }, void 0, !1, void 0, this) : /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(jsx_dev_runtime5.Fragment, {}, void 0, !1, void 0, this)
                    }, tip.id, !1, void 0, this);
                  });
                default:
                  return /* @__PURE__ */ jsx_dev_runtime5.jsxDEV(jsx_dev_runtime5.Fragment, {}, void 0, !1, void 0, this);
              }
            })()
          ]
        }, i, !0, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [flows, props.clientId]);
};

// src/client/component/TableView.tsx
var import_react7 = __toESM(require_react_development(), 1);

// src/client/component/CardStackView.tsx
var import_react6 = __toESM(require_react_development(), 1);
var jsx_dev_runtime6 = __toESM(require_react_jsx_dev_runtime_development(), 1), CardStackView = (props) => {
  const appContext = import_react6.useContext(AppContext), cards = import_react6.useMemo(() => {
    return appContext.viewModel.model.gameState.table.cardStack[AbsoluteBaSyouFn.toString(props.cardPosition)] || [];
  }, [
    props.cardPosition,
    appContext.viewModel.model.gameState.table.cardStack
  ]), cardsOnlySetGroupRoot = import_react6.useMemo(() => {
    return cards.filter((cardId) => {
      return getSetGroupRoot(appContext.viewModel.model.gameState, cardId) == cardId;
    });
  }, [cards, appContext.viewModel.model.gameState]), renderBattlePoint = import_react6.useMemo(() => {
    if (BaSyouKeywordFn.getBattleArea().includes(props.cardPosition.value[1]) != !0)
      return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV(jsx_dev_runtime6.Fragment, {}, void 0, !1, void 0, this);
    const bp = getBattleGroupBattlePoint(appContext.viewModel.model.gameState, cardsOnlySetGroupRoot);
    return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV(jsx_dev_runtime6.Fragment, {
      children: /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
        children: [
          "\u90E8\u968A\u6230\u9B25\u529B:",
          bp
        ]
      }, void 0, !0, void 0, this)
    }, void 0, !1, void 0, this);
  }, [props.cardPosition, appContext.viewModel.model.gameState, cardsOnlySetGroupRoot]);
  return import_react6.useMemo(() => {
    const _cardPositionID = AbsoluteBaSyouFn.toString(props.cardPosition);
    if (props.isShowStack)
      return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
        children: [
          /* @__PURE__ */ jsx_dev_runtime6.jsxDEV(CardView, {}, void 0, !1, void 0, this),
          /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
            children: [
              cards.length,
              " cards"
            ]
          }, void 0, !0, void 0, this)
        ]
      }, void 0, !0, void 0, this);
    return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV(jsx_dev_runtime6.Fragment, {
      children: [
        /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
          children: /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("button", {
            onClick: () => {
            },
            children: [
              _cardPositionID,
              ":",
              renderBattlePoint
            ]
          }, void 0, !0, void 0, this)
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
          style: {
            display: "flex",
            border: "2px solid black",
            overflow: "scroll",
            ...appContext.viewModel.cardPositionSelection.includes(_cardPositionID) ? { border: "2px solid red" } : null
          },
          children: cardsOnlySetGroupRoot.map((rootCardId) => {
            const cardsInSetGroup = getSetGroup(appContext.viewModel.model.gameState, rootCardId);
            return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV("div", {
              style: { display: "flex", border: "2px solid blue" },
              children: cardsInSetGroup.map((cardID, i) => {
                return /* @__PURE__ */ jsx_dev_runtime6.jsxDEV(CardView, {
                  enabled: !0,
                  clientId: props.clientId,
                  cardID,
                  size: props.cardSize,
                  isShowCmd: !0,
                  isShowInfo: props.isShowCardInfo
                }, cardID, !1, void 0, this);
              })
            }, rootCardId, !1, void 0, this);
          })
        }, void 0, !1, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [
    props,
    cardsOnlySetGroupRoot,
    appContext.viewModel.cardPositionSelection,
    appContext.viewModel.model,
    appContext.viewModel.model.gameState,
    cards,
    renderBattlePoint
  ]);
};

// src/client/component/TableView.tsx
var jsx_dev_runtime7 = __toESM(require_react_jsx_dev_runtime_development(), 1), TableView = (props) => {
  return import_react7.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime7.jsxDEV(jsx_dev_runtime7.Fragment, {
      children: /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
        style: { display: "flex", width: "100%" },
        children: [PlayerA, PlayerB].map((clientId) => {
          return /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
            style: { flex: 1, overflow: "scroll" },
            children: [
              /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
                children: /* @__PURE__ */ jsx_dev_runtime7.jsxDEV(CardStackView, {
                  clientId: props.clientId,
                  cardPosition: AbsoluteBaSyouFn.of(clientId, "\u624B\u672D")
                }, void 0, !1, void 0, this)
              }, clientId + "\u624B\u672D", !1, void 0, this),
              /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
                children: /* @__PURE__ */ jsx_dev_runtime7.jsxDEV(CardStackView, {
                  clientId: props.clientId,
                  cardPosition: AbsoluteBaSyouFn.of(clientId, "\u30CF\u30F3\u30AC\u30FC")
                }, void 0, !1, void 0, this)
              }, clientId + "\u30CF\u30F3\u30AC\u30FC", !1, void 0, this),
              /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
                children: /* @__PURE__ */ jsx_dev_runtime7.jsxDEV(CardStackView, {
                  clientId: props.clientId,
                  cardPosition: AbsoluteBaSyouFn.of(clientId, "\u914D\u5099\u30A8\u30EA\u30A2")
                }, void 0, !1, void 0, this)
              }, clientId + "\u914D\u5099\u30A8\u30EA\u30A2", !1, void 0, this),
              BaSyouKeywordFn.getAll().filter((basyouKw) => basyouKw != "\u624B\u672D" && basyouKw != "\u30CF\u30F3\u30AC\u30FC" && basyouKw != "\u914D\u5099\u30A8\u30EA\u30A2").map((basyouKw) => {
                return /* @__PURE__ */ jsx_dev_runtime7.jsxDEV("div", {
                  children: /* @__PURE__ */ jsx_dev_runtime7.jsxDEV(CardStackView, {
                    clientId: props.clientId,
                    cardPosition: AbsoluteBaSyouFn.of(clientId, basyouKw)
                  }, void 0, !1, void 0, this)
                }, clientId + basyouKw, !1, void 0, this);
              })
            ]
          }, clientId, !0, void 0, this);
        })
      }, void 0, !1, void 0, this)
    }, void 0, !1, void 0, this);
  }, [props.clientId]);
};

// src/client/component/ClientView.tsx
var jsx_dev_runtime8 = __toESM(require_react_jsx_dev_runtime_development(), 1);
function ClientView(props) {
  const appContext = import_react8.useContext(AppContext), renderStackEffects = import_react8.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
      style: { display: "flex", overflow: "scroll" },
      children: appContext.viewModel.model.gameState.stackEffect.map((effectId, i) => {
        return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          style: { border: "1px solid black" },
          children: [
            i,
            /* @__PURE__ */ jsx_dev_runtime8.jsxDEV(EffectView, {
              enabled: !0,
              clientId: props.clientId,
              effectID: effectId
            }, void 0, !1, void 0, this)
          ]
        }, i, !0, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [appContext.viewModel.model.gameState.stackEffect]), renderImmediateEffects = import_react8.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
      style: { display: "flex", overflow: "scroll" },
      children: appContext.viewModel.model.gameState.immediateEffect.map((effectId, i) => {
        return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          style: { border: "1px solid black" },
          children: [
            i,
            /* @__PURE__ */ jsx_dev_runtime8.jsxDEV(EffectView, {
              enabled: !0,
              clientId: props.clientId,
              effectID: effectId
            }, void 0, !1, void 0, this)
          ]
        }, i, !0, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [appContext.viewModel.model.gameState.immediateEffect]), renderDebug = import_react8.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
      children: [
        "flowMemory:",
        JSON.stringify(appContext.viewModel.model.gameState.flowMemory)
      ]
    }, void 0, !0, void 0, this);
  }, [appContext.viewModel.model.gameState.flowMemory]);
  return import_react8.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
      children: [
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("h1", {
          children: [
            "clientId: ",
            props.clientId
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: [
            "state: ",
            appContext.viewModel.model.gameState.flowMemory.state
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: [
            "activePlayerID: ",
            appContext.viewModel.model.gameState.activePlayerID
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: [
            "timing:",
            JSON.stringify(appContext.viewModel.model.gameState.phase)
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: [
            "turn: ",
            appContext.viewModel.model.gameState.turn
          ]
        }, void 0, !0, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: "\u7ACB\u5373\u6548\u679C"
        }, void 0, !1, void 0, this),
        renderImmediateEffects,
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: "\u5806\u758A\u6548\u679C"
        }, void 0, !1, void 0, this),
        renderStackEffects,
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV("div", {
          children: "\u6307\u4EE4"
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV(FlowListView, {
          clientId: props.clientId
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime8.jsxDEV(TableView, {
          clientId: props.clientId
        }, void 0, !1, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [
    appContext.viewModel.model.gameState,
    props.clientId,
    renderStackEffects
  ]);
}

// src/client/component/ControlView.tsx
var import_react9 = __toESM(require_react_development(), 1);
var jsx_dev_runtime9 = __toESM(require_react_jsx_dev_runtime_development(), 1), DECK_BLACK_T3 = ["179015_04B_O_BK010C_black", "179015_04B_O_BK010C_black", "179015_04B_U_BK058R_black", "179015_04B_U_BK058R_black", "179015_04B_U_BK059C_black", "179015_04B_U_BK059C_black", "179015_04B_U_BK061C_black", "179015_04B_U_BK061C_black", "179016_04B_U_BK066C_black", "179016_04B_U_BK066C_black", "179019_02A_C_BK015S_black", "179019_02A_C_BK015S_black", "179020_05C_U_BK100U_black", "179020_05C_U_BK100U_black", "179023_06C_C_BK048R_black", "179023_06C_C_BK048R_black", "179023_06C_C_BK049U_black", "179023_06C_C_BK049U_black", "179024_04B_C_BK027U_black", "179024_04B_C_BK027U_black", "179024_04B_U_BK060C_black", "179024_04B_U_BK060C_black", "179024_04B_U_BK067C_black", "179024_04B_U_BK067C_black", "179024_B2B_C_BK054C_black", "179024_B2B_C_BK054C_black", "179024_B2B_U_BK128S_black_02", "179024_B2B_U_BK128S_black_02", "179024_B2B_U_BK129R_black", "179024_B2B_U_BK129R_black", "179027_09D_C_BK063R_black", "179027_09D_C_BK063R_black", "179027_09D_O_BK010N_black", "179027_09D_O_BK010N_black", "179027_09D_U_BK163S_black", "179027_09D_U_BK163S_black", "179027_09D_U_BK163S_black", "179029_06C_C_BK045U_black", "179029_06C_C_BK045U_black", "179029_B3C_C_BK071N_black", "179029_B3C_C_BK071N_black", "179029_B3C_U_BK184N_black", "179029_B3C_U_BK184N_black", "179029_B3C_U_BK184N_black", "179029_B3C_U_BK185N_black", "179029_B3C_U_BK185N_black", "179030_11E_U_BK194S_2_black", "179030_11E_U_BK194S_2_black", "179030_11E_U_BK194S_2_black", "179901_B2B_C_BK005P_black"], DECK_WHITE_SPEED = ["179001_01A_CH_WT007R_white", "179004_01A_CH_WT009R_white", "179004_01A_CH_WT010C_white", "179007_02A_U_WT027U_white", "179007_02A_U_WT027U_white", "179008_02A_U_WT034U_white", "179008_02A_U_WT034U_white", "179008_02A_U_WT034U_white", "179014_03B_CH_WT027R_white", "179015_04B_U_WT067C_white", "179015_04B_U_WT067C_white", "179015_04B_U_WT067C_white", "179016_04B_U_WT074C_white", "179016_04B_U_WT074C_white", "179016_04B_U_WT074C_white", "179016_04B_U_WT075C_white", "179016_04B_U_WT075C_white", "179016_04B_U_WT075C_white", "179019_01A_C_WT010C_white", "179019_01A_C_WT010C_white", "179019_02A_U_WT028R_white", "179019_02A_U_WT028R_white", "179022_06C_CH_WT057R_white", "179022_06C_CH_WT057R_white", "179022_06C_CH_WT057R_white", "179022_06C_U_WT113R_white", "179022_06C_U_WT113R_white", "179022_06C_U_WT113R_white", "179023_06C_CH_WT067C_white", "179024_03B_U_WT057U_white", "179024_03B_U_WT057U_white", "179025_07D_C_WT060U_white", "179025_07D_CH_WT075C_white", "179025_07D_CH_WT075C_white", "179025_07D_CH_WT075C_white", "179027_09D_C_WT067R_white", "179027_09D_C_WT067R_white", "179029_B3C_CH_WT102R_white", "179029_B3C_CH_WT103N_white", "179029_B3C_U_WT196R_white", "179030_11E_C_WT077S_white", "179030_11E_C_WT077S_white", "179030_11E_C_WT077S_white", "179030_11E_CH_WT108N_white", "179901_00_C_WT003P_white", "179901_00_C_WT003P_white", "179901_00_C_WT003P_white", "179901_CG_C_WT001P_white", "179901_CG_C_WT001P_white", "179901_CG_CH_WT002P_white"];
var DECK_W_RANGE = ["179001_01A_CH_WT006C_white", "179001_01A_CH_WT006C_white", "179001_01A_CH_WT006C_white", "179001_01A_CH_WT006C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_O_WT001C_white", "179003_01A_U_WT011C_white", "179003_01A_U_WT011C_white", "179003_01A_U_WT011C_white", "179003_01A_U_WT011C_white", "179009_03B_U_WT044U_white", "179009_03B_U_WT044U_white", "179009_03B_U_WT044U_white", "179009_03B_U_WT044U_white", "179009_03B_U_WT044U_white", "179009_03B_U_WT045U_white", "179009_03B_U_WT045U_white", "179009_03B_U_WT045U_white", "179009_03B_U_WT045U_white", "179015_04B_O_WT005U_white", "179015_04B_O_WT005U_white", "179015_04B_O_WT005U_white", "179019_01A_U_WT003C_white", "179019_01A_U_WT003C_white", "179019_01A_U_WT003C_white", "179019_02A_C_WT012U_white", "179019_02A_C_WT012U_white", "179019_02A_C_WT012U_white", "179019_02A_U_WT031C_white", "179019_02A_U_WT031C_white", "179019_02A_U_WT031C_white", "179023_06C_C_WT055C_white", "179023_06C_C_WT055C_white", "179023_06C_C_WT055C_white", "179024_03B_U_WT039R_white", "179024_03B_U_WT039R_white", "179024_03B_U_WT039R_white", "179024_03B_U_WT042U_white", "179024_03B_U_WT042U_white", "179024_03B_U_WT042U_white", "179025_07D_CH_WT075C_white", "179025_07D_CH_WT075C_white", "179027_09D_O_WT014N_white", "179027_09D_O_WT014N_white", "179027_09D_O_WT014N_white", "179028_10D_CH_WT095_white", "179028_10D_U_WT177R_white", "179030_11E_C_WT077S_white", "179030_11E_C_WT077S_white", "179030_11E_C_WT077S_white", "179030_11E_C_WT078R_white", "179030_11E_C_WT078R_white", "179030_11E_C_WT078R_white", "179901_00_U_WT001P_white_02", "179901_00_U_WT001P_white_02", "179901_00_U_WT001P_white_02"], ControlView = () => {
  const onClickStart1 = import_react9.useCallback(async () => {
    const deckA = DECK_W_RANGE, deckB = DECK_WHITE_SPEED, prototypeIds = [...deckA, ...deckB];
    await Promise.all(prototypeIds.map(loadPrototype)).then(() => console.log("loadOK")).catch(console.error), OnEvent.next({ id: "OnClickNewGame", deckA, deckB });
  }, []), onClickStart2 = import_react9.useCallback(async () => {
    const deckA = DECK_BLACK_T3, deckB = DECK_WHITE_SPEED, prototypeIds = [...deckA, ...deckB];
    await Promise.all(prototypeIds.map(loadPrototype)).then(() => console.log("loadOK")).catch(console.error), OnEvent.next({ id: "OnClickNewGame", deckA, deckB });
  }, []), onClickStart3 = import_react9.useCallback(async () => {
    const deckA = DECK_BLACK_T3, deckB = DECK_W_RANGE, prototypeIds = [...deckA, ...deckB];
    await Promise.all(prototypeIds.map(loadPrototype)).then(() => console.log("loadOK")).catch(console.error), OnEvent.next({ id: "OnClickNewGame", deckA, deckB });
  }, []);
  return import_react9.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime9.jsxDEV("div", {
      children: [
        /* @__PURE__ */ jsx_dev_runtime9.jsxDEV("button", {
          onClick: onClickStart1,
          children: "\u767D\u7BC4\u5175\u5C0D\u767D\u901F\u653B"
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime9.jsxDEV("button", {
          onClick: onClickStart2,
          children: "\u9ED1T3\u5C0D\u767D\u901F\u653B"
        }, void 0, !1, void 0, this),
        /* @__PURE__ */ jsx_dev_runtime9.jsxDEV("button", {
          onClick: onClickStart3,
          children: "\u9ED1T3\u5C0D\u767D\u7BC4\u5175"
        }, void 0, !1, void 0, this)
      ]
    }, void 0, !0, void 0, this);
  }, [onClickStart2, onClickStart1]);
};

// src/client/component/CardSelectionView.tsx
var import_react10 = __toESM(require_react_development(), 1);
var jsx_dev_runtime10 = __toESM(require_react_jsx_dev_runtime_development(), 1), CardSelectionView = (props) => {
  const appContext = import_react10.useContext(AppContext);
  return import_react10.useMemo(() => {
    return /* @__PURE__ */ jsx_dev_runtime10.jsxDEV("div", {
      style: props.style,
      children: appContext.viewModel.cardSelection.map((cardID) => {
        return /* @__PURE__ */ jsx_dev_runtime10.jsxDEV("div", {
          children: /* @__PURE__ */ jsx_dev_runtime10.jsxDEV(CardView, {
            enabled: !0,
            clientId: props.clientId,
            cardID,
            size: 300,
            isShowInfo: !0,
            isShowCmd: !0
          }, void 0, !1, void 0, this)
        }, cardID, !1, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [props, appContext.viewModel.cardSelection]);
};

// src/client/component/PlayerController.tsx
var import_react11 = __toESM(require_react_development(), 1);

// src/game/gameStateWithFlowMemory/ai/getPlayerFlowAuto.ts
function getPlayerFlowAuto(ctx2, playerId, flows, options) {
  const phase = getPhase(ctx2);
  if (PhaseFn.isRuleEffect(phase)) {
    let flow = flows.find((flow2) => flow2.id == "FlowPassPayCost");
    if (flow == null)
      flows.find((flow2) => flow2.id == "FlowSetActiveEffectID" && phase[0] == "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA" && (phase[1] != "\u653B\u6483\u30B9\u30C6\u30C3\u30D7" && phase[1] != "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7"));
    if (flow == null) {
      const deleteFlow = flows.find((flow2) => flow2.id == "FlowDeleteImmediateEffect" && phase[0] == "\u6226\u95D8\u30D5\u30A7\u30A4\u30BA" && (phase[1] == "\u653B\u6483\u30B9\u30C6\u30C3\u30D7" || phase[1] == "\u9632\u5FA1\u30B9\u30C6\u30C3\u30D7"));
      if (deleteFlow?.id == "FlowDeleteImmediateEffect") {
        if (deleteFlow.tips.find((e) => e.reason[0] == "GameRule" && (e.reason[2].isAttack || e.reason[2].isDefence))) {
          if (getPlayerUnitIds(ctx2, playerId).every((itemId) => getCard(ctx2, itemId).isRoll))
            flow = deleteFlow;
        }
      }
    }
    if (flow != null)
      return flow;
  }
  if (flows.length == 1) {
    const flow = flows[0];
    if (flow.id == "FlowCancelPassPhase")
      return null;
    if (flow.id == "FlowCancelPassCut")
      return null;
    if (flow.id == "FlowWaitPlayer")
      return null;
    if (flow.id == "FlowDeleteImmediateEffect")
      return null;
    if (flow.id == "FlowSetTipSelection")
      return null;
    if (flow.id == "FlowObserveEffect")
      return null;
    if (flow.id == "FlowSetActiveLogicID")
      return null;
    return flow;
  }
  return null;
}

// src/game/gameStateWithFlowMemory/ai/thinkVer1.ts
function thinkVer1(ctx2, playerId, flows, options) {
  const attackFlow = flows.flatMap((flow) => {
    if (flow.id == "FlowSetTipSelection") {
      const effect = getEffect(ctx2, flow.effectID);
      if (effect.reason[0] == "GameRule" && effect.reason[2].isAttack) {
        const hasEarthIds = (getItemState(ctx2, EffectFn.getCardID(effect)).tips[TipFn.createGoEarthKey()]?.title[2] || []).map((pair3) => pair3[0]), hasSpaceIds = (getItemState(ctx2, EffectFn.getCardID(effect)).tips[TipFn.createGoSpaceKey()]?.title[2] || []).map((pair3) => pair3[0]), hasIds = [...hasEarthIds, ...hasSpaceIds], canAttackUnits = TipFn.getWant(flow.tip).filter((pair3) => hasIds.includes(pair3[0]) == !1), meleeUnits = canAttackUnits.filter((pair3) => isMeleeUnit(ctx2, pair3[0]));
        meleeUnits.sort(([id1, _], [id2, _2]) => getSetGroupBattlePoint(ctx2, id2)[0] - getSetGroupBattlePoint(ctx2, id1)[0]);
        const rangeUnits = canAttackUnits.filter((pair3) => isRangeUnit(ctx2, pair3[0]));
        let willAttackPairs = [];
        const hasMeleeHighUnits = meleeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u9AD8\u6A5F\u52D5"], pair3[0])), hasMeleeSpeed = meleeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u901F\u653B"], pair3[0])), hasMeleeStrongUnits = meleeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u5F37\u8972"], pair3[0])), hasRangeStrongHighUnits = rangeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u5F37\u8972"], pair3[0]));
        if (hasMeleeSpeed.length) {
          const hasRangeSpeedUnits = rangeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u901F\u653B"], pair3[0]));
          willAttackPairs = [hasMeleeSpeed[0], ...hasRangeSpeedUnits];
        } else if (hasMeleeHighUnits.length) {
          const hasRangeHighUnits = rangeUnits.filter((pair3) => getCardHasSpeicalEffect(ctx2, ["\u9AD8\u6A5F\u52D5"], pair3[0]));
          willAttackPairs = [hasMeleeHighUnits[0], ...hasRangeHighUnits];
        } else if (hasMeleeStrongUnits.length > 0 && hasRangeStrongHighUnits.length >= 1)
          willAttackPairs = [hasMeleeStrongUnits[0], ...hasRangeStrongHighUnits];
        else if (meleeUnits.length == 1)
          willAttackPairs = [meleeUnits[0], ...rangeUnits];
        else if (meleeUnits.length >= 1)
          willAttackPairs = [meleeUnits[0], ...rangeUnits.slice(0, 1)];
        else if (rangeUnits.length >= 3)
          willAttackPairs = rangeUnits;
        if (willAttackPairs.length)
          return flow = {
            ...flow,
            tip: {
              ...flow.tip,
              title: ["\u30AB\u30FC\u30C9", [], willAttackPairs]
            }
          }, [flow];
      }
      if (effect.reason[0] == "GameRule" && effect.reason[2].isDefence) {
        const hasEarthIds = (getItemState(ctx2, EffectFn.getCardID(effect)).tips[TipFn.createGoEarthKey()]?.title[2] || []).map((pair3) => pair3[0]), hasSpaceIds = (getItemState(ctx2, EffectFn.getCardID(effect)).tips[TipFn.createGoSpaceKey()]?.title[2] || []).map((pair3) => pair3[0]), hasIds = [...hasEarthIds, ...hasSpaceIds], canAttackUnits = TipFn.getWant(flow.tip).filter((pair3) => hasIds.includes(pair3[0]) == !1), meleeUnits = canAttackUnits.filter((pair3) => isMeleeUnit(ctx2, pair3[0]));
        meleeUnits.sort(([id1, _], [id2, _2]) => getSetGroupBattlePoint(ctx2, id2)[0] - getSetGroupBattlePoint(ctx2, id1)[0]);
        const rangeUnits = canAttackUnits.filter((pair3) => isRangeUnit(ctx2, pair3[0]));
        let willAttackPairs = [];
        const battleArea = flow.tip.flags?.isGoBattleArea1 ? AbsoluteBaSyouFn.of(PlayerIDFn.getOpponent(playerId), "\u6226\u95D8\u30A8\u30EA\u30A21") : AbsoluteBaSyouFn.of(PlayerIDFn.getOpponent(playerId), "\u6226\u95D8\u30A8\u30EA\u30A22"), opponentPower = getBattleGroupBattlePoint(ctx2, getBattleGroup(ctx2, battleArea));
        if (opponentPower == 0)
          return [flow];
        if (meleeUnits.length >= 1) {
          const myUnits2 = [meleeUnits[0], ...rangeUnits];
          if (getBattleGroupBattlePoint(ctx2, myUnits2.map((pair3) => pair3[0])) >= opponentPower)
            willAttackPairs = myUnits2;
          if (willAttackPairs.length)
            return flow = {
              ...flow,
              tip: {
                ...flow.tip,
                title: ["\u30AB\u30FC\u30C9", [], willAttackPairs]
              }
            }, [flow];
        }
      }
    }
    return [];
  });
  if (attackFlow.length)
    return attackFlow[0];
  const plays = flows.flatMap((flow) => flow.id == "FlowSetActiveEffectID" ? flow.tips : []), ruleEffect = plays.find((p) => p.reason[0] == "GameRule" && (p.reason[2].isAttack || p.reason[2].isDefence || p.reason[2].isReturn || p.reason[2].isDamageCheck || p.reason[2].isReroll || p.reason[2].isDraw));
  if (ruleEffect)
    return { id: "FlowSetActiveEffectID", effectID: ruleEffect.id, tips: [] };
  const playGs = plays.filter((p) => p.reason[0] == "PlayCard" && p.reason[3].isPlayG), playChars = plays.filter((p) => p.reason[0] == "PlayCard" && p.reason[3].isPlayCharacter);
  if (getPlayerGIds(ctx2, playerId).length < 7 && playGs.length)
    return { id: "FlowSetActiveEffectID", effectID: playGs[0].id, tips: [] };
  const playUnits = plays.filter((p) => p.reason[0] == "PlayCard" && getItemPrototype(ctx2, p.reason[2]).category == "\u30E6\u30CB\u30C3\u30C8"), myUnits = getPlayerUnitIds(ctx2, playerId);
  if (myUnits.length < 4 && playUnits.length)
    return { id: "FlowSetActiveEffectID", effectID: playUnits[0].id, tips: [] };
  if (playChars.length) {
    const shouldSetCharEffs = playChars.filter((eff) => {
      const [atk, range3, hp] = getItemPrototype(ctx2, EffectFn.getCardID(eff)).battlePoint || BattlePointFn.getAllStar();
      if (BattlePointFn.getValue(atk) + BattlePointFn.getValue(range3) + BattlePointFn.getValue(hp) == 0)
        return !1;
      return !0;
    });
    if (shouldSetCharEffs.length)
      return { id: "FlowSetActiveEffectID", effectID: shouldSetCharEffs[Math.round(Math.random() * 1000) % shouldSetCharEffs.length].id, tips: [] };
  }
  const playTexts = plays.filter((p) => p.reason[0] == "PlayText"), shouldUseTexts = createPreviewEffectScore(ctx2, playerId, playTexts, { isMoreThenOrigin: !0 });
  if (shouldUseTexts.length)
    return { id: "FlowSetActiveEffectID", effectID: shouldUseTexts[0][0], tips: [] };
  if (myUnits.length < 8 && playUnits.length)
    return { id: "FlowSetActiveEffectID", effectID: playUnits[0].id, tips: [] };
  const useFlows = flows.filter((flow) => {
    switch (flow.id) {
      case "FlowCancelActiveEffectID":
      case "FlowCancelActiveLogicID":
      case "FlowCancelPassCut":
      case "FlowCancelPassPhase":
      case "FlowWaitPlayer":
      case "FlowObserveEffect":
        return !1;
    }
    return !0;
  });
  if (useFlows.length)
    return useFlows[Math.round(Math.random() * 1000) % useFlows.length];
  return null;
}

// src/client/component/PlayerController.tsx
var jsx_dev_runtime11 = __toESM(require_react_jsx_dev_runtime_development(), 1);
function PlayerController(props) {
  const appContext = import_react11.useContext(AppContext), flows = import_react11.useMemo(() => {
    return appContext.viewModel.playerCommands[props.clientId] || [];
  }, [appContext.viewModel.playerCommands[props.clientId]]);
  return import_react11.useEffect(() => {
    if (flows.length) {
      let flow = null;
      if (props.isPlayer)
        flow = getPlayerFlowAuto(appContext.viewModel.model.gameState, props.clientId, flows);
      else
        flow = thinkVer1(appContext.viewModel.model.gameState, props.clientId, flows);
      if (flow)
        setTimeout(() => {
          OnEvent.next({
            id: "OnClickFlowConfirm",
            clientId: props.clientId,
            flow,
            versionID: appContext.viewModel.model.versionID
          });
        }, 50);
    }
  }, [appContext.viewModel.model.gameState, props, flows]), /* @__PURE__ */ jsx_dev_runtime11.jsxDEV(jsx_dev_runtime11.Fragment, {}, void 0, !1, void 0, this);
}

// src/client/component/MessagesView.tsx
var import_react12 = __toESM(require_react_development(), 1);
var jsx_dev_runtime12 = __toESM(require_react_jsx_dev_runtime_development(), 1);
function MessagesView(props) {
  const appContext = import_react12.useContext(AppContext);
  return import_react12.useMemo(() => {
    const msgs = appContext.viewModel.model.gameState.messages;
    return /* @__PURE__ */ jsx_dev_runtime12.jsxDEV("div", {
      style: { overflow: "scroll", height: 300 },
      children: msgs.map((msg) => {
        return /* @__PURE__ */ jsx_dev_runtime12.jsxDEV("div", {
          style: { border: "1px solid black" },
          children: [
            msg.id,
            ":",
            msg.description
          ]
        }, msg.id, !0, void 0, this);
      })
    }, void 0, !1, void 0, this);
  }, [appContext.viewModel.model.gameState.messages]);
}

// src/client/component/AppView.tsx
var jsx_dev_runtime13 = __toESM(require_react_jsx_dev_runtime_development(), 1);
function AppView() {
  return import_react13.useEffect(() => {
    const subscriber = OnError.subscribe((e) => {
      throw console.error(e), alert(e), e;
    });
    return () => {
      subscriber.unsubscribe();
    };
  }, []), /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(AppContextProvider, {
    children: [
      /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(ControlView, {}, void 0, !1, void 0, this),
      /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(PlayerController, {
        clientId: PlayerA,
        isPlayer: !0
      }, void 0, !1, void 0, this),
      /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(PlayerController, {
        clientId: PlayerB,
        isPlayer: !1
      }, void 0, !1, void 0, this),
      /* @__PURE__ */ jsx_dev_runtime13.jsxDEV("div", {
        style: { border: "1px solid blue", display: "flex" },
        children: [
          /* @__PURE__ */ jsx_dev_runtime13.jsxDEV("div", {
            style: { border: "1px solid red", flex: 1, width: 1200 },
            children: /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(ClientView, {
              clientId: PlayerA
            }, void 0, !1, void 0, this)
          }, void 0, !1, void 0, this),
          /* @__PURE__ */ jsx_dev_runtime13.jsxDEV("div", {
            style: { border: "1px solid red", flex: 1 },
            children: /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(CardSelectionView, {
              clientId: PlayerA
            }, void 0, !1, void 0, this)
          }, void 0, !1, void 0, this)
        ]
      }, void 0, !0, void 0, this),
      /* @__PURE__ */ jsx_dev_runtime13.jsxDEV(MessagesView, {}, void 0, !1, void 0, this)
    ]
  }, void 0, !0, void 0, this);
}

// src/web.tsx
var jsx_dev_runtime14 = __toESM(require_react_jsx_dev_runtime_development(), 1), rootDom = document.getElementById("root");
if (rootDom == null)
  throw new Error("div root not found");
var root = ReactDom.createRoot(rootDom);
root.render(/* @__PURE__ */ jsx_dev_runtime14.jsxDEV(AppView, {}, void 0, !1, void 0, this));
