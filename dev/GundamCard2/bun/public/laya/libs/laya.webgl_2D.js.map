{"version":3,"names":["WebDefineDatas","constructor","this","_mask","_length","_intersectionDefineDatas","define","unionMask","mask","i","value","add","index","_index","size","maskStart","length","_value","remove","endIndex","newValue","addDefineDatas","addMask","removeDefineDatas","removeMask","Math","min","has","clear","cloneTo","destObject","destDefineData","destMask","count","clone","dest","destroy","WebGLExtension","WebGLMode","GLObject","engine","_destroyed","_engine","_gl","gl","_id","_IDCounter","destroyed","WebGLInternalRT","gpuMemory","_gpuMemory","_changeTexMemory","_addStatisticsInfo","GPUEngineStatisticsInfo","M_GPUMemory","M_ALLRenderTexture","colorFormat","depthStencilFormat","isCube","generateMipmap","samples","super","_isCube","_generateMipmap","_samples","_textures","_depthTexture","_framebuffer","createFramebuffer","_msaaFramebuffer","RC_ALLRenderTexture","dispose","forEach","tex","deleteFramebuffer","_depthbuffer","deleteRenderbuffer","_msaaRenderbuffer","WebGLInternalTex","mipmap","_mipmap","mipmapCount","_mipmapCount","_getSource","resource","target","width","height","depth","dimension","useSRGBLoader","gammaCorrection","_baseMipmapLevel","_maxMipmapLevel","createTexture","isPot","isPotSize","TextureDimension","Tex3D","Tex2D","_statistics_M_Texture","M_Texture2D","_statistics_RC_Texture","RC_Texture2D","M_Texture3D","RC_Texture3D","Cube","M_TextureCube","RC_TextureCube","Texture2DArray","M_Texture2DArray","RC_Texture2DArray","max","ceil","log2","useSRGBLoad","filterMode","FilterMode","Bilinear","wrapU","WrapMode","Repeat","wrapV","wrapW","anisoLevel","compareMode","TextureCompareMode","None","WebGLEngine","instance","RC_ALLTexture","_filterMode","getFilteMinrParam","_setTexParameteri","TEXTURE_MIN_FILTER","mag","getFilterMagParam","TEXTURE_MAG_FILTER","_warpU","warpParam","getWrapParam","_setWrapMode","TEXTURE_WRAP_S","_warpV","TEXTURE_WRAP_T","_warpW","getCapable","RenderCapable","Texture3D","TEXTURE_WRAP_R","_anisoLevel","anisoExt","_supportCapatable","getExtension","EXT_texture_filter_anisotropic","maxAnisoLevel","getParams","RenderParams","Max_AnisoLevel_Count","level","_setTexParametexf","TEXTURE_MAX_ANISOTROPY_EXT","baseMipmapLevel","isWebGL2","TEXTURE_BASE_LEVEL","maxMipmapLevel","TEXTURE_MAX_LEVEL","_compareMode","pname","param","_bindTexture","texParameteri","texParameterf","Point","NEAREST_MIPMAP_NEAREST","NEAREST","LINEAR_MIPMAP_NEAREST","LINEAR","Trilinear","LINEAR_MIPMAP_LINEAR","wrapMode","REPEAT","Clamp","CLAMP_TO_EDGE","Mirrored","MIRRORED_REPEAT","memory","M_ALLTexture","deleteTexture","GLTextureContext","_glParam","internalFormat","format","type","needBitmap","_sRGB","EXT_sRGB","_oesTextureHalfFloat","OES_texture_half_float","_compressdTextureS3tc_srgb","WEBGL_compressed_texture_s3tc_srgb","_compressedTextureEtc1","WEBGL_compressed_texture_etc1","_compressedTextureS3tc","WEBGL_compressed_texture_s3tc","_compressedTextureETC","WEBGL_compressed_texture_etc","_compressedTextureASTC","WEBGL_compressed_texture_astc","_webgl_depth_texture","WEBGL_depth_texture","createTexture3DInternal","sRGB","premultipliedAlpha","setTexture3DImageData","texture","source","premultiplyAlpha","invertY","setTexture3DPixelsData","setTexture3DSubPixelsData","mipmapLevel","xOffset","yOffset","zOffset","glTextureParam","useSRGB","TextureFormat","R8G8B8","SRGB_EXT","RGB","UNSIGNED_BYTE","R8G8B8A8","SRGB_ALPHA_EXT","RGBA","R5G6B5","UNSIGNED_SHORT_5_6_5","R32G32B32A32","FLOAT","R32G32B32","R16G16B16A16","HALF_FLOAT_OES","R16G16B16","DXT1","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","DXT3","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","DXT5","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","ETC1RGB","COMPRESSED_RGB_ETC1_WEBGL","ETC2RGBA","COMPRESSED_RGBA8_ETC2_EAC","ETC2RGB","COMPRESSED_RGB8_ETC2","ETC2SRGB","COMPRESSED_SRGB8_ETC2","ETC2SRGB_Alpha8","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","ETC2RGB_Alpha1","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2SRGB_Alpha1","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","ASTC4x4","COMPRESSED_RGBA_ASTC_4x4_KHR","ASTC6x6","COMPRESSED_RGBA_ASTC_6x6_KHR","ASTC8x8","COMPRESSED_RGBA_ASTC_8x8_KHR","ASTC10x10","COMPRESSED_RGBA_ASTC_10x10_KHR","ASTC12x12","COMPRESSED_RGBA_ASTC_12x12_KHR","ASTC4x4SRGB","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","ASTC6x6SRGB","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","ASTC8x8SRGB","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","ASTC10x10SRGB","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","ASTC12x12SRGB","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","glRenderTextureParam","RenderTargetFormat","DEPTH_16","DEPTH_COMPONENT","UNSIGNED_SHORT","DEPTHSTENCIL_24_8","DEPTH_STENCIL","UNSIGNED_INT_24_8_WEBGL","DEPTH_32","UNSIGNED_INT","STENCIL_8","glRenderBufferParam","DEPTH_COMPONENT16","attachment","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","STENCIL_INDEX8","STENCIL_ATTACHMENT","glRenderTargetAttachment","COLOR_ATTACHMENT0","getTarget","TEXTURE_2D","TEXTURE_CUBE_MAP","getFormatPixelsParams","formatParams","channels","bytesPerPixel","dataTypedCons","Uint8Array","typedSize","Uint16Array","Float32Array","getGLtexMemory","singlebyte","bytelength","srgb","srgb_alpha","getGLRTTexMemory","multiSamples","cube","getpixelbyte","rtFormat","pixelByte","colorPixelbyte","supportSRGB","Texture_SRGB","COMPRESS_TEXTURE_S3TC_SRGB","supportGenerateMipmap","isSRGBFormat","createTextureInternal","useSRGBExt","internalTex","glParam","setTextureImageData","console","warn","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","texImage2D","setTextureSubImageData","x","y","texSubImage2D","initVideoTextureData","setTexturePixelsData","fourSize","UNPACK_ALIGNMENT","setTextureSubPixelsData","setTextureDDSData","ddsInfo","dataOffset","bpp","blockBytes","compressed","channelsByte","dataTypeConstur","mipmapWidth","mipmapHeight","dataLength","sourceData","compressedTexImage2D","setTextureKTXData","ktxInfo","compress","headerOffset","bytesOfKeyValueData","imageSize","Int32Array","pixelParams","byteLength","setTextureHDRData","hdrInfo","hdrPixelData","readScanLine","setCubeImageData","sources","cubeFace","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","setCubePixelsData","t","setCubeSubPixelData","setCubeDDSData","face","setCubeKTXData","setTextureCompareMode","bindRenderTarget","renderTarget","faceIndex","currentActiveRT","unbindRenderTarget","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","bindoutScreenTarget","_lastFrameBuffer","_lastFrameBuffer_WebGLOBJ","createRenderTextureCubeInternal","glFormat","createRenderTargetInternal","createRenderTextureInternal","push","colorAttachment","depthBufferParam","depthbuffer","createRenderbuffer","framebufferRenderbuffer","RENDERBUFFER","createRenderTargetCubeInternal","renderbuffer","bindRenderbuffer","renderbufferStorage","createRenderTargetDepthTexture","isSRGB","readRenderTargetPixelData","out","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","readRenderTargetPixelDataAsync","Promise","resolve","updateVideoTexture","video","getRenderTextureData","pixels","UNSIGNED_SHORT_4_4_4_4","GL2TextureContext","TEXTURE_2D_ARRAY","TEXTURE_3D","SRGB8","RGB8","SRGB8_ALPHA8","RGBA8","RGB565","RGBA32F","RGB32F","RGB16F","HALF_FLOAT","RGBA16F","DEPTH24_STENCIL8","DEPTH_COMPONENT32F","UNSIGNED_INT_24_8","texStorage2D","texStorage3D","texSubImage3D","getCubeKTXRGBMData","LEQUAL","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","GEQUAL","LESS","GREATER","EQUAL","NOTEQUAL","ALWAYS","NEVER","NONE","renderbufferStorageMultisample","msaaFramebuffer","renderbufferParam","msaaRenderbuffer","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","biltMask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","blitFramebuffer","GLBuffer","targetType","bufferUsageType","_byteLength","_glTargetType","_glBufferUsageType","_getGLTarget","_getGLUsage","_glBuffer","createBuffer","RC_GPUBuffer","usage","BufferUsage","Static","_glUsage","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","error","BufferTargetType","ARRAY_BUFFER","_glTarget","UNIFORM_BUFFER","ELEMENT_ARRAY_BUFFER","_memorychange","M_GPUBuffer","bindBuffer","_getbindBuffer","_setbindBuffer","unbindBuffer","orphanStorage","setDataLength","srcData","bufferData","setData","offset","bufferSubData","C_GeometryBufferUploadCount","setDataEx","bindBufferBase","glPointer","_getBindUBOBuffer","_setBindUBOBuffer","bindBufferRange","byteCount","resizeBuffer","deleteBuffer","GLParams","_initParams","_glParamsData","Map","set","Max_Active_Texture_Count","getParameter","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxVertexUniform","MAX_VERTEX_UNIFORM_VECTORS","maxFragUniform","MAX_FRAGMENT_UNIFORM_VECTORS","Max_Uniform_Count","MAX_Texture_Size","MAX_TEXTURE_SIZE","MAX_Texture_Image_Uint","MAX_TEXTURE_IMAGE_UNITS","Texture_anisotropic","MAX_TEXTURE_MAX_ANISOTROPY_EXT","SHADER_CAPAILITY_LEVEL","BYTE","params","get","GLRenderDrawContext","_angleInstancedArrays","ANGLE_instanced_arrays","getMeshTopology","mode","MeshTopology","Points","POINTS","Lines","LINES","LineLoop","LINE_LOOP","LineStrip","LINE_STRIP","Triangles","TRIANGLES","TriangleStrip","TRIANGLE_STRIP","TriangleFan","TRIANGLE_FAN","getIndexType","IndexFormat","UInt8","UInt16","UInt32","drawElementsInstanced","instanceCount","drawElementsInstancedANGLE","C_DrawCallCount","C_Instancing_DrawCallCount","C_TriangleCount","drawArraysInstanced","first","drawArraysInstancedANGLE","drawArrays","drawElements","drawElements2DTemp","drawGeometryElement","geometryElement","bufferState","bind","element","drawParams","elements","drawType","DrawType","DrawArray","_glmode","DrawElement","_glindexFormat","DrawArrayInstance","DrawElementInstance","GLRenderState","_initState","setDepthFunc","CompareFunction","Less","setBlendEquationSeparate","BlendEquationSeparate","ADD","_blendEquation","_sFactor","BlendFactor","One","_dFactor","Zero","_sFactorAlpha","_dFactorAlpha","_getBlendFactor","factor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","_getBlendOperation","FUNC_ADD","SUBTRACT","FUNC_SUBTRACT","REVERSE_SUBTRACT","FUNC_REVERSE_SUBTRACT","_getGLCompareFunction","compareFunction","Never","Equal","LessEqual","Greater","NotEqual","GreaterEqual","Always","_getGLStencilOperation","StencilOperation","Keep","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","_getGLFrontfaceFactor","cullmode","CullMode","Front","CCW","CW","setDepthTest","_depthTest","enable","DEPTH_TEST","disable","setDepthMask","_depthMask","depthMask","_depthFunc","depthFunc","setStencilTest","_stencilTest","STENCIL_TEST","setStencilMask","_stencilMask","stencilMask","setStencilFunc","fun","ref","_stencilFunc","_stencilRef","stencilFunc","setstencilOp","fail","zfail","zpass","_stencilOp_fail","_stencilOp_zfail","_stencilOp_zpass","stencilOp","setBlend","_blend","BLEND","setBlendEquation","blendEquation","_blendEquationRGB","_blendEquationAlpha","blendEquationRGB","blendEquationAlpha","blendEquationSeparate","setBlendFunc","sFactor","dFactor","force","_sFactorRGB","_dFactorRGB","blendFunc","setBlendFuncSeperate","srcRGB","dstRGB","srcAlpha","dstAlpha","blendFuncSeparate","setCullFace","_cullFace","CULL_FACE","setFrontFace","_frontFace","frontFace","GLShaderInstance","vs","ps","attributeMap","_complete","_vs","_ps","_attributeMap","_uniformMap","_create","C_ShaderCompile","preTime","performance","now","lost","log","k","_program","createProgram","_vshader","_createShader","VERTEX_SHADER","_pshader","FRAGMENT_SHADER","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","info","getProgramInfoLog","Error","nUniformNum","ACTIVE_UNIFORMS","one","useProgram","_curActTexIndex","uniformData","getActiveUniform","uniName","name","location","getUniformLocation","ShaderVariable","indexOf","substr","isArray","_addShaderUnifiormFun","propertyNameToID","_uniformObjectMap","nUniformBlock","ACTIVE_UNIFORM_BLOCKS","gl2","uniformBlockName","getActiveUniformBlockName","getUniformBlockIndex","uniformBlockBinding","getUBOPointer","T_ShaderCompile","_legalUBObyteLength","str","shader","createShader","shaderSource","compileShader","_isShaderDebugMode","getShaderParameter","COMPILE_STATUS","LayaEnv","isPlaying","getShaderInfoLog","caller","BOOL","_uniform1i","uploadedValue","Array","INT","_uniform1iv","_uniform1fv","_uniform1f","FLOAT_VEC2","_uniform_vec2v","_uniform_vec2","FLOAT_VEC3","_uniform_vec3v","_uniform_vec3","FLOAT_VEC4","_uniform_vec4v","_uniform_vec4","FLOAT_MAT2","_uniformMatrix2fv","FLOAT_MAT3","_uniformMatrix3fv","FLOAT_MAT4","_uniformMatrix4fv","_uniformMatrix4f","SAMPLER_2D","SAMPLER_2D_SHADOW","uniform1i","textureID","_glTextureIDParams","_uniform_sampler2D","SAMPLER_2D_ARRAY","_uniform_sampler2DArray","_uniform_sampler3D","SAMPLER_CUBE","_uniform_samplerCube","_uniform_UniformBuffer","getUniformMap","_glUseProgram","C_SetRenderPassCount","uniform1f","uniform1fv","v","uniform2f","uniform2fv","z","uniform3f","uniform3fv","w","uniform4f","uniform4fv","uniformMatrix2fv","m","uniformMatrix3fv","uniformMatrix4fv","uniform1iv","_uniform_ivec2","uniform2i","_uniform_ivec2v","uniform2iv","_uniform_vec3i","uniform3i","_uniform_vec3vi","uniform3iv","_uniform_vec4i","uniform4i","_uniform_vec4vi","uniform4iv","Texture2D","errorTexture","TextureCube","_bindUniformBufferBase","_activedTextureID","activeTexture","texID","TEXTURE0","_activeTextures","bindTexture","deleteShader","deleteProgram","GLVertexState","_vertexDeclaration","_vaoExt","OES_vertex_array_object","_vao","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","_GLBindVertexArray","bindVertexArrayOES","unbindVertexArray","isVertexArray","isVertexArrayOES","applyVertexBuffer","vertexBuffer","clearVAO","_vertexBuffers","verDec","_shaderValues","loc","parseInt","attribute","enableVertexAttribArray","vertexAttribPointer","elementCount","elementType","normalized","vertexStride","elementOffset","instanceBuffer","vertexAttribDivisor","n","disableVertexAttribArray","applyIndexBuffer","indexBuffer","_bindedIndexBuffer","divisor","vertexAttribDivisorANGLE","glErrorShadow","synthesizeGLError","err","opt_msg","msg","undefined","window","WebGLVertexArrayObjectOES","ext","isAlive","hasBeenBound","elementArrayBuffer","attribs","maxVertexAttribs","attrib","VertexAttrib","maxAttrib","enabled","buffer","stride","cached","recache","prototype","join","OESVertexArrayObject","self","f","getError","apply","NO_ERROR","err1","wrapGLError","original","getVertexAttrib","VERTEX_ARRAY_BINDING_OES","currentVertexArrayObject","defaultVertexArrayObject","arguments","vao","currentArrayBuffer","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","indx","instrumentExtension","canvas","addEventListener","reset_","vertexArrayObjects","ii","MAX_VERTEX_ATTRIBS","arrayObject","splice","oldVAO","newVAO","call","currentBinding","oldAttrib","bufferChanged","INVALID_OPERATION","_setupVertexArrayObject","original_getSupportedExtensions","getSupportedExtensions","list","original_getExtension","__OESVertexArrayObject","GlCapable","glEngine","_extentionVendorPrefixes","initExtension","initCapable","isWebgl2","_capabilityMap","OES_element_index_uint","Element_Index_Uint32","OES_texture_float","TextureFormat_R32G32B32A32","TextureFormat_R16G16B16A16","EXT_color_buffer_float","EXT_color_buffer_half_float","OES_texture_half_float_linear","RenderTextureFormat_R16G16B16A16","OES_texture_float_linear","RenderTextureFormat_R32G32B32A32","RenderTextureFormat_Depth","RenderTextureFormat_ShadowMap","Vertex_VAO","DrawElement_Instance","EXT_shader_texture_lod","Shader_TextureLod","COMPRESS_TEXTURE_S3TC","WEBGL_compressed_texture_pvrtc","COMPRESS_TEXTURE_PVRTC","COMPRESS_TEXTURE_ETC1","COMPRESS_TEXTURE_ETC","COMPRESS_TEXTURE_ASTC","Texture_FloatLinearFiltering","Texture_HalfFloatLinearFiltering","MSAA","UnifromBufferObject","_extensionMap","setExtensionMap","extension","map","_extTextureFilterAnisotropic","_getExtension","_compressedTexturePvrtc","_oesTextureFloatLinear","_extColorBufferHalfFloat","_extColorBufferFloat","_oesTextureHalfFloatLinear","_oesTextureFloat","_oes_element_index_uint","_extShaderTextureLod","OES_standard_derivatives","prefixes","EventDispatcher","_lost","config","webglMode","Auto","_propertyNameMap","_propertyNameCounter","_enableStatistics","_curUBOPointer","_GLUBOPointerMap","_GLBindPointerUBOMap","_lastClearColor","Color","_lastClearDepth","_remapZ","_screenInvertY","_lodTextureSample","_breakTextureSample","_GLStatisticsInfo","_config","_isWebGL2","_lastViewport","Vector4","_lastScissor","_webglMode","_initStatisticsInfo","endFrame","event","getInnerWidth","isConch","_globalWidth","getInnerHeight","_globalHeight","resizeOffScreen","getTextureContext","addTexGammaDefine","key","_texGammaDefine","_context","webglConfig","Count","clearStatisticsInfo","FrameClearCount","getStatisticsInfo","initRenderEngine","names","WebGL1","WebGL2","getContext","e","scissorTest","_initBindBufferMap","_GLParams","_GLRenderState","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","_GLTextureContext","_GLRenderDrawContext","webglContextLost","Laya","stage","_GLBufferBindMap","capatableType","viewport","lv","setValue","scissor","_scissorState","SCISSOR_TEST","clearRenderTexture","clearFlag","clearcolor","clearDepth","clearStencilValue","flag","RenderClearFlag","equal","clearColor","r","g","b","a","Depth","Stencil","clearStencil","STENCIL_BUFFER_BIT","copySubFrameBuffertoTex","xoffset","yoffset","copyTexSubImage2D","colorMask","createShaderInstance","createVertexState","getDrawContext","getCreateRenderOBJContext","_renderOBJCreateContext","id","propertyIDToName","getNamesByDefineData","defineData","maskMap","_maskMap","subMaskMap","subMask","j","d","getDefineByName","_defineMap","counter","_defineCounter","floor","ShaderDefine","uploadUniforms","commandEncoder","shaderData","uploadUnTexture","applyUBO","applyUBOData","data","_data","shaderUniform","getArrayData","shaderCall","uploadCustomUniforms","custom","unbindVertexState","WebGLShaderData","ShaderData","uniformBufferDatas","_uniformBufferDatas","uniformBuffersMap","_uniformBuffersMap","_releaseUBOData","values","ubo","_updateDataInfo","ownerResource","_defineDatas","_initData","_addCheckUBO","uboData","uboBuffer","_uniformParamsState","setDataByUniformBufferData","_gammaColorMap","getData","addDefine","addDefines","removeDefine","hasDefine","clearDefine","getBool","setBool","getInt","setInt","_name","_setData","getNumber","setNumber","getVector2","setVector2","getVector3","setVector3","getVector","setVector","getColor","setColor","gammaColor","linearColor","gammaToLinearSpace","getLinearColor","getMatrix4x4","setMatrix4x4","getMatrix3x3","setMatrix3x3","getBuffer","setBuffer","setTexture","lastValue","shaderDefine","_removeReference","_addReference","_setInternalTexture","getTexture","getSourceIndex","Number","setUniformBuffer","getUniformBuffer","destData","Vector2","v2","Vector3","v3","color","clonecolor","v4","Matrix3x3","mat","Matrix4x4","BaseTexture","Resource","_cloneUBO","getDefineData","uboDatas","reset","WebShaderPass","renderState","_renderState","validDefine","_validDefine","pass","_cacheShaderHierarchy","_cacheSharders","RenderState","setNull","_resizeCacheShaderMap","cacheMap","hierarchy","resizeLength","end","setCacheShader","compileDefine","cacheShaders","maxEndIndex","subCacheShaders","getCacheShader","maskLength","WebSubShader","addShaderPass","WebUnitRenderModuleDataFactory","createSubShader","createShaderPass","createRenderState","createDefineDatas","addBeforeInitCallback","LayaGL","unitRenderModuleDataFactory","WebGLVertexBuffer","vertexDeclaration","RC_VertexBuffer","_changeMemory","M_VertexBuffer","bufferOffset","dataStartIndex","dataCount","MAX_SAFE_INTEGER","subData","unbind","WebglRenderContext2D","_clearColor","pipelineMode","_globalConfigShaderData","Shader3D","_configDefineValues","isCreateBlitScreenELement","setBlitScreenElement","blitContext","renderEngine","on","last_main_frame_buffer","last_main_frame","setOffscreenView","setRenderTarget","BLACK","blitScreenElement","materialShaderData","drawRenderElementOne","render2DRenderPassFactory","createRenderElement2D","renderDeviceFactory","createShaderData","_vertices","_vertexBuffer","declaration","VertexDeclaration","VertexElement","VertexElementFormat","geometry","createRenderGeometryElement","setDrawArrayParams","createBufferState","applyState","a_PositionTexcoord","ShaderDataType","uniformMap","u_MainTex","shaderType","ShaderFeatureType","D2","subShader","SubShader","addSubShader","statefirst","blitState","depthTest","DEPTHTEST_ALWAYS","depthWrite","cull","CULL_NONE","blend","BLEND_DISABLE","stencilRef","stencilTest","STENCILTEST_OFF","stencilWrite","STENCILOP_KEEP","STENCILOP_REPLACE","renderStateIsBySprite","drawRenderElementList","_prepare","_render","_offscreenWidth","_offscreenHeight","_destRT","Nothing","node","WebGLRenderelement2D","_shaderInstances","FastSinglelist","_compileShader","context","passes","_passes","comDef","_compileDefine","sceneData","ShaderDefines2D","GAMMASPACE","INVERTY","value2DShaderData","shaderIns","withCompile","renderByShaderInstance","complete","_sprite2DUniformParamsMap","_sceneUniformParamsMap","_materialUniformParamsMap","uploadRenderStateBlendDepth","uploadRenderStateFrontFace","WebGLRender2DProcess","createRenderContext2D","WebGLBufferState","_glVertexState","applyVertexBuffers","applyIndexBuffers","vertexBuffers","slice","unBind","_curBindedBufferState","isBind","WebGLCommandUniformMap","CommandUniformMap","stateName","_idata","_stateName","hasPtrID","propertyID","addShaderUniform","propertyKey","uniformtype","block","propertyName","arrayLength","blockProperty","addShaderUniformArray","addShaderBlockUniform","blockname","WebGLIndexBuffer","RC_IndexBuffer","M_IndexBuffer","_setIndexDataLength","curBufSta","_setIndexData","WebGLRenderGeometryElement","indexFormat","_indexFormat","_mode","_idCounter","setDrawElemenParams","clearRenderParams","obj","WebGLShaderInstance","_customUniformParamsMap","_uploadMark","_uploadRenderType","_renderShaderInstance","shaderProcessInfo","shaderPass","shaderObj","GLSLCodeGenerator","GLShaderLanguageProcess3D","defineString","fs","_shaderPass","is2D","_create2D","_create3D","CommandEncoder","_cameraUniformParamsMap","_spriteUniformParamsMap","sceneParams","createGlobalUniformMap","cameraParams","customParams","hasSpritePtrID","sprite2DParms","sceneParms","commap","nodeCommonMap","_disposeResource","_uploadMaterial","_uploadRender","_uploadCameraShaderValue","_uploadScene","shaderDatas","C_UniformBufferUploadCount","uploadRenderStateBlendDepthByShader","uploadRenderStateBlendDepthByMaterial","datas","_b","_a","DEPTH_WRITE","Default","RenderStateContext","_d","_c","DEPTHTEST_OFF","_f","_e","STENCIL_WRITE","_h","_g","_k","_j","STENCIL_Op","_m","_l","STENCIL_Ref","_p","_o","BLEND_ENABLE_ALL","_r","_q","BLEND_EQUATION","srcBlend","_t","_s","BLEND_SRC","dstBlend","_v","_u","BLEND_DST","BLEND_ENABLE_SEPERATE","_x","_w","BLEND_EQUATION_RGB","_z","_y","BLEND_EQUATION_ALPHA","_1","_0","srcBlendRGB","BLEND_SRC_RGB","_3","_2","dstBlendRGB","BLEND_DST_RGB","_5","_4","srcBlendAlpha","BLEND_SRC_ALPHA","_7","_6","dstBlendAlpha","BLEND_DST_ALPHA","isTarget","invertFront","forntFace","CULL","Back","CULL_FRONT","CULL_BACK","uploadCustomUniform","WebGLRenderDeviceFactory","globalBlockMap","createIndexBuffer","createVertexBuffer","blockName","comMap","createEngine","glConfig","stencil","Config","isStencil","alpha","isAlpha","antialias","isAntialias","preserveDrawingBuffer","isDepth","failIfMajorPerformanceCaveat","isfailIfMajorPerformanceCaveat","powerPreference","useWebGL2","_source","printWebglOrder","_replaceWebglcall","textureContext","tempgl","arr","result","WebGLRenderEngineFactory","createUniformBufferObject","bufferUsage","isSingle","UniformBufferObject","renderOBJCreate"],"sources":["../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/WebDefineDatas.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLEnum/WebGLExtension.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLEnum/WebGLMode.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLObject.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLInternalRT.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLInternalTex.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/GLTextureContext.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/GL2TextureContext.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLBuffer.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLParams.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLRenderDrawContext.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLRenderState.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLShaderInstance.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GLVertexState.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/VertexArrayObject.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine/GlCapable.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLEngine.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/WebGLShaderData.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/WebShaderPass.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/WebSubShader.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/WebUnitRenderModuleDataFactory.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLVertexBuffer.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/2DRenderPass/WebGLRenderContext2D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/2DRenderPass/WebGLRenderElement2D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/2DRenderPass/WebGLRender2DProcess.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLBufferState.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLCommandUniformMap.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLIndexBuffer.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLRenderGeometryElement.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLShaderInstance.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLRenderDeviceFactory.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/RenderDevice/WebGLRenderEngineFactory.ts"],"sourcesContent":["import { IDefineDatas } from \"../Design/IDefineDatas\";\r\nimport { ShaderDefine } from \"../Design/ShaderDefine\";\r\n\r\n\r\n/**\r\n * <code>DefineDatas</code> 类用于创建宏定义数据集合。\r\n */\r\nexport class WebDefineDatas implements IDefineDatas {\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_mask: Array<number> = [];\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_length: number = 0;\r\n\r\n\t/**\r\n\t * 创建一个 <code>DefineDatas</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_intersectionDefineDatas(define: WebDefineDatas): void {\r\n\t\tvar unionMask: Array<number> = define._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tfor (var i: number = this._length - 1; i >= 0; i--) {\r\n\t\t\tvar value: number = mask[i] & unionMask[i];\r\n\t\t\tif (value == 0 && i == this._length - 1)\r\n\t\t\t\tthis._length--;\r\n\t\t\telse\r\n\t\t\t\tmask[i] = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 添加宏定义值。\r\n\t * @param define 宏定义值。\r\n\t */\r\n\tadd(define: ShaderDefine): void {\r\n\t\tvar index: number = define._index;\r\n\t\tvar size: number = index + 1;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar maskStart: number = this._length;//must from this._length because this._length maybe less than mask.length and have dirty data should clear.\r\n\t\tif (maskStart < size) {\r\n\t\t\t(mask.length < size) && (mask.length = size);//mask.length maybe small than size,maybe not.\r\n\t\t\tfor (; maskStart < index; maskStart++)\r\n\t\t\t\tmask[maskStart] = 0;\r\n\t\t\tmask[index] = define._value;\r\n\t\t\tthis._length = size;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmask[index] |= define._value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 移除宏定义。\r\n\t * @param define 宏定义。\r\n\t */\r\n\tremove(define: ShaderDefine): void {\r\n\t\tvar index: number = define._index;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar endIndex: number = this._length - 1;\r\n\t\tif (index > endIndex)//不重置Length,避免经常扩充\r\n\t\t\treturn;\r\n\t\tvar newValue = mask[index] & ~define._value;\r\n\t\tif (index == endIndex && newValue === 0)\r\n\t\t\tthis._length--;\r\n\t\telse\r\n\t\t\tmask[index] = newValue;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加宏定义集合。\r\n\t * @param define 宏定义集合。\r\n\t */\r\n\taddDefineDatas(define: WebDefineDatas): void {\r\n\t\tvar addMask: Array<number> = define._mask;\r\n\t\tvar size: number = define._length;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar maskStart: number = this._length;\r\n\t\tif (maskStart < size) {\r\n\t\t\tmask.length = size;\r\n\t\t\tfor (var i: number = 0; i < maskStart; i++)\r\n\t\t\t\tmask[i] |= addMask[i];\r\n\t\t\tfor (; i < size; i++)\r\n\t\t\t\tmask[i] = addMask[i];\r\n\t\t\tthis._length = size;\r\n\t\t} else {\r\n\t\t\tfor (var i: number = 0; i < size; i++) {\r\n\t\t\t\tmask[i] |= addMask[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * 移除宏定义集合。\r\n\t * @param define 宏定义集合。\r\n\t */\r\n\tremoveDefineDatas(define: WebDefineDatas): void {\r\n\t\tvar removeMask: Array<number> = define._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar endIndex: number = this._length - 1;\r\n\t\tvar i = Math.min(define._length, endIndex);\r\n\t\tfor (; i >= 0; i--) {\r\n\t\t\tvar newValue = mask[i] & ~removeMask[i];\r\n\t\t\tif (i == endIndex && newValue === 0) {\r\n\t\t\t\tendIndex--;\r\n\t\t\t\tthis._length--;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmask[i] = newValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 是否有宏定义。\r\n\t * @param define 宏定义。\r\n\t */\r\n\thas(define: ShaderDefine): boolean {\r\n\t\tvar index: number = define._index;\r\n\t\tif (index >= this._length)\r\n\t\t\treturn false;\r\n\t\treturn (this._mask[index] & define._value) !== 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 清空宏定义。\r\n\t */\r\n\tclear(): void {\r\n\t\tthis._length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destDefineData: WebDefineDatas = (<WebDefineDatas>destObject);\r\n\t\tvar destMask: Array<number> = destDefineData._mask;\r\n\t\tvar mask: Array<number> = this._mask;\r\n\t\tvar count: number = this._length;\r\n\t\tdestMask.length = count;\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tdestMask[i] = mask[i];\r\n\t\tdestDefineData._length = count;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: WebDefineDatas = new WebDefineDatas();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tdelete this._mask;\r\n\t}\r\n}\r\n\r\n\r\n","export enum WebGLExtension{\r\n    OES_vertex_array_object,\r\n    ANGLE_instanced_arrays,\r\n    OES_texture_half_float,\r\n    OES_texture_half_float_linear,\r\n    OES_texture_float,\r\n    OES_element_index_uint,\r\n    OES_texture_float_linear,//allows linear filtering with floating-point pixel types for textures.\r\n    EXT_color_buffer_half_float,//Render BufferHalf float color\r\n    EXT_shader_texture_lod,\r\n    WEBGL_depth_texture,\r\n    EXT_sRGB,\r\n    EXT_color_buffer_float,\r\n    EXT_texture_filter_anisotropic,\r\n    WEBGL_compressed_texture_s3tc,\r\n    WEBGL_compressed_texture_s3tc_srgb,\r\n    WEBGL_compressed_texture_pvrtc,\r\n    WEBGL_compressed_texture_etc1,\r\n    WEBGL_compressed_texture_etc,\r\n    WEBGL_compressed_texture_astc,\r\n    OES_standard_derivatives,\r\n}","/**\r\n * WebGL mode.\r\n */\r\n export enum WebGLMode {\r\n    /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */\r\n    Auto = 0,\r\n    /** WebGL2.0. */\r\n    WebGL2 = 1,\r\n    /** WebGL1.0, */\r\n    WebGL1 = 2\r\n}","import { WebGLEngine } from \"../WebGLEngine\";\r\n\r\n/**\r\n * WebglObject 基类\r\n */\r\nexport class GLObject{\r\n    protected _engine:WebGLEngine;\r\n    protected _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n    protected _id:number;\r\n    protected _destroyed: boolean = false;\r\n\r\n    constructor(engine: WebGLEngine){\r\n        this._engine = engine;\r\n        this._gl = this._engine.gl;\r\n        this._id = this._engine._IDCounter++;\r\n    }\r\n\r\n    get destroyed():boolean{\r\n        return this._destroyed;\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     * @override\r\n     * @returns \r\n     */\r\n    destroy():void{\r\n        if (this._destroyed) return;\r\n        this._destroyed = true;\r\n    }\r\n\r\n}","import { InternalRenderTarget } from \"../../../RenderDriver/DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { InternalTexture } from \"../../../RenderDriver/DriverDesign/RenderDevice/InternalTexture\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { GLObject } from \"./WebGLEngine/GLObject\";\r\n\r\nexport class WebGLInternalRT extends GLObject implements InternalRenderTarget {\r\n\r\n    _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\n    _framebuffer: WebGLFramebuffer;\r\n\r\n    _depthbuffer: WebGLRenderbuffer;\r\n\r\n    _msaaFramebuffer: WebGLFramebuffer;\r\n    _msaaRenderbuffer: WebGLRenderbuffer;\r\n\r\n    _isCube: boolean;\r\n    _samples: number;\r\n\r\n    _generateMipmap: boolean;\r\n\r\n    _textures: InternalTexture[];\r\n    _depthTexture: InternalTexture;\r\n\r\n    colorFormat: RenderTargetFormat;\r\n    depthStencilFormat: RenderTargetFormat;\r\n\r\n    isSRGB: boolean;\r\n\r\n    /**bytelength */\r\n    _gpuMemory: number = 0;\r\n\r\n    get gpuMemory(): number {\r\n        return this._gpuMemory;\r\n    }\r\n    set gpuMemory(value: number) {\r\n        this._changeTexMemory(value);\r\n        this._gpuMemory = value;\r\n    }\r\n\r\n    private _changeTexMemory(value: number) {\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_GPUMemory, -this._gpuMemory + value);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_ALLRenderTexture, -this._gpuMemory + value);\r\n\r\n    }\r\n    constructor(engine: WebGLEngine, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, isCube: boolean, generateMipmap: boolean, samples: number) {\r\n        super(engine);\r\n\r\n        this.colorFormat = colorFormat;\r\n        this.depthStencilFormat = depthStencilFormat;\r\n        this._isCube = isCube;\r\n        this._generateMipmap = generateMipmap;\r\n        this._samples = samples;\r\n\r\n        this._textures = [];\r\n        this._depthTexture = null;\r\n\r\n        this._framebuffer = this._gl.createFramebuffer();\r\n        if (samples > 1) {\r\n            this._msaaFramebuffer = this._gl.createFramebuffer();\r\n        }\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.RC_ALLRenderTexture, 1);\r\n    }\r\n\r\n\r\n\r\n    dispose(): void {\r\n        this._textures.forEach(tex => {\r\n            tex && tex.dispose();\r\n        });\r\n        this._textures = null;\r\n        this._depthTexture && this._depthTexture.dispose();\r\n        this._depthTexture = null;\r\n        this._framebuffer && this._gl.deleteFramebuffer(this._framebuffer);\r\n        this._framebuffer = null;\r\n        this._depthbuffer && this._gl.deleteRenderbuffer(this._depthbuffer);\r\n        this._depthbuffer = null;\r\n\r\n        this._msaaFramebuffer && this._gl.deleteFramebuffer(this._msaaFramebuffer);\r\n        this._msaaFramebuffer = null;\r\n        this._msaaRenderbuffer && this._gl.deleteRenderbuffer(this._msaaRenderbuffer);\r\n        this._msaaRenderbuffer = null;\r\n\r\n        this._changeTexMemory(0);\r\n        this._gpuMemory = 0;\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.RC_ALLRenderTexture, -1);\r\n    }\r\n}","import { InternalTexture } from \"../../../RenderDriver/DriverDesign/RenderDevice/InternalTexture\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderParams } from \"../../../RenderEngine/RenderEnum/RenderParams\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\r\nimport { TextureDimension } from \"../../../RenderEngine/RenderEnum/TextureDimension\";\r\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { WebGLExtension } from \"./WebGLEngine/GLEnum/WebGLExtension\";\r\nimport { GLObject } from \"./WebGLEngine/GLObject\";\r\n\r\n/** @internal */\r\nexport class WebGLInternalTex extends GLObject implements InternalTexture {\r\n\r\n    _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\n    readonly resource: WebGLTexture;\r\n    _resourceTarget: number;\r\n\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly depth: number;\r\n    readonly isPotSize: boolean;\r\n\r\n    private _mipmap: boolean;\r\n    /**\r\n     * 是否存在 mipmap 数据\r\n     */\r\n    get mipmap(): boolean {\r\n        return this._mipmap;\r\n    }\r\n\r\n    private _mipmapCount: number;\r\n    public get mipmapCount(): number {\r\n        return this._mipmapCount;\r\n    }\r\n\r\n    readonly useSRGBLoad: boolean;\r\n    readonly gammaCorrection: number;\r\n\r\n    // webgl param\r\n    readonly target: number;\r\n    internalFormat: number;\r\n    format: number;\r\n    type: number;\r\n    /**bytelength */\r\n    _gpuMemory: number = 0;\r\n\r\n    private _statistics_M_Texture: GPUEngineStatisticsInfo;\r\n    private _statistics_RC_Texture: GPUEngineStatisticsInfo;\r\n    _getSource() {\r\n        return this.resource;\r\n    }\r\n\r\n    get gpuMemory(): number {\r\n        return this._gpuMemory;\r\n    }\r\n    set gpuMemory(value: number) {\r\n        this._changeTexMemory(value);\r\n        this._gpuMemory = value;\r\n    }\r\n\r\n    constructor(engine: WebGLEngine, target: number, width: number, height: number, depth: number, dimension: TextureDimension, mipmap: boolean, useSRGBLoader: boolean, gammaCorrection: number) {\r\n        super(engine);\r\n\r\n        this.resource = this._gl.createTexture();\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        const isPot = (value: number): boolean => {\r\n            return (value & (value - 1)) === 0;\r\n        }\r\n\r\n        this.isPotSize = isPot(width) && isPot(height);\r\n        if (dimension == TextureDimension.Tex3D) {\r\n            this.isPotSize = this.isPotSize && isPot(this.depth);\r\n        }\r\n        switch (dimension) {\r\n            case TextureDimension.Tex2D:\r\n                this._statistics_M_Texture = GPUEngineStatisticsInfo.M_Texture2D;\r\n                this._statistics_RC_Texture = GPUEngineStatisticsInfo.RC_Texture2D;\r\n                break;\r\n            case TextureDimension.Tex3D:\r\n                this._statistics_M_Texture = GPUEngineStatisticsInfo.M_Texture3D;\r\n                this._statistics_RC_Texture = GPUEngineStatisticsInfo.RC_Texture3D;\r\n                break;\r\n            case TextureDimension.Cube:\r\n                this._statistics_M_Texture = GPUEngineStatisticsInfo.M_TextureCube;\r\n                this._statistics_RC_Texture = GPUEngineStatisticsInfo.RC_TextureCube;\r\n                break;\r\n            case TextureDimension.Texture2DArray:\r\n                this._statistics_M_Texture = GPUEngineStatisticsInfo.M_Texture2DArray;\r\n                this._statistics_RC_Texture = GPUEngineStatisticsInfo.RC_Texture2DArray;\r\n                break;\r\n        }\r\n\r\n        this._mipmap = mipmap && this.isPotSize;\r\n        this._mipmapCount = this._mipmap ? Math.max(Math.ceil(Math.log2(width)) + 1, Math.ceil(Math.log2(height)) + 1) : 1;\r\n        this._maxMipmapLevel = this._mipmapCount - 1;\r\n        this._baseMipmapLevel = 0;\r\n\r\n        this.useSRGBLoad = useSRGBLoader;\r\n        this.gammaCorrection = gammaCorrection;\r\n\r\n        this.target = target;\r\n\r\n        // default value\r\n        // this._filterMode = FilterMode.Bilinear;\r\n        // this._warpU = WrapMode.Repeat;\r\n        // this._warpV = WrapMode.Repeat;\r\n        // this._warpW = WrapMode.Repeat;\r\n        // this._anisoLevel = 4;\r\n\r\n        this.filterMode = FilterMode.Bilinear;\r\n        this.wrapU = WrapMode.Repeat;\r\n        this.wrapV = WrapMode.Repeat;\r\n        this.wrapW = WrapMode.Repeat;\r\n        this.anisoLevel = 4;\r\n\r\n        this.compareMode = TextureCompareMode.None;\r\n        WebGLEngine.instance._addStatisticsInfo(this._statistics_RC_Texture, 1);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_ALLTexture, 1);\r\n    }\r\n\r\n    private _filterMode: FilterMode;\r\n    public get filterMode(): FilterMode {\r\n        return this._filterMode;\r\n    }\r\n    public set filterMode(value: FilterMode) {\r\n        if (this._filterMode != value && this.resource) {\r\n            let gl = this._gl;\r\n            let mipmap = this.mipmap;\r\n            let min = this.getFilteMinrParam(value, mipmap);\r\n            this._setTexParameteri(gl.TEXTURE_MIN_FILTER, min);\r\n            let mag = this.getFilterMagParam(value);\r\n            this._setTexParameteri(gl.TEXTURE_MAG_FILTER, mag);\r\n\r\n            this._filterMode = value;\r\n        }\r\n    }\r\n\r\n    private _warpU: WrapMode;\r\n    public get wrapU(): WrapMode {\r\n        return this._warpU;\r\n    }\r\n    public set wrapU(value: WrapMode) {\r\n        if (this._warpU != value && this.resource) {\r\n            let gl = this._gl;\r\n            let warpParam = this.getWrapParam(value);\r\n            this._setWrapMode(gl.TEXTURE_WRAP_S, warpParam);\r\n            this._warpU = value;\r\n        }\r\n    }\r\n\r\n    private _warpV: WrapMode;\r\n\r\n    public get wrapV(): WrapMode {\r\n        return this._warpV;\r\n    }\r\n\r\n    public set wrapV(value: WrapMode) {\r\n        if (this._warpV != value && this.resource) {\r\n            let gl = this._gl;\r\n            let warpParam = this.getWrapParam(value);\r\n            this._setWrapMode(gl.TEXTURE_WRAP_T, warpParam);\r\n            this._warpV = value;\r\n        }\r\n    }\r\n\r\n    private _warpW: WrapMode;\r\n    public get wrapW(): WrapMode {\r\n        return this._warpW;\r\n    }\r\n    public set wrapW(value: WrapMode) {\r\n        if (this._warpW != value && this.resource) {\r\n            if (this._engine.getCapable(RenderCapable.Texture3D)) {\r\n                let gl = <WebGL2RenderingContext>this._gl;\r\n                let warpParam = this.getWrapParam(value);\r\n                this._setWrapMode(gl.TEXTURE_WRAP_R, warpParam);\r\n            }\r\n            this._warpW = value;\r\n        }\r\n    }\r\n\r\n    private _anisoLevel: number;\r\n    public get anisoLevel(): number {\r\n        return this._anisoLevel;\r\n    }\r\n    public set anisoLevel(value: number) {\r\n        let anisoExt = this._engine._supportCapatable.getExtension(WebGLExtension.EXT_texture_filter_anisotropic);\r\n        if (anisoExt) {\r\n            let gl = this._gl;\r\n            //let maxAnisoLevel = gl.getParameter(anisoExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\r\n            let maxAnisoLevel = this._engine.getParams(RenderParams.Max_AnisoLevel_Count);\r\n\r\n            let level = Math.max(1, Math.min(maxAnisoLevel, value));\r\n            this._setTexParametexf(anisoExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\r\n            this._anisoLevel = level;\r\n        }\r\n        else {\r\n            this._anisoLevel = 1;\r\n        }\r\n    }\r\n\r\n    private _baseMipmapLevel: number = 0;\r\n\r\n    public set baseMipmapLevel(value: number) {\r\n        if (this._engine.isWebGL2) {\r\n            this._setTexParameteri((<WebGL2RenderingContext>this._gl).TEXTURE_BASE_LEVEL, value);\r\n        }\r\n        this._baseMipmapLevel = value;\r\n    }\r\n\r\n    public get baseMipmapLevel() {\r\n        return this._baseMipmapLevel;\r\n    }\r\n\r\n    private _maxMipmapLevel: number = 0;\r\n\r\n    public set maxMipmapLevel(value: number) {\r\n        if (this._engine.isWebGL2) {\r\n            this._setTexParameteri((<WebGL2RenderingContext>this._gl).TEXTURE_MAX_LEVEL, value);\r\n        }\r\n        this._maxMipmapLevel = value;\r\n    }\r\n\r\n    public get maxMipmapLevel() {\r\n        return this._maxMipmapLevel;\r\n    }\r\n\r\n\r\n    private _compareMode: TextureCompareMode;\r\n    public get compareMode(): TextureCompareMode {\r\n        return this._compareMode;\r\n    }\r\n    public set compareMode(value: TextureCompareMode) {\r\n        this._compareMode = value;\r\n    }\r\n\r\n    // todo 设置参数函数 放在 context 里面? \r\n    public _setTexParameteri(pname: number, param: number) {\r\n        let gl = this._gl;\r\n        let target = this.target\r\n        this._engine._bindTexture(target, this.resource);\r\n        gl.texParameteri(target, pname, param);\r\n        this._engine._bindTexture(target, null);\r\n    }\r\n\r\n    public _setTexParametexf(pname: number, param: number) {\r\n        let gl = this._gl;\r\n        let target = this.target\r\n        this._engine._bindTexture(target, this.resource);\r\n        gl.texParameterf(target, pname, param);\r\n        this._engine._bindTexture(target, null);\r\n    }\r\n\r\n    protected getFilteMinrParam(filterMode: FilterMode, mipmap: boolean) {\r\n        let gl = this._gl;\r\n        switch (filterMode) {\r\n            case FilterMode.Point:\r\n                return mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST;\r\n            case FilterMode.Bilinear:\r\n                return mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR;\r\n            case FilterMode.Trilinear:\r\n                return mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR;\r\n            default:\r\n                return mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR;\r\n        }\r\n    }\r\n\r\n    protected getFilterMagParam(filterMode: FilterMode) {\r\n        let gl = this._gl;\r\n        switch (filterMode) {\r\n            case FilterMode.Point:\r\n                return gl.NEAREST;\r\n            case FilterMode.Bilinear:\r\n                return gl.LINEAR;\r\n            case FilterMode.Trilinear:\r\n                return gl.LINEAR;\r\n            default:\r\n                return gl.LINEAR;\r\n        }\r\n    }\r\n\r\n    protected getWrapParam(wrapMode: WrapMode) {\r\n        let gl = this._gl;\r\n        switch (wrapMode) {\r\n            case WrapMode.Repeat:\r\n                return gl.REPEAT;\r\n            case WrapMode.Clamp:\r\n                return gl.CLAMP_TO_EDGE;\r\n            case WrapMode.Mirrored:\r\n                return gl.MIRRORED_REPEAT;\r\n            default:\r\n                return gl.REPEAT;\r\n        }\r\n    }\r\n\r\n    protected _setWrapMode(pname: number, param: number) {\r\n        let gl = this._gl;\r\n        if (!this.isPotSize) {\r\n            param = gl.CLAMP_TO_EDGE;\r\n        }\r\n        this._setTexParameteri(pname, param);\r\n    }\r\n\r\n    private _changeTexMemory(memory: number) {\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_GPUMemory, -this._gpuMemory + memory);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_ALLTexture, -this._gpuMemory + memory);\r\n        this._engine._addStatisticsInfo(this._statistics_M_Texture, -this._gpuMemory + memory);\r\n\r\n    }\r\n\r\n    dispose(): void {\r\n        let gl = this._gl;\r\n        gl.deleteTexture(this.resource);\r\n        this._changeTexMemory(0);\r\n        this._gpuMemory = 0;\r\n        WebGLEngine.instance._addStatisticsInfo(this._statistics_RC_Texture, -1);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_ALLTexture, -1);\r\n    }\r\n}","\r\nimport { InternalTexture } from \"../../../RenderDriver/DriverDesign/RenderDevice/InternalTexture\";\r\nimport { DDSTextureInfo } from \"../../../RenderEngine/DDSTextureInfo\";\r\nimport { HDRTextureInfo } from \"../../../RenderEngine/HDRTextureInfo\";\r\nimport { KTXTextureInfo } from \"../../../RenderEngine/KTXTextureInfo\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\r\nimport { TextureDimension } from \"../../../RenderEngine/RenderEnum/TextureDimension\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { ITextureContext } from \"../../DriverDesign/RenderDevice/ITextureContext\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { WebGLExtension } from \"./WebGLEngine/GLEnum/WebGLExtension\";\r\nimport { GLObject } from \"./WebGLEngine/GLObject\";\r\nimport { WebGLInternalRT } from \"./WebGLInternalRT\";\r\nimport { WebGLInternalTex } from \"./WebGLInternalTex\";\r\n\r\nexport class GLTextureContext extends GLObject implements ITextureContext {\r\n\r\n    protected _sRGB: any;\r\n    protected _oesTextureHalfFloat: any;\r\n    protected _compressdTextureS3tc_srgb: any;\r\n    protected _compressedTextureEtc1: any;\r\n    protected _compressedTextureS3tc: any;\r\n    protected _compressedTextureETC: any;\r\n    protected _compressedTextureASTC: any;\r\n    protected _webgl_depth_texture: any;\r\n    needBitmap: boolean;\r\n    constructor(engine: WebGLEngine) {\r\n        super(engine);\r\n        this.needBitmap = false;\r\n        this._sRGB = this._engine._supportCapatable.getExtension(WebGLExtension.EXT_sRGB)\r\n        this._oesTextureHalfFloat = this._engine._supportCapatable.getExtension(WebGLExtension.OES_texture_half_float)\r\n        this._compressdTextureS3tc_srgb = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_compressed_texture_s3tc_srgb)\r\n        this._compressedTextureEtc1 = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_compressed_texture_etc1)\r\n        this._compressedTextureS3tc = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_compressed_texture_s3tc)\r\n        this._compressedTextureETC = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_compressed_texture_etc)\r\n        this._compressedTextureASTC = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_compressed_texture_astc)\r\n        this._webgl_depth_texture = this._engine._supportCapatable.getExtension(WebGLExtension.WEBGL_depth_texture);\r\n    }\r\n    createTexture3DInternal(dimension: TextureDimension, width: number, height: number, depth: number, format: TextureFormat, generateMipmap: boolean, sRGB: boolean, premultipliedAlpha: boolean): InternalTexture {\r\n        return null;\r\n    }\r\n    setTexture3DImageData(texture: InternalTexture, source: HTMLImageElement[] | HTMLCanvasElement[] | ImageBitmap[], depth: number, premultiplyAlpha: boolean, invertY: boolean): void {\r\n        return null;\r\n    }\r\n    setTexture3DPixelsData(texture: InternalTexture, source: ArrayBufferView, depth: number, premultiplyAlpha: boolean, invertY: boolean): void {\r\n        return null;\r\n    }\r\n    setTexture3DSubPixelsData(texture: InternalTexture, source: ArrayBufferView, mipmapLevel: number, generateMipmap: boolean, xOffset: number, yOffset: number, zOffset: number, width: number, height: number, depth: number, premultiplyAlpha: boolean, invertY: boolean): void {\r\n        return null;\r\n    }\r\n\r\n    _glParam: {\r\n        internalFormat: number,\r\n        format: number,\r\n        type: number,\r\n    } = {\r\n            internalFormat: 0,\r\n            format: 0,\r\n            type: 0,\r\n        };\r\n\r\n    glTextureParam(format: TextureFormat, useSRGB: boolean) {\r\n        let gl = this._gl;\r\n\r\n        this._glParam.internalFormat = null;\r\n        this._glParam.format = null;\r\n        this._glParam.type = null;\r\n        switch (format) {\r\n            case TextureFormat.R8G8B8:\r\n                this._glParam.internalFormat = useSRGB ? this._sRGB.SRGB_EXT : gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                this._glParam.internalFormat = useSRGB ? this._sRGB.SRGB_ALPHA_EXT : gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                this._glParam.internalFormat = gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_SHORT_5_6_5;\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                this._glParam.internalFormat = gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n                this._glParam.internalFormat = gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case TextureFormat.R16G16B16A16:\r\n                this._glParam.internalFormat = gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = this._oesTextureHalfFloat.HALF_FLOAT_OES;\r\n                break;\r\n            case TextureFormat.R16G16B16:\r\n                this._glParam.internalFormat = gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = this._oesTextureHalfFloat.HALF_FLOAT_OES;\r\n                break;\r\n            case TextureFormat.DXT1:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.DXT3:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                this._glParam.internalFormat = this._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGBA:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGB:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGB8_ETC2;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_ETC2;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2SRGB_Alpha8:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGB_Alpha1:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2SRGB_Alpha1:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC4x4:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC6x6:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC8x8:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC10x10:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC12x12:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC4x4SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC6x6SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC8x8SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC10x10SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC12x12SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            default:\r\n                throw \"Unknown Texture Format.\";\r\n        }\r\n\r\n        return this._glParam;\r\n    }\r\n\r\n    // todo srgb ?\r\n    glRenderTextureParam(format: RenderTargetFormat, useSRGB: boolean) {\r\n        let gl = this._gl;\r\n\r\n        this._glParam.internalFormat = null;\r\n        this._glParam.format = null;\r\n        this._glParam.type = null;\r\n\r\n        switch (format) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                this._glParam.internalFormat = useSRGB ? this._sRGB.SRGB_EXT : gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                this._glParam.internalFormat = useSRGB ? this._sRGB.SRGB_EXT : gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case RenderTargetFormat.R16G16B16:\r\n                this._glParam.internalFormat = gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = this._oesTextureHalfFloat.HALF_FLOAT_OES;\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                this._glParam.internalFormat = gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = this._oesTextureHalfFloat.HALF_FLOAT_OES;\r\n                break;\r\n            case RenderTargetFormat.R32G32B32:\r\n                this._glParam.internalFormat = gl.RGB;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                this._glParam.internalFormat = gl.RGBA;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case RenderTargetFormat.DEPTH_16:\r\n                this._glParam.internalFormat = gl.DEPTH_COMPONENT;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_SHORT;\r\n                break;\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                this._glParam.internalFormat = gl.DEPTH_STENCIL;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = this._webgl_depth_texture.UNSIGNED_INT_24_8_WEBGL;\r\n                break;\r\n            case RenderTargetFormat.DEPTH_32:\r\n                this._glParam.internalFormat = gl.DEPTH_COMPONENT;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_INT;\r\n                break;\r\n            case RenderTargetFormat.STENCIL_8:\r\n            default:\r\n                throw \"render texture format wrong.\"\r\n        }\r\n\r\n        return this._glParam;\r\n    }\r\n\r\n    glRenderBufferParam(format: RenderTargetFormat, useSRGB: boolean): { internalFormat: number; attachment: number } {\r\n        // todo\r\n        let gl = this._gl;\r\n        switch (format) {\r\n            case RenderTargetFormat.DEPTH_16:\r\n                return { internalFormat: gl.DEPTH_COMPONENT16, attachment: gl.DEPTH_ATTACHMENT };\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                return { internalFormat: gl.DEPTH_STENCIL, attachment: gl.DEPTH_STENCIL_ATTACHMENT };\r\n            case RenderTargetFormat.DEPTH_32:\r\n                return { internalFormat: gl.DEPTH_STENCIL, attachment: gl.DEPTH_STENCIL_ATTACHMENT };\r\n            case RenderTargetFormat.STENCIL_8:\r\n                return { internalFormat: gl.STENCIL_INDEX8, attachment: gl.STENCIL_ATTACHMENT };\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    glRenderTargetAttachment(format: RenderTargetFormat) {\r\n        let gl = this._gl;\r\n        switch (format) {\r\n            case RenderTargetFormat.DEPTH_16:\r\n                return gl.DEPTH_ATTACHMENT;\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                return gl.DEPTH_STENCIL_ATTACHMENT;\r\n            case RenderTargetFormat.DEPTH_32:\r\n                return gl.DEPTH_ATTACHMENT;\r\n            case RenderTargetFormat.STENCIL_8:\r\n                return gl.STENCIL_ATTACHMENT;\r\n            case RenderTargetFormat.R8G8B8:\r\n            case RenderTargetFormat.R8G8B8A8:\r\n            case RenderTargetFormat.R16G16B16:\r\n            case RenderTargetFormat.R16G16B16A16:\r\n            case RenderTargetFormat.R32G32B32:\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                return gl.COLOR_ATTACHMENT0;\r\n            default:\r\n                throw \"render format.\"\r\n        }\r\n    }\r\n\r\n    protected getTarget(dimension: TextureDimension): number {\r\n        let gl = this._gl;\r\n        switch (dimension) {\r\n            case TextureDimension.Tex2D:\r\n                return gl.TEXTURE_2D;\r\n            case TextureDimension.Cube:\r\n                return gl.TEXTURE_CUBE_MAP;\r\n            default:\r\n                throw \"texture dimension wrong in WebGL1.\"\r\n        }\r\n    }\r\n\r\n    public getFormatPixelsParams(format: TextureFormat) {\r\n\r\n        let formatParams: { channels: number, bytesPerPixel: number, dataTypedCons: any, typedSize: number } = {\r\n            channels: 0,\r\n            bytesPerPixel: 0,\r\n            dataTypedCons: Uint8Array,\r\n            typedSize: 1\r\n        }\r\n        switch (format) {\r\n            case TextureFormat.R8G8B8A8:\r\n                formatParams.channels = 4;\r\n                formatParams.bytesPerPixel = 4;\r\n                formatParams.dataTypedCons = Uint8Array\r\n                formatParams.typedSize = 1;\r\n                return formatParams;\r\n            case TextureFormat.R8G8B8:\r\n                formatParams.channels = 3;\r\n                formatParams.bytesPerPixel = 3;\r\n                formatParams.dataTypedCons = Uint8Array\r\n                formatParams.typedSize = 1;\r\n                return formatParams;\r\n            case TextureFormat.R5G6B5:\r\n                formatParams.channels = 3;\r\n                formatParams.bytesPerPixel = 2;\r\n                formatParams.dataTypedCons = Uint16Array\r\n                formatParams.typedSize = 2;\r\n                return formatParams;\r\n            case TextureFormat.R16G16B16:\r\n                formatParams.channels = 3;\r\n                formatParams.bytesPerPixel = 6;\r\n                formatParams.dataTypedCons = Uint16Array\r\n                formatParams.typedSize = 2;\r\n                return formatParams;\r\n            case TextureFormat.R16G16B16A16:\r\n                formatParams.channels = 4;\r\n                formatParams.bytesPerPixel = 8;\r\n                formatParams.dataTypedCons = Uint16Array\r\n                formatParams.typedSize = 2;\r\n                return formatParams;\r\n            case TextureFormat.R32G32B32:\r\n                formatParams.channels = 3;\r\n                formatParams.bytesPerPixel = 12;\r\n                formatParams.dataTypedCons = Float32Array\r\n                formatParams.typedSize = 4;\r\n                return formatParams;\r\n            case TextureFormat.R32G32B32A32:\r\n                formatParams.channels = 4;\r\n                formatParams.bytesPerPixel = 16;\r\n                formatParams.dataTypedCons = Float32Array\r\n                formatParams.typedSize = 4;\r\n                return formatParams;\r\n            default:\r\n                return formatParams;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * caculate texture memory\r\n     * @param tex \r\n     * @returns \r\n     */\r\n    getGLtexMemory(tex: WebGLInternalTex, depth: number = 1): number {\r\n        let gl = this._gl;\r\n        let channels = 0;\r\n        let singlebyte = 0;\r\n        let bytelength = 0;\r\n\r\n        let srgb = this._sRGB ? this._sRGB.SRGB_EXT : gl.RGB;\r\n        let srgb_alpha = this._sRGB ? this._sRGB.SRGB_ALPHA_EXT : gl.RGBA;\r\n\r\n        switch (tex.internalFormat) {\r\n            case srgb:\r\n            case gl.RGB:\r\n                channels = 3;\r\n                break;\r\n            case srgb_alpha:\r\n            case gl.RGBA:\r\n                channels = 4;\r\n                break;\r\n            default:\r\n                channels = 0;\r\n                break;\r\n        }\r\n        switch (tex.type) {\r\n            case gl.UNSIGNED_BYTE:\r\n                singlebyte = 1;\r\n                break;\r\n            case gl.UNSIGNED_SHORT_5_6_5:\r\n                singlebyte = 2 / 3;\r\n                break;\r\n            case gl.FLOAT:\r\n                singlebyte = 4;\r\n                break;\r\n            case this._oesTextureHalfFloat.HALF_FLOAT_OES:\r\n                singlebyte = 2;\r\n                break;\r\n            default:\r\n                singlebyte = 0;\r\n                break;\r\n        }\r\n        bytelength = channels * singlebyte * tex.width * tex.height;\r\n        if (tex.mipmap) {\r\n            bytelength *= 1.333;\r\n        }\r\n        if (tex.target == gl.TEXTURE_CUBE_MAP)\r\n            bytelength *= 6;\r\n        else if (tex.target == gl.TEXTURE_2D)\r\n            bytelength *= 1;\r\n\r\n        return bytelength;\r\n    }\r\n\r\n    getGLRTTexMemory(width: number, height: number, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, generateMipmap: boolean, multiSamples: number, cube: boolean) {\r\n        let getpixelbyte = (rtFormat: RenderTargetFormat) => {\r\n            let pixelByte = 0;\r\n            switch (rtFormat) {\r\n                case RenderTargetFormat.R8G8B8:\r\n                    pixelByte = 3;\r\n                    break;\r\n                case RenderTargetFormat.R8G8B8A8:\r\n                    pixelByte = 4;\r\n                    break;\r\n                case RenderTargetFormat.R16G16B16A16:\r\n                    pixelByte = 8;\r\n                    break;\r\n                case RenderTargetFormat.R32G32B32:\r\n                    pixelByte = 12;\r\n                    break;\r\n                case RenderTargetFormat.R32G32B32A32:\r\n                    pixelByte = 16;\r\n                    break;\r\n                case RenderTargetFormat.R16G16B16:\r\n                    pixelByte = 6;\r\n                    break;\r\n                case RenderTargetFormat.DEPTH_16:\r\n                    pixelByte = 2;\r\n                    break;\r\n                case RenderTargetFormat.STENCIL_8:\r\n                    pixelByte = 1;\r\n                    break;\r\n                case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                    pixelByte = 4;\r\n                    break;\r\n                case RenderTargetFormat.DEPTH_32:\r\n                    pixelByte = 4;\r\n                    break;\r\n            }\r\n            return pixelByte;\r\n        }\r\n        let colorPixelbyte = getpixelbyte(colorFormat);\r\n        let depthPixelbyte = getpixelbyte(depthStencilFormat);\r\n        if (multiSamples > 1)//多重采样\r\n            colorPixelbyte *= 2;\r\n        if (cube)//box\r\n            colorPixelbyte *= 6;\r\n        if (generateMipmap)//mipmap\r\n            colorPixelbyte *= 1.333;\r\n        let colorMemory = colorPixelbyte * width * height;\r\n        let depthMemory = depthPixelbyte * width * height;\r\n        return colorMemory + depthMemory;\r\n    }\r\n\r\n    // protected getRenderTargetDepthFormat(format: RenderTargetDepthFormat): { internalFormat: number, attachment: number } {\r\n    //     let gl = this.gl;\r\n    //     switch (format) {\r\n    //         case RenderTargetDepthFormat.DEPTH_16:\r\n    //             return { internalFormat: gl.DEPTH_COMPONENT16, attachment: gl.DEPTH_ATTACHMENT };\r\n    //         case RenderTargetDepthFormat.DEPTHSTENCIL_24_8:\r\n    //             return { internalFormat: gl.DEPTH_STENCIL, attachment: gl.DEPTH_STENCIL_ATTACHMENT };\r\n    //         case RenderTargetDepthFormat.DEPTH_32:\r\n    //             return { internalFormat: gl.DEPTH_STENCIL, attachment: gl.DEPTH_STENCIL_ATTACHMENT };\r\n    //         case RenderTargetDepthFormat.STENCIL_8:\r\n    //             return { internalFormat: gl.STENCIL_INDEX8, attachment: gl.STENCIL_ATTACHMENT };\r\n    //         case RenderTargetDepthFormat.DEPTHSTENCIL_NONE:\r\n    //             return null;\r\n    //         default:\r\n    //             throw \"RenderTargetDepthFormat wrong.\"\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * 根据 format 判断是否支持 SRGBload\r\n     * @param format \r\n     * @returns \r\n     */\r\n    supportSRGB(format: TextureFormat | RenderTargetFormat, mipmap: boolean): boolean {\r\n        switch (format) {\r\n            case TextureFormat.R8G8B8:\r\n            case TextureFormat.R8G8B8A8:\r\n                return this._engine.getCapable(RenderCapable.Texture_SRGB) && !mipmap;\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT3:\r\n            case TextureFormat.DXT5:\r\n                // todo  验证 srgb format 和 mipmap webgl1 兼容问题\r\n                return this._engine.getCapable(RenderCapable.COMPRESS_TEXTURE_S3TC_SRGB) && !mipmap;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    supportGenerateMipmap(format: TextureFormat | RenderTargetFormat) {\r\n        switch (format) {\r\n            case RenderTargetFormat.DEPTH_16:\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n            case RenderTargetFormat.DEPTH_32:\r\n            case RenderTargetFormat.STENCIL_8:\r\n                return false;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断 纹理格式 本身是否是 SRGB格式\r\n     * @param format \r\n     * @returns \r\n     */\r\n    isSRGBFormat(format: TextureFormat | RenderTargetFormat) {\r\n        switch (format) {\r\n            case TextureFormat.ETC2SRGB:\r\n            case TextureFormat.ETC2SRGB_Alpha8:\r\n            case TextureFormat.ETC2SRGB_Alpha1:\r\n            case TextureFormat.ASTC4x4SRGB:\r\n            case TextureFormat.ASTC6x6SRGB:\r\n            case TextureFormat.ASTC8x8SRGB:\r\n            case TextureFormat.ASTC10x10SRGB:\r\n            case TextureFormat.ASTC12x12SRGB:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    createTextureInternal(dimension: TextureDimension, width: number, height: number, format: TextureFormat, generateMipmap: boolean, sRGB: boolean, premultipliedAlpha: boolean): InternalTexture {\r\n\r\n        // todo  一些format 不支持自动生成mipmap\r\n\r\n        // todo  这个判断, 若纹理本身格式不支持？\r\n        let useSRGBExt = this.isSRGBFormat(format) || (sRGB && this.supportSRGB(format, generateMipmap));\r\n        if (premultipliedAlpha) {//预乘法和SRGB同时开启，会有颜色白边问题\r\n            useSRGBExt = false;\r\n        }\r\n        let gammaCorrection = 1.0;\r\n        if (!useSRGBExt && sRGB) {\r\n            gammaCorrection = 2.2;\r\n        }\r\n\r\n        // let dimension = TextureDimension.Tex2D;\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, width, height, 1, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n        //Resource:\r\n        //internalTex.gpuMemory = this.getGLtexMemory(format, width, height, dimension, generateMipmap);\r\n\r\n        return internalTex;\r\n    }\r\n\r\n    setTextureImageData(texture: WebGLInternalTex, source: HTMLImageElement | HTMLCanvasElement | ImageBitmap, premultiplyAlpha: boolean, invertY: boolean) {\r\n\r\n        if (texture.width != source.width || texture.height != source.height) {\r\n            // todo ?\r\n            console.warn(\"setTextureImageData: size not match\");\r\n        }\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texImage2D(target, 0, internalFormat, format, type, source);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        //texture.\r\n        // gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, null);\r\n        // gl.texSubImage2D(target, 0, 0, 0, format, type, source);\r\n\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        //resource TODO\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setTextureSubImageData(texture: WebGLInternalTex, source: HTMLImageElement | HTMLCanvasElement | ImageBitmap, x: number, y: number, premultiplyAlpha: boolean, invertY: boolean) {\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = source.width;\r\n        let height = source.height;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texSubImage2D(target, 0, x, y, format, type, source);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        //texture.\r\n        // gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, null);\r\n        // gl.texSubImage2D(target, 0, 0, 0, format, type, source);\r\n\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        //resource TODO\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n\r\n    initVideoTextureData(texture: WebGLInternalTex) {\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let gl = texture._gl;\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        gl.texImage2D(target, 0, texture.internalFormat, width, height, 0, format, type, null);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n    }\r\n\r\n    setTexturePixelsData(texture: WebGLInternalTex, source: ArrayBufferView, premultiplyAlpha: boolean, invertY: boolean) {\r\n        // todo check pixels size\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        // gl.texImage2D(target, 0, internalFormat, format, type, source);\r\n\r\n        gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, source);\r\n        // gl.texSubImage2D(target, 0, 0, 0, format, type, source);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureSubPixelsData(texture: WebGLInternalTex, source: ArrayBufferView, mipmapLevel: number, generateMipmap: boolean, xOffset: number, yOffset: number, width: number, height: number, premultiplyAlpha: boolean, invertY: boolean): void {\r\n\r\n        generateMipmap = generateMipmap && mipmapLevel == 0;\r\n\r\n        // todo check pixels size\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        gl.texSubImage2D(target, mipmapLevel, xOffset, yOffset, width, height, format, type, source);\r\n\r\n        if (texture.mipmap && generateMipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureDDSData(texture: WebGLInternalTex, ddsInfo: DDSTextureInfo) {\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        // todo texture size 与 ddsInfo size\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        let source = ddsInfo.source;\r\n        let dataOffset = ddsInfo.dataOffset;\r\n        let bpp = ddsInfo.bpp;\r\n        let blockBytes = ddsInfo.blockBytes;\r\n        let mipmapCount = ddsInfo.mipmapCount;\r\n\r\n        let compressed = ddsInfo.compressed;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        let formatParams = this.getFormatPixelsParams(ddsInfo.format);\r\n        let channelsByte = formatParams.bytesPerPixel / formatParams.channels;\r\n        let dataTypeConstur = formatParams.dataTypedCons;\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let memory = 0;\r\n        for (let index = 0; index < mipmapCount; index++) {\r\n            if (compressed) {\r\n                // todo  size 计算 方式\r\n                let dataLength = (((Math.max(4, mipmapWidth) / 4) * Math.max(4, mipmapHeight)) / 4) * blockBytes;\r\n                let sourceData = new Uint8Array(source, dataOffset, dataLength);\r\n                gl.compressedTexImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                memory += sourceData.length;\r\n                dataOffset += bpp ? (mipmapWidth * mipmapHeight * (bpp / 8)) : dataLength;\r\n            }\r\n            else {\r\n                let dataLength = mipmapWidth * mipmapHeight * formatParams.channels;\r\n                let sourceData = new dataTypeConstur(source, dataOffset, dataLength);\r\n                memory += sourceData.length;\r\n                gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, sourceData);\r\n\r\n                dataOffset += dataLength * channelsByte;\r\n            }\r\n\r\n            mipmapWidth *= 0.5;\r\n            mipmapHeight *= 0.5;\r\n            mipmapWidth = Math.max(1.0, mipmapWidth);\r\n            mipmapHeight = Math.max(1.0, mipmapHeight);\r\n        }\r\n        texture.gpuMemory = memory;//TODO 不太准\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureKTXData(texture: WebGLInternalTex, ktxInfo: KTXTextureInfo) {\r\n\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let source = ktxInfo.source;\r\n        let compressed = ktxInfo.compress;\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let mipmapCount = texture.mipmapCount;\r\n        // todo texture size 与 ddsInfo size\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = texture._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let dataOffset = ktxInfo.headerOffset + ktxInfo.bytesOfKeyValueData;\r\n        let memory = 0;\r\n        for (let index = 0; index < ktxInfo.mipmapCount; index++) {\r\n            let imageSize = new Int32Array(source, dataOffset, 1)[0];\r\n\r\n            dataOffset += 4;\r\n            if (compressed) {\r\n                let sourceData = new Uint8Array(source, dataOffset, imageSize);\r\n                gl.compressedTexImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                memory += sourceData.length;\r\n            }\r\n            else {\r\n                let pixelParams = this.getFormatPixelsParams(ktxInfo.format);\r\n                let typedSize = imageSize / pixelParams.typedSize;\r\n                let sourceData: ArrayBufferView = new pixelParams.dataTypedCons(source, dataOffset, typedSize);\r\n                gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, sourceData);\r\n                memory += sourceData.byteLength;\r\n            }\r\n\r\n            dataOffset += imageSize;\r\n            dataOffset += 3 - ((imageSize + 3) % 4);\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n        }\r\n\r\n        for (let index = ktxInfo.mipmapCount; index < texture.mipmapCount; index++) {\r\n            if (compressed) {\r\n                // todo\r\n            }\r\n            else {\r\n                gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, null);\r\n            }\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n        }\r\n\r\n        texture.gpuMemory = memory;//TODO 不太准\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureHDRData(texture: WebGLInternalTex, hdrInfo: HDRTextureInfo): void {\r\n        let hdrPixelData = hdrInfo.readScanLine();\r\n        this.setTexturePixelsData(texture, hdrPixelData, false, false);\r\n    }\r\n\r\n    setCubeImageData(texture: WebGLInternalTex, sources: (HTMLImageElement | HTMLCanvasElement | ImageBitmap)[], premultiplyAlpha: boolean, invertY: boolean) {\r\n\r\n        let gl = texture._gl;\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ]\r\n\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        for (let index = 0; index < cubeFace.length; index++) {\r\n            let target = cubeFace[index];\r\n            gl.texImage2D(target, 0, internalFormat, format, type, sources[index]);\r\n        }\r\n\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setCubePixelsData(texture: WebGLInternalTex, source: ArrayBufferView[], premultiplyAlpha: boolean, invertY: boolean) {\r\n        let gl = texture._gl;\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ]\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        let fourSize = width % 4 == 0;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        if (source) {\r\n            for (let index = 0; index < cubeFace.length; index++) {\r\n                let t = cubeFace[index];\r\n                // gl.texImage2D(t, 0, internalFormat, format, type, sources[index]);\r\n                gl.texImage2D(t, 0, internalFormat, width, height, 0, format, type, source[index]);\r\n            }\r\n            if (texture.mipmap) {\r\n                gl.generateMipmap(texture.target);\r\n            }\r\n        }\r\n        else {\r\n            for (let index = 0; index < cubeFace.length; index++) {\r\n                let t = cubeFace[index];\r\n                // gl.texImage2D(t, 0, internalFormat, format, type, sources[index]);\r\n                gl.texImage2D(t, 0, internalFormat, width, height, 0, format, type, null);\r\n            }\r\n            if (texture.mipmap) {\r\n                gl.generateMipmap(texture.target);\r\n            }\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setCubeSubPixelData(texture: WebGLInternalTex, source: ArrayBufferView[], mipmapLevel: number, generateMipmap: boolean, xOffset: number, yOffset: number, width: number, height: number, premultiplyAlpha: boolean, invertY: boolean): void {\r\n\r\n        generateMipmap = generateMipmap && mipmapLevel == 0;\r\n\r\n        let gl = texture._gl;\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ];\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n\r\n        let fourSize = width % 4 == 0;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        for (let index = 0; index < cubeFace.length; index++) {\r\n            let target = cubeFace[index];\r\n            gl.texSubImage2D(target, mipmapLevel, xOffset, yOffset, width, height, format, type, source[index]);\r\n        }\r\n\r\n        if (texture.mipmap && generateMipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n\r\n    setCubeDDSData(texture: WebGLInternalTex, ddsInfo: DDSTextureInfo) {\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        // let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        let source = ddsInfo.source;\r\n        let dataOffset = ddsInfo.dataOffset;\r\n        let bpp = ddsInfo.bpp;\r\n        let blockBytes = ddsInfo.blockBytes;\r\n        let mipmapCount = ddsInfo.mipmapCount;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n        fourSize = true;\r\n        let gl = texture._gl;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n        ]\r\n\r\n        let formatParams = this.getFormatPixelsParams(ddsInfo.format);\r\n        let channelsByte = formatParams.bytesPerPixel / formatParams.channels;\r\n        let dataTypeConstur = formatParams.dataTypedCons;\r\n        let memory = 0;\r\n        if (!ddsInfo.compressed) {\r\n            for (let face = 0; face < 6; face++) {\r\n                let target = cubeFace[face];\r\n                let mipmapWidth = width;\r\n                let mipmapHeight = height;\r\n                for (let index = 0; index < mipmapCount; index++) {\r\n                    let dataLength = mipmapWidth * mipmapHeight * formatParams.channels;\r\n                    let sourceData = new dataTypeConstur(source, dataOffset, dataLength);\r\n                    gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                    dataOffset += dataLength * channelsByte;\r\n                    mipmapWidth *= 0.5;\r\n                    mipmapHeight *= 0.5;\r\n                    mipmapWidth = Math.max(1.0, mipmapWidth);\r\n                    mipmapHeight = Math.max(1.0, mipmapHeight);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let face = 0; face < 6; face++) {\r\n                let target = cubeFace[face];\r\n                let mipmapWidth = width;\r\n                let mipmapHeight = height;\r\n                for (let index = 0; index < mipmapCount; index++) {\r\n                    let dataLength = Math.max(4, mipmapWidth) / 4 * Math.max(4, mipmapHeight) / 4 * blockBytes;\r\n\r\n                    let sourceData = new Uint8Array(source, dataOffset, dataLength);\r\n\r\n                    (texture.mipmap || index == 0) && gl.compressedTexImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                    dataOffset += bpp ? (mipmapWidth * mipmapHeight * (bpp / 8)) : dataLength;\r\n\r\n                    mipmapWidth *= 0.5;\r\n                    mipmapHeight *= 0.5;\r\n                    mipmapWidth = Math.max(1.0, mipmapWidth);\r\n                    mipmapHeight = Math.max(1.0, mipmapHeight);\r\n                }\r\n            }\r\n        }\r\n        texture.gpuMemory = memory;\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setCubeKTXData(texture: WebGLInternalTex, ktxInfo: KTXTextureInfo) {\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let source = ktxInfo.source;\r\n        let compressed = ktxInfo.compress;\r\n\r\n        // let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let mipmapCount = ktxInfo.mipmapCount;\r\n        // todo texture size 与 ddsInfo size\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = texture._gl;\r\n\r\n        // ktx 标准顺序\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n        ]\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let dataOffset = ktxInfo.headerOffset + ktxInfo.bytesOfKeyValueData;\r\n        let memory = 0;\r\n        for (let index = 0; index < ktxInfo.mipmapCount; index++) {\r\n            let imageSize = new Int32Array(source, dataOffset, 1)[0];\r\n\r\n            dataOffset += 4;\r\n            // todo  cube 在一起？\r\n\r\n            for (let face = 0; face < 6; face++) {\r\n                let target = cubeFace[face];\r\n\r\n                if (compressed) {\r\n                    let sourceData = new Uint8Array(source, dataOffset, imageSize);\r\n                    gl.compressedTexImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                }\r\n                else {\r\n                    let pixelParams = this.getFormatPixelsParams(ktxInfo.format);\r\n                    let typedSize = imageSize / pixelParams.typedSize;\r\n                    let sourceData = new pixelParams.dataTypedCons(source, dataOffset, typedSize);\r\n                    gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                }\r\n                dataOffset += imageSize;\r\n                dataOffset += 3 - ((imageSize + 3) % 4);\r\n            }\r\n\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n        }\r\n\r\n        for (let index = ktxInfo.mipmapCount; index < texture.mipmapCount; index++) {\r\n\r\n            for (let face = 0; face < 6; face++) {\r\n                let target = cubeFace[face];\r\n                if (compressed) {\r\n                    // todo\r\n                }\r\n                else {\r\n                    gl.texImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, format, type, null);\r\n                }\r\n            }\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n        }\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n        texture.gpuMemory = memory;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureCompareMode(texture: WebGLInternalTex, compareMode: TextureCompareMode): TextureCompareMode {\r\n        return TextureCompareMode.None;\r\n    }\r\n\r\n    currentActiveRT: WebGLInternalRT;\r\n\r\n    bindRenderTarget(renderTarget: WebGLInternalRT, faceIndex: number = 0): void {\r\n        this.currentActiveRT && this.unbindRenderTarget(this.currentActiveRT);\r\n        let gl = this._gl;\r\n        let framebuffer = renderTarget._framebuffer;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n        if (renderTarget._isCube) {\r\n            let texture = <WebGLInternalTex>renderTarget._textures[0];\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture.resource, 0);\r\n        }\r\n        this.currentActiveRT = renderTarget;\r\n    }\r\n\r\n    bindoutScreenTarget(): void {\r\n        if (this.currentActiveRT != WebGLEngine._lastFrameBuffer) {\r\n            this.unbindRenderTarget(this.currentActiveRT);\r\n        }\r\n    }\r\n\r\n    unbindRenderTarget(renderTarget: WebGLInternalRT): void {\r\n        let gl = renderTarget._gl;\r\n        if (renderTarget && renderTarget._generateMipmap) {\r\n            renderTarget._textures.forEach(tex => {\r\n                let target = (<WebGLInternalTex>tex).target;\r\n                this._engine._bindTexture(target, tex.resource);\r\n                gl.generateMipmap(target);\r\n                this._engine._bindTexture(target, null);\r\n            });\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        this.currentActiveRT = WebGLEngine._lastFrameBuffer;\r\n    }\r\n\r\n    createRenderTextureCubeInternal(dimension: TextureDimension, size: number, format: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean): WebGLInternalTex {\r\n        let useSRGBExt = false;\r\n\r\n        generateMipmap = generateMipmap && this.supportGenerateMipmap(format);\r\n\r\n        let gammaCorrection = 1.0;\r\n        // todo 非 srgb framebuffer 只能渲染 linear, 目前不支持手动矫正\r\n        // if (!useSRGBExt && sRGB) {\r\n        //     gammaCorrection = 2.2;\r\n        // }\r\n\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, size, size, 1, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glRenderTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n        let internalFormat = internalTex.internalFormat;\r\n        let glFormat = internalTex.format;\r\n        let type = internalTex.type;\r\n\r\n        let gl = internalTex._gl;\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ]\r\n\r\n        this._engine._bindTexture(internalTex.target, internalTex.resource);\r\n\r\n        for (let index = 0; index < cubeFace.length; index++) {\r\n            let target = cubeFace[index];\r\n            gl.texImage2D(target, 0, internalFormat, size, size, 0, glFormat, type, null);\r\n        }\r\n        this._engine._bindTexture(internalTex.target, null);\r\n        //internalTex.gpuMemory = this.getGLtexMemory(internalTex);\r\n        if (format == RenderTargetFormat.DEPTH_16 || format == RenderTargetFormat.DEPTH_32 || format == RenderTargetFormat.DEPTHSTENCIL_24_8) {\r\n            internalTex.filterMode = FilterMode.Point;\r\n        }\r\n\r\n        return internalTex;\r\n    }\r\n\r\n    createRenderTargetInternal(width: number, height: number, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean, multiSamples: number): WebGLInternalRT {\r\n        multiSamples = 1;\r\n\r\n        let texture = this.createRenderTextureInternal(TextureDimension.Tex2D, width, height, colorFormat, generateMipmap, sRGB);\r\n\r\n        let renderTarget = new WebGLInternalRT(this._engine, colorFormat, depthStencilFormat, false, texture.mipmap, multiSamples);\r\n        renderTarget.gpuMemory = this.getGLRTTexMemory(width, height, colorFormat, depthStencilFormat, generateMipmap, multiSamples, false);\r\n        renderTarget.colorFormat = colorFormat;\r\n        renderTarget.depthStencilFormat = depthStencilFormat;\r\n        renderTarget._textures.push(texture);\r\n\r\n        let framebuffer = renderTarget._framebuffer;\r\n\r\n        let gl = <WebGLRenderingContext>renderTarget._gl;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        // color\r\n        let colorAttachment = this.glRenderTargetAttachment(colorFormat);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, colorAttachment, gl.TEXTURE_2D, texture.resource, 0);\r\n        // depth\r\n        let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n        if (depthBufferParam) {\r\n            let depthbuffer = this.createRenderbuffer(width, height, depthBufferParam.internalFormat, renderTarget._samples);\r\n            renderTarget._depthbuffer = depthbuffer;\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n\r\n        return renderTarget;\r\n    }\r\n\r\n    createRenderTargetCubeInternal(size: number, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean, multiSamples: number): WebGLInternalRT {\r\n        multiSamples = 1;\r\n\r\n        // let texture = this.createRenderTextureInternal(dimension, size, size, colorFormat, generateMipmap, sRGB);\r\n        let texture = this.createRenderTextureCubeInternal(TextureDimension.Cube, size, colorFormat, generateMipmap, sRGB);\r\n\r\n        let renderTarget = new WebGLInternalRT(this._engine, colorFormat, depthStencilFormat, true, texture.mipmap, multiSamples);\r\n        renderTarget.gpuMemory = this.getGLRTTexMemory(size, size, colorFormat, depthStencilFormat, generateMipmap, multiSamples, true);\r\n        renderTarget._textures.push(texture);\r\n\r\n        let framebuffer = renderTarget._framebuffer;\r\n\r\n        let gl = <WebGLRenderingContext>renderTarget._gl;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n        let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n        if (depthBufferParam) {\r\n            let depthbuffer = this.createRenderbuffer(size, size, depthBufferParam.internalFormat, renderTarget._samples);\r\n            renderTarget._depthbuffer = depthbuffer;\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n\r\n        return renderTarget;\r\n    }\r\n\r\n    createRenderbuffer(width: number, height: number, internalFormat: number, samples: number) {\r\n\r\n        // todo  多个 gl\r\n        let gl = this._gl;\r\n\r\n        let renderbuffer = gl.createRenderbuffer();\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);\r\n\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n\r\n        return renderbuffer;\r\n    }\r\n\r\n    protected createRenderTextureInternal(dimension: TextureDimension, width: number, height: number, format: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean): WebGLInternalTex {\r\n        let useSRGBExt = false;\r\n\r\n        generateMipmap = generateMipmap && this.supportGenerateMipmap(format);\r\n\r\n        let gammaCorrection = 1.0;\r\n        // if (!useSRGBExt && sRGB) {\r\n        //     // todo \r\n        //     // gammaCorrection = 2.2;\r\n        // }\r\n\r\n        // let dimension = TextureDimension.Tex2D;\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, width, height, 1, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glRenderTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n        let internalFormat = internalTex.internalFormat;\r\n        let glFormat = internalTex.format;\r\n        let type = internalTex.type;\r\n\r\n        let gl = internalTex._gl;\r\n\r\n        this._engine._bindTexture(internalTex.target, internalTex.resource);\r\n\r\n        gl.texImage2D(target, 0, internalFormat, width, height, 0, glFormat, type, null);\r\n        //internalTex.gpuMemory = this.getGLtexMemory(internalTex);\r\n        this._engine._bindTexture(internalTex.target, null);\r\n\r\n        if (format == RenderTargetFormat.DEPTH_16 || format == RenderTargetFormat.DEPTH_32 || format == RenderTargetFormat.DEPTHSTENCIL_24_8) {\r\n            internalTex.filterMode = FilterMode.Point;\r\n        }\r\n\r\n        return internalTex;\r\n    }\r\n\r\n    createRenderTargetDepthTexture(renderTarget: WebGLInternalRT, dimension: TextureDimension, width: number, height: number): WebGLInternalTex {\r\n        let gl = renderTarget._gl;\r\n\r\n        if (renderTarget.depthStencilFormat == RenderTargetFormat.None) {\r\n            return null;\r\n        }\r\n\r\n        // delete depth buffer\r\n        let depthbuffer = renderTarget._depthbuffer;\r\n        depthbuffer && gl.deleteRenderbuffer(depthbuffer);\r\n        renderTarget._depthbuffer = null;\r\n\r\n        // create depth texture\r\n        let format = renderTarget.depthStencilFormat;\r\n        let mipmap = renderTarget._generateMipmap;\r\n        let sRGB = renderTarget.isSRGB;\r\n\r\n        // delete old tex\r\n        if (renderTarget._depthTexture) {\r\n            gl.deleteTexture(renderTarget._depthTexture);\r\n        }\r\n        let texture = this.createRenderTextureInternal(dimension, width, height, format, mipmap, sRGB);\r\n        renderTarget._depthTexture = texture;\r\n\r\n        // set attachment\r\n        let attachment = this.glRenderTargetAttachment(renderTarget.depthStencilFormat);\r\n        let framebuffer = renderTarget._framebuffer;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture.resource, 0);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * @deprecated 请使用readRenderTargetPixelDataAsync函数代替\r\n     * @param renderTarget \r\n     * @param xOffset \r\n     * @param yOffset \r\n     * @param width \r\n     * @param height \r\n     * @param out \r\n     * @returns \r\n     */\r\n    readRenderTargetPixelData(renderTarget: WebGLInternalRT, xOffset: number, yOffset: number, width: number, height: number, out: ArrayBufferView): ArrayBufferView {\r\n\r\n        let gl = renderTarget._gl;\r\n\r\n        this.bindRenderTarget(renderTarget);\r\n\r\n        let frameState = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;\r\n\r\n        if (!frameState) {\r\n            this.unbindRenderTarget(renderTarget);\r\n            return null;\r\n        }\r\n        switch (renderTarget.colorFormat) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGB, gl.UNSIGNED_BYTE, out);\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, out);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGB, gl.FLOAT, out);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGBA, gl.FLOAT, out);\r\n                break;\r\n            case RenderTargetFormat.R32G32B32:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGB, gl.FLOAT, out);\r\n                break;\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                gl.readPixels(xOffset, yOffset, width, height, gl.RGBA, gl.FLOAT, out);\r\n                break;\r\n        }\r\n        this.unbindRenderTarget(renderTarget);\r\n        return out;\r\n    }\r\n\r\n    readRenderTargetPixelDataAsync(renderTarget: WebGLInternalRT, xOffset: number, yOffset: number, width: number, height: number, out: ArrayBufferView): Promise<ArrayBufferView> { //兼容WGSL\r\n        return Promise.resolve(this.readRenderTargetPixelData(renderTarget, xOffset, yOffset, width, height, out));\r\n    }\r\n\r\n    updateVideoTexture(texture: WebGLInternalTex, video: HTMLVideoElement, premultiplyAlpha: boolean, invertY: boolean): void {\r\n\r\n        let gl = texture._gl;\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        // todo 用 sub 会慢\r\n        //gl.texSubImage2D(target, 0, 0, 0, format, type, video);\r\n        gl.texImage2D(target, 0, internalFormat, format, type, video);\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    getRenderTextureData(internalTex: WebGLInternalRT, x: number, y: number, width: number, height: number): ArrayBufferView {\r\n        if (internalTex.colorFormat == RenderTargetFormat.None)\r\n            return null;\r\n        let gl = internalTex._gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, internalTex._framebuffer);\r\n        var canRead: boolean = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE);\r\n        if (!canRead) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n            return null;\r\n        }\r\n        let size = width * height;\r\n        let format, type;\r\n        var pixels;\r\n        switch (internalTex.colorFormat) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                format = gl.RGB;\r\n                type = gl.UNSIGNED_BYTE;\r\n                pixels = new Uint8Array(size * 3);\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                format = gl.RGBA;\r\n                type = gl.UNSIGNED_BYTE;\r\n                pixels = new Uint8Array(size * 4);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16:\r\n                format = gl.RGB;\r\n                type = gl.UNSIGNED_SHORT_4_4_4_4;\r\n                pixels = new Uint16Array(size * 3);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                format = gl.RGBA;\r\n                type = gl.UNSIGNED_SHORT_4_4_4_4;\r\n                pixels = new Uint16Array(size * 4);\r\n                break;\r\n            case RenderTargetFormat.R32G32B32:\r\n                format = gl.RGB;\r\n                type = gl.FLOAT;\r\n                pixels = new Float32Array(size * 3);\r\n                break;\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                format = gl.RGBA;\r\n                type = gl.FLOAT;\r\n                pixels = new Float32Array(size * 4);\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n        gl.readPixels(x, y, width, height, format, type, pixels);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        return pixels;\r\n    }\r\n\r\n}","import { GLTextureContext } from \"./GLTextureContext\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { WebGLInternalTex } from \"./WebGLInternalTex\";\r\nimport { WebGLInternalRT } from \"./WebGLInternalRT\";\r\nimport { InternalTexture } from \"../../../RenderDriver/DriverDesign/RenderDevice/InternalTexture\";\r\nimport { HDRTextureInfo } from \"../../../RenderEngine/HDRTextureInfo\";\r\nimport { KTXTextureInfo } from \"../../../RenderEngine/KTXTextureInfo\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\r\nimport { TextureDimension } from \"../../../RenderEngine/RenderEnum/TextureDimension\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { ITextureContext } from \"../../DriverDesign/RenderDevice/ITextureContext\";\r\n\r\n/**\r\n * 将继承修改为类似 WebGLRenderingContextBase, WebGLRenderingContextOverloads 多继承 ?\r\n */\r\nexport class GL2TextureContext extends GLTextureContext implements ITextureContext {\r\n\r\n    declare protected _gl: WebGL2RenderingContext;\r\n\r\n    constructor(engine: WebGLEngine) {\r\n        super(engine);\r\n    }\r\n\r\n    protected getTarget(dimension: TextureDimension): number {\r\n        let target: number = -1;\r\n        switch (dimension) {\r\n            case TextureDimension.Cube:\r\n                target = this._gl.TEXTURE_CUBE_MAP;\r\n                break;\r\n            case TextureDimension.Tex2D:\r\n                target = this._gl.TEXTURE_2D;\r\n                break;\r\n            case TextureDimension.Texture2DArray:\r\n                target = this._gl.TEXTURE_2D_ARRAY;\r\n                break;\r\n            case TextureDimension.Tex3D:\r\n                target = this._gl.TEXTURE_3D;\r\n                break;\r\n            default:\r\n                throw \"Unknow Texture Target\";\r\n        }\r\n        return target;\r\n    }\r\n\r\n    glTextureParam(format: TextureFormat, useSRGB: boolean) {\r\n        let gl = this._gl;\r\n        this._glParam.internalFormat = null;\r\n        this._glParam.format = null;\r\n        this._glParam.type = null;\r\n        switch (format) {\r\n            case TextureFormat.R8G8B8:\r\n                this._glParam.internalFormat = useSRGB ? gl.SRGB8 : gl.RGB8;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                this._glParam.internalFormat = useSRGB ? gl.SRGB8_ALPHA8 : gl.RGBA8;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                this._glParam.internalFormat = gl.RGB565;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.UNSIGNED_SHORT_5_6_5;\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                this._glParam.internalFormat = gl.RGBA32F;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n                this._glParam.internalFormat = gl.RGB32F;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case TextureFormat.R16G16B16:\r\n                this._glParam.internalFormat = gl.RGB16F;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.HALF_FLOAT;\r\n                break;\r\n            case TextureFormat.R16G16B16A16:\r\n                this._glParam.internalFormat = gl.RGBA16F;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.HALF_FLOAT;\r\n                break;\r\n            case TextureFormat.DXT1:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n                // this._glParam.format = gl.RGBA;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.DXT3:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                this._glParam.internalFormat = useSRGB ? this._compressdTextureS3tc_srgb.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : this._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                this._glParam.internalFormat = this._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGBA:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGB:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGB8_ETC2;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_ETC2;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2SRGB_Alpha8:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ETC2RGB_Alpha1:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n                break;\r\n            case TextureFormat.ETC2SRGB_Alpha1:\r\n                this._glParam.internalFormat = this._compressedTextureETC.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n                break;\r\n            case TextureFormat.ASTC4x4:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC6x6:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC8x8:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC10x10:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC12x12:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break\r\n            case TextureFormat.ASTC4x4SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC6x6SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC8x8SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC10x10SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case TextureFormat.ASTC12x12SRGB:\r\n                this._glParam.internalFormat = this._compressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;\r\n                // this._glParam.format = this._glParam.internalFormat;\r\n                // this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            default:\r\n                throw \"Unknown Texture Format.\";\r\n        }\r\n\r\n        return this._glParam;\r\n    }\r\n\r\n    glRenderBufferParam(format: RenderTargetFormat, useSRGB: boolean): { internalFormat: number; attachment: number; } {\r\n        let gl = this._gl;\r\n        switch (format) {\r\n            case RenderTargetFormat.DEPTH_16:\r\n                return { internalFormat: gl.DEPTH_COMPONENT16, attachment: gl.DEPTH_ATTACHMENT };\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                return { internalFormat: gl.DEPTH24_STENCIL8, attachment: gl.DEPTH_STENCIL_ATTACHMENT };\r\n            case RenderTargetFormat.DEPTH_32:\r\n                return { internalFormat: gl.DEPTH_COMPONENT32F, attachment: gl.DEPTH_ATTACHMENT };\r\n            case RenderTargetFormat.STENCIL_8:\r\n                return { internalFormat: gl.STENCIL_INDEX8, attachment: gl.STENCIL_ATTACHMENT };\r\n            case RenderTargetFormat.R8G8B8:\r\n                return { internalFormat: useSRGB ? gl.SRGB8 : gl.RGB8, attachment: gl.COLOR_ATTACHMENT0 };\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                return { internalFormat: useSRGB ? gl.SRGB8_ALPHA8 : gl.RGBA8, attachment: gl.COLOR_ATTACHMENT0 };\r\n            case RenderTargetFormat.R16G16B16:\r\n                return { internalFormat: gl.RGB16F, attachment: gl.COLOR_ATTACHMENT0 };\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                return { internalFormat: gl.RGBA16F, attachment: gl.COLOR_ATTACHMENT0 };\r\n            case RenderTargetFormat.R32G32B32:\r\n                return { internalFormat: gl.RGB32F, attachment: gl.COLOR_ATTACHMENT0 };\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                return { internalFormat: gl.RGBA32F, attachment: gl.COLOR_ATTACHMENT0 };\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    glRenderTextureParam(format: RenderTargetFormat, useSRGB: boolean) {\r\n        let gl = this._gl;\r\n        this._glParam.internalFormat = null;\r\n        this._glParam.format = null;\r\n        this._glParam.type = null;\r\n\r\n        switch (format) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                this._glParam.internalFormat = useSRGB ? gl.SRGB8 : gl.RGB8;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                this._glParam.internalFormat = useSRGB ? gl.SRGB8_ALPHA8 : gl.RGBA8;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.UNSIGNED_BYTE;\r\n                break;\r\n            case RenderTargetFormat.R16G16B16:\r\n                this._glParam.internalFormat = gl.RGB16F;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.HALF_FLOAT;\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                this._glParam.internalFormat = gl.RGBA16F;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.HALF_FLOAT;\r\n                break;\r\n            case RenderTargetFormat.R32G32B32:\r\n                this._glParam.internalFormat = gl.RGB32F;\r\n                this._glParam.format = gl.RGB;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case RenderTargetFormat.R32G32B32A32:\r\n                this._glParam.internalFormat = gl.RGBA32F;\r\n                this._glParam.format = gl.RGBA;\r\n                this._glParam.type = gl.FLOAT;\r\n                break;\r\n            case RenderTargetFormat.DEPTH_16:\r\n                this._glParam.internalFormat = gl.DEPTH_COMPONENT16;\r\n                this._glParam.format = gl.DEPTH_COMPONENT;\r\n                this._glParam.type = gl.UNSIGNED_INT;\r\n                break;\r\n            case RenderTargetFormat.DEPTHSTENCIL_24_8:\r\n                this._glParam.internalFormat = gl.DEPTH24_STENCIL8;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_INT_24_8;\r\n                break;\r\n            case RenderTargetFormat.DEPTH_32:\r\n                this._glParam.internalFormat = gl.DEPTH_COMPONENT32F;\r\n                this._glParam.format = this._glParam.internalFormat;\r\n                this._glParam.type = gl.UNSIGNED_INT;\r\n                break;\r\n            case RenderTargetFormat.STENCIL_8:\r\n                break;\r\n            default:\r\n                throw \"depth texture format wrong.\"\r\n        }\r\n\r\n        return this._glParam;\r\n    }\r\n\r\n    getGLtexMemory(tex: WebGLInternalTex, depth: number = 1): number {\r\n        let gl = this._gl;\r\n        let channels = 0;\r\n        let singlebyte = 0;\r\n        let bytelength = 0;\r\n        switch (tex.internalFormat) {\r\n            case gl.SRGB8:\r\n            case gl.RGB8:\r\n            case gl.RGB565:\r\n            case gl.RGB32F:\r\n            case gl.RGB16F:\r\n                channels = 3;\r\n                break;\r\n            case gl.SRGB8_ALPHA8:\r\n            case gl.RGBA8:\r\n            case gl.RGBA32F:\r\n            case gl.RGBA16F:\r\n                channels = 4;\r\n                break;\r\n            default:\r\n                channels = 0;\r\n                break;\r\n        }\r\n        switch (tex.type) {\r\n            case gl.UNSIGNED_BYTE:\r\n                singlebyte = 1;\r\n                break;\r\n            case gl.UNSIGNED_SHORT_5_6_5:\r\n                singlebyte = 2 / 3;\r\n                break;\r\n            case gl.FLOAT:\r\n                singlebyte = 4;\r\n                break;\r\n            case gl.HALF_FLOAT:\r\n                singlebyte = 2;\r\n                break;\r\n            default:\r\n                singlebyte = 0;\r\n                break;\r\n        }\r\n        bytelength = channels * singlebyte * tex.width * tex.height;\r\n        if (tex.mipmap) {\r\n            bytelength *= 1.333;\r\n        }\r\n        if (tex.target == gl.TEXTURE_CUBE_MAP)\r\n            bytelength *= 6;\r\n        else if (tex.target == gl.TEXTURE_2D)\r\n            bytelength *= 1;\r\n        else if (tex.target == gl.TEXTURE_2D_ARRAY)\r\n            bytelength *= depth;\r\n        return bytelength;\r\n    }\r\n\r\n    // todo webgl2 srgb 判断\r\n    supportSRGB(format: TextureFormat | RenderTargetFormat, mipmap: boolean): boolean {\r\n        switch (format) {\r\n            case TextureFormat.R8G8B8:\r\n                return this._engine.getCapable(RenderCapable.Texture_SRGB) && !mipmap;\r\n            case TextureFormat.R8G8B8A8:\r\n                return this._engine.getCapable(RenderCapable.Texture_SRGB);\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT3:\r\n            case TextureFormat.DXT5:\r\n                // todo  验证 srgb format 和 mipmap webgl1 兼容问题\r\n                return this._engine.getCapable(RenderCapable.COMPRESS_TEXTURE_S3TC_SRGB) && !mipmap;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    setTextureImageData(texture: WebGLInternalTex, source: HTMLImageElement | HTMLCanvasElement | ImageBitmap, premultiplyAlpha: boolean, invertY: boolean) {\r\n        if (texture.width != source.width || texture.height != source.height) {\r\n            // todo ?\r\n            console.warn(\"setTextureImageData: size not match\");\r\n        }\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texStorage2D(target, mipmapCount, internalFormat, width, height);\r\n        gl.texSubImage2D(target, 0, 0, 0, width, height, format, type, source);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setTextureSubImageData(texture: WebGLInternalTex, source: HTMLImageElement | HTMLCanvasElement | ImageBitmap, x: number, y: number, premultiplyAlpha: boolean, invertY: boolean) {\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        //gl.texStorage2D(target, mipmapCount, internalFormat, source.width, source.height);\r\n        gl.texSubImage2D(target, 0, x, y, source.width, source.height, format, type, source);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setTexturePixelsData(texture: WebGLInternalTex, source: ArrayBufferView, premultiplyAlpha: boolean, invertY: boolean) {\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        gl.texStorage2D(target, mipmapCount, internalFormat, width, height);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        if (source) {\r\n            gl.texSubImage2D(target, 0, 0, 0, width, height, format, type, source);\r\n            if (texture.mipmap) {\r\n                gl.generateMipmap(texture.target);\r\n            }\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    createTexture3DInternal(dimension: TextureDimension, width: number, height: number, depth: number, format: TextureFormat, generateMipmap: boolean, sRGB: boolean, premultipliedAlpha: boolean): InternalTexture {\r\n        // todo  一些format 不支持自动生成mipmap\r\n\r\n        // todo  这个判断, 若纹理本身格式不支持？\r\n        let useSRGBExt = this.isSRGBFormat(format) || (sRGB && this.supportSRGB(format, generateMipmap));\r\n        if (premultipliedAlpha) {//预乘法和SRGB同时开启，会有颜色白边问题\r\n            useSRGBExt = false;\r\n        }\r\n        let gammaCorrection = 1.0;\r\n        if (!useSRGBExt && sRGB) {\r\n            gammaCorrection = 2.2;\r\n        }\r\n\r\n        // let dimension = TextureDimension.Tex2D;\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, width, height, depth, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n        return internalTex;\r\n    }\r\n\r\n    setTexture3DImageData(texture: WebGLInternalTex, sources: HTMLImageElement[] | HTMLCanvasElement[] | ImageBitmap[], depth: number, premultiplyAlpha: boolean, invertY: boolean) {\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texStorage3D(target, mipmapCount, internalFormat, width, height, depth);\r\n        texture.gpuMemory = this.getGLtexMemory(texture, depth);\r\n        for (let index = 0; index < depth; index++) {\r\n            gl.texSubImage3D(target, 0, 0, 0, index, width, height, 1, format, type, sources[index]);\r\n        }\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setTexture3DPixelsData(texture: WebGLInternalTex, source: ArrayBufferView, depth: number, premultiplyAlpha: boolean, invertY: boolean) {\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        gl.texStorage3D(target, mipmapCount, internalFormat, width, height, depth);\r\n        texture.gpuMemory = this.getGLtexMemory(texture, depth);\r\n        if (source) {\r\n            gl.texSubImage3D(target, 0, 0, 0, 0, width, height, depth, format, type, source);\r\n            if (texture.mipmap) {\r\n                gl.generateMipmap(texture.target);\r\n            }\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTexture3DSubPixelsData(texture: WebGLInternalTex, source: ArrayBufferView, mipmapLevel: number, generateMipmap: boolean, xOffset: number, yOffset: number, zOffset: number, width: number, height: number, depth: number, premultiplyAlpha: boolean, invertY: boolean) {\r\n        generateMipmap = generateMipmap && mipmapLevel == 0;\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texSubImage3D(target, mipmapLevel, xOffset, yOffset, zOffset, width, height, depth, format, type, source);\r\n\r\n        if (texture.mipmap && generateMipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureHDRData(texture: WebGLInternalTex, hdrInfo: HDRTextureInfo): void {\r\n        let sourceData = hdrInfo.readScanLine();\r\n\r\n        this.setTexturePixelsData(texture, sourceData, false, false);\r\n    }\r\n\r\n    setTextureKTXData(texture: WebGLInternalTex, ktxInfo: KTXTextureInfo) {\r\n\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let mipmapCount = texture.mipmapCount;\r\n        // todo texture size \r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let source = ktxInfo.source;\r\n        let compressed = ktxInfo.compress;\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        let gl = this._gl;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        if (!compressed) {\r\n            gl.texStorage2D(target, ktxInfo.mipmapCount, internalFormat, width, height);\r\n        }\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let dataOffset = ktxInfo.headerOffset + ktxInfo.bytesOfKeyValueData;\r\n        let memory = 0;\r\n        for (let index = 0; index < ktxInfo.mipmapCount; index++) {\r\n\r\n            let imageSize = new Int32Array(source, dataOffset, 1)[0];\r\n\r\n            dataOffset += 4;\r\n\r\n            if (compressed) {\r\n                let sourceData = new Uint8Array(source, dataOffset, imageSize);\r\n                gl.compressedTexImage2D(target, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                memory += sourceData.length;\r\n            }\r\n            else {\r\n                let pixelParams = this.getFormatPixelsParams(ktxInfo.format);\r\n                let typedSize = imageSize / pixelParams.typedSize;\r\n                let sourceData = new pixelParams.dataTypedCons(source, dataOffset, typedSize);\r\n                gl.texSubImage2D(target, index, 0, 0, mipmapWidth, mipmapHeight, format, type, sourceData);\r\n                memory += sourceData.length;\r\n            }\r\n\r\n            dataOffset += imageSize;\r\n            dataOffset += 3 - ((imageSize + 3) % 4);\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n\r\n        }\r\n        this._engine._bindTexture(texture.target, null);\r\n        texture.gpuMemory = memory;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setCubeImageData(texture: WebGLInternalTex, sources: (HTMLImageElement | HTMLCanvasElement | ImageBitmap)[], premultiplyAlpha: boolean, invertY: boolean): void {\r\n        let gl = this._gl;\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ]\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        gl.texStorage2D(target, mipmapCount, internalFormat, width, height);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        for (let index = 0; index < cubeFace.length; index++) {\r\n            let t = cubeFace[index];\r\n            // gl.texSubImage2D(t, 0, 0, 0, format, type, sources[index]);\r\n            gl.texSubImage2D(t, 0, 0, 0, format, type, sources[index]);\r\n        }\r\n\r\n        if (texture.mipmap) {\r\n            gl.generateMipmap(texture.target);\r\n        }\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n\r\n    setCubePixelsData(texture: WebGLInternalTex, source: ArrayBufferView[], premultiplyAlpha: boolean, invertY: boolean): void {\r\n        let gl = this._gl;\r\n\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n        ];\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n        let mipmapCount = texture.mipmapCount;\r\n\r\n        let fourSize = width % 4 == 0;\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n        gl.texStorage2D(target, mipmapCount, internalFormat, width, height);\r\n        if (source) {\r\n            for (let index = 0; index < cubeFace.length; index++) {\r\n                let t = cubeFace[index];\r\n                gl.texSubImage2D(t, 0, 0, 0, width, height, format, type, source[index]);\r\n            }\r\n            if (texture.mipmap) {\r\n                gl.generateMipmap(texture.target);\r\n            }\r\n        }\r\n\r\n\r\n        this._engine._bindTexture(texture.target, null);\r\n        texture.gpuMemory = this.getGLtexMemory(texture);\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setCubeKTXData(texture: WebGLInternalTex, ktxInfo: KTXTextureInfo): void {\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let gl = this._gl;\r\n\r\n        // ktx 标准顺序\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n        ]\r\n\r\n\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let mipmapCount = texture.mipmapCount;\r\n        // todo texture size 与 ddsInfo size\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        texture.maxMipmapLevel = ktxInfo.mipmapCount - 1;\r\n\r\n        let source = ktxInfo.source;\r\n        let compressed = ktxInfo.compress;\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let dataOffset = ktxInfo.headerOffset + ktxInfo.bytesOfKeyValueData;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        if (!compressed) {\r\n            gl.texStorage2D(target, ktxInfo.mipmapCount, internalFormat, width, height);\r\n        }\r\n        let memory = 0;\r\n        for (let index = 0; index < ktxInfo.mipmapCount; index++) {\r\n\r\n            let imageSize = new Int32Array(source, dataOffset, 1)[0];\r\n\r\n            dataOffset += 4;\r\n\r\n            for (let face = 0; face < 6; face++) {\r\n                let t = cubeFace[face];\r\n\r\n                if (compressed) {\r\n                    let sourceData = new Uint8Array(source, dataOffset, imageSize);\r\n                    gl.compressedTexImage2D(t, index, internalFormat, mipmapWidth, mipmapHeight, 0, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                }\r\n                else {\r\n                    let pixelParams = this.getFormatPixelsParams(ktxInfo.format);\r\n                    let typedSize = imageSize / pixelParams.typedSize;\r\n                    let sourceData = new pixelParams.dataTypedCons(source, dataOffset, typedSize);\r\n                    gl.texSubImage2D(t, index, 0, 0, mipmapWidth, mipmapHeight, format, type, sourceData);\r\n                    memory += sourceData.byteLength;\r\n                }\r\n                dataOffset += imageSize;\r\n                dataOffset += 3 - ((imageSize + 3) % 4);\r\n            }\r\n\r\n            mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n            mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n        }\r\n        texture.gpuMemory = memory;\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n\r\n    }\r\n\r\n\r\n    //TODO miner\r\n    getCubeKTXRGBMData(texture: WebGLInternalTex, ktxInfo: KTXTextureInfo) {\r\n        let rightFaceData = [];\r\n        let leftFaceData = [];\r\n        let upFaceData = [];\r\n        let downFaceData = [];\r\n        let backFaceData = [];\r\n        let frontFaceData = [];\r\n        //todo?\r\n        let premultiplyAlpha = false;\r\n        let invertY = false;\r\n\r\n        let gl = this._gl;\r\n\r\n        // ktx 标准顺序\r\n        const cubeFace = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, // right\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X, // left\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y, // up\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, // down\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z, // back\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, // front\r\n        ]\r\n\r\n\r\n\r\n        let target = texture.target;\r\n        let internalFormat = texture.internalFormat;\r\n        let format = texture.format;\r\n        let type = texture.type;\r\n        let mipmapCount = texture.mipmapCount;\r\n        // todo texture size 与 ddsInfo size\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        texture.maxMipmapLevel = mipmapCount - 1;\r\n\r\n        let source = ktxInfo.source;\r\n        let compressed = ktxInfo.compress;\r\n\r\n        let mipmapWidth = width;\r\n        let mipmapHeight = height;\r\n        let dataOffset = ktxInfo.headerOffset + ktxInfo.bytesOfKeyValueData;\r\n\r\n        let fourSize = width % 4 == 0 && height % 4 == 0;\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        this._engine._bindTexture(texture.target, texture.resource);\r\n\r\n        if (!compressed) {\r\n            gl.texStorage2D(target, ktxInfo.mipmapCount, internalFormat, width, height);\r\n        }\r\n        let memory = 0;\r\n        for (let index = 0; index < ktxInfo.mipmapCount; index++) {\r\n\r\n            let imageSize = new Int32Array(source, dataOffset, 1)[0];\r\n\r\n            dataOffset += 4;\r\n\r\n            for (let face = 0; face < 6; face++) {\r\n                let t = cubeFace[face];\r\n                let pixelParams = this.getFormatPixelsParams(ktxInfo.format);\r\n                let typedSize = imageSize / pixelParams.typedSize;\r\n                let sourceData = new pixelParams.dataTypedCons(source, dataOffset, typedSize);\r\n                gl.texSubImage2D(t, index, 0, 0, mipmapWidth, mipmapHeight, format, type, sourceData);\r\n                memory += sourceData.byteLength;\r\n            }\r\n            dataOffset += imageSize;\r\n            dataOffset += 3 - ((imageSize + 3) % 4);\r\n        }\r\n\r\n        mipmapWidth = Math.max(1, mipmapWidth * 0.5);\r\n        mipmapHeight = Math.max(1, mipmapHeight * 0.5);\r\n\r\n        texture.gpuMemory = memory;\r\n        this._engine._bindTexture(texture.target, null);\r\n\r\n        premultiplyAlpha && gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        invertY && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        fourSize || gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n    }\r\n\r\n    setTextureCompareMode(texture: WebGLInternalTex, compareMode: TextureCompareMode): TextureCompareMode {\r\n        let gl = this._gl;\r\n        switch (compareMode) {\r\n            case TextureCompareMode.LEQUAL:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.GEQUAL:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.GEQUAL);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.LESS:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.LESS);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.GREATER:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.GREATER);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.EQUAL:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.EQUAL);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.NOTEQUAL:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.NOTEQUAL);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.ALWAYS:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.ALWAYS);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.NEVER:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.NEVER);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n                break;\r\n            case TextureCompareMode.None:\r\n            default:\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);\r\n                texture._setTexParameteri(gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n                break;\r\n        }\r\n        return compareMode;\r\n\r\n    }\r\n\r\n    createRenderbuffer(width: number, height: number, internalFormat: number, samples: number): WebGLRenderbuffer {\r\n        // todo  多个 gl\r\n        let gl = this._gl;\r\n\r\n        let renderbuffer = gl.createRenderbuffer();\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n\r\n        if (samples > 1) {\r\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, internalFormat, width, height);\r\n        }\r\n        else {\r\n            gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);\r\n        }\r\n\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n\r\n        return renderbuffer;\r\n    }\r\n\r\n    protected createRenderTextureInternal(dimension: TextureDimension, width: number, height: number, format: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean): WebGLInternalTex {\r\n\r\n        generateMipmap = generateMipmap && this.supportGenerateMipmap(format);\r\n\r\n        let useSRGBExt = this.isSRGBFormat(format) || (sRGB && this.supportSRGB(format, generateMipmap));\r\n\r\n        let gammaCorrection = 1.0;\r\n        // todo 非 srgb framebuffer 只能渲染 linear, 目前不支持手动矫正\r\n        // if (!useSRGBExt && sRGB) {\r\n        //     gammaCorrection = 2.2;\r\n        // }\r\n\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, width, height, 1, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glRenderTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n        let internalFormat = internalTex.internalFormat;\r\n        let glFormat = internalTex.format;\r\n        let type = internalTex.type;\r\n\r\n        let gl = this._gl;\r\n\r\n        this._engine._bindTexture(internalTex.target, internalTex.resource);\r\n\r\n        gl.texStorage2D(target, internalTex.mipmapCount, internalFormat, width, height);\r\n\r\n        this._engine._bindTexture(internalTex.target, null);\r\n\r\n        if (format == RenderTargetFormat.DEPTH_16 || format == RenderTargetFormat.DEPTH_32 || format == RenderTargetFormat.DEPTHSTENCIL_24_8) {\r\n            internalTex.filterMode = FilterMode.Point;\r\n        }\r\n\r\n        return internalTex;\r\n    }\r\n\r\n    createRenderTargetInternal(width: number, height: number, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean, multiSamples: number): WebGLInternalRT {\r\n        let texture = this.createRenderTextureInternal(TextureDimension.Tex2D, width, height, colorFormat, generateMipmap, sRGB);\r\n\r\n        let renderTarget = new WebGLInternalRT(this._engine, colorFormat, depthStencilFormat, false, texture.mipmap, multiSamples);\r\n        renderTarget.gpuMemory = this.getGLRTTexMemory(width, height, colorFormat, depthStencilFormat, generateMipmap, multiSamples, false);\r\n        renderTarget._textures.push(texture);\r\n\r\n        let gl = <WebGLRenderingContext>renderTarget._gl;\r\n\r\n        if (renderTarget._samples > 1) {\r\n            let msaaFramebuffer = renderTarget._msaaFramebuffer;\r\n            let renderbufferParam = this.glRenderBufferParam(colorFormat, sRGB);\r\n            let msaaRenderbuffer = renderTarget._msaaRenderbuffer = this.createRenderbuffer(width, height, renderbufferParam.internalFormat, renderTarget._samples);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, msaaFramebuffer);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, renderbufferParam.attachment, gl.RENDERBUFFER, msaaRenderbuffer);\r\n            // depth\r\n            let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n            if (depthBufferParam) {\r\n                let depthbuffer = this.createRenderbuffer(width, height, depthBufferParam.internalFormat, renderTarget._samples);\r\n                renderTarget._depthbuffer = depthbuffer;\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n            }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n\r\n            let framebuffer = renderTarget._framebuffer;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n            // color\r\n            let colorAttachment = this.glRenderTargetAttachment(colorFormat);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, colorAttachment, gl.TEXTURE_2D, texture.resource, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        }\r\n        else {\r\n            let framebuffer = renderTarget._framebuffer;\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n            // color\r\n            let colorAttachment = this.glRenderTargetAttachment(colorFormat);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, colorAttachment, gl.TEXTURE_2D, texture.resource, 0);\r\n\r\n            // depth\r\n            let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n            if (depthBufferParam) {\r\n                let depthbuffer = this.createRenderbuffer(width, height, depthBufferParam.internalFormat, renderTarget._samples);\r\n                renderTarget._depthbuffer = depthbuffer;\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n            }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        }\r\n\r\n        return renderTarget;\r\n\r\n    }\r\n\r\n    createRenderTargetCubeInternal(size: number, colorFormat: RenderTargetFormat, depthStencilFormat: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean, multiSamples: number): WebGLInternalRT {\r\n        let texture = this.createRenderTextureCubeInternal(TextureDimension.Cube, size, colorFormat, generateMipmap, sRGB);\r\n\r\n        let renderTarget = new WebGLInternalRT(this._engine, colorFormat, depthStencilFormat, true, texture.mipmap, multiSamples);\r\n        renderTarget.gpuMemory = this.getGLRTTexMemory(size, size, colorFormat, depthStencilFormat, generateMipmap, multiSamples, true);\r\n        renderTarget.colorFormat = colorFormat;\r\n        renderTarget.depthStencilFormat = depthStencilFormat;\r\n        renderTarget._textures.push(texture);\r\n        renderTarget.isSRGB = sRGB;\r\n\r\n        let gl = <WebGLRenderingContext>renderTarget._gl;\r\n\r\n        if (renderTarget._samples > 1) {\r\n            let msaaFramebuffer = renderTarget._msaaFramebuffer;\r\n            let renderbufferParam = this.glRenderBufferParam(colorFormat, false);\r\n            let msaaRenderbuffer = renderTarget._msaaRenderbuffer = this.createRenderbuffer(size, size, renderbufferParam.internalFormat, renderTarget._samples);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, msaaFramebuffer);\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, renderbufferParam.attachment, gl.RENDERBUFFER, msaaRenderbuffer);\r\n            // depth\r\n            let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n            if (depthBufferParam) {\r\n                let depthbuffer = this.createRenderbuffer(size, size, depthBufferParam.internalFormat, renderTarget._samples);\r\n                renderTarget._depthbuffer = depthbuffer;\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n            }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        }\r\n        else {\r\n            let framebuffer = renderTarget._framebuffer;\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n            // depth\r\n            let depthBufferParam = this.glRenderBufferParam(depthStencilFormat, false);\r\n            if (depthBufferParam) {\r\n                let depthbuffer = this.createRenderbuffer(size, size, depthBufferParam.internalFormat, renderTarget._samples);\r\n                renderTarget._depthbuffer = depthbuffer;\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthBufferParam.attachment, gl.RENDERBUFFER, depthbuffer);\r\n            }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        }\r\n\r\n\r\n        return renderTarget;\r\n    }\r\n\r\n    createRenderTextureCubeInternal(dimension: TextureDimension, size: number, format: RenderTargetFormat, generateMipmap: boolean, sRGB: boolean): WebGLInternalTex {\r\n        generateMipmap = generateMipmap && this.supportGenerateMipmap(format);\r\n\r\n        let useSRGBExt = this.isSRGBFormat(format) || (sRGB && this.supportSRGB(format, generateMipmap));\r\n\r\n        let gammaCorrection = 1.0;\r\n        // todo 非 srgb framebuffer 只能渲染 linear, 目前不支持手动矫正\r\n        // if (!useSRGBExt && sRGB) {\r\n        //     gammaCorrection = 2.2;\r\n        // }\r\n\r\n        let target = this.getTarget(dimension);\r\n        let internalTex = new WebGLInternalTex(this._engine, target, size, size, 1, dimension, generateMipmap, useSRGBExt, gammaCorrection);\r\n\r\n        let glParam = this.glRenderTextureParam(format, useSRGBExt);\r\n\r\n        internalTex.internalFormat = glParam.internalFormat;\r\n        internalTex.format = glParam.format;\r\n        internalTex.type = glParam.type;\r\n\r\n\r\n        let internalFormat = internalTex.internalFormat;\r\n        let glFormat = internalTex.format;\r\n        let type = internalTex.type;\r\n\r\n        let gl = this._gl;\r\n\r\n        this._engine._bindTexture(internalTex.target, internalTex.resource);\r\n\r\n        gl.texStorage2D(target, internalTex.mipmapCount, internalFormat, size, size);\r\n\r\n        this._engine._bindTexture(internalTex.target, null);\r\n\r\n        return internalTex;\r\n\r\n    }\r\n\r\n\r\n    bindRenderTarget(renderTarget: WebGLInternalRT, faceIndex: number = 0): void {\r\n        this.currentActiveRT && this.unbindRenderTarget(this.currentActiveRT);\r\n        let gl = this._gl;\r\n\r\n        if (renderTarget._isCube) {\r\n            let framebuffer = renderTarget._framebuffer;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n            let texture = <WebGLInternalTex>renderTarget._textures[0];\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture.resource, 0);\r\n        }\r\n\r\n        if (renderTarget._samples > 1) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget._msaaFramebuffer);\r\n        }\r\n        else {\r\n            let framebuffer = renderTarget._framebuffer;\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        }\r\n        this.currentActiveRT = renderTarget;\r\n    }\r\n\r\n    unbindRenderTarget(renderTarget: WebGLInternalRT): void {\r\n        let gl = this._gl;\r\n        if (renderTarget && renderTarget._samples > 1) {\r\n\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, renderTarget._msaaFramebuffer);\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, renderTarget._framebuffer);\r\n\r\n            let texture = renderTarget._textures[0];\r\n\r\n            // todo 不用clear ?\r\n            // gl.clearBufferfv(gl.COLOR, 0, [0, 0, 0, 0]);\r\n            // gl.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);\r\n\r\n            // todo  blit mask\r\n            let biltMask = gl.COLOR_BUFFER_BIT;\r\n            if (renderTarget._depthTexture) {\r\n                biltMask |= gl.DEPTH_BUFFER_BIT;\r\n            }\r\n\r\n            gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, biltMask, gl.NEAREST);\r\n        }\r\n        if (renderTarget && renderTarget._generateMipmap) {\r\n            renderTarget._textures.forEach(tex => {\r\n                let target = (<WebGLInternalTex>tex).target;\r\n                this._engine._bindTexture(target, tex.resource);\r\n                gl.generateMipmap(target);\r\n                this._engine._bindTexture(target, null);\r\n            });\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, WebGLEngine._lastFrameBuffer_WebGLOBJ);\r\n        this.currentActiveRT = WebGLEngine._lastFrameBuffer;\r\n    }\r\n}","import { BufferTargetType, BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { GLObject } from \"./GLObject\";\r\n\r\n\r\nexport class GLBuffer extends GLObject {\r\n    //GLParams\r\n    _glBuffer: WebGLBuffer;\r\n    _glTarget: number;\r\n    _glUsage: number;\r\n    //Common Enum\r\n    _glTargetType: BufferTargetType;\r\n    _glBufferUsageType: BufferUsage;\r\n    //size\r\n    _byteLength: number = 0;\r\n\r\n    constructor(engine: WebGLEngine, targetType: BufferTargetType, bufferUsageType: BufferUsage) {\r\n        super(engine)\r\n        this._glTargetType = targetType;\r\n        this._glBufferUsageType = bufferUsageType;\r\n        this._getGLTarget(this._glTargetType);\r\n        this._getGLUsage(this._glBufferUsageType);\r\n        this._glBuffer = this._gl.createBuffer();\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_GPUBuffer, 1);\r\n    }\r\n\r\n    private _getGLUsage(usage: BufferUsage) {\r\n        switch (usage) {\r\n            case BufferUsage.Static:\r\n                this._glUsage = this._gl.STATIC_DRAW;\r\n                break;\r\n            case BufferUsage.Dynamic:\r\n                this._glUsage = this._gl.DYNAMIC_DRAW;\r\n                break;\r\n            case BufferUsage.Stream:\r\n                this._glUsage = this._gl.STREAM_DRAW;\r\n                break;\r\n            default:\r\n                console.error(\"usage is not standard\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _getGLTarget(target: BufferTargetType) {\r\n        switch (target) {\r\n            case BufferTargetType.ARRAY_BUFFER:\r\n                this._glTarget = this._gl.ARRAY_BUFFER\r\n                break;\r\n            case BufferTargetType.UNIFORM_BUFFER:\r\n                this._glTarget = (<WebGL2RenderingContext>this._gl).UNIFORM_BUFFER;\r\n                break;\r\n            case BufferTargetType.ELEMENT_ARRAY_BUFFER:\r\n                this._glTarget = this._gl.ELEMENT_ARRAY_BUFFER\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _memorychange(bytelength: number) {\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_GPUBuffer, -this._byteLength + bytelength);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.M_GPUMemory, -this._byteLength + bytelength);\r\n    }\r\n\r\n    bindBuffer(): boolean {\r\n        if (this._engine._getbindBuffer(this._glTargetType) != this) {\r\n            this._gl.bindBuffer(this._glTarget, this._glBuffer);\r\n            this._engine._setbindBuffer(this._glTargetType, this);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    unbindBuffer() {\r\n        if (this._engine._getbindBuffer(this._glTargetType) == this) {\r\n            this._gl.bindBuffer(this._glTarget, null);\r\n            this._engine._setbindBuffer(this._glTargetType, null);\r\n        }\r\n    }\r\n\r\n    orphanStorage() {\r\n        this.bindBuffer();\r\n        this.setDataLength(this._byteLength);\r\n    }\r\n\r\n    setDataLength(srcData: number): void {\r\n        let gl = this._gl;\r\n        this.bindBuffer();\r\n        this._memorychange(srcData);\r\n        this._byteLength = srcData;\r\n        gl.bufferData(this._glTarget, this._byteLength, this._glUsage);\r\n        this.unbindBuffer();\r\n    }\r\n\r\n\r\n\r\n\r\n    setData(srcData: ArrayBuffer | ArrayBufferView, offset: number): void {\r\n        let gl = this._gl;\r\n        this.bindBuffer();\r\n        gl.bufferSubData(this._glTarget, offset, <ArrayBufferView>srcData);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.C_GeometryBufferUploadCount, 1);\r\n        this.unbindBuffer();\r\n    }\r\n\r\n    setDataEx(srcData: ArrayBuffer | ArrayBufferView, offset: number, length: number): void {\r\n        let gl = this._gl;\r\n        this.bindBuffer();\r\n        gl.bufferSubData(this._glTarget, offset, srcData as ArrayBufferView, 0, length);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.C_GeometryBufferUploadCount, 1);\r\n        this.unbindBuffer();\r\n    }\r\n\r\n\r\n    bindBufferBase(glPointer: number) {\r\n        if (this._engine._getBindUBOBuffer(glPointer) != this) {\r\n            const gl = <WebGL2RenderingContext>this._gl;\r\n            gl.bindBufferBase(this._glTarget, glPointer, this._glBuffer);\r\n            this._engine._setBindUBOBuffer(glPointer, this);\r\n        }\r\n    }\r\n\r\n\r\n    bindBufferRange(glPointer: number, offset: number, byteCount: number) {\r\n        const gl = <WebGL2RenderingContext>this._gl;\r\n        gl.bindBufferRange(this._glTarget, glPointer, this._glBuffer, offset, byteCount);\r\n    }\r\n\r\n    resizeBuffer(dataLength: number) {\r\n        this.bindBuffer();\r\n        const gl = this._gl;\r\n        this._byteLength = dataLength;\r\n        gl.bufferData(this._glTarget, this._byteLength, this._glUsage);\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this._gl;\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_GPUBuffer, -1);\r\n        gl.deleteBuffer(this._glBuffer);\r\n        this._memorychange(0);\r\n        this._byteLength = 0;\r\n        this._engine = null;\r\n        this._glBuffer = null;\r\n        this._glTarget = null;\r\n        this._glUsage = null;\r\n        this._gl = null;\r\n\r\n    }\r\n}","import { RenderCapable } from \"../../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderParams } from \"../../../../RenderEngine/RenderEnum/RenderParams\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { WebGLExtension } from \"./GLEnum/WebGLExtension\";\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport class GLParams{\r\n    _engine: WebGLEngine;\r\n    _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n    _glParamsData:Map<RenderParams,number>;\r\n    constructor(engine: WebGLEngine){\r\n        this._engine = engine;\r\n        this._gl = this._engine.gl;\r\n        this._initParams();\r\n    }\r\n\r\n    private _initParams(){\r\n        const gl = this._gl;\r\n        this._glParamsData = new Map();\r\n        this._glParamsData.set(RenderParams.Max_Active_Texture_Count,gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS));\r\n        const maxVertexUniform:number = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\r\n        const maxFragUniform:number = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\r\n        this._glParamsData.set(RenderParams.Max_Uniform_Count,Math.min(maxVertexUniform,maxFragUniform));\r\n        this._glParamsData.set(RenderParams.MAX_Texture_Size,gl.getParameter(gl.MAX_TEXTURE_SIZE));\r\n        this._glParamsData.set(RenderParams.MAX_Texture_Image_Uint,gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\r\n        if(this._engine.getCapable(RenderCapable.Texture_anisotropic)){\r\n            const anisoExt = this._engine._supportCapatable.getExtension(WebGLExtension.EXT_texture_filter_anisotropic);\r\n            this._glParamsData.set(RenderParams.Max_AnisoLevel_Count,gl.getParameter(anisoExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\r\n        }\r\n        if(this._engine.isWebGL2)\r\n            this._glParamsData.set(RenderParams.SHADER_CAPAILITY_LEVEL,35);\r\n        else\r\n            this._glParamsData.set(RenderParams.SHADER_CAPAILITY_LEVEL,30);\r\n        this._glParamsData.set(RenderParams.FLOAT,gl.FLOAT);\r\n        this._glParamsData.set(RenderParams.UNSIGNED_BYTE,gl.UNSIGNED_BYTE);\r\n        this._glParamsData.set(RenderParams.UNSIGNED_SHORT,gl.UNSIGNED_SHORT);\r\n        this._glParamsData.set(RenderParams.BYTE,gl.BYTE);\r\n\r\n    }\r\n\r\n    getParams(params:RenderParams):number{\r\n        return this._glParamsData.get(params);\r\n    }\r\n}","\r\nimport { DrawType } from \"../../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { WebGLRenderGeometryElement } from \"../WebGLRenderGeometryElement\";\r\nimport { WebGLExtension } from \"./GLEnum/WebGLExtension\";\r\nimport { GLObject } from \"./GLObject\";\r\n\r\n//TODO\r\nexport class GLRenderDrawContext extends GLObject {\r\n    /**@internal */\r\n    private _angleInstancedArrays: any;\r\n\r\n    constructor(engine: WebGLEngine) {\r\n        super(engine);\r\n        if (!this._engine.isWebGL2) {\r\n            this._angleInstancedArrays = this._engine._supportCapatable.getExtension(WebGLExtension.ANGLE_instanced_arrays);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mode \r\n     * @returns \r\n     */\r\n    getMeshTopology(mode: MeshTopology): number {\r\n        switch (mode) {\r\n            case MeshTopology.Points:\r\n                return this._gl.POINTS;\r\n            case MeshTopology.Lines:\r\n                return this._gl.LINES;\r\n            case MeshTopology.LineLoop:\r\n                return this._gl.LINE_LOOP;\r\n            case MeshTopology.LineStrip:\r\n                return this._gl.LINE_STRIP;\r\n            case MeshTopology.Triangles:\r\n                return this._gl.TRIANGLES;\r\n            case MeshTopology.TriangleStrip:\r\n                return this._gl.TRIANGLE_STRIP;\r\n            case MeshTopology.TriangleFan:\r\n                return this._gl.TRIANGLE_FAN;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param type \r\n     * @returns \r\n     */\r\n    getIndexType(type: IndexFormat): number {\r\n        switch (type) {\r\n            case IndexFormat.UInt8:\r\n                return this._gl.UNSIGNED_BYTE;\r\n            case IndexFormat.UInt16:\r\n                return this._gl.UNSIGNED_SHORT;\r\n            case IndexFormat.UInt32:\r\n                return this._gl.UNSIGNED_INT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    drawElementsInstanced(mode: number, count: number, type: IndexFormat, offset: number, instanceCount: number): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).drawElementsInstanced(mode, count, type, offset, instanceCount);\r\n        else\r\n            this._angleInstancedArrays.drawElementsInstancedANGLE(mode, count, type, offset, instanceCount);\r\n\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_Instancing_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_TriangleCount, count / 3 * instanceCount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    drawArraysInstanced(mode: number, first: number, count: number, instanceCount: number): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).drawArraysInstanced(mode, first, count, instanceCount);\r\n        else\r\n            this._angleInstancedArrays.drawArraysInstancedANGLE(mode, first, count, instanceCount);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_Instancing_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_TriangleCount, (count - 2) * instanceCount);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mode \r\n     * @param first \r\n     * @param count \r\n     */\r\n    drawArrays(mode: number, first: number, count: number): void {\r\n        this._gl.drawArrays(mode, first, count);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_TriangleCount, (count - 2));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mode \r\n     * @param count \r\n     * @param type \r\n     * @param offset \r\n     */\r\n    drawElements(mode: number, count: number, type: IndexFormat, offset: number): void {\r\n        this._gl.drawElements(mode, count, type, offset);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_TriangleCount, count / 3);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mode \r\n     * @param count \r\n     * @param type \r\n     * @param offset \r\n     */\r\n    drawElements2DTemp(mode: MeshTopology, count: number, type: IndexFormat, offset: number): void {\r\n        mode = this.getMeshTopology(mode);\r\n        type = this.getIndexType(type);\r\n        this._gl.drawElements(mode, count, type, offset);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_DrawCallCount, 1);\r\n        this._engine._addStatisticsInfo(GPUEngineStatisticsInfo.C_TriangleCount, count / 3);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param geometryElement \r\n     */\r\n    drawGeometryElement(geometryElement: WebGLRenderGeometryElement): void {\r\n        geometryElement.bufferState.bind();\r\n        let element = geometryElement.drawParams.elements;\r\n        let length = geometryElement.drawParams.length;\r\n        switch (geometryElement.drawType) {\r\n            case DrawType.DrawArray:\r\n                for (let i = 0; i < length; i += 2) {\r\n                    this.drawArrays(geometryElement._glmode, element[i], element[i + 1]);\r\n                }\r\n                break;\r\n            case DrawType.DrawElement:\r\n                for (let i = 0; i < length; i += 2) {\r\n                    this.drawElements(geometryElement._glmode, element[i + 1], geometryElement._glindexFormat, element[i]);\r\n                }\r\n                break;\r\n            case DrawType.DrawArrayInstance:\r\n                for (let i = 0; i < length; i += 2) {\r\n                    this.drawArraysInstanced(geometryElement._glmode, element[i], element[i + 1], geometryElement.instanceCount);\r\n                }\r\n                break;\r\n            case DrawType.DrawElementInstance:\r\n                for (let i = 0; i < length; i += 2) {\r\n                    this.drawElementsInstanced(geometryElement._glmode, element[i + 1], geometryElement._glindexFormat, element[i], geometryElement.instanceCount);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","import { BlendEquationSeparate } from \"../../../../RenderEngine/RenderEnum/BlendEquationSeparate\";\r\nimport { BlendFactor } from \"../../../../RenderEngine/RenderEnum/BlendFactor\";\r\nimport { CompareFunction } from \"../../../../RenderEngine/RenderEnum/CompareFunction\";\r\nimport { CullMode } from \"../../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { StencilOperation } from \"../../../../RenderEngine/RenderEnum/StencilOperation\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\n\r\n\r\nexport class GLRenderState {\r\n    //Depth\r\n    /**@internal */\r\n    private _depthTest: boolean;\r\n    /**@internal */\r\n    private _depthMask: boolean;\r\n    /**@internal */\r\n    private _depthFunc: number;\r\n    //stencil\r\n    /**@internal */\r\n    private _stencilTest: boolean;\r\n    /**@internal */\r\n    private _stencilFunc: number;\r\n    /**@internal */\r\n    private _stencilMask: boolean;\r\n    /**@internal */\r\n    private _stencilRef: number\r\n    /**@internal */\r\n    private _stencilOp_fail: number;\r\n    /**@internal */\r\n    private _stencilOp_zfail: number;\r\n    /**@internal */\r\n    private _stencilOp_zpass: number;\r\n    //blender\r\n    /**@internal */\r\n    private _blend: boolean;\r\n    /**@internal */\r\n    private _blendEquation: number;\r\n    /**@internal */\r\n    private _blendEquationRGB: number;\r\n    /**@internal */\r\n    private _blendEquationAlpha: number;\r\n    /**@internal */\r\n    private _sFactor: number;\r\n    /**@internal */\r\n    private _dFactor: number;\r\n    /**@internal */\r\n    private _sFactorRGB: number;\r\n    /**@internal */\r\n    private _dFactorRGB: number;\r\n    /**@internal */\r\n    private _sFactorAlpha: number;\r\n    /**@internal */\r\n    private _dFactorAlpha: number;\r\n    //cull\r\n    /**@internal */\r\n    private _cullFace: boolean;\r\n    /**@internal */\r\n    private _frontFace: number;\r\n\r\n    /**@internal */\r\n    _engine: WebGLEngine;\r\n    /**@internal */\r\n    _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\n    /**\r\n     * intance glRenderState\r\n     * @param engine \r\n     */\r\n    constructor(engine: WebGLEngine) {\r\n        this._engine = engine;\r\n        this._gl = this._engine.gl;\r\n        // this._initState();\r\n    }\r\n\r\n    /**\r\n     * init\r\n     */\r\n    private _initState() {\r\n        //TODO:并不完全\r\n        // todo 默认值设置\r\n        this.setDepthFunc(CompareFunction.Less);\r\n        this.setBlendEquationSeparate(BlendEquationSeparate.ADD, BlendEquationSeparate.ADD);\r\n        this._blendEquation = BlendEquationSeparate.ADD;\r\n        this._sFactor = BlendFactor.One;\r\n        this._dFactor = BlendFactor.Zero;\r\n        this._sFactorAlpha = BlendFactor.One;\r\n        this._dFactorAlpha = BlendFactor.One;\r\n    }\r\n\r\n    /**\r\n     * get gl blend factor\r\n     * @param factor \r\n     * @returns \r\n     */\r\n    _getBlendFactor(factor: BlendFactor) {\r\n        const gl = this._gl;\r\n        switch (factor) {\r\n            case BlendFactor.Zero:\r\n                return gl.ZERO;\r\n            case BlendFactor.One:\r\n                return gl.ONE;\r\n            case BlendFactor.SourceColor:\r\n                return gl.SRC_COLOR;\r\n            case BlendFactor.OneMinusSourceColor:\r\n                return gl.ONE_MINUS_SRC_COLOR;\r\n            case BlendFactor.DestinationColor:\r\n                return gl.DST_COLOR;\r\n            case BlendFactor.OneMinusDestinationColor:\r\n                return gl.ONE_MINUS_DST_COLOR;\r\n            case BlendFactor.SourceAlpha:\r\n                return gl.SRC_ALPHA;\r\n            case BlendFactor.OneMinusSourceAlpha:\r\n                return gl.ONE_MINUS_SRC_ALPHA;\r\n            case BlendFactor.DestinationAlpha:\r\n                return gl.DST_ALPHA;\r\n            case BlendFactor.OneMinusDestinationAlpha:\r\n                return gl.ONE_MINUS_DST_ALPHA;\r\n            case BlendFactor.SourceAlphaSaturate:\r\n                return gl.SRC_ALPHA_SATURATE;\r\n            case BlendFactor.BlendColor:\r\n                return gl.CONSTANT_COLOR;\r\n            case BlendFactor.OneMinusBlendColor:\r\n                return gl.ONE_MINUS_CONSTANT_COLOR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get gl blend operation\r\n     * @param factor \r\n     * @returns \r\n     */\r\n    _getBlendOperation(factor: BlendEquationSeparate) {\r\n        const gl = this._gl;\r\n        switch (factor) {\r\n            case BlendEquationSeparate.ADD:\r\n                return gl.FUNC_ADD;\r\n            case BlendEquationSeparate.SUBTRACT:\r\n                return gl.FUNC_SUBTRACT;\r\n            case BlendEquationSeparate.REVERSE_SUBTRACT:\r\n                return gl.FUNC_REVERSE_SUBTRACT;\r\n            // case BlendEquationSeparate.MIN:\r\n            //     return -1;\r\n            // case BlendEquationSeparate.MAX:\r\n            //     return -1;\r\n            default:\r\n                throw \"Unknow type\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get gl compare fun factor\r\n     * @param compareFunction \r\n     * @returns \r\n     */\r\n    _getGLCompareFunction(compareFunction: CompareFunction): number {\r\n        const gl = this._gl;\r\n        switch (compareFunction) {\r\n            case CompareFunction.Never:\r\n                return gl.NEVER;\r\n            case CompareFunction.Less:\r\n                return gl.LESS;\r\n            case CompareFunction.Equal:\r\n                return gl.EQUAL;\r\n            case CompareFunction.LessEqual:\r\n                return gl.LEQUAL;\r\n            case CompareFunction.Greater:\r\n                return gl.GREATER;\r\n            case CompareFunction.NotEqual:\r\n                return gl.NOTEQUAL;\r\n            case CompareFunction.GreaterEqual:\r\n                return gl.GEQUAL;\r\n            case CompareFunction.Always:\r\n                return gl.ALWAYS;\r\n            default:\r\n                return gl.LEQUAL; // todo\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get gl stencil operation\r\n     * @param compareFunction \r\n     * @returns \r\n     */\r\n    _getGLStencilOperation(compareFunction: StencilOperation): number {\r\n        const gl = this._gl;\r\n        switch (compareFunction) {\r\n            case StencilOperation.Keep:\r\n                return gl.KEEP;\r\n            case StencilOperation.Zero:\r\n                return gl.ZERO;\r\n            case StencilOperation.Replace:\r\n                return gl.REPLACE;\r\n            case StencilOperation.IncrementSaturate:\r\n                return gl.INCR;\r\n            case StencilOperation.DecrementSaturate:\r\n                return gl.DECR;\r\n            case StencilOperation.Invert:\r\n                return gl.INVERT;\r\n            case StencilOperation.IncrementWrap:\r\n                return gl.INCR_WRAP;\r\n            case StencilOperation.DecrementWrap:\r\n                return gl.DECR_WRAP;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get gl frontface factor\r\n     * @param cullmode \r\n     * @returns \r\n     */\r\n    _getGLFrontfaceFactor(cullmode: CullMode) {\r\n        if (cullmode == CullMode.Front)\r\n            return this._gl.CCW;\r\n        else\r\n            return this._gl.CW;\r\n    }\r\n\r\n    //Depth\r\n    /**\r\n     * @internal\r\n     */\r\n    setDepthTest(value: boolean): void {\r\n        value !== this._depthTest && (this._depthTest = value, value ? this._gl.enable(this._gl.DEPTH_TEST) : this._gl.disable(this._gl.DEPTH_TEST));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setDepthMask(value: boolean): void {\r\n        value !== this._depthMask && (this._depthMask = value, this._gl.depthMask(value));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * value {CompareType}\r\n     */\r\n    setDepthFunc(value: number): void {\r\n        value !== this._depthFunc && (this._depthFunc = value, this._gl.depthFunc(this._getGLCompareFunction(value)));\r\n    }\r\n\r\n\r\n    //stencil\r\n    /**\r\n     * @internal\r\n     */\r\n    setStencilTest(value: boolean): void {\r\n        value !== this._stencilTest && (this._stencilTest = value, value ? this._gl.enable(this._gl.STENCIL_TEST) : this._gl.disable(this._gl.STENCIL_TEST));\r\n    }\r\n\r\n    /**\r\n     * 模板写入开关\r\n     * @param value \r\n     */\r\n    setStencilMask(value: boolean): void {\r\n        value !== this._stencilMask && (this._stencilMask = value, value ? this._gl.stencilMask(0xff) : this._gl.stencilMask(0x00));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setStencilFunc(fun: number, ref: number): void {\r\n        if (fun != this._stencilFunc || ref != this._stencilRef) {\r\n            this._stencilFunc = fun;\r\n            this._stencilRef = ref;\r\n            this._gl.stencilFunc(this._getGLCompareFunction(fun), ref, 0xff);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    setstencilOp(fail: number, zfail: number, zpass: number) {\r\n        if (this._stencilOp_fail != fail || this._stencilOp_zfail != zfail || this._stencilOp_zpass != zpass) {\r\n            this._stencilOp_fail = fail;\r\n            this._stencilOp_zfail = zfail;\r\n            this._stencilOp_zpass = zpass;\r\n            this._gl.stencilOp(this._getGLStencilOperation(fail), this._getGLStencilOperation(zfail), this._getGLStencilOperation(zpass));\r\n        }\r\n    }\r\n\r\n    //blend()\r\n    /**\r\n     * @internal\r\n     */\r\n    setBlend(value: boolean): void {\r\n        value !== this._blend && (this._blend = value, value ? this._gl.enable(this._gl.BLEND) : this._gl.disable(this._gl.BLEND));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setBlendEquation(blendEquation: number): void {\r\n        if (blendEquation !== this._blendEquation) {\r\n            this._blendEquation = blendEquation;\r\n            this._blendEquationRGB = this._blendEquationAlpha = null;\r\n            this._gl.blendEquation(this._getBlendOperation(blendEquation));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setBlendEquationSeparate(blendEquationRGB: number, blendEquationAlpha: number): void {\r\n        if (blendEquationRGB !== this._blendEquationRGB || blendEquationAlpha !== this._blendEquationAlpha) {\r\n            this._blendEquationRGB = blendEquationRGB;\r\n            this._blendEquationAlpha = blendEquationAlpha;\r\n            this._blendEquation = null;\r\n            this._gl.blendEquationSeparate(this._getBlendOperation(blendEquationRGB), this._getBlendOperation(blendEquationAlpha));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setBlendFunc(sFactor: number, dFactor: number, force: boolean = false): void {\r\n        // 有个iOS的bug，用原来的写法有时候会出错\r\n        if (force || sFactor !== this._sFactor || dFactor !== this._dFactor) {\r\n            this._sFactor = sFactor;\r\n            this._dFactor = dFactor;\r\n            this._sFactorRGB = null;\r\n            this._dFactorRGB = null;\r\n            this._sFactorAlpha = null;\r\n            this._dFactorAlpha = null;\r\n            this._gl.blendFunc(this._getBlendFactor(sFactor), this._getBlendFactor(dFactor));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setBlendFuncSeperate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void {\r\n        if (srcRGB !== this._sFactorRGB || dstRGB !== this._dFactorRGB || srcAlpha !== this._sFactorAlpha || dstAlpha !== this._dFactorAlpha) {\r\n            this._sFactorRGB = srcRGB;\r\n            this._dFactorRGB = dstRGB;\r\n            this._sFactorAlpha = srcAlpha;\r\n            this._dFactorAlpha = dstAlpha;\r\n            this._sFactor = null;\r\n            this._dFactor = null;\r\n            this._gl.blendFuncSeparate(this._getBlendFactor(srcRGB), this._getBlendFactor(dstRGB), this._getBlendFactor(srcAlpha), this._getBlendFactor(dstAlpha));\r\n        }\r\n    }\r\n\r\n    //cull\r\n    /**\r\n     * @internal\r\n     */\r\n    setCullFace(value: boolean): void {\r\n        value !== this._cullFace && (this._cullFace = value, value ? this._gl.enable(this._gl.CULL_FACE) : this._gl.disable(this._gl.CULL_FACE));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    setFrontFace(value: number): void {\r\n        value !== this._frontFace && (this._frontFace = value, this._gl.frontFace(this._getGLFrontfaceFactor(value)));\r\n    }\r\n}","import { LayaEnv } from \"../../../../../LayaEnv\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { ShaderVariable } from \"../../../../RenderEngine/RenderShader/ShaderVariable\";\r\nimport { UniformBufferObject } from \"../../../../RenderEngine/UniformBufferObject\";\r\nimport { Matrix3x3 } from \"../../../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { TextureCube } from \"../../../../resource/TextureCube\";\r\nimport { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ShaderDataType } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { GLObject } from \"./GLObject\";\r\n\r\n\r\n\r\nexport class GLShaderInstance extends GLObject {\r\n\r\n    _engine: WebGLEngine;\r\n\r\n    _gl: WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\n    /**@internal */\r\n    private _vs: string;\r\n    /**@internal */\r\n    private _ps: string;\r\n    /**@internal TextureId*/\r\n    private _curActTexIndex: number;\r\n    /**@internal */\r\n    private _vshader: WebGLShader;\r\n    /**@internal */\r\n    private _pshader: WebGLShader;\r\n    /**@internal */\r\n    private _program: WebGLProgram;\r\n    /**@internal */\r\n    private _attributeMap: { [name: string]: [number, ShaderDataType] };\r\n    /**@internal */\r\n    private _uniformMap: ShaderVariable[];\r\n    /**@internal */\r\n    // todo 没用到\r\n    private _uniformObjectMap: { [key: string]: ShaderVariable };\r\n    /**@internal */\r\n    _complete: boolean = true;\r\n\r\n    constructor(engine: WebGLEngine, vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }) {\r\n        super(engine);\r\n        this._vs = vs;\r\n        this._ps = ps;\r\n        this._attributeMap = attributeMap;\r\n        this._uniformMap = [];\r\n        this._create();\r\n    }\r\n\r\n    private _create(): void {\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.C_ShaderCompile, 1);\r\n        let preTime = performance.now();\r\n        const gl: WebGLRenderingContext = this._gl;\r\n\r\n        if (WebGLEngine.instance.lost) {\r\n            console.log(\"lost webgl context\");\r\n            return;\r\n        }\r\n\r\n        this._program = gl.createProgram();\r\n        this._vshader = this._createShader(gl, this._vs, gl.VERTEX_SHADER);\r\n        this._pshader = this._createShader(gl, this._ps, gl.FRAGMENT_SHADER);\r\n        gl.attachShader(this._program, this._vshader);\r\n        gl.attachShader(this._program, this._pshader);\r\n\r\n        for (var k in this._attributeMap)//根据声明调整location,便于VAO使用\r\n            gl.bindAttribLocation(this._program, this._attributeMap[k][0], k);\r\n        gl.linkProgram(this._program);\r\n        const bo = gl.getProgramParameter(this._program, gl.LINK_STATUS);\r\n\r\n        if (!bo) {\r\n            var info = gl.getProgramInfoLog(this._program);\r\n            console.error(new Error('Could not compile WebGL program. \\n\\n' + info));\r\n            this._complete = false;\r\n            return;\r\n        }\r\n\r\n        //Uniform\r\n        //Unifrom Objcet\r\n        const nUniformNum: number = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\r\n\r\n        this.useProgram();\r\n        this._curActTexIndex = 0;\r\n        let one: ShaderVariable, i: number;\r\n        for (i = 0; i < nUniformNum; i++) {\r\n            var uniformData: WebGLActiveInfo = gl.getActiveUniform(this._program, i);\r\n            var uniName: string = uniformData.name;\r\n            let location: WebGLUniformLocation = gl.getUniformLocation(this._program, uniName);\r\n            if (!location && location != 0)\r\n                continue;\r\n            one = new ShaderVariable();\r\n            one.location = location as number;\r\n            if (uniName.indexOf('[0]') > 0) {\r\n                one.name = uniName = uniName.substr(0, uniName.length - 3);\r\n                one.isArray = true;\r\n            } else {\r\n                one.name = uniName;\r\n                one.isArray = false;\r\n            }\r\n            one.type = uniformData.type;\r\n            this._addShaderUnifiormFun(one);\r\n            this._uniformMap.push(one);\r\n            one.dataOffset = this._engine.propertyNameToID(uniName);\r\n        }\r\n        if (this._engine.isWebGL2) {\r\n            this._uniformObjectMap = {};\r\n            var nUniformBlock: number = gl.getProgramParameter(this._program, (gl as WebGL2RenderingContext).ACTIVE_UNIFORM_BLOCKS);\r\n            for (i = 0; i < nUniformBlock; i++) {\r\n                let gl2 = (gl as WebGL2RenderingContext);\r\n                var uniformBlockName: string = gl2.getActiveUniformBlockName(this._program, i);\r\n                one = new ShaderVariable();\r\n                one.name = uniformBlockName;\r\n                one.isArray = false;\r\n                one.type = (gl as WebGL2RenderingContext).UNIFORM_BUFFER;\r\n                one.dataOffset = this._engine.propertyNameToID(uniformBlockName);\r\n                let location = one.location = gl2.getUniformBlockIndex(this._program, uniformBlockName);\r\n                gl2.uniformBlockBinding(this._program, location, this._engine.getUBOPointer(uniformBlockName));\r\n                this._uniformObjectMap[one.name] = one;\r\n                this._uniformMap.push(one);\r\n                this._addShaderUnifiormFun(one);\r\n            }\r\n        }\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.T_ShaderCompile, (performance.now() - preTime) | 0);\r\n    }\r\n\r\n    private _legalUBObyteLength(bytelength: number): number {\r\n        return Math.ceil(bytelength / 16) * 16;\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    private _createShader(gl: WebGLRenderingContext, str: string, type: number): any {\r\n        var shader: WebGLShader = gl.createShader(type);\r\n        gl.shaderSource(shader, str);\r\n        gl.compileShader(shader);\r\n        if (this._engine._isShaderDebugMode && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            if (!LayaEnv.isPlaying) {\r\n                console.warn(gl.getShaderInfoLog(shader));\r\n            } else {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n            }\r\n        }\r\n        return shader;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addShaderUnifiormFun(one: ShaderVariable): void {\r\n        var gl: WebGLRenderingContext = this._gl;\r\n        one.caller = this;\r\n        var isArray: boolean = one.isArray;\r\n        switch (one.type) {\r\n            case gl.BOOL:\r\n                one.fun = this._uniform1i;\r\n                one.uploadedValue = new Array(1);\r\n                break;\r\n            case gl.INT:\r\n                one.fun = isArray ? this._uniform1iv : this._uniform1i;//TODO:优化\r\n                one.uploadedValue = new Array(1);\r\n                break;\r\n            case gl.FLOAT:\r\n                one.fun = isArray ? this._uniform1fv : this._uniform1f;\r\n                one.uploadedValue = new Array(1);\r\n                break;\r\n            case gl.FLOAT_VEC2:\r\n                one.fun = isArray ? this._uniform_vec2v : this._uniform_vec2;\r\n                one.uploadedValue = new Array(2);\r\n                break;\r\n            case gl.FLOAT_VEC3:\r\n                one.fun = isArray ? this._uniform_vec3v : this._uniform_vec3;\r\n                one.uploadedValue = new Array(3);\r\n                break;\r\n            case gl.FLOAT_VEC4:\r\n                one.fun = isArray ? this._uniform_vec4v : this._uniform_vec4;\r\n                one.uploadedValue = new Array(4);\r\n                break;\r\n            case gl.FLOAT_MAT2:\r\n                one.fun = this._uniformMatrix2fv;\r\n                break;\r\n            case gl.FLOAT_MAT3:\r\n                one.fun = this._uniformMatrix3fv;\r\n                break;\r\n            case gl.FLOAT_MAT4:\r\n                one.fun = isArray ? this._uniformMatrix4fv : this._uniformMatrix4f;\r\n                break;\r\n            case gl.SAMPLER_2D:\r\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\r\n                gl.uniform1i(one.location, this._curActTexIndex);\r\n                one.textureID = this._engine._glTextureIDParams[this._curActTexIndex++];\r\n                one.fun = this._uniform_sampler2D;\r\n                break;\r\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\r\n                gl.uniform1i(one.location, this._curActTexIndex);\r\n                one.textureID = this._engine._glTextureIDParams[this._curActTexIndex++];\r\n                one.fun = this._uniform_sampler2DArray;\r\n                break;\r\n            case 0x8b5f://sampler3D\r\n                gl.uniform1i(one.location, this._curActTexIndex);\r\n                one.textureID = this._engine._glTextureIDParams[this._curActTexIndex++];\r\n                one.fun = this._uniform_sampler3D;\r\n                break;\r\n            case gl.SAMPLER_CUBE:\r\n                gl.uniform1i(one.location, this._curActTexIndex);\r\n                one.textureID = this._engine._glTextureIDParams[this._curActTexIndex++];\r\n                one.fun = this._uniform_samplerCube;\r\n                break;\r\n            case (gl as WebGL2RenderingContext).UNIFORM_BUFFER:\r\n                one.fun = this._uniform_UniformBuffer;\r\n                break;\r\n            default:\r\n                throw new Error(\"compile shader err!\");\r\n        }\r\n    }\r\n\r\n    getUniformMap(): ShaderVariable[] {\r\n        return this._uniformMap;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    bind(): boolean {\r\n        return this.useProgram();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    useProgram(): boolean {\r\n        if (this._engine._glUseProgram === this)\r\n            return false;\r\n        this._gl.useProgram(this._program);\r\n        this._engine._glUseProgram = this;\r\n        //不知道准不准\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.C_SetRenderPassCount, 1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _uniform1f(one: any, value: any): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== value) {\r\n            this._gl.uniform1f(one.location, uploadedValue[0] = value);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _uniform1fv(one: any, value: any): number {\r\n        if (value.length < 4) {\r\n            var uploadedValue: any[] = one.uploadedValue;\r\n            if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n                this._gl.uniform1fv(one.location, value);\r\n                uploadedValue[0] = value[0];\r\n                uploadedValue[1] = value[1];\r\n                uploadedValue[2] = value[2];\r\n                uploadedValue[3] = value[3];\r\n                return 1;\r\n            }\r\n            return 0;\r\n        } else {\r\n            this._gl.uniform1fv(one.location, value);\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec2(one: any, v: Vector2): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y) {\r\n            this._gl.uniform2f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec2v(one: any, value: Float32Array): number {\r\n        if (value.length < 2) {\r\n            var uploadedValue: any[] = one.uploadedValue;\r\n            if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n                this._gl.uniform2fv(one.location, value);\r\n                uploadedValue[0] = value[0];\r\n                uploadedValue[1] = value[1];\r\n                uploadedValue[2] = value[2];\r\n                uploadedValue[3] = value[3];\r\n                return 1;\r\n            }\r\n            return 0;\r\n        } else {\r\n            this._gl.uniform2fv(one.location, value);\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec3(one: any, v: Vector3): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y || uploadedValue[2] !== v.z) {\r\n            this._gl.uniform3f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y, uploadedValue[2] = v.z);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec3v(one: any, v: Float32Array): number {\r\n        this._gl.uniform3fv(one.location, v);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec4(one: any, v: Vector4): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== v.x || uploadedValue[1] !== v.y || uploadedValue[2] !== v.z || uploadedValue[3] !== v.w) {\r\n            this._gl.uniform4f(one.location, uploadedValue[0] = v.x, uploadedValue[1] = v.y, uploadedValue[2] = v.z, uploadedValue[3] = v.w);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec4v(one: any, v: Float32Array): number {\r\n        this._gl.uniform4fv(one.location, v);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniformMatrix2fv(one: any, value: any): number {\r\n        this._gl.uniformMatrix2fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniformMatrix3fv(one: any, m: Matrix3x3): number {\r\n        let value = m.elements;\r\n        this._gl.uniformMatrix3fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniformMatrix4f(one: any, m: Matrix4x4): number {\r\n        var value: Float32Array = m.elements;\r\n        this._gl.uniformMatrix4fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniformMatrix4fv(one: any, m: Float32Array): number {\r\n        this._gl.uniformMatrix4fv(one.location, false, m);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform1i(one: any, value: any): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== value) {\r\n            this._gl.uniform1i(one.location, uploadedValue[0] = value);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform1iv(one: any, value: any): number {\r\n        this._gl.uniform1iv(one.location, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_ivec2(one: any, value: any): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1]) {\r\n            this._gl.uniform2i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_ivec2v(one: any, value: any): number {\r\n        this._gl.uniform2iv(one.location, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec3i(one: any, value: any): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2]) {\r\n            this._gl.uniform3i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec3vi(one: any, value: any): number {\r\n        this._gl.uniform3iv(one.location, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec4i(one: any, value: any): number {\r\n        var uploadedValue: any[] = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n            this._gl.uniform4i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2], uploadedValue[3] = value[3]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_vec4vi(one: any, value: any): number {\r\n        this._gl.uniform4iv(one.location, value);\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_sampler2D(one: any, texture: BaseTexture): number {//TODO:TEXTURTE ARRAY\r\n        var value: any = texture ? texture._getSource() : Texture2D.errorTexture._getSource();\r\n        var gl: WebGLRenderingContext = this._gl;\r\n        this._bindTexture(one.textureID, gl.TEXTURE_2D, value);\r\n        return 0;\r\n    }\r\n\r\n    _uniform_sampler2DArray(one: any, texture: BaseTexture): number {\r\n        var value: any = texture ? texture._getSource() : Texture2D.errorTexture._getSource();\r\n        var gl: WebGL2RenderingContext = this._gl as WebGL2RenderingContext;\r\n        this._bindTexture(one.textureID, gl.TEXTURE_2D_ARRAY, value);\r\n        return 0;\r\n    }\r\n\r\n    _uniform_sampler3D(one: any, texture: BaseTexture): number {//TODO:TEXTURTE ARRAY\r\n        var value: any = texture ? texture._getSource() : Texture2D.errorTexture._getSource();\r\n        var gl: WebGL2RenderingContext = this._gl as WebGL2RenderingContext;\r\n        this._bindTexture(one.textureID, gl.TEXTURE_3D, value);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uniform_samplerCube(one: any, texture: BaseTexture): number {//TODO:TEXTURTECUBE ARRAY\r\n        var value: any = texture ? texture._getSource() : TextureCube.errorTexture._getSource();\r\n        var gl: WebGLRenderingContext = this._gl;\r\n        this._bindTexture(one.textureID, gl.TEXTURE_CUBE_MAP, value);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param one \r\n     * @param value \r\n     * @returns \r\n     */\r\n    _uniform_UniformBuffer(one: any, value: UniformBufferObject) {\r\n        value._bindUniformBufferBase();\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _bindTexture(textureID: number, target: number, texture: WebGLTexture): void {\r\n        const gl = this._gl;\r\n        if (this._engine._activedTextureID !== textureID) {\r\n            gl.activeTexture(textureID);\r\n            this._engine._activedTextureID = textureID;\r\n        }\r\n        const texID = this._engine._activedTextureID - this._gl.TEXTURE0;\r\n        if (this._engine._activeTextures[texID] !== texture) {\r\n            gl.bindTexture(target, texture);\r\n            this._engine._activeTextures[texID] = texture;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this._gl;\r\n        gl.deleteShader(this._vshader);\r\n        gl.deleteShader(this._pshader);\r\n        gl.deleteProgram(this._program);\r\n        this._vshader = null;\r\n        this._pshader = null;\r\n        this._program = null;\r\n        this._attributeMap = null;\r\n        this._uniformMap = null;\r\n        this._uniformObjectMap = null;\r\n        this._gl = null;\r\n        this._engine = null;\r\n    }\r\n\r\n}","import { VertexDeclaration, VertexStateContext } from \"../../../../RenderEngine/VertexDeclaration\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { WebGLIndexBuffer } from \"../WebGLIndexBuffer\";\r\nimport { WebGLVertexBuffer } from \"../WebGLVertexBuffer\";\r\nimport { WebGLExtension } from \"./GLEnum/WebGLExtension\";\r\nimport { GLObject } from \"./GLObject\";\r\n\r\n\r\n\r\nexport class GLVertexState extends GLObject {\r\n    private _angleInstancedArrays: any;\r\n    private _vaoExt: any | null;\r\n    private _vao: WebGLVertexArrayObject | WebGLVertexArrayObjectOES;\r\n\r\n    _vertexDeclaration: { [key: number]: VertexStateContext }[] = [];\r\n    _bindedIndexBuffer: WebGLIndexBuffer;\r\n    _vertexBuffers: WebGLVertexBuffer[];\r\n\r\n    constructor(engine: WebGLEngine) {\r\n        super(engine);\r\n        if (!engine.isWebGL2)\r\n            this._vaoExt = engine._supportCapatable.getExtension(WebGLExtension.OES_vertex_array_object);\r\n        this._vao = this.createVertexArray();\r\n        this._angleInstancedArrays = this._engine._supportCapatable.getExtension(WebGLExtension.ANGLE_instanced_arrays);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private createVertexArray(): any {\r\n        if (this._engine.isWebGL2)\r\n            return (<WebGL2RenderingContext>this._gl).createVertexArray();\r\n        else\r\n            return this._vaoExt.createVertexArrayOES();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private deleteVertexArray(): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).deleteVertexArray(this._vao);\r\n        else\r\n            this._vaoExt.deleteVertexArrayOES(this._vao);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    bindVertexArray(): void {\r\n        if (this._engine._GLBindVertexArray == this)\r\n            return;\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).bindVertexArray(this._vao);\r\n        else\r\n            this._vaoExt.bindVertexArrayOES(this._vao);\r\n        this._engine._GLBindVertexArray = this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    unbindVertexArray(): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).bindVertexArray(null);\r\n        else\r\n            this._vaoExt.bindVertexArrayOES(null);\r\n        this._engine._GLBindVertexArray = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    isVertexArray(): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).isVertexArray(this._vao);\r\n        else\r\n            this._vaoExt.isVertexArrayOES(this._vao);\r\n    }\r\n\r\n    applyVertexBuffer(vertexBuffer: WebGLVertexBuffer[]): void {\r\n        //Clear front VAO\r\n        this.clearVAO();\r\n        this._vertexBuffers = vertexBuffer;\r\n        if (this._engine._GLBindVertexArray == this) {\r\n            this._vertexDeclaration.length = vertexBuffer.length;\r\n            var i = 0;\r\n            vertexBuffer.forEach(element => {\r\n                var verDec = element._shaderValues;\r\n                this._vertexDeclaration[i++] = element._shaderValues;\r\n\r\n                element.bind();\r\n                for (var k in verDec) {\r\n                    var loc: number = parseInt(k);\r\n                    var attribute = verDec[k];\r\n                    this._gl.enableVertexAttribArray(loc);\r\n                    this._gl.vertexAttribPointer(loc, attribute.elementCount, attribute.elementType, !!attribute.normalized, attribute.vertexStride, attribute.elementOffset);\r\n                    if (element.instanceBuffer)\r\n                        this.vertexAttribDivisor(loc, 1);\r\n                }\r\n            });\r\n        } else {\r\n            throw \"BufferState: must call bind() function first.\";\r\n        }\r\n\r\n    }\r\n\r\n    //绑定之前需要先处理了前面的\r\n    clearVAO() {\r\n        for (let i = 0, n = this._vertexDeclaration.length; i < n; i++) {\r\n            var verDec = this._vertexDeclaration[i];\r\n            for (var k in verDec) {\r\n                var loc: number = parseInt(k);\r\n                this._gl.disableVertexAttribArray(loc);\r\n            }\r\n        }\r\n    }\r\n\r\n    applyIndexBuffer(indexBuffer: WebGLIndexBuffer | null): void {\r\n        //需要强制更新IndexBuffer\r\n\r\n        if (indexBuffer == null) {\r\n            return;\r\n        }\r\n        if (this._engine._GLBindVertexArray == this) {\r\n            if (this._bindedIndexBuffer !== indexBuffer) {\r\n                indexBuffer._glBuffer.bindBuffer();//TODO:可和vao合并bind\r\n                this._bindedIndexBuffer = indexBuffer;\r\n            }\r\n        } else {\r\n            throw \"BufferState: must call bind() function first.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n         * @internal\r\n         */\r\n    vertexAttribDivisor(index: number, divisor: number): void {\r\n        if (this._engine.isWebGL2)\r\n            (<WebGL2RenderingContext>this._gl).vertexAttribDivisor(index, divisor);\r\n        else\r\n            this._angleInstancedArrays.vertexAttribDivisorANGLE(index, divisor);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this._gl;\r\n        this.deleteVertexArray();\r\n        this._gl = null;\r\n        this._engine = null;\r\n    }\r\n} ","// @ts-nocheck\r\nexport class VertexArrayObject {\r\n    constructor() {\r\n    }\r\n}\r\n\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var glErrorShadow = {};\r\n\r\n    function error(msg) {\r\n        if (window.console && window.console.error) {\r\n            window.console.error(msg);\r\n        }\r\n    }\r\n\r\n    function log(msg) {\r\n        if (window.console && window.console.log) {\r\n            window.console.log(msg);\r\n        }\r\n    }\r\n\r\n    function synthesizeGLError(err, opt_msg) {\r\n        glErrorShadow[err] = true;\r\n        if (opt_msg !== undefined) {\r\n            error(opt_msg)\r\n        }\r\n    }\r\n\r\n    function wrapGLError(gl) {\r\n        var f = gl.getError;\r\n        gl.getError = function () {\r\n            var err;\r\n            do {\r\n                err = f.apply(gl);\r\n                if (err != gl.NO_ERROR) {\r\n                    glErrorShadow[err] = true;\r\n                }\r\n            } while (err != gl.NO_ERROR);\r\n\r\n            for (var err1 in glErrorShadow) {\r\n                if (glErrorShadow[err1]) {\r\n                    delete glErrorShadow[err1];\r\n                    return parseInt(err1);\r\n                }\r\n            }\r\n            return gl.NO_ERROR;\r\n        };\r\n    }\r\n\r\n    var WebGLVertexArrayObjectOES = function WebGLVertexArrayObjectOES(ext) {\r\n        var gl = ext.gl;\r\n\r\n        this.ext = ext;\r\n        this.isAlive = true;\r\n        this.hasBeenBound = false;\r\n\r\n        this.elementArrayBuffer = null;\r\n        this.attribs = new Array(ext.maxVertexAttribs);\r\n        for (var n = 0; n < this.attribs.length; n++) {\r\n            var attrib = new (WebGLVertexArrayObjectOES as any).VertexAttrib(gl);\r\n            this.attribs[n] = attrib;\r\n        }\r\n\r\n        this.maxAttrib = 0;\r\n    };\r\n\r\n    (WebGLVertexArrayObjectOES as any).VertexAttrib = function VertexAttrib(gl) {\r\n        this.enabled = false;\r\n        this.buffer = null;\r\n        this.size = 4;\r\n        this.type = gl.FLOAT;\r\n        this.normalized = false;\r\n        this.stride = 16;\r\n        this.offset = 0;\r\n\r\n        this.cached = \"\";\r\n        this.recache();\r\n    };\r\n    (WebGLVertexArrayObjectOES as any).VertexAttrib.prototype.recache = function recache() {\r\n        this.cached = [this.size, this.type, this.normalized, this.stride, this.offset].join(\":\");\r\n    };\r\n\r\n    var OESVertexArrayObject = function OESVertexArrayObject(gl) {\r\n        var self = this;\r\n        this.gl = gl;\r\n\r\n        wrapGLError(gl);\r\n\r\n        var original = this.original = {\r\n            getParameter: gl.getParameter,\r\n            enableVertexAttribArray: gl.enableVertexAttribArray,\r\n            disableVertexAttribArray: gl.disableVertexAttribArray,\r\n            bindBuffer: gl.bindBuffer,\r\n            getVertexAttrib: gl.getVertexAttrib,\r\n            vertexAttribPointer: gl.vertexAttribPointer\r\n        };\r\n\r\n        gl.getParameter = function getParameter(pname) {\r\n            if (pname == self.VERTEX_ARRAY_BINDING_OES) {\r\n                if (self.currentVertexArrayObject == self.defaultVertexArrayObject) {\r\n                    return null;\r\n                } else {\r\n                    return self.currentVertexArrayObject;\r\n                }\r\n            }\r\n            return original.getParameter.apply(this, arguments);\r\n        };\r\n\r\n        gl.enableVertexAttribArray = function enableVertexAttribArray(index) {\r\n            var vao = self.currentVertexArrayObject;\r\n            vao.maxAttrib = Math.max(vao.maxAttrib, index);\r\n            var attrib = vao.attribs[index];\r\n            attrib.enabled = true;\r\n            return original.enableVertexAttribArray.apply(this, arguments);\r\n        };\r\n        gl.disableVertexAttribArray = function disableVertexAttribArray(index) {\r\n            var vao = self.currentVertexArrayObject;\r\n            vao.maxAttrib = Math.max(vao.maxAttrib, index);\r\n            var attrib = vao.attribs[index];\r\n            attrib.enabled = false;\r\n            return original.disableVertexAttribArray.apply(this, arguments);\r\n        };\r\n\r\n        gl.bindBuffer = function bindBuffer(target, buffer) {\r\n            switch (target) {\r\n                case gl.ARRAY_BUFFER:\r\n                    self.currentArrayBuffer = buffer;\r\n                    break;\r\n                case gl.ELEMENT_ARRAY_BUFFER:\r\n                    self.currentVertexArrayObject.elementArrayBuffer = buffer;\r\n                    break;\r\n            }\r\n            return original.bindBuffer.apply(this, arguments);\r\n        };\r\n\r\n        gl.getVertexAttrib = function getVertexAttrib(index, pname) {\r\n            var vao = self.currentVertexArrayObject;\r\n            var attrib = vao.attribs[index];\r\n            switch (pname) {\r\n                case gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:\r\n                    return attrib.buffer;\r\n                case gl.VERTEX_ATTRIB_ARRAY_ENABLED:\r\n                    return attrib.enabled;\r\n                case gl.VERTEX_ATTRIB_ARRAY_SIZE:\r\n                    return attrib.size;\r\n                case gl.VERTEX_ATTRIB_ARRAY_STRIDE:\r\n                    return attrib.stride;\r\n                case gl.VERTEX_ATTRIB_ARRAY_TYPE:\r\n                    return attrib.type;\r\n                case gl.VERTEX_ATTRIB_ARRAY_NORMALIZED:\r\n                    return attrib.normalized;\r\n                default:\r\n                    return original.getVertexAttrib.apply(this, arguments);\r\n            }\r\n        };\r\n\r\n        gl.vertexAttribPointer = function vertexAttribPointer(indx, size, type, normalized, stride, offset) {\r\n            var vao = self.currentVertexArrayObject;\r\n            vao.maxAttrib = Math.max(vao.maxAttrib, indx);\r\n            var attrib = vao.attribs[indx];\r\n            attrib.buffer = self.currentArrayBuffer;\r\n            attrib.size = size;\r\n            attrib.type = type;\r\n            attrib.normalized = normalized;\r\n            attrib.stride = stride;\r\n            attrib.offset = offset;\r\n            attrib.recache();\r\n            return original.vertexAttribPointer.apply(this, arguments);\r\n        };\r\n\r\n        if (gl.instrumentExtension) {\r\n            gl.instrumentExtension(this, \"OES_vertex_array_object\");\r\n        }\r\n\r\n        gl.canvas.addEventListener('webglcontextrestored', function () {\r\n            log(\"OESVertexArrayObject emulation library context restored\");\r\n            self.reset_();\r\n        }, true);\r\n\r\n        this.reset_();\r\n    };\r\n\r\n    OESVertexArrayObject.prototype.VERTEX_ARRAY_BINDING_OES = 0x85B5;\r\n\r\n    OESVertexArrayObject.prototype.reset_ = function reset_() {\r\n        var contextWasLost = this.vertexArrayObjects !== undefined;\r\n        if (contextWasLost) {\r\n            for (var ii = 0; ii < this.vertexArrayObjects.length; ++ii) {\r\n                this.vertexArrayObjects.isAlive = false;\r\n            }\r\n        }\r\n        var gl = this.gl;\r\n        this.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\r\n\r\n        this.defaultVertexArrayObject = new WebGLVertexArrayObjectOES(this);\r\n        this.currentVertexArrayObject = null;\r\n        this.currentArrayBuffer = null;\r\n        this.vertexArrayObjects = [this.defaultVertexArrayObject];\r\n\r\n        this.bindVertexArrayOES(null);\r\n    };\r\n\r\n    OESVertexArrayObject.prototype.createVertexArrayOES = function createVertexArrayOES() {\r\n        var arrayObject = new WebGLVertexArrayObjectOES(this);\r\n        this.vertexArrayObjects.push(arrayObject);\r\n        return arrayObject;\r\n    };\r\n\r\n    OESVertexArrayObject.prototype.deleteVertexArrayOES = function deleteVertexArrayOES(arrayObject) {\r\n        arrayObject.isAlive = false;\r\n        this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(arrayObject), 1);\r\n        if (this.currentVertexArrayObject == arrayObject) {\r\n            this.bindVertexArrayOES(null);\r\n        }\r\n    };\r\n\r\n    OESVertexArrayObject.prototype.isVertexArrayOES = function isVertexArrayOES(arrayObject) {\r\n        if (arrayObject && arrayObject instanceof WebGLVertexArrayObjectOES) {\r\n            if ((arrayObject as any).hasBeenBound && (arrayObject as any).ext == this) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    OESVertexArrayObject.prototype.bindVertexArrayOES = function bindVertexArrayOES(arrayObject) {\r\n        var gl = this.gl;\r\n        if (arrayObject && !arrayObject.isAlive) {\r\n            synthesizeGLError(gl.INVALID_OPERATION, \"bindVertexArrayOES: attempt to bind deleted arrayObject\");\r\n            return;\r\n        }\r\n        var original = this.original;\r\n\r\n        var oldVAO = this.currentVertexArrayObject;\r\n        this.currentVertexArrayObject = arrayObject || this.defaultVertexArrayObject;\r\n        this.currentVertexArrayObject.hasBeenBound = true;\r\n        var newVAO = this.currentVertexArrayObject;\r\n\r\n        if (oldVAO == newVAO) {\r\n            return;\r\n        }\r\n\r\n        if (!oldVAO || newVAO.elementArrayBuffer != oldVAO.elementArrayBuffer) {\r\n            original.bindBuffer.call(gl, gl.ELEMENT_ARRAY_BUFFER, newVAO.elementArrayBuffer);\r\n        }\r\n\r\n        var currentBinding = this.currentArrayBuffer;\r\n        var maxAttrib = Math.max(oldVAO ? oldVAO.maxAttrib : 0, newVAO.maxAttrib);\r\n        for (var n = 0; n <= maxAttrib; n++) {\r\n            var attrib = newVAO.attribs[n];\r\n            var oldAttrib = oldVAO ? oldVAO.attribs[n] : null;\r\n\r\n            if (!oldVAO || attrib.enabled != oldAttrib.enabled) {\r\n                if (attrib.enabled) {\r\n                    original.enableVertexAttribArray.call(gl, n);\r\n                } else {\r\n                    original.disableVertexAttribArray.call(gl, n);\r\n                }\r\n            }\r\n\r\n            if (attrib.enabled) {\r\n                var bufferChanged = false;\r\n                if (!oldVAO || attrib.buffer != oldAttrib.buffer) {\r\n                    if (currentBinding != attrib.buffer) {\r\n                        original.bindBuffer.call(gl, gl.ARRAY_BUFFER, attrib.buffer);\r\n                        currentBinding = attrib.buffer;\r\n                    }\r\n                    bufferChanged = true;\r\n                }\r\n\r\n                if (bufferChanged || attrib.cached != oldAttrib.cached) {\r\n                    original.vertexAttribPointer.call(gl, n, attrib.size, attrib.type, attrib.normalized, attrib.stride, attrib.offset);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.currentArrayBuffer != currentBinding) {\r\n            original.bindBuffer.call(gl, gl.ARRAY_BUFFER, this.currentArrayBuffer);\r\n        }\r\n    };\r\n\r\n    (window as any)._setupVertexArrayObject = function (gl) {\r\n        var original_getSupportedExtensions = gl.getSupportedExtensions;\r\n        gl.getSupportedExtensions = function getSupportedExtensions() {\r\n            var list = original_getSupportedExtensions.call(this) || [];\r\n            if (list.indexOf(\"OES_vertex_array_object\") < 0) {\r\n                list.push(\"OES_vertex_array_object\");\r\n            }\r\n            return list;\r\n        };\r\n\r\n        var original_getExtension = gl.getExtension;\r\n\r\n        gl.getExtension = function getExtension(name) {\r\n            var ext = original_getExtension.call(this, name);\r\n            if (ext) {\r\n                return ext;\r\n            }\r\n            if (name !== \"OES_vertex_array_object\") {\r\n                return null;\r\n            }\r\n\r\n            if (!this.__OESVertexArrayObject) {\r\n                console.log(\"Setup OES_vertex_array_object polyfill\");\r\n                this.__OESVertexArrayObject = new OESVertexArrayObject(this);\r\n            }\r\n            return this.__OESVertexArrayObject;\r\n        };\r\n    };\r\n}());\r\n","import { RenderCapable } from \"../../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { WebGLEngine } from \"../WebGLEngine\";\r\nimport { WebGLExtension } from \"./GLEnum/WebGLExtension\";\r\nimport { VertexArrayObject } from \"./VertexArrayObject\";\r\n\r\nexport class GlCapable {\r\n    /**@internal */\r\n    private _extentionVendorPrefixes: string[] = [\"\", \"WEBKIT_\", \"MOZ_\"];\r\n    /**@internal */\r\n    private _gl: any;\r\n    /**@internal */\r\n    private _extensionMap: Map<WebGLExtension, any>;\r\n    /**@internal */\r\n    private _capabilityMap: Map<RenderCapable, boolean>;\r\n\r\n\r\n    constructor(glEngine: WebGLEngine) {\r\n        this._gl = glEngine.gl;\r\n        this.initExtension(glEngine.isWebGL2);\r\n        this.initCapable(glEngine.isWebGL2);\r\n    }\r\n\r\n    private initCapable(isWebgl2: boolean) {\r\n        this._capabilityMap = new Map();\r\n        //Index Uint32\r\n        let value = isWebgl2 || !!(this.getExtension(WebGLExtension.OES_element_index_uint));\r\n        this._capabilityMap.set(RenderCapable.Element_Index_Uint32, value);\r\n        //FLoat32Texture\r\n        value = isWebgl2 || !!(this.getExtension(WebGLExtension.OES_texture_float));\r\n        this._capabilityMap.set(RenderCapable.TextureFormat_R32G32B32A32, value);\r\n        //halfFloatTexture\r\n        value = isWebgl2 || !!(this.getExtension(WebGLExtension.OES_texture_half_float));\r\n        this._capabilityMap.set(RenderCapable.TextureFormat_R16G16B16A16, value);\r\n        //anistropic\r\n        value = !!(this.getExtension(WebGLExtension.EXT_texture_filter_anisotropic));\r\n        this._capabilityMap.set(RenderCapable.Texture_anisotropic, value);\r\n\r\n        // half float renderable\r\n        if (isWebgl2) {\r\n            value = !!this.getExtension(WebGLExtension.EXT_color_buffer_float) || !!this.getExtension(WebGLExtension.EXT_color_buffer_half_float);\r\n        }\r\n        else {\r\n            value = ((!!this.getExtension(WebGLExtension.OES_texture_half_float)) || (!!this.getExtension(WebGLExtension.EXT_color_buffer_half_float))) && (!!this.getExtension(WebGLExtension.OES_texture_half_float_linear));\r\n        }\r\n        this._capabilityMap.set(RenderCapable.RenderTextureFormat_R16G16B16A16, value);\r\n\r\n        // float renderable\r\n        if (isWebgl2) {\r\n            value = !!this.getExtension(WebGLExtension.EXT_color_buffer_float) && !!this.getExtension(WebGLExtension.OES_texture_float_linear);\r\n        }\r\n        else {\r\n            // OES_texture_float implicitly enables the WEBGL_color_buffer_float extension (if supported)\r\n            value = (!!this.getExtension(WebGLExtension.OES_texture_float)) && (!!this.getExtension(WebGLExtension.OES_texture_float_linear));\r\n        }\r\n        this._capabilityMap.set(RenderCapable.RenderTextureFormat_R32G32B32A32, value);\r\n\r\n        value = isWebgl2 || (!!this.getExtension(WebGLExtension.WEBGL_depth_texture));\r\n        this._capabilityMap.set(RenderCapable.RenderTextureFormat_Depth, value);\r\n        value = isWebgl2;\r\n        this._capabilityMap.set(RenderCapable.RenderTextureFormat_ShadowMap, value);\r\n        value = isWebgl2 || (!!this.getExtension(WebGLExtension.OES_vertex_array_object));\r\n        this._capabilityMap.set(RenderCapable.Vertex_VAO, value);\r\n        value = (isWebgl2 || (!!this.getExtension(WebGLExtension.ANGLE_instanced_arrays)));\r\n        this._capabilityMap.set(RenderCapable.DrawElement_Instance, value);\r\n        value = (isWebgl2) || (!!this.getExtension(WebGLExtension.EXT_shader_texture_lod));\r\n        this._capabilityMap.set(RenderCapable.Shader_TextureLod, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_s3tc));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_S3TC, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_s3tc_srgb));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_S3TC_SRGB, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_pvrtc));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_PVRTC, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_etc1));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_ETC1, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_etc));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_ETC, value);\r\n        value = (!!this.getExtension(WebGLExtension.WEBGL_compressed_texture_astc));\r\n        this._capabilityMap.set(RenderCapable.COMPRESS_TEXTURE_ASTC, value);\r\n        value = (isWebgl2) || (!!this.getExtension(WebGLExtension.EXT_sRGB))\r\n        this._capabilityMap.set(RenderCapable.Texture_SRGB, value);\r\n        value = (!!this.getExtension(WebGLExtension.OES_texture_float_linear));\r\n        this._capabilityMap.set(RenderCapable.Texture_FloatLinearFiltering, value);\r\n        value = isWebgl2 || (!!this.getExtension(WebGLExtension.OES_texture_half_float_linear));\r\n        this._capabilityMap.set(RenderCapable.Texture_HalfFloatLinearFiltering, value);\r\n        value = isWebgl2;\r\n        this._capabilityMap.set(RenderCapable.MSAA, value);\r\n        this._capabilityMap.set(RenderCapable.UnifromBufferObject, value);\r\n        this._capabilityMap.set(RenderCapable.Texture3D, value);\r\n    }\r\n\r\n    private initExtension(isWebgl2: boolean) {\r\n        this._extensionMap = new Map();\r\n        const setExtensionMap = (extension: WebGLExtension, value: any, map: Map<WebGLExtension, any>) => {\r\n            value && map.set(extension, value);\r\n        }\r\n        const _extTextureFilterAnisotropic = this._getExtension(\"EXT_texture_filter_anisotropic\");\r\n        setExtensionMap(WebGLExtension.EXT_texture_filter_anisotropic, _extTextureFilterAnisotropic, this._extensionMap);\r\n        const _compressedTextureS3tc = this._getExtension(\"WEBGL_compressed_texture_s3tc\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_s3tc, _compressedTextureS3tc, this._extensionMap);\r\n        const _compressdTextureS3tc_srgb = this._getExtension(\"WEBGL_compressed_texture_s3tc_srgb\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_s3tc_srgb, _compressdTextureS3tc_srgb, this._extensionMap);\r\n        const _compressedTexturePvrtc = this._getExtension(\"WEBGL_compressed_texture_pvrtc\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_pvrtc, _compressedTexturePvrtc, this._extensionMap);\r\n        const _compressedTextureEtc1 = this._getExtension(\"WEBGL_compressed_texture_etc1\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_etc1, _compressedTextureEtc1, this._extensionMap);\r\n        const _compressedTextureETC = this._getExtension(\"WEBGL_compressed_texture_etc\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_etc, _compressedTextureETC, this._extensionMap);\r\n        const _compressedTextureASTC = this._getExtension(\"WEBGL_compressed_texture_astc\");\r\n        setExtensionMap(WebGLExtension.WEBGL_compressed_texture_astc, _compressedTextureASTC, this._extensionMap);\r\n        const _oesTextureFloatLinear = this._getExtension(\"OES_texture_float_linear\");\r\n        setExtensionMap(WebGLExtension.OES_texture_float_linear, _oesTextureFloatLinear, this._extensionMap);\r\n        const _extColorBufferHalfFloat = this._getExtension(\"EXT_color_buffer_half_float\");\r\n        setExtensionMap(WebGLExtension.EXT_color_buffer_half_float, _extColorBufferHalfFloat, this._extensionMap);\r\n        if (isWebgl2) {\r\n            const _extColorBufferFloat = this._getExtension(\"EXT_color_buffer_float\");\r\n            setExtensionMap(WebGLExtension.EXT_color_buffer_float, _extColorBufferFloat, this._extensionMap);\r\n        } else {\r\n            VertexArrayObject;//强制引用\r\n            if ((window as any)._setupVertexArrayObject) //兼容VAO\r\n                (window as any)._setupVertexArrayObject(this._gl);\r\n            const _vaoExt = this._getExtension(\"OES_vertex_array_object\");\r\n            setExtensionMap(WebGLExtension.OES_vertex_array_object, _vaoExt, this._extensionMap);\r\n            const _angleInstancedArrays = this._getExtension(\"ANGLE_instanced_arrays\");\r\n            setExtensionMap(WebGLExtension.ANGLE_instanced_arrays, _angleInstancedArrays, this._extensionMap);\r\n            const _oesTextureHalfFloat = this._getExtension(\"OES_texture_half_float\");\r\n            setExtensionMap(WebGLExtension.OES_texture_half_float, _oesTextureHalfFloat, this._extensionMap);\r\n            const _oesTextureHalfFloatLinear = this._getExtension(\"OES_texture_half_float_linear\");\r\n            setExtensionMap(WebGLExtension.OES_texture_half_float_linear, _oesTextureHalfFloatLinear, this._extensionMap);\r\n            const _oesTextureFloat = this._getExtension(\"OES_texture_float\");\r\n            setExtensionMap(WebGLExtension.OES_texture_float, _oesTextureFloat, this._extensionMap);\r\n\r\n            const _oes_element_index_uint = this._getExtension(\"OES_element_index_uint\");\r\n            setExtensionMap(WebGLExtension.OES_element_index_uint, _oes_element_index_uint, this._extensionMap);\r\n            const _extShaderTextureLod = this._getExtension(\"EXT_shader_texture_lod\");\r\n            setExtensionMap(WebGLExtension.EXT_shader_texture_lod, _extShaderTextureLod, this._extensionMap);\r\n            const _webgl_depth_texture = this._getExtension(\"WEBGL_depth_texture\");\r\n            setExtensionMap(WebGLExtension.WEBGL_depth_texture, _webgl_depth_texture, this._extensionMap);\r\n            const _sRGB = this._getExtension(\"EXT_sRGB\");\r\n            setExtensionMap(WebGLExtension.EXT_sRGB, _sRGB, this._extensionMap);\r\n\r\n            const OES_standard_derivatives = this._getExtension(\"OES_standard_derivatives\");\r\n            setExtensionMap(WebGLExtension.OES_standard_derivatives, OES_standard_derivatives, this._extensionMap);\r\n        }\r\n    }\r\n\r\n    getCapable(type: RenderCapable): boolean {\r\n        return this._capabilityMap.get(type);\r\n    }\r\n\r\n    getExtension(type: WebGLExtension): any {\r\n        if (this._extensionMap.has(type))\r\n            return this._extensionMap.get(type);\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getExtension(name: string) {\r\n        const prefixes: string[] = this._extentionVendorPrefixes;\r\n        for (const k in prefixes) {\r\n            var ext = this._gl.getExtension(prefixes[k] + name);\r\n            if (ext)\r\n                return ext;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { CommandEncoder } from \"../../../layagl/CommandEncoder\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { ShaderDataType } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderParams } from \"../../../RenderEngine/RenderEnum/RenderParams\";\r\nimport { ShaderVariable } from \"../../../RenderEngine/RenderShader/ShaderVariable\";\r\nimport { IRenderEngine } from \"../../DriverDesign/RenderDevice/IRenderEngine\";\r\nimport { IRenderEngineFactory } from \"../../DriverDesign/RenderDevice/IRenderEngineFactory\";\r\nimport { ITextureContext } from \"../../DriverDesign/RenderDevice/ITextureContext\";\r\nimport { GL2TextureContext } from \"./GL2TextureContext\";\r\nimport { GLTextureContext } from \"./GLTextureContext\";\r\nimport { GLBuffer } from \"./WebGLEngine/GLBuffer\";\r\nimport { WebGLExtension } from \"./WebGLEngine/GLEnum/WebGLExtension\";\r\nimport { WebGLMode } from \"./WebGLEngine/GLEnum/WebGLMode\";\r\nimport { GLParams } from \"./WebGLEngine/GLParams\";\r\nimport { GLRenderDrawContext } from \"./WebGLEngine/GLRenderDrawContext\";\r\nimport { GLRenderState } from \"./WebGLEngine/GLRenderState\";\r\nimport { GLShaderInstance } from \"./WebGLEngine/GLShaderInstance\";\r\nimport { GLVertexState } from \"./WebGLEngine/GLVertexState\";\r\nimport { GlCapable } from \"./WebGLEngine/GlCapable\";\r\nimport { WebGLConfig } from \"./WebGLEngine/WebGLConfig\";\r\nimport { ShaderDefine } from \"../../RenderModuleData/Design/ShaderDefine\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { IDefineDatas } from \"../../RenderModuleData/Design/IDefineDatas\";\r\nimport { WebGLInternalTex } from \"./WebGLInternalTex\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { WebGLInternalRT } from \"./WebGLInternalRT\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\n\r\n/**\r\n * 封装Webgl\r\n */\r\nexport class WebGLEngine extends EventDispatcher implements IRenderEngine {\r\n\r\n    /**\r\n     * @internal\r\n     * 存储 texture uniform gamma define\r\n     */\r\n    static _texGammaDefine: { [key: number]: ShaderDefine } = {};\r\n\r\n    //兼容ConchWebGL\r\n    static _lastFrameBuffer: WebGLInternalRT = null;\r\n    //兼容ConchWebGL\r\n    static _lastFrameBuffer_WebGLOBJ: WebGLFramebuffer = null;\r\n\r\n    _context: WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\n    private _lost: boolean = false;\r\n    public get lost(): boolean {\r\n        return this._lost;\r\n    }\r\n\r\n    private _config: WebGLConfig;\r\n\r\n    private _isWebGL2: boolean;\r\n\r\n    private _webglMode: WebGLMode;\r\n\r\n    /**@internal */\r\n    private _propertyNameMap: any = {};\r\n    /**@internal */\r\n    private _propertyNameCounter: number = 0;\r\n    /**@internal */\r\n    _renderOBJCreateContext: IRenderEngineFactory;\r\n\r\n    /**@internal */\r\n    _IDCounter: number = 0;\r\n\r\n    /**@internal ShaderDebugMode*/\r\n    _isShaderDebugMode: boolean = true;\r\n    _enableStatistics: boolean = false;\r\n    /**@internal gl.TextureID*/\r\n    _glTextureIDParams: Array<number>;\r\n\r\n    /**@internal bind active Texture*/\r\n    _activedTextureID: number;\r\n\r\n    /**@internal bindTexture */\r\n    //RenderTexture TODO\r\n    _activeTextures: WebGLTexture[];\r\n\r\n    /**\r\n    * @internal\r\n    * bind GLVertexArray\r\n    */\r\n    _GLBindVertexArray: GLVertexState;\r\n\r\n    /**\r\n    * @internal\r\n    * 支持功能\r\n    */\r\n    _supportCapatable: GlCapable;\r\n\r\n    /**\r\n     * @internal\r\n     * bind Program\r\n     */\r\n    _glUseProgram: GLShaderInstance;\r\n\r\n    //bind glBuffer by glBuffer target\r\n    //key BufferTargetType\r\n    private _GLBufferBindMap: { [key: number]: GLBuffer | null };\r\n\r\n    private _curUBOPointer: number = 0;\r\n    //记录绑定UBO的glPointer\r\n    private _GLUBOPointerMap: Map<string, number> = new Map();\r\n    //记录绑定Pointer的UBO\r\n    private _GLBindPointerUBOMap: Map<number, GLBuffer> = new Map();\r\n    //bind viewport\r\n    private _lastViewport: Vector4;\r\n    private _lastScissor: Vector4;\r\n    private _scissorState: boolean;\r\n    //bind clearColor\r\n    private _lastClearColor: Color = new Color;\r\n    private _lastClearDepth: number = -1;\r\n\r\n    private _globalWidth: number;\r\n    private _globalHeight: number;\r\n\r\n    //GL参数\r\n    private _GLParams: GLParams;\r\n\r\n    //GL纹理生成\r\n    private _GLTextureContext: GLTextureContext | GL2TextureContext;\r\n    //Gl Draw\r\n    private _GLRenderDrawContext: GLRenderDrawContext;\r\n\r\n    _remapZ: boolean = true;\r\n    _screenInvertY: boolean = false;\r\n    _lodTextureSample: boolean = true;\r\n    _breakTextureSample: boolean = true;\r\n\r\n    //GLRenderState\r\n    _GLRenderState: GLRenderState;\r\n    // todo  这个 map 和 get 函数转移到 ShaderDefine 里面\r\n    /**@internal */\r\n    private static _defineMap: { [key: string]: ShaderDefine } = {};\r\n    /**@internal */\r\n    private static _defineCounter: number = 0;\r\n    /**@internal */\r\n    static _maskMap: Array<{ [key: number]: string }> = [];\r\n    // //TODO:管理Buffer\r\n    // private _bufferResourcePool: any;\r\n    // //TODO:管理Texture\r\n    // private _textureResourcePool: any;\r\n    // //TODO:管理FrameBuffer\r\n    // private _RenderBufferResource: any;\r\n\r\n    //GPU统计数据\r\n    private _GLStatisticsInfo: Map<GPUEngineStatisticsInfo, number> = new Map();\r\n    static instance: WebGLEngine;\r\n    constructor(config: WebGLConfig, webglMode: WebGLMode = WebGLMode.Auto) {\r\n        super();\r\n        this._config = config;\r\n        this._isWebGL2 = false;\r\n        //init data\r\n        this._lastViewport = new Vector4(0, 0, 0, 0);\r\n        this._lastClearColor = new Color(0, 0, 0, 0);\r\n        this._lastScissor = new Vector4(0, 0, 0, 0);\r\n        this._webglMode = webglMode;\r\n        this._initStatisticsInfo();\r\n        WebGLEngine.instance = this;\r\n    }\r\n\r\n    endFrame(): void {\r\n        this.event(\"endFrame\", null);\r\n    }\r\n\r\n    getInnerWidth() {\r\n        if (LayaEnv.isConch) {\r\n            return (window as any).getInnerWidth();\r\n        } else\r\n            return this._globalWidth;\r\n    }\r\n\r\n    getInnerHeight() {\r\n        if (LayaEnv.isConch) {\r\n            return (window as any).getInnerHeight();\r\n        } else\r\n            return this._globalHeight;\r\n    }\r\n\r\n\r\n    resizeOffScreen(width: number, height: number): void {\r\n        this._globalWidth = width;\r\n        this._globalHeight = height;\r\n        if (LayaEnv.isConch) {\r\n            if (WebGLEngine._lastFrameBuffer) {\r\n                WebGLEngine._lastFrameBuffer.dispose();\r\n                WebGLEngine._lastFrameBuffer_WebGLOBJ = null;\r\n            }\r\n            WebGLEngine._lastFrameBuffer = this.getTextureContext().createRenderTargetInternal(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, false, 1) as WebGLInternalRT;\r\n            WebGLEngine._lastFrameBuffer_WebGLOBJ = WebGLEngine._lastFrameBuffer._framebuffer;\r\n        }\r\n    }\r\n    addTexGammaDefine(key: number, value: ShaderDefine): void {\r\n        WebGLEngine._texGammaDefine[key] = value;\r\n    }\r\n\r\n    /**\r\n     * GL Context\r\n     * @member {WebGLRenderingContext}\r\n     */\r\n    get gl() {\r\n        return this._context;\r\n    }\r\n\r\n    get isWebGL2() {\r\n        return this._isWebGL2;\r\n    }\r\n\r\n    get webglConfig() {\r\n        return this._config;\r\n    }\r\n\r\n    private _initStatisticsInfo() {\r\n        for (var i = 0; i < GPUEngineStatisticsInfo.Count; i++) {\r\n            this._GLStatisticsInfo.set(i, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param info \r\n     * @param value \r\n     */\r\n    _addStatisticsInfo(info: GPUEngineStatisticsInfo, value: number) {\r\n        this._enableStatistics && this._GLStatisticsInfo.set(info, this._GLStatisticsInfo.get(info) + value);\r\n    }\r\n\r\n    /**\r\n     * 清除\r\n     * @internal\r\n     * @param info \r\n     */\r\n    clearStatisticsInfo() {\r\n        if (this._enableStatistics) {\r\n            for (var i = 0; i < GPUEngineStatisticsInfo.FrameClearCount; i++) {\r\n                this._GLStatisticsInfo.set(i, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param info \r\n     * @returns \r\n     */\r\n    getStatisticsInfo(info: GPUEngineStatisticsInfo): number {\r\n        return this._GLStatisticsInfo.get(info);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param glPointer \r\n     * @returns \r\n     */\r\n    _getBindUBOBuffer(glPointer: number): GLBuffer {\r\n        return this._GLBindPointerUBOMap.get(glPointer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param glPointer \r\n     * @param buffer \r\n     */\r\n    _setBindUBOBuffer(glPointer: number, buffer: GLBuffer): void {\r\n        this._GLBindPointerUBOMap.set(glPointer, buffer);\r\n    }\r\n\r\n    /**\r\n     * create GL\r\n     * @param canvas \r\n     */\r\n    initRenderEngine(canvas: any) {\r\n        let names;\r\n        let gl;\r\n        switch (this._webglMode) {\r\n            case WebGLMode.Auto:\r\n                names = [\"webgl2\", \"experimental-webgl2\", \"webgl\", \"experimental-webgl\"];\r\n                break;\r\n            case WebGLMode.WebGL1:\r\n                names = [\"webgl\", \"experimental-webgl\"];\r\n                break;\r\n            case WebGLMode.WebGL2:\r\n                names = [\"webgl2\", \"experimental-webgl2\"];\r\n                break;\r\n        }\r\n        for (var i: number = 0; i < names.length; i++) {\r\n            try {\r\n                gl = canvas.getContext(names[i], this._config);\r\n                // gl.drawingBufferColorSpace = \"display-p3\";\r\n            } catch (e) {\r\n            }\r\n            if (gl) {\r\n                if (names[i] === 'webgl2' || names[i] === 'experimental-webgl2') {\r\n                    this._isWebGL2 = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        this._context = gl;\r\n\r\n        this.scissorTest(true);\r\n        //init Other\r\n        this._initBindBufferMap();\r\n        this._supportCapatable = new GlCapable(this);\r\n        this._GLParams = new GLParams(this);\r\n        this._GLRenderState = new GLRenderState(this);\r\n        this._glTextureIDParams = [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3, gl.TEXTURE4, gl.TEXTURE5, gl.TEXTURE6, gl.TEXTURE7, gl.TEXTURE8, gl.TEXTURE9, gl.TEXTURE10, gl.TEXTURE11, gl.TEXTURE12, gl.TEXTURE13, gl.TEXTURE14, gl.TEXTURE15, gl.TEXTURE16, gl.TEXTURE17, gl.TEXTURE18, gl.TEXTURE19, gl.TEXTURE20, gl.TEXTURE21, gl.TEXTURE22, gl.TEXTURE23, gl.TEXTURE24, gl.TEXTURE25, gl.TEXTURE26, gl.TEXTURE27, gl.TEXTURE28, gl.TEXTURE29, gl.TEXTURE30, gl.TEXTURE31];\r\n        this._activedTextureID = gl.TEXTURE0;//默认激活纹理区为0;\r\n        this._activeTextures = [];\r\n        this._GLTextureContext = this.isWebGL2 ? new GL2TextureContext(this) : new GLTextureContext(this);\r\n        this._GLRenderDrawContext = new GLRenderDrawContext(this);\r\n        canvas.addEventListener(\"webglcontextlost\", this.webglContextLost)\r\n    }\r\n\r\n    webglContextLost(e: any) {\r\n        console.log(\"lost webgl context\");\r\n        Laya.stage.event(\"GraphicContextLost\", e);\r\n        this._lost = true\r\n    }\r\n\r\n    private _initBindBufferMap() {\r\n        this._GLBufferBindMap = {};\r\n        this._GLBufferBindMap[BufferTargetType.ARRAY_BUFFER] = null;\r\n        this._GLBufferBindMap[BufferTargetType.ELEMENT_ARRAY_BUFFER] = null;\r\n        this._GLBufferBindMap[BufferTargetType.UNIFORM_BUFFER] = null;\r\n    }\r\n\r\n\r\n    _getbindBuffer(target: BufferTargetType) {\r\n        return this._GLBufferBindMap[target];\r\n    }\r\n\r\n    _setbindBuffer(target: BufferTargetType, buffer: GLBuffer | null) {\r\n        this._GLBufferBindMap[target] = buffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param target \r\n     * @param texture \r\n     */\r\n    _bindTexture(target: number, texture: WebGLTexture) {\r\n        const texID = this._activedTextureID - this._context.TEXTURE0;\r\n        if (this._activeTextures[texID] !== texture) {\r\n            this._context.bindTexture(target, texture);\r\n            this._activeTextures[texID] = texture;\r\n        }\r\n    }\r\n\r\n    //get capable of webgl\r\n    getCapable(capatableType: RenderCapable): boolean {\r\n        return this._supportCapatable.getCapable(capatableType);\r\n    }\r\n\r\n    viewport(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._context;\r\n        const lv = this._lastViewport;\r\n        if (LayaEnv.isConch) {\r\n            gl.viewport(x, y, width, height);\r\n        } else if (x !== lv.x || y !== lv.y || width !== lv.z || height !== lv.w) {\r\n            gl.viewport(x, y, width, height);\r\n            lv.setValue(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    scissor(x: number, y: number, width: number, height: number) {\r\n        const gl = this._context;\r\n        const lv = this._lastScissor;\r\n        if (LayaEnv.isConch) {\r\n            gl.scissor(x, y, width, height);\r\n        } else if (x !== lv.x || y !== lv.y || width !== lv.z || height !== lv.w) {\r\n            gl.scissor(x, y, width, height);\r\n            lv.setValue(x, y, width, height);\r\n        }\r\n    }\r\n\r\n\r\n    scissorTest(value: boolean) {\r\n        if (this._scissorState == value)\r\n            return;\r\n        this._scissorState = value;\r\n        if (value)\r\n            this._context.enable(this._context.SCISSOR_TEST);\r\n        else\r\n            this._context.disable(this._context.SCISSOR_TEST);\r\n    }\r\n\r\n\r\n\r\n    clearRenderTexture(clearFlag: RenderClearFlag, clearcolor: Color = null, clearDepth: number = 1, clearStencilValue = 0) {\r\n        var flag: number;\r\n        //this.gl.enable(this._gl.SCISSOR_TEST)\r\n        if (clearFlag & RenderClearFlag.Color) {\r\n            if (clearcolor && !this._lastClearColor.equal(clearcolor)) {\r\n                this._context.clearColor(clearcolor.r, clearcolor.g, clearcolor.b, clearcolor.a);\r\n                clearcolor.cloneTo(this._lastClearColor);\r\n            }\r\n            flag |= this.gl.COLOR_BUFFER_BIT;\r\n        }\r\n        if (clearFlag & RenderClearFlag.Depth) {\r\n            if (this._lastClearDepth != clearDepth) {\r\n                this._context.clearDepth(clearDepth);\r\n                this._lastClearDepth = clearDepth;\r\n            }\r\n            this._GLRenderState.setDepthMask(true);\r\n            flag |= this._context.DEPTH_BUFFER_BIT;\r\n        }\r\n        if (clearFlag & RenderClearFlag.Stencil) {\r\n            this._context.clearStencil(clearStencilValue);\r\n            this._GLRenderState.setStencilMask(true);\r\n            flag |= this._context.STENCIL_BUFFER_BIT;\r\n        }\r\n        if (flag)\r\n            this._context.clear(flag);\r\n    }\r\n\r\n    copySubFrameBuffertoTex(texture: WebGLInternalTex, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number) {\r\n        this._bindTexture(texture.target, texture.resource);\r\n        this._context.copyTexSubImage2D(texture.target, level, xoffset, yoffset, x, y, width, height);\r\n    }\r\n\r\n    colorMask(r: boolean, g: boolean, b: boolean, a: boolean): void {\r\n        this._context.colorMask(r, g, b, a);\r\n    }\r\n\r\n    getParams(params: RenderParams): number {\r\n        return this._GLParams.getParams(params);\r\n    }\r\n\r\n\r\n    createBuffer(targetType: BufferTargetType, bufferUsageType: BufferUsage): GLBuffer {\r\n        //TODO SourceManager\r\n        return new GLBuffer(this, targetType, bufferUsageType);\r\n    }\r\n\r\n    createShaderInstance(vs: string, ps: string, attributeMap: { [name: string]: [number, ShaderDataType] }): GLShaderInstance {\r\n        //TODO SourceManager\r\n        return new GLShaderInstance(this, vs, ps, attributeMap);\r\n    }\r\n\r\n    createVertexState(): GLVertexState {\r\n        return new GLVertexState(this);\r\n    }\r\n\r\n    getUBOPointer(name: string): number {\r\n        if (!this._GLUBOPointerMap.has(name))\r\n            this._GLUBOPointerMap.set(name, this._curUBOPointer++);\r\n        return this._GLUBOPointerMap.get(name);\r\n    }\r\n\r\n\r\n\r\n    getTextureContext(): ITextureContext {\r\n        return this._GLTextureContext;\r\n    }\r\n\r\n    //TODO 先写完测试，这种封装过于死板\r\n    getDrawContext(): GLRenderDrawContext {\r\n        return this._GLRenderDrawContext;\r\n    }\r\n\r\n    getCreateRenderOBJContext(): IRenderEngineFactory {\r\n        return this._renderOBJCreateContext;\r\n    }\r\n\r\n    // //TODO:\r\n    // propertyNameToID(name: string): number {\r\n    //   return this.propertyNameToID(name);\r\n    // }\r\n\r\n    /**\r\n   * 通过Shader属性名称获得唯一ID。\r\n   * @param name Shader属性名称。\r\n   * @return 唯一ID。\r\n   */\r\n    propertyNameToID(name: string): number {\r\n        if (this._propertyNameMap[name] != null) {\r\n            return this._propertyNameMap[name];\r\n        } else {\r\n            var id: number = this._propertyNameCounter++;\r\n            this._propertyNameMap[name] = id;\r\n            this._propertyNameMap[id] = name;\r\n            return id;\r\n        }\r\n    }\r\n\r\n    propertyIDToName(id: number): string {\r\n        return this._propertyNameMap[id];\r\n    }\r\n\r\n    getNamesByDefineData(defineData: IDefineDatas, out: Array<string>): void {\r\n        var maskMap: Array<{ [key: number]: string }> = WebGLEngine._maskMap;\r\n        var mask: Array<number> = defineData._mask;\r\n        out.length = 0;\r\n        for (var i: number = 0, n: number = defineData._length; i < n; i++) {\r\n            var subMaskMap: { [key: number]: string } = maskMap[i];\r\n            var subMask: number = mask[i];\r\n            for (var j: number = 0; j < 32; j++) {\r\n                var d: number = 1 << j;\r\n                if (subMask > 0 && d > subMask)//如果31位存在subMask为负数,避免break\r\n                    break;\r\n                if (subMask & d)\r\n                    out.push(subMaskMap[d]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 注册宏定义。\r\n    * @param name \r\n    */\r\n    getDefineByName(name: string): ShaderDefine {\r\n        var define: ShaderDefine = WebGLEngine._defineMap[name];\r\n        if (!define) {\r\n            var maskMap = WebGLEngine._maskMap;\r\n            var counter: number = WebGLEngine._defineCounter;\r\n            var index: number = Math.floor(counter / 32);\r\n            var value: number = 1 << counter % 32;\r\n            define = new ShaderDefine(index, value);\r\n            WebGLEngine._defineMap[name] = define;\r\n            if (index == maskMap.length) {\r\n                maskMap.length++;\r\n                maskMap[index] = {};\r\n            }\r\n            maskMap[index][value] = name;\r\n            WebGLEngine._defineCounter++;\r\n        }\r\n        return define;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    uploadUniforms(shader: GLShaderInstance, commandEncoder: CommandEncoder, shaderData: WebGLShaderData, uploadUnTexture: boolean): number {\r\n        shaderData.applyUBO && shaderData.applyUBOData();\r\n        var data: any = shaderData._data;\r\n        var shaderUniform: any[] = commandEncoder.getArrayData();\r\n        var shaderCall: number = 0;\r\n        for (var i: number = 0, n: number = shaderUniform.length; i < n; i++) {\r\n            var one: any/*ShaderVariable*/ = shaderUniform[i];\r\n            if (uploadUnTexture || one.textureID !== -1) {//如uniform为纹理切换Shader时需要重新上传\r\n                var value: any = data[one.dataOffset];\r\n                if (value != null)\r\n                    shaderCall += one.fun.call(one.caller, one, value);\r\n            }\r\n        }\r\n        return shaderCall;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    uploadCustomUniforms(shader: GLShaderInstance, custom: any[], index: number, data: any): number {\r\n        shader.bind();\r\n        var shaderCall: number = 0;\r\n        var one: ShaderVariable = custom[index];\r\n        if (one && data != null)\r\n            shaderCall += one.fun.call(one.caller, one, data);\r\n        return shaderCall;\r\n    }\r\n\r\n    unbindVertexState(): void {\r\n        if (this.isWebGL2)\r\n            (<WebGL2RenderingContext>this._context).bindVertexArray(null);\r\n        else\r\n            this._supportCapatable.getExtension(WebGLExtension.OES_vertex_array_object).bindVertexArrayOES(null);\r\n        this._GLBindVertexArray = null;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { UnifromBufferData, UniformBufferParamsType } from \"../../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix3x3 } from \"../../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { InternalTexture } from \"../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { WebGLEngine } from \"../../WebGLDriver/RenderDevice/WebGLEngine\";\r\nimport { ShaderData, uboParams } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../Design/ShaderDefine\";\r\nimport { WebDefineDatas } from \"./WebDefineDatas\";\r\n\r\n/**\r\n * 着色器数据类。\r\n */\r\nexport class WebGLShaderData extends ShaderData {\r\n\t/**@internal */\r\n\tprotected _gammaColorMap: Map<number, Color>;\r\n\t/**@internal */\r\n\tapplyUBO: boolean = false;\r\n\t/**@internal */\r\n\t_data: any = null;\r\n\r\n\t/** @internal */\r\n\t_defineDatas: WebDefineDatas = new WebDefineDatas();\r\n\r\n\t/**@internal */\r\n\t_uniformBufferDatas: Map<string, uboParams>;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * key: uniform property id\r\n\t * value: UniformBufferObject\r\n\t * 保存 每个 uniform id 所在的 ubo\r\n\t */\r\n\t_uniformBuffersMap: Map<number, UniformBufferObject>;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget uniformBufferDatas() {\r\n\t\treturn this._uniformBufferDatas;\r\n\t}\r\n\r\n\tget uniformBuffersMap(): Map<number, UniformBufferObject> {\r\n\t\treturn this._uniformBuffersMap;\r\n\t}\r\n\r\n\t_releaseUBOData() {\r\n\t\tif (!this._uniformBufferDatas) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (let value of this._uniformBufferDatas.values()) {\r\n\t\t\tvalue.ubo._updateDataInfo.destroy();\r\n\t\t\tvalue.ubo.destroy();\r\n\t\t\tvalue.ubo._updateDataInfo = null;\r\n\t\t}\r\n\t\tthis._uniformBufferDatas.clear();\r\n\t\tthis._uniformBuffersMap.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\t\r\n\t */\r\n\tconstructor(ownerResource: Resource = null) {\r\n\t\tsuper(ownerResource);\r\n\t\tthis._initData();\r\n\t\tthis._uniformBufferDatas = new Map();\r\n\t\tthis._uniformBuffersMap = new Map();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param key \r\n\t * @param ubo \r\n\t * @param uboData \r\n\t */\r\n\t_addCheckUBO(key: string, ubo: UniformBufferObject, uboData: UnifromBufferData) {\r\n\t\tthis._uniformBufferDatas.set(key, { ubo: ubo, uboBuffer: uboData });\r\n\t\tuboData._uniformParamsState.forEach(\r\n\t\t\t(value: UniformBufferParamsType, id: number) => {\r\n\t\t\t\tthis.uniformBuffersMap.set(id, ubo);\r\n\t\t\t}\r\n\t\t);\r\n\t\tubo.setDataByUniformBufferData(uboData);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initData(): void {\r\n\t\tthis._data = {};\r\n\t\tthis._gammaColorMap = new Map();\r\n\t}\r\n\r\n\t/**\r\n\t * 注意!!!!!! 不要获得data之后直接设置值，设置值请使用set函数\r\n\t * @internal\r\n\t */\r\n\tgetData(): any {\r\n\t\treturn this._data;\r\n\t}\r\n\r\n\tapplyUBOData() {\r\n\t\tthis._uniformBufferDatas.forEach((value, key) => {\r\n\t\t\tvalue.ubo.setDataByUniformBufferData(value.uboBuffer);\r\n\t\t});\r\n\t\tthis.applyUBO = false;\r\n\t}\r\n\r\n\t/**\r\n\t * 增加Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\taddDefine(define: ShaderDefine): void {\r\n\t\tthis._defineDatas.add(define);\r\n\t}\r\n\r\n\taddDefines(define: WebDefineDatas): void {\r\n\t\tthis._defineDatas.addDefineDatas(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 移除Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\tremoveDefine(define: ShaderDefine): void {\r\n\t\tthis._defineDatas.remove(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否包含Shader宏定义。\r\n\t * @param value 宏定义。\r\n\t */\r\n\thasDefine(define: ShaderDefine): boolean {\r\n\t\treturn this._defineDatas.has(define);\r\n\t}\r\n\r\n\t/**\r\n\t * 清空宏定义。\r\n\t */\r\n\tclearDefine(): void {\r\n\t\tthis._defineDatas.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取布尔。\r\n\t * @param\tindex shader索引。\r\n\t * @return  布尔。\r\n\t */\r\n\tgetBool(index: number): boolean {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置布尔。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 布尔。\r\n\t */\r\n\tsetBool(index: number, value: boolean): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取整形。\r\n\t * @param\tindex shader索引。\r\n\t * @return  整形。\r\n\t */\r\n\tgetInt(index: number): number {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置整型。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 整形。\r\n\t */\r\n\tsetInt(index: number, value: number): void {\r\n\t\tthis._data[index] = value;\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getInt(index));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取浮点。\r\n\t * @param\tindex shader索引。\r\n\t * @return\t浮点。\r\n\t */\r\n\tgetNumber(index: number): number {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置浮点。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 浮点。\r\n\t */\r\n\tsetNumber(index: number, value: number): void {\r\n\t\tthis._data[index] = value;\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getNumber(index));\r\n\t\t\tthis.applyUBO = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Vector2向量。\r\n\t * @param\tindex shader索引。\r\n\t * @return Vector2向量。\r\n\t */\r\n\tgetVector2(index: number): Vector2 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector2向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue Vector2向量。\r\n\t */\r\n\tsetVector2(index: number, value: Vector2): void {\r\n\t\tif (this._data[index]) {\r\n\t\t\tvalue.cloneTo(this._data[index]);\r\n\t\t} else\r\n\t\t\tthis._data[index] = value.clone();\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getVector2(index));\r\n\t\t\tthis.applyUBO = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Vector3向量。\r\n\t * @param\tindex shader索引。\r\n\t * @return Vector3向量。\r\n\t */\r\n\tgetVector3(index: number): Vector3 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Vector3向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue Vector3向量。\r\n\t */\r\n\tsetVector3(index: number, value: Vector3): void {\r\n\t\tif (this._data[index]) {\r\n\t\t\tvalue.cloneTo(this._data[index]);\r\n\t\t} else\r\n\t\t\tthis._data[index] = value.clone();\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getVector3(index));\r\n\t\t\tthis.applyUBO = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色。\r\n\t * @param \tindex shader索引。\r\n\t * @return  向量。\r\n\t */\r\n\tgetVector(index: number): Vector4 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置向量。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 向量。\r\n\t */\r\n\tsetVector(index: number, value: Vector4): void {\r\n\t\tif (this._data[index]) {\r\n\t\t\tvalue.cloneTo(this._data[index]);\r\n\t\t} else\r\n\t\t\tthis._data[index] = value.clone();\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getVector(index));\r\n\t\t\tthis.applyUBO = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色\r\n\t * @param index 索引\r\n\t * @returns 颜色\r\n\t */\r\n\tgetColor(index: number): Color {\r\n\t\treturn this._gammaColorMap.get(index);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置颜色\r\n\t * @param index 索引\r\n\t * @param value 颜色值\r\n\t */\r\n\tsetColor(index: number, value: Color): void {\r\n\t\tif (!value)\r\n\t\t\treturn;\r\n\t\tif (this._data[index]) {\r\n\t\t\tlet gammaColor = this._gammaColorMap.get(index);\r\n\t\t\tvalue.cloneTo(gammaColor);\r\n\t\t\tlet linearColor = this._data[index];\r\n\t\t\tlinearColor.x = Color.gammaToLinearSpace(value.r);\r\n\t\t\tlinearColor.y = Color.gammaToLinearSpace(value.g);\r\n\t\t\tlinearColor.z = Color.gammaToLinearSpace(value.b);\r\n\t\t\tlinearColor.w = value.a;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linearColor = new Vector4();\r\n\t\t\tlinearColor.x = Color.gammaToLinearSpace(value.r);\r\n\t\t\tlinearColor.y = Color.gammaToLinearSpace(value.g);\r\n\t\t\tlinearColor.z = Color.gammaToLinearSpace(value.b);\r\n\t\t\tlinearColor.w = value.a;\r\n\t\t\tthis._data[index] = linearColor;\r\n\t\t\tthis._gammaColorMap.set(index, value.clone());\r\n\t\t}\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getLinearColor(index));\r\n\t\t\tthis.applyUBO = true;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param index \r\n\t */\r\n\tgetLinearColor(index: number): Vector4 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 获取矩阵。\r\n\t * @param\tindex shader索引。\r\n\t * @return  矩阵。\r\n\t */\r\n\tgetMatrix4x4(index: number): Matrix4x4 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置矩阵。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue  矩阵。\r\n\t */\r\n\tsetMatrix4x4(index: number, value: Matrix4x4): void {\r\n\t\tif (this._data[index]) {\r\n\t\t\tvalue.cloneTo(this._data[index]);\r\n\t\t} else {\r\n\t\t\tthis._data[index] = value.clone();\r\n\t\t}\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getMatrix4x4(index));\r\n\t\t\tthis.applyUBO = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取矩阵\r\n\t * @param index \r\n\t * @returns \r\n\t */\r\n\tgetMatrix3x3(index: number): Matrix3x3 {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置矩阵。\r\n\t * @param index \r\n\t * @param value \r\n\t */\r\n\tsetMatrix3x3(index: number, value: Matrix3x3): void {\r\n\t\tif (this._data[index]) {\r\n\t\t\tvalue.cloneTo(this._data[index]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._data[index] = value.clone();\r\n\t\t}\r\n\r\n\t\tlet ubo = this._uniformBuffersMap.get(index);\r\n\t\tif (ubo) {\r\n\t\t\tthis._uniformBufferDatas.get(ubo._name).uboBuffer._setData(index, this.getMatrix3x3(index));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取Buffer。\r\n\t * @param\tindex shader索引。\r\n\t * @return\r\n\t */\r\n\tgetBuffer(index: number): Float32Array {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 设置Buffer。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue  buffer数据。\r\n\t */\r\n\tsetBuffer(index: number, value: Float32Array): void {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置纹理。\r\n\t * @param\tindex shader索引。\r\n\t * @param\tvalue 纹理。\r\n\t */\r\n\tsetTexture(index: number, value: BaseTexture): void {\r\n\t\tvar lastValue: BaseTexture = this._data[index];\r\n\t\tif (value) {\r\n\t\t\tlet shaderDefine = WebGLEngine._texGammaDefine[index];\r\n\t\t\tif (shaderDefine && value && value.gammaCorrection > 1) {\r\n\t\t\t\tthis.addDefine(shaderDefine);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// todo 自动的\r\n\t\t\t\tshaderDefine && this.removeDefine(shaderDefine);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//维护Reference\r\n\t\tthis._data[index] = value;\r\n\t\tlastValue && lastValue._removeReference();\r\n\t\tvalue && value._addReference();\r\n\t}\r\n\r\n\t_setInternalTexture(index: number, value: InternalTexture) {\r\n\t\tvar lastValue: InternalTexture = this._data[index];\r\n\t\tif (value) {\r\n\t\t\tlet shaderDefine = WebGLEngine._texGammaDefine[index];\r\n\t\t\tif (shaderDefine && value && value.gammaCorrection > 1) {\r\n\t\t\t\tthis.addDefine(shaderDefine);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// todo 自动的\r\n\t\t\t\tshaderDefine && this.removeDefine(shaderDefine);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//维护Reference\r\n\t\tthis._data[index] = value;\r\n\t\t// lastValue && lastValue._removeReference();\r\n\t\t// value && value._addReference();\r\n\t}\r\n\r\n\t/**\r\n\t * 获取纹理。\r\n\t * @param\tindex shader索引。\r\n\t * @return  纹理。\r\n\t */\r\n\tgetTexture(index: number): BaseTexture {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\tgetSourceIndex(value: any) {\r\n\t\tfor (var i in this._data) {\r\n\t\t\tif (this._data[i] == value)\r\n\t\t\t\treturn Number(i);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param index \r\n\t * @param value \r\n\t */\r\n\tsetUniformBuffer(index: number, value: UniformBufferObject) {\r\n\t\tthis._data[index] = value;\r\n\t}\r\n\r\n\tgetUniformBuffer(index: number): UniformBufferObject {\r\n\t\treturn this._data[index];\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: WebGLShaderData): void {\r\n\t\tvar dest: WebGLShaderData = <WebGLShaderData>destObject;\r\n\t\tvar destData: { [key: string]: number | boolean | Vector2 | Vector3 | Vector4 | Matrix3x3 | Matrix4x4 | BaseTexture } = dest._data;\r\n\t\tfor (var k in this._data) {//TODO:需要优化,杜绝is判断，慢\r\n\t\t\tvar value: any = this._data[k];\r\n\t\t\tif (value != null) {\r\n\t\t\t\tif (typeof value == \"number\") {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (typeof value == \"number\") {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (typeof value == \"boolean\") {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t} else if (value instanceof Vector2) {\r\n\t\t\t\t\tvar v2 = destData[k] || (destData[k] = new Vector2());\r\n\t\t\t\t\t(<Vector2>value).cloneTo(v2);\r\n\t\t\t\t\tdestData[k] = v2;\r\n\t\t\t\t} else if (value instanceof Vector3) {\r\n\t\t\t\t\tvar v3 = destData[k] || (destData[k] = new Vector3());\r\n\t\t\t\t\t(<Vector3>value).cloneTo(v3);\r\n\t\t\t\t\tdestData[k] = v3;\r\n\t\t\t\t} else if (value instanceof Vector4) {\r\n\t\t\t\t\tlet color = this.getColor(parseInt(k));\r\n\t\t\t\t\tif (color) {\r\n\t\t\t\t\t\tlet clonecolor = color.clone();\r\n\t\t\t\t\t\tdestObject.setColor(parseInt(k), clonecolor);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar v4 = destData[k] || (destData[k] = new Vector4());\r\n\t\t\t\t\t\t(<Vector4>value).cloneTo(v4);\r\n\t\t\t\t\t\tdestData[k] = v4;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (value instanceof Matrix3x3) {\r\n\t\t\t\t\tlet mat = destData[k] || (destData[k] = new Matrix3x3());\r\n\t\t\t\t\tvalue.cloneTo(mat);\r\n\t\t\t\t\tdestData[k] = mat;\r\n\t\t\t\t}\r\n\t\t\t\telse if (value instanceof Matrix4x4) {\r\n\t\t\t\t\tvar mat = destData[k] || (destData[k] = new Matrix4x4());\r\n\t\t\t\t\t(<Matrix4x4>value).cloneTo(mat);\r\n\t\t\t\t\tdestData[k] = mat;\r\n\t\t\t\t} else if (value instanceof BaseTexture) {\r\n\t\t\t\t\tdestData[k] = value;\r\n\t\t\t\t\tvalue._addReference();\r\n\t\t\t\t} else if (value instanceof Resource) {\r\n\t\t\t\t\tdestData[k] = value as any;\r\n\t\t\t\t\tvalue._addReference();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._defineDatas.cloneTo(dest._defineDatas);\r\n\t\tthis._gammaColorMap.forEach((color, index) => {\r\n\t\t\tdestObject._gammaColorMap.set(index, color.clone());\r\n\t\t});\r\n\r\n\t\t//UBO Clone\r\n\t\tthis._cloneUBO(dest._uniformBufferDatas);\r\n\t\tdest.applyUBO = true;\r\n\t}\r\n\r\n\tgetDefineData(): WebDefineDatas {\r\n\t\treturn this._defineDatas;\r\n\t}\r\n\r\n\t/**\r\n\t * clone UBO Data\r\n\t * @internal\r\n\t * @param uboDatas \r\n\t */\r\n\t_cloneUBO(uboDatas: Map<string, uboParams>) {\r\n\t\tthis._uniformBufferDatas.forEach((value, key) => {\r\n\t\t\tuboDatas.has(key) && (value.uboBuffer.cloneTo(uboDatas.get(key).uboBuffer));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: WebGLShaderData = new WebGLShaderData();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\treset() {\r\n\t\tfor (var k in this._data) {\r\n\t\t\t//维护Refrence\r\n\t\t\tvar value: any = this._data[k];\r\n\t\t\tif (value instanceof Resource) {\r\n\t\t\t\tvalue._removeReference();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._data = {};\r\n\t\tthis._gammaColorMap.clear();\r\n\t\tthis._uniformBufferDatas.clear();\r\n\t\tthis.applyUBO = false;\r\n\t\tthis._uniformBuffersMap.clear();\r\n\t\tthis._defineDatas.clear();\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tthis._defineDatas.destroy();\r\n\t\tthis._defineDatas = null;\r\n\t\tfor (var k in this._data) {\r\n\t\t\t//维护Refrence\r\n\t\t\tvar value: any = this._data[k];\r\n\t\t\tif (value instanceof Resource) {\r\n\t\t\t\tvalue._removeReference();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._data = null;\r\n\t\tthis._gammaColorMap.clear();\r\n\t\tthis._gammaColorMap = null;\r\n\t\t// // 使用对象解析\r\n\t\tdelete this._uniformBufferDatas;\r\n\t\tdelete this._uniformBuffersMap;\r\n\t\tthis._uniformBufferDatas = null;\r\n\t\tthis._uniformBuffersMap = null;\r\n\t}\r\n}\r\n\r\n","import { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { IShaderInstance } from \"../../DriverDesign/RenderDevice/IShaderInstance\";\r\nimport { IShaderPassData } from \"../Design/IShaderPassData\";\r\nimport { RenderState } from \"../Design/RenderState\";\r\nimport { WebDefineDatas } from \"./WebDefineDatas\";\r\n\r\nexport class WebShaderPass implements IShaderPassData {\r\n    is2D: boolean;\r\n    pipelineMode: string;\r\n    statefirst: boolean;\r\n    private _validDefine: WebDefineDatas;\r\n    private _renderState: RenderState;\r\n    public get renderState(): RenderState {\r\n        return this._renderState;\r\n    }\r\n    public set renderState(value: RenderState) {\r\n        this._renderState = value;\r\n    }\r\n    /** @internal */\r\n    protected _cacheShaderHierarchy: number = 1;\r\n\r\n    public get validDefine(): WebDefineDatas {\r\n        return this._validDefine;\r\n    }\r\n    public set validDefine(value: WebDefineDatas) {\r\n        this._validDefine = value;\r\n    }\r\n    /** @internal */\r\n    protected _cacheSharders: { [key: number]: { [key: number]: { [key: number]: IShaderInstance } } } = {};\r\n\r\n    constructor(pass: ShaderPass) {\r\n        this._renderState = new RenderState();\r\n        this._renderState.setNull();\r\n    }\r\n    /**\r\n    * @internal\r\n    */\r\n    _resizeCacheShaderMap(cacheMap: any, hierarchy: number, resizeLength: number): void {\r\n        var end: number = this._cacheShaderHierarchy - 1;\r\n        if (hierarchy == end) {\r\n            for (var k in cacheMap) {\r\n                var shader = cacheMap[k];\r\n                for (var i: number = 0, n: number = resizeLength - end; i < n; i++) {\r\n                    if (i == n - 1)\r\n                        cacheMap[0] = shader;//0替代(i == 0 ? k : 0),只扩不缩\r\n                    else\r\n                        cacheMap = cacheMap[i == 0 ? k : 0] = {};\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            ++hierarchy;\r\n            for (var k in cacheMap)\r\n                this._resizeCacheShaderMap(cacheMap[k], hierarchy, resizeLength);\r\n        }\r\n    }\r\n\r\n\r\n    setCacheShader(compileDefine: WebDefineDatas, shader: IShaderInstance): void {\r\n        var cacheShaders: any = this._cacheSharders;\r\n        var mask: Array<number> = compileDefine._mask;\r\n        var endIndex: number = compileDefine._length - 1;\r\n        var maxEndIndex: number = this._cacheShaderHierarchy - 1;\r\n        for (var i: number = 0; i < maxEndIndex; i++) {\r\n            var subMask: number = endIndex < i ? 0 : mask[i];\r\n            var subCacheShaders = cacheShaders[subMask];\r\n            (subCacheShaders) || (cacheShaders[subMask] = subCacheShaders = {});\r\n            cacheShaders = subCacheShaders;\r\n        }\r\n        var cacheKey: number = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\r\n        cacheShaders[cacheKey] = shader;\r\n    }\r\n\r\n    getCacheShader(compileDefine: WebDefineDatas): IShaderInstance {\r\n        compileDefine._intersectionDefineDatas(this._validDefine);//去掉没有用到的宏对变量的影响\r\n        var cacheShaders: any = this._cacheSharders;\r\n        var maskLength: number = compileDefine._length;\r\n        if (maskLength > this._cacheShaderHierarchy) {//扩充已缓存ShaderMap\r\n            this._resizeCacheShaderMap(cacheShaders, 0, maskLength);\r\n            this._cacheShaderHierarchy = maskLength;\r\n        }\r\n        var mask: Array<number> = compileDefine._mask;\r\n        var endIndex: number = compileDefine._length - 1;\r\n        var maxEndIndex: number = this._cacheShaderHierarchy - 1;\r\n        for (var i: number = 0; i < maxEndIndex; i++) {\r\n            var subMask: number = endIndex < i ? 0 : mask[i];\r\n            var subCacheShaders = cacheShaders[subMask];\r\n            (subCacheShaders) || (cacheShaders[subMask] = subCacheShaders = {});\r\n            cacheShaders = subCacheShaders;\r\n        }\r\n\r\n        var cacheKey: number = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\r\n        var shader: IShaderInstance = cacheShaders[cacheKey];\r\n        return shader;\r\n    }\r\n\r\n    destroy(): void {\r\n        //删除所有shader TODO\r\n    }\r\n\r\n}","import { ISubshaderData } from \"../Design/ISubShaderData\";\r\nimport { WebShaderPass } from \"./WebShaderPass\";\r\n\r\nexport class WebSubShader implements ISubshaderData {\r\n    enableInstance: boolean;\r\n    destroy(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    addShaderPass(pass: WebShaderPass): void { }\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IShaderPassData } from \"../Design/IShaderPassData\";\r\nimport { IUnitRenderModuleDataFactory } from \"../Design/IUnitRenderModuleDataFactory\";\r\nimport { RenderState } from \"../Design/RenderState\";\r\nimport { WebDefineDatas } from \"./WebDefineDatas\";\r\nimport { WebShaderPass } from \"./WebShaderPass\";\r\nimport { WebSubShader } from \"./WebSubShader\";\r\n\r\nexport class WebUnitRenderModuleDataFactory implements IUnitRenderModuleDataFactory {\r\n    createSubShader(): WebSubShader {\r\n        return new WebSubShader();\r\n    }\r\n    createShaderPass(pass: ShaderPass): IShaderPassData {\r\n        return new WebShaderPass(pass);\r\n    }\r\n\r\n    createRenderState(): RenderState {\r\n        return new RenderState();\r\n    }\r\n\r\n    createDefineDatas(): WebDefineDatas {\r\n        return new WebDefineDatas();\r\n    }\r\n}\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!LayaGL.unitRenderModuleDataFactory)\r\n        LayaGL.unitRenderModuleDataFactory = new WebUnitRenderModuleDataFactory();\r\n})","\r\nimport { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { VertexDeclaration, VertexStateContext } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { IVertexBuffer } from \"../../DriverDesign/RenderDevice/IVertexBuffer\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { GLBuffer } from \"./WebGLEngine/GLBuffer\";\r\n\r\nexport class WebGLVertexBuffer implements IVertexBuffer {\r\n    _glBuffer: GLBuffer;\r\n\r\n    private _vertexDeclaration: VertexDeclaration;\r\n\r\n    /**@internal */\r\n    _shaderValues: { [key: number]: VertexStateContext };\r\n\r\n    public get vertexDeclaration(): VertexDeclaration {\r\n        return this._vertexDeclaration;\r\n    }\r\n\r\n    public set vertexDeclaration(value: VertexDeclaration) {\r\n        this._vertexDeclaration = value;\r\n        this._shaderValues = this._vertexDeclaration._shaderValues;\r\n    }\r\n\r\n    instanceBuffer: boolean;\r\n\r\n    constructor(targetType: BufferTargetType, bufferUsageType: BufferUsage) {\r\n        this._glBuffer = WebGLEngine.instance.createBuffer(targetType, bufferUsageType) as GLBuffer;\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_VertexBuffer, 1);\r\n    }\r\n\r\n    private _changeMemory(bytelength: number) {\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.M_VertexBuffer, -this._glBuffer._byteLength+bytelength);\r\n    }\r\n\r\n    setDataLength(byteLength: number): void {\r\n        this._changeMemory(byteLength);\r\n        this._glBuffer.setDataLength(byteLength);\r\n    }\r\n\r\n    setData(buffer: ArrayBuffer, bufferOffset: number, dataStartIndex: number, dataCount: number): void {\r\n        this.bind();\r\n        var needSubData: boolean = dataStartIndex !== 0 || dataCount !== Number.MAX_SAFE_INTEGER;\r\n        if (needSubData) {\r\n            var subData: Uint8Array = new Uint8Array(buffer, dataStartIndex, dataCount);\r\n            this._glBuffer.setData(subData, bufferOffset);\r\n        } else {\r\n            this._glBuffer.setData(buffer, bufferOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    bind(): boolean {\r\n        return this._glBuffer.bindBuffer();\r\n    }\r\n\r\n    unbind(): void {\r\n        return this._glBuffer.unbindBuffer();\r\n    }\r\n\r\n    /**\r\n     * 剥离内存块存储。\r\n     */\r\n    orphanStorage(): void {\r\n        this.bind();\r\n        this._glBuffer.setDataLength(this._glBuffer._byteLength);\r\n    }\r\n\r\n    destroy(): void {\r\n        this._glBuffer.destroy();\r\n        this._vertexDeclaration = null\r\n        this._changeMemory(0);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_VertexBuffer, -1);\r\n    }\r\n\r\n}","import { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Command } from \"../../../d3/core/render/command/Command\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { IRenderContext2D } from \"../../DriverDesign/2DRenderPass/IRenderContext2D\";\r\nimport { ShaderDataType } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\n\r\nimport { RenderState } from \"../../RenderModuleData/Design/RenderState\";\r\nimport { WebDefineDatas } from \"../../RenderModuleData/WebModuleData/WebDefineDatas\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLInternalRT } from \"../RenderDevice/WebGLInternalRT\";\r\nimport { WebGLRenderGeometryElement } from \"../RenderDevice/WebGLRenderGeometryElement\";\r\nimport { WebGLVertexBuffer } from \"../RenderDevice/WebGLVertexBuffer\";\r\nimport { WebGLRenderelement2D } from \"./WebGLRenderElement2D\";\r\n\r\nexport class WebglRenderContext2D implements IRenderContext2D {\r\n    //兼容ConchWebGL\r\n    static isCreateBlitScreenELement = false;\r\n    //兼容ConchWebGL\r\n    static blitScreenElement: WebGLRenderelement2D;\r\n    static blitContext: WebglRenderContext2D;\r\n\r\n    private _clearColor: Color = new Color(0, 0, 0, 0);\r\n    _destRT: WebGLInternalRT;\r\n    invertY: boolean = false;\r\n    pipelineMode: string = \"Forward\";\r\n    sceneData: WebGLShaderData;\r\n    _globalConfigShaderData: WebDefineDatas;\r\n\r\n    private _offscreenWidth: number;\r\n    private _offscreenHeight: number;\r\n\r\n    constructor() {\r\n        this._globalConfigShaderData = Shader3D._configDefineValues;\r\n        if (LayaEnv.isConch && !WebglRenderContext2D.isCreateBlitScreenELement) {\r\n            (!WebglRenderContext2D.isCreateBlitScreenELement) && this.setBlitScreenElement();\r\n            WebglRenderContext2D.blitContext = new WebglRenderContext2D();\r\n            let engine = LayaGL.renderEngine as WebGLEngine;\r\n            engine.on(\"endFrame\", () => {\r\n                let last_main_frame_buffer = WebGLEngine._lastFrameBuffer_WebGLOBJ;\r\n                let last_main_frame = WebGLEngine._lastFrameBuffer;\r\n                WebGLEngine._lastFrameBuffer_WebGLOBJ = null;\r\n                WebGLEngine._lastFrameBuffer = null;\r\n                WebglRenderContext2D.blitContext.setOffscreenView((engine as WebGLEngine).getInnerWidth(), (engine as WebGLEngine).getInnerHeight());\r\n\r\n                WebglRenderContext2D.blitContext.setRenderTarget(null, true, Color.BLACK);\r\n                WebglRenderContext2D.blitScreenElement.materialShaderData._setInternalTexture(Shader3D.propertyNameToID(\"u_MainTex\"), last_main_frame._textures[0]);\r\n                WebglRenderContext2D.blitContext.drawRenderElementOne(WebglRenderContext2D.blitScreenElement);\r\n                WebGLEngine._lastFrameBuffer_WebGLOBJ = last_main_frame_buffer;\r\n                WebGLEngine._lastFrameBuffer = last_main_frame;\r\n                WebGLEngine.instance.getTextureContext().bindRenderTarget(last_main_frame);\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 兼容ConchWebGL\r\n     */\r\n    private setBlitScreenElement() {\r\n        let blitScreenElement = LayaGL.render2DRenderPassFactory.createRenderElement2D();\r\n        let shaderData = LayaGL.renderDeviceFactory.createShaderData();\r\n        let _vertices: Float32Array = new Float32Array([\r\n            1, 1, 1, 1,\r\n            1, -1, 1, 0,\r\n            -1, 1, 0, 1,\r\n            -1, -1, 0, 0]);\r\n\r\n        let _vertexBuffer = new WebGLVertexBuffer(BufferTargetType.ARRAY_BUFFER, BufferUsage.Dynamic);\r\n        _vertexBuffer.setDataLength(64);\r\n        _vertexBuffer.setData(_vertices.buffer, 0, 0, _vertices.buffer.byteLength);\r\n        let declaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, 0)]);\r\n        _vertexBuffer.vertexDeclaration = declaration;\r\n        let geometry = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.TriangleStrip, DrawType.DrawArray);\r\n        geometry.setDrawArrayParams(0, 4);\r\n        let bufferState = LayaGL.renderDeviceFactory.createBufferState();\r\n        bufferState.applyState([_vertexBuffer], null);\r\n        geometry.bufferState = bufferState;\r\n\r\n        //Shader\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_PositionTexcoord': [0, ShaderDataType.Vector4]\r\n        }\r\n        let uniformMap = {\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n        };\r\n        let shader = Shader3D.add(\"GLESblitScreen\", false, false);\r\n        shader.shaderType = ShaderFeatureType.D2;\r\n        let subShader = new SubShader(attributeMap, uniformMap, {});\r\n        shader.addSubShader(subShader);\r\n        let vs = `\r\n            #define SHADER_NAME GLESblitScreenVS\r\n\r\n            varying vec2 v_Texcoord0;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = vec4(- 1.0 + (a_PositionTexcoord.x + 1.0), (1.0 - ((- 1.0 + (-a_PositionTexcoord.y + 1.0)) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\r\n\r\n                v_Texcoord0 = a_PositionTexcoord.zw;\r\n            }\r\n        `\r\n        let fs = `\r\n            #define SHADER_NAME GLESblitScreenFS\r\n\r\n            #include \"Color.glsl\";\r\n\r\n            varying vec2 v_Texcoord0;\r\n\r\n            void main()\r\n            {\r\n                vec4 mainColor = texture2D(u_MainTex, v_Texcoord0);\r\n               \r\n                gl_FragColor = mainColor;\r\n            }\r\n        `\r\n        let pass = subShader.addShaderPass(vs, fs);\r\n        pass.statefirst = true;\r\n        let blitState = pass.renderState;\r\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        blitState.depthWrite = false;\r\n        blitState.cull = RenderState.CULL_NONE;\r\n        blitState.blend = RenderState.BLEND_DISABLE;\r\n        blitState.stencilRef = 1;\r\n        blitState.stencilTest = RenderState.STENCILTEST_OFF;\r\n        blitState.stencilWrite = false;\r\n        blitState.stencilOp = new Vector3(RenderState.STENCILOP_KEEP, RenderState.STENCILOP_KEEP, RenderState.STENCILOP_REPLACE);\r\n\r\n\r\n        blitScreenElement.geometry = geometry as WebGLRenderGeometryElement;\r\n        blitScreenElement.materialShaderData = shaderData as WebGLShaderData;\r\n        blitScreenElement.subShader = subShader;\r\n        blitScreenElement.renderStateIsBySprite = false;\r\n\r\n\r\n        WebglRenderContext2D.isCreateBlitScreenELement = true;\r\n        WebglRenderContext2D.blitScreenElement = blitScreenElement as WebGLRenderelement2D;\r\n    }\r\n\r\n    drawRenderElementList(list: FastSinglelist<WebGLRenderelement2D>): number {\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            let element = list.elements[i];\r\n            element._prepare(this);//render\r\n        }\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            let element = list.elements[i];\r\n            element._render(this);//render\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    setOffscreenView(width: number, height: number): void {\r\n        this._offscreenWidth = width;\r\n        this._offscreenHeight = height;\r\n    }\r\n\r\n    setRenderTarget(value: WebGLInternalRT, clear: boolean, clearColor: Color): void {\r\n        this._destRT = value;\r\n        clearColor.cloneTo(this._clearColor);\r\n        if (this._destRT) {\r\n            WebGLEngine.instance.getTextureContext().bindRenderTarget(this._destRT);\r\n            WebGLEngine.instance.viewport(0, 0, this._destRT._textures[0].width, this._destRT._textures[0].height);\r\n        } else {\r\n            WebGLEngine.instance.getTextureContext().bindoutScreenTarget();\r\n            WebGLEngine.instance.viewport(0, 0, this._offscreenWidth, this._offscreenHeight);\r\n        }\r\n        WebGLEngine.instance.scissorTest(false);\r\n        WebGLEngine.instance.clearRenderTexture(clear ? RenderClearFlag.Color : RenderClearFlag.Nothing, this._clearColor);\r\n    }\r\n\r\n    drawRenderElementOne(node: WebGLRenderelement2D): void {\r\n        node._prepare(this);\r\n        node._render(this);\r\n    }\r\n\r\n}","import { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { ShaderDefines2D } from \"../../../webgl/shader/d2/ShaderDefines2D\";\r\nimport { IRenderElement2D } from \"../../DriverDesign/2DRenderPass/IRenderElement2D\";\r\nimport { WebDefineDatas } from \"../../RenderModuleData/WebModuleData/WebDefineDatas\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLRenderGeometryElement } from \"../RenderDevice/WebGLRenderGeometryElement\";\r\nimport { WebGLShaderInstance } from \"../RenderDevice/WebGLShaderInstance\";\r\nimport { WebglRenderContext2D } from \"./WebGLRenderContext2D\";\r\n\r\nexport class WebGLRenderelement2D implements IRenderElement2D {\r\n    renderStateIsBySprite: boolean = true;\r\n\r\n\r\n    /** @internal */\r\n    static _compileDefine: WebDefineDatas = new WebDefineDatas();\r\n    protected _shaderInstances: FastSinglelist<WebGLShaderInstance> = new FastSinglelist<WebGLShaderInstance>();\r\n    geometry: WebGLRenderGeometryElement;\r\n    materialShaderData: WebGLShaderData;\r\n    value2DShaderData: WebGLShaderData;\r\n    subShader: SubShader;\r\n\r\n    protected _compileShader(context: WebglRenderContext2D) {\r\n        var passes: ShaderPass[] = this.subShader._passes;\r\n        this._shaderInstances.clear();\r\n\r\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\r\n            var pass: ShaderPass = passes[j];\r\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\r\n            if (pass.pipelineMode !== context.pipelineMode)\r\n                continue;\r\n\r\n            var comDef = WebGLRenderelement2D._compileDefine;\r\n\r\n            if (context.sceneData) {\r\n                context.sceneData._defineDatas.cloneTo(comDef);\r\n            } else {\r\n                context._globalConfigShaderData.cloneTo(comDef);\r\n            }\r\n            let returnGamma: boolean = !(context._destRT) || ((context._destRT)._textures[0].gammaCorrection != 1);\r\n            if (returnGamma) {\r\n                comDef.add(ShaderDefines2D.GAMMASPACE);\r\n            } else {\r\n                comDef.remove(ShaderDefines2D.GAMMASPACE);\r\n            }\r\n\r\n            if (context.invertY) {\r\n                comDef.add(ShaderDefines2D.INVERTY);\r\n            } else {\r\n                comDef.remove(ShaderDefines2D.INVERTY);\r\n            }\r\n\r\n            if (this.value2DShaderData) {\r\n                comDef.addDefineDatas(this.value2DShaderData.getDefineData());\r\n            }\r\n            if (this.materialShaderData)\r\n                comDef.addDefineDatas(this.materialShaderData._defineDatas);\r\n\r\n            var shaderIns = pass.withCompile(comDef, true) as WebGLShaderInstance;\r\n            this._shaderInstances.add(shaderIns);\r\n        }\r\n    }\r\n    _prepare(context: WebglRenderContext2D) {\r\n        this._compileShader(context);\r\n    }\r\n\r\n    _render(context: WebglRenderContext2D) {\r\n        if (this._shaderInstances.length == 1) {\r\n            this.renderByShaderInstance(this._shaderInstances.elements[0], context)\r\n        } else {\r\n            var passes: WebGLShaderInstance[] = this._shaderInstances.elements;\r\n            for (var j: number = 0, m: number = this._shaderInstances.length; j < m; j++) {\r\n                this.renderByShaderInstance(passes[j], context);\r\n            }\r\n        }\r\n    }\r\n\r\n    renderByShaderInstance(shader: WebGLShaderInstance, context: WebglRenderContext2D) {\r\n        if (!shader.complete)\r\n            return\r\n        shader.bind();\r\n        this.value2DShaderData && shader.uploadUniforms(shader._sprite2DUniformParamsMap, this.value2DShaderData, true);\r\n        context.sceneData && shader.uploadUniforms(shader._sceneUniformParamsMap, context.sceneData, true);\r\n        this.materialShaderData && shader.uploadUniforms(shader._materialUniformParamsMap, this.materialShaderData, true);\r\n        //blend\r\n        if (this.renderStateIsBySprite || !this.materialShaderData) {\r\n            shader.uploadRenderStateBlendDepth(this.value2DShaderData);\r\n            shader.uploadRenderStateFrontFace(this.value2DShaderData, false, context.invertY);\r\n        } else {\r\n            shader.uploadRenderStateBlendDepth(this.materialShaderData);\r\n            shader.uploadRenderStateFrontFace(this.materialShaderData, false, context.invertY);\r\n        }\r\n\r\n        WebGLEngine.instance.getDrawContext().drawGeometryElement(this.geometry)\r\n    }\r\n    destroy(): void {\r\n        //TODO\r\n    }\r\n\r\n\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { I2DRenderPassFactory } from \"../../DriverDesign/2DRenderPass/I2DRenderPassFactory\";\r\nimport { IRenderContext2D } from \"../../DriverDesign/2DRenderPass/IRenderContext2D\";\r\nimport { IRenderElement2D } from \"../../DriverDesign/2DRenderPass/IRenderElement2D\";\r\nimport { WebglRenderContext2D } from \"./WebGLRenderContext2D\";\r\nimport { WebGLRenderelement2D } from \"./WebGLRenderElement2D\";\r\n\r\nexport class WebGLRender2DProcess implements I2DRenderPassFactory {\r\n    createRenderElement2D(): IRenderElement2D {\r\n        return new WebGLRenderelement2D();\r\n    }\r\n    createRenderContext2D(): IRenderContext2D {\r\n        return new WebglRenderContext2D();\r\n    }\r\n\r\n}\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!LayaGL.render2DRenderPassFactory)\r\n        LayaGL.render2DRenderPassFactory = new WebGLRender2DProcess();\r\n});","import { IBufferState } from \"../../DriverDesign/RenderDevice/IBufferState\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { GLVertexState } from \"./WebGLEngine/GLVertexState\";\r\nimport { WebGLIndexBuffer } from \"./WebGLIndexBuffer\";\r\nimport { WebGLVertexBuffer } from \"./WebGLVertexBuffer\";\r\n\r\nexport class WebGLBufferState implements IBufferState {\r\n    static _curBindedBufferState: WebGLBufferState;\r\n    _glVertexState: GLVertexState;\r\n    _bindedIndexBuffer: WebGLIndexBuffer;\r\n    _vertexBuffers: WebGLVertexBuffer[];\r\n    constructor() {\r\n        this._glVertexState = WebGLEngine.instance.createVertexState();\r\n    }\r\n\r\n    \r\n\tprivate applyVertexBuffers(): void {\r\n\t\tthis._glVertexState.applyVertexBuffer(this._vertexBuffers);\r\n\t}\r\n\r\n\tprotected applyIndexBuffers(): void {\r\n\t\tthis._glVertexState.applyIndexBuffer(this._bindedIndexBuffer);\r\n\t}\r\n\r\n    applyState(vertexBuffers: WebGLVertexBuffer[], indexBuffer: WebGLIndexBuffer): void {\r\n        this._vertexBuffers = vertexBuffers.slice();\r\n        this._bindedIndexBuffer = indexBuffer;\r\n        indexBuffer && indexBuffer._glBuffer.unbindBuffer();//清空绑定\r\n        this.bind();\r\n        this.applyVertexBuffers();\r\n        this.applyIndexBuffers();\r\n        this.unBind();\r\n        indexBuffer && indexBuffer._glBuffer.unbindBuffer();//清空绑定\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    bind(): void {\r\n        this._glVertexState.bindVertexArray();\r\n        WebGLBufferState._curBindedBufferState = this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    unBind(): void {\r\n        if (WebGLBufferState._curBindedBufferState == this) {\r\n            this._glVertexState.unbindVertexArray();\r\n            WebGLBufferState._curBindedBufferState = null;\r\n        } else {\r\n            throw \"BufferState: must call bind() function first.\";\r\n        }\r\n    }\r\n\r\n    isBind(): boolean {\r\n        return (WebGLBufferState._curBindedBufferState == this);\r\n    }\r\n\r\n    destroy(): void {\r\n        if (WebGLBufferState._curBindedBufferState == this) {\r\n            this._glVertexState.unbindVertexArray();\r\n            WebGLBufferState._curBindedBufferState = null;\r\n        }        \r\n        this._glVertexState.destroy();\r\n        this._vertexBuffers = null;\r\n        this._bindedIndexBuffer = null;\r\n    }\r\n\r\n}","import { CommandUniformMap, UniformProperty } from \"../../DriverDesign/RenderDevice/CommandUniformMap\";\r\nimport { ShaderDataType } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\n\r\nexport class WebGLCommandUniformMap extends CommandUniformMap {\r\n\r\n    /**@internal */\r\n    _idata: {\r\n        [key: number]: {\r\n            block: string,\r\n            propertyName: string,\r\n            arrayLength: number, //兼容WGSL\r\n            uniformtype: ShaderDataType,\r\n            blockProperty: UniformProperty[]//block property,if not in block  lenth = 0\r\n        }\r\n    } = {};\r\n    _stateName: string;\r\n\r\n    constructor(stateName: string) {\r\n        super(stateName);\r\n        this._stateName = stateName;\r\n    }\r\n\r\n    hasPtrID(propertyID: number): boolean {\r\n        return !!(this._idata[propertyID] != null);\r\n    }\r\n\r\n    /**\r\n     * 增加一个Uniform参数，如果Uniform属性是Array，请使用addShaderUniformArray\r\n     * @internal\r\n     * @param propertyID \r\n     * @param propertyKey \r\n     */\r\n    addShaderUniform(propertyID: number, propertyKey: string, uniformtype: ShaderDataType, block: string = \"\"): void {\r\n        this._idata[propertyID] = { uniformtype: uniformtype, propertyName: propertyKey, arrayLength: 0, block: block, blockProperty: null };\r\n    }\r\n\r\n    /**\r\n     * 增加一个UniformArray参数\r\n     * @internal\r\n     * @param propertyID \r\n     * @param propertyName \r\n     */\r\n    addShaderUniformArray(propertyID: number, propertyName: string, uniformtype: ShaderDataType, arrayLength: number, block: string = \"\"): void {\r\n        if (uniformtype !== ShaderDataType.Matrix4x4 && uniformtype !== ShaderDataType.Vector4)\r\n            throw ('because of align rule, the engine does not support other types as arrays.');\r\n        this._idata[propertyID] = { uniformtype, propertyName, arrayLength, block, blockProperty: null };\r\n    } //兼容WGSL\r\n\r\n    /**\r\n     * 增加一个Uniform\r\n     * @param propertyID \r\n     * @param propertyKey \r\n     */\r\n    addShaderBlockUniform(propertyID: number, blockname: string, blockProperty: UniformProperty[]): void {\r\n        this._idata[propertyID] = { propertyName: blockname, arrayLength: 0, blockProperty: blockProperty, uniformtype: ShaderDataType.None, block: \"\" };\r\n        blockProperty.forEach(element => {\r\n            this.addShaderUniform(element.id, element.propertyName, element.uniformtype, blockname);\r\n        });\r\n    }\r\n}","\r\nimport { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { IIndexBuffer } from \"../../DriverDesign/RenderDevice/IIndexBuffer\";\r\nimport { WebGLBufferState } from \"./WebGLBufferState\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { GLBuffer } from \"./WebGLEngine/GLBuffer\";\r\n\r\nexport class WebGLIndexBuffer implements IIndexBuffer {\r\n    _glBuffer: GLBuffer;\r\n    indexType: IndexFormat;\r\n    indexCount: number;\r\n\r\n    constructor(targetType: BufferTargetType, bufferUsageType: BufferUsage) {\r\n        this._glBuffer = this._glBuffer = WebGLEngine.instance.createBuffer(targetType, bufferUsageType) as GLBuffer;\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_IndexBuffer, 1);\r\n    }\r\n\r\n    private _changeMemory(bytelength: number) {\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.M_IndexBuffer, -this._glBuffer._byteLength + bytelength);\r\n    }\r\n    \r\n    _setIndexDataLength(data: number): void {\r\n        this._changeMemory(data);\r\n        var curBufSta = WebGLBufferState._curBindedBufferState;\r\n        if (curBufSta) {\r\n            curBufSta.unBind();//避免影响VAO\r\n            this._glBuffer.bindBuffer()\r\n            this._glBuffer.setDataLength(data);\r\n            curBufSta.bind();\r\n        } else {\r\n            this._glBuffer.bindBuffer()\r\n            this._glBuffer.setDataLength(data);\r\n        }\r\n    }\r\n\r\n    _setIndexData(data: Uint32Array | Uint16Array | Uint8Array, bufferOffset: number): void {\r\n        var curBufSta = WebGLBufferState._curBindedBufferState;\r\n        if (curBufSta) {\r\n            curBufSta.unBind();//避免影响VAO\r\n            this._glBuffer.bindBuffer()\r\n            this._glBuffer.setData(data, bufferOffset);\r\n            curBufSta.bind();\r\n        } else {\r\n            this._glBuffer.bindBuffer()\r\n            this._glBuffer.setData(data, bufferOffset)\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        this._glBuffer.destroy();\r\n        this._changeMemory(0);\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.RC_IndexBuffer, -1);\r\n    }\r\n}","import { IRenderGeometryElement } from \"../../DriverDesign/RenderDevice/IRenderGeometryElement\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { WebGLBufferState } from \"./WebGLBufferState\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\n\r\nexport class WebGLRenderGeometryElement implements IRenderGeometryElement {\r\n\r\n    private static _idCounter: number = 0;\r\n\r\n    /** @internal */\r\n    _id: number = ++WebGLRenderGeometryElement._idCounter;\r\n\r\n    /**@internal */\r\n    bufferState: WebGLBufferState;\r\n\r\n    /**@internal */\r\n    private _mode: MeshTopology;\r\n\r\n    /**@internal 优化使用*/\r\n    _glmode: number;\r\n\r\n    /**@internal */\r\n    drawType: DrawType;\r\n\r\n    /**@internal */\r\n    drawParams: FastSinglelist<number>;\r\n\r\n    /**@internal */\r\n    instanceCount: number;\r\n\r\n    /**@internal 优化*/\r\n    _glindexFormat: number;\r\n\r\n    /**@internal */\r\n    private _indexFormat: IndexFormat;\r\n\r\n    /**\r\n     * index format\r\n     */\r\n    get indexFormat(): IndexFormat {\r\n        return this._indexFormat;\r\n    }\r\n\r\n    set indexFormat(value: IndexFormat) {\r\n        this._indexFormat = value;\r\n        this._glindexFormat = WebGLEngine.instance.getDrawContext().getIndexType(this._indexFormat);\r\n    }\r\n\r\n    /**\r\n     * Mesh Topology mode \r\n     */\r\n    get mode(): MeshTopology {\r\n        return this._mode;\r\n    }\r\n\r\n    set mode(value: MeshTopology) {\r\n        this._mode = value;\r\n        this._glmode = WebGLEngine.instance.getDrawContext().getMeshTopology(this._mode);\r\n    }\r\n\r\n    /**@internal */\r\n    constructor(mode: MeshTopology, drawType: DrawType) {\r\n        this.mode = mode;\r\n        this.drawParams = new FastSinglelist();\r\n        this.drawType = drawType;\r\n    }\r\n\r\n    /**@internal */\r\n    setDrawArrayParams(first: number, count: number): void {\r\n        this.drawParams.add(first);\r\n        this.drawParams.add(count);\r\n    }\r\n\r\n    /**@internal */\r\n    setDrawElemenParams(count: number, offset: number): void {\r\n        this.drawParams.add(offset);\r\n        this.drawParams.add(count);\r\n\r\n    }\r\n\r\n    /**@internal */\r\n    destroy(): void {\r\n        delete this.drawParams;\r\n    }\r\n    /**@internal */\r\n    clearRenderParams() {\r\n        this.drawParams.length = 0;\r\n    }\r\n\r\n    cloneTo(obj: WebGLRenderGeometryElement) {\r\n        obj.mode = this.mode;\r\n        obj.drawType = this.drawType;\r\n        obj.indexFormat = this.indexFormat;\r\n        obj.instanceCount = this.instanceCount;\r\n        obj.drawParams.elements = this.drawParams.elements.slice();\r\n        obj.drawParams.length = this.drawParams.length;\r\n    }\r\n}","\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { GLSLCodeGenerator } from \"../../../RenderEngine/RenderShader/GLSLCodeGenerator\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { ShaderVariable } from \"../../../RenderEngine/RenderShader/ShaderVariable\";\r\nimport { RenderStateContext } from \"../../../RenderEngine/RenderStateContext\";\r\nimport { CommandEncoder } from \"../../../layagl/CommandEncoder\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { ShaderCompileDefineBase, ShaderProcessInfo } from \"../../../webgl/utils/ShaderCompileDefineBase\";\r\nimport { IShaderInstance } from \"../../DriverDesign/RenderDevice/IShaderInstance\";\r\nimport { RenderState } from \"../../RenderModuleData/Design/RenderState\";\r\nimport { ShaderData } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { WebGLCommandUniformMap } from \"./WebGLCommandUniformMap\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { GLShaderInstance } from \"./WebGLEngine/GLShaderInstance\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { GPUEngineStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\n\r\n/**\r\n * <code>ShaderInstance</code> 类用于实现ShaderInstance。\r\n */\r\nexport class WebGLShaderInstance implements IShaderInstance {\r\n    /**@internal */\r\n    private _shaderPass: ShaderCompileDefineBase | ShaderPass;\r\n\r\n    private _renderShaderInstance: GLShaderInstance;\r\n\r\n    /**@internal */\r\n    _sceneUniformParamsMap: CommandEncoder;\r\n    /**@internal */\r\n    _cameraUniformParamsMap: CommandEncoder;\r\n    /**@internal */\r\n    _spriteUniformParamsMap: CommandEncoder;\r\n    /**@internal */\r\n    _materialUniformParamsMap: CommandEncoder;\r\n    /**@internal */\r\n    _sprite2DUniformParamsMap: CommandEncoder;\r\n    /**@internal */\r\n    private _customUniformParamsMap: any[] = [];\r\n\r\n    /**@internal */\r\n    _uploadMark: number = -1;\r\n    /**@internal */\r\n    _uploadMaterial: ShaderData;\r\n    /**@internal RenderIDTODO*/\r\n    _uploadRender: any;\r\n    /** @internal */\r\n    _uploadRenderType: number = -1;\r\n    /**@internal CamneraTOD*/\r\n    _uploadCameraShaderValue: ShaderData;\r\n    /**@internal SceneIDTODO*/\r\n    _uploadScene: ShaderData;\r\n\r\n    /**\r\n     * 创建一个 <code>ShaderInstance</code> 实例。\r\n     */\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * get complete\r\n     */\r\n    get complete(): boolean {\r\n        return this._renderShaderInstance._complete;\r\n    }\r\n\r\n    _create(shaderProcessInfo: ShaderProcessInfo, shaderPass: ShaderPass): void {\r\n        let shaderObj = GLSLCodeGenerator.GLShaderLanguageProcess3D(shaderProcessInfo.defineString, shaderProcessInfo.attributeMap, shaderProcessInfo.uniformMap, shaderProcessInfo.vs, shaderProcessInfo.ps);\r\n        this._renderShaderInstance = WebGLEngine.instance.createShaderInstance(shaderObj.vs, shaderObj.fs, shaderProcessInfo.attributeMap);\r\n        if (this._renderShaderInstance._complete) {\r\n            this._shaderPass = shaderPass;\r\n            shaderProcessInfo.is2D ? this._create2D() : this._create3D();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create3D(): void {\r\n        this._sceneUniformParamsMap = new CommandEncoder();\r\n        this._cameraUniformParamsMap = new CommandEncoder();\r\n        this._spriteUniformParamsMap = new CommandEncoder();\r\n        this._materialUniformParamsMap = new CommandEncoder();\r\n        const sceneParams = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Scene3D\") as WebGLCommandUniformMap;\r\n        //const spriteParms = LayaGL.renderOBJCreate.createGlobalUniformMap(\"Sprite3D\");//分开，根据不同的Render\r\n        const cameraParams = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"BaseCamera\") as WebGLCommandUniformMap;\r\n        const customParams = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Custom\") as WebGLCommandUniformMap;\r\n        let i, n;\r\n        let data: ShaderVariable[] = this._renderShaderInstance.getUniformMap();\r\n        for (i = 0, n = data.length; i < n; i++) {\r\n            let one: ShaderVariable = data[i];\r\n            if (sceneParams.hasPtrID(one.dataOffset)) {\r\n                this._sceneUniformParamsMap.addShaderUniform(one);\r\n            } else if (cameraParams.hasPtrID(one.dataOffset)) {\r\n                this._cameraUniformParamsMap.addShaderUniform(one);\r\n            } else if (this.hasSpritePtrID(one.dataOffset)) {\r\n                this._spriteUniformParamsMap.addShaderUniform(one);\r\n            } else if (customParams.hasPtrID(one.dataOffset)) {\r\n                this._customUniformParamsMap || (this._customUniformParamsMap = []);\r\n                this._customUniformParamsMap[one.dataOffset] = one;\r\n            } else {\r\n                this._materialUniformParamsMap.addShaderUniform(one);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create2D(): void {\r\n        this._sprite2DUniformParamsMap = new CommandEncoder();\r\n        this._materialUniformParamsMap = new CommandEncoder();\r\n        this._sceneUniformParamsMap = new CommandEncoder();\r\n        const sprite2DParms = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Sprite2D\") as WebGLCommandUniformMap;//分开，根据不同的Render\r\n        const sceneParms = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Sprite2DGlobal\") as WebGLCommandUniformMap;//分开，根据不同的Render\r\n        let i, n;\r\n        let data: ShaderVariable[] = this._renderShaderInstance.getUniformMap();\r\n        for (i = 0, n = data.length; i < n; i++) {\r\n            let one: ShaderVariable = data[i];\r\n            if (sprite2DParms.hasPtrID(one.dataOffset)) {\r\n                this._sprite2DUniformParamsMap.addShaderUniform(one);\r\n            } else if (sceneParms.hasPtrID(one.dataOffset)) {\r\n                this._sceneUniformParamsMap.addShaderUniform(one);\r\n            }\r\n            else {\r\n                this._materialUniformParamsMap.addShaderUniform(one);\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasSpritePtrID(dataOffset: number): boolean {\r\n        let commap = this._shaderPass.nodeCommonMap;\r\n        if (!commap) {\r\n            return false;\r\n        } else {\r\n            for (let i = 0, n = commap.length; i < n; i++) {\r\n                if ((LayaGL.renderDeviceFactory.createGlobalUniformMap(commap[i]) as WebGLCommandUniformMap).hasPtrID(dataOffset))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    _disposeResource(): void {\r\n        this._renderShaderInstance.destroy();\r\n        this._sceneUniformParamsMap = null;\r\n        this._cameraUniformParamsMap = null;\r\n        this._spriteUniformParamsMap = null;\r\n        this._materialUniformParamsMap = null\r\n        this._customUniformParamsMap = null;\r\n\r\n        this._uploadMaterial = null;\r\n        this._uploadRender = null;\r\n        this._uploadCameraShaderValue = null;\r\n        this._uploadScene = null;\r\n    }\r\n\r\n    /**\r\n     * apply shader programe\r\n     * @returns \r\n     */\r\n    bind() {\r\n        return this._renderShaderInstance.bind();\r\n    }\r\n\r\n    /**\r\n     * upload uniform data\r\n     * @param shaderUniform \r\n     * @param shaderDatas \r\n     * @param uploadUnTexture \r\n     */\r\n    uploadUniforms(shaderUniform: CommandEncoder, shaderDatas: WebGLShaderData, uploadUnTexture: boolean) {\r\n        WebGLEngine.instance._addStatisticsInfo(GPUEngineStatisticsInfo.C_UniformBufferUploadCount, WebGLEngine.instance.uploadUniforms(this._renderShaderInstance, shaderUniform, shaderDatas, uploadUnTexture));\r\n    }\r\n\r\n    /**\r\n     * set blend depth stencil RenderState\r\n     * @param shaderDatas \r\n     */\r\n    uploadRenderStateBlendDepth(shaderDatas: WebGLShaderData): void {\r\n        if ((<ShaderPass>this._shaderPass).statefirst)\r\n            this.uploadRenderStateBlendDepthByShader(shaderDatas);\r\n        else\r\n            this.uploadRenderStateBlendDepthByMaterial(shaderDatas);\r\n    }\r\n\r\n    /**\r\n     * set blend depth stencil RenderState frome Shader\r\n     * @param shaderDatas \r\n     */\r\n    uploadRenderStateBlendDepthByShader(shaderDatas: WebGLShaderData) {\r\n        var datas: any = shaderDatas._data;\r\n        var renderState: RenderState = (<ShaderPass>this._shaderPass).renderState;\r\n        var depthWrite: any = (renderState.depthWrite ?? datas[Shader3D.DEPTH_WRITE]) ?? RenderState.Default.depthWrite;\r\n        RenderStateContext.setDepthMask(depthWrite);\r\n        var depthTest: any = (renderState.depthTest ?? datas[Shader3D.DEPTH_TEST]) ?? RenderState.Default.depthTest;\r\n        if (depthTest == RenderState.DEPTHTEST_OFF)\r\n            RenderStateContext.setDepthTest(false);\r\n        else {\r\n            RenderStateContext.setDepthTest(true);\r\n            RenderStateContext.setDepthFunc(depthTest);\r\n        }\r\n        //Stencil\r\n        var stencilWrite: any = (renderState.stencilWrite ?? datas[Shader3D.STENCIL_WRITE]) ?? RenderState.Default.stencilWrite;\r\n        var stencilTest: any = (renderState.stencilTest ?? datas[Shader3D.STENCIL_TEST]) ?? RenderState.Default.stencilTest;\r\n        RenderStateContext.setStencilMask(stencilWrite);\r\n        if (stencilWrite) {\r\n            var stencilOp: any = (renderState.stencilOp ?? datas[Shader3D.STENCIL_Op]) ?? RenderState.Default.stencilOp;\r\n            RenderStateContext.setstencilOp(stencilOp.x, stencilOp.y, stencilOp.z);\r\n        }\r\n        if (stencilTest == RenderState.STENCILTEST_OFF) {\r\n            RenderStateContext.setStencilTest(false);\r\n        }\r\n        else {\r\n            var stencilRef: any = (renderState.stencilRef ?? datas[Shader3D.STENCIL_Ref]) ?? RenderState.Default.stencilRef;\r\n            RenderStateContext.setStencilTest(true);\r\n            RenderStateContext.setStencilFunc(stencilTest, stencilRef);\r\n        }\r\n        //blend\r\n        var blend: any = (renderState.blend ?? datas[Shader3D.BLEND]) ?? RenderState.Default.blend;\r\n        switch (blend) {\r\n            case RenderState.BLEND_DISABLE:\r\n                RenderStateContext.setBlend(false);\r\n                break;\r\n            case RenderState.BLEND_ENABLE_ALL:\r\n                var blendEquation: any = (renderState.blendEquation ?? datas[Shader3D.BLEND_EQUATION]) ?? RenderState.Default.blendEquation;\r\n                var srcBlend: any = (renderState.srcBlend ?? datas[Shader3D.BLEND_SRC]) ?? RenderState.Default.srcBlend;\r\n                var dstBlend: any = (renderState.dstBlend ?? datas[Shader3D.BLEND_DST]) ?? RenderState.Default.dstBlend;\r\n                RenderStateContext.setBlend(true);\r\n                RenderStateContext.setBlendEquation(blendEquation);\r\n                RenderStateContext.setBlendFunc(srcBlend, dstBlend);\r\n                break;\r\n            case RenderState.BLEND_ENABLE_SEPERATE:\r\n                var blendEquationRGB: any = (renderState.blendEquationRGB ?? datas[Shader3D.BLEND_EQUATION_RGB]) ?? RenderState.Default.blendEquationRGB;\r\n                var blendEquationAlpha: any = (renderState.blendEquationAlpha ?? datas[Shader3D.BLEND_EQUATION_ALPHA]) ?? RenderState.Default.blendEquationAlpha;\r\n                var srcRGB: any = (renderState.srcBlendRGB ?? datas[Shader3D.BLEND_SRC_RGB]) ?? RenderState.Default.srcBlendRGB;\r\n                var dstRGB: any = (renderState.dstBlendRGB ?? datas[Shader3D.BLEND_DST_RGB]) ?? RenderState.Default.dstBlendRGB;\r\n                var srcAlpha: any = (renderState.srcBlendAlpha ?? datas[Shader3D.BLEND_SRC_ALPHA]) ?? RenderState.Default.srcBlendAlpha;\r\n                var dstAlpha: any = (renderState.dstBlendAlpha ?? datas[Shader3D.BLEND_DST_ALPHA]) ?? RenderState.Default.dstBlendAlpha;\r\n                RenderStateContext.setBlend(true);\r\n                RenderStateContext.setBlendEquationSeparate(blendEquationRGB, blendEquationAlpha);\r\n                RenderStateContext.setBlendFuncSeperate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set blend depth stencil RenderState frome Material\r\n     * @param shaderDatas \r\n     */\r\n    uploadRenderStateBlendDepthByMaterial(shaderDatas: ShaderData) {\r\n        var datas: any = shaderDatas.getData();\r\n\r\n        // depth\r\n        var depthWrite: any = datas[Shader3D.DEPTH_WRITE];\r\n        depthWrite = depthWrite ?? RenderState.Default.depthWrite;\r\n        RenderStateContext.setDepthMask(depthWrite);\r\n\r\n        var depthTest: any = datas[Shader3D.DEPTH_TEST];\r\n        depthTest = depthTest ?? RenderState.Default.depthTest;\r\n        if (depthTest === RenderState.DEPTHTEST_OFF) {\r\n            RenderStateContext.setDepthTest(false);\r\n        }\r\n        else {\r\n            RenderStateContext.setDepthTest(true);\r\n            RenderStateContext.setDepthFunc(depthTest);\r\n        }\r\n\r\n        //Stencil\r\n        var stencilWrite: any = datas[Shader3D.STENCIL_WRITE];\r\n        stencilWrite = stencilWrite ?? RenderState.Default.stencilWrite;\r\n        RenderStateContext.setStencilMask(stencilWrite);\r\n        if (stencilWrite) {\r\n            var stencilOp: any = datas[Shader3D.STENCIL_Op];\r\n            stencilOp = stencilOp ?? RenderState.Default.stencilOp;\r\n            RenderStateContext.setstencilOp(stencilOp.x, stencilOp.y, stencilOp.z);\r\n        }\r\n\r\n        var stencilTest: any = datas[Shader3D.STENCIL_TEST];\r\n        stencilTest = stencilTest ?? RenderState.Default.stencilTest;\r\n        if (stencilTest == RenderState.STENCILTEST_OFF) {\r\n            RenderStateContext.setStencilTest(false);\r\n        }\r\n        else {\r\n            var stencilRef: any = datas[Shader3D.STENCIL_Ref];\r\n            stencilRef = stencilRef ?? RenderState.Default.stencilRef;\r\n            RenderStateContext.setStencilTest(true);\r\n            RenderStateContext.setStencilFunc(stencilTest, stencilRef);\r\n        }\r\n\r\n        //blend\r\n        var blend: any = datas[Shader3D.BLEND];\r\n        blend = blend ?? RenderState.Default.blend;\r\n        switch (blend) {\r\n            case RenderState.BLEND_ENABLE_ALL:\r\n                var blendEquation: any = datas[Shader3D.BLEND_EQUATION];\r\n                blendEquation = blendEquation ?? RenderState.Default.blendEquation;\r\n                var srcBlend: any = datas[Shader3D.BLEND_SRC];\r\n                srcBlend = srcBlend ?? RenderState.Default.srcBlend;\r\n                var dstBlend: any = datas[Shader3D.BLEND_DST];\r\n                dstBlend = dstBlend ?? RenderState.Default.dstBlend;\r\n                RenderStateContext.setBlend(true);\r\n                RenderStateContext.setBlendEquation(blendEquation);\r\n                RenderStateContext.setBlendFunc(srcBlend, dstBlend);\r\n                break;\r\n            case RenderState.BLEND_ENABLE_SEPERATE:\r\n                var blendEquationRGB: any = datas[Shader3D.BLEND_EQUATION_RGB];\r\n                blendEquationRGB = blendEquationRGB ?? RenderState.Default.blendEquationRGB;\r\n\r\n                var blendEquationAlpha: any = datas[Shader3D.BLEND_EQUATION_ALPHA];\r\n                blendEquationAlpha = blendEquationAlpha ?? RenderState.Default.blendEquationAlpha;\r\n\r\n                var srcRGB: any = datas[Shader3D.BLEND_SRC_RGB];\r\n                srcRGB = srcRGB ?? RenderState.Default.srcBlendRGB;\r\n\r\n                var dstRGB: any = datas[Shader3D.BLEND_DST_RGB];\r\n                dstRGB = dstRGB ?? RenderState.Default.dstBlendRGB;\r\n\r\n                var srcAlpha: any = datas[Shader3D.BLEND_SRC_ALPHA];\r\n                srcAlpha = srcAlpha ?? RenderState.Default.srcBlendAlpha;\r\n\r\n                var dstAlpha: any = datas[Shader3D.BLEND_DST_ALPHA];\r\n                dstAlpha = dstAlpha ?? RenderState.Default.dstBlendAlpha;\r\n\r\n                RenderStateContext.setBlend(true);\r\n                RenderStateContext.setBlendEquationSeparate(blendEquationRGB, blendEquationAlpha);\r\n                RenderStateContext.setBlendFuncSeperate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n                break;\r\n            case RenderState.BLEND_DISABLE:\r\n            default:\r\n                RenderStateContext.setBlend(false);\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    uploadRenderStateFrontFace(shaderDatas: ShaderData, isTarget: boolean, invertFront: boolean): void {\r\n        var renderState: RenderState = (<ShaderPass>this._shaderPass).renderState;\r\n        var datas: any = shaderDatas.getData();\r\n        var cull: any = datas[Shader3D.CULL];\r\n        if ((<ShaderPass>this._shaderPass).statefirst) {\r\n            cull = renderState.cull ?? cull;\r\n        }\r\n        cull = cull ?? RenderState.Default.cull;\r\n        var forntFace: number;\r\n        switch (cull) {\r\n            case RenderState.CULL_NONE:\r\n                RenderStateContext.setCullFace(false);\r\n                if (isTarget != invertFront)\r\n                    forntFace = CullMode.Front;//gl.CCW\r\n                else\r\n                    forntFace = CullMode.Back;\r\n                RenderStateContext.setFrontFace(forntFace);\r\n                break;\r\n            case RenderState.CULL_FRONT:\r\n                RenderStateContext.setCullFace(true);\r\n                if (isTarget == invertFront)\r\n                    forntFace = CullMode.Front;//gl.CCW\r\n                else\r\n                    forntFace = CullMode.Back;\r\n                RenderStateContext.setFrontFace(forntFace);\r\n                break;\r\n            case RenderState.CULL_BACK:\r\n            default:\r\n                RenderStateContext.setCullFace(true);\r\n                if (isTarget != invertFront)\r\n                    forntFace = CullMode.Front;//gl.CCW\r\n                else\r\n                    forntFace = CullMode.Back;\r\n                RenderStateContext.setFrontFace(forntFace);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    uploadCustomUniform(index: number, data: any): void {\r\n        WebGLEngine.instance.uploadCustomUniforms(this._renderShaderInstance, this._customUniformParamsMap, index, data);\r\n    }\r\n}\r\n\r\n","import { Config } from \"../../../../Config\";\r\nimport { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { ShaderProcessInfo } from \"../../../webgl/utils/ShaderCompileDefineBase\";\r\nimport { IBufferState } from \"../../DriverDesign/RenderDevice/IBufferState\";\r\nimport { IIndexBuffer } from \"../../DriverDesign/RenderDevice/IIndexBuffer\";\r\nimport { IRenderDeviceFactory } from \"../../DriverDesign/RenderDevice/IRenderDeviceFactory\";\r\nimport { IRenderGeometryElement } from \"../../DriverDesign/RenderDevice/IRenderGeometryElement\";\r\nimport { IShaderInstance } from \"../../DriverDesign/RenderDevice/IShaderInstance\";\r\nimport { IVertexBuffer } from \"../../DriverDesign/RenderDevice/IVertexBuffer\";\r\nimport { WebGLRenderGeometryElement } from \"./WebGLRenderGeometryElement\";\r\nimport { WebGLBufferState } from \"./WebGLBufferState\";\r\nimport { WebGLIndexBuffer } from \"./WebGLIndexBuffer\";\r\nimport { WebGLShaderInstance } from \"./WebGLShaderInstance\";\r\nimport { WebGLVertexBuffer } from \"./WebGLVertexBuffer\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { WebGLMode } from \"./WebGLEngine/GLEnum/WebGLMode\";\r\nimport { WebGLConfig } from \"./WebGLEngine/WebGLConfig\";\r\nimport { WebGLCommandUniformMap } from \"./WebGLCommandUniformMap\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { ShaderData } from \"../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { Laya } from \"../../../../Laya\";\r\n\r\nexport class WebGLRenderDeviceFactory implements IRenderDeviceFactory {\r\n    createShaderData(ownerResource?: Resource): ShaderData {\r\n        return new WebGLShaderData(ownerResource);\r\n    }\r\n\r\n    createShaderInstance(shaderProcessInfo: ShaderProcessInfo, shaderPass: ShaderPass): IShaderInstance {\r\n        let shaderIns = new WebGLShaderInstance();\r\n        shaderIns._create(shaderProcessInfo, shaderPass);\r\n        return shaderIns;\r\n    }\r\n\r\n    createIndexBuffer(bufferUsageType: BufferUsage): IIndexBuffer {\r\n        return new WebGLIndexBuffer(BufferTargetType.ELEMENT_ARRAY_BUFFER, bufferUsageType);\r\n    }\r\n\r\n    createVertexBuffer(bufferUsageType: BufferUsage): IVertexBuffer {\r\n        return new WebGLVertexBuffer(BufferTargetType.ARRAY_BUFFER, bufferUsageType);\r\n    }\r\n\r\n    createBufferState(): IBufferState {\r\n        return new WebGLBufferState();\r\n    }\r\n\r\n    createRenderGeometryElement(mode: MeshTopology, drawType: DrawType): IRenderGeometryElement {\r\n        return new WebGLRenderGeometryElement(mode, drawType);\r\n    }\r\n\r\n    private globalBlockMap: any = {};\r\n    createGlobalUniformMap(blockName: string): WebGLCommandUniformMap {\r\n        let comMap = this.globalBlockMap[blockName];\r\n        if (!comMap)\r\n            comMap = this.globalBlockMap[blockName] = new WebGLCommandUniformMap(blockName);;\r\n        return comMap;\r\n    }\r\n\r\n    createEngine(config: Config, canvas: any): Promise<void> {\r\n        let engine: WebGLEngine;\r\n        let glConfig: WebGLConfig = { stencil: Config.isStencil, alpha: Config.isAlpha, antialias: Config.isAntialias, premultipliedAlpha: Config.premultipliedAlpha, preserveDrawingBuffer: Config.preserveDrawingBuffer, depth: Config.isDepth, failIfMajorPerformanceCaveat: Config.isfailIfMajorPerformanceCaveat, powerPreference: Config.powerPreference };\r\n\r\n        //TODO  other engine\r\n        const webglMode: WebGLMode = Config.useWebGL2 ? WebGLMode.Auto : WebGLMode.WebGL1;\r\n        engine = new WebGLEngine(glConfig, webglMode);\r\n        engine.initRenderEngine(canvas._source);\r\n        var gl: WebGLRenderingContext = engine._context;//TODO 优化\r\n        if (Config.printWebglOrder)\r\n            this._replaceWebglcall(gl);\r\n\r\n        if (gl) {\r\n            new LayaGL();\r\n        }\r\n        LayaGL.renderEngine = engine;\r\n        LayaGL.textureContext = engine.getTextureContext();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**@private test function*/\r\n    private _replaceWebglcall(gl: any) {\r\n        var tempgl: { [key: string]: any } = {};\r\n        for (const key in gl) {\r\n            if (typeof gl[key] == \"function\" && key != \"getError\" && key != \"__SPECTOR_Origin_getError\" && key != \"__proto__\") {\r\n                tempgl[key] = gl[key];\r\n                gl[key] = function () {\r\n                    let arr: IArguments[] = [];\r\n                    for (let i = 0; i < arguments.length; i++) {\r\n                        arr.push(arguments[i]);\r\n                    }\r\n                    let result = tempgl[key].apply(gl, arr);\r\n\r\n                    //console.log(RenderInfo.loopCount + \":gl.\" + key + \":\" + arr);\r\n                    let err = gl.getError();\r\n                    if (err) {\r\n                        //console.log(err);\r\n                        debugger;\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!LayaGL.renderDeviceFactory)\r\n        LayaGL.renderDeviceFactory = new WebGLRenderDeviceFactory();\r\n})","\r\nimport { Config } from \"../../../../Config\";\r\nimport { Laya } from \"../../../../Laya\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { IRenderEngineFactory } from \"../../DriverDesign/RenderDevice/IRenderEngineFactory\";\r\nimport { WebGLEngine } from \"./WebGLEngine\";\r\nimport { WebGLMode } from \"./WebGLEngine/GLEnum/WebGLMode\";\r\nimport { WebGLConfig } from \"./WebGLEngine/WebGLConfig\";\r\n\r\n\r\nexport class WebGLRenderEngineFactory implements IRenderEngineFactory {\r\n    /**@internal */\r\n    private globalBlockMap: any = {};\r\n\r\n    createUniformBufferObject(glPointer: number, name: string, bufferUsage: BufferUsage, byteLength: number, isSingle: boolean): UniformBufferObject {\r\n        return new UniformBufferObject(glPointer, name, bufferUsage, byteLength, isSingle);\r\n    }\r\n\r\n    createEngine(config: any, canvas: any): Promise<void> {\r\n        let engine: WebGLEngine;\r\n        let glConfig: WebGLConfig = { stencil: Config.isStencil, alpha: Config.isAlpha, antialias: Config.isAntialias, premultipliedAlpha: Config.premultipliedAlpha, preserveDrawingBuffer: Config.preserveDrawingBuffer, depth: Config.isDepth, failIfMajorPerformanceCaveat: Config.isfailIfMajorPerformanceCaveat, powerPreference: Config.powerPreference };\r\n\r\n        //TODO  other engine\r\n        const webglMode: WebGLMode = Config.useWebGL2 ? WebGLMode.Auto : WebGLMode.WebGL1;\r\n        engine = new WebGLEngine(glConfig, webglMode);\r\n        engine.initRenderEngine(canvas._source);\r\n        var gl: WebGLRenderingContext = engine._context; //TODO 优化\r\n        if (Config.printWebglOrder)\r\n            this._replaceWebglcall(gl);\r\n\r\n        if (gl) {\r\n            new LayaGL();\r\n        }\r\n        LayaGL.renderEngine = engine;\r\n        LayaGL.textureContext = engine.getTextureContext();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**@private test function*/\r\n    private _replaceWebglcall(gl: any) {\r\n        var tempgl: { [key: string]: any } = {};\r\n        for (const key in gl) {\r\n            if (typeof gl[key] == \"function\" && key != \"getError\" && key != \"__SPECTOR_Origin_getError\" && key != \"__proto__\") {\r\n                tempgl[key] = gl[key];\r\n                gl[key] = function () {\r\n                    let arr: IArguments[] = [];\r\n                    for (let i = 0; i < arguments.length; i++) {\r\n                        arr.push(arguments[i]);\r\n                    }\r\n                    let result = tempgl[key].apply(gl, arr);\r\n\r\n                    //console.log(RenderInfo.loopCount + \":gl.\" + key + \":\" + arr);\r\n                    let err = gl.getError();\r\n                    if (err) {\r\n                        //console.log(err);\r\n                        debugger;\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!LayaGL.renderOBJCreate)\r\n        LayaGL.renderOBJCreate = new WebGLRenderEngineFactory();\r\n});"],"mappings":"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","ignoreList":[]}