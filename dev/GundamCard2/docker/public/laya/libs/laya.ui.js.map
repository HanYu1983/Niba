{"version":3,"names":["UIConfig","touchScrollEnable","mouseWheelEnable","showButtons","popupBgColor","popupBgAlpha","closeDialogOnSide","AutoBitmap","Graphics","constructor","this","_width","_height","_color","uv","sizeGrid","_sizeGrid","value","map","v","_setChanged","width","_source","sourceWidth","height","sourceHeight","_stateNum","source","LayaEnv","isPlaying","off","on","_setDrawGridCmd","color","_isChanged","ILaya","timer","callLater","changeSource","bitmap","_sp","stateIndex","_stateIndex","stateNum","h","getCachedClip","cmd","sw","sh","DrawTextureCmd","create","_offset","Draw9GridTextureCmd","newcmd","_drawGridCmd","removeCmd","recover","addCmd","destroy","super","setState","index","numStates","UIEvent","SHOW_TIP","HIDE_TIP","UIUtils","fillArray","arr","str","type","temp","concat","a","split","i","n","Math","min","length","toColor","Utils","toHexColor","gray","target","isGray","filters","indexOf","grayFilter","push","splice","getBindFun","_funMap","WeakObject","fun","get","replace","window","Laya","_runScript","set","ColorFilter","UIComponent","Sprite","top","get_top","set_top","bottom","get_bottom","set_bottom","left","_widget","_getWidget","right","centerX","centerY","dataSource","get_dataSource","set_dataSource","toolTip","_toolTip","Event","MOUSE_OVER","onMouseOver","MOUSE_OUT","onMouseOut","_gray","disabled","_disabled","SerializeUtil","isDeserializing","mouseEnabled","createChildren","Widget","EMPTY","preinitialize","initialize","_shouldRefreshLayout","_sizeChanged","event","RESIZE","resetLayout","_childChanged","child","addComponent","measureWidth","max","commitMeasure","numChildren","comp","getChildAt","_visible","_x","scaleX","measureHeight","_y","scaleY","e","stage","onCompResize","get_width","_isWidthSet","get_height","_isHeightSet","_dataSource","prop","freshLayout","destroyChild","Box","name","getChildByName","Function","bgColor","_bgColor","graphics","clear","drawRect","Styles","ScrollType","defaultSizeGrid","labelColor","labelPadding","inputLabelPadding","buttonStateNum","buttonLabelColors","comboBoxItemColors","scrollBarMinNum","scrollBarDelayTime","Button","state","_state","_setStateChanged","skin","_skin","_setSkin","parseInt","_graphics","changeClips","label","_text","text","createText","parent","addChild","selected","_selected","CHANGE","labelColors","_labelColors","join","String","strokeColors","_strokeColors","padding","Number","labelSize","fontSize","labelStroke","stroke","labelStrokeColor","strokeColor","labelBold","bold","labelFont","font","labelAlign","align","labelVAlign","valign","clickHandler","_clickHandler","iconOffset","_autoSize","_stateChanged","runCallLater","changeState","setGraphics","Text","overflow","HIDDEN","hideFlags","HideFlags","HideAndDontSave","_mouseState","_setBit","NodeFlags","HAS_MOUSE","onMouse","MOUSE_DOWN","MOUSE_UP","CLICK","toggle","run","stateMap","url","_skinBaseUrl","URL","formatURL","tex","Loader","getRes","_skinLoaded","Promise","resolve","loader","load","IMAGE","then","_destroyed","LOADED","_setWidth","_setHeight","img","x","console","log","mouseup","mouseover","mousedown","mouseout","CheckBox","Boolean","Clip","clipX","_clipX","_setClipChanged","clipY","_clipY","clipWidth","_clipWidth","clipHeight","_clipHeight","sources","_sources","_index","group","_group","setGroup","total","changeClip","autoPlay","_autoPlay","play","stop","interval","_interval","_isPlaying","_toIndex","_onDisplay","_getBit","DISPLAYED_INSTAGE","_clipChanged","_loop","loadComplete","Handler","w","ceil","j","from","to","loop","DISPLAY","UNDISPLAY","COMPLETE","ColorPicker","selectedColor","_selectedColor","_colorInput","drawBlock","changeColor","changeHandler","runWith","_colorButton","once","_setPanelChanged","borderColor","_borderColor","inputColor","_inputColor","inputBgColor","_inputBgColor","_gridSize","_colors","_panelChanged","changePanel","_colorPanel","size","_colorTiles","_colorBlock","Input","onColorButtonClick","pos","onColorInputChange","KEY_DOWN","onColorFieldKeyDown","MOUSE_MOVE","onColorTilesMouseMove","onColorTilesClick","onPanelMouseDown","stopPropagation","g","mainColors","strColor","y","close","open","removeColorBox","keyCode","getColorByMouse","focus","point","getMousePoint","floor","showColor","drawLine","p","localToGlobal","Point","px","py","zOrder","removeSelf","Label","_tf","wordWrap","alignItems","italic","leading","html","ubb","maxWidth","fitContent","_fitContent","textWidth","textHeight","textField","underline","underlineColor","strikethrough","strikethroughColor","ignoreLang","templateVars","setVar","_onPostLayout","_fitFlag","_parseEscapeChars","set_width","set_height","Image","repaint","_useSourceSize","useSourceSize","sk","dispose","clearRes","Slider","isVertical","showLabel","_showProgress","_max","_min","_tick","_value","_bg","_bar","_progress","addChildAt","onBarMouseDown","allowClickBack","_globalSacle","setTo","globalScaleX","globalScaleY","_maxMove","_tx","mouseX","_ty","mouseY","mouseMove","mouseUp","showValueText","hideValueText","sendChangeEvent","CHANGED","oldValue","pow","round","showProgress","AssetDb","inst","resolveURL","tasks","replaceFileExtension","all","setBarPoint","changeValue","setSlider","scaleValue","tick","num","_allowClickBack","onBgMouseDown","bar","ScrollBar","rollRatio","scaleBar","autoHide","elasticDistance","elasticBackTime","topMoveLimit","bottomMoveLimit","disableDrag","_scrollSize","_thumbPercent","_lastOffset","_checkElastic","_isElastic","_hide","_clickOnly","_showButtons","_touchScrollEnable","_mouseWheelEnable","stopScroll","upButton","downButton","slider","_offsets","onSliderChange","onButtonMouseDown","isUp","currentTarget","slide","startLoop","onStageMouseUp","frameLoop","changeScrollBar","visible","resetPositions","resetButtonPosition","setScroll","scrollSize","thumbPercent","_target","MOUSE_WHEEL","onTargetMouseWheel","onTargetMouseDown","hide","delta","isLockedFun","END","_lastPoint","tweenMove","Tween","clearTween","onStageMouseUp2","startDragForce","cancelDragOp","checkTriggers","isTweenMove","triggerDownDragLimit","triggerUpDragLimit","lastOffset","startTweenMoveForce","abs","_canvasTransform","getScaleY","getScaleX","alpha","START","moveValue","stopMoveLimit","easeFunction","elasticOver","offset","dis","maxDistance","tarSpeed","backToNormal","_backToNormal","Ease","sineOut","VScrollBar","HScrollBar","List","selectEnable","totalPage","disableStopScroll","_repeatX","_repeatY","_repeatX2","_repeatY2","_spaceX","_spaceY","_cells","_startIndex","_selectedIndex","_page","_isVertical","_cellSize","_cellOffset","_createdLine","_usedCache","_elasticEnabled","_scrollType","_preLen","page","_array","startIndex","repeatX","repeatY","cells","changeCells","elasticEnabled","_scrollBar","cacheAs","onScrollStart","content","_content","scrollType","None","scrollRect","Horizontal","_hScrollBarSkin","scrollBar","_setCellChanged","_vScrollBarSkin","vScrollBarSkin","Vertical","hScrollBarSkin","onScrollBarChange","Rectangle","itemRender","_itemRender","spaceX","spaceY","selectedIndex","changeSelectStatus","selectHandler","array","numX","numY","lineCount","selectedItem","selection","getCell","renderItems","_getOneCell","item","createItem","cacheContent","_createItems","startY","box","cell","cellWidth","cellHeight","cacheBox","k","l","pop","addCell","_afterInited","initItems","_bindData","data","_$bindData","ele","call","setContentSize","_cellChanged","onScrollEnd","_$type","_$prefab","HierarchyParser","parse","skinBaseUrl","LegacyUIParser","createComp","warn","watchMap","watcher","listWidth","listHeight","onCellMouse","RIGHT_CLICK","_isMoved","changeCellState","mouseHandler","selectBox","scrollValue","lineX","lineY","scrollLine","cellIndex","down","toIndex","shift","unshift","renderItem","r","_style","posCell","hasListener","RENDER","renderHandler","updateArray","freshStart","onAfterDeserialize","count","Array","refresh","getItem","changeItem","setItem","addItem","addItemAt","souce","deleteItem","scrollTo","tweenTo","time","complete","ComboBox","_button","_listChanged","itemPadding","_itemPadding","labels","_labels","_itemChanged","changeSelected","_selectHandler","defaultLabel","_defaultLabel","selectedLabel","visibleNum","_visibleNum","itemHeight","_itemHeight","itemColors","_itemColors","itemSize","_itemSize","isOpen","_isOpen","_list","_createList","_isCustomList","changeList","TEMP","_listHeight","removeList","_onStageMouseWheel","scrollBarSkin","_scrollBarSkin","list","button","_setListEvent","onListDown","onlistItemMouse","onScrollBarDown","contains","switchTo","labelWidth","_padding","props","ROLL_OVER","changeOpen","View","Scene","regUI","json","cacheRes","_watchMap","_scene","changeData","key","exe","uiMap","DialogManager","maskLayer","popupEffect","dialog","scale","_effectTween","backOut","doOpen","closeEffect","strongOut","doClose","popupEffectHandler","closeEffectHandler","_onResize","_closeOnSide","Dialog","lockLayer","isPopupCenter","_centerDialog","pivotX","pivotY","_clearDialogEffect","_closeAll","_checkMask","isModal","setLockView","removeChildren","closeOther","showEffect","HAS_ZORDER","OPEN","onOpened","_param","lock","isShowEffect","CLOSE","closeHandler","closeType","onClosed","autoDestroyAtClosed","closeAll","getDialogsByGroup","closeByGroup","manager","_manager","view","dragArea","_dragArea","toString","_onMouseDown","isPopup","_dealDragArea","_onClick","dragTarget","startDrag","stopDrag","btn","CANCEL","SURE","NO","OK","YES","param","show","_open","popup","modal","FontClip","sheet","_sheet","_indexMap","line","_valueArr","direction","_direction","_align","_wordsW","_wordsH","texture","isHorizontal","dX","sz","charAt","drawImage","resetLayoutX","resetLayoutY","LayoutBox","_space","space","_setItemChanged","changeItems","sortItem","items","sort","b","onResize","removeChildAt","HBox","maxHeight","TOP","MIDDLE","BOTTOM","NONE","HSlider","Panel","_vScrollBar","_hScrollBar","destroyChildren","_setScrollChanged","removeChild","_parent","_children","_setParent","beginIndex","endIndex","getChildIndex","changeScroll","_scrollChanged","contentW","contentWidth","contentH","contentHeight","vscroll","hscroll","vShow","hShow","showWidth","showHeight","createHScrollBar","createVScrollBar","Both","vScrollBar","hScrollBar","rect","start","ProgressBar","bg","grid","isNaN","Radio","obj","onClick","UIGroup","setSelect","hasHideFlag","startsWith","_setLabelChanged","_labelStroke","_labelStrokeColor","_labelSize","_labelBold","_labelFont","_labelPadding","_items","_labelChanged","changeLabels","itemClick","_labelAlign","autoLayout","display","preItem","delItem","newIndex","RadioGroup","ScaleBox","_oldW","_oldH","onEnable","onDisable","Tab","TextInput","multiline","editable","restrict","pattern","prompt","promptColor","maxChars","INPUT","ENTER","BLUR","FOCUS","select","setSelection","TextArea","maxScrollY","scrollY","maxScrollX","scrollX","onHBarChanged","onVBarChanged","TipManager","defaultTipHandler","_defaultTipHandler","_tipBox","_tipText","tipTextColor","_showDefaultTip","_onStageShowTip","_onStageHideTip","_showTip","tipDelay","tip","apply","_onStageMouseMove","_onStageMouseDown","_showToStage","offsetX","offsetY","offX","offY","rec","getBounds","tipBackColor","showDislayTip","Tree","keepStatus","_keepStatus","parseOpenStatus","getArray","_renderHandler","spaceLeft","_spaceLeft","spaceBottom","xml","parseXml","selectedPath","path","_spaceBottom","onListChange","getParentOpenStatus","getDepth","nodeParent","arrow","hasChild","__cellIndex","onArrowClick","folder","isDirectory","isRoot","elements","childCount","list2","attributes","node","oldSource","newSource","newItem","m","oldItem","isSameParent","item1","item2","getFilterSource","result","toLocaleLowerCase","toLowerCase","setItemState","fresh","filter","VBox","isSortItem","LEFT","CENTER","RIGHT","ViewStack","setIndexHandler","_setIndexHandler","setIndex","setItems","views","VSlider","OpenDataContextView","_fps","Texture","Texture2D","TextureFormat","R8G8B8A8","fps","activeInHierarchy","wx","sharedCanvas","_onLoop","_onActive","_onInActive","postMsg","canvas","Browser","onMiniGame","toTempFilePath","setImageData","updateViewPort","sx","transform","sy","msg","getOpenDataContext","postMessage","StatUI","_show","_showToggle","createUI","sp","clientScaleX","clientScaleY","leftText","singleCharRender","strArray","one","_view","title","_txt","createToggleUI","checkBoxTex","pixels","Uint8Array","R8G8B8","setPixelsData","TEXTURE2D","_toggleSprite","_testWord","_toggleView","toggles","_checkBoxArray","cb","Stat","AllShow","showToggle","AllToggle","update","isAverage","mode","units","_count","render","ctx","c","ClassUtils","regClass"],"sources":["../../src/layaAir/UIConfig.ts","../../src/layaAir/laya/ui/AutoBitmap.ts","../../src/layaAir/laya/ui/UIEvent.ts","../../src/layaAir/laya/ui/UIUtils.ts","../../src/layaAir/laya/ui/UIComponent.ts","../../src/layaAir/laya/ui/Box.ts","../../src/layaAir/laya/ui/Styles.ts","../../src/layaAir/laya/ui/Button.ts","../../src/layaAir/laya/ui/CheckBox.ts","../../src/layaAir/laya/ui/Clip.ts","../../src/layaAir/laya/ui/ColorPicker.ts","../../src/layaAir/laya/ui/Label.ts","../../src/layaAir/laya/ui/Image.ts","../../src/layaAir/laya/ui/Slider.ts","../../src/layaAir/laya/ui/ScrollBar.ts","../../src/layaAir/laya/ui/VScrollBar.ts","../../src/layaAir/laya/ui/HScrollBar.ts","../../src/layaAir/laya/ui/List.ts","../../src/layaAir/laya/ui/ComboBox.ts","../../src/layaAir/laya/ui/View.ts","../../src/layaAir/laya/ui/DialogManager.ts","../../src/layaAir/laya/ui/Dialog.ts","../../src/layaAir/laya/ui/FontClip.ts","../../src/layaAir/laya/ui/LayoutBox.ts","../../src/layaAir/laya/ui/HBox.ts","../../src/layaAir/laya/ui/HSlider.ts","../../src/layaAir/laya/ui/Panel.ts","../../src/layaAir/laya/ui/ProgressBar.ts","../../src/layaAir/laya/ui/Radio.ts","../../src/layaAir/laya/ui/UIGroup.ts","../../src/layaAir/laya/ui/RadioGroup.ts","../../src/layaAir/laya/ui/ScaleBox.ts","../../src/layaAir/laya/ui/Tab.ts","../../src/layaAir/laya/ui/TextInput.ts","../../src/layaAir/laya/ui/TextArea.ts","../../src/layaAir/laya/ui/TipManager.ts","../../src/layaAir/laya/ui/Tree.ts","../../src/layaAir/laya/ui/VBox.ts","../../src/layaAir/laya/ui/ViewStack.ts","../../src/layaAir/laya/ui/VSlider.ts","../../src/layaAir/laya/ui/OpenDataContextView.ts","../../src/layaAir/laya/ui/StatUI.ts","../../src/layaAir/laya/ui/ModuleDef.ts"],"sourcesContent":["/** \r\n * @en Global UI configuration settings.\r\n * @zh 全局配置 \r\n */\r\nexport class UIConfig {\r\n    /** \r\n     * @en Enable touch scrolling (for scroll bars).\r\n     * @zh 是否开启触摸滚动（针对滚动条） \r\n     */\r\n    static touchScrollEnable: boolean = true;\r\n\r\n    /** \r\n     * @en Enable mouse wheel scrolling (for scroll bars).\r\n     * @zh 是否开启滑轮滚动（针对滚动条） \r\n     */\r\n    static mouseWheelEnable: boolean = true;\r\n\r\n    /** \r\n     * @en Show scroll bar buttons.\r\n     * @zh 是否显示滚动条按钮 \r\n     */\r\n    static showButtons: boolean = true;\r\n\r\n    /** \r\n     * @en Background color for pop-up dialogs.\r\n     * @zh 弹出框背景颜色 \r\n     */\r\n    static popupBgColor: string = \"#000000\";\r\n\r\n    /** \r\n     * @en Background transparency for pop-up dialogs.\r\n     * @zh 弹出框背景透明度 \r\n     */\r\n    static popupBgAlpha: number = 0.5;\r\n\r\n    /** \r\n     * @en Whether clicking on the edge of a modal window will close it. The default is to close the window.\r\n     * @zh 模式窗口点击边缘，是否关闭窗口，默认是关闭的 \r\n     */\r\n    static closeDialogOnSide: boolean = true;\r\n}\r\n\r\n\r\n","import { Graphics } from \"../display/Graphics\"\r\nimport { Texture } from \"../resource/Texture\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { Draw9GridTextureCmd } from \"../display/cmd/Draw9GridTextureCmd\";\r\nimport { DrawTextureCmd } from \"../display/cmd/DrawTextureCmd\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\n\r\n/**\r\n * @en The `AutoBitmap` class is a display object that represents bitmap images or graphics.\r\n * It encapsulates the handling of position, width, height, and nine-patch for UI components.\r\n * @zh `AutoBitmap` 类是用于表示位图图像或绘制图形的显示对象。\r\n * 封装了位置，宽高及九宫格的处理，供UI组件使用。\r\n */\r\nexport class AutoBitmap extends Graphics {\r\n    /** 宽度*/\r\n    private _width: number = null;\r\n    /** 高度*/\r\n    private _height: number = null;\r\n    /** 源数据*/\r\n    private _source: Texture;\r\n    /** 纹理的九宫格数据 */\r\n    private _sizeGrid: number[];\r\n    protected _isChanged: boolean;\r\n    protected _stateIndex: number;\r\n    protected _stateNum: number;\r\n    /**@internal */\r\n    _color: string = \"#ffffff\";\r\n    /**@internal */\r\n    _offset: any[];\r\n    private _drawGridCmd: Draw9GridTextureCmd | DrawTextureCmd;\r\n    uv: number[] = null;\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): number[] {\r\n        return this._sizeGrid;\r\n    }\r\n\r\n    set sizeGrid(value: number[]) {\r\n        this._sizeGrid = value ? value.map((v) => { return +v; }) : null;\r\n        this._setChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The width of the display object, in pixels.\r\n     * @zh 表示显示对象的宽度，以像素为单位。\r\n     */\r\n    get width(): number {\r\n        if (this._width != null) return this._width;\r\n        if (this._source) return this._source.sourceWidth;\r\n        return 0;\r\n    }\r\n\r\n    set width(value: number) {\r\n        if (this._width != value) {\r\n            this._width = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The height of the display object, in pixels.\r\n     * @zh 表示显示对象的高度，以像素为单位。\r\n     */\r\n    get height(): number {\r\n        if (this._height != null) return this._height;\r\n        if (this._source) return this._source.sourceHeight / (this._source._stateNum || this._stateNum || 1);\r\n        return 0;\r\n    }\r\n\r\n    set height(value: number) {\r\n        if (this._height != value) {\r\n            this._height = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The texture resource of the object.\r\n     * @zh 对象的纹理资源。\r\n     */\r\n    get source(): Texture {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: Texture) {\r\n        if (this._source && !LayaEnv.isPlaying)\r\n            this._source.off(\"reload\", this, this._setChanged);\r\n        if (value) {\r\n            this._source = value;\r\n            this._setChanged();\r\n            if (!LayaEnv.isPlaying)\r\n                value.on(\"reload\", this, this._setChanged);\r\n        } else {\r\n            this._source = null;\r\n            this._setDrawGridCmd(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The color of the object.\r\n     * @zh 对象的颜色。\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    set color(value: string) {\r\n        if (this._color != value) {\r\n            this._color = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Mark the object as changed.\r\n     * @zh 标记对象为已更改状态。\r\n     */\r\n    protected _setChanged(): void {\r\n        if (!this._isChanged) {\r\n            this._isChanged = true;\r\n            ILaya.timer.callLater(this, this.changeSource);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Change the texture resource.\r\n     * @zh 修改纹理资源。\r\n     */\r\n    protected changeSource(): void {\r\n        this._isChanged = false;\r\n        let source = this._source;\r\n        if (!source || !source.bitmap || !this._sp)\r\n            return;\r\n\r\n        let width = this.width;\r\n        let height = this.height;\r\n        let sizeGrid = this._sizeGrid || source._sizeGrid;\r\n        let stateIndex = this._stateIndex;\r\n        if (stateIndex != null) {\r\n            let stateNum = source._stateNum || this._stateNum || 1;\r\n            if (stateNum == 1)\r\n                stateIndex = 0;\r\n            else if (stateNum == 2) {\r\n                if (stateIndex == 2)\r\n                    stateIndex = 1;\r\n                else\r\n                    stateIndex = 0;\r\n            }\r\n            else if (stateNum == 3) {\r\n                if (stateIndex == 3)\r\n                    stateIndex = 0;\r\n            }\r\n\r\n            let h = source.height / stateNum;\r\n            source = source.getCachedClip(0, h * stateIndex, source.width, h)\r\n            if (!source)\r\n                return;\r\n        }\r\n\r\n        let sw = source.sourceWidth;\r\n        let sh = source.sourceHeight;\r\n\r\n        //如果没有设置9宫格，或大小未改变，则直接用原图绘制\r\n        let cmd: any;\r\n        if (!sizeGrid || (sw === width && sh === height))\r\n            cmd = DrawTextureCmd.create(source, this._offset ? this._offset[0] : 0, this._offset ? this._offset[1] : 0, width, height, null, 1, this._color, null, this.uv)\r\n        else\r\n            cmd = Draw9GridTextureCmd.create(source, 0, 0, width, height, sizeGrid, false, this._color);\r\n        this._setDrawGridCmd(cmd);\r\n    }\r\n\r\n    /**\r\n     * @en Due to the possibility of other graphic commands, the original method of directly using clear() cannot be used.\r\n     * @zh 由于可能有其他的graphic命令，因此不能用原来的直接clear()的方法\r\n     */\r\n    private _setDrawGridCmd(newcmd: any) {\r\n        if (this._drawGridCmd) {\r\n            this.removeCmd(this._drawGridCmd);\r\n            this._drawGridCmd.recover();\r\n        }\r\n        this._drawGridCmd = newcmd;\r\n        if (newcmd)\r\n            this.addCmd(newcmd);\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the object.\r\n     * @zh 销毁对象。\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        if (this._source && !LayaEnv.isPlaying)\r\n            this._source.off(\"reload\", this, this._setChanged);\r\n        this._source = null;\r\n        this._sizeGrid = null;\r\n        this._offset = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Set the state of the object.\r\n     * @param index The state index.\r\n     * @param numStates The total number of states.\r\n     * @zh 设置对象的状态。\r\n     * @param index 状态索引。\r\n     * @param numStates 状态的总数。\r\n     */\r\n    setState(index: number, numStates: number) {\r\n        this._stateIndex = index;\r\n        this._stateNum = numStates;\r\n        this._setChanged();\r\n    }\r\n}\r\n","/**\r\n * @en The UIEvent class is used to define the event types of UI component classes.\r\n * @zh UIEvent 类用来定义UI组件类的事件类型。\r\n */\r\nexport class UIEvent {\r\n    /**\r\n     * @en Display prompt information.\r\n     * @zh 显示提示信息。\r\n     */\r\n    static SHOW_TIP: string = \"showtip\";\r\n    /**\r\n     * @en Hide prompt information.\r\n     * @zh 隐藏提示信息。\r\n     */\r\n    static HIDE_TIP: string = \"hidetip\";\r\n}","import { Sprite } from \"../display/Sprite\"\r\nimport { ColorFilter } from \"../filters/ColorFilter\"\r\nimport { Utils } from \"../utils/Utils\"\r\nimport { WeakObject } from \"../utils/WeakObject\"\r\n\r\n/**\r\n * @en The `UIUtils` class is a collection of text utility functions.\r\n * @zh `UIUtils` 是文本工具集。\r\n */\r\nexport class UIUtils {\r\n    private static grayFilter: ColorFilter = new ColorFilter([0.3086, 0.6094, 0.082, 0, 0, 0.3086, 0.6094, 0.082, 0, 0, 0.3086, 0.6094, 0.082, 0, 0, 0, 0, 0, 1, 0]);\r\n    private static _funMap: WeakObject = null;//new WeakObject();\r\n\r\n    /**\r\n     * @en Fill an array with a string and return a copy of the array.\r\n     * @param arr The source array.\r\n     * @param str A string of comma-separated values, such as \"p1,p2,p3,p4\".\r\n     * @param type If the value is not null, it indicates the type of the newly added value.\r\n     * @returns The filled array.\r\n     * @zh 用字符串填充数组，并返回数组副本。\r\n     * @param arr 源数组对象。\r\n     * @param str 用逗号连接的字符串。如\"p1,p2,p3,p4\"。\r\n     * @param type 如果值不为null，则填充的是新增值得类型。\r\n     * @returns 填充后的数组。\r\n     */\r\n    static fillArray(arr: any[], str: string, type: typeof Number | typeof String = null): any[] {\r\n        let temp = arr.concat();\r\n        if (str) {\r\n            let a = str.split(\",\");\r\n            for (let i = 0, n = Math.min(temp.length, a.length); i < n; i++) {\r\n                let value = a[i];\r\n                temp[i] = (value == \"true\" ? true : (value == \"false\" ? false : value));\r\n                if (type != null) temp[i] = type(value);\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    /**\r\n     * @en Convert a uint color value to a string color value.\r\n     * @param color The uint color value.\r\n     * @returns The string color value.\r\n     * @zh 转换 uint 类型颜色值为字符型颜色值。\r\n     * @param color uint颜色值。\r\n     * @returns 字符型颜色值。\r\n     */\r\n    static toColor(color: number): string {\r\n        return Utils.toHexColor(color);\r\n    }\r\n\r\n    /**\r\n     * @en Add or remove a grayscale filter to the specified target display object.\r\n     * @param target The target display object.\r\n     * @param isGray If true, add a grayscale filter, otherwise remove the grayscale filter.\r\n     * @zh 给指定的目标显示对象添加或移除灰度滤镜。\r\n     * @param target 目标显示对象。\r\n     * @param isGray 如果值true，则添加灰度滤镜，否则移除灰度滤镜。\r\n     */\r\n    static gray(target: Sprite, isGray: boolean = true): void {\r\n        let filters: any[] = target.filters || [];\r\n        let i = filters.indexOf(UIUtils.grayFilter);\r\n        if (isGray) {\r\n            if (i == -1) {\r\n                filters.push(UIUtils.grayFilter);\r\n                target.filters = filters;\r\n            }\r\n        }\r\n        else if (i != -1) {\r\n            filters.splice(i, 1);\r\n            target.filters = filters;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Get the function expression based on the string.\r\n     * @param value The string value.\r\n     * @returns The function expression.\r\n     * @zh 根据字符串，返回函数表达式。\r\n     * @param value 字符串值。\r\n     * @return 函数表达式。\r\n     */\r\n    static getBindFun(value: string): Function {\r\n        if (!UIUtils._funMap) {\r\n            UIUtils._funMap = new WeakObject();\r\n        }\r\n        var fun: Function = UIUtils._funMap.get(value);\r\n        if (fun == null) {\r\n            var temp: string = \"\\\"\" + value + \"\\\"\";\r\n            temp = temp.replace(/^\"\\${|}\"$/g, \"\").replace(/\\${/g, \"\\\"+\").replace(/}/g, \"+\\\"\");\r\n            var str: string = \"(function(data){if(data==null)return;with(data){try{\\nreturn \" + temp + \"\\n}catch(e){}}})\";\r\n            fun = (window as any).Laya._runScript(str);\r\n            UIUtils._funMap.set(value, fun);\r\n        }\r\n        return fun;\r\n    }\r\n}","import { Widget } from \"../components/Widget\";\r\nimport { UIEvent } from \"./UIEvent\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Node } from \"../display/Node\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { SerializeUtil } from \"../loaders/SerializeUtil\";\r\n\r\n/**\r\n * @en UIComponent is the base class of UI Component.\r\n * Life cycle: preinitialize > createChildren > initialize > constructor of component\r\n * @zh UIComponent 是UI组件类的基类。\r\n * 生命周期：preinitialize > createChildren > initialize > 组件构造函数\r\n */\r\nexport class UIComponent extends Sprite {\r\n\r\n    /**\r\n     * @en The data source of the UIComponent.\r\n     * @zh UI组件的数据源。\r\n     */\r\n    protected _dataSource: any;\r\n\r\n    /**\r\n     * @en Mouse hover prompt\r\n     * @zh 鼠标悬停提示\r\n     */\r\n    protected _toolTip: any;\r\n\r\n    /**\r\n     * @en Disabled\r\n     * @zh 禁用\r\n     */\r\n    protected _disabled: boolean;\r\n\r\n    /**\r\n     * @en Grayed out\r\n     * @zh 变灰\r\n     */\r\n    protected _gray: boolean;\r\n\r\n    /**\r\n     * @en Relative layout component\r\n     * @zh 相对布局组件\r\n     */\r\n    protected _widget: Widget = Widget.EMPTY;\r\n\r\n    /**\r\n    * @en The vertical distance in pixels from the top edge of the component to the top edge of its parent.\r\n    * This property is used for relative layout, which means the component's position is always relative to its parent's top edge.\r\n    * @zh 组件顶边距离父节点顶边的垂直距离（以像素为单位）。\r\n    * 此属性用于相对布局,意味着组件的位置始终相对于父节点的顶部边缘。\r\n    */\r\n    get top(): number {\r\n        return this.get_top();\r\n    }\r\n\r\n    set top(value: number) {\r\n        this.set_top(value);\r\n    }\r\n\r\n    /**\r\n     * @en The vertical distance in pixels from the bottom edge of the component to the bottom edge of its parent.\r\n     * This property is used for relative layout, which means the component's position is always relative to its parent's bottom edge.\r\n     * @zh 组件底边距离父节点底边的垂直距离（以像素为单位）。\r\n     * 此属性用于相对布局,意味着组件的位置始终相对于父节点的底部边缘。\r\n     */\r\n    get bottom(): number {\r\n        return this.get_bottom();\r\n    }\r\n\r\n    set bottom(value: number) {\r\n        this.set_bottom(value);\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal distance in pixels from the left edge of the component to the left edge of its parent.\r\n     * This property is used for relative layout, which means the component's position is always relative to its parent's left edge.\r\n     * @zh 组件左边距离父节点左边的水平距离（以像素为单位）。\r\n     * 此属性用于相对布局,意味着组件的位置始终相对于父节点的左侧边缘。\r\n     */\r\n    get left(): number {\r\n        return this._widget.left;\r\n    }\r\n\r\n    set left(value: number) {\r\n        if (value != this._widget.left) {\r\n            this._getWidget().left = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal distance in pixels from the right edge of the component to the right edge of its parent.\r\n     * This property is used for relative layout, which means the component's position is always relative to its parent's right edge.\r\n     * @zh 组件右边距离父节点右边的水平距离（以像素为单位）。\r\n     * 此属性用于相对布局,意味着组件的位置始终相对于父节点的右侧边缘。\r\n     */\r\n    get right(): number {\r\n        return this._widget.right;\r\n    }\r\n\r\n    set right(value: number) {\r\n        if (value != this._widget.right) {\r\n            this._getWidget().right = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The distance in pixels from the center axis of this object in the horizontal direction to the center line of the parent container in the horizontal direction.\r\n     * @zh 在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。\r\n     */\r\n    get centerX(): number {\r\n        return this._widget.centerX;\r\n    }\r\n\r\n    set centerX(value: number) {\r\n        if (value != this._widget.centerX) {\r\n            this._getWidget().centerX = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The distance in pixels from the center axis of this object in the vertical direction to the center line of the parent container in the vertical direction.\r\n     * @zh 在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。\r\n     */\r\n    get centerY(): number {\r\n        return this._widget.centerY;\r\n    }\r\n\r\n    set centerY(value: number) {\r\n        if (value != this._widget.centerY) {\r\n            this._getWidget().centerY = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Data assignment, control UI display logic by assigning UI.\r\n     * Simple assignment will change the default properties of the component, and curly braces can be used to assign any property of the component.\r\n     * @zh 数据源赋值，通过对UI赋值来控制UI显示逻辑。\r\n     * 简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。\r\n     * @example\r\n       //Default property assignment\r\n       dataSource = {label1: \"Label changed\", checkbox1: true};//(Change the text property value of label1, change the selected property of checkbox1).\r\n       //Any property assignment\r\n       dataSource = {label2: {text:\"Label changed\",size:14}, checkbox2: {selected:true,x:10}};\r\n     */\r\n    get dataSource(): any {\r\n        return this.get_dataSource();\r\n    }\r\n\r\n    set dataSource(value: any) {\r\n        this.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Mouse hover prompt.\r\n     * It can be assigned as text `String` or function `Handler` to implement custom style mouse prompts and parameter carrying, etc.\r\n     * @zh 鼠标悬停提示。\r\n     * 可以赋值为文本`String`或函数`Handler`，用来实现自定义样式的鼠标提示和参数携带等。\r\n     * @example\r\n     * private var _testTips:TestTipsUI = new TestTipsUI();\r\n     * private function testTips():void {\r\n       //Simple mouse prompt\r\n     * btn2.toolTip = \"This is a mouse tip&lt;b&gt;Bold&lt;/b&gt;&lt;br&gt;New line\";\r\n       //Custom mouse prompt\r\n     * btn1.toolTip = showTips1;\r\n       //Custom mouse prompt with parameters\r\n     * clip.toolTip = new Handler(this,showTips2, [\"clip\"]);\r\n     * }\r\n     * private function showTips1():void {\r\n     * _testTips.label.text = \"This is button[\" + btn1.label + \"]\";\r\n     * tip.addChild(_testTips);\r\n     * }\r\n     * private function showTips2(name:String):void {\r\n     * _testTips.label.text = \"This is \" + name;\r\n     * tip.addChild(_testTips);\r\n     * }\r\n     */\r\n    get toolTip(): any {\r\n        return this._toolTip;\r\n    }\r\n\r\n    set toolTip(value: any) {\r\n        if (this._toolTip != value) {\r\n            this._toolTip = value;\r\n            if (value != null) {\r\n                this.on(Event.MOUSE_OVER, this, this.onMouseOver);\r\n                this.on(Event.MOUSE_OUT, this, this.onMouseOut);\r\n            } else {\r\n                this.off(Event.MOUSE_OVER, this, this.onMouseOver);\r\n                this.off(Event.MOUSE_OUT, this, this.onMouseOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether it is grayed out.\r\n     * @zh 是否变灰。\r\n     */\r\n    get gray(): boolean {\r\n        return this._gray;\r\n    }\r\n\r\n    set gray(value: boolean) {\r\n        if (value !== this._gray) {\r\n            this._gray = value;\r\n            UIUtils.gray(this, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether the page is disabled, it will turn gray and disable the mouse when set to true.\r\n     * @zh 是否禁用页面，设置为true后，会变灰并且禁用鼠标。\r\n     */\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        if (value !== this._disabled) {\r\n            this._disabled = value;\r\n            if (!SerializeUtil.isDeserializing)\r\n                this.gray = value;\r\n            this.mouseEnabled = !value;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The constructor function that is called when creating a new instance of the UIComponent.\r\n     * It calls a series of initialization methods in sequence. Subclasses inheriting from this class can override these methods directly to implement their own initialization logic.\r\n     * If these initialization methods are not needed, `createChildren` can be set to `false` to skip them and reduce unnecessary overhead.\r\n     * @param createChildren Whether to execute the initialization methods, default is true.\r\n     * @zh 创建UI组件新实例时调用的构造函数。\r\n     * 它将依次调用一系列初始化方法。继承该类的子类可以直接重写这些方法,实现自己的初始化逻辑。\r\n     * 如果不需要这些初始化方法,可以将 `createChildren` 设置为 `false`,以跳过它们并减少不必要的开销。\r\n     * @param createChildren 是否执行子对象初始化方法,默认为 true。\r\n     */\r\n    constructor(createChildren = true) {\r\n        super();\r\n        if (createChildren) {\r\n            this.preinitialize();\r\n            this.createChildren();\r\n            this.initialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Called when the layout should be refreshed.\r\n     * This method will call the `_sizeChanged` method later to perform the actual layout refresh.\r\n     * @zh 当需要刷新布局时调用。\r\n     * 这个方法会在稍后调用 `_sizeChanged` 方法来执行实际的布局刷新。\r\n     */\r\n    protected _shouldRefreshLayout(): void {\r\n        super._shouldRefreshLayout();\r\n        this.callLater(this._sizeChanged);\r\n    }\r\n\r\n    /**\r\n     * @en Callback function when the component size changes.\r\n     * @zh 组件尺寸变化时的回调函数。\r\n     */\r\n    protected _sizeChanged(): void {\r\n        this.event(Event.RESIZE);\r\n        if (this._widget !== Widget.EMPTY) this._widget.resetLayout();\r\n    }\r\n\r\n    /**\r\n    * @en Callback when a child node changes.\r\n    * @param child The child node that has changed.\r\n    * @zh 子节点发生变化时的回调。\r\n    * @param child 发生变化的子节点。\r\n    */\r\n    protected _childChanged(child: Node = null): void {\r\n        this.callLater(this._sizeChanged);\r\n        super._childChanged(child);\r\n    }\r\n\r\n    /**\r\n     * @en Get the layout style of the object. Please do not modify this object directly.\r\n     * @zh 获取对象的布局样式。请不要直接修改此对象。\r\n     */\r\n    private _getWidget(): Widget {\r\n        this._widget === Widget.EMPTY && (this._widget = this.addComponent(Widget));\r\n        return this._widget;\r\n    }\r\n\r\n    /**\r\n     * @en Pre-initialization.\r\n     * Subclasses can set and modify default property values in this function.\r\n     * @zh 预初始化。\r\n     * 子类可在此函数内设置、修改属性默认值。\r\n     */\r\n    protected preinitialize(): void {\r\n    }\r\n\r\n    /**\r\n     * @en Create and add UIComponent child nodes.\r\n     * Subclasses can create and add child nodes in this function.\r\n     * @zh 创建并添加UI组件的子节点。\r\n     * 子类可在此函数内创建并添加子节点。\r\n     */\r\n    protected createChildren(): void {\r\n    }\r\n\r\n    /**\r\n     * @en UIComponent initialization.\r\n     * Child objects have been created at this point and can be modified.\r\n     * @zh UI组件初始化。\r\n     * 在此子对象已被创建，可以对子对象进行修改。\r\n     */\r\n    protected initialize(): void {\r\n    }\r\n\r\n    /**\r\n     * @en The actual display area width of the object (in pixels).\r\n     * @zh 显示对象的实际显示区域宽度（以像素为单位）。\r\n     */\r\n    protected measureWidth(): number {\r\n        var max: number = 0;\r\n        this.commitMeasure();\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var comp: Sprite = (<Sprite>this.getChildAt(i));\r\n            if (comp._visible) {\r\n                max = Math.max(comp._x + comp.width * comp.scaleX, max);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * @en Immediately execute the delayed call function that affects the width and height measurement.\r\n     * Use the 'runCallLater' function to immediately execute the delayed running function that affects the width and height measurement (set using 'callLater').\r\n     * @zh 立即执行影响宽高度量的延迟调用函数。\r\n     * 使用 'runCallLater' 函数，立即执行影响宽高度量的延迟运行函数(使用 'callLater' 设置延迟执行函数)。\r\n     */\r\n    protected commitMeasure(): void {\r\n    }\r\n\r\n    /**\r\n     * @en The actual display area height of the object (in pixels).\r\n     * @zh 显示对象的实际显示区域高度（以像素为单位）。\r\n     */\r\n    protected measureHeight(): number {\r\n        var max: number = 0;\r\n        this.commitMeasure();\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var comp: Sprite = (<Sprite>this.getChildAt(i));\r\n            if (comp._visible) {\r\n                max = Math.max(comp._y + comp.height * comp.scaleY, max);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * @en The event handler for the 'Event.MOUSE_OVER' event, triggered when the mouse enters the component (the node object to which the component belongs).\r\n     * When the 'toolTip' property is set, this method is invoked to dispatch the 'UIEvent.SHOW_TIP' event with the '_toolTip' property as the parameter.\r\n     * @param e The event object.\r\n     * @zh 'Event.MOUSE_OVER' 事件的事件处理程序,在鼠标进入组件(组件所属的节点对象)时触发。\r\n     * 当 'toolTip' 属性被设置时,该方法会被调用以派发 'UIEvent.SHOW_TIP' 事件,并将 '_toolTip' 属性作为参数传递。\r\n     * @param e 事件对象。\r\n     */\r\n    private onMouseOver(e: Event): void {\r\n        ILaya.stage.event(UIEvent.SHOW_TIP, this._toolTip);\r\n    }\r\n\r\n    /**\r\n     * @en The event handler for the 'Event.MOUSE_OUT' event, triggered when the mouse leaves the component (the node object to which the component belongs).\r\n     * When the 'toolTip' property is set, this method is invoked to dispatch the 'UIEvent.HIDE_TIP' event with the '_toolTip' property as the parameter.\r\n     * @param e The event object.\r\n     * @zh 'Event.MOUSE_OUT' 事件的事件处理程序,在鼠标离开组件(组件所属的节点对象)时触发。\r\n     * 当 'toolTip' 属性被设置时,该方法会被调用以派发 'UIEvent.HIDE_TIP' 事件,并将 '_toolTip' 属性作为参数传递。\r\n     * @param e 事件对象。\r\n     */\r\n    private onMouseOut(e: Event): void {\r\n        ILaya.stage.event(UIEvent.HIDE_TIP, this._toolTip);\r\n    }\r\n\r\n    /**\r\n     * @en The method to be invoked when the component is resized.\r\n     * It handles the logic for when the component's size changes.\r\n     * @zh 组件大小调整时调用的方法。\r\n     * 它处理组件大小发生变化时的逻辑。\r\n     */\r\n    protected onCompResize(): void {\r\n        this._sizeChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Get the width of the object.\r\n     * @zh 获取对象的宽度。\r\n     */\r\n    get_width(): number {\r\n        if (this._isWidthSet) return this._width;\r\n        return this.measureWidth();\r\n    }\r\n\r\n    /**\r\n     * @en Get the height of the object.\r\n     * @zh 获取对象的高度。\r\n     */\r\n    get_height(): number {\r\n        if (this._isHeightSet) return this._height;\r\n        return this.measureHeight();\r\n    }\r\n\r\n    /**\r\n     * @en Get the top margin of the object.\r\n     * @zh 获取对象的上边距。\r\n     */\r\n    get_top(): number {\r\n        return this._widget.top;\r\n    }\r\n\r\n    /**\r\n     * @en Set the top margin of the object.\r\n     * @param value The top margin value.\r\n     * @zh 设置对象的上边距。\r\n     * @param value 上边距的值。\r\n     */\r\n    set_top(value: number) {\r\n        if (value != this._widget.top) {\r\n            this._getWidget().top = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Get the bottom margin of the object.\r\n     * @zh 获取对象的下边距。\r\n     */\r\n    get_bottom(): number {\r\n        return this._widget.bottom;\r\n    }\r\n\r\n    /**\r\n     * @en Set the bottom margin of the object.\r\n     * @param value The bottom margin value.\r\n     * @zh 设置对象的下边距。\r\n     * @param value 下边距的值。\r\n     */\r\n    set_bottom(value: number) {\r\n        if (value != this._widget.bottom) {\r\n            this._getWidget().bottom = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Get the data source of the object.\r\n     * @zh 获取对象的数据源。\r\n     */\r\n    get_dataSource(): any {\r\n        return this._dataSource;\r\n    }\r\n\r\n    /**\r\n     * @en Set the data source of the object.\r\n     * @param value The data source.\r\n     * @zh 设置对象的数据源。\r\n     * @param value 数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        for (var prop in this._dataSource) {\r\n            if (prop in this && !(typeof ((this as any)[prop]) == 'function')) {\r\n                (this as any)[prop] = this._dataSource[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate and update the layout of the object.\r\n     * This method will reset the horizontal and vertical layout of the object based on the `_widget` property.\r\n     * It will calculate the position and size of the object according to the layout rules specified by the `_widget` property,\r\n     * such as `left`, `right`, `top`, `bottom`, `centerX`, and `centerY`.\r\n     * @zh 重新计算并更新对象的布局。\r\n     * 这个方法将根据 `_widget` 属性重置对象的水平和垂直布局。\r\n     * 它会根据 `_widget` 属性指定的布局规则,如 `left`、`right`、`top`、`bottom`、`centerX` 和 `centerY`,计算对象的位置和大小。\r\n     */\r\n    freshLayout() {\r\n        if (this._widget != Widget.EMPTY) {\r\n            this._widget.resetLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the object.\r\n     * @param destroyChild Whether to destroy child nodes, default is true.\r\n     * @zh 销毁对象。\r\n     * @param destroyChild 是否销毁子节点,默认为 true。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._dataSource = null;\r\n        this._toolTip = null;\r\n    }\r\n}\r\n","import { UIComponent } from \"./UIComponent\";\r\n\r\n/**\r\n * @en The `Box` class is the base class for UI containers.\r\n * Other container components will inherit from this class.\r\n * @zh `Box` 类是 UI 容器的基类。\r\n * 其他的容器组件都会继承于该类。\r\n */\r\nexport class Box extends UIComponent {\r\n\r\n    /**\r\n     * @en The background color.\r\n     * @zh 背景颜色。\r\n     */\r\n    private _bgColor: string;\r\n\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        for (let name in value) {\r\n            let comp = (<UIComponent>this.getChildByName(name));\r\n            if (comp)\r\n                comp.dataSource = value[name];\r\n            else if (name in this && !((this as any)[name] instanceof Function))\r\n                (this as any)[name] = value[name];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @en background color\r\n    * @zh 容器的背景颜色\r\n    */\r\n    get bgColor(): string {\r\n        return this._bgColor;\r\n    }\r\n    set bgColor(value: string) {\r\n        this._bgColor = value;\r\n        this.graphics.clear();\r\n        this.graphics.drawRect(0, 0, 1, 1, this._bgColor, null, null, true);\r\n    }\r\n\r\n}","\r\n/**\r\n * @en The `Styles` class defines common style properties used by components.\r\n * @zh Styles 定义了组件常用的样式属性。\r\n */\r\nexport class Styles {\r\n\r\n    /**\r\n     * @en Default nine-slice grid information.\r\n     * @zh 默认九宫格信息。\r\n     */\r\n    static defaultSizeGrid: any[] = [4, 4, 4, 4, 0];\r\n\r\n    //-----------------Label-----------------\r\n    /**\r\n     * @en The color of the label text.\r\n     * @zh 标签颜色。\r\n     */\r\n    static labelColor: string = \"#000000\";\r\n    /**\r\n     * @en The padding of the label, in pixels. Defined as [top, right, bottom, left].\r\n     * @zh 标签的边距，格式为 [上边距，右边距，下边距，左边距]。\r\n     */\r\n    static labelPadding: any[] = [2, 2, 2, 2];\r\n\r\n    /**\r\n     * @en The padding of the input label, in pixels. Defined as [top, right, bottom, left].\r\n     * @zh 输入框标签的边距，格式为 [上边距，右边距，下边距，左边距]。\r\n     */\r\n    static inputLabelPadding: any[] = [1, 1, 1, 3];\r\n\r\n    //-----------------Button-----------------\r\n    /**\r\n     * @en The number of state skins for a button, which supports 1, 2, or 3 states values.\r\n     * @zh 按钮皮肤的状态数，支持1,2,3三种状态值。\r\n     */\r\n    static buttonStateNum: number = 3;\r\n    /**\r\n     * @en The colors of the button label. Defined as [upColor, overColor, downColor].\r\n     * @zh 按钮标签颜色，格式为 [upColor, overColor, downColor]。\r\n     */\r\n    static buttonLabelColors: any[] = [\"#32556b\", \"#32cc6b\", \"#ff0000\"];\r\n\r\n    //-----------------ComboBox-----------------\r\n    /**\r\n     * @en The colors of the combo box. Defined as [overBgColor, overLabelColor, outLabelColor, borderColor, bgColor].\r\n     * @zh 下拉框项颜色，格式为 [overBgColor, overLabelColor, outLabelColor, borderColor, bgColor]。\r\n     */\r\n    static comboBoxItemColors: any[] = [\"#5e95b6\", \"#ffffff\", \"#000000\", \"#8fa4b1\", \"#ffffff\"];\r\n\r\n    //-----------------ScrollBar-----------------\r\n    /**\r\n     * @en The minimum size of the scrollbar thumb, in pixels.\r\n     * @zh 滚动条的最小值。\r\n     */\r\n    static scrollBarMinNum: number = 15;\r\n    /**\r\n     * @en The delay time before initiating continuous scrolling when a button is held down.\r\n     * @zh 长按按钮后，等待时间使其可激活连续滚动。\r\n     */\r\n    static scrollBarDelayTime: number = 500;\r\n}\r\n\r\nexport enum ScrollType {\r\n    None,\r\n    Horizontal,\r\n    Vertical,\r\n    Both\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { ISelect } from \"./ISelect\";\r\nimport { Styles } from \"./Styles\";\r\nimport { NodeFlags, HideFlags } from \"../Const\"\r\nimport { Text } from \"../display/Text\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Loader } from \"../net/Loader\"\r\nimport { Texture } from \"../resource/Texture\"\r\nimport { AutoBitmap } from \"./AutoBitmap\"\r\nimport { UIUtils } from \"./UIUtils\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { URL } from \"../net/URL\";\r\n/**\r\n * @en The Button component is used to represent a button with multiple states. The Button component can display a text label, an icon, or both.\r\n * The states can be single-state, two-state (normal, pressed), or three-state (normal, hover, pressed). By default, it is three-state.\r\n * @zh `Button` 组件用来表示多种状态的按钮。`Button` 组件可显示文本标签、图标或同时显示两者。\r\n * 多种状态，可以是单态，两态（移出、按下）和三态(移出、悬停、按下)，默认是三态。\r\n */\r\nexport class Button extends UIComponent implements ISelect {\r\n    /**\r\n     * @en Controls whether the button can toggle its display state. When the value is true, the display state can be toggled by clicking, such as switching between selected and unselected states.\r\n     * @zh 用于控制按钮是否可切换显示状态；值为 true 时，才可以在运行后通过点击切换显示状态。例如选中状态和未选中状态。\r\n     */\r\n    toggle: boolean;\r\n\r\n    /**\r\n     * @en The text on the button.\r\n     * @zh 按钮上的文本。\r\n     */\r\n    protected _text: Text;\r\n    /**\r\n     * @en The color value of the button's text label.\r\n     * @zh 按钮文本标签的颜色值。\r\n     */\r\n    protected _labelColors: string[];\r\n    /**\r\n     * @en The color value of the button's text label stroke.\r\n     * @zh 按钮文本标签描边的颜色值。\r\n     */\r\n    protected _strokeColors: string[];\r\n    /**\r\n     * @en The state value of the button.\r\n     * @zh 按钮的状态值。\r\n     */\r\n    protected _state: number = 0;\r\n    /**\r\n     * @en Indicates the selected state of the button.\r\n     * @zh 表示按钮的选中状态。\r\n     */\r\n    protected _selected: boolean;\r\n\r\n    /**\r\n     * @en The skin resource of the button.\r\n     * @zh 按钮的皮肤资源。\r\n     */\r\n    protected _skin: string;\r\n\r\n    /**\r\n     * @en Specifies whether the display object automatically calculates and changes size and other attributes.\r\n     * @zh 指定此显示对象是否自动计算并改变大小等属性。\r\n     */\r\n    protected _autoSize: boolean = true;\r\n\r\n    /**\r\n     * @en The number of states for the button.\r\n     * @zh 按钮的状态数。\r\n     */\r\n    protected _stateNum: number;\r\n    /**\r\n     * @en The click event handler of the button.\r\n     * @zh 按钮的点击事件函数。\r\n     */\r\n    protected _clickHandler: Handler;\r\n\r\n    protected _stateChanged: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    declare _graphics: AutoBitmap;\r\n\r\n    /**\r\n     * @en The state value of the button.\r\n     * @zh 对象的状态值。\r\n     */\r\n    protected get state(): number {\r\n        return this._state;\r\n    }\r\n\r\n    protected set state(value: number) {\r\n        if (this._state != value) {\r\n            this._state = value;\r\n            this._setStateChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The skin resource address of the object.\r\n     * Supports single state, two states and three states, set with the `stateNum` property.\r\n     * @zh 对象的皮肤资源地址。\r\n     * 支持单态，两态和三态，用 `stateNum` 属性设置\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The state value of the object, expressed as a number.\r\n     * The default value is 3. This value determines how the skin resource image is sliced.\r\n     * Values:\r\n     * - 1: Single state. The image is not sliced, and the button has only one skin state.\r\n     * - 2: Two states. The image will be sliced equally in the vertical direction into 2 parts, from top to bottom, the up state skin and the down and over and selected state skin, respectively.\r\n     * - 3: Three states. The image will be sliced equally in the vertical direction into 3 parts, from top to bottom, the up state skin, the over state skin, and the down and selected state skin, respectively.\r\n     * @zh 指定对象的状态值，以数字表示。\r\n     * 默认值为3。此值决定皮肤资源图片的切割方式。\r\n     * 取值：\r\n     * - 1：单态。图片不做切割，按钮的皮肤状态只有一种。\r\n     * - 2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、按下和经过及选中状态皮肤。\r\n     * - 3：三态。图片将以竖直方向被等比切割为3部分，从上向下，依次为弹起状态皮肤、经过状态皮肤、按下和选中状态皮肤\r\n     */\r\n    get stateNum(): number {\r\n        return this._stateNum;\r\n    }\r\n\r\n    set stateNum(value: number) {\r\n        if (typeof (value as any) == 'string') {\r\n            value = parseInt(value as any);\r\n        }\r\n        if (this._stateNum != value) {\r\n            this._stateNum = value < 1 ? 1 : value > 3 ? 3 : value;\r\n            this._graphics.setState(this._state, this._stateNum);\r\n            if (this._skin) {\r\n                this.callLater(this.changeClips);\r\n                this._setStateChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The text content of the button.\r\n     * @zh 按钮的文本内容。\r\n     */\r\n    get label(): string {\r\n        return this._text ? this._text.text : null;\r\n    }\r\n\r\n    set label(value: string) {\r\n        if (!this._text && !value) return;\r\n        this.createText();\r\n        if (this._text.text != value) {\r\n            value && !this._text.parent && this.addChild(this._text);\r\n            this._text.text = (value + \"\").replace(/\\\\n/g, \"\\n\");\r\n            this._setStateChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the selected state of the button.\r\n     * If the value is true, it indicates that the object is in the selected state. Otherwise, it is not selected.\r\n     * @zh 表示按钮的选中状态。\r\n     * 如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。\r\n     */\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    set selected(value: boolean) {\r\n        if (this._selected != value) {\r\n            this._selected = value;\r\n            this.state = this._selected ? 2 : 0;\r\n            this.event(Event.CHANGE);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n      * @en The text color of the button in each state.\r\n      * Format: \"upColor,overColor,downColor\".\r\n      * @zh 表示按钮各个状态下的文本颜色。\r\n      * 格式: \"upColor,overColor,downColor\"。\r\n      */\r\n    get labelColors(): string {\r\n        return this._labelColors.join(\",\");\r\n    }\r\n\r\n    set labelColors(value: string) {\r\n        this._labelColors = UIUtils.fillArray(Styles.buttonLabelColors, value, String);\r\n        this._setStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The stroke color of the button in each state.\r\n     * Format: \"upColor,overColor,downColor\".\r\n     * @zh 表示按钮各个状态下的描边颜色。\r\n     * 格式: \"upColor,overColor,downColor\"。\r\n     */\r\n    get strokeColors(): string {\r\n        return this._strokeColors ? this._strokeColors.join(\",\") : \"\";\r\n    }\r\n    set strokeColors(value: string) {\r\n        this._strokeColors = UIUtils.fillArray(Styles.buttonLabelColors, value, String);\r\n        this._setStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The margins of the button's text label.\r\n     * Format: \"top,right,bottom,left\".\r\n     * @zh 表示按钮文本标签的边距。\r\n     * 格式：\"上边距,右边距,下边距,左边距\"。\r\n     */\r\n    get labelPadding(): string {\r\n        this.createText();\r\n        return this._text.padding.join(\",\");\r\n    }\r\n\r\n    set labelPadding(value: string) {\r\n        this.createText();\r\n        this._text.padding = UIUtils.fillArray(Styles.labelPadding, value, Number);\r\n    }\r\n\r\n    /**\r\n     * @en The font size of the button's text label.\r\n     * @zh 表示按钮文本标签的字体大小。\r\n     */\r\n    get labelSize(): number {\r\n        this.createText();\r\n        return this._text.fontSize;\r\n    }\r\n\r\n    set labelSize(value: number) {\r\n        this.createText();\r\n        this._text.fontSize = value\r\n    }\r\n\r\n    /**\r\n     * @en The stroke width, in pixels.\r\n     * Default value is 0, indicating no stroke.\r\n     * @zh 描边宽度（以像素为单位）。\r\n     * 默认值0，表示不描边。\r\n     */\r\n    get labelStroke(): number {\r\n        this.createText();\r\n        return this._text.stroke;\r\n    }\r\n\r\n    set labelStroke(value: number) {\r\n        this.createText();\r\n        this._text.stroke = value\r\n    }\r\n\r\n    /**\r\n     * @en The stroke color, represented by a string.\r\n     * The default value is \"#000000\" (black).\r\n     * @zh 描边颜色，以字符串表示。\r\n     * 默认值为 \"#000000\"（黑色）;\r\n     * @see laya.display.Text.strokeColor()\r\n     */\r\n    get labelStrokeColor(): string {\r\n        this.createText();\r\n        return this._text.strokeColor;\r\n    }\r\n\r\n    set labelStrokeColor(value: string) {\r\n        this.createText();\r\n        this._text.strokeColor = value\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether the button's text label is bold.\r\n     * @zh 表示按钮文本标签是否为粗体字。\r\n     */\r\n    get labelBold(): boolean {\r\n        this.createText();\r\n        return this._text.bold;\r\n    }\r\n\r\n    set labelBold(value: boolean) {\r\n        this.createText();\r\n        this._text.bold = value;\r\n    }\r\n\r\n    /**\r\n     * @en The font name of the button's text label, expressed as a string.\r\n     * @zh 表示按钮文本标签的字体名称，以字符串形式表示。\r\n     */\r\n    get labelFont(): string {\r\n        this.createText();\r\n        return this._text.font;\r\n    }\r\n\r\n    set labelFont(value: string) {\r\n        this.createText();\r\n        this._text.font = value;\r\n    }\r\n\r\n    /**\r\n     * @en The text alignment mode.\r\n     * @zh 标签水平对齐模式。\r\n     */\r\n    get labelAlign(): string {\r\n        this.createText()\r\n        return this._text.align;\r\n    }\r\n\r\n    set labelAlign(value: string) {\r\n        this.createText()\r\n        this._text.align = value;\r\n    }\r\n\r\n    /**\r\n     * @en The vertical alignment mode.\r\n     * @zh 标签垂直对齐模式。\r\n     */\r\n    get labelVAlign(): string {\r\n        this.createText()\r\n        return this._text.valign;\r\n    }\r\n\r\n    set labelVAlign(value: string) {\r\n        this.createText()\r\n        this._text.valign = value;\r\n    }\r\n\r\n    /**\r\n     * @en The click event handler of the object (without default parameters).\r\n     * @zh 对象的点击事件处理器函数（无默认参数）。\r\n     */\r\n    get clickHandler(): Handler {\r\n        return this._clickHandler;\r\n    }\r\n\r\n    set clickHandler(value: Handler) {\r\n        this._clickHandler = value;\r\n    }\r\n\r\n    /**\r\n     * @en The button's text label `Text` control.\r\n     * @zh 按钮文本标签 `Text` 控件。\r\n     */\r\n    get text(): Text {\r\n        this.createText();\r\n        return this._text;\r\n    }\r\n    set text(value: Text) {\r\n        if (typeof (value) == \"string\") {\r\n            this._text && (this._text.text = value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 皮肤纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): string {\r\n        if (this._graphics.sizeGrid) return this._graphics.sizeGrid.join(\",\");\r\n        return null;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        if (value)\r\n            this._graphics.sizeGrid = UIUtils.fillArray(Styles.defaultSizeGrid, value, Number);\r\n        else\r\n            this._graphics.sizeGrid = null;\r\n    }\r\n\r\n    /**\r\n     * @en The x and y offset of the icon, format: 100,100\r\n     * @zh 图标x,y偏移，格式：100,100\r\n     */\r\n    get iconOffset(): string {\r\n        return this._graphics._offset ? this._graphics._offset.join(\",\") : null;\r\n    }\r\n\r\n    set iconOffset(value: string) {\r\n        if (value)\r\n            this._graphics._offset = UIUtils.fillArray([1, 1], value, Number);\r\n        else\r\n            this._graphics._offset = [];\r\n    }\r\n\r\n    /**\r\n     * @en Creates a new instance of the `Button` class.\r\n     * @param skin The address of the skin resource.\r\n     * @param label The text content of the button.\r\n     * @zh 创建一个新的 `Button` 类实例。\r\n     * @param skin 皮肤资源地址。\r\n     * @param label 按钮的文本内容。\r\n     */\r\n    constructor(skin: string = null, label: string = \"\") {\r\n        super();\r\n        this._labelColors = Styles.buttonLabelColors;\r\n        this._stateNum = Styles.buttonStateNum;\r\n\r\n        if (skin)\r\n            this.skin = skin;\r\n        this.label = label;\r\n    }\r\n    protected measureWidth(): number {\r\n        if (this._skin)\r\n            this.runCallLater(this.changeClips);\r\n        if (this._autoSize) return this._graphics.width;\r\n        this.runCallLater(this.changeState);\r\n        return this._graphics.width + (this._text ? this._text.width : 0);\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        if (this._skin)\r\n            this.runCallLater(this.changeClips);\r\n        return this._text ? Math.max(this._graphics.height, this._text.height) : this._graphics.height;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the object and release resources.\r\n     * @zh 销毁\r\n     * @param destroyChild 是否删除子节点\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._text && this._text.destroy(destroyChild);\r\n        this._text = null;\r\n        this._clickHandler = null;\r\n        this._labelColors = this._strokeColors = null;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this.setGraphics(new AutoBitmap(), true);\r\n    }\r\n\r\n    protected createText(): void {\r\n        if (!this._text) {\r\n            this._text = new Text();\r\n            this._text.overflow = Text.HIDDEN;\r\n            this._text.align = \"center\";\r\n            this._text.valign = \"middle\";\r\n            this._text.width = this._width;\r\n            this._text.height = this._height;\r\n            this._text.hideFlags = HideFlags.HideAndDontSave;\r\n        }\r\n    }\r\n    protected initialize(): void {\r\n        if (this._mouseState !== 1) {\r\n            this.mouseEnabled = true;\r\n            this._setBit(NodeFlags.HAS_MOUSE, true);\r\n        }\r\n        this.on(Event.MOUSE_OVER, this, this.onMouse);\r\n        this.on(Event.MOUSE_OUT, this, this.onMouse);\r\n        this.on(Event.MOUSE_DOWN, this, this.onMouse);\r\n        this.on(Event.MOUSE_UP, this, this.onMouse);\r\n        this.on(Event.CLICK, this, this.onMouse);\r\n    }\r\n\r\n    /**\r\n     * @en The event listener process function for the object's `Event.MOUSE_OVER`, `Event.MOUSE_OUT`, `Event.MOUSE_DOWN`, `Event.MOUSE_UP`, and `Event.CLICK` events.\r\n     * @param e The event object.\r\n     * @zh 对象的 `Event.MOUSE_OVER`、`Event.MOUSE_OUT`、`Event.MOUSE_DOWN`、`Event.MOUSE_UP`、`Event.CLICK` 事件侦听处理函数。\r\n     * @param e 事件对象\r\n     */\r\n    protected onMouse(e: Event): void {\r\n        if (this.toggle === false && this._selected) return;\r\n        let type = e ? e.type : Event.CLICK;\r\n        if (type === Event.CLICK) {\r\n            this.toggle && (this.selected = !this._selected);\r\n            this._clickHandler && this._clickHandler.run();\r\n            return;\r\n        }\r\n        !this._selected && (this.state = stateMap[type]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Set the skin resource of the button.\r\n     * @param url The URL of the skin resource.\r\n     * @zh 设置皮肤资源。\r\n     * @param url 皮肤资源的URL。\r\n     */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n        if (url) {\r\n            if (this._skinBaseUrl)\r\n                url = URL.formatURL(url, this._skinBaseUrl);\r\n            let tex = Loader.getRes(url);\r\n            if (!tex)\r\n                return ILaya.loader.load(url, Loader.IMAGE).then(tex => this._skinLoaded(tex));\r\n            else {\r\n                this._skinLoaded(tex);\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n        else {\r\n            this._skinLoaded(null);\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The skin resource is loaded.\r\n     * @param tex The texture resource.\r\n     * @zh 皮肤资源加载完成后的处理。\r\n     * @param tex 纹理资源。\r\n     */\r\n    protected _skinLoaded(tex: any): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this._graphics.source = tex;\r\n        if (tex)\r\n            this.callLater(this.changeClips);\r\n        this._setStateChanged();\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        if (this._autoSize) {\r\n            this._graphics.width = value;\r\n            this._text && (this._text.width = value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        if (this._autoSize) {\r\n            this._graphics.height = value;\r\n            this._text && (this._text.height = value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The resource slices of the object have changed.\r\n     * @zh 对象的资源切片发生改变。\r\n     */\r\n    protected changeClips(): void {\r\n        let width: number = 0, height: number = 0;\r\n\r\n        let img: Texture = Loader.getRes(this._skin);\r\n        if (!img) {\r\n            console.log(`lose skin ${this._skin}`);\r\n            return;\r\n        }\r\n\r\n        width = img.sourceWidth;\r\n        height = img.sourceHeight / (img._stateNum || this._stateNum);\r\n\r\n        if (this._autoSize) {\r\n            this._graphics.width = this._isWidthSet ? this._width : width;\r\n            this._graphics.height = this._isHeightSet ? this._height : height;\r\n            if (this._text) {\r\n                this._text.width = this._graphics.width;\r\n                this._text.height = this._graphics.height;\r\n            }\r\n        } else {\r\n            if (this._text) {\r\n                this._text.x = width;\r\n                this._text.height = height;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Change the state of the object.\r\n     * @zh 改变对象的状态。\r\n     */\r\n    protected changeState(): void {\r\n        this._stateChanged = false;\r\n        if (this._skin)\r\n            this.runCallLater(this.changeClips);\r\n        let index = Math.max(this._state, 0);\r\n        this._graphics.setState(index, this._stateNum);\r\n        if (this.label) {\r\n            this._text.color = this._labelColors[index];\r\n            if (this._strokeColors) this._text.strokeColor = this._strokeColors[index];\r\n        }\r\n    }\r\n    protected _setStateChanged(): void {\r\n        if (!this._stateChanged) {\r\n            this._stateChanged = true;\r\n            this.callLater(this.changeState);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @en Sets the data source.\r\n     * @zh 设置数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        if (typeof (value) == 'number' || typeof (value) == 'string') {\r\n            this._dataSource = value;\r\n            this.label = value + \"\";\r\n        }\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n}\r\n\r\nconst stateMap: any = { \"mouseup\": 0, \"mouseover\": 1, \"mousedown\": 2, \"mouseout\": 0 };","import { Button } from \"./Button\"\r\n/**\r\n * @en The `CheckBox` component displays a small box that can have a check mark. \r\n * - The `CheckBox` component can also display an optional text label, which is positioned to the right of the CheckBox by default.\r\n * - When assigning a value to `CheckBox` using `dataSource`, the default property is `selected`.\r\n * - `change` event, dispatched when the button's selected state (`selected` property) changes.\r\n * @zh `CheckBox` 组件显示一个小方框，该方框内可以有选中标记。\r\n * - `CheckBox` 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。\r\n * - 使用 `dataSource` 赋值时，`CheckBox` 的默认属性是 `selected`。\r\n * - `change`事件，当按钮的选中状态（ `selected` 属性）发生改变时调度。\r\n */\r\nexport class CheckBox extends Button {\r\n\r\n    /**\r\n     * @en `CheckBox` component constructor.\r\n     * @param skin The skin resource address.\r\n     * @param label The content of the text label.\r\n     * @zh `CheckBox` 组件的构造函数。\r\n     * @param skin 皮肤资源地址。\r\n     * @param label 文本标签的内容。\r\n     */\r\n    constructor(skin: string = null, label: string = \"\") {\r\n        super(skin, label);\r\n        this.toggle = true;\r\n        this._autoSize = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc \r\n     * @override \r\n     * @en Preinitialization method. Called before the object is initialized.\r\n     * @zh 预初始化方法。在对象初始化之前调用。\r\n     */\r\n    protected preinitialize(): void {\r\n        super.preinitialize();\r\n        this.toggle = true;\r\n        this._autoSize = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc \r\n     * @override\r\n     * @en Initialization method. Called when the object is initialized.\r\n     * @zh 初始化方法。在对象初始化时调用。\r\n     */\r\n    protected initialize(): void {\r\n        super.initialize();\r\n        this.createText();\r\n        this._text.align = \"left\";\r\n        this._text.valign = \"top\";\r\n        this._text.width = null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc \r\n     * @override\r\n     * @en Sets the data source of the component.\r\n     * @param value The data source.\r\n     * @zh 设置组件的数据源。\r\n     * @param value 数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (value instanceof Boolean)\r\n            this.selected = value as boolean;\r\n        else if (typeof (value) == 'string')\r\n            this.selected = value === \"true\";\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { AutoBitmap } from \"./AutoBitmap\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Styles } from \"./Styles\";\r\nimport { NodeFlags } from \"../Const\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Loader } from \"../net/Loader\"\r\nimport { Texture } from \"../resource/Texture\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { URL } from \"../net/URL\";\r\n/**\r\n * @en The `Clip` class is a bitmap slice animation.\r\n * `Clip` can split an image into a slice animation by horizontal split count `clipX`, vertical split count `clipY`, \r\n * or horizontal split width `clipWidth`, vertical split height `clipHeight`, \r\n * from left to right, from top to bottom.\r\n * The Image and Clip components are the only two components that support asynchronous loading, such as clip.skin = \"abc/xxx.png\". Other UI components do not support asynchronous loading.\r\n * @zh `Clip` 类是位图切片动画。\r\n * `Clip` 可将一张图片，按横向分割数量 `clipX` 、竖向分割数量 `clipY` ，\r\n * 或横向分割每个切片的宽度 `clipWidth` 、竖向分割每个切片的高度 `clipHeight` ，\r\n * 从左向右，从上到下，分割组合为一个切片动画。\r\n * Image和Clip组件是唯一支持异步加载的两个组件，比如clip.skin = \"abc/xxx.png\"，其他UI组件均不支持异步加载。\r\n */\r\nexport class Clip extends UIComponent {   \r\n    protected _sources: Texture[];\r\n    protected _skin: string;\r\n    protected _clipX: number = 1;\r\n    protected _clipY: number = 1;\r\n    protected _clipWidth: number = 0;\r\n    protected _clipHeight: number = 0;\r\n    protected _autoPlay: boolean;\r\n    protected _interval: number = 50;\r\n    protected _complete: Handler;\r\n    protected _isPlaying: boolean;\r\n    protected _index: number = 0;\r\n    protected _clipChanged: boolean;\r\n    protected _group: string;\r\n    protected _toIndex: number = -1;\r\n    /**@internal */\r\n    declare _graphics: AutoBitmap;\r\n\r\n    /**\r\n     * @en The address of the skin resource.\r\n     * @zh 皮肤资源地址\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n    set skin(value: string) {\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en Number of slices on the X-axis (horizontal).\r\n     * @zh X轴（横向）切片数量。\r\n     */\r\n    get clipX(): number {\r\n        return this._clipX;\r\n    }\r\n\r\n    set clipX(value: number) {\r\n        this._clipX = value || 1;\r\n        this._setClipChanged()\r\n    }\r\n\r\n    /**\r\n     * @en Number of slices on the Y-axis (vertical).\r\n     * @zh Y轴(竖向)切片数量。\r\n     */\r\n    get clipY(): number {\r\n        return this._clipY;\r\n    }\r\n\r\n    set clipY(value: number) {\r\n        this._clipY = value || 1;\r\n        this._setClipChanged()\r\n    }\r\n\r\n    /**\r\n     * @en Width of each slice when dividing horizontally. Takes precedence over `clipX` when set together with `clipX`.\r\n     * @zh 横向分割时每个切片的宽度，与 `clipX` 同时设置时优先级高于 `clipX` 。\r\n     */\r\n    get clipWidth(): number {\r\n        return this._clipWidth;\r\n    }\r\n\r\n    set clipWidth(value: number) {\r\n        this._clipWidth = value;\r\n        this._setClipChanged()\r\n    }\r\n\r\n     /**\r\n     * @en Height of each slice when dividing vertically. Takes precedence over `clipY` when set together with `clipY`.\r\n     * @zh 竖向分割时每个切片的高度，与 `clipY` 同时设置时优先级高于 `clipY` 。\r\n     */\r\n    get clipHeight(): number {\r\n        return this._clipHeight;\r\n    }\r\n\r\n    set clipHeight(value: number) {\r\n        this._clipHeight = value;\r\n        this._setClipChanged()\r\n    }\r\n\r\n    /**\r\n     * @en Source data.\r\n     * @zh 源数据。\r\n     */\r\n    get sources(): Texture[] {\r\n        return this._sources;\r\n    }\r\n\r\n    set sources(value: Texture[]) {\r\n        this._sources = value;\r\n        this.index = this._index;\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n     /**\r\n     * @en Resource group.\r\n     * @zh 资源分组。\r\n     */\r\n    get group(): string {\r\n        return this._group;\r\n    }\r\n\r\n    set group(value: string) {\r\n        if (value && this._skin) Loader.setGroup(this._skin, value);\r\n        this._group = value;\r\n    }\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): string {\r\n        if (this._graphics.sizeGrid) return this._graphics.sizeGrid.join(\",\");\r\n        return null;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        if (value)\r\n            this._graphics.sizeGrid = UIUtils.fillArray(Styles.defaultSizeGrid, value, Number);\r\n        else\r\n            this._graphics.sizeGrid = null;\r\n    }\r\n\r\n    /**\r\n     * @en Current frame index.\r\n     * @zh 当前帧索引。\r\n     */\r\n    get index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    set index(value: number) {\r\n        this._index = value;\r\n        this._graphics && (this._graphics.source = this._sources[value]);\r\n        this.event(Event.CHANGE);\r\n    }\r\n\r\n    /**\r\n     * @en Total frames of the slice animation.\r\n     * @zh 切片动画的总帧数。\r\n     */\r\n    get total(): number {\r\n        this.runCallLater(this.changeClip);\r\n        return this._sources.length;\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether the slice animation is automatically played. If true, the slice animation is automatically played; otherwise, it is not.\r\n     * It can control the playback and stop of the slice animation.\r\n     * @zh 是否自动播放切片动画，若自动播放值为true,否则值为false。\r\n     * 可控制切片动画的播放、停止。\r\n     */\r\n    get autoPlay(): boolean {\r\n        return this._autoPlay;\r\n    }\r\n\r\n    set autoPlay(value: boolean) {\r\n        if (this._autoPlay != value) {\r\n            this._autoPlay = value;\r\n            value ? this.play() : this.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the interval (in milliseconds) at which the slice animation is played.\r\n     * @zh 切片动画播放间隔时间（以毫秒为单位）。\r\n     */\r\n    get interval(): number {\r\n        return this._interval;\r\n    }\r\n\r\n    set interval(value: number) {\r\n        if (this._interval != value) {\r\n            this._interval = value;\r\n            if (this._isPlaying) this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the current playback state of the slice animation.\r\n     * If the slice animation is playing, the value is true; otherwise, it is false.\r\n     * @zh 切片动画的当前播放状态。\r\n     * 如果切片动画正在播放中，则为true，否则为false。\r\n     */\r\n    get isPlaying(): boolean {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    set isPlaying(value: boolean) {\r\n        this._isPlaying = value;\r\n    }\r\n\r\n    /**\r\n     * @en 'Clip' constructor.\r\n     * @param url Resource address.\r\n     * @param clipX Number of divisions in the X direction.\r\n     * @param clipY Number of divisions in the Y direction.\r\n     * @zh  `Clip` 构造函数。\r\n     * @param url 资源地址。\r\n     * @param clipX X方向分割数量。\r\n     * @param clipY Y方向分割数量。\r\n     */\r\n    constructor(url: string = null, clipX: number = 1, clipY: number = 1) {\r\n        super();\r\n\r\n        this._sources = [];\r\n        this._clipX = clipX;\r\n        this._clipY = clipY;\r\n        this.skin = url;\r\n    }\r\n\r\n    protected _onDisplay(e?: boolean): void {\r\n        if (this._isPlaying) {\r\n            if (this._getBit(NodeFlags.DISPLAYED_INSTAGE)) this.play();\r\n            else this.stop();\r\n        } else if (this._autoPlay) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n        if (url) {\r\n            if (this._skinBaseUrl)\r\n                url = URL.formatURL(url, this._skinBaseUrl);\r\n            if (!Loader.getRes(url))\r\n                return ILaya.loader.load(url, Loader.IMAGE).then(() => this._skinLoaded());\r\n            else {\r\n                this._skinLoaded();\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n        else {\r\n            this._graphics.source = null;\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    protected _skinLoaded(): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this._setClipChanged();\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    protected _setClipChanged(): void {\r\n        if (!this._clipChanged) {\r\n            this._clipChanged = true;\r\n            this.callLater(this.changeClip);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._graphics.width = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._graphics.height = value;\r\n    }\r\n\r\n    protected _loop(): void {\r\n        if (this._visible) {\r\n            this._index++;\r\n            if (this._toIndex > -1 && this._index >= this._toIndex)\r\n                this.stop();\r\n            else if (this._index >= this._sources.length)\r\n                this._index = 0;\r\n            this.index = this._index;\r\n        }\r\n    }\r\n    protected createChildren(): void {\r\n        this.setGraphics(new AutoBitmap(), true);\r\n    }\r\n\r\n    /**\r\n     * @en Changes the resources and size of the slices.\r\n     * @zh 改变切片的资源、切片的大小。\r\n     */\r\n    protected changeClip(): void {\r\n        this._clipChanged = false;\r\n        if (!this._skin || this._destroyed) return;\r\n\r\n        let url = this._skinBaseUrl ? URL.formatURL(this._skin, this._skinBaseUrl) : this._skin;\r\n\r\n        let img: any = Loader.getRes(url);\r\n        if (img) {\r\n            this.loadComplete(this._skin, img);\r\n        } else {\r\n            ILaya.loader.load(url, Handler.create(this, this.loadComplete, [this._skin]), null, Loader.IMAGE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Callback function when the sliced image resources are loaded.\r\n     * @param url Resource URL.\r\n     * @param img Texture.\r\n     * @zh 加载切片图片资源完成函数。\r\n     * @param url 资源地址。\r\n     * @param img 纹理。\r\n     */\r\n    protected loadComplete(url: string, img: Texture): void {\r\n        if (url !== this._skin)\r\n            return;\r\n\r\n        this._sources.length = 0;\r\n        if (img) {\r\n            var w: number = this._clipWidth || Math.ceil(img.sourceWidth / this._clipX);\r\n            var h: number = this._clipHeight || Math.ceil(img.sourceHeight / this._clipY);\r\n\r\n            for (let i = 0; i < this._clipY; i++) {\r\n                for (let j = 0; j < this._clipX; j++) {\r\n                    this._sources.push(img.getCachedClip(w * j, h * i, w, h));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.index = this._index;\r\n        this.event(Event.LOADED);\r\n        this.onCompResize();\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        this.runCallLater(this.changeClip);\r\n        return this._graphics.width;\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        this.runCallLater(this.changeClip);\r\n        return this._graphics.height;\r\n    }\r\n\r\n    /**\r\n     * @en Plays the slice animation.\r\n     * @param from Start index.\r\n     * @param to End index, -1 is not limited.\r\n     * @zh 播放切片动画。\r\n     * @param\tfrom\t开始索引\r\n     * @param\tto\t\t结束索引，-1为不限制\r\n     */\r\n    play(from: number = 0, to: number = -1): void {\r\n        this._setClipChanged();\r\n        this._isPlaying = true;\r\n        this.index = from;\r\n        this._toIndex = to;\r\n        // this._index++;\r\n        //修复clip重复播放丢失帧的问题\r\n        ILaya.timer.loop(this.interval, this, this._loop);\r\n\r\n        this.on(Event.DISPLAY, this, this._onDisplay);\r\n        this.on(Event.UNDISPLAY, this, this._onDisplay);\r\n    }\r\n\r\n    /**\r\n     * @en Stops the slice animation.\r\n     * @zh 停止切片动画。\r\n     */\r\n    stop(): void {\r\n        this._isPlaying = false;\r\n        ILaya.timer.clear(this, this._loop);\r\n        this.event(Event.COMPLETE);\r\n    }\r\n    set_dataSource(value: any): void {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.index = parseInt(value as string);\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { Box } from \"./Box\";\r\nimport { Button } from \"./Button\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Graphics } from \"../display/Graphics\"\r\nimport { Input } from \"../display/Input\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\n\r\n/**\r\n * @en The `ColorPicker` component displays a color palette from which the user can select a color.\r\n * @zh `ColorPicker` 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。\r\n */\r\nexport class ColorPicker extends UIComponent {\r\n\r\n    /**\r\n     * @en Specifies the width and height of each color cell (in pixels).\r\n     * @zh 指定每个正方形的颜色小格子的宽高（以像素为单位）。\r\n     */\r\n    protected _gridSize: number = 11;\r\n    /**\r\n     * @en The background color value of the color palette panel.\r\n     * @zh 表示颜色样本列表面板的背景颜色值。\r\n     */\r\n    protected _bgColor: string = \"#ffffff\";\r\n    /**\r\n     * @en The border color value of the color palette panel.\r\n     * @zh 表示颜色样本列表面板的边框颜色值。\r\n     */\r\n    protected _borderColor: string = \"#000000\";\r\n    /**\r\n     * @en Represents the color value selected or input in the color sample list panel.\r\n     * @cn 表示颜色样本列表面板选择或输入的颜色值。\r\n     */\r\n    protected _inputColor: string = \"#000000\";\r\n    /**\r\n     * @en The background color value of the color input box.\r\n     * @zh 表示颜色输入框的背景颜色值。\r\n     */\r\n    protected _inputBgColor: string = \"#efefef\";\r\n    /**\r\n     * @en Represents the color palette panel.\r\n     * @zh 表示颜色样本列表面板。\r\n     */\r\n    protected _colorPanel: Box;\r\n    /**\r\n     * @en Represents the color grid.\r\n     * @zh 表示颜色网格。\r\n     */\r\n    protected _colorTiles: Sprite;\r\n    /**\r\n     * @en Represents the color block display object.\r\n     * @zh 表示颜色块显示对象。\r\n     */\r\n    protected _colorBlock: Sprite;\r\n    /**\r\n     * @en Represents the color input box control `Input`.\r\n     * @zh 表示颜色输入框控件 `Input`。\r\n     */\r\n    protected _colorInput: Input;\r\n    /**\r\n     * @en Represents the button control `Button` that displays the color palette panel when clicked.\r\n     * @zh 表示点击后显示颜色样本列表面板的按钮控件 `Button`。\r\n     */\r\n    protected _colorButton: Button;\r\n     /**\r\n     * @en Represents the list of color values.\r\n     * @zh 表示颜色值列表。\r\n     */\r\n    protected _colors: any[] = [];\r\n    /**\r\n     * @en Represents the selected color value.  \r\n     * @zh 表示选择的颜色值。\r\n     */\r\n    protected _selectedColor: string = \"#000000\";\r\n    protected _panelChanged: boolean;\r\n\r\n    /**\r\n     * @en The function handler executed when the color changes.\r\n     * The default return parameter is `color`: the color value string.\r\n     * @zh 当颜色发生改变时执行的函数处理器。\r\n     * 默认返回参数color：颜色值字符串。\r\n     */\r\n    changeHandler: Handler;\r\n\r\n\r\n    /**\r\n     * @en The selected color value.\r\n     * @zh 表示选择的颜色值。\r\n     */\r\n    get selectedColor(): string {\r\n        return this._selectedColor;\r\n    }\r\n    set selectedColor(value: string) {\r\n        if (this._selectedColor != value) {\r\n            this._selectedColor = this._colorInput.text = value;\r\n            this.drawBlock(value);\r\n            this.changeColor();\r\n            this.changeHandler && this.changeHandler.runWith(this._selectedColor);\r\n            this.event(Event.CHANGE, Event.EMPTY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The skin URL of the color picker.\r\n     * @zh 颜色选择器的皮肤地址。\r\n     */\r\n    get skin(): string {\r\n        return this._colorButton.skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        this._colorButton.once(Event.LOADED, this, this.changeColor);\r\n        this._colorButton.skin = value;\r\n        //changeColor();\r\n    }\r\n\r\n    /**\r\n     * @en The background color value of the color palette panel.\r\n     * @zh 表示颜色样本列表面板的背景颜色值。\r\n     */\r\n    get bgColor(): string {\r\n        return this._bgColor;\r\n    }\r\n\r\n    set bgColor(value: string) {\r\n        this._bgColor = value;\r\n        this._setPanelChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The border color value of the color palette panel.\r\n     * @zh 表示颜色样本列表面板的边框颜色值。\r\n     */\r\n    get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    set borderColor(value: string) {\r\n        this._borderColor = value;\r\n        this._setPanelChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The color value selected or entered in the color palette panel.\r\n     * @zh 表示颜色样本列表面板选择或输入的颜色值。\r\n     */\r\n    get inputColor(): string {\r\n        return this._inputColor;\r\n    }\r\n\r\n    set inputColor(value: string) {\r\n        this._inputColor = value;\r\n        this._setPanelChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The background color value of the color input box.\r\n     * @zh 表示颜色输入框的背景颜色值。\r\n     */\r\n    get inputBgColor(): string {\r\n        return this._inputBgColor;\r\n    }\r\n\r\n    set inputBgColor(value: string) {\r\n        this._inputBgColor = value;\r\n        this._setPanelChanged();\r\n    }\r\n\r\n    constructor(createChildren = true) {\r\n        super(false);\r\n        if (createChildren) {\r\n            this.preinitialize();\r\n            this.createChildren();\r\n            this.initialize();\r\n        }\r\n    }\r\n\r\n    protected _setPanelChanged(): void {\r\n        if (!this._panelChanged) {\r\n            this._panelChanged = true;\r\n            this.callLater(this.changePanel);\r\n        }\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._colorButton = new Button()\r\n        this._colorButton.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this._colorButton);\r\n        this._colorPanel = new Box();\r\n        this._colorPanel.hideFlags = HideFlags.HideAndDontSave;\r\n        this._colorPanel.size(230, 166);\r\n        this._colorPanel.addChild(this._colorTiles = new Sprite());\r\n        this._colorPanel.addChild(this._colorBlock = new Sprite());\r\n        this._colorPanel.addChild(this._colorInput = new Input());\r\n    }\r\n\r\n    protected initialize(): void {\r\n        this._colorButton.on(Event.CLICK, this, this.onColorButtonClick);\r\n\r\n        this._colorBlock.pos(5, 5);\r\n\r\n        this._colorInput.pos(60, 5);\r\n        this._colorInput.size(60, 20);\r\n        this._colorInput.on(Event.CHANGE, this, this.onColorInputChange);\r\n        this._colorInput.on(Event.KEY_DOWN, this, this.onColorFieldKeyDown);\r\n\r\n        this._colorTiles.pos(5, 30);\r\n        this._colorTiles.on(Event.MOUSE_MOVE, this, this.onColorTilesMouseMove);\r\n        this._colorTiles.on(Event.CLICK, this, this.onColorTilesClick);\r\n        this._colorTiles.size(20 * this._gridSize, 12 * this._gridSize);\r\n\r\n        this._colorPanel.on(Event.MOUSE_DOWN, this, this.onPanelMouseDown);\r\n\r\n        this.bgColor = this._bgColor;\r\n    }\r\n\r\n    private onPanelMouseDown(e: Event): void {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * @en Changes the color palette panel.\r\n     * @zh 改变颜色样本列表面板。\r\n     */\r\n    protected changePanel(): void {\r\n        this._panelChanged = false;\r\n        var g: Graphics = this._colorPanel.graphics;\r\n        g.clear(true);\r\n        //g.drawRect(0, 0, 230, 166, _bgColor);\r\n        g.drawRect(0, 0, 230, 166, this._bgColor, this._borderColor);\r\n\r\n        this.drawBlock(this._selectedColor);\r\n\r\n        this._colorInput.borderColor = this._borderColor;\r\n        this._colorInput.bgColor = this._inputBgColor;\r\n        this._colorInput.color = this._inputColor;\r\n\r\n        g = this._colorTiles.graphics;\r\n        g.clear(true);\r\n\r\n        var mainColors: any[] = [0x000000, 0x333333, 0x666666, 0x999999, 0xCCCCCC, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0x00FFFF, 0xFF00FF];\r\n        for (var i: number = 0; i < 12; i++) {\r\n            for (var j: number = 0; j < 20; j++) {\r\n                var color: number;\r\n                if (j === 0) color = mainColors[i];\r\n                else if (j === 1) color = 0x000000;\r\n                else color = (((i * 3 + j / 6) % 3 << 0) + ((i / 6) << 0) * 3) * 0x33 << 16 | j % 6 * 0x33 << 8 | (i << 0) % 6 * 0x33;\r\n\r\n                var strColor: string = UIUtils.toColor(color);\r\n                this._colors.push(strColor);\r\n\r\n                var x: number = j * this._gridSize;\r\n                var y: number = i * this._gridSize;\r\n\r\n                g.drawRect(x, y, this._gridSize, this._gridSize, strColor, \"#000000\");\r\n                //g.drawRect(x + 1, y + 1, _gridSize - 1, _gridSize - 1, strColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.MOUSE_DOWN` event of the color button.\r\n     * @param e The event object.\r\n     * @zh 颜色样本列表面板显示按钮的 `Event.MOUSE_DOWN` 事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    private onColorButtonClick(e: Event): void {\r\n        if (this._colorPanel.parent) this.close();\r\n        else this.open();\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.MOUSE_DOWN` event of the stage to close the color palette panel.\r\n     * @param e (Optional) The event object. \r\n     * @zh 处理舞台的 `Event.MOUSE_DOWN` 事件侦听处理函数，关闭颜色面板。\r\n     * @param e (可选) 事件对象。\r\n     */\r\n    private removeColorBox(e: Event = null): void {\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.KEY_DOWN` event of the color input field.\r\n     * @param e The event object.\r\n     * @zh 处理颜色输入框的 `Event.KEY_DOWN` 事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    private onColorFieldKeyDown(e: Event): void {\r\n        if (e.keyCode == 13) {\r\n            if (this._colorInput.text) this.selectedColor = this._colorInput.text;\r\n            else this.selectedColor = null;\r\n            this.close();\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.CHANGE` event of the color input field.\r\n     * @param e (Optional) The event object.\r\n     * @zh 处理颜色输入框的 `Event.CHANGE` 事件侦听处理函数。\r\n     * @param e (可选) 事件对象。\r\n     */\r\n    private onColorInputChange(e: Event = null): void {\r\n        if (this._colorInput.text) this.drawBlock(this._colorInput.text);\r\n        else this.drawBlock(\"#FFFFFF\");\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.CLICK` event of the color tiles.\r\n     * @param e The event object.\r\n     * @zh 处理颜色格子的 `Event.CLICK` 事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    private onColorTilesClick(e: Event): void {\r\n        this.selectedColor = this.getColorByMouse();\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * @en Handles the `Event.MOUSE_MOVE` event of the color tiles.\r\n     * @param e The event object.\r\n     * @zh 处理颜色格子的 `Event.MOUSE_MOVE` 事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    private onColorTilesMouseMove(e: Event): void {\r\n        this._colorInput.focus = false;\r\n        var color: string = this.getColorByMouse();\r\n        this._colorInput.text = color;\r\n        this.drawBlock(color);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the color value of the corresponding color block based on the mouse position.\r\n     * @zh 通过鼠标位置取对应的颜色块的颜色值。\r\n     */  \r\n    protected getColorByMouse(): string {\r\n        var point: Point = this._colorTiles.getMousePoint();\r\n        var x: number = Math.floor(point.x / this._gridSize);\r\n        var y: number = Math.floor(point.y / this._gridSize);\r\n        return this._colors[y * 20 + x];\r\n    }\r\n\r\n    /**\r\n     * @en Draws the color block.\r\n     * @param color The color value to draw.\r\n     * @zh 绘制颜色块。\r\n     * @param color 要绘制的颜色值。\r\n     */\r\n    private drawBlock(color: string): void {\r\n        var g: Graphics = this._colorBlock.graphics;\r\n        g.clear(true);\r\n        var showColor: string = color ? color : \"#ffffff\";\r\n        g.drawRect(0, 0, 50, 20, showColor, this._borderColor);\r\n\r\n        color || g.drawLine(0, 0, 50, 20, \"#ff0000\");\r\n    }\r\n\r\n    /**\r\n     * @en Changes the color.\r\n     * @zh 改变颜色。\r\n     */\r\n    private changeColor(): void {\r\n        var g: Graphics = this.graphics;\r\n        g.clear(true);\r\n        var showColor: string = this._selectedColor || \"#000000\";\r\n        g.drawRect(0, 0, this._colorButton.width, this._colorButton.height, showColor);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Opens the color palette panel.\r\n     * @zh 打开颜色样本列表面板。\r\n     */\r\n    open(): void {\r\n        let stage = ILaya.stage;\r\n        var p: Point = this.localToGlobal(new Point());\r\n        var px: number = p.x + this._colorPanel.width <= stage.width ? p.x : stage.width - this._colorPanel.width;\r\n        var py: number = p.y + this._colorButton.height;\r\n        py = py + this._colorPanel.height <= stage.height ? py : p.y - this._colorPanel.height;\r\n        this._colorPanel.pos(px, py);\r\n        this._colorPanel.zOrder = 1001;\r\n        stage.addChild(this._colorPanel);\r\n        stage.on(Event.MOUSE_DOWN, this, this.removeColorBox);\r\n    }\r\n\r\n    /**\r\n     * @en Closes the color palette panel.\r\n     * @zh 关闭颜色样本列表面板。\r\n     */\r\n    close(): void {\r\n        ILaya.stage.off(Event.MOUSE_DOWN, this, this.removeColorBox);\r\n        this._colorPanel.removeSelf();\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the color picker component.\r\n     * @param destroyChild Indicates whether to destroy the component's children as well. Default value is true.\r\n     * @zh 销毁颜色选择器组件。\r\n     * @param destroyChild 是否同时销毁子项。默认为 true。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        ILaya.stage.off(Event.MOUSE_DOWN, this, this.removeColorBox);\r\n        super.destroy(destroyChild);\r\n        this._colorPanel && this._colorPanel.destroy(destroyChild);\r\n        this._colorButton && this._colorButton.destroy(destroyChild);\r\n        this._colorPanel = null;\r\n        this._colorTiles = null;\r\n        this._colorBlock = null;\r\n        this._colorInput = null;\r\n        this._colorButton = null;\r\n        this._colors = null;\r\n        this.changeHandler = null;\r\n    }\r\n}","import { Styles } from \"./Styles\";\r\nimport { Text } from \"../display/Text\"\r\nimport { Event } from \"../events/Event\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { UIUtils } from \"./UIUtils\"\r\nimport { HideFlags } from \"../Const\";\r\nimport { SerializeUtil } from \"../loaders/SerializeUtil\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\n\r\nexport type LabelFitContent = \"no\" | \"yes\" | \"height\";\r\n\r\n/**\r\n * @en The Label class is used to create display objects to display text\r\n * `change` event is dispatched when the text content changes.\r\n * @zh Label 类用于创建显示对象以显示文本。\r\n * `change`事件用于文本内容发生改变后调度。\r\n */\r\nexport class Label extends UIComponent {\r\n\r\n    /**\r\n     * @en Text instance.\r\n     * @zh 文本 Text 实例。\r\n     */\r\n    protected _tf: Text;\r\n    protected _fitContent: LabelFitContent;\r\n    private _fitFlag: boolean;\r\n\r\n    /**\r\n     * @en Current text content string.\r\n     * @zh 当前文本内容字符串。\r\n     */\r\n    get text(): string {\r\n        return this._tf.text;\r\n    }\r\n    set text(value: string) {\r\n        this._tf.text = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the text automatically wraps when it reaches the maximum width.\r\n     * @zh 文本是否在达到最大宽度时自动换行。\r\n     * 值为 true，则该文本字段自动换行；值为 false，则该文本字段不自动换行。\r\n     */\r\n    get wordWrap(): boolean {\r\n        return this._tf.wordWrap;\r\n    }\r\n    set wordWrap(value: boolean) {\r\n        this._tf.wordWrap = value;\r\n    }\r\n\r\n    /**\r\n     * @en Color of the text.\r\n     * @zh 文本颜色。\r\n     */\r\n    get color(): string {\r\n        return this._tf.color;\r\n    }\r\n\r\n    set color(value: string) {\r\n        this._tf.color = value;\r\n    }\r\n\r\n    /**\r\n     * @en Font of the text.\r\n     * @zh 文本字体。\r\n     */\r\n    get font(): string {\r\n        return this._tf.font;\r\n    }\r\n\r\n    set font(value: string) {\r\n        this._tf.font = value;\r\n    }\r\n\r\n    /**\r\n     * @en Horizontal alignment of the text within the label.\r\n     * @zh 文本的水平对齐方式。\r\n     */\r\n    get align(): string {\r\n        return this._tf.align;\r\n    }\r\n\r\n    set align(value: string) {\r\n        this._tf.align = value;\r\n    }\r\n\r\n    /**\r\n     * @en Vertical alignment of the text within the label.\r\n     * @zh 文本的垂直对齐方式。\r\n     */\r\n    get valign(): string {\r\n        return this._tf.valign;\r\n    }\r\n\r\n    set valign(value: string) {\r\n        this._tf.valign = value;\r\n    }\r\n\r\n    /**\r\n     * @en The alignment of images and text when mixed. The optional values are top, middle, and bottom.\r\n     * @zh 图文混排时图片和文字的对齐方式。可选值是top,middle,bottom。\r\n     */\r\n    get alignItems(): string {\r\n        return this._tf.alignItems;\r\n    }\r\n\r\n    set alignItems(value: string) {\r\n        this._tf.alignItems = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the text is bold.\r\n     * @zh 文本是否加粗。\r\n     */\r\n    get bold(): boolean {\r\n        return this._tf.bold;\r\n    }\r\n\r\n    set bold(value: boolean) {\r\n        this._tf.bold = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the text is italic.\r\n     * @zh 文本是否斜体。\r\n     */\r\n    get italic(): boolean {\r\n        return this._tf.italic;\r\n    }\r\n\r\n    set italic(value: boolean) {\r\n        this._tf.italic = value;\r\n    }\r\n\r\n    /**\r\n     * @en Space between lines of text.\r\n     * @zh 文本行之间的间距（以像素为单位）\r\n     */\r\n    get leading(): number {\r\n        return this._tf.leading;\r\n    }\r\n\r\n    set leading(value: number) {\r\n        this._tf.leading = value;\r\n    }\r\n\r\n    /**\r\n     * @en Font size of the text.\r\n     * @zh 文本的字号大小。\r\n     */\r\n    get fontSize(): number {\r\n        return this._tf.fontSize;\r\n    }\r\n\r\n    set fontSize(value: number) {\r\n        this._tf.fontSize = value;\r\n    }\r\n\r\n    /**\r\n     * @en The margins of the text label.\r\n     * Format: \"top,right,bottom,left\".\r\n     * @zh 文本标签的边距。\r\n     * 格式：\"上边距,右边距,下边距,左边距\"（以像素为单位）。\r\n     */\r\n    get padding(): string {\r\n        return this._tf.padding.join(\",\");\r\n    }\r\n\r\n    set padding(value: string) {\r\n        this._tf.padding = UIUtils.fillArray(Styles.labelPadding, value, Number);\r\n    }\r\n\r\n    /**\r\n     * @en Background color of the label.\r\n     * @zh 文本标签的背景颜色。\r\n     */\r\n    get bgColor(): string {\r\n        return this._tf.bgColor\r\n    }\r\n\r\n    set bgColor(value: string) {\r\n        this._tf.bgColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en Border color of the label.\r\n     * @zh 文本标签的边框颜色。\r\n     */\r\n    get borderColor(): string {\r\n        return this._tf.borderColor\r\n    }\r\n\r\n    set borderColor(value: string) {\r\n        this._tf.borderColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en Stroke width of the text stroke.\r\n     * @zh 文本描边的宽度（以像素为单位），默认值为0，表示不描边。\r\n     */\r\n    get stroke(): number {\r\n        return this._tf.stroke;\r\n    }\r\n\r\n    set stroke(value: number) {\r\n        this._tf.stroke = value;\r\n    }\r\n\r\n    /**\r\n     * @en Color of the text stroke.\r\n     * @zh 文本描边的颜色。\r\n     */\r\n    get strokeColor(): string {\r\n        return this._tf.strokeColor;\r\n    }\r\n\r\n    set strokeColor(value: string) {\r\n        this._tf.strokeColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en Supporting html syntax.\r\n     * @zh 是否富文本，支持html语法\r\n     */\r\n    get html(): boolean {\r\n        return this._tf.html;\r\n    }\r\n\r\n    set html(value: boolean) {\r\n        this._tf.html = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use UBB syntax to parse text.\r\n     * @zh 是否使用UBB语法解析文本。\r\n     */\r\n    get ubb(): boolean {\r\n        return this._tf.ubb;\r\n    }\r\n\r\n    set ubb(value: boolean) {\r\n        this._tf.ubb = value;\r\n    }\r\n\r\n    /**\r\n     * @en The maximum width of the text box. If the text content exceeds this width, it will wrap automatically. Set to 0 to disable this limit.\r\n     * @zh 文本最大宽度，当文本达到最大宽度时，会自动换行，设置为0则此限制不生效。\r\n     */\r\n    get maxWidth(): number {\r\n        return this._tf.maxWidth;\r\n    }\r\n\r\n    set maxWidth(value: number) {\r\n        this._tf.maxWidth = value;\r\n    }\r\n\r\n    /**\r\n     * @en Sets whether the text content adapts to the container size.\r\n     * Possible values: \"yes\" (both text width and height adapt), \"height\" (only text height adapts), \"no\" (does not adapt).\r\n     * If a boolean value is provided, true corresponds to \"yes\" and false corresponds to \"no\".\r\n     * @zh 设置文本内容是否自适应容器大小\r\n     * 可选值：\"yes\"（文本宽度和高度自适应）、\"height\"（仅文本高度自适应）、\"no\"（不自适应）\r\n     * 如果传入布尔值，则 true 对应 \"yes\"，false 对应 \"no\"\r\n     */\r\n    get fitContent(): LabelFitContent {\r\n        return this._fitContent;\r\n    }\r\n\r\n    set fitContent(value: LabelFitContent) {\r\n        if (typeof (value) === \"boolean\")\r\n            value = value ? \"yes\" : \"no\";\r\n        if (this._fitContent != value) {\r\n            if ((value == \"yes\" || value == \"height\") && !SerializeUtil.isDeserializing && (LayaEnv.isPlaying || this._tf.textWidth > 0 && this._tf.textHeight > 0)) {\r\n                if (value == \"height\")\r\n                    this.height = this._tf.textHeight;\r\n                else\r\n                    this.size(this._tf.textWidth, this._tf.textHeight);\r\n            }\r\n            this._fitContent = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en An instance of the basic text object.\r\n     * @zh 基础文本对象（Text）的实例。\r\n     */\r\n    get textField(): Text {\r\n        return this._tf;\r\n    }\r\n\r\n    /**\r\n     * @en The overflow property of the text, determining how overflow text is handled.\r\n     * Possible values: visible, hidden, scroll, shrink, ellipsis.\r\n     * visible: The text is not constrained by the text width and height, and all text is visible.\r\n     * hidden: Text beyond the width and height is cut off, providing the best performance.\r\n     * scroll: The part of the text that exceeds the width and height is hidden, and can be scrolled to view.\r\n     * shrink: The text automatically adjusts its size to fit within the width and height, always fully visible.\r\n     * ellipsis: When the text exceeds the width and height, the last few characters are replaced with an ellipsis, indicating that there is more content.\r\n     * @zh 文本的溢出属性，决定超出文本如何被处理。\r\n     * 值为: 可见 visible、隐藏 hidden、滚动 scroll、自动收缩 shrink、显示省略号 ellipsis。\r\n     * 作用：\r\n     * 可见，表示文本不受文本宽高约束全部可见；\r\n     * 隐藏，超过文本宽高就会被裁切掉，性能最好；\r\n     * 滚动，表示超出宽高的部分被隐藏，可以通过划动控制显示在宽高内区域；\r\n     * 自动收缩，表示文本会跟随宽高的大小而自动调整文本的大小，始终全部显示在文本宽高内；\r\n     * 显示省略号，表示当文本超出宽高后，未尾的几位字符会替换为省略号，表示当前文本还有未显示的内容。\r\n     */\r\n\r\n    get overflow(): string {\r\n        return this._tf.overflow;\r\n    }\r\n\r\n    set overflow(value: string) {\r\n        this._tf.overflow = value;\r\n    }\r\n\r\n    /**\r\n     * @en Text decoration style of the text, specifically whether it is underlined.\r\n     * @zh 文本是否显示下划线。\r\n     */\r\n    get underline(): boolean {\r\n        return this._tf.underline;\r\n    }\r\n\r\n    set underline(value: boolean) {\r\n        this._tf.underline = value;\r\n    }\r\n\r\n    /**\r\n     * @en Color of the text underline.\r\n     * @zh 文本下划线的颜色。\r\n     */\r\n    get underlineColor(): string {\r\n        return this._tf.underlineColor;\r\n    }\r\n\r\n    set underlineColor(value: string) {\r\n        this._tf.underlineColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en Text decoration style of the text, specifically whether it is underlined.\r\n     * @zh 文本是否显示下划线。\r\n     */\r\n    get strikethrough(): boolean {\r\n        return this._tf.strikethrough;\r\n    }\r\n\r\n    set strikethrough(value: boolean) {\r\n        this._tf.strikethrough = value;\r\n    }\r\n\r\n    /**\r\n     * @en Color of the text underline.\r\n     * @zh 文本下划线的颜色。\r\n     */\r\n    get strikethroughColor(): string {\r\n        return this._tf.strikethroughColor;\r\n    }\r\n\r\n    set strikethroughColor(value: string) {\r\n        this._tf.strikethroughColor = value;\r\n    }    \r\n\r\n    /**\r\n     * @en Whether the text ignores language localization.\r\n     * @zh 文本是否忽略语言本地化。\r\n     */\r\n    get ignoreLang(): boolean {\r\n        return this._tf.ignoreLang;\r\n    }\r\n\r\n    set ignoreLang(value: boolean) {\r\n        this._tf.ignoreLang = value;\r\n    }\r\n\r\n    /**\r\n     * @en Text template variables.\r\n     * When set to true, templateVars is set to an empty object;\r\n     * When set to false, templateVars is set to null;\r\n     * When set to a value of type Record<string, any>, templateVars is set to the provided value.\r\n     * @zh 文本模板变量对象\r\n     * 为 true 时，将 templateVars 设置为空对象;\r\n     * 为 false 时，将 templateVars 设置为 null;\r\n     * 为 Record<string, any> 类型时，将 templateVars 设置为传入值（value）;\r\n     */\r\n    public get templateVars(): Record<string, any> {\r\n        return this._tf.templateVars;\r\n    }\r\n\r\n    public set templateVars(value: Record<string, any> | boolean) {\r\n        this._tf.templateVars = value;\r\n    }\r\n\r\n    /**\r\n     * @en Sets a template variable in the text field, used for dynamic text replacement.\r\n     * @param name The key name of the template variable to set.\r\n     * @param value The value corresponding to the key name of the template variable.\r\n     * @return This label instance.\r\n     * @zh 设置模板变量对象对应的键名与值，用于动态文本替换。\r\n     * @param name 要设置的模板变量对象的键名。\r\n     * @param value 模板变量对象键名对应的值。\r\n     * @return 当前标签实例。\r\n     */\r\n    public setVar(name: string, value: any): Label {\r\n        this._tf.setVar(name, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    /** @ignore */\r\n    constructor(text?: string) {\r\n        super();\r\n        this._fitContent = \"no\";\r\n        if (text != null)\r\n            this.text = text;\r\n    }\r\n\r\n    protected _onPostLayout() {\r\n        if ((this._fitContent == \"yes\" || this._fitContent == \"height\") && (LayaEnv.isPlaying || this._tf.textWidth > 0 && this._tf.textHeight > 0)) {\r\n            this._fitFlag = true;\r\n            if (this._fitContent == \"height\")\r\n                this.height = this._tf.textHeight;\r\n            else\r\n                this.size(this._tf.textWidth, this._tf.textHeight);\r\n            this._fitFlag = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number): void {\r\n        super._setWidth(value);\r\n        this._tf.width = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._tf.height = value;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._tf = new Text();\r\n        this._tf.hideFlags = HideFlags.HideAndDontSave;\r\n        this._tf._parseEscapeChars = true;\r\n        this._tf._onPostLayout = () => this._onPostLayout();\r\n        this._tf.on(Event.CHANGE, () => {\r\n            this.event(Event.CHANGE);\r\n            if (!this._isWidthSet || !this._isHeightSet)\r\n                this.onCompResize();\r\n        });\r\n        this.addChild(this._tf);\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        return this._tf.width;\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        return this._tf.height;\r\n    }\r\n\r\n    get_width(): number {\r\n        if (this._isWidthSet || this._tf.text) return super.get_width();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the width of the label.\r\n     * @param value The new width value.\r\n     * @zh 设置文本标签的宽度。\r\n     * @param value 新的宽度值。\r\n     */\r\n    set_width(value: number): void {\r\n        if (this._fitContent == \"yes\" && !this._fitFlag)\r\n            return;\r\n        super.set_width(value);\r\n    }\r\n\r\n    get_height(): number {\r\n        if (this._isHeightSet || this._tf.text) return super.get_height();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the height of the label.\r\n     * @param value The new height value.\r\n     * @zh 设置文本标签的高度。\r\n     * @param value 新的高度值。\r\n     */\r\n    set_height(value: number): void {\r\n        if ((this._fitContent == \"yes\" || this._fitContent == \"height\") && !this._fitFlag)\r\n            return;\r\n        super.set_height(value);\r\n    }\r\n\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.text = value + \"\";\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n}","import { Styles } from \"./Styles\";\r\nimport { Event } from \"../events/Event\"\r\nimport { Loader } from \"../net/Loader\"\r\nimport { Texture } from \"../resource/Texture\"\r\nimport { AutoBitmap } from \"./AutoBitmap\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { UIUtils } from \"./UIUtils\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { URL } from \"../net/URL\";\r\nimport { SerializeUtil } from \"../loaders/SerializeUtil\";\r\n\r\n/**\r\n * @en The Image class represents a bitmap image or drawing graphics display object.\r\n * Image and Clip are the only two components that support asynchronous loading. For example, `img.skin = \"abc/xxx.png\"`, other UI components do not support asynchronous loading.\r\n * Event.LOADED: When the resource is loaded.\r\n *  @zh Image类是用于表示位图图像或绘制图形的显示对象。\r\n * Image和Clip组件是唯一支持异步加载的两个组件，比如`img.skin = \"abc/xxx.png\"`，其他UI组件均不支持异步加载。\r\n * Event.LOADED：资源加载完成后调度。\r\n */\r\nexport class Image extends UIComponent {\r\n    protected _skin: string;\r\n    protected _group: string;\r\n    protected _useSourceSize: boolean;\r\n    /**@internal */\r\n    declare _graphics: AutoBitmap;\r\n\r\n    /**\r\n     * @en The skin address of the object, represented as a string.\r\n     * If the resource is not loaded, it will be loaded first and then applied to this object after loading is complete.\r\n     * Note: After the resource is loaded, it will be automatically cached in the resource library.\r\n     * @zh 图片对象的皮肤纹理资源地址，以字符串表示。\r\n     * 如果资源未加载，则先自动加载资源，加载完成后应用于此对象。\r\n     * 注意：资源加载完成后，会自动缓存至资源库中。\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): string {\r\n        if (this._graphics.sizeGrid) return this._graphics.sizeGrid.join(\",\");\r\n        return null;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        if (value)\r\n            this._graphics.sizeGrid = UIUtils.fillArray(Styles.defaultSizeGrid, value, Number);\r\n        else\r\n            this._graphics.sizeGrid = null;\r\n    }\r\n\r\n    /**\r\n     * @en The texture of the object.\r\n     * Note, this is not the image URL, but the image texture. It is recommended to use the skin property to avoid directly using the texture when the image resource has not finished loading.\r\n     * @zh 图片对象的纹理。\r\n     * 注意，这里不是图片的地址，而是图片的纹理。建议使用skin属性，避免图片资源未加载完成时，直接使用texture。\r\n     */\r\n    get source(): Texture {\r\n        return this._graphics.source;\r\n    }\r\n    set source(value: Texture) {\r\n        if (!this._graphics) return;\r\n        this._graphics.source = value;\r\n        this.event(Event.LOADED);\r\n        this.repaint();\r\n\r\n        if (this._useSourceSize && value) {\r\n            this.size(value.sourceWidth, value.sourceHeight);\r\n            this._useSourceSize = true; //重置，因为size会改变\r\n        }\r\n        else\r\n            this.onCompResize();\r\n    }\r\n\r\n    /**\r\n     * @en The color of the Image.\r\n     * @zh 图片的纹理颜色。\r\n     */\r\n    get color() {\r\n        return this._graphics.color;\r\n    }\r\n\r\n    set color(value: string) {\r\n        this._graphics.color = value;\r\n    }\r\n\r\n    /**\r\n     * @en The resource group.\r\n     * @zh 资源分组。\r\n     */\r\n    get group(): string {\r\n        return this._group;\r\n    }\r\n\r\n    set group(value: string) {\r\n        if (value && this._skin) Loader.setGroup(this._skin, value);\r\n        this._group = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use the original size of the resource.\r\n     * @zh 是否使用资源的原始大小。\r\n     */\r\n    get useSourceSize(): boolean {\r\n        return this._useSourceSize;\r\n    }\r\n\r\n    set useSourceSize(value: boolean) {\r\n        if (this._useSourceSize != value) {\r\n            if (value && this._graphics.source)\r\n                this.size(this._graphics.source.sourceWidth, this._graphics.source.sourceHeight);\r\n            this._useSourceSize = value; //放最后，因为size会改变autoSize的值\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en consruct method.\r\n     * @param skin The skin resource address.\r\n     * @zh 构造方法\r\n     * @param skin 皮肤资源地址。\r\n     */\r\n    constructor(skin: string | null = null) {\r\n        super();\r\n        this.skin = skin;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n        if (url) {\r\n            if (this._skinBaseUrl)\r\n                url = URL.formatURL(url, this._skinBaseUrl);\r\n            let source = Loader.getRes(url);\r\n            if (source) {\r\n                this.source = source;\r\n                return Promise.resolve();\r\n            }\r\n            else {\r\n                let sk = this._skin;\r\n                return ILaya.loader.load(url, { type: Loader.IMAGE, group: this._group }).then(tex => {\r\n                    if (sk == this._skin)\r\n                        this.source = tex;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.source = null;\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._graphics.width = value;\r\n        if (!SerializeUtil.isDeserializing)\r\n            this._useSourceSize = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._graphics.height = value;\r\n        if (!SerializeUtil.isDeserializing)\r\n            this._useSourceSize = false;\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        return this._graphics.width;\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        return this._graphics.height;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this.setGraphics(new AutoBitmap(), true);\r\n    }\r\n    /**\r\n     * @en Set the data source of the object.\r\n     * @param value The data source.\r\n     * @zh 设置对象的数据源。\r\n     * @param value 数据源。\r\n     */\r\n    set_dataSource(value: any): void {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'string')\r\n            this.skin = value as string;\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the object and release the loaded skin resources.\r\n     * @zh 销毁对象并释放加载的皮肤资源。\r\n     */\r\n    dispose(): void {\r\n        this.destroy(true);\r\n        ILaya.loader.clearRes(this._skin);\r\n    }\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { Label } from \"./Label\";\r\nimport { Image } from \"./Image\";\r\nimport { Button } from \"./Button\";\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\nimport { URL } from \"../net/URL\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { AssetDb } from \"../resource/AssetDb\";\r\nimport { SerializeUtil } from \"../loaders/SerializeUtil\";\r\n\r\n/**\r\n * @en The Slider control allows users to select a value by moving a slider between the end points of the track.\r\n * The current value of the slider is determined by the relative position of the slider between the end points of the slider (corresponding to the minimum and maximum values of the slider).\r\n * The slider allows values at specific intervals between the minimum and maximum values. The slider can also display its current value using a data tip.\r\n * - `changed` event is dispatched when the movement of the slider is completed (when the user releases the mouse).\r\n * - `change` event is dispatched when the movement of the slider.\r\n * @zh 使用 Slider 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。\r\n * 滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。\r\n * 滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。\r\n * - `changed`事件用于移动滑块位置完成（用户鼠标抬起）后调度。\r\n * - `change`事件用于移动滑块位置时调度。\r\n */\r\nexport class Slider extends UIComponent {\r\n\r\n    /** \r\n     * @en Get a reference to the Label component contained within the Slider component.\r\n     * @zh 获取 Slider 组件所包含的 Label 组件的引用。\r\n     */\r\n    static label: Label = null;// new Label(); 静态的可能还没有初始化\r\n\r\n    /**\r\n     * @en Data change handler.\r\n     * The default callback parameter is the slider position property value: Number.\r\n     * @zh 数据变化处理器。\r\n     * 默认回调参数为滑块位置属性 value 的属性值：Number。\r\n     */\r\n    changeHandler: Handler;\r\n\r\n    /**\r\n     * @en Whether it is vertical sliding. The default value is true, indicating vertical direction; false indicates horizontal direction.\r\n     * @zh 是否为垂直滑动。默认值为true，表示垂直方向，false为水平方向。\r\n     */\r\n    isVertical: boolean = true;\r\n\r\n    /**\r\n     * @en A Boolean value that indicates whether to display labels.defalut value is true.\r\n     * @zh 是否显示标签。默认值为true。\r\n     */\r\n    showLabel: boolean = true;\r\n\r\n    /**\r\n     * @en A Boolean value that indicates whether to display the progress bar.\r\n     * @zh 是否显示进度条。\r\n     */\r\n    protected _showProgress: boolean = false;\r\n\r\n    protected _allowClickBack: boolean;\r\n    protected _max: number = 100;\r\n    protected _min: number = 0;\r\n    protected _tick: number = 1;\r\n    protected _value: number = 0;\r\n    protected _skin: string;\r\n    protected _bg: Image;\r\n    protected _progress: Image;\r\n    protected _bar: Button;\r\n    protected _tx: number;\r\n    protected _ty: number;\r\n    protected _maxMove: number;\r\n    protected _globalSacle: Point;\r\n\r\n    /**\r\n     * @en Creates an instance of Slider.\r\n     * @param skin The skin.\r\n     * @zh 创建一个Silder实例。\r\n     * @param skin 皮肤纹理。\r\n     */\r\n    constructor(skin: string = null) {\r\n        super();\r\n        if (!Slider.label) {\r\n            Slider.label = new Label();\r\n            Slider.label.hideFlags = HideFlags.HideAndDontSave;\r\n        }\r\n        this.skin = skin;\r\n    }\r\n\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._bg && this._bg.destroy(destroyChild);\r\n        this._bar && this._bar.destroy(destroyChild);\r\n        this._progress && this._progress.destroy(destroyChild);\r\n        this._bg = null;\r\n        this._bar = null;\r\n        this._progress = null;\r\n        this.changeHandler = null;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._bg = new Image();\r\n        this._bg.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this._bg);\r\n\r\n        this._progress = new Image();\r\n        this._progress.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChildAt(this._progress, 1);\r\n\r\n        this._bar = new Button();\r\n        this._bar.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this._bar);\r\n    }\r\n\r\n    protected initialize(): void {\r\n        this._bar.on(Event.MOUSE_DOWN, this, this.onBarMouseDown);\r\n        this.allowClickBack = true;\r\n    }\r\n\r\n    protected onBarMouseDown(e: Event): void {\r\n        let stage = ILaya.stage;\r\n        this._globalSacle || (this._globalSacle = new Point());\r\n        this._globalSacle.setTo(this.globalScaleX || 0.01, this.globalScaleY || 0.01);\r\n\r\n        this._maxMove = this.isVertical ? (this.height - this._bar.height) : (this.width - this._bar.width);\r\n        this._tx = stage.mouseX;\r\n        this._ty = stage.mouseY;\r\n        stage.on(Event.MOUSE_MOVE, this, this.mouseMove);\r\n        stage.once(Event.MOUSE_UP, this, this.mouseUp);\r\n        stage.once(Event.MOUSE_OUT, this, this.mouseUp);\r\n        //显示提示\r\n        this.showValueText();\r\n    }\r\n\r\n    protected showValueText(): void {\r\n        if (this.showLabel) {\r\n            var label: Label = Slider.label;\r\n            this.addChild(label);\r\n            label.textField.text = this._value + \"\";\r\n            if (this.isVertical) {\r\n                label.x = this._bar._x + 20;\r\n                label.y = (this._bar.height - label.height) * 0.5 + this._bar._y;\r\n            } else {\r\n                label.y = this._bar._y - 20;\r\n                label.x = (this._bar.width - label.width) * 0.5 + this._bar._x;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected hideValueText(): void {\r\n        Slider.label && Slider.label.removeSelf();\r\n    }\r\n\r\n\r\n    private mouseUp(e: Event): void {\r\n        let stage = ILaya.stage;\r\n        stage.off(Event.MOUSE_MOVE, this, this.mouseMove);\r\n        stage.off(Event.MOUSE_UP, this, this.mouseUp);\r\n        stage.off(Event.MOUSE_OUT, this, this.mouseUp);\r\n        this.sendChangeEvent(Event.CHANGED);\r\n        this.hideValueText();\r\n    }\r\n\r\n    private mouseMove(e: Event): void {\r\n        let stage = ILaya.stage;\r\n        var oldValue: number = this._value;\r\n        if (this.isVertical) {\r\n            this._bar.y += (stage.mouseY - this._ty) / this._globalSacle.y;\r\n            if (this._bar._y > this._maxMove) this._bar.y = this._maxMove;\r\n            else if (this._bar._y < 0) this._bar.y = 0;\r\n            this._value = this._bar._y / this._maxMove * (this._max - this._min) + this._min;\r\n            this._progress.height = this._bar._y + 0.5 * this._bar.height;\r\n        } else {\r\n            this._bar.x += (stage.mouseX - this._tx) / this._globalSacle.x;\r\n            if (this._bar._x > this._maxMove) this._bar.x = this._maxMove;\r\n            else if (this._bar._x < 0) this._bar.x = 0;\r\n            this._value = this._bar._x / this._maxMove * (this._max - this._min) + this._min;\r\n            this._progress.width = this._bar._x + 0.5 * this._bar.width;\r\n        }\r\n\r\n        this._tx = stage.mouseX;\r\n        this._ty = stage.mouseY;\r\n\r\n        if (this._tick != 0) {\r\n            var pow: number = Math.pow(10, (this._tick + \"\").length - 1);\r\n            this._value = Math.round(Math.round(this._value / this._tick) * this._tick * pow) / pow;\r\n        }\r\n\r\n        if (this._value != oldValue) {\r\n            this.sendChangeEvent();\r\n        }\r\n        this.showValueText();\r\n    }\r\n\r\n    protected sendChangeEvent(type: string = Event.CHANGE): void {\r\n        this.event(type);\r\n        this.changeHandler && this.changeHandler.runWith(this._value);\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the slider.\r\n     * @zh 滑块的皮肤纹理。\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en A Boolean value that indicates whether to display the progress bar.\r\n     * @zh 是否显示进度条。\r\n     */\r\n    get showProgress(): boolean {\r\n        return this._showProgress;\r\n    }\r\n\r\n    set showProgress(value: boolean) {\r\n        this._showProgress = value;\r\n        if (value) {\r\n            if (this._skin && !SerializeUtil.isDeserializing)\r\n                this._setSkin(this._skin);\r\n        }\r\n        else\r\n            this._progress.skin = null;\r\n    }\r\n    /** @ignore */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n\r\n        if (url) {\r\n            return AssetDb.inst.resolveURL(url).then(url => {\r\n                if (this._destroyed)\r\n                    return null;\r\n\r\n                if (this._skinBaseUrl)\r\n                    url = URL.formatURL(url, this._skinBaseUrl);\r\n                let tasks = [\r\n                    this._bg._setSkin(url),\r\n                    this._bar._setSkin(Utils.replaceFileExtension(url, \"$bar.png\", true))\r\n                ];\r\n                if (this._showProgress)\r\n                    tasks.push(this._progress._setSkin(Utils.replaceFileExtension(url, \"$progress.png\", true)));\r\n                else\r\n                    this._progress.skin = null;\r\n\r\n                return Promise.all(tasks).then(() => this._skinLoaded());\r\n            });\r\n        }\r\n        else {\r\n            this._bg.skin = null;\r\n            this._bar.skin = null;\r\n            this._progress.skin = null;\r\n            this._skinLoaded();\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    protected _skinLoaded(): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this.setBarPoint();\r\n        this.callLater(this.changeValue);\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    /**\r\n     * @en Set the position information of the slider.\r\n     * @zh 设置滑块的位置信息。\r\n     */\r\n    protected setBarPoint(): void {\r\n        if (this.isVertical) this._bar.x = Math.round((this._bg.width - this._bar.width) * 0.5);\r\n        else this._bar.y = Math.round((this._bg.height - this._bar.height) * 0.5);\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        return Math.max(this._bg.width, this._bar.width);\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        return Math.max(this._bg.height, this._bar.height);\r\n    }\r\n\r\n    protected _sizeChanged(): void {\r\n        super._sizeChanged();\r\n        if (this.isVertical) this._bg.height = this.height;\r\n        else this._bg.width = this.width;\r\n        this.setBarPoint();\r\n        this.changeValue();\r\n    }\r\n\r\n    /**\r\n      * @en The size grid of the texture.\r\n      * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n      * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n      * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n      * @zh 纹理的九宫格数据。\r\n      * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n      * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n      * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n      */\r\n    get sizeGrid(): string {\r\n        return this._bg.sizeGrid;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        this._bg.sizeGrid = value;\r\n        this._bar.sizeGrid = value;\r\n        this._progress.sizeGrid = this._bar.sizeGrid;\r\n    }\r\n\r\n    /**\r\n     * @en Set the information of the slider.\r\n     * @param min The minimum value of the slider.\r\n     * @param max The maximum value of the slider.\r\n     * @param value The current value of the slider.\r\n     * @zh 设置滑动条的信息。\r\n     * @param min 滑块的最小值。\r\n     * @param max 滑块的最大值。\r\n     * @param value 滑块的当前值。\r\n     */\r\n    setSlider(min: number, max: number, value?: number): void {\r\n        let scaleValue: number;\r\n        if (null == value) {\r\n            if (min >= max) {\r\n                value = this.value;\r\n            } else {\r\n                if (this._max == this._min) {\r\n                    scaleValue = 0;\r\n                } else {\r\n                    scaleValue = this._value / (this._max - this._min);\r\n                }\r\n            }\r\n        }\r\n        this._value = -1;\r\n        this._min = min;\r\n        this._max = max > min ? max : min;\r\n        if (null == scaleValue) {\r\n            this.value = value < min ? min : value > max ? max : value;\r\n        } else {\r\n            this.value = (this._max - this._min) * scaleValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The minimum increment unit for each change in the slider tick value. The default value is 1.\r\n     * @zh 滑滑动条刻度值每次最小变动的单位。默认值为1\r\n     */\r\n    get tick(): number {\r\n        return this._tick;\r\n    }\r\n\r\n    set tick(value: number) {\r\n        if (this._tick != value) {\r\n            this._tick = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Change the position value of the slider.\r\n     * @zh 改变滑块的位置值。\r\n     */\r\n    changeValue(): void {\r\n        if (this.tick != 0) {\r\n            var pow: number = Math.pow(10, (this._tick + \"\").length - 1);\r\n            this._value = Math.round(Math.round(this._value / this._tick) * this._tick * pow) / pow;\r\n        }\r\n\r\n        if (this._max >= this._min) {\r\n            this._value = this._value > this._max ? this._max : this._value < this._min ? this._min : this._value;\r\n        } else {\r\n            //当设置的最小值大于最大值的时候，滑动条会反向处理，滑动条限制也应反向处理。\r\n            this._value = this._value > this._min ? this._min : this._value < this._max ? this._max : this._value;\r\n        }\r\n\r\n        var num: number = this._max - this._min;\r\n        if (num === 0) num = 1;\r\n        if (this.isVertical) {\r\n            this._bar.y = (this._value - this._min) / num * (this.height - this._bar.height);\r\n            this._progress.height = this._bar._y + 0.5 * this._bar.height;\r\n        }\r\n        else {\r\n            this._bar.x = (this._value - this._min) / num * (this.width - this._bar.width);\r\n            this._progress.width = this._bar._x + 0.5 * this._bar.width;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The number indicating the highest position of slider. The default value is 100.\r\n     * @zh 滑动条最高位置的数字。默认值为 100。\r\n     */\r\n    get max(): number {\r\n        return this._max;\r\n    }\r\n\r\n    set max(value: number) {\r\n        if (this._max != value) {\r\n            this._max = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The number indicating the lowest position of slider. The default value is 0.\r\n     * @zh 滑动条最低位置的数字。默认值为 0。\r\n     */\r\n    get min(): number {\r\n        return this._min;\r\n    }\r\n\r\n    set min(value: number) {\r\n        if (this._min != value) {\r\n            this._min = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The number indicating the current slider position.\r\n     * @zh 滑动条当前滑块位置的数字。\r\n     */\r\n    get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    set value(num: number) {\r\n        if (this._value != num) {\r\n            var oldValue: number = this._value;\r\n            this._value = num;\r\n            this.changeValue();\r\n            if (this._value != oldValue) {\r\n                this.sendChangeEvent();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en A Boolean value that specifies whether to allow changing the value property of the Slider by clicking the slider.\r\n     * @zh 是否允许通过点击滑动条改变 Slider 的 value 属性值。\r\n     */\r\n    get allowClickBack(): boolean {\r\n        return this._allowClickBack;\r\n    }\r\n\r\n    set allowClickBack(value: boolean) {\r\n        if (this._allowClickBack != value) {\r\n            this._allowClickBack = value;\r\n            if (value) this._bg.on(Event.MOUSE_DOWN, this, this.onBgMouseDown);\r\n            else this._bg.off(Event.MOUSE_DOWN, this, this.onBgMouseDown);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The Event.MOUSE_DOWN event handler of the slider.\r\n     * @zh 滑动条的 Event.MOUSE_DOWN 事件侦听处理函数。\r\n     */\r\n    protected onBgMouseDown(e: Event): void {\r\n        var point: Point = this._bg.getMousePoint();\r\n        if (this.isVertical) this.value = point.y / (this.height - this._bar.height) * (this._max - this._min) + this._min;\r\n        else this.value = point.x / (this.width - this._bar.width) * (this._max - this._min) + this._min;\r\n    }\r\n\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.value = Number(value);\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en The reference of the slider button.\r\n     * @zh 滑块按钮的引用。\r\n     */\r\n    get bar(): Button {\r\n        return this._bar;\r\n    }\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { Button } from \"./Button\";\r\nimport { Slider } from \"./Slider\";\r\nimport { UIConfig } from \"./../../UIConfig\";\r\nimport { Styles } from \"./Styles\";\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Ease } from \"../utils/Ease\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { Tween } from \"../utils/Tween\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\nimport { URL } from \"../net/URL\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { AssetDb } from \"../resource/AssetDb\";\r\n\r\n/**\r\n * @en The `ScrollBar` component is a scrollbar component.\r\n * When there is too much data to fit in the display area, the end user can use the `ScrollBar` component to control the portion of data being displayed.\r\n * A scrollbar consists of four parts: two arrow buttons, a track, and a thumb (slider).\r\n * - `start` event dispatched when the scrollbar starts to slide.\r\n * - `end` event dispatched when the scrollbar stops sliding.\r\n * - `change` event dispatched when the scrollbar thumb position changes.\r\n * @zh ScrollBar 组件是一个滚动条组件。\r\n * 当数据太多以至于显示区域无法容纳时，最终用户可以使用 ScrollBar 组件控制所显示的数据部分。\r\n * 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。\r\n * - `start` 事件在滚动条开始滑动时调度。\r\n * - `end` 事件在滚动条滑动结束时调度。\r\n * - `change` 事件在滚动条滑块位置发生变化时调度。\r\n */\r\nexport class ScrollBar extends UIComponent {\r\n    /** \r\n     * @en Sets the global easing function for scrolling speed changes.\r\n     * @zh 设置全局的滚动速度变化曲线函数\r\n     */\r\n    public static easeFunction = Ease.sineOut;\r\n    /**\r\n     * @en The ratio of scroll decay.\r\n     * @zh 滚动衰减系数\r\n     */\r\n    rollRatio: number = 0.97;\r\n    /**\r\n     * @en Callback when scrolling changes, return value parameter.\r\n     * @zh 滚动变化时回调，回传value参数。\r\n     */\r\n    changeHandler: Handler;\r\n    /**\r\n     * @en Indicates whether to scale the size of the scrollbar, default is true.\r\n     * @zh 是否缩放滑动条的大小，默认值为true。\r\n     */\r\n    scaleBar: boolean = true;\r\n    /**\r\n     * @en A boolean value that specifies whether to automatically hide the scrollbar when it is not in use, default is false.\r\n     * @zh 一个布尔值，指定是否在无需滚动时自动隐藏滚动条，默认值为false。\r\n     */\r\n    autoHide: boolean = false;\r\n    /**\r\n     * @en The limit distance for the rubber band effect, 0 means no rubber band effect.\r\n     * @zh 橡皮筋效果极限距离，0表示没有橡皮筋效果。\r\n     */\r\n    elasticDistance: number = 0;\r\n    /**\r\n     * @en The time in milliseconds for the rubber band effect to rebound.\r\n     * @zh 橡皮筋回弹时间，单位为毫秒。\r\n     */\r\n    elasticBackTime: number = 500;\r\n    /**\r\n     * @en The up button.\r\n     * @zh 上按钮。\r\n     */\r\n    upButton: Button;\r\n    /**\r\n     * @en The down button.\r\n     * @zh 下按钮。\r\n     */\r\n    downButton: Button;\r\n    /**\r\n     * @en slider.\r\n     * @zh 滑动条。\r\n     */\r\n    slider: Slider;\r\n    /**\r\n     * @en The top movement limit for the scrollbar. When this limit is reached, the 'dragTopLimit' event is dispatched.\r\n     * This can be used in conjunction with the `stopMoveLimit()` method to allow developers to perform dynamic data updates and other operations.\r\n     * @zh 顶部移动限制。当达到此限制时，会触发 'dragTopLimit' 事件。\r\n     * 它可以与 `stopMoveLimit()` 方法结合使用，以便开发者执行动态数据更新和其他操作。\r\n     */\r\n    topMoveLimit: number = 0;\r\n    /**\r\n     * @en The bottom movement limit for the scrollbar. When this limit is reached, the 'dragBottomLimit' event is dispatched.\r\n     * This can be used in conjunction with the `stopMoveLimit()` method to allow developers to perform dynamic data updates and other operations.\r\n     * @zh 底部移动限制。当达到此限制时，会触发 'dragBottomLimit' 事件。\r\n     * 它可以与 `stopMoveLimit()` 方法结合使用，以便开发者执行动态数据更新和其他操作。\r\n     */\r\n    bottomMoveLimit: number = 0;\r\n    /**\r\n     * @en Determines whether dragging of the content is disabled when the 'stopMoveLimit' method is called.\r\n     * @zh 确定在调用 'stopMoveLimit' 方法时是否禁止内容的拖拽。\r\n     */\r\n    disableDrag: boolean = false;\r\n\r\n    protected _showButtons: boolean;\r\n    protected _scrollSize: number = 1;\r\n    protected _skin: string;\r\n    protected _thumbPercent: number = 1;\r\n    protected _target: Sprite;\r\n    protected _lastPoint: Point;\r\n    protected _lastOffset: number = 0;\r\n    protected _checkElastic: boolean = false;\r\n    protected _isElastic: boolean = false;\r\n    protected _value: number;\r\n    protected _hide: boolean = false;\r\n    protected _clickOnly: boolean = true;\r\n    protected _offsets: any[];\r\n    protected _touchScrollEnable: boolean;\r\n    protected _mouseWheelEnable: boolean;\r\n\r\n    /**\r\n     * @en creates an instance of ScrollBar.\r\n     * @param skin The address of the skin resource.\r\n     * @zh 创建一个 ScrollBar 实例。\r\n     * @param skin 皮肤资源地址。\r\n     */\r\n    constructor(skin: string = null) {\r\n        super();\r\n\r\n        this._showButtons = UIConfig.showButtons;\r\n        this._touchScrollEnable = UIConfig.touchScrollEnable;\r\n        this._mouseWheelEnable = UIConfig.mouseWheelEnable;\r\n\r\n        this.skin = skin;\r\n        this.max = 1;\r\n    }\r\n\r\n    destroy(destroyChild: boolean = true): void {\r\n        this.stopScroll();\r\n        this.target = null;\r\n        super.destroy(destroyChild);\r\n        this.upButton && this.upButton.destroy(destroyChild);\r\n        this.downButton && this.downButton.destroy(destroyChild);\r\n        this.slider && this.slider.destroy(destroyChild);\r\n        this.upButton = this.downButton = null;\r\n        this.slider = null;\r\n        this.changeHandler = null;\r\n        this._offsets = null;\r\n    }\r\n\r\n    /**\r\n     * @en Creates the child elements of the ScrollBar, such as the slider and buttons.\r\n     * @zh 创建 ScrollBar 的子元素，例如滑块和按钮。\r\n     */\r\n    protected createChildren(): void {\r\n        this.slider = new Slider();\r\n        this.slider.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this.slider);\r\n\r\n        this.upButton = new Button();\r\n        this.upButton.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this.upButton);\r\n\r\n        this.downButton = new Button();\r\n        this.downButton.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this.downButton);\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the ScrollBar, setting up the slider and buttons with appropriate event listeners.\r\n     * @zh 初始化 ScrollBar，为滑块和按钮设置适当的事件监听器。\r\n     */\r\n    protected initialize(): void {\r\n        this.slider.showLabel = false;\r\n        this.slider.tick = 0;\r\n        this.slider.on(Event.CHANGE, this, this.onSliderChange);\r\n        this.slider.setSlider(0, 0, 0);\r\n\r\n        this.upButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);\r\n        this.downButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);\r\n    }\r\n\r\n    /**\r\n     * @en The change event handler for the slider when its value changes.\r\n     * @zh 滑块值改变时的事件处理函数。\r\n     */\r\n    protected onSliderChange(): void {\r\n        if (this._value != this.slider.value) this.value = this.slider.value;\r\n    }\r\n\r\n    /**\r\n     * @en The mouse down event handler for the up and down buttons.\r\n     * @zh 向上和向下按钮的 Event.MOUSE_DOWN 事件侦听处理函数。\r\n     */\r\n    protected onButtonMouseDown(e: Event): void {\r\n        var isUp: boolean = e.currentTarget === this.upButton;\r\n        this.slide(isUp);\r\n        ILaya.timer.once(Styles.scrollBarDelayTime, this, this.startLoop, [isUp]);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n    }\r\n\r\n    protected startLoop(isUp: boolean): void {\r\n        ILaya.timer.frameLoop(1, this, this.slide, [isUp]);\r\n    }\r\n\r\n    protected slide(isUp: boolean): void {\r\n        if (isUp) this.value -= this._scrollSize;\r\n        else this.value += this._scrollSize;\r\n    }\r\n\r\n    /**\r\n     * @en The mouse up event handler for the stage.\r\n     * @param e The event object.\r\n     * @zh 舞台的 Event.MOUSE_DOWN 事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    protected onStageMouseUp(e: Event): void {\r\n        ILaya.timer.clear(this, this.startLoop);\r\n        ILaya.timer.clear(this, this.slide);\r\n    }\r\n\r\n    /**\r\n     * @en the skin of the scrollbar.\r\n     * @zh 滚动条的皮肤纹理路径。\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en Asynchronously sets the skin for the scrollbar and its components.\r\n     * @param url The URL of the skin to be set.\r\n     * @zh 异步设置滚动条及其组件的皮肤。\r\n     * @param url 要设置的皮肤的 URL。\r\n     */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n\r\n        if (url) {\r\n            return AssetDb.inst.resolveURL(url).then(url => {\r\n                if (this._destroyed)\r\n                    return null;\r\n\r\n                if (this._skinBaseUrl)\r\n                    url = URL.formatURL(url, this._skinBaseUrl);\r\n                return Promise.all([\r\n                    this.slider._setSkin(url),\r\n                    this.upButton._setSkin(Utils.replaceFileExtension(url, \"$up.png\", true)),\r\n                    this.downButton._setSkin(Utils.replaceFileExtension(url, \"$down.png\", true))\r\n                ]).then(() => this._skinLoaded());\r\n            });\r\n        }\r\n        else {\r\n            this.slider.skin = null;\r\n            this.upButton.skin = null;\r\n            this.downButton.skin = null;\r\n            this._skinLoaded();\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Called when the skin is loaded.\r\n     * @zh 皮肤加载完成时调用。\r\n     */\r\n    protected _skinLoaded(): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this.callLater(this.changeScrollBar);\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    /**\r\n     * @en Adjust the scroll bar's display state, including the visibility of the buttons and the position of the slider\r\n     * @zh 更改滚动条的显示状态，包括按钮的可见性和滑动条的位置\r\n     */\r\n    protected changeScrollBar(): void {\r\n        this.upButton.visible = this._showButtons;\r\n        this.downButton.visible = this._showButtons;\r\n        if (this.slider.isVertical)\r\n            this.slider.y = this._showButtons ? this.upButton.height : 0;\r\n        else\r\n            this.slider.x = this._showButtons ? this.upButton.width : 0;\r\n        this.resetPositions();\r\n        this.repaint();\r\n    }\r\n\r\n    protected _sizeChanged(): void {\r\n        super._sizeChanged();\r\n        this.repaint();\r\n        this.resetPositions();\r\n        this.event(Event.CHANGE);\r\n        this.changeHandler && this.changeHandler.runWith(this.value);\r\n    }\r\n\r\n    private resetPositions(): void {\r\n        if (this.slider.isVertical) this.slider.height = this.height - (this._showButtons ? (this.upButton.height + this.downButton.height) : 0);\r\n        else this.slider.width = this.width - (this._showButtons ? (this.upButton.width + this.downButton.width) : 0);\r\n        this.resetButtonPosition();\r\n\r\n    }\r\n\r\n    protected resetButtonPosition(): void {\r\n        if (this.slider.isVertical) this.downButton.y = this.slider._y + this.slider.height;\r\n        else this.downButton.x = this.slider._x + this.slider.width;\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        if (this.slider.isVertical) return this.slider.width;\r\n        return 100;\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        if (this.slider.isVertical) return 100;\r\n        return this.slider.height;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the information for the scrollbar.\r\n     * @param min The minimum position value of the scrollbar.\r\n     * @param max The maximum position value of the scrollbar.\r\n     * @param value The current position value of the scrollbar.\r\n     * @zh 设置滚动条信息。\r\n     * @param min 滚动条最小位置值。\r\n     * @param max 滚动条最大位置值。\r\n     * @param value 滚动条当前位置值。\r\n     */\r\n    setScroll(min: number, max: number, value?: number): void {\r\n        this.runCallLater(this._sizeChanged);\r\n        this.slider.setSlider(min, max, value);\r\n        //_upButton.disabled = max <= 0;\r\n        //_downButton.disabled = max <= 0;\r\n        this.slider.bar.visible = max > 0;\r\n        if (!this._hide && this.autoHide) this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * @en the numeric value representing the maximum scroll position.\r\n     * @zh 最高滚动位置的数字。\r\n     */\r\n    get max(): number {\r\n        return this.slider.max;\r\n    }\r\n\r\n    set max(value: number) {\r\n        this.slider.max = value;\r\n    }\r\n\r\n    /**\r\n     * @en the numeric value representing the minimum scroll position.\r\n     * @zh 最低滚动位置的数字。\r\n     */\r\n    get min(): number {\r\n        return this.slider.min;\r\n    }\r\n\r\n    set min(value: number) {\r\n        this.slider.min = value;\r\n    }\r\n\r\n    /**\r\n     * @en the numeric value representing the current scroll position.\r\n     * @zh 当前滚动位置的数字。\r\n     */\r\n    get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    set value(v: number) {\r\n        if (v !== this._value) {\r\n            this._value = v;\r\n            if (!this._isElastic) {\r\n                if (this.slider[\"_value\"] != v) {\r\n                    this.slider[\"_value\"] = v;\r\n                    this.slider.changeValue();\r\n                }\r\n                this._value = this.slider[\"_value\"];\r\n            }\r\n            this.event(Event.CHANGE);\r\n            this.changeHandler && this.changeHandler.runWith(this._value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether the scrollbar is vertical. If true, the scrollbar is vertical; otherwise, it is horizontal.\r\n     * Default value: true.\r\n     * @zh 滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。\r\n     * 默认值为：true。\r\n     */\r\n    get isVertical(): boolean {\r\n        return this.slider.isVertical;\r\n    }\r\n\r\n    set isVertical(value: boolean) {\r\n        this.slider.isVertical = value;\r\n    }\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): string {\r\n        return this.slider.sizeGrid;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        this.slider.sizeGrid = value;\r\n    }\r\n\r\n    /**\r\n     * @en The minimum unit for page scrolling when the scrollbar track is pressed.\r\n     * @zh 按下滚动条轨道时页面滚动的最小单位\r\n     */\r\n    get scrollSize(): number {\r\n        return this._scrollSize;\r\n    }\r\n\r\n    set scrollSize(value: number) {\r\n        this._scrollSize = value;\r\n    }\r\n\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.value = Number(value);\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Slider length ratio, with a value between 0 and 1.\r\n     * @zh 滑条长度比例，值为：（0-1）。\r\n     */\r\n    get thumbPercent(): number {\r\n        return this._thumbPercent;\r\n    }\r\n\r\n    set thumbPercent(value: number) {\r\n        this.runCallLater(this.changeScrollBar);\r\n        this.runCallLater(this._sizeChanged);\r\n        value = value >= 1 ? 0.99 : value;\r\n        this._thumbPercent = value;\r\n        if (this.scaleBar) {\r\n            if (this.slider.isVertical) this.slider.bar.height = Math.max(this.slider.height * value, Styles.scrollBarMinNum);\r\n            else this.slider.bar.width = Math.max(this.slider.width * value, Styles.scrollBarMinNum);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en the target object of the scrollbar.\r\n     * @zh 滚动的对象。\r\n     */\r\n    get target(): Sprite {\r\n        return this._target;\r\n    }\r\n\r\n    set target(value: Sprite) {\r\n        if (this._target) {\r\n            this._target.off(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);\r\n            this._target.off(Event.MOUSE_DOWN, this, this.onTargetMouseDown);\r\n        }\r\n        this._target = value;\r\n        if (value) {\r\n            this._mouseWheelEnable && this._target.on(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);\r\n            this._touchScrollEnable && this._target.on(Event.MOUSE_DOWN, this, this.onTargetMouseDown);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether the scrollbar is hidden. If true, the scrollbar is not displayed, but scrolling functions remain active. Default is false.\r\n     * @zh 是否隐藏滚动条，设置为 true 时，不显示滚动条，但可以正常滚动，默认为 false。\r\n     */\r\n    get hide(): boolean {\r\n        return this._hide;\r\n    }\r\n\r\n    set hide(value: boolean) {\r\n        this._hide = value;\r\n        this.visible = !value;\r\n    }\r\n\r\n    /**\r\n     * @en Specifies whether the up and down buttons are displayed. Default is true.\r\n     * @zh 是否显示向上和向下的按钮，默认值为 true，表示显示。\r\n     */\r\n    get showButtons(): boolean {\r\n        return this._showButtons;\r\n    }\r\n\r\n    set showButtons(value: boolean) {\r\n        this._showButtons = value;\r\n        this.callLater(this.changeScrollBar);\r\n    }\r\n\r\n    /**\r\n     * @en Specifies whether touch scrolling is enabled. Default is true.\r\n     * @zh 是否启用触摸滚动，默认值为 true，表示启用。\r\n     */\r\n    get touchScrollEnable(): boolean {\r\n        return this._touchScrollEnable;\r\n    }\r\n\r\n    set touchScrollEnable(value: boolean) {\r\n        this._touchScrollEnable = value;\r\n        this.target = this._target;\r\n    }\r\n\r\n    /**\r\n     * @en Specifies whether mouse wheel scrolling is enabled. Default is true.\r\n     * @zh 是否启用鼠标滚轮滚动，默认值为 true，表示启用。\r\n     */\r\n    get mouseWheelEnable(): boolean {\r\n        return this._mouseWheelEnable;\r\n    }\r\n\r\n    set mouseWheelEnable(value: boolean) {\r\n        this._mouseWheelEnable = value;\r\n        this.target = this._target;\r\n    }\r\n\r\n    protected onTargetMouseWheel(e: Event): void {\r\n        this.value += e.delta * this._scrollSize;\r\n        this.target = this._target;\r\n    }\r\n\r\n    isLockedFun: Function;\r\n\r\n    protected onTargetMouseDown(e: Event): void {\r\n        if ((this.isLockedFun) && !this.isLockedFun(e)) return;\r\n        this.event(Event.END);\r\n        this._clickOnly = true;\r\n        this._lastOffset = 0;\r\n        this._checkElastic = false;\r\n        this._lastPoint || (this._lastPoint = new Point());\r\n        this._lastPoint.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.frameLoop(1, this, this.loop);\r\n    }\r\n\r\n    /**\r\n     * @en Forces a drag action on the scrollbar.\r\n     * Normally, dragging can only be done by holding the scrollbar itself. If you need to force drag outside the scrollbar object, you can achieve this by calling this method.\r\n     * For example, if the mouse is continuously held on a button object outside the scrollbar and this method is called, then sliding the mouse will have the same effect as dragging the scrollbar. \r\n     * @zh 强制拖拽滚动条；\r\n     * 常规情况下只能是按住滚动条本身才可以拖拽，如果需要在滚动条对象之外进行强制拖拽，则可以通过调用此方法来实现。\r\n     * 例如，当鼠标持续按住滚动条之外的某个按钮对象时，调用了该方法，然后进行滑动，也可以实现按住滚动条对象滑动的效果。\r\n     */\r\n    startDragForce(): void {\r\n        this._clickOnly = true;\r\n        this._lastOffset = 0;\r\n        this._checkElastic = false;\r\n        this._lastPoint || (this._lastPoint = new Point());\r\n        this._lastPoint.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.frameLoop(1, this, this.loop);\r\n    }\r\n\r\n    private cancelDragOp(): void {\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        ILaya.timer.clear(this, this.loop);\r\n        this._target.mouseEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @en Function to be called when the scrollbar is dragged down past its limit.\r\n     * @zh 当滚动条向下拖拽超过其限制时调用的函数。\r\n     */\r\n    triggerDownDragLimit: Function;\r\n    /**\r\n     * @en Function to be called when the scrollbar is dragged up past its limit.\r\n     * @zh 当滚动条向上拖拽超过其限制时调用的函数。\r\n     */\r\n    triggerUpDragLimit: Function;\r\n    /** \r\n     * @en Overloading method for pausing scrolling\r\n     * @zh 暂停滚动的重载方法\r\n     */\r\n    stopMoveLimit: Function;\r\n    private checkTriggers(isTweenMove: boolean = false): boolean {\r\n        if (this.value >= 0 && this.value - this._lastOffset <= 0) {\r\n            if ((this.triggerDownDragLimit) && this.triggerDownDragLimit(isTweenMove)) {\r\n                this.cancelDragOp();\r\n                this.value = 0;\r\n                return true;\r\n            }\r\n        }\r\n        if (this.value <= this.max && (this.value - this._lastOffset >= this.max)) {\r\n            if ((this.triggerUpDragLimit) && this.triggerUpDragLimit(isTweenMove)) {\r\n                this.cancelDragOp();\r\n                this.value = this.max;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en Gets the last offset value used during the scrollbar's movement.\r\n     * @zh 获取滚动条在移动过程中使用的最后偏移量。\r\n     */\r\n    get lastOffset(): number {\r\n        return this._lastOffset;\r\n    }\r\n\r\n    /**\r\n     * @en Starts a forced tweening (animated) movement for the scrollbar.\r\n     * @param lastOffset The offset to start the tweening movement from.\r\n     * @zh 滚动条的强制缓动移动。\r\n     * @param lastOffset 从该偏移量位置开始缓动移动。\r\n     */\r\n    startTweenMoveForce(lastOffset: number): void {\r\n        this._lastOffset = lastOffset;\r\n        ILaya.timer.frameLoop(1, this, this.tweenMove, [200]);\r\n    }\r\n\r\n    protected loop(): void {\r\n        if (this.disableDrag) return;\r\n        var mouseY: number = ILaya.stage.mouseY;\r\n        var mouseX: number = ILaya.stage.mouseX;\r\n        this._lastOffset = this.isVertical ? (mouseY - this._lastPoint.y) : (mouseX - this._lastPoint.x);\r\n\r\n        if (this._clickOnly) {\r\n            if (Math.abs(this._lastOffset * (this.isVertical ? ILaya.stage._canvasTransform.getScaleY() : ILaya.stage._canvasTransform.getScaleX())) > 1) {\r\n                this._clickOnly = false;\r\n                if (this.checkTriggers()) return;\r\n                this._offsets || (this._offsets = []);\r\n                this._offsets.length = 0;\r\n                this._target.mouseEnabled = false;\r\n                if (!this.hide && this.autoHide) {\r\n                    this.alpha = 1;\r\n                    this.visible = true;\r\n                }\r\n                this.event(Event.START);\r\n            } else return;\r\n        } else {\r\n            if (this.checkTriggers()) return;\r\n        }\r\n        this._offsets.push(this._lastOffset);\r\n\r\n        this._lastPoint.x = mouseX;\r\n        this._lastPoint.y = mouseY;\r\n\r\n        if (this._lastOffset === 0) return;\r\n\r\n        if (!this._checkElastic) {\r\n            if (this.elasticDistance > 0) {\r\n                if (!this._checkElastic && this._lastOffset != 0) {\r\n                    if ((this._lastOffset > 0 && this._value <= this.min) || (this._lastOffset < 0 && this._value >= this.max)) {\r\n                        this._isElastic = true;\r\n                        this._checkElastic = true;\r\n                    } else {\r\n                        this._isElastic = false;\r\n                    }\r\n                }\r\n            } else {\r\n                this._checkElastic = true;\r\n            }\r\n        }\r\n\r\n        if (this._isElastic) {\r\n            if (this._value <= this.min) {\r\n                if (this._lastOffset > 0) {\r\n                    this.value -= this._lastOffset * Math.max(0, (1 - ((this.min - this._value) / this.elasticDistance)));\r\n                } else {\r\n                    this.value -= this._lastOffset * 0.5;\r\n                    if (this._value >= this.min)\r\n                        this._checkElastic = false;\r\n                }\r\n            } else if (this._value >= this.max) {\r\n                if (this._lastOffset < 0) {\r\n                    this.value -= this._lastOffset * Math.max(0, (1 - ((this._value - this.max) / this.elasticDistance)));\r\n                } else {\r\n                    this.value -= this._lastOffset * 0.5;\r\n                    if (this._value <= this.max)\r\n                        this._checkElastic = false;\r\n                }\r\n\r\n            }\r\n        } else {\r\n            this.value -= this._lastOffset;\r\n        }\r\n    }\r\n    protected onStageMouseUp2(e: Event): void {\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.clear(this, this.loop);\r\n\r\n        if (this._clickOnly) {\r\n            if (this._value >= this.min && this._value <= this.max)\r\n                return;\r\n        }\r\n        this._target.mouseEnabled = true;\r\n\r\n        if (this._isElastic) {\r\n            if (this._value < this.min) {\r\n                if (this.min - this._value >= this.topMoveLimit) {\r\n                    this.event(\"dragTopLimit\");\r\n                }\r\n                var moveValue: number = (this.stopMoveLimit && this.stopMoveLimit()) ? (this.min - this.topMoveLimit) : this.min;\r\n                Tween.to(this, { value: moveValue }, this.elasticBackTime, ScrollBar.easeFunction, Handler.create(this, this.elasticOver));\r\n            } else if (this._value > this.max) {\r\n                if (this._value - this.max >= this.bottomMoveLimit) {\r\n                    this.event(\"dragBottomLimit\");\r\n                }\r\n                var moveValue: number = (this.stopMoveLimit && this.stopMoveLimit()) ? (this.max + this.bottomMoveLimit) : this.max;\r\n                Tween.to(this, { value: moveValue }, this.elasticBackTime, ScrollBar.easeFunction, Handler.create(this, this.elasticOver));\r\n            }\r\n        } else {\r\n            if (!this._offsets) return;\r\n            //计算平均值\r\n            if (this._offsets.length < 1) {\r\n                this._offsets[0] = this.isVertical ? ILaya.stage.mouseY - this._lastPoint.y : ILaya.stage.mouseX - this._lastPoint.x;\r\n            }\r\n            var offset: number = 0;\r\n            var n: number = Math.min(this._offsets.length, 3);\r\n            for (var i: number = 0; i < n; i++) {\r\n                offset += this._offsets[this._offsets.length - 1 - i];\r\n            }\r\n            this._lastOffset = offset / n;\r\n\r\n            offset = Math.abs(this._lastOffset);\r\n            if (offset < 2) {\r\n                this.event(Event.END);\r\n                return;\r\n            }\r\n            if (offset > 250) this._lastOffset = this._lastOffset > 0 ? 250 : -250;\r\n            var dis: number = Math.round(Math.abs(this.elasticDistance * (this._lastOffset / 150)));\r\n            ILaya.timer.frameLoop(1, this, this.tweenMove, [dis]);\r\n        }\r\n    }\r\n\r\n    private elasticOver(): void {\r\n        this._isElastic = false;\r\n        if (!this.hide && this.autoHide) {\r\n            Tween.to(this, { alpha: 0 }, 500);\r\n        }\r\n        this.event(Event.END);\r\n    }\r\n\r\n    protected tweenMove(maxDistance: number): void {\r\n        this._lastOffset *= this.rollRatio;\r\n        if (this.checkTriggers(true)) {\r\n            return;\r\n        }\r\n        var tarSpeed: number;\r\n        if (maxDistance > 0) {\r\n            if (this._lastOffset > 0 && this.value <= this.min) {\r\n                this._isElastic = true;\r\n                tarSpeed = -(this.min - maxDistance - this.value) * 0.5;\r\n                if (this._lastOffset > tarSpeed) this._lastOffset = tarSpeed;\r\n            } else if (this._lastOffset < 0 && this.value >= this.max) {\r\n                this._isElastic = true;\r\n                tarSpeed = -(this.max + maxDistance - this.value) * 0.5;\r\n                if (this._lastOffset < tarSpeed) this._lastOffset = tarSpeed;\r\n            }\r\n        }\r\n\r\n        this.value -= this._lastOffset;\r\n        //if (Math.abs(_lastOffset) < 1 || value == max || value == min) \r\n        if (Math.abs(this._lastOffset) < 0.1) {\r\n            ILaya.timer.clear(this, this.tweenMove);\r\n            if (this._isElastic) {\r\n                if (this._value < this.min) {\r\n                    Tween.to(this, { value: this.min }, this.elasticBackTime, ScrollBar.easeFunction, Handler.create(this, this.elasticOver));\r\n                } else if (this._value > this.max) {\r\n                    Tween.to(this, { value: this.max }, this.elasticBackTime, ScrollBar.easeFunction, Handler.create(this, this.elasticOver));\r\n                } else {\r\n                    this.elasticOver();\r\n                }\r\n                return;\r\n            }\r\n            this.event(Event.END);\r\n            if (!this.hide && this.autoHide) {\r\n                Tween.to(this, { alpha: 0 }, 500);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Stops the scrolling action.\r\n     * @zh 停止滑动。\r\n     */\r\n    stopScroll(): void {\r\n        this.onStageMouseUp2(null);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n    }\r\n\r\n    /**\r\n     * @en The minimum increment unit for the slider tick value, with a default value of 1.\r\n     * @zh 滑动条刻度值的最小变动单位，默认值为1。\r\n     */\r\n    get tick(): number {\r\n        return this.slider.tick;\r\n    }\r\n\r\n    set tick(value: number) {\r\n        this.slider.tick = value;\r\n    }\r\n\r\n    /**\r\n     * @en Restores the scrollbar to its normal elastic bounce-back motion.\r\n     * @zh 恢复到正常的弹性缓动效果。\r\n     */\r\n    backToNormal(): void {\r\n        if (this._value < this.min) {\r\n            this._backToNormal(this.min);\r\n        } else if (this._value > this.max) {\r\n            this._backToNormal(this.max);\r\n        }\r\n    }\r\n\r\n    private _backToNormal(value: number) {\r\n        Tween.to(this, { value: value }, this.elasticBackTime, ScrollBar.easeFunction, Handler.create(this, this.elasticOver));\r\n    }\r\n}\r\n","import { ScrollBar } from \"./ScrollBar\";\r\n\r\n/**\r\n * @en The vertical scrollbar (VScrollBar) is used to scroll and view all content in the vertical direction when there is too much data to fit in the display area.\r\n * @zh 垂直滚动条（VScrollBar）用于垂直方向因数据过多而超出显示区域时滚动查看全部内容。\r\n */\r\nexport class VScrollBar extends ScrollBar {\r\n\r\n}","import { ScrollBar } from \"./ScrollBar\";\r\n\r\n/**\r\n * @en Use the `HScrollBar` (horizontal `ScrollBar`) control to control the displayed data portion when there is too much data to display completely in the display area.\r\n * @zh 使用 `HScrollBar`（水平 `ScrollBar`）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。\r\n */\r\nexport class HScrollBar extends ScrollBar {\r\n\r\n    protected initialize(): void {\r\n        super.initialize();\r\n        this.slider.isVertical = false;\r\n    }\r\n}","import { Box } from \"./Box\";\r\nimport { ScrollBar } from \"./ScrollBar\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { HScrollBar } from \"./HScrollBar\";\r\nimport { Clip } from \"./Clip\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Rectangle } from \"../maths/Rectangle\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { Tween } from \"../utils/Tween\"\r\nimport { LegacyUIParser } from \"../loaders/LegacyUIParser\";\r\nimport { HideFlags } from \"../Const\";\r\nimport { HierarchyParser } from \"../loaders/HierarchyParser\";\r\nimport { UIComponent } from \"./UIComponent\";\r\nimport { ScrollType } from \"./Styles\";\r\n\r\n\r\n/**\r\n * @en The List control can display a list of items. The default is a vertical list. The list can be customized through the UI editor.\r\n * - Event.RENDER: When rendering the unit item object of a list, it is dispatched.\r\n * - change event: When the selectedIndex property of an object changes, it is dispatched.\r\n * @zh List 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。\r\n * - Event.RENDER事件: 渲染列表的单元项对象时调度。\r\n * - change事件: 当对象的 selectedIndex 属性发生变化时调度。\r\n */\r\nexport class List extends Box {\r\n\r\n    /**\r\n     * @en The processor executed when changing the selection of a List. (Default return parameters: Item index(index:int))\r\n     * @zh 改变 List 的选择项时执行的处理器。(默认返回参数： 项索引（index:int）)。\r\n     */\r\n    selectHandler: Handler | null;\r\n    /**\r\n     * @en Cell rendering processor(Default return parameters  cell:UIComponent,index:int)\r\n     * @zh 单元格渲染处理器(默认返回参数cell:UIComponent,index:int)。\r\n     */\r\n    renderHandler: Handler | null;\r\n    /**\r\n     * @en Cell Mouse Event Processor(Default return parameters  e:Event,index:int)\r\n     * @zh 单元格鼠标事件处理器(默认返回参数e:Event,index:int)。\r\n     */\r\n    mouseHandler: Handler | null;\r\n    /**\r\n     * @en Specify whether it is selectable. If the value is true, you can choose; Otherwise, you cannot choose.\r\n     * @zh 指定是否可以选择。若值为 true，则可以选择；否则不可以选择。\r\n     * @default false\r\n     */\r\n    selectEnable: boolean = false;\r\n    /**\r\n     * @en The maximum number of pages for pagination.\r\n     * @zh 最大分页数。\r\n     */\r\n    totalPage: number = 0;\r\n    /**\r\n     * @en Disable scrollbar stop.\r\n     * @zh 禁用滚动条停止。\r\n     */\r\n    disableStopScroll: boolean = false;\r\n\r\n    /**@internal */\r\n    protected _content!: Box;\r\n    /**@internal */\r\n    protected _scrollBar: ScrollBar | null;\r\n    /**@internal */\r\n    protected _itemRender: any;\r\n    /**@internal */\r\n    protected _repeatX: number = 0;\r\n    /**@internal */\r\n    protected _repeatY: number = 0;\r\n    /**@internal */\r\n    protected _repeatX2: number = 0;\r\n    /**@internal */\r\n    protected _repeatY2: number = 0;\r\n    /**@internal */\r\n    protected _spaceX: number = 0;\r\n    /**@internal */\r\n    protected _spaceY: number = 0;\r\n    /**@internal */\r\n    protected _cells: UIComponent[] = [];\r\n    /**@internal */\r\n    protected _array: any[] | null;\r\n    /**@internal */\r\n    protected _startIndex: number = 0;\r\n    /**@internal */\r\n    protected _selectedIndex: number = -1;\r\n    /**@internal */\r\n    protected _page: number = 0;\r\n    /**@internal */\r\n    protected _isVertical: boolean = true;\r\n    /**@internal */\r\n    protected _cellSize: number = 20;\r\n    /**@internal */\r\n    protected _cellOffset: number = 0;\r\n    /**@internal */\r\n    protected _isMoved: boolean;\r\n    /**@internal */\r\n    protected _createdLine: number = 0;\r\n    /**@internal */\r\n    protected _cellChanged: boolean;\r\n    /**@internal */\r\n    protected _offset: Point = new Point();\r\n    /**@internal */\r\n    protected _usedCache: string | null = null;\r\n    /**@internal */\r\n    protected _elasticEnabled: boolean = false;\r\n    /**@internal */\r\n    protected _scrollType: ScrollType = 0;\r\n    /**@internal */\r\n    protected _vScrollBarSkin: string;\r\n    /**@internal */\r\n    protected _hScrollBarSkin: string;\r\n    /**@internal */\r\n    private _preLen = 0;\r\n\r\n    /**\r\n     * @en Determines whether the content is cached for performance optimization.\r\n     * Setting this property to true can greatly improve performance if the data source is small and there are no animations within the list.\r\n     * @zh 是否缓存内容。如果数据源较少，并且列表内无动画，设置此属性为 true 能大大提高性能。\r\n     */\r\n    cacheContent: boolean;\r\n\r\n    /**\r\n     * @en The current page number of the list.\r\n     * @zh 列表的当前页码。\r\n     */\r\n    get page(): number {\r\n        return this._page;\r\n    }\r\n\r\n    set page(value: number) {\r\n        this._page = value\r\n        if (this._array) {\r\n            this._page = value > 0 ? value : 0;\r\n            this._page = this._page < this.totalPage ? this._page : this.totalPage - 1;\r\n            this.startIndex = this._page * this.repeatX * this.repeatY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The total number of items in the list.\r\n     * @zh 列表的数据总个数。\r\n     */\r\n    get length(): number {\r\n        return this._array ? this._array.length : 0;\r\n    }\r\n\r\n    /**\r\n     * @en The collection of cells in the list.\r\n     * @zh 单元格集合。\r\n     */\r\n    get cells(): UIComponent[] {\r\n        this.runCallLater(this.changeCells);\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * @en If the elastic effect is enabled.\r\n     * @zh 是否开启橡皮筋效果。\r\n     */\r\n    get elasticEnabled(): boolean {\r\n        return this._elasticEnabled;\r\n    }\r\n\r\n    set elasticEnabled(value: boolean) {\r\n        this._elasticEnabled = value;\r\n        if (this._scrollBar) {\r\n            this._scrollBar.elasticDistance = value ? 200 : 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The caching mode for the list.\r\n     * @zh 列表的缓存模式。\r\n     */\r\n    set cacheAs(value: string) {\r\n        super.cacheAs = value;\r\n        if (this._scrollBar) {\r\n            this._usedCache = null;\r\n            if (value !== \"none\") this._scrollBar.on(Event.START, this, this.onScrollStart);\r\n            else this._scrollBar.off(Event.START, this, this.onScrollStart);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The caching mode of the list.\r\n     * @zh 列表的缓存模式。\r\n     */\r\n    get cacheAs() {\r\n        return super.cacheAs;\r\n    }\r\n\r\n    /**\r\n     * @en Reference to the content container Box component of the List component.\r\n     * @zh List 组件所包含的内容容器 Box 组件的引用。\r\n     */\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    /**\r\n     * @en Scrollbar type. Options include:\r\n      - ScrollType.None (0): No scrollbar\r\n      - ScrollType.Horizontal (1): Horizontal scrollbar.\r\n      - Others: such as ScrollType.Vertical (2) indicates a vertical scrollbar\r\n     * @zh 滚动条类型。可选值包括：\r\n     * - ScrollType.None（0）：无滚动条\r\n     * - ScrollType.Horizontal（1）：水平方向滚动条。\r\n     * - 其它：如 ScrollType.Vertical（2） 表示垂直方向滚动条\r\n     */\r\n    get scrollType() {\r\n        return this._scrollType;\r\n    }\r\n\r\n    set scrollType(value: ScrollType) {\r\n        this._scrollType = value;\r\n\r\n        if (this._scrollType == ScrollType.None) {\r\n            if (this._scrollBar) {\r\n                this._scrollBar.destroy();\r\n                this._scrollBar = null;\r\n                this._content.scrollRect = null;\r\n            }\r\n        }\r\n        else if (this._scrollType == ScrollType.Horizontal) {\r\n            if (this._scrollBar && !this._scrollBar.isVertical) {\r\n                this._scrollBar.skin = this._hScrollBarSkin;\r\n                return;\r\n            }\r\n\r\n            if (this._scrollBar) {\r\n                this._scrollBar.destroy();\r\n                this._scrollBar = null;\r\n            }\r\n\r\n            let scrollBar = new HScrollBar();\r\n            scrollBar.name = \"scrollBar\";\r\n            scrollBar.bottom = 0;\r\n            scrollBar._skinBaseUrl = this._skinBaseUrl;\r\n            scrollBar.skin = this._hScrollBarSkin;\r\n            scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n            scrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n            this.scrollBar = scrollBar;\r\n            this._setCellChanged();\r\n        }\r\n        else {\r\n            if (this._scrollBar && this._scrollBar.isVertical) {\r\n                this._scrollBar.skin = this._vScrollBarSkin;\r\n                return;\r\n            }\r\n\r\n            if (this._scrollBar) {\r\n                this._scrollBar.destroy();\r\n                this._scrollBar = null;\r\n            }\r\n\r\n            let scrollBar = new VScrollBar();\r\n            scrollBar.name = \"scrollBar\";\r\n            scrollBar.right = 0;\r\n            scrollBar._skinBaseUrl = this._skinBaseUrl;\r\n            scrollBar.skin = this._vScrollBarSkin;\r\n            scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n            scrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n            this.scrollBar = scrollBar;\r\n            this._setCellChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the vertical scroll bar.\r\n     * @zh 垂直方向滚动条皮肤。\r\n     */\r\n    get vScrollBarSkin(): string {\r\n        return this._vScrollBarSkin;\r\n    }\r\n\r\n    set vScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._vScrollBarSkin != value) {\r\n            this._vScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Vertical;\r\n            else\r\n                this.scrollType = this._scrollType;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the horizontal scroll bar.\r\n     * @zh 水平方向滚动条皮肤。\r\n     */\r\n    get hScrollBarSkin(): string {\r\n        return this._hScrollBarSkin;\r\n    }\r\n\r\n    set hScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._hScrollBarSkin != value) {\r\n            this._hScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Horizontal;\r\n            else\r\n                this.scrollType = this._scrollType;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The reference to the ScrollBar component contained within the List component.\r\n     * @zh List 组件所包含的 ScrollBar 组件的引用。\r\n     */\r\n    get scrollBar(): ScrollBar | null {\r\n        return this._scrollBar;\r\n    }\r\n\r\n    set scrollBar(value: ScrollBar | null) {\r\n        if (this._scrollBar != value) {\r\n            this._scrollBar = value;\r\n            if (value) {\r\n                this._isVertical = this._scrollBar.isVertical;\r\n                this._scrollBar.target = this._content;\r\n                this._scrollBar.on(Event.CHANGE, this, this.onScrollBarChange);\r\n                this.addChild(this._scrollBar);\r\n                this._content.scrollRect = Rectangle.create();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The cell renderer for the List component.\r\n     * value:  The value can be a cell class object or a UI JSON description.\r\n     * @zh 单元格渲染器。\r\n     * 取值：单元格类对象 或 UI的JSON描述。\r\n     */\r\n    get itemRender(): any {\r\n        return this._itemRender;\r\n    }\r\n\r\n    set itemRender(value: any) {\r\n        if (this._itemRender != value) {\r\n            this._itemRender = value;\r\n            //销毁老单元格\r\n            for (let i = this._cells!.length - 1; i > -1; i--) {\r\n                this._cells![i].destroy();\r\n            }\r\n            this._cells!.length = 0;\r\n            this._setCellChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The number of cells displayed horizontally.\r\n     * @zh 水平方向显示的单元格数量。\r\n     */\r\n    get repeatX(): number {\r\n        return this._repeatX > 0 ? this._repeatX : this._repeatX2 > 0 ? this._repeatX2 : 1;\r\n    }\r\n\r\n    set repeatX(value: number) {\r\n        this._repeatX = value;\r\n        this._setCellChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The number of cells displayed vertically.\r\n     * @zh 垂直方向显示的单元格数量。\r\n     */\r\n    get repeatY(): number {\r\n        return this._repeatY > 0 ? this._repeatY : this._repeatY2 > 0 ? this._repeatY2 : 1;\r\n    }\r\n\r\n    set repeatY(value: number) {\r\n        this._repeatY = value;\r\n        this._setCellChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal spacing between cells in pixels.\r\n     * @zh 水平方向显示的单元格之间的间距（以像素为单位）。\r\n     */\r\n    get spaceX(): number {\r\n        return this._spaceX;\r\n    }\r\n\r\n    set spaceX(value: number) {\r\n        this._spaceX = value;\r\n        this._setCellChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The vertical spacing between cells in pixels.\r\n     * @zh 垂直方向显示的单元格之间的间距（以像素为单位）。\r\n     */\r\n    get spaceY(): number {\r\n        return this._spaceY;\r\n    }\r\n\r\n    set spaceY(value: number) {\r\n        this._spaceY = value;\r\n        this._setCellChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Represents the index of the currently selected item. Changing the selectedIndex value will cause the list to re-render.\r\n     * @zh 表示当前选择的项索引。selectedIndex值更改会引起列表重新渲染。\r\n     */\r\n    get selectedIndex(): number {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(value: number) {\r\n        if (this._selectedIndex != value) {\r\n            this._selectedIndex = value;\r\n            this.changeSelectStatus();\r\n            this.event(Event.CHANGE);\r\n            this.selectHandler && this.selectHandler.runWith(value);\r\n            //选择发生变化，自动渲染一次\r\n            this.startIndex = this._startIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en List data source\r\n     * @zh 列表数据源。\r\n     */\r\n    get array(): any[] {\r\n        return this._array as any[];\r\n    }\r\n\r\n    set array(value: any[]) {\r\n        this.runCallLater(this.changeCells);\r\n        this._array = value || [];\r\n        this._preLen = this._array.length;\r\n        let length = this._array.length;\r\n        this.totalPage = Math.ceil(length / (this.repeatX * this.repeatY));\r\n        //重设selectedIndex\r\n        this._selectedIndex = this._selectedIndex < length ? this._selectedIndex : length - 1;\r\n        //重设startIndex\r\n        this.startIndex = this._startIndex;\r\n        //重设滚动条\r\n        if (this._scrollBar) {\r\n            //根据开关决定滚动条是否停止，默认在重设的时候会停止滚动\r\n            (!this.disableStopScroll && this._scrollBar.stopScroll());\r\n            let numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            let numY = this._isVertical ? this.repeatY : this.repeatX;\r\n            let lineCount = Math.ceil(length / numX);\r\n            let total = this._cellOffset > 0 ? this.totalPage + 1 : this.totalPage;\r\n            if (total > 1 && lineCount >= numY) {\r\n                this._scrollBar.scrollSize = this._cellSize;\r\n                this._scrollBar.thumbPercent = numY / lineCount;\r\n                this._scrollBar.setScroll(0, (lineCount - numY) * this._cellSize + this._cellOffset, this._scrollBar.value);\r\n            } else {\r\n                this._scrollBar.setScroll(0, 0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The data source of the currently selected cell.\r\n     * @zh 当前选中的单元格数据源。\r\n     */\r\n    get selectedItem(): any {\r\n        if (!this._array) return null;\r\n        return this._selectedIndex != -1 ? this._array[this._selectedIndex] : null;\r\n    }\r\n\r\n    set selectedItem(value: any) {\r\n        this._array && (this.selectedIndex = this._array.indexOf(value));\r\n    }\r\n\r\n    /**\r\n     * @en The currently selected cell object.\r\n     * @zh 当前选择的单元格对象。\r\n     */\r\n    get selection(): UIComponent {\r\n        return this.getCell(this._selectedIndex);\r\n    }\r\n\r\n    set selection(value: UIComponent) {\r\n        this.selectedIndex = this._startIndex + this._cells.indexOf(value);\r\n    }\r\n\r\n    /**\r\n     * @en The start index of the currently displayed list of cells.\r\n     * @zh 当前显示的单元格列表的开始索引。\r\n     */\r\n    get startIndex(): number {\r\n        return this._startIndex;\r\n    }\r\n\r\n    set startIndex(value: number) {\r\n        this._startIndex = value > 0 ? value : 0;\r\n        this.callLater(this.renderItems);\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._content = new Box();\r\n        this._content.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this._content);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n    */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._setCellChanged();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n    */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._setCellChanged();\r\n    }\r\n\r\n    private _getOneCell(): UIComponent {\r\n        if (this._cells.length === 0) {\r\n            let item = this.createItem();\r\n            this._offset.setTo(item._x, item._y);\r\n            if (this.cacheContent) return item;\r\n            this._cells.push(item);\r\n        }\r\n        return this._cells[0];\r\n    }\r\n\r\n    private _createItems(startY: number, numX: number, numY: number): void {\r\n        let box = this._content;\r\n        let cell = this._getOneCell();\r\n        let cellWidth = cell.width + this._spaceX;\r\n        let cellHeight = cell.height + this._spaceY;\r\n        let arr: Array<UIComponent>;\r\n\r\n        if (this.cacheContent) {\r\n            let cacheBox = new Box();\r\n            cacheBox.hideFlags = HideFlags.HideAndDontSave;\r\n            cacheBox.cacheAs = \"normal\";\r\n            cacheBox.pos((this._isVertical ? 0 : startY) * cellWidth, (this._isVertical ? startY : 0) * cellHeight);\r\n            this._content.addChild(cacheBox);\r\n            box = cacheBox;\r\n        } else {\r\n            arr = [];\r\n            for (let i = this._cells.length - 1; i > -1; i--) {\r\n                let item = this._cells[i];\r\n                item.removeSelf();\r\n                arr.push(item);\r\n            }\r\n            this._cells.length = 0;\r\n        }\r\n\r\n        for (let k = startY; k < numY; k++) {\r\n            for (let l = 0; l < numX; l++) {\r\n                if (arr && arr.length) {\r\n                    cell = arr.pop();\r\n                } else {\r\n                    cell = this.createItem();\r\n                    cell.hideFlags = HideFlags.HideAndDontSave;\r\n                }\r\n                cell.x = (this._isVertical ? l : k) * cellWidth - box._x;\r\n                cell.y = (this._isVertical ? k : l) * cellHeight - box._y;\r\n                cell.name = \"item\" + (k * numX + l);\r\n                box.addChild(cell);\r\n                this.addCell(cell);\r\n            }\r\n        }\r\n\r\n        if (arr && arr.length > 0) {\r\n            for (let e of arr)\r\n                e.destroy();\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    _afterInited(): void {\r\n        this.initItems();\r\n    }\r\n\r\n    private _bindData(cell: any, data: any): void {\r\n        let arr: any[] = cell._$bindData;\r\n        for (let i = 0, n = arr.length; i < n; i++) {\r\n            let ele: any = arr[i++];\r\n            let prop: string = arr[i++];\r\n            let value: string = arr[i];\r\n            let fun = UIUtils.getBindFun(value);\r\n            ele[prop] = fun.call(this, data);\r\n        }\r\n    }\r\n\r\n    protected _sizeChanged(): void {\r\n        super._sizeChanged();\r\n        this.setContentSize(this.width, this.height);\r\n        if (this._scrollBar) this.callLater(this.onScrollBarChange);\r\n    }\r\n\r\n    protected _setCellChanged(): void {\r\n        if (!this._cellChanged) {\r\n            this._cellChanged = true;\r\n            this.callLater(this.changeCells);\r\n        }\r\n    }\r\n    private onScrollStart(): void {\r\n        this._usedCache || (this._usedCache = super.cacheAs);\r\n        super.cacheAs = \"none\";\r\n        this._scrollBar!.once(Event.END, this, this.onScrollEnd);\r\n    }\r\n\r\n    private onScrollEnd(): void {\r\n        super.cacheAs = this._usedCache || 'none';\r\n    }\r\n\r\n    protected createItem(): UIComponent {\r\n        let arr: any[] = [];\r\n        let box: UIComponent;\r\n        if (typeof (this._itemRender) == \"function\") {//TODO:\r\n            box = new this._itemRender();\r\n            box._skinBaseUrl = this._skinBaseUrl;\r\n        } else {\r\n            if (this._itemRender._$type || this._itemRender._$prefab)\r\n                box = <UIComponent>HierarchyParser.parse(this._itemRender, { skinBaseUrl: this._skinBaseUrl })[0];\r\n            else\r\n                box = LegacyUIParser.createComp(this._itemRender, null, null, arr);\r\n            if (!box) {\r\n                console.warn(\"cannot create item\");\r\n                box = new Box();\r\n            }\r\n        }\r\n        box.hideFlags = HideFlags.HideAndDontSave;\r\n\r\n        if (arr.length == 0 && (<any>box)[\"_watchMap\"]) {\r\n            let watchMap = (<any>box)[\"_watchMap\"];\r\n            for (let name in watchMap) {\r\n                let a: any[] = watchMap[name];\r\n                for (let i = 0; i < a.length; i++) {\r\n                    let watcher = a[i];\r\n                    arr.push(watcher.comp, watcher.prop, watcher.value)\r\n                }\r\n            }\r\n        }\r\n        if (arr.length) (<any>box)[\"_$bindData\"] = arr;\r\n\r\n        return box;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 更改单元格的信息。\r\n     * 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。\r\n     */\r\n    protected changeCells(): void {\r\n        this._cellChanged = false;\r\n        if (this._itemRender) {\r\n            //获取滚动条\r\n            this.scrollBar = (<ScrollBar>this.getChildByName(\"scrollBar\"));\r\n\r\n            //自适应宽高\r\n            let cell = this._getOneCell();\r\n\r\n            let cellWidth = (cell.width + this._spaceX) || 1;\r\n            let cellHeight = (cell.height + this._spaceY) || 1;\r\n            if (this._width > 0) this._repeatX2 = this._isVertical ? Math.round(this._width / cellWidth) : Math.ceil(this._width / cellWidth);\r\n            if (this._height > 0) this._repeatY2 = this._isVertical ? Math.ceil(this._height / cellHeight) : Math.round(this._height / cellHeight);\r\n\r\n            let listWidth = this._isWidthSet ? this._width : (cellWidth * this.repeatX - this._spaceX);\r\n            let listHeight = this._isHeightSet ? this._height : (cellHeight * this.repeatY - this._spaceY);\r\n            this._cellSize = this._isVertical ? cellHeight : cellWidth;\r\n            this._cellOffset = this._isVertical ? (cellHeight * Math.max(this._repeatY2, this._repeatY) - listHeight - this._spaceY) : (cellWidth * Math.max(this._repeatX2, this._repeatX) - listWidth - this._spaceX);\r\n\r\n            if (this._scrollBar) {\r\n                if (this._isVertical)\r\n                    this._scrollBar.height = listHeight;\r\n                else\r\n                    this._scrollBar.width = listWidth;\r\n            }\r\n            this.setContentSize(listWidth, listHeight);\r\n\r\n            //创建新单元格\r\n            let numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            let numY = (this._isVertical ? this.repeatY : this.repeatX) + (this._scrollBar ? 1 : 0);\r\n            this._createItems(0, numX, numY);\r\n            this._createdLine = numY;\r\n\r\n            if (this._array) {\r\n                this.array = this._array;\r\n                this.runCallLater(this.renderItems);\r\n            }\r\n            else\r\n                this.changeSelectStatus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Adds a cell to the list.\r\n     * @param cell The cell object to be added.\r\n     * @zh 添加单元格。\r\n     * @param cell 需要添加的单元格对象。\r\n     */\r\n    protected addCell(cell: UIComponent): void {\r\n        cell.on(Event.CLICK, this, this.onCellMouse);\r\n        cell.on(Event.RIGHT_CLICK, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_OVER, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_OUT, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_DOWN, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_UP, this, this.onCellMouse);\r\n        this._cells.push(cell);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Handles mouse events for cells.\r\n     * @param e The event object.\r\n     * @zh 单元格的鼠标事件侦听处理函数。\r\n     * @param e 事件对象。\r\n     */\r\n    protected onCellMouse(e: Event): void {\r\n        if (e.type === Event.MOUSE_DOWN) this._isMoved = false;\r\n        let cell = (<UIComponent>e.currentTarget);\r\n        let index = this._startIndex + this._cells.indexOf(cell);\r\n        if (index < 0) return;\r\n        if (e.type === Event.CLICK || e.type === Event.RIGHT_CLICK) {\r\n            if (this.selectEnable && !this._isMoved) this.selectedIndex = index;\r\n            else this.changeCellState(cell, true, 0);\r\n        } else if ((e.type === Event.MOUSE_OVER || e.type === Event.MOUSE_OUT) && this._selectedIndex !== index) {\r\n            this.changeCellState(cell, e.type === Event.MOUSE_OVER, 0);\r\n        }\r\n        this.mouseHandler && this.mouseHandler.runWith([e, index]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Changes the visual state of a cell.\r\n     * @param cell The cell object.\r\n     * @param visible Indicates whether the cell should be visible.\r\n     * @param index The cell's property index value.\r\n     * @zh 改变单元格的可视状态。\r\n     * @param cell 单元格对象\r\n     * @param visible 是否显示。\r\n     * @param index 单元格的属性 index 值。\r\n     */\r\n    protected changeCellState(cell: UIComponent, visible: boolean, index: number): void {\r\n        let selectBox = (<Clip>cell.getChildByName(\"selectBox\"));\r\n        if (selectBox) {\r\n            this.selectEnable = true;\r\n            selectBox.visible = visible;\r\n            selectBox.index = index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Event handler for the scrollbar's Event.CHANGE event.\r\n     * @zh 滚动条的 Event.CHANGE 事件侦听处理函数。\r\n     */\r\n    protected onScrollBarChange(e: Event | null = null): void {\r\n        this.runCallLater(this.changeCells);\r\n        let scrollValue = this._scrollBar!.value;\r\n        let lineX = (this._isVertical ? this.repeatX : this.repeatY);\r\n        let lineY = (this._isVertical ? this.repeatY : this.repeatX);\r\n        let scrollLine = Math.floor(scrollValue / this._cellSize);\r\n\r\n        if (!this.cacheContent) {\r\n            let index = scrollLine * lineX;\r\n            let num = 0;\r\n            let down = true;\r\n            let toIndex = 0;\r\n            if (index > this._startIndex) {\r\n                num = index - this._startIndex;\r\n                //let down = true;\r\n                toIndex = this._startIndex + lineX * (lineY + 1);\r\n                this._isMoved = true;\r\n            } else if (index < this._startIndex) {\r\n                num = this._startIndex - index;\r\n                down = false;\r\n                toIndex = this._startIndex - 1;\r\n                this._isMoved = true;\r\n            }\r\n\r\n            let cell: UIComponent;\r\n            let cellIndex: number;\r\n            for (let i = 0; i < num; i++) {\r\n                if (down) {\r\n                    cell = this._cells.shift();\r\n                    this._cells[this._cells.length] = cell;\r\n                    cellIndex = toIndex + i;\r\n                } else {\r\n                    cell = this._cells.pop();\r\n                    this._cells.unshift(cell);\r\n                    cellIndex = toIndex - i;\r\n                }\r\n                let pos = Math.floor(cellIndex / lineX) * this._cellSize;\r\n                this._isVertical ? cell.y = pos : cell.x = pos;\r\n                this.renderItem(cell, cellIndex);\r\n            }\r\n            this._startIndex = index;\r\n            this.changeSelectStatus();\r\n        } else {\r\n            let num = (lineY + 1);\r\n            if (this._createdLine - scrollLine < num) {\r\n                this._createItems(this._createdLine, lineX, this._createdLine + num);\r\n                this.renderItems(this._createdLine * lineX, 0);\r\n                this._createdLine += num;\r\n            }\r\n        }\r\n\r\n        let r = this._content._style.scrollRect;\r\n        if (this._isVertical) {\r\n            r.y = scrollValue - this._offset.y;\r\n            r.x = -this._offset.x;\r\n        } else {\r\n            r.y = -this._offset.y;\r\n            r.x = scrollValue - this._offset.x;\r\n        }\r\n        this._content.scrollRect = r;\r\n    }\r\n\r\n    /**@internal */\r\n    private posCell(cell: UIComponent, cellIndex: number): void {\r\n        if (!this._scrollBar) return;\r\n        let lineX = (this._isVertical ? this.repeatX : this.repeatY);\r\n        //let lineY = (this._isVertical ? this.repeatY : this.repeatX);\r\n        let pos = Math.floor(cellIndex / lineX) * this._cellSize;\r\n        this._isVertical ? cell._y = pos : cell.x = pos;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Changes the selection state of the cells.\r\n     * @zh 改变单元格的选择状态。\r\n     */\r\n    protected changeSelectStatus(): void {\r\n        for (let i: number = 0, n: number = this._cells.length; i < n; i++) {\r\n            this.changeCellState(this._cells[i], this._selectedIndex === this._startIndex + i, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Renders the list of cells.\r\n     * @param from The start index to begin rendering from.\r\n     * @param to The end index to stop rendering. If not provided, it renders to the end of the list.\r\n     * @zh 渲染单元格列表。\r\n     * @param from 渲染开始的索引。\r\n     * @param to 停止渲染的结束索引。如果没有提供，它将渲染到列表末尾。\r\n     */\r\n    protected renderItems(from: number = 0, to: number = 0): void {\r\n        for (let i = from, n = to || this._cells.length; i < n; i++) {\r\n            this.renderItem(this._cells[i], this._startIndex + i);\r\n        }\r\n        this.changeSelectStatus();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Renders a single cell.\r\n     * @param cell The cell object that needs to be rendered.\r\n     * @param index The index of the cell.\r\n     * @zh 渲染一个单元格。\r\n     * @param cell 需要渲染的单元格对象。\r\n     * @param index 单元格索引。\r\n     */\r\n    protected renderItem(cell: UIComponent, index: number): void {\r\n        if (!this._array || index >= 0 && index < this._array.length) {\r\n            cell.visible = true;\r\n\r\n            if (this._array) {\r\n                if ((cell as any)[\"_$bindData\"]) {\r\n                    cell[\"_dataSource\"] = this._array[index];\r\n                    this._bindData(cell, this._array[index]);\r\n                } else\r\n                    cell.dataSource = this._array[index];\r\n            }\r\n\r\n            if (!this.cacheContent) {\r\n                //TODO:\r\n                this.posCell(cell, index);\r\n            }\r\n            if (this.hasListener(Event.RENDER)) this.event(Event.RENDER, [cell, index]);\r\n            if (this.renderHandler) this.renderHandler.runWith([cell, index]);\r\n        } else {\r\n            cell.visible = false;\r\n            cell.dataSource = null;\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    protected commitMeasure(): void {\r\n        this.runCallLater(this.changeCells);\r\n    }\r\n\r\n    /**\r\n     * @en Updates the data source without refreshing the entire list, only increasing the scroll length.\r\n     * @param array The data source to update.\r\n     * @zh 更新数据源，不刷新list，只增加滚动长度。\r\n     * @param array 数据源。\r\n     */\r\n    updateArray(array: any[]): void {\r\n        this._array = array;\r\n        if (this._array) {\r\n            let freshStart = this._preLen - this._startIndex;\r\n            if (freshStart >= 0)\r\n                this.renderItems(freshStart);\r\n            this._preLen = this._array.length;\r\n        }\r\n        if (this._scrollBar) {\r\n            let length = array.length;\r\n            let numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            let numY = this._isVertical ? this.repeatY : this.repeatX;\r\n            let lineCount = Math.ceil(length / numX);\r\n            if (lineCount >= numY) {\r\n                this._scrollBar.thumbPercent = numY / lineCount;\r\n                this._scrollBar.slider[\"_max\"] = (lineCount - numY) * this._cellSize + this._cellOffset;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Called after deserialization to perform additional setup.\r\n     * @zh 反序列化后调用以执行额外的设置。\r\n     */\r\n    onAfterDeserialize() {\r\n        super.onAfterDeserialize();\r\n        this.initItems();\r\n    }\r\n\r\n    /**\r\n     * @en Initializes cell information.\r\n     * @zh 初始化单元格信息。\r\n     */\r\n    initItems(): void {\r\n        if (!this._itemRender && this.getChildByName(\"item0\") != null) {\r\n            this.repeatX = 1;\r\n            let count: number;\r\n            count = 0;\r\n            for (let i = 0; i < 10000; i++) {\r\n                let cell = <UIComponent>this.getChildByName(\"item\" + i);\r\n                if (cell) {\r\n                    this.addCell(cell);\r\n                    count++;\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n            this.repeatY = count;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the size of the viewable area.\r\n     * The viewable area is defined by a rectangle with the top-left corner at (0,0) and the specified width and height.\r\n     * @param width The width of the viewable area.\r\n     * @param height The height of the viewable area.\r\n     * @zh 设置可视区域大小。\r\n     * 以（0，0，width参数，height参数）组成的矩形区域为可视区域。\r\n     * @param width 可视区域宽度。\r\n     * @param height 可视区域高度。\r\n     */\r\n    setContentSize(width: number, height: number): void {\r\n        this._content.width = width;\r\n        this._content.height = height;\r\n        if (this._scrollBar) {\r\n            let r = this._content.scrollRect;\r\n            if (!r)\r\n                r = Rectangle.create();\r\n            r.setTo(-this._offset.x, -this._offset.y, width, height);\r\n            this._content.scrollRect = r;\r\n        }\r\n        this.event(Event.RESIZE);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @en Sets the data source for the component, overriding the base class's method to handle different data types.\r\n     * @param value The new data source.\r\n     * @zh 设置数据源，覆盖基类方法以处理不同类型的数据。\r\n     * @param value 新的数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.selectedIndex = parseInt(value as string);\r\n        else if (value instanceof Array)\r\n            this.array = (<any[]>value)\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Refreshes the list data source.\r\n     * @zh 刷新列表数据源。\r\n     */\r\n    refresh(): void {\r\n        this.array = this._array as any[];\r\n        //startIndex = _startIndex;\r\n    }\r\n\r\n    /**\r\n     * @en Get the cell data source.\r\n     * @param index The index of the cell.\r\n     * @zh 获取单元格数据源。\r\n     * @param index 单元格索引。\r\n     */\r\n    getItem(index: number): any {\r\n        if (!this._array)\r\n            return null;\r\n        if (index > -1 && index < this._array.length) {\r\n            return this._array[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Changes the data source of a cell at a specified index.\r\n     * @param index The index of the cell.\r\n     * @param source The data source for the cell.\r\n     * @zh 修改单元格数据源。\r\n     * @param index 单元格索引。\r\n     * @param source 单元格数据源。\r\n     */\r\n    changeItem(index: number, source: any): void {\r\n        if (index > -1 && this._array && index < this._array.length) {\r\n            this._array[index] = source;\r\n            //如果是可视范围，则重新渲染\r\n            if (index >= this._startIndex && index < this._startIndex + this._cells.length) {\r\n                this.renderItem(this.getCell(index)!, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the data source for a cell at a specified index.\r\n     * @param index The cell index.\r\n     * @param source The data source for the cell.\r\n     * @zh 设置单元格数据源。\r\n     * @param index 单元格索引。\r\n     * @param source 单元格数据源。\r\n     */\r\n    setItem(index: number, source: any): void {\r\n        this.changeItem(index, source);\r\n    }\r\n\r\n    /**\r\n     * @en Adds a new data source to the cell list.\r\n     * @param source The data source to add.\r\n     * @zh 添加单元格数据源。\r\n     * @param source 数据源。\r\n     */\r\n    addItem(source: any): void {\r\n        if (!this.array) {\r\n            this.array = [source];\r\n        } else {\r\n            this._array!.push(source);\r\n        }\r\n        this.array = this._array as any[];\r\n    }\r\n\r\n    /**\r\n     * @en Adds a new data source to the cell list at a specified index.\r\n     * @param source The data source to add.\r\n     * @param index The index at which to insert the data source.\r\n     * @zh 添加单元格数据源到对应的数据索引处。\r\n     * @param souce 单元格数据源。\r\n     * @param index 索引。\r\n     */\r\n    addItemAt(souce: any, index: number): void {\r\n        this._array!.splice(index, 0, souce);\r\n        this.array = this._array!;\r\n    }\r\n\r\n    /**\r\n     * @en Deletes a data source from the cell list by its index.\r\n     * @param index The index of the data source to delete.\r\n     * @zh 通过数据源索引删除单元格数据源。\r\n     * @param index 需要删除的数据源索引值。\r\n     */\r\n    deleteItem(index: number): void {\r\n        if (this._array) {\r\n            this._array.splice(index, 1);\r\n            this.array = this._array;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Gets the cell object by its visible index.\r\n     * @param index The visible index of the cell.\r\n     * @return The cell object.\r\n     * @zh 通过可视单元格索引，获取单元格。\r\n     * @param index 可视单元格索引。\r\n     * @return 单元格对象。\r\n     */\r\n    getCell(index: number): UIComponent | null {\r\n        this.runCallLater(this.changeCells);\r\n        if (index > -1 && this._cells) {\r\n            return this._cells[(index - this._startIndex) % this._cells.length];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Scrolls the list so that the cell corresponding to the specified data index becomes the first visible item in the list.\r\n     * @param index The index of the cell in the data list.\r\n     * @zh 滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。\r\n     * @param index 单元格在数据列表中的索引。\r\n     */\r\n    scrollTo(index: number): void {\r\n        if (this._scrollBar) {\r\n            let numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            this._scrollBar.value = Math.floor(index / numX) * this._cellSize;\r\n        } else {\r\n            this.startIndex = index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Scrolls the list with tweening to make the cell corresponding to the specified data index the first visible item in the list.\r\n     * @param index The index of the cell in the data list.\r\n     * @param time The duration of the tweening effect in milliseconds.\r\n     * @param complete An optional callback function to call when the tweening completes.\r\n     * @zh 缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。\r\n     * @param index 单元格在数据列表中的索引。\r\n     * @param time\t缓动时间。\r\n     * @param complete\t缓动结束回调.\r\n     */\r\n    tweenTo(index: number, time: number = 200, complete: Handler | null = null): void {\r\n        if (this._scrollBar) {\r\n            this._scrollBar.stopScroll();\r\n            let numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            Tween.to(this._scrollBar, { value: Math.floor(index / numX) * this._cellSize }, time, null, complete, 0, true);\r\n        } else {\r\n            this.startIndex = index;\r\n            if (complete) complete.run();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @en Destroys the instance and its child elements.\r\n     * @param destroyChild Specifies whether to destroy child elements.\r\n     * @zh 销毁实例及其子元素。\r\n     * @param destroyChild 指定是否销毁子元素。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._content && this._content.destroy(destroyChild);\r\n        this._scrollBar && this._scrollBar.destroy(destroyChild);\r\n        super.destroy(destroyChild);\r\n        this._content = null;\r\n        this._scrollBar = null;\r\n        this._itemRender = null;\r\n        this._cells = null;\r\n        this._array = null;\r\n        this.selectHandler = this.renderHandler = this.mouseHandler = null;\r\n    }\r\n\r\n\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { Button } from \"./Button\";\r\nimport { List } from \"./List\";\r\nimport { ScrollType, Styles } from \"./Styles\";\r\nimport { Label } from \"./Label\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { Graphics } from \"../display/Graphics\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\n\r\n/**\r\n * @en The `ComboBox` component contains a drop-down list from which the user can select a single value.\r\n * - `change` event: Dispatched when the user changes the selected content in `ComboBox` component.\r\n * @zh `ComboBox` 组件包含一个下拉列表，用户可以从该列表中选择单个值。\r\n * - `change`事件：当用户更改 `ComboBox` 组件中的选定内容时调度。\r\n */\r\nexport class ComboBox extends UIComponent {\r\n    protected _visibleNum: number = 6;\r\n    protected _button: Button;\r\n    protected _list: List;\r\n    protected _isOpen: boolean;\r\n    protected _itemColors: string[];\r\n    protected _itemPadding: number[];\r\n    protected _itemSize: number = 12;\r\n    protected _labels: string[] = [];\r\n    /**\r\n     * 下拉提示文本\r\n     */\r\n    protected _defaultLabel: string = '';\r\n    protected _selectedIndex: number = -1;\r\n    protected _selectHandler: Handler;\r\n    protected _itemHeight: number;\r\n    protected _listHeight: number;\r\n    protected _listChanged: boolean;\r\n    protected _itemChanged: boolean;\r\n    protected _scrollBarSkin: string;\r\n    protected _scrollType: ScrollType = 0;\r\n    protected _isCustomList: boolean;\r\n    /**\r\n     * @en Rendering item, used to display a dropdown list to display objects\r\n     * @zh 渲染项，用来显示下拉列表展示对象\r\n     */\r\n    itemRender: any = null;\r\n\r\n    /**\r\n     * @en The skin resource address of the object. Supports single state, two states and three states, set with the `stateNum` property.\r\n     * @zh 对象的皮肤纹理资源地址。 支持单态，两态和三态，用 `stateNum` 属性设置\r\n     */\r\n    get skin(): string {\r\n        return this._button.skin;\r\n    }\r\n    set skin(value: string) {\r\n        if (this._button.skin != value) {\r\n            this._button.skin = value;\r\n            this._listChanged = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The padding of the drop-down list text.\r\n     * - The format is: top, right, bottom, left\r\n     * @zh 下拉列表文本的边距。\r\n     * - 格式：上边距,右边距,下边距,左边距\r\n     */\r\n    get itemPadding(): string {\r\n        return this._itemPadding.join(\",\");\r\n    }\r\n\r\n    set itemPadding(value: string) {\r\n        this._itemPadding = UIUtils.fillArray(this._itemPadding, value, Number);\r\n    }\r\n\r\n    /**\r\n     * @en The string of label collection.\r\n     * @zh 标签集合字符串。\r\n     */\r\n    get labels(): string {\r\n        return this._labels.join(\",\");\r\n    }\r\n\r\n    set labels(value: string) {\r\n        if (this._labels.length > 0)\r\n            this.selectedIndex = -1;\r\n        if (value)\r\n            this._labels = value.split(\",\");\r\n        else\r\n            this._labels.length = 0;\r\n        this._itemChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the index of the selected drop-down list item.\r\n     * @zh 表示选择的下拉列表项的索引。\r\n     */\r\n    get selectedIndex(): number {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(value: number) {\r\n        if (this._selectedIndex != value) {\r\n            this._selectedIndex = value;\r\n\r\n            if (this._labels.length > 0)\r\n                this.changeSelected();\r\n            else\r\n                this.callLater(this.changeSelected);\r\n\r\n            this.event(Event.CHANGE, Event.EMPTY);\r\n            this._selectHandler && this._selectHandler.runWith(this._selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The default drop-down prompt text.\r\n     * @zh 默认的下拉提示文本。\r\n     */\r\n    get defaultLabel(): string {\r\n        return this._defaultLabel;\r\n    }\r\n\r\n    set defaultLabel(value: string) {\r\n        this._defaultLabel = value;\r\n        this._selectedIndex < 0 && (this._button.label = value);\r\n    }\r\n\r\n    /**\r\n     * @en The handler to be executed when changing the selection of the drop-down list (default returns parameter index:int).\r\n     * @zh 改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。\r\n     */\r\n    get selectHandler(): Handler {\r\n        return this._selectHandler;\r\n    }\r\n\r\n    set selectHandler(value: Handler) {\r\n        this._selectHandler = value;\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the label of the selected drop-down list item.\r\n     * @zh 表示选择的下拉列表项的的标签。\r\n     */\r\n    get selectedLabel(): string {\r\n        return this._selectedIndex > -1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] : this.defaultLabel;\r\n    }\r\n\r\n    set selectedLabel(value: string) {\r\n        this.selectedIndex = this._labels.indexOf(value);\r\n    }\r\n\r\n    /**\r\n     * @en Gets or sets the maximum number of rows that can be displayed in the drop-down list without a scrollbar.\r\n     * @zh 获取或设置没有滚动条的下拉列表中可显示的最大行数。\r\n     */\r\n    get visibleNum(): number {\r\n        return this._visibleNum;\r\n    }\r\n\r\n    set visibleNum(value: number) {\r\n        this._visibleNum = value;\r\n        this._listChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @en The height of the drop-down list item.\r\n     * @zh 下拉列表项的高度。\r\n     */\r\n    get itemHeight(): number {\r\n        return this._itemHeight;\r\n    }\r\n    set itemHeight(value: number) {\r\n        this._itemHeight = value;\r\n        this._listChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @en The color of drop-down list items.\r\n     * The format is: \"background color when hovering or selected, label color when hovering or selected, label color, border color, background color\"\r\n     * @zh 下拉列表项颜色。\r\n     * 格式：悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色\"。\r\n     */\r\n    get itemColors(): string {\r\n        return this._itemColors.join(\",\");\r\n    }\r\n\r\n    set itemColors(value: string) {\r\n        this._itemColors = UIUtils.fillArray(this._itemColors, value, String);\r\n        this._listChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @en The font size of the drop-down list item label.\r\n     * @zh 下拉列表项标签的字体大小。\r\n     */\r\n    get itemSize(): number {\r\n        return this._itemSize;\r\n    }\r\n\r\n    set itemSize(value: number) {\r\n        this._itemSize = value;\r\n        this._listChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the open state of the drop-down list.\r\n     * @zh 表示下拉列表的打开状态。\r\n     */\r\n    get isOpen(): boolean {\r\n        return this._isOpen;\r\n    }\r\n\r\n    set isOpen(value: boolean) {\r\n        //var Laya = ILaya.Laya;\r\n        if (this._isOpen != value) {\r\n            this._isOpen = value;\r\n            this._button.selected = this._isOpen;\r\n            if (this._isOpen) {\r\n                this._list || this._createList();\r\n                this._listChanged && !this._isCustomList && this.changeList();\r\n                this._itemChanged && this.changeItem();\r\n\r\n                var p: Point = this.localToGlobal(Point.TEMP.setTo(0, 0));\r\n                var py: number = p.y + this._button.height;\r\n                py = py + this._listHeight <= ILaya.stage.height ? py : p.y - this._listHeight < 0 ? py : p.y - this._listHeight;\r\n\r\n                this._list.pos(p.x, py);\r\n                this._list.zOrder = 1001;\r\n\r\n                ILaya.stage.addChild(this._list);\r\n                //Laya.stage.once(Event.MOUSE_DOWN, this, removeList);\r\n                //Laya.stage.on(Event.MOUSE_WHEEL, this, _onStageMouseWheel);\r\n                //parent.addChild(_list);\r\n                ILaya.stage.once(Event.MOUSE_DOWN, this, this.removeList);\r\n                ILaya.stage.on(Event.MOUSE_WHEEL, this, this._onStageMouseWheel);\r\n                this._list.selectedIndex = this._selectedIndex;\r\n            } else {\r\n                this._list && this._list.removeSelf();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The scroll type.\r\n     * @zh 滚动类型。\r\n     */\r\n    get scrollType() {\r\n        return this._scrollType;\r\n    }\r\n\r\n    set scrollType(value: ScrollType) {\r\n        this._scrollType = value;\r\n    }\r\n\r\n    /**\r\n     * @en The scrollbar skin.\r\n     * @zh 滚动条皮肤。\r\n     */\r\n    get scrollBarSkin(): string {\r\n        return this._scrollBarSkin;\r\n    }\r\n\r\n    set scrollBarSkin(value: string) {\r\n        this._scrollBarSkin = value;\r\n    }\r\n\r\n    /**\r\n     * @en The size grid of the texture.\r\n     * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n     * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n     * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n     * @zh 纹理的九宫格数据。\r\n     * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n     * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n     * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n     */\r\n    get sizeGrid(): string {\r\n        return this._button.sizeGrid;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        this._button.sizeGrid = value;\r\n    }\r\n\r\n    /**\r\n     * @en a reference to the `VScrollBar` scrollbar component contained in the `ComboBox` component.\r\n     * @zh `ComboBox` 组件所包含的 `VScrollBar` 滚动条组件的引用。\r\n     */\r\n    get scrollBar(): VScrollBar {\r\n        return (<VScrollBar>this.list.scrollBar);\r\n    }\r\n\r\n    /**\r\n     * @en a reference to the `Button` component contained in the `ComboBox` component.\r\n     * @zh `ComboBox` 组件所包含的 `Button` 组件的引用。\r\n     */\r\n    get button(): Button {\r\n        return this._button;\r\n    }\r\n\r\n    /**\r\n     * @en a reference to the `List` list component contained in the `ComboBox` component.\r\n     * @zh `ComboBox` 组件所包含的 `List` 列表组件的引用。\r\n     */\r\n    get list(): List {\r\n        this._list || this._createList();\r\n        return this._list;\r\n    }\r\n\r\n    set list(value: List) {\r\n        if (value) {\r\n            value.removeSelf();\r\n            this._isCustomList = true;\r\n            this._list = value;\r\n            this._setListEvent(value);\r\n            this._itemHeight = value.getCell(0).height + value.spaceY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en the text label color of the `Button` component contained in the `ComboBox` component.\r\n     * The format is: upColor,overColor,downColor\r\n     * @zh  `ComboBox` 组件所包含的 `Button` 组件的文本标签颜色。\r\n     * 格式：upColor,overColor,downColor\r\n     */\r\n    get labelColors(): string {\r\n        return this._button.labelColors;\r\n    }\r\n\r\n    set labelColors(value: string) {\r\n        if (this._button.labelColors != value) {\r\n            this._button.labelColors = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en the text margin of the `Button` component contained in the `ComboBox` component.\r\n     * The format is: top, right, bottom, left\r\n     * @zh `ComboBox` 组件所包含的 `Button` 组件的文本边距。\r\n     * 格式：上边距,右边距,下边距,左边距\r\n     */\r\n    get labelPadding(): string {\r\n        return this._button.text.padding.join(\",\");\r\n    }\r\n\r\n    set labelPadding(value: string) {\r\n        this._button.text.padding = UIUtils.fillArray(Styles.labelPadding, value, Number);\r\n    }\r\n\r\n    /**\r\n    * @en the label font size of the `Button` component contained in the `ComboBox` component.\r\n    * @zh `ComboBox` 组件所包含的 `Button` 组件的标签字体大小。\r\n    */\r\n    get labelSize(): number {\r\n        return this._button.text.fontSize;\r\n    }\r\n\r\n    set labelSize(value: number) {\r\n        this._button.text.fontSize = value\r\n    }\r\n\r\n    /**\r\n    * @en Indicates whether the button text label is bold.\r\n    * @zh 表示按钮文本标签是否为粗体字。\r\n    */\r\n    get labelBold(): boolean {\r\n        return this._button.text.bold;\r\n    }\r\n\r\n    set labelBold(value: boolean) {\r\n        this._button.text.bold = value\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the font name of the button text label, expressed as a string.\r\n     * @zh 表示按钮文本标签的字体名称，以字符串形式表示。\r\n     */\r\n    get labelFont(): string {\r\n        return this._button.text.font;\r\n    }\r\n\r\n    set labelFont(value: string) {\r\n        this._button.text.font = value\r\n    }\r\n\r\n    /**\r\n     * @en Indicates the state value of the button.\r\n     * @zh 表示按钮的状态值。\r\n     */\r\n    get stateNum(): number {\r\n        return this._button.stateNum;\r\n    }\r\n\r\n    set stateNum(value: number) {\r\n        this._button.stateNum = value\r\n    }\r\n\r\n    /**\r\n     * @en `ComboBox` constructor.\r\n     * @param skin The skin resource address.\r\n     * @param labels The string of the label collection in the drop-down list. Separated by commas, such as \"item0,item1,item2,item3,item4,item5\".\r\n     * @zh  `ComboBox` UI组件的构造函数。\r\n     * @param skin 皮肤资源地址。\r\n     * @param labels 下拉列表的标签集字符串。以逗号做分割，如\"item0,item1,item2,item3,item4,item5\"。\r\n     */\r\n    constructor(skin: string = null, labels: string = null) {\r\n        super();\r\n\r\n        this._itemColors = Styles.comboBoxItemColors;\r\n        this._itemPadding = [3, 3, 3, 3];\r\n\r\n        this.skin = skin;\r\n        this.labels = labels;\r\n    }\r\n    protected createChildren(): void {\r\n        this._button = new Button();\r\n        this._button.hideFlags = HideFlags.HideAndDontSave;\r\n        this._button.text.align = \"left\";\r\n        this._button.labelPadding = \"0,0,0,5\";\r\n        this._button.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);\r\n        this.addChild(this._button);\r\n    }\r\n\r\n    private _createList(): void {\r\n        this._list = new List();\r\n        this._list.hideFlags = HideFlags.HideAndDontSave;\r\n        this._list.scrollType = this._scrollType;\r\n        if (this._scrollBarSkin)\r\n            this._list.vScrollBarSkin = this._scrollBarSkin;\r\n        this._setListEvent(this._list);\r\n    }\r\n\r\n    private _setListEvent(list: List): void {\r\n        this._list.selectEnable = true;\r\n        this._list.on(Event.MOUSE_DOWN, this, this.onListDown);\r\n        this._list.mouseHandler = Handler.create(this, this.onlistItemMouse, null, false);\r\n        if (this._list.scrollBar) this._list.scrollBar.on(Event.MOUSE_DOWN, this, this.onScrollBarDown);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._button.width = this._width;\r\n        this._itemChanged = true;\r\n        this._listChanged = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._button.height = this._height;\r\n    }\r\n\r\n    private _onStageMouseWheel(e: Event): void {\r\n        if (!this._list || this._list.contains(e.target)) return;\r\n        this.removeList(null);\r\n    }\r\n\r\n    /**\r\n     * @en Close the drop-down list of ComboBox.\r\n     * @zh 关闭下拉列表。\r\n     */\r\n    protected removeList(e: Event): void {\r\n        ILaya.stage.off(Event.MOUSE_DOWN, this, this.removeList);\r\n        ILaya.stage.off(Event.MOUSE_WHEEL, this, this._onStageMouseWheel);\r\n        this.isOpen = false;\r\n    }\r\n\r\n    private onListDown(e: Event): void {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    private onScrollBarDown(e: Event): void {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    private onButtonMouseDown(e: Event): void {\r\n        this.callLater(this.switchTo, [!this._isOpen]);\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        return this._button.width;\r\n    }\r\n\r\n    protected measureHeight(): number {\r\n        return this._button.height;\r\n    }\r\n\r\n    protected changeList(): void {\r\n        this._listChanged = false;\r\n        var labelWidth: number = this.width - 2;\r\n        var labelColor: string = this._itemColors[2];\r\n        this._itemHeight = (this._itemHeight) ? this._itemHeight : this._itemSize + 6;\r\n        let _padding: string = (this.itemPadding) ? this.itemPadding : \"3,3,3,3\";\r\n        this._list.itemRender = this.itemRender || { type: \"Box\", child: [{ type: \"Label\", props: { name: \"label\", x: 1, padding: _padding, width: labelWidth, height: this._itemHeight, fontSize: this._itemSize, color: labelColor } }] };\r\n        this._list.repeatY = this._visibleNum;\r\n        this._list.refresh();\r\n    }\r\n\r\n    /**\r\n     * @en Handles mouse events on a list item. This method manages the visual state of the list item based on mouse interaction, such as hover and click.\r\n     * @param e The mouse event.\r\n     * @param index The index of the list item.\r\n     * @zh 处理列表项的鼠标事件。该方法根据鼠标交互（如悬停和点击）管理列表项的视觉状态。\r\n     * @param e 鼠标事件。\r\n     * @param index 列表项的索引。\r\n     */\r\n    protected onlistItemMouse(e: Event, index: number): void {\r\n        let type: string = e.type;\r\n        if (type === Event.MOUSE_OVER || type === Event.MOUSE_OUT) {\r\n            if (this._isCustomList) return;\r\n            let box = this._list.getCell(index);\r\n            if (!box) return;\r\n            let label: Label = (<Label>box.getChildByName(\"label\"));\r\n            if (label) {\r\n                if (type === Event.ROLL_OVER) {\r\n                    label.bgColor = this._itemColors[0];\r\n                    label.color = this._itemColors[1];\r\n                } else {\r\n                    label.bgColor = null;\r\n                    label.color = this._itemColors[2];\r\n                }\r\n            }\r\n        } else if (type === Event.CLICK) {\r\n            this.selectedIndex = index;\r\n            this.isOpen = false;\r\n        }\r\n    }\r\n\r\n    private switchTo(value: boolean): void {\r\n        this.isOpen = value;\r\n    }\r\n\r\n    /**\r\n     * @en Changing the open state of the drop-down list.\r\n     * @zh 更改下拉列表的打开状态。\r\n     */\r\n    protected changeOpen(): void {\r\n        this.isOpen = !this._isOpen;\r\n    }\r\n\r\n    /**\r\n     * @en Updates the items in the list and adjusts its visual representation. This method recalculates the list height, updates the background if it's not a custom list, and populates the list with new data.\r\n     * @zh 更新列表中的项目并调整其视觉表现。此方法重新计算列表高度，如果不是自定义列表，则更新背景，并使用新数据填充列表。\r\n     */\r\n    protected changeItem(): void {\r\n        this._itemChanged = false;\r\n        //显示边框\r\n        this._listHeight = this._labels.length > 0 ? Math.min(this._visibleNum, this._labels.length) * this._itemHeight : this._itemHeight;\r\n        if (!this._isCustomList) {\r\n            //填充背景\r\n            var g: Graphics = this._list.graphics;\r\n            g.clear();\r\n            g.drawRect(0, 0, this.width - 1, this._listHeight, this._itemColors[4], this._itemColors[3]);\r\n        }\r\n\r\n        //填充数据\r\n        let a: any[] = this._list.array || [];\r\n        a.length = 0;\r\n        for (let i = 0, n = this._labels.length; i < n; i++) {\r\n            a.push({ label: this._labels[i] });\r\n        }\r\n        this._list.size(this.width, this._listHeight);\r\n        this._list.array = a;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private changeSelected(): void {\r\n        this._button.label = this.selectedLabel;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the component and release the memory occupied by the component. Destroy the child objects of the component at the same time by default.\r\n     * @param destroyChild Whether to simultaneously destroy the child objects of the component. The default value is true.\r\n     * @zh 销毁组件并释放组件所占用的内存。默认会同时销毁组件的子对象。\r\n     * @param destroyChild 是否同时销毁组件的子对象。默认值为true。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        ILaya.stage.off(Event.MOUSE_DOWN, this, this.removeList);\r\n        ILaya.stage.off(Event.MOUSE_WHEEL, this, this._onStageMouseWheel);\r\n        super.destroy(destroyChild);\r\n        this._button && this._button.destroy(destroyChild);\r\n        this._list && this._list.destroy(destroyChild);\r\n        this._button = null;\r\n        this._list = null;\r\n        this._itemColors = null;\r\n        this._itemPadding = null;\r\n        this._itemHeight = null;\r\n        this._labels = null;\r\n        this._selectHandler = null;\r\n        this._defaultLabel = null;\r\n    }\r\n\r\n    /**\r\n     * @en Set the data source of the ComboBox.\r\n     * @param value The new data source.\r\n     * @zh 设置下拉选项框的数据源。\r\n     * @param value 新的数据源。\r\n     */\r\n    set_dataSource(value: any): void {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.selectedIndex = parseInt(value as string);\r\n        else if (value instanceof Array)\r\n            this.labels = ((<any[]>value)).join(\",\");\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n}","import { Scene } from \"../display/Scene\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { ILaya } from \"../../ILaya\";\r\n\r\n/**\r\n * @en The View class represents a view component.\r\n * - In LayaAir 2.x, View inherited from the Scene class. However, in 3.x, Scene represents a broader concept encompassing both 2D and 3D. Therefore, in 3.x, understanding Scene as just a 2D scene view node is not appropriate. Scene has been retained for compatibility purposes, but the concept of a scene should be understood as encompassing both 2D and 3D scene data files.\r\n * @zh View 是一个视图类。\r\n * - 在 LayaAir 2.x 里，View 继承自 Scene 类，但在 3.x 里，Scene 是一个 2D+3D 的场景概念，所以在 3.x 里，把 Scene 类理解为场景是不合理的。Scene 是为了兼容而保留的 2D 场景视图节点，请忽略引擎中的 Scene 概念，场景概念统一理解为包含了 2D 与 3D 的场景数据文件。\r\n */\r\nexport class View extends Scene {\r\n\r\n    /**\r\n     * @en Compatible with older versions.\r\n     * @zh 兼容老版本\r\n     */\r\n    static uiMap: any = {};\r\n\r\n    /**\r\n     * @en Compatible with older versions.Registers UI configuration information. For example, it registers a page with the path \"test/TestPage\", where the UI content is a JSON generated by the IDE.\r\n     * @param url The path to the UI.\r\n     * @param json The UI content in JSON format.\r\n     * @zh 兼容老版本，注册UI配置信息。比如注册一个路径为\"test/TestPage\"的页面，UI内容是IDE生成的json\r\n     * @param\turl\t\tUI的路径\r\n     * @param\tjson\tUI内容\r\n     */\r\n    static regUI(url: string, json: any): void {\r\n        ILaya.loader.cacheRes(url, json);\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    _watchMap: any = {};\r\n\r\n    /**\r\n     * @en The data source. \r\n     * @zh 数据源。 \r\n     */\r\n    protected _dataSource: any;\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        super(false);   // 先不要createChildren 因为 this._widget还没有赋值\r\n\r\n        //3.0里View并不是Scene\r\n        this._scene = null;\r\n\r\n        this.createChildren();\r\n    }\r\n\r\n    changeData(key: string): void {\r\n        let arr: any[] = this._watchMap[key];\r\n        if (!arr) return;\r\n        for (let i = 0, n = arr.length; i < n; i++) {\r\n            let watcher: any = arr[i];\r\n            watcher.exe(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the data source for the control and updates the child components accordingly.\r\n     * @param value The new data source to be set.\r\n     * @zh 设置控件的数据源，并相应地更新子组件。\r\n     * @param value 要设置的新数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        for (let name in value) {\r\n            let comp = this.getChildByName(name);\r\n            if (comp instanceof UIComponent)\r\n                comp.dataSource = value[name];\r\n            else if (name in this && !((this as any)[name] instanceof Function))\r\n                (this as any)[name] = value[name];\r\n        }\r\n    }\r\n}","import { UIConfig } from \"./../../UIConfig\";\r\nimport { NodeFlags } from \"../Const\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Box } from \"./Box\"\r\nimport { Dialog } from \"./Dialog\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { Ease } from \"../utils/Ease\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { Tween } from \"../utils/Tween\"\r\nimport { ILaya } from \"../../ILaya\";\r\n\r\n/**\r\n * @en The `DialogManager` is a container for managing all dialog boxes, which are managed by the manager.\r\n * Opening and closing any dialog will trigger the manager's open and close events.\r\n * open event is used for any window after dispatching, and close event is used to dispatch events when closing any dialog.\r\n * The background transparency of the popup, whether the modal window closes when the edge is clicked, and whether the layer changes when the window is clicked can be set in UIConfig.\r\n * The layer of the popup can be changed by setting the dialog's zOrder property.\r\n * @zh DialogManager 对话框管理容器，所有的对话框都在该容器内，并且受管理器管理。\r\n * 任意对话框打开和关闭，都会触发管理类的 open 和 close 事件。\r\n * open事件用于任意窗口后调度，close事件用于关闭任意对话框时调度的事件。\r\n * 可以通过 UIConfig 设置弹出框背景透明度，模式窗口点击边缘是否关闭，点击窗口是否切换层次等。\r\n * 通过设置对话框的 zOrder 属性，可以更改弹出的层次。\r\n */\r\nexport class DialogManager extends Sprite {\r\n    /** \r\n     * @en Mask layer\r\n     * @zh 遮罩层。 \r\n     */\r\n    maskLayer: Sprite = new Sprite();\r\n    /** \r\n     * @en Lock screen layer.\r\n     * @zh 锁屏层。 \r\n     */\r\n    lockLayer: Sprite;\r\n\r\n    /**\r\n     * @en The global default popup effect for dialogs. You can set an effect to replace the default popup effect.\r\n     * If you do not want any effect, you can assign it to null.\r\n     * @zh 全局默认弹出对话框效果，可以设置一个效果代替默认的弹出效果，如果不想有任何效果，可以赋值为 null。\r\n     */\r\n    popupEffect = (dialog: Dialog) => {\r\n        dialog.scale(1, 1);\r\n        dialog._effectTween = Tween.from(dialog, { x: ILaya.stage.width / 2, y: ILaya.stage.height / 2, scaleX: 0, scaleY: 0 }, 300, Ease.backOut, Handler.create(this, this.doOpen, [dialog]), 0, false, false);\r\n    }\r\n\r\n    /**\r\n     * @en The global default close effect for dialogs. You can set an effect to replace the default close effect.\r\n     * If you do not want any effect, you can assign it to null.\r\n     * @zh 全局默认关闭对话框效果，可以设置一个效果代替默认的关闭效果，如果不想有任何效果，可以赋值为 null。\r\n     */\r\n    closeEffect = (dialog: Dialog) => {\r\n        dialog._effectTween = Tween.to(dialog, { x: ILaya.stage.width / 2, y: ILaya.stage.height / 2, scaleX: 0, scaleY: 0 }, 300, Ease.strongOut, Handler.create(this, this.doClose, [dialog]), 0, false, false);\r\n    }\r\n\r\n    /** \r\n     * @en Sets the global default opening effect for the dialog. You can specify an effect to replace the default opening effect.\r\n     * If you do not want any effect, it can be set to null.\r\n     * @zh 设置全局默认的对话框打开效果。可以指定一个效果来替代默认的打开效果，如果不想有任何效果，可以设置为 null。\r\n     */\r\n    popupEffectHandler: Handler = new Handler(this, this.popupEffect);\r\n\r\n\r\n    /** \r\n     * @en Sets the global default closing effect for the dialog. You can specify an effect to replace the default closing effect.\r\n     * If you do not want any effect, it can be set to null.\r\n     * @zh 设置全局默认的对话框关闭效果。可以指定一个效果来替代默认的关闭效果，如果不想有任何效果，可以设置为 null。\r\n     */\r\n    closeEffectHandler: Handler = new Handler(this, this.closeEffect);\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n        this.mouseEnabled = this.maskLayer.mouseEnabled = true;\r\n        this.zOrder = 1000;\r\n        ILaya.stage.addChild(this);\r\n        ILaya.stage.on(Event.RESIZE, this, this._onResize);\r\n        if (UIConfig.closeDialogOnSide) this.maskLayer.on(\"click\", this, this._closeOnSide);\r\n        this._onResize(null);\r\n    }\r\n\r\n    private _closeOnSide(): void {\r\n        var dialog: Dialog = (<Dialog>this.getChildAt(this.numChildren - 1));\r\n        if (dialog instanceof Dialog) dialog.close(\"side\");\r\n    }\r\n\r\n    private _onResize(e: Event = null): void {\r\n        var width: number = this.maskLayer.width = ILaya.stage.width;\r\n        var height: number = this.maskLayer.height = ILaya.stage.height;\r\n        if (this.lockLayer) this.lockLayer.size(width, height);\r\n\r\n        this.maskLayer.graphics.clear(true);\r\n        this.maskLayer.graphics.drawRect(0, 0, width, height, UIConfig.popupBgColor);\r\n        this.maskLayer.alpha = UIConfig.popupBgAlpha;\r\n\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var item: Dialog = (<Dialog>this.getChildAt(i));\r\n            if (item.isPopupCenter) this._centerDialog(item);\r\n        }\r\n    }\r\n\r\n    private _centerDialog(dialog: Dialog): void {\r\n        dialog.x = Math.round(((ILaya.stage.width - dialog.width) >> 1) + dialog.pivotX);\r\n        dialog.y = Math.round(((ILaya.stage.height - dialog.height) >> 1) + dialog.pivotY);\r\n    }\r\n\r\n    private _clearDialogEffect(dialog: Dialog): void {\r\n        if (dialog._effectTween) {\r\n            Tween.clear(dialog._effectTween);\r\n            dialog._effectTween = null;\r\n        }\r\n    }\r\n\r\n    private _closeAll(): void {\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var item: Dialog = (<Dialog>this.getChildAt(i));\r\n            if (item && item.close != null) {\r\n                this.doClose(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Checks and readjusts the mask layer after a change in the z-order of dialogs.\r\n     * @zh 发生层次改变后，重新检查遮罩层是否正确\r\n     */\r\n    _checkMask(): void {\r\n        if (this._destroyed) return;\r\n        this.maskLayer.removeSelf();\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var dialog: Dialog = (<Dialog>this.getChildAt(i));\r\n            if (dialog && dialog.isModal) {\r\n                //trace(numChildren,i);\r\n                this.addChildAt(this.maskLayer, i);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the lock view. If no value is provided, the lock layer will be empty and won't display anything.\r\n     * @param value The UIComponent to display on the lock layer, or null for an empty lock layer.\r\n     * @zh 设置锁定界面，如果参数为空则什么都不显示。\r\n     * @param value 要在锁定层上显示的UI组件，空锁定层为null。\r\n     */\r\n    setLockView(value: UIComponent): void {\r\n        if (!this.lockLayer) {\r\n            this.lockLayer = new Box();\r\n            this.lockLayer.mouseEnabled = true;\r\n            this.lockLayer.size(ILaya.stage.width, ILaya.stage.height);\r\n        }\r\n        this.lockLayer.removeChildren();\r\n        if (value) {\r\n            value.centerX = value.centerY = 0;\r\n            this.lockLayer.addChild(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Opens a dialog.\r\n     * @param dialog The Dialog instance to be displayed.\r\n     * @param closeOther Whether to close other dialogs. If true, other dialogs will be closed.\r\n     * @param showEffect Whether to show the popup effect.\r\n     * @zh 打开对话框。\r\n     * @param dialog 需要显示的对话框 Dialog 实例。\r\n     * @param closeOther 是否关闭其他对话框。若为 true，则关闭其他对话框。\r\n     * @param showEffect 是否显示弹出效果。\r\n     */\r\n    open(dialog: Dialog, closeOther: boolean = false, showEffect: boolean = false): void {\r\n        if (closeOther) this._closeAll();\r\n        this._clearDialogEffect(dialog);\r\n        if (dialog.isPopupCenter) this._centerDialog(dialog);\r\n        this.addChild(dialog);\r\n        if (dialog.isModal || this._getBit(NodeFlags.HAS_ZORDER)) ILaya.timer.callLater(this, this._checkMask);\r\n        if (showEffect && dialog.popupEffect != null) dialog.popupEffect.runWith(dialog);\r\n        else this.doOpen(dialog);\r\n        this.event(Event.OPEN);\r\n    }\r\n\r\n    /**\r\n     * @en Executes the opening of a dialog.\r\n     * @param dialog The Dialog instance that needs to be opened.\r\n     * @zh 执行打开对话框操作。\r\n     * @param dialog 需要打开的对话框 Dialog 实例。\r\n     */\r\n    doOpen(dialog: Dialog): void {\r\n        dialog.onOpened(dialog._param);\r\n    }\r\n\r\n    /**\r\n     * @en Locks all layers, displays loading information, and prevents double-clicking.\r\n     * @param value If true, the lock layer is shown, otherwise it is hidden.\r\n     * @zh 锁定所有层，显示加载信息，防止双击。\r\n     * @param value 如果为true，则显示锁定层，否则隐藏锁定层。\r\n     */\r\n    lock(value: boolean): void {\r\n        if (this.lockLayer) {\r\n            if (value) this.addChild(this.lockLayer);\r\n            else this.lockLayer.removeSelf();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Closes the dialog.\r\n     * @param dialog The Dialog instance that needs to be closed.\r\n     * @zh 关闭对话框。\r\n     * @param dialog 需要关闭的对话框 Dialog 实例。\r\n     */\r\n    close(dialog: Dialog): void {\r\n        this._clearDialogEffect(dialog);\r\n        if (dialog.isShowEffect && dialog.closeEffect != null) dialog.closeEffect.runWith([dialog]);\r\n        else this.doClose(dialog);\r\n        this.event(Event.CLOSE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Executes the closing of a dialog.\r\n     * @param dialog The Dialog instance that needs to be closed.\r\n     * @zh 执行关闭对话框操作。\r\n     * @param dialog 需要关闭的对话框 Dialog 实例。\r\n     */\r\n    doClose(dialog: Dialog): void {\r\n        dialog.removeSelf();\r\n        dialog.isModal && this._checkMask();\r\n        dialog.closeHandler && dialog.closeHandler.runWith(dialog.closeType);\r\n        dialog.onClosed(dialog.closeType);\r\n        if (dialog.autoDestroyAtClosed) dialog.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en Closes all dialogs.\r\n     * @zh 关闭所有对话框。\r\n     */\r\n    closeAll(): void {\r\n        this._closeAll();\r\n        this.event(Event.CLOSE);\r\n    }\r\n\r\n    /**\r\n     * @en Gets all dialogs by group name.\r\n     * @param group The name of the group.\r\n     * @returns An array of dialogs that belong to the specified group.\r\n     * @zh 根据组名获取所有对话框。\r\n     * @param group 组名。\r\n     * @returns 属于指定组的对话框数组。\r\n     */\r\n    getDialogsByGroup(group: string): any[] {\r\n        var arr: any[] = [];\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var item: Dialog = (<Dialog>this.getChildAt(i));\r\n            if (item && item.group === group) {\r\n                arr.push(item);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * @en Closes all popups by group name.\r\n     * @param group The name of the group to close.\r\n     * @returns An array of dialogs that have been closed.\r\n     * @zh 根据组名关闭所有弹出框。\r\n     * @param group 需要关闭的组名。\r\n     * @returns 已关闭的对话框数组。\r\n     */\r\n    closeByGroup(group: string): any[] {\r\n        var arr: any[] = [];\r\n        for (var i: number = this.numChildren - 1; i > -1; i--) {\r\n            var item: Dialog = (<Dialog>this.getChildAt(i));\r\n            if (item && item.group === group) {\r\n                item.close();\r\n                arr.push(item);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n}","import { View } from \"./View\";\r\nimport { DialogManager } from \"./DialogManager\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Button } from \"./Button\";\r\nimport { UIComponent } from \"./UIComponent\";\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Rectangle } from \"../maths/Rectangle\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { Tween } from \"../utils/Tween\"\r\n\r\n/**\r\n * @en The `Dialog` component is a pop-up dialog box that implements the functionality of popping up, dragging, and modal windows.\r\n * You can set the background transparency of the pop-up box through the `UIConfig`, and whether to close the window when clicking the edge in modal mode.\r\n * By setting the `zOrder` property, you can change the popup hierarchy.\r\n * By setting the `popupEffect` and `closeEffect`, you can set the popup and close effects. If you don't want any popup or close effects, you can set the aforementioned properties to empty.\r\n * @zh `Dialog` 组件是一个弹出对话框，实现对话框弹出，拖动，模式窗口功能。\r\n * 可以通过 `UIConfig` 设置弹出框背景透明度，模式窗口点击边缘是否关闭等。\r\n * 通过设置 `zOrder` 属性，可以更改弹出的层次。\r\n * 通过设置 `popupEffect` 和 `closeEffect` 可以设置弹出效果和关闭效果，如果不想有任何弹出关闭效果，可以设置前述属性为空。\r\n */\r\nexport class Dialog extends View {\r\n    /**\r\n     * @en If a button in the dialog is named `close`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `close`，点击此按钮则会关闭对话框。\r\n     */\r\n    static CLOSE: string = \"close\";\r\n    /**\r\n     * @en If a button in the dialog is named `cancel`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `cancel`，点击此按钮则会关闭对话框。\r\n     */\r\n    static CANCEL: string = \"cancel\";\r\n    /**\r\n     * @en If a button in the dialog is named `sure`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `sure`，点击此按钮则会关闭对话框。\r\n     */\r\n    static SURE: string = \"sure\";\r\n    /**\r\n     * @en If a button in the dialog is named `no`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `no`，点击此按钮则会关闭对话框。\r\n     */\r\n    static NO: string = \"no\";\r\n    /**\r\n     * @en If a button in the dialog is named `yes`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `yes`，点击此按钮则会关闭对话框。\r\n     */\r\n    static YES: string = \"yes\";\r\n    /**\r\n     * @en If a button in the dialog is named `ok`, clicking it will close the dialog.\r\n     * @zh 对话框内的某个按钮命名为 `ok`，点击此按钮则会关闭对话框。\r\n     */\r\n    static OK: string = \"ok\";\r\n\r\n    /** 表示对话框管理器。*/\r\n    private static _manager: DialogManager;\r\n\r\n    /**\r\n     * @en\r\n     * The dialog management container. All dialogs are inside this container and managed by the manager.\r\n     * You can customize your own manager to change the window management process.\r\n     * Any dialog opened or closed will trigger the `open` and `close` events of the management class.\r\n     * @zh\r\n     * 对话框管理容器，所有的对话框都在该容器内，并且受管理器管理，可以自定义自己的管理器，来更改窗口管理的流程。\r\n     * 任意对话框打开和关闭，都会触发管理类的 `open` 和 `close` 事件。\r\n     */\r\n    static get manager(): DialogManager {\r\n        return Dialog._manager = Dialog._manager || new DialogManager();\r\n    }\r\n\r\n    static set manager(value: DialogManager) {\r\n        Dialog._manager = value;\r\n    }\r\n\r\n    /**\r\n     * @en Set the lock view. Display the lock view before the interface is ready, and remove the lock layer after it is ready.\r\n     * If it is empty, nothing will be displayed.\r\n     * @param view The content of the lock view.\r\n     * @zh 设置锁定界面，在界面未准备好前显示锁定界面，准备完毕后则移除锁定层，如果为空则什么都不显示\r\n     * @param view 锁定界面内容\r\n     */\r\n    static setLockView(view: UIComponent): void {\r\n        Dialog.manager.setLockView(view);\r\n    }\r\n\r\n    /**\r\n     * @en Lock all layers, display loading information, and prevent the content below from being clicked.\r\n     * @param value Whether to lock.\r\n     * @zh 锁定所有层，显示加载条信息，防止下面内容被点击。\r\n     * @param value 是否锁定\r\n     */\r\n    static lock(value: boolean): void {\r\n        Dialog.manager.lock(value);\r\n    }\r\n\r\n    /**\r\n     * @en Close all dialogs.\r\n     * @zh 关闭所有对话框。\r\n     */\r\n    static closeAll(): void {\r\n        Dialog.manager.closeAll();\r\n    }\r\n\r\n    /**\r\n     * @en Get the dialog collection by group.\r\n     * @param group The group name.\r\n     * @returns The dialog array.\r\n     * @zh 根据组获取对话框集合。\r\n     * @param group 组名称\r\n     * @returns 对话框数组\r\n     */\r\n    static getDialogsByGroup(group: string): any[] {\r\n        return Dialog.manager.getDialogsByGroup(group);\r\n    }\r\n\r\n    /**\r\n     * @en Close all pop-up boxes by group.\r\n     * @param group The group name that needs to be closed.\r\n     * @returns The closed dialogs.\r\n     * @zh 根据组关闭所有弹出框。\r\n     * @param group 需要关闭的组名称\r\n     * @returns 关闭的对话框集合\r\n     */\r\n    static closeByGroup(group: string): any[] {\r\n        return Dialog.manager.closeByGroup(group);\r\n    }\r\n\r\n    private _dragArea: Rectangle;\r\n    /**@internal */\r\n    _param: any;\r\n    /**@internal */\r\n    _effectTween: Tween;\r\n\r\n    /**\r\n     * @en The handler function that will be triggered when the dialog is closed.\r\n     * The callback function parameter is the button name clicked by the user, of type `String`.\r\n     * @zh 对话框被关闭时会触发的回调函数处理器。\r\n     * 回调函数参数为用户点击的按钮名字name:String。\r\n     */\r\n    closeHandler: Handler;\r\n    /**\r\n     * @en The popup effect of the dialog. You can set an effect to replace the default popup effect.\r\n     * If you don't want any effect, you can set it to `null`.\r\n     * The default global popup effect can be set via `manager.popupEffect`.\r\n     * @zh 弹出对话框效果，可以设置一个效果代替默认的弹出效果，如果不想有任何效果，可以赋值为null。\r\n     * 全局默认弹出效果可以通过manager.popupEffect修改。\r\n     */\r\n    popupEffect: Handler;\r\n    /**\r\n     * @en The close effect of the dialog. You can set an effect to replace the default close effect.\r\n     * If you don't want any effect, you can set it to `null`.\r\n     * The default global close effect can be set via `manager.closeEffect`.\r\n     * @zh 关闭对话框效果，可以设置一个效果代替默认的关闭效果，如果不想有任何效果，可以赋值为null。\r\n     * 全局默认关闭效果可以通过manager.closeEffect修改。\r\n     */\r\n    closeEffect: Handler;\r\n    /**\r\n     * @en The dialog group name.\r\n     * @zh 组名称。\r\n     */\r\n    group: string;\r\n    /**\r\n     * @en Indicates whether it is a modal dialog.\r\n     * @zh 是否是模式窗口。\r\n     */\r\n    isModal: boolean;\r\n    /**\r\n     * @en Indicates whether to show popup effect.\r\n     * @zh 是否显示弹出效果。\r\n     */\r\n    isShowEffect: boolean = true;\r\n    /**\r\n     * @en Specifies whether the dialog is popped up at the center.\r\n     * If the value is `true`, the dialog will be centered. Otherwise, it will be displayed based on the object coordinates. The default value is `true`.\r\n     * @zh 指定对话框是否居中弹出。\r\n     * 如果值为true，则居中弹出，否则，则根据对象坐标显示，默认为true。\r\n     */\r\n    isPopupCenter: boolean = true;\r\n    /**\r\n     * @en The close type. Automatically records the name of the clicked button when its name is `\"close\"`, `\"cancel\"`, `\"sure\"`, `\"no\"`, `\"yes\"`, or `\"no\"`.\r\n     * @zh 关闭类型，点击name为`\"close\"`，`\"cancel\"`，`\"sure\"`，`\"no\"`，`\"yes\"`，`\"no\"`的按钮时，会自动记录点击按钮的名称。\r\n     */\r\n    closeType: string;\r\n\r\n    /**\r\n     * @en Used to specify the drag area of the dialog. The default value is `\"0,0,0,0\"`.\r\n     * The format is a string of `\"x,y,width,height\"` that represents a rectangle. For example, `\"0,0,100,200\"`.\r\n     * @zh 用来指定对话框的拖拽区域。默认值为 `\"0,0,0,0\"`。\r\n     * 格式：构成一个矩形所需的 x,y,width,heith 值，用逗号连接为字符串。例如：\"0,0,100,200\"。\r\n     */\r\n    get dragArea(): string {\r\n        if (this._dragArea) return this._dragArea.toString();\r\n        return null;\r\n    }\r\n    set dragArea(value: string) {\r\n        if (value) {\r\n            var a: any[] = UIUtils.fillArray([0, 0, 0, 0], value, Number);\r\n            this._dragArea = new Rectangle(a[0], a[1], a[2], a[3]);\r\n            this.on(Event.MOUSE_DOWN, this, this._onMouseDown);\r\n        } else {\r\n            this._dragArea = null;\r\n            this.off(Event.MOUSE_DOWN, this, this._onMouseDown);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The display status of the pop-up box. If the pop-up box is being displayed, it is `true`; otherwise, it is `false`.\r\n     * @zh 弹出框的显示状态。如果弹框处于显示中，则为 `true`，否则为 `false`。\r\n     */\r\n    get isPopup(): boolean {\r\n        return this.parent != null;\r\n    }\r\n\r\n    /**\r\n     * @en The z-order of the dialog.\r\n     * @zh 对话框的层级。\r\n     */\r\n    get zOrder() {\r\n        return super.zOrder;\r\n    }\r\n    set zOrder(value: number) {\r\n        super.zOrder = value;\r\n        Dialog.manager._checkMask();\r\n    }\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n        this.popupEffect = Dialog.manager.popupEffectHandler;\r\n        this.closeEffect = Dialog.manager.closeEffectHandler;\r\n        this._dealDragArea();\r\n        this.on(Event.CLICK, this, this._onClick);\r\n    }\r\n\r\n    /** 提取拖拽区域*/\r\n    protected _dealDragArea(): void {\r\n        var dragTarget: Sprite = (<Sprite>this.getChildByName(\"drag\"));\r\n        if (dragTarget) {\r\n            this.dragArea = dragTarget._x + \",\" + dragTarget._y + \",\" + dragTarget.width + \",\" + dragTarget.height;\r\n            dragTarget.removeSelf();\r\n        }\r\n    }\r\n    private _onMouseDown(e: Event): void {\r\n        var point: Point = this.getMousePoint();\r\n        if (this._dragArea.contains(point.x, point.y)) this.startDrag();\r\n        else this.stopDrag();\r\n    }\r\n\r\n    /**\r\n     * @en Handle the click event for the dialog box. Close the dialog box based on the button name.\r\n     * @zh 处理对话框的点击事件。根据按钮的名称关闭对话框。\r\n     * @param e 鼠标事件。\r\n     */\r\n    protected _onClick(e: Event): void {\r\n        var btn: Button = (<Button>e.target);\r\n        if (btn) {\r\n            switch (btn.name) {\r\n                case Dialog.CLOSE:\r\n                case Dialog.CANCEL:\r\n                case Dialog.SURE:\r\n                case Dialog.NO:\r\n                case Dialog.OK:\r\n                case Dialog.YES:\r\n                    this.close(btn.name);\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Open the dialog.\r\n     * @param closeOther Whether to close other dialogs. If the value is `true`, other dialogs will be closed. The default value is `true`.\r\n     * @param param The parameters to pass to the dialog.\r\n     * @zh 打开对话框。\r\n     * @param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。\r\n     * @param param 传递给对话框的参数。\r\n     */\r\n    open(closeOther: boolean = true, param: any = null): void {\r\n        this._dealDragArea();\r\n        this._param = param;\r\n        Dialog.manager.open(this, closeOther, this.isShowEffect);\r\n        Dialog.manager.lock(false);\r\n    }\r\n\r\n    /**\r\n     * @en Close the dialog.\r\n     * @param type The reason for closing. It will be passed to the `onClosed` function.\r\n     * @zh 关闭对话框。\r\n     * @param type 关闭的原因，会传递给onClosed函数\r\n     * @override\r\n     */\r\n    close(type: string = null): void {\r\n        this.closeType = type;\r\n        Dialog.manager.close(this);\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the dialog.\r\n     * @param destroyChild Whether to destroy the child objects as well.\r\n     * @zh 销毁对话框。\r\n     * @param destroyChild 是否销毁子对象。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this.closeHandler = null;\r\n        this.popupEffect = null;\r\n        this.closeEffect = null;\r\n        this._dragArea = null;\r\n        super.destroy(destroyChild);\r\n        Dialog.manager._checkMask();\r\n    }\r\n\r\n    /**\r\n     * @en Display the dialog (non-modal).\r\n     * @param closeOther Whether to close other dialogs. If the value is `true`, other dialogs will be closed.\r\n     * @param showEffect Whether to show pop-up effect.\r\n     * @zh 显示对话框（以非模式窗口方式显示）。\r\n     * @param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。\r\n     * @param showEffect 是否显示弹出效果\r\n     */\r\n    show(closeOther: boolean = false, showEffect: boolean = true): void {\r\n        this._open(false, closeOther, showEffect);\r\n    }\r\n\r\n    /**\r\n     * @en Display the dialog (modal).\r\n     * @param closeOther Whether to close other dialogs. If the value is `true`, other dialogs will be closed.\r\n     * @param showEffect Whether to show pop-up effect.\r\n     * @zh 显示对话框（以模式窗口方式显示）。\r\n     * @param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。\r\n     * @param showEffect 是否显示弹出效果\r\n     */\r\n    popup(closeOther: boolean = false, showEffect: boolean = true): void {\r\n        this._open(true, closeOther, showEffect);\r\n    }\r\n\r\n    protected _open(modal: boolean, closeOther: boolean, showEffect: boolean): void {\r\n        this.isModal = modal;\r\n        this.isShowEffect = showEffect;\r\n        Dialog.manager.lock(true);\r\n        this.open(closeOther);\r\n    }\r\n}","import { Event } from \"../events/Event\"\r\nimport { Texture } from \"../resource/Texture\"\r\nimport { Clip } from \"./Clip\"\r\n\r\n/**\r\n * @en Font clipping for simplified bitmap fonts, which can be used by setting a slice image and text content, similar to bitmap fonts.\r\n * Usage: Set the skin for the bitmap font and the corresponding font content sheet (if multiple lines are needed, use spaces for line breaks). \r\n * @zh 字体切片，简化版的位图字体，只需设置一个切片图片和文字内容即可使用，效果同位图字体\r\n * 使用方式：设置位图字体皮肤skin，设置皮肤对应的字体内容sheet（如果多行，可以使用空格换行）\r\n * 示例：\r\n * fontClip.skin = \"font1.png\";//设置皮肤\r\n * fontClip.sheet = \"abc123 456\";//设置皮肤对应的内容，空格换行。此皮肤为2行5列（显示时skin会被等分为2行5列），第一行对应的文字为\"abc123\"，第二行为\"456\"\r\n * fontClip.value = \"a1326\";//显示\"a1326\"文字\r\n */\r\nexport class FontClip extends Clip {\r\n    /**\r\n     * @en Internal use. The array of values.\r\n     * @zh 内部使用，数值数组。\r\n    */\r\n    protected _valueArr: string = '';\r\n    /**\r\n     * @en Internal use. The array of text content.\r\n     * @zh 内部使用，文字内容数组。\r\n     */\r\n    protected _indexMap: Record<string, number> = null;\r\n    /**\r\n     * @en Internal use. The content of the font clip.\r\n     * @zh 内部使用，字体切片内容。\r\n     */\r\n    protected _sheet: string = null;\r\n    /**\r\n     * @en Internal use. The direction.\r\n     * @zh 内部使用，方向。\r\n     */\r\n    protected _direction: string = \"horizontal\";\r\n    /**\r\n     * @en Internal use. The gap on the X-axis.\r\n     * @zh 内部使用，X轴方向间隙。\r\n     */\r\n    protected _spaceX: number = 0;\r\n    /**\r\n     * @en Internal use. The gap on the Y-axis.\r\n     * @zh 内部使用，Y轴方向间隙。\r\n     */\r\n    protected _spaceY: number = 0;\r\n    /**\r\n     * @en Internal use. The horizontal alignment method.\r\n     * @zh 内部使用，水平对齐方式。\r\n     */\r\n    private _align: string = \"left\";\r\n    /**\r\n     * @en Internal use. The width of the displayed text.\r\n     * @zh 内部使用，显示文字的宽度。\r\n     */\r\n    private _wordsW: number = 0;\r\n    /**\r\n     * @en Internal use. The height of the displayed text.\r\n     * @zh 内部使用，显示文字的高度。\r\n     */\r\n    private _wordsH: number = 0;\r\n    \r\n    /**\r\n     * @en Font clip index.\r\n     * @zh 字体切片索引。\r\n     */\r\n    get index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    set index(value: number) {\r\n        this._index = value;\r\n        ////屏蔽Clip类操作\r\n    }\r\n\r\n    /**\r\n     * @en The content of the font clip, with spaces representing line breaks.\r\n     * @zh 字体切片的内容，空格表示换行符。\r\n     */\r\n    get sheet(): string {\r\n        return this._sheet;\r\n    }\r\n\r\n    set sheet(value: string) {\r\n        value += \"\";\r\n        this._sheet = value;\r\n        //根据空格换行\r\n        var arr: any[] = value.split(\" \");\r\n        this._clipX = String(arr[0]).length;\r\n        this.clipY = arr.length;\r\n\r\n        this._indexMap = {};\r\n        for (var i: number = 0; i < this._clipY; i++) {\r\n            var line: any[] = arr[i].split(\"\");\r\n            for (var j: number = 0, n: number = line.length; j < n; j++) {\r\n                this._indexMap[line[j]] = i * this._clipX + j;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Gets the display content of the font clip.\r\n     * @zh 字体切片的显示内容。\r\n     */\r\n    get value(): string {\r\n        if (!this._valueArr) return \"\";\r\n        return this._valueArr;\r\n    }\r\n\r\n    set value(value: string) {\r\n        value += \"\";\r\n        this._valueArr = value;\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en Layout direction of the font clip characters.\r\n     * The default value is \"horizontal\".\r\n     * values:\r\n     * \"horizontal\": Indicates a horizontal layout.\r\n     * \"vertical\": Indicates a vertical layout.\r\n     * @zh 字体切片字符的布局方向。\r\n     * 默认值为 \"horizontal\"。\r\n     * 取值：\r\n     * \"horizontal\": 表示水平布局。\r\n     * \"vertical\": 表示垂直布局。\r\n     */\r\n    get direction(): string {\r\n        return this._direction;\r\n    }\r\n\r\n    set direction(value: string) {\r\n        this._direction = value;\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en The X-axis spacing between characters in the font clip.\r\n     * @zh 字体切片中字符的X轴方向间隙。\r\n     */\r\n    get spaceX(): number {\r\n        return this._spaceX;\r\n    }\r\n\r\n    set spaceX(value: number) {\r\n        this._spaceX = value;\r\n        if (this._direction === \"horizontal\") this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en The Y-axis spacing between characters in the font clip.\r\n     * @zh 字体切片中字符的Y轴方向间隙。\r\n     */\r\n    get spaceY(): number {\r\n        return this._spaceY;\r\n    }\r\n\r\n    set spaceY(value: number) {\r\n        this._spaceY = value;\r\n        if (!(this._direction === \"horizontal\")) this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en Horizontal alignment\r\n     * @zh 水平对齐方式。\r\n     */\r\n    get align(): string {\r\n        return this._align;\r\n    }\r\n    set align(v: string) {\r\n        this._align = v;\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en Creates an instance of the FontClip.\r\n     * @param skin The skin path for the font clip.\r\n     * @param sheet The content string for the font clip, with spaces representing line breaks.\r\n     * @zh 创建 FontClip 实例。\r\n     * @param skin 字体切片的皮肤路径。\r\n     * @param sheet 字体切片的内容字符串，空格代表换行。\r\n     */\r\n    constructor(skin: string = null, sheet: string = null) {\r\n        super();\r\n        if (skin) this.skin = skin;\r\n        if (sheet) this.sheet = sheet;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc \r\n     * @override\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc \r\n     * @override\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Resource loading completed\r\n     * @zh 资源加载完毕\r\n     */\r\n    protected loadComplete(url: string, img: Texture): void {\r\n        super.loadComplete(url, img);\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Implementation logic after font clip property changes\r\n     * @zh 字体切片属性变化后的实现逻辑\r\n     */\r\n    protected changeValue(): void {\r\n        if (!this._sources) return;\r\n        if (!this._valueArr) return;\r\n        this.graphics.clear(true);\r\n        let texture: Texture;\r\n        texture = this._sources[0];\r\n        if (!texture) return;\r\n        var isHorizontal: boolean = (this._direction === \"horizontal\");\r\n        if (isHorizontal) {\r\n            this._wordsW = this._valueArr.length * (texture.sourceWidth + this.spaceX);\r\n            this._wordsH = texture.sourceHeight;\r\n        } else {\r\n            this._wordsW = texture.sourceWidth;\r\n            this._wordsH = (texture.sourceHeight + this.spaceY) * this._valueArr.length;\r\n        }\r\n        let dX: number = 0;\r\n        if (this._isWidthSet) {\r\n            switch (this._align) {\r\n                case \"center\":\r\n                    dX = 0.5 * (this._width - this._wordsW);\r\n                    break;\r\n                case \"right\":\r\n                    dX = this._width - this._wordsW;\r\n                    break;\r\n                default:\r\n                    dX = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0, sz = this._valueArr.length; i < sz; i++) {\r\n            let index = this._indexMap[this._valueArr.charAt(i)];\r\n            texture = this._sources[index];\r\n            if (!texture)\r\n                continue;\r\n\r\n            if (isHorizontal)\r\n                this.graphics.drawImage(texture, dX + i * (texture.sourceWidth + this.spaceX), 0, texture.sourceWidth, texture.sourceHeight);\r\n            else\r\n                this.graphics.drawImage(texture, 0 + dX, i * (texture.sourceHeight + this.spaceY), texture.sourceWidth, texture.sourceHeight);\r\n        }\r\n\r\n        if (!this._isWidthSet) {\r\n            this._widget.resetLayoutX();\r\n            this.callLater(this._sizeChanged);\r\n        }\r\n        if (!this._isHeightSet) {\r\n            this._widget.resetLayoutY();\r\n            this.callLater(this._sizeChanged);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en the width of the font clip.\r\n     * @zh 获得字体切片的宽度。\r\n     */\r\n    protected measureWidth(): number {\r\n        return this._wordsW;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en the height of the font clip.\r\n     * @zh 获得字体切片的高度。\r\n     */\r\n    protected measureHeight(): number {\r\n        return this._wordsH;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @en Destroys the FontClip instance and optionally its children.\r\n     * @param destroyChild  Whether to destroy the children of the FontClip.\r\n     * @zh 销毁字体切片实例及其子项（如果指定）。\r\n     * @param destroyChild 是否销毁字体切片的子节点。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._valueArr = null;\r\n        this._indexMap = null;\r\n        this.graphics.clear(true);\r\n\r\n        super.destroy(destroyChild);\r\n    }\r\n}","import { Box } from \"./Box\";\r\nimport { Node } from \"../display/Node\"\r\nimport { Event } from \"../events/Event\"\r\n\r\n/**\r\n * @en LayoutBox is a layout container class.\r\n * @zh LayoutBox 是一个布局容器类。\r\n */\r\nexport class LayoutBox extends Box {\r\n    protected _space: number = 0;\r\n    protected _align: string = \"none\";\r\n    protected _itemChanged: boolean = false;\r\n\r\n    /**\r\n     * @en The space between child objects.\r\n     * @zh 子对象的间隔。\r\n     */\r\n    get space(): number {\r\n        return this._space;\r\n    }\r\n\r\n    set space(value: number) {\r\n        this._space = value;\r\n        this._setItemChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The alignment of child objects.\r\n     * @zh 子对象对齐方式。\r\n     */\r\n    get align(): string {\r\n        return this._align;\r\n    }\r\n\r\n    set align(value: string) {\r\n        this._align = value;\r\n        this._setItemChanged();\r\n    }\r\n\r\n    protected _setItemChanged(): void {\r\n        if (!this._itemChanged) {\r\n            this._itemChanged = true;\r\n            this.callLater(this.changeItems);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Change the layout of child objects.\r\n     * @zh 改变子对象的布局。\r\n     */\r\n    protected changeItems(): void {\r\n        this._itemChanged = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Sort the item list. Default sorting rules can be changed by overriding.\r\n     * @param items The item list.\r\n     * @zh 排序项目列表。可通过重写改变默认排序规则。\r\n     * @param items  项目列表。\r\n     */\r\n    protected sortItem(items: any[]): void {\r\n        if (items) items.sort(function (a: any, b: any): number { return a.y - b.y; });\r\n    }\r\n\r\n    private onResize(e: Event): void {\r\n        this._setItemChanged();\r\n    }\r\n\r\n    /** \r\n     * @en Adds a child object.\r\n     * @param child The child object to add.\r\n     * @returns The added child object.\r\n     * @zh 添加子节点对象。\r\n     * @param child 要添加的子节点对象。\r\n     * @returns 添加的子节点对象。\r\n    */\r\n    addChild<T extends Node>(child: T): T {\r\n        child.on(Event.RESIZE, this, this.onResize);\r\n        this._setItemChanged();\r\n        return super.addChild(child);\r\n    }\r\n\r\n    /** \r\n     * @en Adds a child object at a specified index position.\r\n     * @param child The child object to add.\r\n     * @param index The index position to add the child object.\r\n     * @returns The added child object.\r\n     * @zh 在指定的索引位置添加子节点对象。\r\n     * @param child 要添加的子节点对象。\r\n     * @param index 用于添加子节点对象的索引位置。\r\n     * @returns 添加的子节点对象。\r\n    */\r\n    addChildAt(child: Node, index: number): Node {\r\n        child.on(Event.RESIZE, this, this.onResize);\r\n        this._setItemChanged();\r\n        return super.addChildAt(child, index);\r\n    }\r\n\r\n    /**\r\n     * @en Removes a child object at a specified index position.\r\n     * @param index The index position of the child object.\r\n     * @returns The removed child object.\r\n     * @zh 删除指定索引位置的子节点对象。\r\n     * @param index 子节点对象的索引位置。\r\n     * @returns 删除的子节点对象。\r\n    */\r\n    removeChildAt(index: number): Node {\r\n        this.getChildAt(index).off(Event.RESIZE, this, this.onResize);\r\n        this._setItemChanged();\r\n        return super.removeChildAt(index);\r\n    }\r\n\r\n    /**\r\n     * @en Refresh\r\n     * @zh 刷新\r\n     */\r\n    refresh(): void {\r\n        this._setItemChanged();\r\n    }\r\n}","import { LayoutBox } from \"./LayoutBox\";\r\nimport { UIComponent } from \"./UIComponent\";\r\n\r\n/**\r\n * @en The `HBox` class is a horizontal layout container.\r\n * @zh `HBox` 是一个水平布局容器类。\r\n */\r\nexport class HBox extends LayoutBox {\r\n    /**\r\n     * @en No alignment.\r\n     * @zh 无对齐。\r\n     */\r\n    static NONE: string = \"none\";\r\n    /**\r\n     * @en Align to the top.\r\n     * @zh 居顶部对齐。\r\n     */\r\n    static TOP: string = \"top\";\r\n    /**\r\n     * @en Align to the center.\r\n     * @zh 居中对齐。\r\n     */\r\n    static MIDDLE: string = \"middle\";\r\n    /**\r\n     * @en Align to the bottom.\r\n     * @zh 居底部对齐。\r\n     */\r\n    static BOTTOM: string = \"bottom\";\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this.callLater(this.changeItems);\r\n    }\r\n    protected sortItem(items: any[]): void {\r\n        if (items) items.sort(function (a: any, b: any): number { return a.x - b.x; });\r\n    }\r\n\r\n    protected changeItems(): void {\r\n        this._itemChanged = false;\r\n        var items: any[] = [];\r\n        var maxHeight = 0;\r\n        for (let i = 0, n = this.numChildren; i < n; i++) {\r\n            let item = (<UIComponent>this.getChildAt(i));\r\n            if (item) {\r\n                item.x = 0;\r\n                items.push(item);\r\n                maxHeight = this._isHeightSet ? this._height : Math.max(maxHeight, item.height * item.scaleY);\r\n            }\r\n        }\r\n        this.sortItem(items);\r\n        let left = 0;\r\n        for (let i = 0, n = items.length; i < n; i++) {\r\n            let item = items[i];\r\n            item.x = left;\r\n            left += item.width * item.scaleX + this._space;\r\n            if (this._align == HBox.TOP) {\r\n                item.y = 0;\r\n            } else if (this._align == HBox.MIDDLE) {\r\n                item.y = (maxHeight - item.height * item.scaleY) * 0.5;\r\n            } else if (this._align == HBox.BOTTOM) {\r\n                item.y = maxHeight - item.height * item.scaleY;\r\n            }\r\n        }\r\n        this._sizeChanged();\r\n    }\r\n}","import { Slider } from \"./Slider\";\r\n\r\n/**\r\n * @en The HSlider control allows the user to select a value by moving a slider between the end points of the slider track.\r\n * The HSlider control is displayed horizontally. The slider track stretches from left to right, and the labels are displayed at the top or bottom of the track.\r\n * @zh 使用 HSlider 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。\r\n * HSlider 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。\r\n */\r\nexport class HSlider extends Slider {\r\n\r\n    /**\r\n     * @en Creates an instance of HSlider, and sets the direction to horizontal.\r\n     * @param skin The skin of the HSlider.\r\n     * @zh 创建Slider实例，设置滑动方向为水平，\r\n     * @param skin 皮肤纹理。\r\n     */\r\n    constructor(skin: string = null) {\r\n        super(skin);\r\n        this.isVertical = false;\r\n    }\r\n}","import { Box } from \"./Box\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { HScrollBar } from \"./HScrollBar\";\r\nimport { ScrollBar } from \"./ScrollBar\";\r\nimport { Node } from \"../display/Node\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Rectangle } from \"../maths/Rectangle\"\r\nimport { HideFlags } from \"../Const\";\r\nimport { ScrollType } from \"./Styles\";\r\n\r\n/**\r\n * @en Panel is a panel container class.\r\n * @zh Panel 是一个面板容器类。\r\n */\r\nexport class Panel extends Box {\r\n    protected _content: Box;\r\n    protected _vScrollBar: VScrollBar;\r\n    protected _hScrollBar: HScrollBar;\r\n    protected _scrollChanged: boolean;\r\n    protected _usedCache: string = null;\r\n    protected _elasticEnabled: boolean = false;\r\n    protected _scrollType: ScrollType = 0;\r\n    protected _vScrollBarSkin: string;\r\n    protected _hScrollBarSkin: string;\r\n\r\n    /**\r\n     * @en Creates an instance of Panel, and sets the width and height of it.\r\n     * @zh 创建一个`Panel`实例，属性 `width` 和 `height` 的默认值均为 100。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.width = this.height = 100;\r\n        //子对象缩放的情况下，优化会有问题，先屏蔽掉\r\n        //_content.optimizeScrollRect = true;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy this object.\r\n     * @param destroyChild Whether to destroy the child objects as well.\r\n     * @zh 销毁此对象。\r\n     * @param destroyChild 是否同时销毁子对象。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._content && this._content.destroy(destroyChild);\r\n        this._vScrollBar && this._vScrollBar.destroy(destroyChild);\r\n        this._hScrollBar && this._hScrollBar.destroy(destroyChild);\r\n        this._vScrollBar = null;\r\n        this._hScrollBar = null;\r\n        this._content = null;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy all child objects.\r\n     * @zh 销毁所有的子对象。\r\n     */\r\n    destroyChildren(): void {\r\n        this._content.destroyChildren();\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._content = new Box();\r\n        this._content.hideFlags = HideFlags.HideAndDontSave;\r\n        super.addChild(this._content);\r\n    }\r\n\r\n    /**\r\n     * @en Add a child object.\r\n     * @param child The child object to add.\r\n     * @returns The added child object.\r\n     * @zh 添加一个节点子对象。\r\n     * @param child 要添加的子节点对象。\r\n     * @returns 添加的子节点对象。\r\n     */\r\n    addChild<T extends Node>(child: T): T {\r\n        child.on(Event.RESIZE, this, this.onResize);\r\n        this._setScrollChanged();\r\n        return this._content.addChild(child);\r\n    }\r\n\r\n    /**\r\n    * @en Event handler for the child object's Event.RESIZE event.\r\n    * @zh 子对象的 Event.RESIZE 事件侦听处理函数。\r\n    */\r\n\r\n    private onResize(): void {\r\n        this._setScrollChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Add a child object at a specific index position.\r\n     * @param child The child object to add.\r\n     * @param index The index position to place the child at.\r\n     * @returns The child object that was added.\r\n     * @zh 在指定的索引位置添加一个子节点对象。\r\n     * @param child 要添加的子节点对象。\r\n     * @param index 子节点对象的索引位置。\r\n     * @returns 添加的子节点对象。\r\n     */\r\n    addChildAt(child: Node, index: number): Node {\r\n        child.on(Event.RESIZE, this, this.onResize);\r\n        this._setScrollChanged();\r\n        return this._content.addChildAt(child, index);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a child object.\r\n     * @param child The child object to remove.\r\n     * @returns The removed child object.\r\n     * @zh 移除一个子节点对象。\r\n     * @param child 要移除的子节点对象。\r\n     * @returns 移除的子节点对象。\r\n     */\r\n    removeChild(child: Node): Node {\r\n        child.off(Event.RESIZE, this, this.onResize);\r\n        this._setScrollChanged();\r\n        if (child._parent == this && this._children) {\r\n            let index = this._children.indexOf(child);\r\n            if (index != -1) {\r\n                this._children.splice(index, 1);\r\n                (<any>child)._setParent(null);\r\n            }\r\n            return child;\r\n        }\r\n        else\r\n            return this._content.removeChild(child);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a child object at a specific index position.\r\n     * @param index The index position of the child object.\r\n     * @returns The removed child object.\r\n     * @zh 移除指定索引位置的子节点对象。\r\n     * @param index 子节点对象的索引位置。\r\n     * @returns 移除的子节点对象。\r\n     */\r\n    removeChildAt(index: number): Node {\r\n        this.getChildAt(index).off(Event.RESIZE, this, this.onResize);\r\n        this._setScrollChanged();\r\n        return this._content.removeChildAt(index);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a range of children from the object.\r\n     * @param beginIndex The beginning position.\r\n     * @param endIndex The ending position. The default value is 0x7fffffff.\r\n     * @returns The Panel object itself.\r\n     * @zh 移除指定范围的子节点对象。\r\n     * @param beginIndex 开始位置。\r\n     * @param endIndex 结束位置。默认值为 0x7fffffff。\r\n     * @returns 返回对象本身。\r\n     */\r\n    removeChildren(beginIndex: number = 0, endIndex: number = 0x7fffffff): Node {\r\n        this._content.removeChildren(beginIndex, endIndex);\r\n        this._setScrollChanged();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en Returns the child object at a specific index position.\r\n     * @param index The index position of the child object.\r\n     * @returns The child object at the specified index position.\r\n     * @zh 返回指定索引位置的子节点对象。\r\n     * @param index 子节点对象的索引位置。\r\n     * @returns 指定索引位置处的子节点对象。\r\n     */\r\n    getChildAt(index: number): Node {\r\n        return this._content.getChildAt(index);\r\n    }\r\n\r\n    /**\r\n     * @en Returns a child object with a specific name.\r\n     * @param name The name of the child object.\r\n     * @returns The child object with the specified name.\r\n     * @zh 返回具有指定名称的子节点对象。\r\n     * @param name 子节点对象的名称。\r\n     * @returns 具有指定名称的子节点对象。\r\n     */\r\n    getChildByName(name: string): Node {\r\n        return this._content.getChildByName(name);\r\n    }\r\n\r\n    /**\r\n     * @en Returns the index position of a specific child object.\r\n     * @param child The child object.\r\n     * @returns The index position of the child object.\r\n     * @zh 返回指定子节点对象的索引位置。\r\n     * @param child 子节点对象。\r\n     * @returns 子节点对象的索引位置。\r\n     */\r\n    getChildIndex(child: Node): number {\r\n        return this._content.getChildIndex(child);\r\n    }\r\n\r\n    /**\r\n     * @en The number of child objects.\r\n     * @zh 子节点对象数量。\r\n     */\r\n    get numChildren(): number {\r\n        return this._content.numChildren;\r\n    }\r\n\r\n    private changeScroll(): void {\r\n        this._scrollChanged = false;\r\n        var contentW = this.contentWidth || 1;\r\n        var contentH = this.contentHeight || 1;\r\n\r\n        var vscroll = this._vScrollBar;\r\n        var hscroll = this._hScrollBar;\r\n\r\n        var vShow = vscroll && contentH > this._height;\r\n        var hShow = hscroll && contentW > this._width;\r\n        var showWidth = vShow ? this._width - vscroll.width : this._width;\r\n        var showHeight = hShow ? this._height - hscroll.height : this._height;\r\n\r\n        if (vscroll) {\r\n            vscroll.height = this._height - (hShow ? hscroll.height : 0);\r\n            vscroll.scrollSize = Math.max(this._height * 0.033, 1);\r\n            vscroll.thumbPercent = showHeight / contentH;\r\n            vscroll.setScroll(0, contentH - showHeight);\r\n        }\r\n        if (hscroll) {\r\n            hscroll.width = this._width - (vShow ? vscroll.width : 0);\r\n            hscroll.scrollSize = Math.max(this._width * 0.033, 1);\r\n            hscroll.thumbPercent = showWidth / contentW;\r\n            hscroll.setScroll(0, contentW - showWidth);\r\n        }\r\n    }\r\n\r\n    protected _sizeChanged(): void {\r\n        super._sizeChanged();\r\n        this.setContentSize(this._width, this._height);\r\n    }\r\n\r\n    /**\r\n     * @en Get the width of the content area in pixels.\r\n     * @zh 获取内容区域宽度（以像素为单位）。\r\n     */\r\n    get contentWidth(): number {\r\n        var max = 0;\r\n        for (var i = this._content.numChildren - 1; i > -1; i--) {\r\n            var comp = <Sprite>this._content.getChildAt(i);\r\n            max = Math.max(comp._x + comp.width * comp.scaleX - comp.pivotX, max);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * @en Get the height of the content area in pixels.\r\n     * @zh 获取内容区域高度（以像素为单位）。\r\n     */\r\n    get contentHeight(): number {\r\n        let max = 0;\r\n        for (let i = this._content.numChildren - 1; i > -1; i--) {\r\n            let comp = <Sprite>this._content.getChildAt(i);\r\n            max = Math.max(comp._y + comp.height * comp.scaleY - comp.pivotY, max);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the width and height of the content (in pixels).\r\n     * @param width The width.\r\n     * @param height The height.\r\n     * @zh 设置内容的宽度、高度（以像素为单位）。\r\n     * @param width 宽度。\r\n     * @param height 高度。\r\n     */\r\n    private setContentSize(width: number, height: number): void {\r\n        let content = this._content;\r\n        content.width = width;\r\n        content.height = height;\r\n        content._style.scrollRect || (content.scrollRect = Rectangle.create());\r\n        content._style.scrollRect.setTo(0, 0, width, height);\r\n        content.scrollRect = content.scrollRect;\r\n    }\r\n\r\n    /**@ignore */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._setScrollChanged();\r\n    }\r\n\r\n    /**@ignore */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._setScrollChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Scroll bar type. The range of values is 0-3.\r\n     * ScrollType.None(0): Does not display any scrollbars\r\n     * ScrollType.Horizontal(1):Displays only the horizontal scrollbar\r\n     * ScrollType.Vertical(2): Displays only the vertical scrollbar\r\n     * ScrollType.Both(3):  Displays both horizontal and vertical scrollbars\r\n     * @zh 滚动条类型。取值范围0-3。\r\n     * ScrollType.None(0): 不显示任何滚动条\r\n     * ScrollType.Horizontal(1): 仅显示水平滚动条\r\n     * ScrollType.Vertical(2): 仅显示垂直滚动条\r\n     * ScrollType.Both(3): 同时显示水平和垂直滚动条\r\n     */\r\n    get scrollType() {\r\n        return this._scrollType;\r\n    }\r\n\r\n    set scrollType(value: ScrollType) {\r\n        this._scrollType = value;\r\n\r\n        if (this._scrollType == ScrollType.None) {\r\n            if (this._hScrollBar) {\r\n                this._hScrollBar.destroy();\r\n                this._hScrollBar = null;\r\n            }\r\n            if (this._vScrollBar) {\r\n                this._vScrollBar.destroy();\r\n                this._vScrollBar = null;\r\n            }\r\n        }\r\n        else if (this._scrollType == ScrollType.Horizontal) {\r\n            if (this._vScrollBar) {\r\n                this._vScrollBar.destroy();\r\n                this._vScrollBar = null;\r\n            }\r\n\r\n            if (this._hScrollBar)\r\n                this._hScrollBar.skin = this._hScrollBarSkin;\r\n            else\r\n                this.createHScrollBar();\r\n        }\r\n        else if (this._scrollType == ScrollType.Vertical) {\r\n            if (this._hScrollBar) {\r\n                this._hScrollBar.destroy();\r\n                this._hScrollBar = null;\r\n            }\r\n\r\n            if (this._vScrollBar)\r\n                this._vScrollBar.skin = this._vScrollBarSkin;\r\n            else\r\n                this.createVScrollBar();\r\n        }\r\n        else { //both\r\n            if (this._hScrollBar)\r\n                this._hScrollBar.skin = this._hScrollBarSkin;\r\n            else\r\n                this.createHScrollBar();\r\n            if (this._vScrollBar)\r\n                this._vScrollBar.skin = this._vScrollBarSkin;\r\n            else\r\n                this.createVScrollBar();\r\n        }\r\n    }\r\n\r\n    private createHScrollBar() {\r\n        let scrollBar = this._hScrollBar = new HScrollBar();\r\n        scrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n        scrollBar.on(Event.CHANGE, this, this.onScrollBarChange, [scrollBar]);\r\n        scrollBar.target = this._content;\r\n        scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n        scrollBar.bottom = 0;\r\n        scrollBar._skinBaseUrl = this._skinBaseUrl;\r\n        scrollBar.skin = this._hScrollBarSkin;\r\n        scrollBar.on(Event.LOADED, this, this._setScrollChanged);\r\n        super.addChild(scrollBar);\r\n        this._setScrollChanged();\r\n    }\r\n\r\n    private createVScrollBar() {\r\n        let scrollBar = this._vScrollBar = new VScrollBar();\r\n        scrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n        scrollBar.on(Event.CHANGE, this, this.onScrollBarChange, [scrollBar]);\r\n        scrollBar.target = this._content;\r\n        scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n        scrollBar.right = 0;\r\n        scrollBar._skinBaseUrl = this._skinBaseUrl;\r\n        scrollBar.skin = this._vScrollBarSkin;\r\n        scrollBar.on(Event.LOADED, this, this._setScrollChanged);\r\n        super.addChild(scrollBar);\r\n        this._setScrollChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the vertical scrollbar.\r\n     * @zh 垂直方向滚动条皮肤。\r\n     */\r\n    get vScrollBarSkin(): string {\r\n        return this._vScrollBarSkin;\r\n    }\r\n\r\n    set vScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._vScrollBarSkin != value) {\r\n            this._vScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Vertical;\r\n            else if (this._scrollType == ScrollType.Horizontal)\r\n                this.scrollType = ScrollType.Both;\r\n            else\r\n                this.scrollType = this._scrollType;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the horizontal scrollbar.\r\n     * @zh 水平方向滚动条皮肤。\r\n     */\r\n    get hScrollBarSkin(): string {\r\n        return this._hScrollBarSkin;\r\n    }\r\n\r\n    set hScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._hScrollBarSkin != value) {\r\n            this._hScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Horizontal;\r\n            else if (this._scrollType == ScrollType.Vertical)\r\n                this.scrollType = ScrollType.Both;\r\n            this.scrollType = this._scrollType;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The vertical scrollbar object.\r\n     * @zh 垂直方向滚动条对象。\r\n     */\r\n    get vScrollBar(): ScrollBar {\r\n        return this._vScrollBar;\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal scrollbar object.\r\n     * @zh 水平方向滚动条对象。\r\n     */\r\n    get hScrollBar(): ScrollBar {\r\n        return this._hScrollBar;\r\n    }\r\n\r\n    /**\r\n     * @en Get the content container object.\r\n     * @zh 获取内容容器对象。\r\n     */\r\n    get content(): Sprite {\r\n        return this._content;\r\n    }\r\n\r\n    /**\r\n     * @en Event.MOUSE_DOWN event handler for the scrollbar.\r\n     * @param scrollBar The scrollbar object.\r\n     * @zh 滚动条的 Event.MOUSE_DOWN 事件侦听处理函数。\r\n     * @param scrollBar 滚动条对象。\r\n     */\r\n\r\n    protected onScrollBarChange(scrollBar: ScrollBar): void {\r\n        var rect = this._content._style.scrollRect;\r\n        if (rect) {\r\n            var start = Math.round(scrollBar.value);\r\n            scrollBar.isVertical ? rect.y = start : rect.x = start;\r\n            this._content.scrollRect = rect;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Scroll the content container to the specified position of the vertical and horizontal scrollbars.\r\n     * @param x The value of the `value` property of the horizontal scrollbar.\r\n     * @param y The value of the `value` property of the vertical scrollbar.\r\n     * @zh 滚动内容容器至设定的垂直、水平方向滚动条位置。\r\n     * @param x 水平方向滚动条属性value值。滚动条位置数字。\r\n     * @param y 垂直方向滚动条属性value值。滚动条位置数字。\r\n     */\r\n    scrollTo(x: number = 0, y: number = 0): void {\r\n        if (this.vScrollBar) this.vScrollBar.value = y;\r\n        if (this.hScrollBar) this.hScrollBar.value = x;\r\n    }\r\n\r\n    /**\r\n     * @en Refresh the scroll content.\r\n     * @zh 刷新滚动内容。\r\n     */\r\n    refresh(): void {\r\n        this.changeScroll();\r\n    }\r\n\r\n    get cacheAs() {\r\n        return super.cacheAs;\r\n    }\r\n    set cacheAs(value: string) {\r\n        super.cacheAs = value;\r\n        this._usedCache = null;\r\n        if (value !== \"none\") {\r\n            this._hScrollBar && this._hScrollBar.on(Event.START, this, this.onScrollStart);\r\n            this._vScrollBar && this._vScrollBar.on(Event.START, this, this.onScrollStart);\r\n        } else {\r\n            this._hScrollBar && this._hScrollBar.off(Event.START, this, this.onScrollStart);\r\n            this._vScrollBar && this._vScrollBar.off(Event.START, this, this.onScrollStart);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable the elastic effect.\r\n     * @zh 是否开启橡皮筋效果。\r\n     */\r\n    get elasticEnabled(): boolean {\r\n        return this._elasticEnabled;\r\n    }\r\n\r\n    set elasticEnabled(value: boolean) {\r\n        this._elasticEnabled = value;\r\n        if (this._vScrollBar) {\r\n            this._vScrollBar.elasticDistance = value ? 200 : 0;\r\n        }\r\n        if (this._hScrollBar) {\r\n            this._hScrollBar.elasticDistance = value ? 200 : 0;\r\n        }\r\n    }\r\n\r\n    private onScrollStart(): void {\r\n        this._usedCache || (this._usedCache = super.cacheAs);\r\n        super.cacheAs = \"none\";\r\n        this._hScrollBar && this._hScrollBar.once(Event.END, this, this.onScrollEnd);\r\n        this._vScrollBar && this._vScrollBar.once(Event.END, this, this.onScrollEnd);\r\n    }\r\n\r\n    private onScrollEnd(): void {\r\n        super.cacheAs = this._usedCache;\r\n    }\r\n    \r\n    protected _setScrollChanged(): void {\r\n        if (!this._scrollChanged) {\r\n            this._scrollChanged = true;\r\n            this.callLater(this.changeScroll);\r\n        }\r\n    }\r\n}","import { Event } from \"../events/Event\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { Image } from \"./Image\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { HideFlags } from \"../Const\"\r\nimport { URL } from \"../net/URL\"\r\nimport { Utils } from \"../utils/Utils\"\r\nimport { AssetDb } from \"../resource/AssetDb\"\r\n\r\n/**\r\n * @en The `ProgressBar` component displays the loading progress of content.\r\n * change event is dispatched when the value changes.\r\n * @zh `ProgressBar` 组件用于显示内容的加载进度。\r\n * change事件用于值发生改变后调度。\r\n */\r\nexport class ProgressBar extends UIComponent {\r\n    protected _bg: Image;\r\n    protected _bar: Image;\r\n    protected _skin: string;\r\n    protected _value: number = 0.5;\r\n    /**\r\n     * @en The handler function that is called when the value of the `ProgressBar` instance's `value` property changes.The progress value. Default to return the `value` property.\r\n     * @zh 当 `ProgressBar` 实例的 `value` 属性发生变化时的函数处理器。默认返回参数 `value` 属性（进度值）。\r\n     */\r\n    changeHandler: Handler;\r\n\r\n    /**\r\n     * @en The skin of the progress bar.\r\n     * @zh 进度条的皮肤资源路径。\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The current progress value, range from 0 to 1.\r\n     * @zh 当前的进度量，取值范围为 0 到 1 之间。\r\n     */\r\n    get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    set value(num: number) {\r\n        if (this._value != num) {\r\n            num = num > 1 ? 1 : num < 0 ? 0 : num;\r\n            this._value = num;\r\n            this.callLater(this.changeValue);\r\n            this.event(Event.CHANGE);\r\n            this.changeHandler && this.changeHandler.runWith(num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The progress bar object.\r\n     * @zh 进度条对象。\r\n     */\r\n    get bar(): Image {\r\n        return this._bar;\r\n    }\r\n\r\n    /**\r\n     * @en The background bar object.\r\n     * @zh 进度背景条对象。\r\n     */\r\n    get bg(): Image {\r\n        return this._bg;\r\n    }\r\n\r\n    /**\r\n      * @en The size grid of the texture.\r\n      * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n      * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n      * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n      * @zh 纹理的九宫格数据。\r\n      * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n      * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n      * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n      */\r\n    get sizeGrid(): string {\r\n        return this._bg.sizeGrid;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        this._bg.sizeGrid = this._bar.sizeGrid = value;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en creates an instance of ProgressBar.\r\n     * @param skin The skin URL.\r\n     * @zh 创建一个 ProgresBar 的实例。\r\n     * @param skin 皮肤地址。\r\n     */\r\n    constructor(skin: string = null) {\r\n        super();\r\n        this.skin = skin;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this._bg = new Image();\r\n        this._bg.left = 0;\r\n        this._bg.right = 0;\r\n        this._bg.top = 0;\r\n        this._bg.bottom = 0;\r\n        this._bg.hideFlags = HideFlags.HideAndDontSave;\r\n        this.addChild(this._bg);\r\n\r\n        this._bar = new Image();\r\n        this._bar.hideFlags = HideFlags.HideAndDontSave;\r\n        this._bar.top = 0;\r\n        this._bar.bottom = 0;\r\n        this.addChild(this._bar);\r\n    }\r\n\r\n    /**@internal */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n\r\n        if (url) {\r\n            return AssetDb.inst.resolveURL(url).then(url => {\r\n                if (this._destroyed)\r\n                    return null;\r\n\r\n                if (this._skinBaseUrl)\r\n                    url = URL.formatURL(url, this._skinBaseUrl);\r\n\r\n                return Promise.all([\r\n                    this._bg._setSkin(url),\r\n                    this._bar._setSkin(Utils.replaceFileExtension(url, \"$bar.png\", true))\r\n                ]).then(() => this._skinLoaded());\r\n            });\r\n        }\r\n        else {\r\n            this._bg.skin = null;\r\n            this._bar.skin = null;\r\n            this._skinLoaded();\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n    \r\n    protected _skinLoaded(): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this.callLater(this.changeValue);\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    protected measureWidth(): number {\r\n        return this._bg.width;\r\n    }\r\n    protected measureHeight(): number {\r\n        return this._bg.height;\r\n    }\r\n\r\n    /**\r\n     * @en Changes the progress value.\r\n     * @zh 更改进度值的显示。\r\n     */\r\n    protected changeValue(): void {\r\n        if (this.sizeGrid) {\r\n            let grid = this.sizeGrid.split(\",\");\r\n            let left = parseInt(grid[3]);\r\n            if (isNaN(left))\r\n                left = 0;\r\n            let right = parseInt(grid[1]);\r\n            if (isNaN(right))\r\n                right = 0;\r\n            let max = this.width - left - right;\r\n            let sw = max * this._value;\r\n            this._bar.width = left + right + sw;\r\n            this._bar.visible = this._bar.width > left + right;\r\n        } else {\r\n            this._bar.width = this.width * this._value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the width of the component.\r\n     * @param value The width value to set.\r\n     * @zh 设置组件的宽度。\r\n     * @param value 要设置的宽度值。\r\n     */\r\n    set_width(value: number): void {\r\n        super.set_width(value);\r\n        this.callLater(this.changeValue);\r\n    }\r\n\r\n    /**\r\n     * @en Sets the data source for the component.\r\n     * @param value The data source to set. If it's a number or string, it will be converted to a number and set as the component's value.\r\n     * @zh 设置组件的数据源。\r\n     * @param value 要设置的数据源。如果是数字或字符串，将被转换为数字并设置为组件的值。\r\n     */\r\n    set_dataSource(value: any): void {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.value = Number(value);\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the component and its child elements.\r\n     * @param destroyChild Whether to destroy child elements. Default is true.\r\n     * @zh 销毁组件及其子元素。\r\n     * @param destroyChild 是否销毁子元素。默认为 true。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._bg && this._bg.destroy(destroyChild);\r\n        this._bar && this._bar.destroy(destroyChild);\r\n        this._bg = this._bar = null;\r\n        this.changeHandler = null;\r\n    }\r\n\r\n}","import { Event } from \"../events/Event\"\r\nimport { Button } from \"./Button\"\r\n\r\n/**\r\n * @en The Radio control allows users to select one option from a mutually exclusive set of choices.\r\n * Choosing an unselected member of a Radio group will unselect the currently selected `Radio` control within that group.\r\n * @zh Radio 控件使用户可在一组互相排斥的选择中做出一种选择。\r\n * 用户一次只能选择 Radio 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 Radio 控件。\r\n */\r\nexport class Radio extends Button {\r\n    protected _value: any;\r\n\r\n    /**\r\n     * @en The optional user-defined value associated with the Radio.\r\n     * @zh Radio 关联的可选用户定义值。\r\n     */\r\n    get value(): any {\r\n        return this._value != null ? this._value : this.label;\r\n    }\r\n\r\n    set value(obj: any) {\r\n        this._value = obj;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en creates an instance of Radio.\r\n     * @param skin The path of the skin to be used for the Radio.\r\n     * @param label The text label to be displayed next to the Radio.\r\n     * @zh 创建一个 Radio 实例。\r\n     * @param skin Radio 的皮肤路径。\r\n     * @param label 显示在 Radio 旁边的文本标签。\r\n     */\r\n    constructor(skin: string = null, label: string = \"\") {\r\n        super(skin, label);\r\n        // preinitialize 放到这里了，因为不知道什么时候调用\r\n        this.toggle = false;\r\n        this._autoSize = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Sets the internal text width when the autoSize property is false.\r\n     * @param value The new width value.\r\n     * @zh 当 autoSize 属性为 false 时，设置内部文本宽度。\r\n     * @param value 新的宽度值。\r\n     */\r\n    _setWidth(value: number): void {\r\n        if (!this._autoSize) {\r\n            this._text.width = this.width - this._text.x;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Preinitializes the Radio component by setting properties before initialization.\r\n     * @zh 在初始化前对 Radio 组件进行预初始化，设置相关属性。\r\n     */\r\n    protected preinitialize(): void {\r\n        super.preinitialize();\r\n        this.toggle = false;\r\n        this._autoSize = false;\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the Radio component, creating text and setting text properties.\r\n     * @zh 初始化 Radio 组件，创建文本并设置文本属性。\r\n     */\r\n    protected initialize(): void {\r\n        super.initialize();\r\n        this.createText();\r\n        this._text.align = \"left\";\r\n        this._text.valign = \"top\";\r\n        this._text.width = null;\r\n        this.on(Event.CLICK, this, this.onClick);\r\n    }\r\n\r\n    /**\r\n     * @en The click event handler for the Radio object.\r\n     * @param e The event object.\r\n     * @zh 对象的Event.CLICK事件侦听处理函数。 \r\n     * @param e 事件对象。\r\n     */\r\n    protected onClick(e: Event): void {\r\n        this.selected = true;\r\n    }\r\n\r\n    protected changeClips(): void {\r\n        super.changeClips();\r\n        this._setWidth(this._width);\r\n    }\r\n\r\n}","import { Box } from \"./Box\";\r\nimport { ISelect } from \"./ISelect\";\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Loader } from \"../net/Loader\"\r\nimport { Button } from \"./Button\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\nimport { URL } from \"../net/URL\";\r\n\r\n/**\r\n * @en UIGroup is an item collection control that can be automatically laid out. \r\n * The default item object for UIGroup is a Button class instance.\r\n * UIGroup is the base class for Tab and RadioGroup.\r\n * @zh UIGroup 是一个可以自动布局的项集合控件。\r\n * UIGroup 的默认项对象为 Button 类实例。\r\n * UIGroup是 Tab 和 RadioGroup 的基类。\r\n */\r\nexport class UIGroup extends Box {\r\n\r\n    /**@internal */\r\n    protected _items: ISelect[];\r\n    /**@internal */\r\n    protected _selectedIndex: number = -1;\r\n    /**@internal */\r\n    protected _skin: string;\r\n    /**@internal */\r\n    protected _direction: string = \"horizontal\";\r\n    /**@internal */\r\n    protected _space: number = 0;\r\n    /**@internal */\r\n    protected _labels: string;\r\n    /**@internal */\r\n    protected _labelColors: string;\r\n    /**@internal */\r\n    private _labelFont: string;\r\n    /**@internal */\r\n    protected _labelStrokeColor: string;\r\n    /**@internal */\r\n    protected _strokeColors: string;\r\n    /**@internal */\r\n    protected _labelStroke: number;\r\n    /**@internal */\r\n    protected _labelSize: number;\r\n    /**@internal */\r\n    protected _labelBold: boolean;\r\n    /**@internal */\r\n    protected _labelPadding: string;\r\n    /**@internal */\r\n    protected _labelAlign: string;\r\n    /**@internal */\r\n    protected _stateNum: number;\r\n    /**@internal */\r\n    protected _labelChanged: boolean;\r\n    /**\r\n     * @en The processor executed when changing the selection of the Group, (Default return parameter: item index (index: int)).\r\n     * @zh 改变 Group 的选择项时执行的处理器，(默认返回参数： 项索引（index:int）)。\r\n     */\r\n    selectHandler: Handler;\r\n\r\n    /**\r\n     * @en Indicates the index of the currently selected item. The default value is -1.\r\n     * @zh 表示当前选择的项索引。默认值为-1。\r\n     */\r\n    get selectedIndex(): number {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(value: number) {\r\n        if (this._selectedIndex != value) {\r\n            this.setSelect(this._selectedIndex, false);\r\n            this._selectedIndex = value;\r\n            this.setSelect(value, true);\r\n            this.event(Event.CHANGE);\r\n            this.selectHandler && this.selectHandler.runWith(this._selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The URL of the skin for the component.\r\n     * @zh 组件的皮肤URL。\r\n     * @copy laya.ui.Image#skin\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The labels string, separated by commas, such as \"item0,item1,item2,item3,item4,item5\".\r\n     * @zh 标签集合字符串。以逗号做分割，如\"item0,item1,item2,item3,item4,item5\"。\r\n     */\r\n    get labels(): string {\r\n        return this._labels;\r\n    }\r\n\r\n    set labels(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._labels != value) {\r\n            this._labels = value;\r\n            let i = 0;\r\n            let n = this.numChildren;\r\n            while (i < n) {\r\n                let item = this.getChildAt(i);\r\n                if (item.hasHideFlag(HideFlags.HideAndDontSave) && item.name && item.name.startsWith(\"item\")) {\r\n                    this.removeChildAt(i);\r\n                    n--;\r\n                }\r\n                else\r\n                    i++;\r\n            }\r\n            this._setLabelChanged();\r\n            if (this._labels) {\r\n                let a = this._labels.split(\",\");\r\n                for (let i = 0, n = a.length; i < n; i++) {\r\n                    let item = this.createItem(this._skin, a[i]);\r\n                    item.name = \"item\" + i;\r\n                    item.hideFlags = HideFlags.HideAndDontSave;\r\n                    this.addChild(item);\r\n                }\r\n            }\r\n            this.initItems();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The label colors string for the component.\r\n     * @zh 组件的标签颜色字符串。\r\n     */\r\n    get labelColors(): string {\r\n        return this._labelColors;\r\n    }\r\n\r\n    set labelColors(value: string) {\r\n        if (this._labelColors != value) {\r\n            this._labelColors = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The stroke width (in pixels) for the label.\r\n     * The default value is 0, indicating no stroke.\r\n     * @zh 描边宽度（以像素为单位）。\r\n     * 默认值0，表示不描边。\r\n     */\r\n    get labelStroke(): number {\r\n        return this._labelStroke;\r\n    }\r\n\r\n    set labelStroke(value: number) {\r\n        if (this._labelStroke != value) {\r\n            this._labelStroke = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The stroke color for the label, represented as a string.\r\n     * The default color is \"#000000\" (black).\r\n     * @zh 描边颜色，以字符串表示。\r\n     * 默认值为 \"#000000\"（黑色）;\r\n     */\r\n    get labelStrokeColor(): string {\r\n        return this._labelStrokeColor;\r\n    }\r\n\r\n    set labelStrokeColor(value: string) {\r\n        if (this._labelStrokeColor != value) {\r\n            this._labelStrokeColor = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The stroke colors in various states.\r\n     * @zh 各个状态下的描边颜色\r\n     */\r\n    get strokeColors(): string {\r\n        return this._strokeColors;\r\n    }\r\n\r\n    set strokeColors(value: string) {\r\n        if (this._strokeColors != value) {\r\n            this._strokeColors = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The font size of the button's text label.\r\n     * @zh 按钮文本标签的字体大小。\r\n     */\r\n    get labelSize(): number {\r\n        return this._labelSize;\r\n    }\r\n\r\n    set labelSize(value: number) {\r\n        if (this._labelSize != value) {\r\n            this._labelSize = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The number of states the button has, represented as a number. The default is 3 states.\r\n     * @zh 按钮的状态值，以数字表示，默认为3态。\r\n     */\r\n    get stateNum(): number {\r\n        return this._stateNum;\r\n    }\r\n\r\n    set stateNum(value: number) {\r\n        if (this._stateNum != value) {\r\n            this._stateNum = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether the button's text label is bold.\r\n     * @zh 按钮文本标签是否为粗体字。\r\n     */\r\n    get labelBold(): boolean {\r\n        return this._labelBold;\r\n    }\r\n\r\n    set labelBold(value: boolean) {\r\n        if (this._labelBold != value) {\r\n            this._labelBold = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The font name of the button's text label, represented as a string.\r\n     * @zh 按钮文本标签的字体名称，以字符串形式表示。\r\n     */\r\n    get labelFont(): string {\r\n        return this._labelFont;\r\n    }\r\n\r\n    set labelFont(value: string) {\r\n        if (this._labelFont != value) {\r\n            this._labelFont = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n    /**\r\n     * @en The padding of the button's text label.\r\n     * Format: \"Top,Right,Bottom,Left\".\r\n     * @zh 按钮文本标签的边距。\r\n     * 格式：\"上边距,右边距,下边距,左边距\"。\r\n     */\r\n    get labelPadding(): string {\r\n        return this._labelPadding;\r\n    }\r\n\r\n    set labelPadding(value: string) {\r\n        if (this._labelPadding != value) {\r\n            this._labelPadding = value;\r\n            this._setLabelChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The layout direction. The default value is \"horizontal\".\r\n     * Possible values: \r\n     * \"horizontal\": Indicates a horizontal layout.\r\n     * \"vertical\": Indicates a vertical layout.\r\n     * @zh 布局方向。 默认值为\"horizontal\"。\r\n     * 取值：\r\n     * \"horizontal\"：表示水平布局。\r\n     * \"vertical\"：表示垂直布局。\r\n     */\r\n    get direction(): string {\r\n        return this._direction;\r\n    }\r\n\r\n    set direction(value: string) {\r\n        this._direction = value;\r\n        this._setLabelChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The space between items in pixels.\r\n     * @zh 项对象们之间的间隔（以像素为单位）。\r\n     */\r\n    get space(): number {\r\n        return this._space;\r\n    }\r\n\r\n    set space(value: number) {\r\n        this._space = value;\r\n        this._setLabelChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The array where the item objects are stored.\r\n     * @zh 项对象们的存放数组。\r\n     */\r\n    get items(): ISelect[] {\r\n        return this._items;\r\n    }\r\n\r\n    /**\r\n     * @en The currently selected item object.\r\n     * @zh 当前选择的项对象。\r\n     */\r\n    get selection(): ISelect {\r\n        return this._selectedIndex > -1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] : null;\r\n    }\r\n\r\n    set selection(value: ISelect) {\r\n        this.selectedIndex = this._items.indexOf(value);\r\n    }\r\n\r\n    /**\r\n     * @en Creates an instance of UIGroup.\r\n     * @param labels A string of labels separated by commas, e.g., \"item0,item1,item2,item3,item4,item5\".\r\n     * @param skin The skin. \r\n     * @zh 创建一个 UIGroup 的实例。\r\n     * @param labels 标签集字符串，以逗号分隔，例如 \"item0,item1,item2,item3,item4,item5\"。\r\n     * @param skin 皮肤。\r\n     */\r\n    constructor(labels: string = null, skin: string = null) {\r\n        super();\r\n        this._items = [];\r\n        this.skin = skin;\r\n        this.labels = labels;\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * @en 2.0 parsing will call\r\n     * @zh 2.0解析会调用 \r\n     */\r\n    _afterInited(): void {\r\n        this.initItems();\r\n    }\r\n\r\n    /** @internal */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n        if (url) {\r\n            if (this._skinBaseUrl)\r\n                url = URL.formatURL(url, this._skinBaseUrl);\r\n            if (Loader.getRes(url)) {\r\n                this._skinLoaded();\r\n                return Promise.resolve();\r\n            }\r\n            else\r\n                return ILaya.loader.load(url, Loader.IMAGE).then(tex => this._skinLoaded());\r\n        }\r\n        else {\r\n            this._skinLoaded();\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    protected _skinLoaded(): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this._setLabelChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    protected _setLabelChanged(): void {\r\n        if (!this._labelChanged) {\r\n            this._labelChanged = true;\r\n            this.callLater(this.changeLabels);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 项对象的点击事件侦听处理函数。\r\n     * @param index 项索引。\r\n     */\r\n    protected itemClick(index: number): void {\r\n        this.selectedIndex = index;\r\n    }\r\n\r\n    /**\r\n     * @en Creates an item display object.\r\n     * @param skin The skin path for the item object.\r\n     * @param label The text label for the item object.\r\n     * @zh 创建一个项显示对象。\r\n     * @param skin 项对象的皮肤路径。\r\n     * @param label 项对象的文本标签。\r\n     */\r\n    protected createItem(skin: string, label: string): Sprite {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Change the property value of an item object.\r\n     * @zh 更改项对象的属性值。\r\n     */\r\n    protected changeLabels(): void {\r\n        this._labelChanged = false;\r\n        if (this._items) {\r\n            var left: number = 0\r\n            for (var i: number = 0, n: number = this._items.length; i < n; i++) {\r\n                var btn: Button = (<Button>this._items[i]);\r\n                this._skin && (btn.skin = this._skin);\r\n                this._labelColors && (btn.labelColors = this._labelColors);\r\n                this._labelSize != null && (btn.labelSize = this._labelSize);\r\n                this._labelStroke != null && (btn.labelStroke = this._labelStroke);\r\n                this._labelStrokeColor && (btn.labelStrokeColor = this._labelStrokeColor);\r\n                this._strokeColors && (btn.strokeColors = this._strokeColors);\r\n                this._labelBold && (btn.labelBold = this._labelBold);\r\n                this._labelPadding && (btn.labelPadding = this._labelPadding);\r\n                this._labelAlign && (btn.labelAlign = this._labelAlign);\r\n                this._stateNum != null && (btn.stateNum = this._stateNum);\r\n                this._labelFont && (btn.labelFont = this._labelFont);\r\n                if (this._direction === \"horizontal\") {\r\n                    btn.y = 0;\r\n                    btn.x = left;\r\n                    left += btn.width + this._space;\r\n                } else {\r\n                    btn.x = 0;\r\n                    btn.y = left;\r\n                    left += btn.height + this._space;\r\n                }\r\n            }\r\n        }\r\n        this._sizeChanged();\r\n    }\r\n\r\n    protected commitMeasure(): void {\r\n        this.runCallLater(this.changeLabels);\r\n    }\r\n\r\n    /**\r\n     * @en Sets the `selected`property value of an item object by its index.\r\n     * @param index The index of the item object to be set.\r\n     * @param selected Indicates the selected state of the item object.\r\n     * @zh 通过对象的索引设置项对象的 `selected`属性值。\r\n     * @param index 需要设置的项对象的索引。\r\n     * @param selected 表示项对象的选中状态。\r\n     */\r\n\r\n    protected setSelect(index: number, selected: boolean): void {\r\n        if (this._items && index > -1 && index < this._items.length) this._items[index].selected = selected;\r\n    }\r\n\r\n    protected preinitialize(): void {\r\n        this.mouseEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys this instance.\r\n     * @param destroyChild Whether to destroy the child components.\r\n     * @zh 销毁此实例。\r\n     * @param destroyChild 是否销毁子组件。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._items && (this._items.length = 0);\r\n        this._items = null;\r\n        this.selectHandler = null;\r\n    }\r\n\r\n    /**\r\n     * @en Adds an item object.\r\n     * @param item The item object to be added.\r\n     * @param autoLayout Whether to automatically layout the item. If true, the position of the item will be calculated based on the direction and space properties.\r\n     * @returns returns the index ID of this item object.\r\n     * @zh 添加一个项对象。\r\n     * @param item 需要添加的项对象。\r\n     * @param autoLayout 是否自动布局，如果为true，会根据 direction 和 space 属性计算item的位置。\r\n     * @returns 返回添加的项对象的索引ID。\r\n     */\r\n    addItem(item: ISelect, autoLayout: boolean = true): number {\r\n        let display = (<Sprite>(item as any));\r\n        let index = this._items.length;\r\n        display.name = \"item\" + index;\r\n        this.addChild(display);\r\n        this.initItems();\r\n\r\n        if (autoLayout && index > 0) {\r\n            let preItem = (<Sprite>(this._items[index - 1] as any));\r\n            if (this._direction == \"horizontal\") {\r\n                display.x = preItem._x + preItem.width + this._space;\r\n            } else {\r\n                display.y = preItem._y + preItem.height + this._space;\r\n            }\r\n        } else {\r\n            if (autoLayout) {\r\n                display.x = 0;\r\n                display.y = 0;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @en Removes an item object.\r\n     * @param item The item object to be added.\r\n     * @param autoLayout Whether to automatically layout the item. If true, the position of the item will be calculated based on the direction and space properties. Default is true.\r\n     * @zh 删除一个项对象。\r\n     * @param item 需要删除的项对象。\r\n     * @param autoLayout 是否自动布局，如果为true，会根据 direction 和 space 属性计算item的位置。\r\n     */\r\n    delItem(item: ISelect, autoLayout: boolean = true): void {\r\n        var index: number = this._items.indexOf(item);\r\n        if (index != -1) {\r\n            let display: Sprite = (<Sprite>(item as any));\r\n            this.removeChild(display);\r\n            for (let i = index + 1, n = this._items.length; i < n; i++) {\r\n                let child = (<Sprite>(this._items[i] as any));\r\n                child.name = \"item\" + (i - 1);\r\n                if (autoLayout) {\r\n                    if (this._direction == \"horizontal\") {\r\n                        child.x -= display.width + this._space;\r\n                    } else {\r\n                        child.y -= display.height + this._space;\r\n                    }\r\n                }\r\n            }\r\n            this.initItems();\r\n            if (this._selectedIndex > -1) {\r\n                let newIndex = this._selectedIndex < this._items.length ? this._selectedIndex : (this._selectedIndex - 1);\r\n                this._selectedIndex = -1;\r\n                this.selectedIndex = newIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en This method is called after deserialization of this instance.\r\n     * @zh 反序列化后调用此方法。\r\n     */\r\n    onAfterDeserialize() {\r\n        super.onAfterDeserialize();\r\n        if (!this._labels)\r\n            this.initItems();\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the item objects.\r\n     * @zh 初始化项对象们。\r\n     */\r\n    initItems(): void {\r\n        this._items.length = 0;\r\n        for (let i = 0; i < 10000; i++) {\r\n            let item = <ISelect>this.getChildByName(\"item\" + i);\r\n            if (item == null)\r\n                break;\r\n            this._items.push(item);\r\n            item.selected = (i === this._selectedIndex);\r\n            item.clickHandler = Handler.create(this, this.itemClick, [i], false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the data source for this component.\r\n     * @zh 设置此组件的数据源。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.selectedIndex = parseInt(value as string);\r\n        else if (value instanceof Array)\r\n            this.labels = ((<any[]>value)).join(\",\");\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n}","import { UIGroup } from \"./UIGroup\";\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Radio } from \"./Radio\"\r\n\r\n/**\r\n * @en The RadioGroup control defines a group of mutually exclusive Radio controls, such that only one Radio control can be selected at a time by the user.\r\n * `change` event is dispatched when the selectedIndex property of a Group instance changes.\r\n * @zh RadioGroup 控件定义一组 Radio 控件，这些控件相互排斥；因此，用户每次只能选择一个 Radio 控件。\r\n * `change`事件用于当Group的selectedIndex属性发生变化时调度。\r\n */\r\nexport class RadioGroup extends UIGroup {\r\n    protected createItem(skin: string, label: string): Sprite {\r\n        let btn = new Radio();\r\n        btn._skinBaseUrl = this._skinBaseUrl;\r\n        if (skin)\r\n            btn.skin = skin;\r\n        btn.label = label;\r\n        return btn;\r\n    }\r\n}","import { Box } from \"./Box\"\r\nimport { ILaya } from \"../../ILaya\";\r\n\r\n/**\r\n * @en The `ScaleBox` is a container that automatically scales its content to fit the stage size while maintaining the original aspect ratio.\r\n * @zh `ScaleBox` 是一个自适应缩放容器，容器设置大小后，容器大小始终保持舞台大小，子内容按照原始最小宽高比缩放。\r\n */\r\nexport class ScaleBox extends Box {\r\n    private _oldW: number = 0;\r\n    private _oldH: number = 0;\r\n\r\n    private onResize(): void {\r\n        if (this.width > 0 && this.height > 0) {\r\n            let stage = ILaya.stage;\r\n            let scale = Math.min(stage.width / this._oldW, stage.height / this._oldH);\r\n            super.width = stage.width;\r\n            super.height = stage.height;\r\n            this.scale(scale, scale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the container is enabled. Adds a resize event listener to the stage.\r\n     * @zh 容器启用时调用。为舞台添加调整大小事件监听器。\r\n     */\r\n    onEnable(): void {\r\n        ILaya.stage.on(\"resize\", this, this.onResize);\r\n        this.onResize();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the container is disabled. Removes the resize event listener from the stage.\r\n     * @zh 容器禁用时调用。从舞台移除调整大小事件监听器。\r\n     */\r\n    onDisable(): void {\r\n        ILaya.stage.off(\"resize\", this, this.onResize);\r\n    }\r\n\r\n    /**\r\n     * @en Sets the width of the container and updates the original width.\r\n     * @param value The new width value.\r\n     * @zh 设置容器的宽度并更新原始宽度。\r\n     * @param value 新的宽度值。\r\n     */\r\n    set_width(value: number): void {\r\n        super.set_width(value);\r\n        this._oldW = value;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the height of the container and updates the original height.\r\n     * @param value The new height value.\r\n     * @zh 设置容器的高度并更新原始高度。\r\n     * @param value 新的高度值。\r\n     */\r\n    set_height(value: number) {\r\n        super.set_height(value);\r\n        this._oldH = value;\r\n    }\r\n}","import { Sprite } from \"../display/Sprite\"\r\nimport { Button } from \"./Button\"\r\nimport { Styles } from \"./Styles\";\r\nimport { UIGroup } from \"./UIGroup\"\r\n\r\n/**\r\n * @en The Tab component is used to define tab button groups.\r\n * The default value of ths property selectedIndex is -1.\r\n * @zh Tab 组件用来定义选项卡按钮组。\r\n * 属性selectedIndex 的默认值为-1。\r\n */\r\nexport class Tab extends UIGroup {\r\n    constructor() {\r\n        super();\r\n        this._stateNum = Styles.buttonStateNum;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected createItem(skin: string, label: string): Sprite {\r\n        let btn = new Button();\r\n        btn._skinBaseUrl = this._skinBaseUrl;\r\n        if (skin)\r\n            btn.skin = skin;\r\n        btn.label = label;\r\n        return btn;\r\n    }\r\n}","import { Label } from \"./Label\";\r\nimport { Input } from \"../display/Input\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Loader } from \"../net/Loader\"\r\nimport { AutoBitmap } from \"./AutoBitmap\"\r\nimport { Styles } from \"./Styles\"\r\nimport { UIUtils } from \"./UIUtils\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HideFlags } from \"../Const\";\r\nimport { URL } from \"../net/URL\";\r\n/**\r\n * @en The TextInput class is used to create an input text display object.\r\n * - Event.INPUT event: When the input text after dispatching.\r\n * - Event.ENTER event: When the input box presses enter key after dispatching.\r\n * - Event.FOCUS event: When the input box gets focus.\r\n * - Event.BLUR event: When the input box loses focus.\r\n * @zh TextInput类用于创建输入文本显示对象。\r\n * - Event.INPUT事件：当输入文本后调度。\r\n * - Event.ENTER事件：当输入框内敲回车键后调度。\r\n * - Event.FOCUS事件：当输入框获得焦点时调度。\r\n * - Event.BLUR事件：当输入框失去焦点时调度。\r\n */\r\nexport class TextInput extends Label {\r\n    /** @internal */\r\n    protected _skin: string;\r\n    /** @internal */\r\n    declare _graphics: AutoBitmap;\r\n    /** @internal */\r\n    declare _tf: Input;\r\n\r\n    /**\r\n     * @en The URL of the skin for the TextInput UIComponent.\r\n     * @zh TextInput组件的皮肤地址。\r\n     */\r\n    get skin(): string {\r\n        return this._skin;\r\n    }\r\n\r\n    set skin(value: string) {\r\n        if (value == \"\")\r\n            value = null;\r\n        if (this._skin == value)\r\n            return;\r\n\r\n        this._setSkin(value);\r\n    }\r\n\r\n    /**\r\n      * @en The size grid of the texture.\r\n      * The size grid is a 3x3 division of the texture, allowing it to be scaled without distorting the corners and edges. \r\n      * The array contains five values representing the top, right, bottom, and left margins, and whether to repeat the fill (0: no repeat, 1: repeat). \r\n      * The values are separated by commas. For example: \"6,6,6,6,1\".\r\n      * @zh 纹理的九宫格数据。\r\n      * 九宫格是一种将纹理分成3x3格的方式，使得纹理缩放时保持角和边缘不失真。\r\n      * 数组包含五个值，分别代表上边距、右边距、下边距、左边距以及是否重复填充（0：不重复填充，1：重复填充）。\r\n      * 值以逗号分隔。例如：\"6,6,6,6,1\"。\r\n      */\r\n    get sizeGrid(): string {\r\n        return this._graphics && this._graphics.sizeGrid ? this._graphics.sizeGrid.join(\",\") : null;\r\n    }\r\n\r\n    set sizeGrid(value: string) {\r\n        if (value)\r\n            this._graphics.sizeGrid = UIUtils.fillArray(Styles.defaultSizeGrid, value, Number);\r\n        else\r\n            this._graphics.sizeGrid = null;\r\n    }\r\n\r\n    /**\r\n     * @en Whether it is a text area.\r\n     * True means it is a text area, otherwise it is not.\r\n     * @zh 是否是文本域。\r\n     * 值为true表示当前是文本域，否则不是文本域。\r\n     */\r\n    get multiline(): boolean {\r\n        return this._tf.multiline;\r\n    }\r\n\r\n    set multiline(value: boolean) {\r\n        this._tf.multiline = value;\r\n    }\r\n\r\n    /**\r\n     * @en whether it is editable.\r\n     * @zh 是否可编辑。\r\n     */\r\n    get editable(): boolean {\r\n        return this._tf.editable;\r\n    }\r\n\r\n    set editable(value: boolean) {\r\n        this._tf.editable = value;\r\n    }\r\n\r\n    /**\r\n     * @en The pattern that restricts the input.\r\n     * @zh 限制输入的字符。\r\n     */\r\n    get restrict(): string {\r\n        return this._tf.restrict;\r\n    }\r\n\r\n    set restrict(pattern: string) {\r\n        this._tf.restrict = pattern;\r\n    }\r\n\r\n    /**\r\n     * @en The prompt text of the input.\r\n     * @zh 输入框的提示文本。\r\n     */\r\n    get prompt(): string {\r\n        return this._tf.prompt;\r\n    }\r\n\r\n    set prompt(value: string) {\r\n        this._tf.prompt = value;\r\n    }\r\n\r\n    /**\r\n     * @en The prompt color of the input.\r\n     * @zh 输入框的提示文字颜色。\r\n     */\r\n    get promptColor(): string {\r\n        return this._tf.promptColor;\r\n    }\r\n\r\n    set promptColor(value: string) {\r\n        this._tf.promptColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en The maximum number of characters allowed in the input.\r\n     * @zh 输入框允许的最大字符数。\r\n     */\r\n    get maxChars(): number {\r\n        return this._tf.maxChars;\r\n    }\r\n\r\n    set maxChars(value: number) {\r\n        this._tf.maxChars = value;\r\n    }\r\n\r\n    /**\r\n     * @en The focus state of the input.\r\n     * @zh 输入框的焦点状态。\r\n     */\r\n    get focus(): boolean {\r\n        return this._tf.focus;\r\n    }\r\n\r\n    set focus(value: boolean) {\r\n        this._tf.focus = value;\r\n    }\r\n\r\n    /**\r\n     * @en The type of the input box. Refer to the HTML5 input tag for types.\r\n     * Common types include:\r\n     * - text\r\n     * - password\r\n     * - email\r\n     * - number\r\n     * - date\r\n     * - time\r\n     * @zh 输入框的类型。可参照HTML5的input标签。\r\n     * 常用标签例如：\r\n     * - text\r\n     * - password\r\n     * - email\r\n     * - number\r\n     * - date\r\n     * - time\r\n     */\r\n\r\n    get type(): string {\r\n        return this._tf.type;\r\n    }\r\n\r\n    set type(value: string) {\r\n        this._tf.type = value;\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method\r\n     * @param text Text content.\r\n     * @zh 构造方法\r\n     * @param text 文本内容。\r\n     */\r\n    constructor(text?: string) {\r\n        super();\r\n        if (text != null)\r\n            this.text = text;\r\n        this.skin = this.skin;\r\n    }\r\n\r\n    /** @internal */\r\n    _setSkin(url: string): Promise<void> {\r\n        this._skin = url;\r\n        if (url) {\r\n            if (this._skinBaseUrl)\r\n                url = URL.formatURL(url, this._skinBaseUrl);\r\n            let source = Loader.getRes(url);\r\n            if (source) {\r\n                this._skinLoaded(source);\r\n                return Promise.resolve();\r\n            }\r\n            else\r\n                return ILaya.loader.load(url, Loader.IMAGE).then(tex => this._skinLoaded(tex));\r\n        }\r\n        else {\r\n            this._skinLoaded(null);\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n    protected _skinLoaded(source: any): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        this._graphics.source = source;\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this._graphics && (this._graphics.width = value);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this._graphics && (this._graphics.height = value);\r\n    }\r\n\r\n    protected preinitialize(): void {\r\n        this.mouseEnabled = true;\r\n    }\r\n\r\n    protected createChildren(): void {\r\n        this.setGraphics(new AutoBitmap(), true);\r\n\r\n        this._tf = new Input();\r\n        this._tf.hideFlags = HideFlags.HideAndDontSave;\r\n        this._tf.padding = Styles.inputLabelPadding;\r\n        this._tf._onPostLayout = () => this._onPostLayout();\r\n        this._tf.on(Event.INPUT, () => this.event(Event.INPUT));\r\n        this._tf.on(Event.ENTER, () => this.event(Event.ENTER));\r\n        this._tf.on(Event.BLUR, () => this.event(Event.BLUR));\r\n        this._tf.on(Event.FOCUS, () => this.event(Event.FOCUS));\r\n        this.addChild(this._tf);\r\n    }\r\n\r\n    protected initialize(): void {\r\n        this.width = 128;\r\n        this.height = 22;\r\n    }\r\n\r\n    /**\r\n     * @en Select the text in the input box\r\n     * @zh 选中输入框内的文本。\r\n     */\r\n    select(): void {\r\n        this._tf.select();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the start and end index of the selected text within the input field. \r\n     * @param startIndex The index of the first selected character.\r\n     * @param endIndex The index of the character following the last selected character.\r\n     * @zh 在输入字段内设置选中文本的起始和结束索引。\r\n     * @param startIndex 选中文本的光标起始位置。\r\n     * @param endIndex 选中文本的光标结束位置。\r\n     */\r\n    setSelection(startIndex: number, endIndex: number): void {\r\n        this._tf.setSelection(startIndex, endIndex);\r\n    }\r\n}","import { TextInput } from \"./TextInput\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { HScrollBar } from \"./HScrollBar\";\r\nimport { ScrollType, Styles } from \"./Styles\";\r\nimport { Event } from \"../events/Event\"\r\nimport { HideFlags } from \"../Const\";\r\n\r\n/**\r\n * @en The TextArea class is used to create a multi-line text area display object for displaying and inputting text.\r\n * @zh TextArea 类用于创建多行的文本域显示对象，以显示和输入文本。\r\n */\r\nexport class TextArea extends TextInput {\r\n    protected _scrollType: ScrollType = 0;\r\n    protected _vScrollBarSkin: string;\r\n    protected _hScrollBarSkin: string;\r\n    protected _vScrollBar: VScrollBar;\r\n    protected _hScrollBar: HScrollBar;\r\n\r\n    /**\r\n     * @en Scroll bar type. The range of values is 0-3.\r\n     * - ScrollType.None(0): Does not display any scrollbars\r\n     * - ScrollType.Horizontal(1):Displays only the horizontal scrollbar\r\n     * - ScrollType.Vertical(2): Displays only the vertical scrollbar\r\n     * - ScrollType.Both(3):  Displays both horizontal and vertical scrollbars\r\n     * @zh 滚动条类型。取值范围0-3。\r\n     * - ScrollType.None(0): 不显示任何滚动条\r\n     * - ScrollType.Horizontal(1): 仅显示水平滚动条\r\n     * - ScrollType.Vertical(2): 仅显示垂直滚动条\r\n     * - ScrollType.Both(3): 同时显示水平和垂直滚动条\r\n     */\r\n    get scrollType() {\r\n        return this._scrollType;\r\n    }\r\n\r\n    set scrollType(value: ScrollType) {\r\n        this._scrollType = value;\r\n\r\n        if (this._scrollType == ScrollType.None) {\r\n            if (this._hScrollBar) {\r\n                this._hScrollBar.destroy();\r\n                this._hScrollBar = null;\r\n            }\r\n            if (this._vScrollBar) {\r\n                this._vScrollBar.destroy();\r\n                this._vScrollBar = null;\r\n            }\r\n        }\r\n        else if (this._scrollType == ScrollType.Horizontal) {\r\n            if (this._vScrollBar) {\r\n                this._vScrollBar.destroy();\r\n                this._vScrollBar = null;\r\n            }\r\n\r\n            if (this._hScrollBar)\r\n                this._hScrollBar.skin = this._hScrollBarSkin;\r\n            else\r\n                this.createHScrollBar();\r\n        }\r\n        else if (this._scrollType == ScrollType.Vertical) {\r\n            if (this._hScrollBar) {\r\n                this._hScrollBar.destroy();\r\n                this._hScrollBar = null;\r\n            }\r\n\r\n            if (this._vScrollBar)\r\n                this._vScrollBar.skin = this._vScrollBarSkin;\r\n            else\r\n                this.createVScrollBar();\r\n        }\r\n        else { //both\r\n            if (this._hScrollBar)\r\n                this._hScrollBar.skin = this._hScrollBarSkin;\r\n            else\r\n                this.createHScrollBar();\r\n            if (this._vScrollBar)\r\n                this._vScrollBar.skin = this._vScrollBarSkin;\r\n            else\r\n                this.createVScrollBar();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The vertical scrollbar instance.\r\n     * @zh 垂直滚动条实例。\r\n     */\r\n    get vScrollBar(): VScrollBar {\r\n        return this._vScrollBar;\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal scrollbar instance.\r\n     * @zh 水平滚动条实例。\r\n     */\r\n    get hScrollBar(): HScrollBar {\r\n        return this._hScrollBar;\r\n    }\r\n\r\n    /**\r\n     * @en The maximum vertical scroll value.\r\n     * @zh 最大垂直滚动值。\r\n     */\r\n    get maxScrollY(): number {\r\n        return this._tf.maxScrollY;\r\n    }\r\n\r\n    /**\r\n     * @en The vertical scroll position.\r\n     * @zh 垂直滚动位置。\r\n     */\r\n    get scrollY(): number {\r\n        return this._tf.scrollY;\r\n    }\r\n\r\n    /**\r\n     * @en The maximum horizontal scroll value.\r\n     * @zh 最大水平滚动值。\r\n     */\r\n    get maxScrollX(): number {\r\n        return this._tf.maxScrollX;\r\n    }\r\n\r\n    /**\r\n     * @en The horizontal scroll position.\r\n     * @zh 当前的水平滚动位置。\r\n     */\r\n    get scrollX(): number {\r\n        return this._tf.scrollX;\r\n    }\r\n\r\n    /**\r\n     * @en The skin for the vertical scrollbar.\r\n     * @zh 垂直方向滚动条的皮肤 。\r\n     */\r\n    get vScrollBarSkin(): string {\r\n        return this._vScrollBarSkin;\r\n    }\r\n\r\n    set vScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._vScrollBarSkin != value) {\r\n            this._vScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Vertical;\r\n            else if (this._scrollType == ScrollType.Horizontal)\r\n                this.scrollType = ScrollType.Both;\r\n            else\r\n                this.scrollType = this._scrollType;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The skin for the horizontal scrollbar.\r\n     * @zh 水平方向滚动条的皮肤。\r\n     */\r\n    get hScrollBarSkin(): string {\r\n        return this._hScrollBarSkin;\r\n    }\r\n\r\n    set hScrollBarSkin(value: string) {\r\n        if (value == \"\") value = null;\r\n        if (this._hScrollBarSkin != value) {\r\n            this._hScrollBarSkin = value;\r\n            if (this._scrollType == 0)\r\n                this.scrollType = ScrollType.Horizontal;\r\n            else if (this._scrollType == ScrollType.Vertical)\r\n                this.scrollType = ScrollType.Both;\r\n            this.scrollType = this._scrollType;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Creates an instance of TextArea.\r\n     * @param text Text content string.\r\n     * @zh 创建一个TextArea实例。\r\n     * @param text 文本内容字符串。\r\n     */\r\n    constructor(text?: string) {\r\n        super(text);\r\n    }\r\n\r\n    protected _onPostLayout(): void {\r\n        super._onPostLayout();\r\n        this.callLater(this.changeScroll);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this.callLater(this.changeScroll);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        this.callLater(this.changeScroll);\r\n    }\r\n\r\n    protected initialize(): void {\r\n        this.width = 180;\r\n        this.height = 150;\r\n        this._tf.wordWrap = true;\r\n        this.multiline = true;\r\n    }\r\n\r\n    private createHScrollBar() {\r\n        this._hScrollBar = new HScrollBar();\r\n        this._hScrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n        this._hScrollBar._skinBaseUrl = this._skinBaseUrl;\r\n        this._hScrollBar.skin = this._hScrollBarSkin;\r\n        this.addChild(this._hScrollBar);\r\n        this._hScrollBar.on(Event.CHANGE, this, this.onHBarChanged);\r\n        this._hScrollBar.on(Event.LOADED, this, this.changeScroll);\r\n        this._hScrollBar.mouseWheelEnable = false;\r\n        this._hScrollBar.touchScrollEnable = false;\r\n        this._hScrollBar.target = this._tf;\r\n        this.callLater(this.changeScroll);\r\n    }\r\n\r\n    private createVScrollBar() {\r\n        this._vScrollBar = new VScrollBar();\r\n        this._vScrollBar.hideFlags = HideFlags.HideAndDontSave;\r\n        this._vScrollBar._skinBaseUrl = this._skinBaseUrl;\r\n        this._vScrollBar.skin = this._vScrollBarSkin;\r\n        this.addChild(this._vScrollBar);\r\n        this._vScrollBar.on(Event.CHANGE, this, this.onVBarChanged);\r\n        this._vScrollBar.on(Event.LOADED, this, this.changeScroll);\r\n        this._vScrollBar.touchScrollEnable = false;\r\n        this._vScrollBar.target = this._tf;\r\n        this.callLater(this.changeScroll);\r\n    }\r\n\r\n    protected onVBarChanged(e: Event): void {\r\n        if (this._tf.scrollY != this._vScrollBar.value) {\r\n            this._tf.scrollY = this._vScrollBar.value;\r\n        }\r\n    }\r\n\r\n    protected onHBarChanged(e: Event): void {\r\n        if (this._tf.scrollX != this._hScrollBar.value) {\r\n            this._tf.scrollX = this._hScrollBar.value;\r\n        }\r\n    }\r\n\r\n    private changeScroll(): void {\r\n        let vShow = this._vScrollBar && this._tf.maxScrollY > 0;\r\n        let hShow = this._hScrollBar && this._tf.maxScrollX > 0;\r\n        let padding = this._tf.padding;\r\n        let showWidth = vShow ? this._width - this._vScrollBar.width - padding[2] : this._width;\r\n        let showHeight = hShow ? this._height - this._hScrollBar.height - padding[3] : this._height;\r\n\r\n        this._tf.size(showWidth, showHeight);\r\n\r\n        if (this._vScrollBar) {\r\n            this._vScrollBar.x = this._width - this._vScrollBar.width - padding[2];\r\n            this._vScrollBar.y = padding[1];\r\n            this._vScrollBar.height = this._height - (hShow ? this._hScrollBar.height : 0) - padding[1] - padding[3];\r\n            this._vScrollBar.scrollSize = 1;\r\n            this._vScrollBar.thumbPercent = showHeight / Math.max(this._tf.textHeight, showHeight);\r\n            this._vScrollBar.setScroll(1, this._tf.maxScrollY, this._tf.scrollY);\r\n            this._vScrollBar.visible = vShow;\r\n        }\r\n        if (this._hScrollBar) {\r\n            this._hScrollBar.x = padding[0];\r\n            this._hScrollBar.y = this._height - this._hScrollBar.height - padding[3];\r\n            this._hScrollBar.width = this._width - (vShow ? this._vScrollBar.width : 0) - padding[0] - padding[2];\r\n            this._hScrollBar.scrollSize = Math.max(showWidth * 0.033, 1);\r\n            this._hScrollBar.thumbPercent = showWidth / Math.max(this._tf.textWidth, showWidth);\r\n            this._hScrollBar.setScroll(0, this.maxScrollX, this.scrollX);\r\n            this._hScrollBar.visible = hShow;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Scroll to a certain position\r\n     * @zh 滚动到某个位置。\r\n     */\r\n    scrollTo(y: number): void {\r\n        this.commitMeasure();\r\n        this._tf.scrollY = y;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the instance.\r\n     * @param destroyChild Whether to destroy child elements as well. Defaults to true.\r\n     * @zh 销毁实例。\r\n     * @param destroyChild 是否同时销毁子元素，默认为 true。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._vScrollBar && this._vScrollBar.destroy();\r\n        this._hScrollBar && this._hScrollBar.destroy();\r\n        this._vScrollBar = null;\r\n        this._hScrollBar = null;\r\n        super.destroy(destroyChild);\r\n    }\r\n}","import { Graphics } from \"../display/Graphics\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Text } from \"../display/Text\"\r\nimport { Event } from \"../events/Event\"\r\nimport { Rectangle } from \"../maths/Rectangle\"\r\nimport { UIComponent } from \"./UIComponent\"\r\nimport { UIEvent } from \"./UIEvent\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { ILaya } from \"../../ILaya\";\r\n\r\n/**\r\n * @en Mouse Tip Management Class\r\n * @zh 鼠标提示管理类\r\n */\r\nexport class TipManager extends UIComponent {\r\n    /**\r\n     * @en X-axis offset of the tooltip\r\n     * @zh 提示框X轴偏移量\r\n     */\r\n    static offsetX: number = 10;\r\n    /**\r\n     * @en Y-axis offset of the tooltip\r\n     * @zh 提示框Y轴偏移量\r\n     */\r\n    static offsetY: number = 15;\r\n    /**\r\n     * @en Text color of the tooltip\r\n     * @zh 提示文本颜色\r\n     */\r\n    static tipTextColor: string = \"#ffffff\";\r\n    /**\r\n     * @en Background color of the tooltip\r\n     * @zh 提示框背景颜色\r\n     */\r\n    static tipBackColor: string = \"#111111\";\r\n    /**\r\n     * @en Delay before showing the tooltip\r\n     * @zh 显示提示框前的延迟时间\r\n     */\r\n    static tipDelay: number = 200;\r\n    private _tipBox: UIComponent;\r\n    private _tipText: Text;\r\n    private _defaultTipHandler: Function;\r\n\r\n    /**\r\n     * @en Default mouse prompt function\r\n     * @zh 默认鼠标提示函数\r\n     */\r\n    get defaultTipHandler(): Function {\r\n        return this._defaultTipHandler;\r\n    }\r\n\r\n    set defaultTipHandler(value: Function) {\r\n        this._defaultTipHandler = value;\r\n    }\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n        this._tipBox = new UIComponent();\r\n        this._tipBox.addChild(this._tipText = new Text());\r\n        this._tipText.x = this._tipText.y = 5;\r\n        this._tipText.color = TipManager.tipTextColor;\r\n        this._defaultTipHandler = this._showDefaultTip;\r\n        ILaya.stage.on(UIEvent.SHOW_TIP, this, this._onStageShowTip);\r\n        ILaya.stage.on(UIEvent.HIDE_TIP, this, this._onStageHideTip);\r\n        this.zOrder = 1100\r\n    }\r\n\r\n    private _onStageHideTip(e: any): void {\r\n        ILaya.timer.clear(this, this._showTip);\r\n        this.closeAll();\r\n        this.removeSelf();\r\n    }\r\n\r\n    private _onStageShowTip(data: any): void {\r\n        ILaya.timer.once(TipManager.tipDelay, this, this._showTip, [data], true);\r\n    }\r\n\r\n    private _showTip(tip: any): void {\r\n        if (typeof (tip) == 'string') {\r\n            var text: string = String(tip);\r\n            if (Boolean(text)) {\r\n                this._defaultTipHandler(text);\r\n            }\r\n        } else if (tip instanceof Handler) {\r\n            ((<Handler>tip)).run();\r\n        } else if (tip instanceof Function) {\r\n            tip.apply();\r\n        }\r\n        if (true) {\r\n            ILaya.stage.on(Event.MOUSE_MOVE, this, this._onStageMouseMove);\r\n            ILaya.stage.on(Event.MOUSE_DOWN, this, this._onStageMouseDown);\r\n        }\r\n\r\n        this._onStageMouseMove(null);\r\n    }\r\n\r\n    private _onStageMouseDown(e: Event): void {\r\n        this.closeAll();\r\n    }\r\n\r\n    private _onStageMouseMove(e: Event): void {\r\n        this._showToStage(this, TipManager.offsetX, TipManager.offsetY);\r\n    }\r\n\r\n\r\n    private _showToStage(dis: Sprite, offX: number = 0, offY: number = 0): void {\r\n        var rec: Rectangle = dis.getBounds();\r\n        dis.x = ILaya.stage.mouseX + offX;\r\n        dis.y = ILaya.stage.mouseY + offY;\r\n        if (dis._x + rec.width > ILaya.stage.width) {\r\n            dis.x -= rec.width + offX;\r\n        }\r\n        if (dis._y + rec.height > ILaya.stage.height) {\r\n            dis.y -= rec.height + offY;\r\n        }\r\n    }\r\n\r\n    private _showDefaultTip(text: string): void {\r\n        this._tipText.text = text;\r\n        var g: Graphics = this._tipBox.graphics;\r\n        g.clear(true);\r\n        g.drawRect(0, 0, this._tipText.width + 10, this._tipText.height + 10, TipManager.tipBackColor);\r\n        this.addChild(this._tipBox);\r\n        this._showToStage(this);\r\n        ILaya.stage.addChild(this);\r\n    }\r\n\r\n    /**\r\n     * @en Closes all tooltips and removes event listeners related to mouse actions.\r\n     * @zh 关闭所有鼠标提示并移除与鼠标动作相关的事件监听器。\r\n     */\r\n    closeAll(): void {\r\n        ILaya.timer.clear(this, this._showTip);\r\n        ILaya.stage.off(Event.MOUSE_MOVE, this, this._onStageMouseMove);\r\n        ILaya.stage.off(Event.MOUSE_DOWN, this, this._onStageMouseDown);\r\n        this.removeChildren();\r\n    }\r\n\r\n    /**\r\n     * @en Displays a tooltip Sprite on the stage.\r\n     * @param tip The Sprite object to be displayed as a tooltip.\r\n     * @zh 显示对象提示条的显示。\r\n     * @param tip 要显示的提示条精灵对象。\r\n     */\r\n\r\n    showDislayTip(tip: Sprite): void {\r\n        this.addChild(tip);\r\n        this._showToStage(this);\r\n        ILaya.stage.addChild(this);\r\n    }\r\n}","import { Box } from \"./Box\";\r\nimport { List } from \"./List\";\r\nimport { ScrollBar } from \"./ScrollBar\";\r\nimport { Clip } from \"./Clip\";\r\nimport { Event } from \"../events/Event\"\r\nimport { Handler } from \"../utils/Handler\"\r\nimport { HideFlags } from \"../Const\";\r\nimport { XML } from \"../html/XML\";\r\n\r\n/**@internal */\r\ninterface ITreeDataSource {\r\n    x: number;\r\n    hasChild: boolean;\r\n    isOpen: boolean;\r\n    isDirectory: boolean;\r\n}\r\n\r\n/**\r\n * @en The `Tree` UI component allows users to view hierarchical data arranged in an expandable tree format.\r\n * @zh `Tree` UI组件使用户可以查看排列为可扩展树的层次结构数据。\r\n */\r\nexport class Tree extends Box {\r\n    protected _list: List;\r\n    protected _source: any[];\r\n    protected _renderHandler: Handler;\r\n    protected _spaceLeft: number = 10;\r\n    protected _spaceBottom: number = 0;\r\n    protected _keepStatus: boolean = true;\r\n\r\n    /**\r\n     * @en Determines whether to maintain the previous open state after the data source changes. The default value is true.\r\n     * - true: Maintain the previous open state.\r\n     * - false: Do not maintain the previous open state.\r\n     * @zh 数据源发生变化后，是否保持之前打开状态，默认为true。\r\n     * - true：保持之前打开状态。\r\n     * - false：不保持之前打开状态。\r\n     */\r\n    get keepStatus(): boolean {\r\n        return this._keepStatus;\r\n    }\r\n\r\n    set keepStatus(value: boolean) {\r\n        this._keepStatus = value;\r\n    }\r\n\r\n    /**\r\n     * @en The list data source, including only the data of currently visible nodes.\r\n     * @zh 列表数据源，只包含当前可视节点数据。\r\n     */\r\n    get array(): any[] {\r\n        return this._list.array;\r\n    }\r\n\r\n    set array(value: any[]) {\r\n        if (this._keepStatus && this._list.array && value) {\r\n            this.parseOpenStatus(this._list.array, value);\r\n        }\r\n        this._source = value;\r\n        this._list.array = this.getArray();\r\n    }\r\n\r\n    /**\r\n     * @en The data source containing all node data.\r\n     * @zh 数据源，全部节点数据。\r\n     */\r\n    get source(): any[] {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * @en The `List` instance contained within this object.\r\n     * @zh 此对象包含的 `List` 实例对象。\r\n     */\r\n    get list(): List {\r\n        return this._list;\r\n    }\r\n\r\n    /**\r\n     * @en The cell renderer for the List instance contained in this object.\r\n     * Possible values:\r\n     * Cell class object.\r\n     * JSON description of the UI.\r\n     * @zh 此对象包含的List实例的单元格渲染器。\r\n     * 取值：\r\n     * 单元格类对象。\r\n     *  UI 的 JSON 描述。\r\n     */\r\n    get itemRender(): any {\r\n        return this._list.itemRender;\r\n    }\r\n\r\n    set itemRender(value: any) {\r\n        this._list.itemRender = value;\r\n    }\r\n\r\n    /**\r\n     * @en The skin of the scroll bar.\r\n     * @zh 滚动条皮肤。\r\n     */\r\n    get scrollBarSkin(): string {\r\n        return this._list.vScrollBarSkin;\r\n    }\r\n\r\n    set scrollBarSkin(value: string) {\r\n        this._list.vScrollBarSkin = value;\r\n    }\r\n\r\n    /**\r\n     * @en The scroll bar.\r\n     * @zh 滚动条。\r\n     */\r\n    get scrollBar(): ScrollBar {\r\n        return this._list.scrollBar;\r\n    }\r\n\r\n    /**\r\n     * @en Handler for cell mouse events. Default returns parameters (e:Event,index:int).\r\n     * @zh 单元格鼠标事件处理器。默认返回参数（e:Event,index:int）。\r\n     */\r\n    get mouseHandler(): Handler {\r\n        return this._list.mouseHandler;\r\n    }\r\n\r\n    set mouseHandler(value: Handler) {\r\n        this._list.mouseHandler = value;\r\n    }\r\n\r\n    /**\r\n     * @en The render handler for the `Tree` instance.\r\n     * @zh `Tree` 实例的渲染处理器。\r\n     */\r\n    get renderHandler(): Handler {\r\n        return this._renderHandler;\r\n    }\r\n\r\n    set renderHandler(value: Handler) {\r\n        this._renderHandler = value;\r\n    }\r\n\r\n    /**\r\n     * @en The left indentation distance in pixels.\r\n     * @zh 左侧缩进距离（以像素为单位）。\r\n     */\r\n    get spaceLeft(): number {\r\n        return this._spaceLeft;\r\n    }\r\n\r\n    set spaceLeft(value: number) {\r\n        this._spaceLeft = value;\r\n    }\r\n\r\n    /**\r\n     * @en The space between each item in pixels.\r\n     * @zh 每一项之间的间隔距离（以像素为单位）。\r\n     */\r\n    get spaceBottom(): number {\r\n        return this._list.spaceY;\r\n    }\r\n\r\n    set spaceBottom(value: number) {\r\n        this._list.spaceY = value;\r\n    }\r\n\r\n    /**\r\n     * @en The index of the currently selected item.\r\n     * @zh 表示当前选择的项索引。\r\n     */\r\n    get selectedIndex(): number {\r\n        return this._list.selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(value: number) {\r\n        this._list.selectedIndex = value;\r\n    }\r\n\r\n    /**\r\n     * @en The data source of the currently selected item.\r\n     * @zh 当前选中的项对象的数据源。\r\n     */\r\n    get selectedItem(): any {\r\n        return this._list.selectedItem;\r\n    }\r\n\r\n    set selectedItem(value: any) {\r\n        this._list.selectedItem = value;\r\n    }\r\n\r\n    /**\r\n     * @en The data source in XML structure.\r\n     * @zh XML 结构的数据源。\r\n     */\r\n    set xml(value: XML) {\r\n        var arr: any[] = [];\r\n        this.parseXml(value, arr, null, true);\r\n\r\n        this.array = arr;\r\n    }\r\n\r\n    /**\r\n     * @en The value of the `path` property of the selected tree node item.\r\n     * @zh 表示选择的树节点项的 `path` 属性值。\r\n     */\r\n    get selectedPath(): string {\r\n        if (this._list.selectedItem) {\r\n            return this._list.selectedItem.path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Creats an instance of `Tree`.\r\n     * The `width` and `height` properties are both set to 200 in the `Tree` constructor.\r\n     * @zh 创建一个 `Tree` 实例。\r\n     * 在`Tree`构造函数中设置属性width、height的值默认都为200。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.width = this.height = 200;\r\n    }\r\n    protected createChildren(): void {\r\n        this._list = new List();\r\n        this._list.hideFlags = HideFlags.HideAndDontSave;\r\n        this._list.left = 0;\r\n        this._list.right = 0;\r\n        this._list.top = 0;\r\n        this._list.bottom = 0;\r\n        this._list._skinBaseUrl = this._skinBaseUrl;\r\n        this.addChild(this._list);\r\n        this._list.renderHandler = Handler.create(this, this.renderItem, null, false);\r\n        this._list.repeatX = 1;\r\n        this._list.on(Event.CHANGE, this, this.onListChange);\r\n    }\r\n\r\n    /**\r\n     * @en this object contains the List instance's Event.CHANGE event listener function.\r\n     * @zh 此对象包含的List实例的Event.CHANGE事件侦听处理函数。\r\n     */\r\n    protected onListChange(e: Event = null): void {\r\n        this.event(Event.CHANGE);\r\n    }\r\n\r\n    /**\r\n     * @en Get the data source collection.\r\n     * @zh 获取数据源集合。\r\n     */\r\n    protected getArray(): any[] {\r\n        var arr: any[] = [];\r\n        for (let key in this._source) {//TODO TS\r\n            let item = this._source[key];\r\n            if (this.getParentOpenStatus(item)) {\r\n                item.x = this._spaceLeft * this.getDepth(item);\r\n                arr.push(item);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * @en Get item object's depth.\r\n     * @zh 获取项对象的深度。\r\n     */\r\n    protected getDepth(item: any, num: number = 0): number {\r\n        if (item.nodeParent == null) return num;\r\n        else return this.getDepth(item.nodeParent, num + 1);\r\n    }\r\n\r\n    /**\r\n     * @en Get item object's parent open status.\r\n     * @zh 获取项对象的上一级的打开状态。\r\n     */\r\n    protected getParentOpenStatus(item: any): boolean {\r\n        var parent: any = item.nodeParent;\r\n        if (parent == null) {\r\n            return true;\r\n        } else {\r\n            if (parent.isOpen) {\r\n                if (parent.nodeParent != null) return this.getParentOpenStatus(parent);\r\n                else return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Renders a item object.\r\n     * @param cell a item object.\r\n     * @param index item's index.\r\n     * @zh 渲染一个项对象。\r\n     * @param cell 一个项对象。\r\n     * @param index 项的索引。\r\n     */\r\n    protected renderItem(cell: Box, index: number): void {\r\n        var item: ITreeDataSource = cell.dataSource;\r\n        if (item) {\r\n            cell.left = item.x;\r\n            var arrow = cell.getChildByName(\"arrow\") as Clip;\r\n            if (arrow) {\r\n                if (item.hasChild) {\r\n                    arrow.visible = true;\r\n                    arrow.index = item.isOpen ? 1 : 0;\r\n                    (<any>arrow).__cellIndex = index;\r\n                    arrow.off(Event.CLICK, this, this.onArrowClick);\r\n                    arrow.on(Event.CLICK, this, this.onArrowClick);\r\n                } else {\r\n                    arrow.visible = false;\r\n                }\r\n            }\r\n            var folder = cell.getChildByName(\"folder\") as Clip;\r\n            if (folder) {\r\n                if (folder.clipY == 2) {\r\n                    folder.index = item.isDirectory ? 0 : 1;\r\n                } else {\r\n                    folder.index = item.isDirectory ? item.isOpen ? 1 : 0 : 2;\r\n                }\r\n            }\r\n            this._renderHandler && this._renderHandler.runWith([cell, index]);\r\n        }\r\n    }\r\n\r\n    private onArrowClick(e: Event): void {\r\n        var arrow = e.currentTarget;\r\n        var index = arrow.__cellIndex;\r\n        this._list.array[index].isOpen = !this._list.array[index].isOpen;\r\n        this.event(Event.OPEN);\r\n        this._list.array = this.getArray();\r\n    }\r\n\r\n    /**\r\n     * @en parse data source of XML type.\r\n     * @zh 解析并处理XML类型的数据源。\r\n     */\r\n    protected parseXml(xml: XML, source: any[], nodeParent: any, isRoot: boolean): void {\r\n        var obj: any;\r\n        var list = xml.elements();\r\n        var childCount = list.length;\r\n        if (!isRoot) {\r\n            obj = {};\r\n            var list2 = xml.attributes;\r\n            for (let key in list2) {\r\n                var value = list2[key];\r\n                obj[key] = value == \"true\" ? true : value == \"false\" ? false : value;\r\n            }\r\n            obj.nodeParent = nodeParent;\r\n            if (childCount > 0) obj.isDirectory = true;\r\n            obj.hasChild = childCount > 0;\r\n            source.push(obj);\r\n        }\r\n        for (var i = 0; i < childCount; i++) {\r\n            var node = list[i];\r\n            this.parseXml(node, source, obj, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Handle the open state of the data items.\r\n     * @zh 处理数据项的打开状态。\r\n     */\r\n    protected parseOpenStatus(oldSource: any[], newSource: any[]): void {\r\n        for (var i = 0, n = newSource.length; i < n; i++) {\r\n            var newItem = newSource[i];\r\n            if (newItem.isDirectory) {\r\n                for (var j = 0, m = oldSource.length; j < m; j++) {\r\n                    var oldItem = oldSource[j];\r\n                    if (oldItem.isDirectory && this.isSameParent(oldItem, newItem) && newItem.label == oldItem.label) {\r\n                        newItem.isOpen = oldItem.isOpen;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Determine whether the two item objects have the same parent node in the tree structure.\r\n     * @param item1 Item object.\r\n     * @param item2 Item object.    \r\n     * @returns If the parent node is the same, the value of true. Otherwise, false.\r\n     * @zh 判断两个项对象在树结构中的父节点是否相同。\r\n     * @param item1 项对象。\r\n     * @param item2 项对象。\r\n     * @returns 如果父节点相同值为true，否则值为false。\r\n     */\r\n    protected isSameParent(item1: any, item2: any): boolean {\r\n        if (item1.nodeParent == null && item2.nodeParent == null) return true;\r\n        else if (item1.nodeParent == null || item2.nodeParent == null) return false\r\n        else {\r\n            if (item1.nodeParent.label == item2.nodeParent.label) return this.isSameParent(item1.nodeParent, item2.nodeParent);\r\n            else return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Retrieve the value of a specified key from the data source.\r\n     * @zh 获取数据源中指定键名的值。\r\n     */\r\n    private getFilterSource(array: any[], result: any[], key: string): void {\r\n        key = key.toLocaleLowerCase();\r\n        for (let item of array) {\r\n            if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key) > -1) {\r\n                item.x = 0;\r\n                result.push(item);\r\n            }\r\n            if (item.child && item.child.length > 0) {\r\n                this.getFilterSource(item.child, result, key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Set the open state of an item object by index.\r\n     * @param index The item index.\r\n     * @param isOpen Whether the item is open.\r\n     * @zh 设置指定项索引的项对象的打开状态。\r\n     * @param index 项索引。\r\n     * @param isOpen 是否处于打开状态。\r\n     */\r\n    setItemState(index: number, isOpen: boolean): void {\r\n        if (!this._list.array[index]) return;\r\n        this._list.array[index].isOpen = isOpen;\r\n        this._list.array = this.getArray();\r\n    }\r\n\r\n    /**\r\n     * @en Refresh the list.\r\n     * @zh 刷新项列表。\r\n     */\r\n    fresh(): void {\r\n        this._list.array = this.getArray();\r\n        this.repaint();\r\n    }\r\n\r\n    /**\r\n     * @en Set the data source.\r\n     * @param value The data source.\r\n     * @zh 设置数据源。\r\n     * @param value The data source.\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        //if (value is XmlDom) xml = value as XmlDom;\r\n        super.set_dataSource(value);\r\n    }\r\n\r\n    /**\r\n     * @en Update the list to show items with the specified key name.\r\n     * @param key The key name.\r\n     * @zh 更新项列表，显示指定键名的数据项。\r\n     * @param key 键名。\r\n     */\r\n    filter(key: string): void {\r\n        if (Boolean(key)) {\r\n            var result: any[] = [];\r\n            this.getFilterSource(this._source, result, key);\r\n            this._list.array = result;\r\n        } else {\r\n            this._list.array = this.getArray();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the object.\r\n     * @param destroyChild Whether to destroy the child objects as well.\r\n     * @zh 销毁对象。\r\n     * @param destroyChild 是否销毁子对象。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        this._list && this._list.destroy(destroyChild);\r\n        this._list = null;\r\n        this._source = null;\r\n        this._renderHandler = null;\r\n    }\r\n}\r\n","import { LayoutBox } from \"./LayoutBox\";\r\nimport { UIComponent } from \"./UIComponent\";\r\n\r\n/**\r\n * @en VBox is a vertical layout container class.\r\n * @zh VBox 是一个垂直布局容器类。\r\n */\r\nexport class VBox extends LayoutBox {\r\n    /**\r\n     * @en No alignment.\r\n     * @zh 无对齐。\r\n     */\r\n    static NONE: string = \"none\";\r\n    /**\r\n     * @en Left aligned.\r\n     * @zh 左对齐。\r\n     */\r\n    static LEFT: string = \"left\";\r\n    /**\r\n     * @en Center alignment.\r\n     * @zh 居中对齐。\r\n     */\r\n    static CENTER: string = \"center\";\r\n    /**\r\n     * @en Right aligned.\r\n     * @zh 右对齐。\r\n     */\r\n    static RIGHT: string = \"right\";\r\n\r\n    /** \r\n     * @en Compatible with previous changeItems logic, whether to use sortItem to sort all items when changes occur.\r\n     * @zh 兼容以前的changeItems逻辑，是否在发生变动时，使用 sortItem 排序所有item。\r\n    */\r\n    public isSortItem: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        this.callLater(this.changeItems);\r\n    }\r\n\r\n    protected changeItems(): void {\r\n        this._itemChanged = false;\r\n        let items: any[] = [];\r\n        let maxWidth = 0;\r\n\r\n        for (let i = 0, n = this.numChildren; i < n; i++) {\r\n            let item = (<UIComponent>this.getChildAt(i));\r\n            if (item) {\r\n                item.y = 0;\r\n                items.push(item);\r\n                maxWidth = this._isWidthSet ? this._width : Math.max(maxWidth, item.width * item.scaleX);\r\n            }\r\n        }\r\n        if (this.isSortItem) {\r\n            this.sortItem(items);\r\n        }\r\n        let top = 0;\r\n        for (let i = 0, n = items.length; i < n; i++) {\r\n            let item = items[i];\r\n            item.y = top;\r\n            top += item.height * item.scaleY + this._space;\r\n            if (this._align == VBox.LEFT) {\r\n                item.x = 0;\r\n            } else if (this._align == VBox.CENTER) {\r\n                item.x = (maxWidth - item.width * item.scaleX) * 0.5;\r\n            } else if (this._align == VBox.RIGHT) {\r\n                item.x = maxWidth - item.width * item.scaleX;\r\n            }\r\n        }\r\n        this._sizeChanged();\r\n    }\r\n}","import { Node } from \"../display/Node\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Box } from \"./Box\"\r\nimport { Handler } from \"../utils/Handler\"\r\n\r\n/**\r\n * @en The ViewStack class is used for the View Stack class, which is used for setting and processing the display of views.\r\n * @zh ViewStack 类用于视图堆栈类，用于视图的显示等设置处理。\r\n */\r\nexport class ViewStack extends Box {\r\n    /**@internal */\r\n    protected _items: any[];\r\n    /**@internal */\r\n    protected _setIndexHandler: Handler = Handler.create(this, this.setIndex, null, false);\r\n    /**@internal */\r\n    protected _selectedIndex: number;\r\n\r\n    /**\r\n     * @en The index of the current view.\r\n     * @zh 当前视图的索引。\r\n     */\r\n    get selectedIndex(): number {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(value: number) {\r\n        if (this._selectedIndex != value) {\r\n            this.setSelect(this._selectedIndex, false);\r\n            this._selectedIndex = value;\r\n            this.setSelect(this._selectedIndex, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The currently selected item object.\r\n     * @zh 当前选中的项对象。\r\n     */\r\n    get selection(): Node {\r\n        return this._selectedIndex > -1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] : null;\r\n    }\r\n\r\n    set selection(value: Node) {\r\n        this.selectedIndex = this._items.indexOf(value);\r\n    }\r\n\r\n    /**\r\n     * @en Index setting processor.\r\n     * Default callback parameters: index:int\r\n     * @zh 索引设置处理器。\r\n     * 默认回调参数：index:int\r\n     */\r\n    get setIndexHandler(): Handler {\r\n        return this._setIndexHandler;\r\n    }\r\n\r\n    set setIndexHandler(value: Handler) {\r\n        this._setIndexHandler = value;\r\n    }\r\n\r\n    /**\r\n     * @en The array of view items.\r\n     * @zh 视图集合数组。\r\n     */\r\n    get items(): any[] {\r\n        return this._items;\r\n    }\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n\r\n        this._items = [];\r\n    }\r\n\r\n    /**\r\n     * @en Sets the `selected` property value of an item object by its index.\r\n     * @param index The index of the object to be set.\r\n     * @param selected Indicates the selected state of the object.\r\n     * @zh 通过对象的索引设置项对象的 `selected` 属性值。\r\n     * @param index 需要设置的对象的索引。\r\n     * @param selected 表示对象的选中状态。\r\n     */\r\n    protected setSelect(index: number, selected: boolean): void {\r\n        if (this._items && index > -1 && index < this._items.length) {\r\n            this._items[index].visible = selected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置属性<code>selectedIndex</code>的值。\r\n     * @param index 选中项索引值。\r\n     */\r\n    protected setIndex(index: number): void {\r\n        this.selectedIndex = index;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the view items in batch.\r\n     * @param views An array of view objects to be set.\r\n     * @zh 批量设置视图对象。\r\n     * @param views 视图对象数组。\r\n     */\r\n    setItems(views: any[]): void {\r\n        this.removeChildren();\r\n        var index: number = 0;\r\n        for (var i: number = 0, n: number = views.length; i < n; i++) {\r\n            var item: Node = views[i];\r\n            if (item) {\r\n                item.name = \"item\" + index;\r\n                this.addChild(item);\r\n                index++;\r\n            }\r\n        }\r\n        this.initItems();\r\n    }\r\n\r\n    /**\r\n     * @en Adds a view to the ViewStack.Sets the name property of the view object to facilitate identification.\r\n     * @param view The view object to be added.\r\n     * @zh 添加视图对象到 ViewStack，并设置此视图对象的 `name` 属性。\r\n     * @param view 需要添加的视图对象。\r\n     */\r\n    addItem(view: Node): void {\r\n        view.name = \"item\" + this._items.length;\r\n        this.addChild(view);\r\n        this.initItems();\r\n    }\r\n\r\n    /**\r\n     * @en This method is called after the object has been deserialized, and it initializes the view items.\r\n     * @zh 反序列化后调用此方法，用以初始化视图项。\r\n     */\r\n    onAfterDeserialize() {\r\n        super.onAfterDeserialize();\r\n        this.initItems();\r\n    }\r\n\r\n    _afterInited(): void {\r\n        this.initItems();\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the collection of view objects.\r\n     * @zh 初始化视图对象集合。\r\n     */\r\n    initItems(): void {\r\n        this._items.length = 0;\r\n        for (var i: number = 0; i < 10000; i++) {\r\n            var item: Sprite = (<Sprite>this.getChildByName(\"item\" + i));\r\n            if (item == null) {\r\n                break;\r\n            }\r\n            this._items.push(item);\r\n            item.visible = (i == this._selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the data source for the ViewStack, updating the selectedIndex or properties accordingly.\r\n     * @zh 为 ViewStack 设置数据源，相应地更新 selectedIndex 或属性。\r\n     */\r\n    set_dataSource(value: any) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string') {\r\n            this.selectedIndex = parseInt(value as string);\r\n        } else {\r\n            for (var prop in this._dataSource) {\r\n                if (prop in this) {\r\n                    (this as any)[prop] = this._dataSource[prop];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { Slider } from \"./Slider\";\r\n\r\n/**\r\n * @en A VSlider control allows the user to select a value by moving the slider thumb between the endpoints of the slider track. The VSlider control is oriented vertically. The slider track extends from bottom to top, and the label is positioned on the left and right sides of the track.\r\n * @zh 使用 VSlider 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。VSlider 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。\r\n */\r\n\r\nexport class VSlider extends Slider {\r\n\r\n}","import { UIComponent } from \"./UIComponent\";\r\nimport { Stage } from \"../display/Stage\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Texture2D } from \"../resource/Texture2D\";\r\nimport { TextureFormat } from \"../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\nimport { Browser } from \"../utils/Browser\";\r\n\r\n/**\r\n * @en OpenDataContext component for displaying OpenData in WeChat mini-games. Instantiate this component directly to optimally display OpenData based on the component's width, height, and position.\r\n * @zh 微信小游戏开放数据域显示组件，直接实例化本组件，即可根据组件宽高和位置，以最优的方式显示开放数据域数据。\r\n */\r\nexport class OpenDataContextView extends UIComponent {\r\n    private _fps: number = 30;\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n        this._width = this._height = 200;\r\n        let tex: Texture = new Texture(new Texture2D(this._width, this._height, TextureFormat.R8G8B8A8, false, false, true));\r\n        tex.bitmap.lock = true;\r\n        this.texture = tex;\r\n    }\r\n\r\n    /**\r\n     * @en The frame rate.\r\n     * @zh 帧率。\r\n     */\r\n    get fps() {\r\n        return this._fps;\r\n    }\r\n\r\n    set fps(value: number) {\r\n        if (this._fps != value) {\r\n            this._fps = value;\r\n            if (LayaEnv.isPlaying && this.activeInHierarchy\r\n                && (window as any).wx && (window as any).sharedCanvas) {\r\n                ILaya.timer.clear(this, this._onLoop);\r\n                ILaya.timer.loop(1000 / value, this, this._onLoop);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    _onActive(): void {\r\n        if (!LayaEnv.isPlaying)\r\n            return;\r\n\r\n        if ((window as any).wx && (window as any).sharedCanvas)\r\n            ILaya.timer.loop(1000 / this._fps, this, this._onLoop);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _onInActive(): void {\r\n        if (!LayaEnv.isPlaying)\r\n            return;\r\n\r\n        this.postMsg({ type: \"close\" });\r\n        ILaya.timer.clear(this, this._onLoop);\r\n    }\r\n\r\n    private _onLoop(): void {\r\n        let tex = this.texture;\r\n        let canvas: HTMLCanvasElement = (window as any).sharedCanvas;\r\n        if (tex.width != canvas.width || tex.height != canvas.height) {\r\n            tex.bitmap.destroy();\r\n            tex.bitmap = new Texture2D(canvas.width, canvas.height, TextureFormat.R8G8B8A8, false, false, true, true);\r\n            tex.bitmap.lock = true;\r\n        }\r\n\r\n        if (Browser.onMiniGame) {//小游戏保护\r\n            if ((canvas as any).toTempFilePath) {\r\n                (<Texture2D>tex.bitmap).setImageData(canvas, true, false);\r\n            }\r\n        } else\r\n            (<Texture2D>tex.bitmap).setImageData(canvas, true, false);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    _setWidth(value: number) {\r\n        super._setWidth(value);\r\n        if ((window as any).sharedCanvas) (window as any).sharedCanvas.width = value;\r\n        this.callLater(this.updateViewPort);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    _setHeight(value: number) {\r\n        super._setHeight(value);\r\n        if ((window as any).sharedCanvas) (window as any).sharedCanvas.height = value;\r\n        this.callLater(this.updateViewPort);\r\n    }\r\n\r\n    /**\r\n     * @en The x-coordinate of the component.\r\n     * @zh 组件的 x 坐标。\r\n     */\r\n    get x() {\r\n        return super.x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        super.x = value;\r\n        this.callLater(this.updateViewPort);\r\n    }\r\n\r\n    /**\r\n     * @en The y-coordinate of the component.\r\n     * @zh 组件的 y 坐标。\r\n     */\r\n    get y() {\r\n        return super.y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        super.y = value;\r\n        this.callLater(this.updateViewPort);\r\n    }\r\n\r\n\r\n    private updateViewPort(): void {\r\n        let stage: Stage = ILaya.stage;\r\n        let sx = stage._canvasTransform.getScaleX() * this.globalScaleX * stage.transform.getScaleX();\r\n        let sy = stage._canvasTransform.getScaleY() * this.globalScaleY * stage.transform.getScaleY();\r\n\r\n        this.postMsg({\r\n            type: \"updateViewPort\",\r\n            box: {\r\n                x: this.x * sx,\r\n                y: this.y * sy,\r\n                width: this.width * sx,\r\n                height: this.height * sy,\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Send a message to the OpenData context.\r\n     * @param msg Message to send.\r\n     * @zh 向开放数据域发送消息。\r\n     * @param msg 要发送的消息。\r\n     */\r\n    postMsg(msg: any): void {\r\n        if ((window as any).wx && (window as any).wx.getOpenDataContext) {\r\n            var openDataContext: any = (window as any).wx.getOpenDataContext();\r\n            openDataContext.postMessage(msg);\r\n        }\r\n    }\r\n}","\r\nimport { Laya } from \"../../Laya\";\r\nimport { TextureFormat } from \"../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Text } from \"../display/Text\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Texture2D } from \"../resource/Texture2D\";\r\nimport { CheckBox } from \"../ui/CheckBox\";\r\nimport { IStatUI, StatToggleUIParams, StatUIParams } from \"../utils/IStatUI\";\r\nimport { Stat } from \"../utils/Stat\";\r\n\r\nexport class StatUI implements IStatUI {\r\n    private _txt: Text;\r\n    private _sp: Sprite;\r\n    private _view: Array<StatUIParams>;\r\n    private _toggleView: Array<StatToggleUIParams>;\r\n    private _toggleSprite: Sprite;\r\n    private _checkBoxArray: Array<CheckBox>;\r\n    private _show = false;\r\n    private _showToggle = false;\r\n\r\n    private createUI(): void {\r\n        let sp: Sprite = this._sp = new Sprite();\r\n        sp.scale(Math.max(Laya.stage.clientScaleX, 1), Math.max(Laya.stage.clientScaleY, 1));\r\n        Laya.stage.on(Event.RESIZE, this, () => {\r\n            this._sp.scale(Math.max(Laya.stage.clientScaleX, 1), Math.max(Laya.stage.clientScaleY, 1));\r\n        });\r\n\r\n        let leftText = new Text();\r\n        leftText.singleCharRender=true;\r\n        leftText.pos(5, 5);\r\n        leftText.color = \"#ffffff\";\r\n        leftText.fontSize = fontSize;\r\n        sp.addChild(leftText);\r\n\r\n        strArray.length = 0;\r\n        for (let one of this._view)\r\n            strArray.push(one.title);\r\n        leftText.text = strArray.join(\"\\n\");\r\n\r\n        this._txt = new Text();\r\n        this._txt.singleCharRender=true;\r\n        this._txt.pos(leftText.textWidth + 10, 5);\r\n        this._txt.color = \"#ffffff\";\r\n        this._txt.fontSize = fontSize;\r\n        sp.addChild(this._txt);\r\n\r\n        sp.size(leftText.textWidth + 100, leftText.textHeight + 10);\r\n        sp.graphics.clear();\r\n        sp.graphics.alpha(0.5);\r\n        sp.graphics.drawRect(0, 0, sp.width, sp.height, \"#999999\");\r\n        sp.graphics.alpha(2);\r\n    }\r\n\r\n    private createToggleUI(): void {\r\n        if (!checkBoxTex) {\r\n            let pixels = new Uint8Array(9);\r\n            pixels[0] = 255;\r\n            pixels[1] = 255;\r\n            pixels[2] = 255;\r\n            pixels[3] = 255;\r\n            pixels[4] = 255;\r\n            pixels[5] = 128;\r\n            pixels[6] = 128;\r\n            pixels[7] = 128;\r\n            pixels[8] = 0;\r\n            checkBoxTex = new Texture2D(1, 3, TextureFormat.R8G8B8, false, false);\r\n            checkBoxTex.setPixelsData(pixels, false, false);\r\n            checkBoxTex.lock = true;//锁住资源防止被资源管理释放\r\n            checkBoxTex.name = \"StatUICheckBox\";\r\n            Loader.cacheRes(checkBoxTex.name, checkBoxTex, Loader.TEXTURE2D);\r\n        }\r\n\r\n        let sp = this._toggleSprite = new Sprite();\r\n        sp.zOrder = 1000000;\r\n        let leftText = new Text();\r\n        leftText.pos(5, 5);\r\n        leftText.color = \"#ffffff\";\r\n        leftText.fontSize = fontSize;\r\n        sp.addChild(leftText);\r\n\r\n        leftText.text = Text._testWord;\r\n        let h = leftText.textHeight + leftText.leading;\r\n\r\n        strArray.length = 0;\r\n        for (let one of this._toggleView)\r\n            strArray.push(one.title);\r\n        leftText.text = strArray.join(\"\\n\");\r\n\r\n        let toggles = new Sprite();\r\n        toggles.pos(leftText.textWidth + 15, 5);\r\n        sp.addChild(toggles);\r\n\r\n        this._checkBoxArray = [];\r\n        for (let i = 0; i < this._toggleView.length; i++) {\r\n            let one = this._toggleView[i];\r\n\r\n            let cb = new CheckBox(checkBoxTex.name);\r\n            cb.selected = (Stat as any)[one.value];\r\n            cb.scale(12, 12);\r\n            cb.pos(0, i * h + 2);\r\n            cb.size(12, 12);\r\n            toggles.addChild(cb);\r\n            this._checkBoxArray.push(cb);\r\n        }\r\n\r\n        sp.size(leftText.textWidth + 40, leftText.textHeight + 10);\r\n        sp.graphics.clear();\r\n        sp.graphics.alpha(0.5);\r\n        sp.graphics.drawRect(0, 0, sp.width, sp.height, \"#999999\");\r\n        sp.graphics.alpha(2);\r\n    }\r\n\r\n    /**\r\n     * @en Display the performance statistics.\r\n     * @param x The X-axis display position. \r\n     * @param y The Y-axis display position.\r\n     * @param views The UI parameter array for displaying statistics.\r\n     * @zh 显示性能统计信息。\r\n     * @param x X轴显示位置。\r\n     * @param y Y轴显示位置。\r\n     * @param views 用于显示统计信息的UI参数数组。\r\n     */\r\n    show(x?: number, y?: number, views?: Array<StatUIParams>): void {\r\n        x = x || 0;\r\n        y = y || 0;\r\n        views = views || Stat.AllShow;\r\n\r\n        this._view = views;\r\n        this._show = true;\r\n\r\n        if (!this._sp)\r\n            this.createUI();\r\n        this._sp.pos(x, y);\r\n    }\r\n\r\n    /**\r\n     * @en Display the toggle UI for performance statistics.\r\n     * @param x The X-axis display position.\r\n     * @param y The Y-axis display position.\r\n     * @param views The toggle UI parameter array for displaying statistics.\r\n     * @zh 显示性能统计的切换UI。\r\n     * @param x X轴显示位置。\r\n     * @param y Y轴显示位置。\r\n     * @param views 用于显示统计信息的切换UI参数数组。\r\n     */\r\n    showToggle(x?: number, y?: number, views?: Array<StatToggleUIParams>) {\r\n        x = x || 0;\r\n        y = y || 0;\r\n        views = views || Stat.AllToggle;\r\n\r\n        this._toggleView = views;\r\n        this._showToggle = true;\r\n\r\n        if (!this._toggleSprite)\r\n            this.createToggleUI();\r\n\r\n        Laya.stage.addChild(this._toggleSprite);\r\n        this._toggleSprite.pos(x, y);\r\n    }\r\n\r\n    /**\r\n     * @en Hides performance statistics.\r\n     * @zh 隐藏性能统计信息。\r\n     */\r\n    hide(): void {\r\n        this._show = false;\r\n        this._showToggle = false;\r\n        if (this._toggleSprite)\r\n            this._toggleSprite.removeSelf();\r\n    }\r\n\r\n    /**\r\n     * @en Update the performance statistics.\r\n     * @zh 更新性能统计信息。\r\n     */\r\n    update(): void {\r\n        if (this._show) {\r\n            strArray.length = 0;\r\n            for (let i = 0; i < this._view.length; i++) {\r\n                let item: StatUIParams = this._view[i];\r\n                let isAverage: boolean = item.mode == \"average\";\r\n\r\n                let value: any = (Stat as any)[item.value];\r\n                (item.units == \"M\") && (value = Math.floor(value / (1024 * 1024) * 100) / 100);\r\n                (item.units == \"K\") && (value = Math.floor(value / (1024) * 100) / 100);\r\n\r\n                if (isAverage) {\r\n                    value /= Stat._count;\r\n                    value = Math.floor(value);\r\n                }\r\n\r\n                (item.units == \"M\") && (value += \"M\");\r\n                (item.units == \"K\") && (value += \"K\");\r\n\r\n                strArray.push(value);\r\n            }\r\n            this._txt.text = strArray.join(\"\\n\");\r\n        }\r\n\r\n        if (this._showToggle) {\r\n            for (let i = 0; i < this._toggleView.length; i++) {\r\n                let one = this._toggleView[i];\r\n                (Stat as any)[one.value] = this._checkBoxArray[i].selected;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Render the performance statistics.\r\n     * @param ctx The rendering context.\r\n     * @param x The X-axis render position.\r\n     * @param y The Y-axis render position.\r\n     * @zh 渲染性能统计信息。\r\n     * @param ctx 渲染上下文。\r\n     * @param x X轴显示位置。\r\n     * @param y Y轴显示位置。\r\n     */\r\n    render(ctx: any, x: number, y: number) {\r\n        this._show && this._sp && this._sp.render(ctx, 0, 0);\r\n    }\r\n}\r\n\r\nconst fontSize: number = 16;\r\nconst strArray: Array<string> = [];\r\nvar checkBoxTex: Texture2D;","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { AutoBitmap } from \"./AutoBitmap\";\r\nimport { Box } from \"./Box\";\r\nimport { Button } from \"./Button\";\r\nimport { CheckBox } from \"./CheckBox\";\r\nimport { Clip } from \"./Clip\";\r\nimport { ColorPicker } from \"./ColorPicker\";\r\nimport { ComboBox } from \"./ComboBox\";\r\nimport { Dialog } from \"./Dialog\";\r\nimport { DialogManager } from \"./DialogManager\";\r\nimport { FontClip } from \"./FontClip\";\r\nimport { HBox } from \"./HBox\";\r\nimport { HScrollBar } from \"./HScrollBar\";\r\nimport { HSlider } from \"./HSlider\";\r\nimport { Image } from \"./Image\";\r\nimport { Label } from \"./Label\";\r\nimport { LayoutBox } from \"./LayoutBox\";\r\nimport { List } from \"./List\";\r\nimport { Panel } from \"./Panel\";\r\nimport { ProgressBar } from \"./ProgressBar\";\r\nimport { Radio } from \"./Radio\";\r\nimport { RadioGroup } from \"./RadioGroup\";\r\nimport { ScaleBox } from \"./ScaleBox\";\r\nimport { ScrollBar } from \"./ScrollBar\";\r\nimport { Slider } from \"./Slider\";\r\nimport { Tab } from \"./Tab\";\r\nimport { TextArea } from \"./TextArea\";\r\nimport { TextInput } from \"./TextInput\";\r\nimport { TipManager } from \"./TipManager\";\r\nimport { Tree } from \"./Tree\";\r\nimport { UIComponent } from \"./UIComponent\";\r\nimport { UIGroup } from \"./UIGroup\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { VBox } from \"./VBox\";\r\nimport { View } from \"./View\";\r\nimport { ViewStack } from \"./ViewStack\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { VSlider } from \"./VSlider\";\r\nimport { OpenDataContextView } from \"./OpenDataContextView\";\r\nimport { StatUI } from \"./StatUI\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nlet c = ClassUtils.regClass;\r\nc(\"AutoBitmap\", AutoBitmap);\r\nc(\"Box\", Box);\r\nc(\"Button\", Button);\r\nc(\"CheckBox\", CheckBox);\r\nc(\"Clip\", Clip);\r\nc(\"ColorPicker\", ColorPicker);\r\nc(\"ComboBox\", ComboBox);\r\nc(\"Dialog\", Dialog);\r\nc(\"DialogManager\", DialogManager);\r\nc(\"FontClip\", FontClip);\r\nc(\"HBox\", HBox);\r\nc(\"HScrollBar\", HScrollBar);\r\nc(\"HSlider\", HSlider);\r\nc(\"Image\", Image);\r\nc(\"Label\", Label);\r\nc(\"LayoutBox\", LayoutBox);\r\nc(\"List\", List);\r\nc(\"Panel\", Panel);\r\nc(\"ProgressBar\", ProgressBar);\r\nc(\"Radio\", Radio);\r\nc(\"RadioGroup\", RadioGroup);\r\nc(\"ScaleBox\", ScaleBox);\r\nc(\"ScrollBar\", ScrollBar);\r\nc(\"Slider\", Slider);\r\nc(\"Tab\", Tab);\r\nc(\"TextArea\", TextArea);\r\nc(\"TextInput\", TextInput);\r\nc(\"TipManager\", TipManager);\r\nc(\"Tree\", Tree);\r\nc(\"UIGroup\", UIGroup);\r\nc(\"UIUtils\", UIUtils);\r\nc(\"VBox\", VBox);\r\nc(\"View\", View);\r\nc(\"ViewStack\", ViewStack);\r\nc(\"VScrollBar\", VScrollBar);\r\nc(\"VSlider\", VSlider);\r\nc(\"UIComponent\", UIComponent);\r\n\r\nc(\"OpenDataContextView\", OpenDataContextView);\r\nc(\"StatUI\", StatUI);"],"mappings":"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","ignoreList":[]}