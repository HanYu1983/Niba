{"version":3,"names":["DepthCasterData","createDepthCasterUniformBlock","DepthCasterUBOData","uniformpara","Map","set","Shader3D","propertyNameToID","UniformBufferParamsType","Vector4","Vector3","UnifromBufferData","DepthPass","__init__","DEPTHPASS","getDefineByName","DEFINE_SHADOW_BIAS","DEPTHTEXTURE","DEPTHNORMALSTEXTURE","DEPTHZBUFFERPARAMS","SHADOWUNIFORMBLOCK","UniformBufferObject","UBONAME_SHADOW","constructor","Config3D","_uniformBlock","this","_castDepthData","_castDepthUBO","getBuffer","create","BufferUsage","Dynamic","getbyteLength","getTarget","camera","depthType","depthTextureFormat","_viewPort","viewport","_camera","DepthTextureMode","Depth","depthTexture","_depthTexture","RenderTexture","createFromPool","width","height","RenderTargetFormat","None","DepthNormals","depthNormalTexture","_depthNormalsTexture","R8G8B8A8","MotionVectors","_setupDepthModeShaderValue","far","farPlane","near","nearPlane","_zBufferParams","setValue","_shaderValues","setVector","SHADOW_BIAS","setTexture","cleanUp","recoverToPool","KeyframeNode","_ownerPath","_propertys","_keyFrames","ownerPathCount","length","propertyCount","keyFramesCount","_setOwnerPathCount","value","_setOwnerPathByIndex","index","_joinOwnerPath","sep","join","_setPropertyCount","_setPropertyByIndex","_joinProperty","_setKeyframeCount","_setKeyframeByIndex","getOwnerPathByIndex","getPropertyByIndex","getKeyframeByIndex","AnimationEvent","WeightedMode","KeyFrameValueType","Keyframe","cloneTo","destObject","time","clone","dest","defaultWeight","FloatKeyframe","super","inWeight","outWeight","weightedMode","destKeyFrame","inTangent","outTangent","f","QuaternionKeyframe","weightMode","Quaternion","destKeyFarme","Vector3Keyframe","AnimationClipParser03","READ_DATA","_DATA","offset","_reader","getUint32","size","READ_BLOCK","count","_BLOCK","getUint16","blockStarts","blockLengths","i","push","READ_STRINGS","prePos","pos","_strings","readUTFString","parse","clip","reader","_animationClip","n","blockName","fn","Error","call","READ_ANIMATIONS","j","node","startTimeTypes","startTimeTypeCount","getFloat32","name","clipDur","_duration","islooping","getByte","_frameRate","getInt16","nodeCount","nodes","_nodes","nodesMap","_nodesMap","nodesDic","_nodesDic","setNodeByIndex","_indexInList","type","getUint8","pathLength","nodePath","mapArray","propertyOwner","propertyLength","fullPath","keyframeCount","floatKeyframe","floatArrayKeyframe","x","y","z","quaArrayKeyframe","inTangentQua","outTangentQua","valueQua","w","eventCount","event","Math","min","eventName","params","paramCount","getInt32","addEvent","Vector2Keyframe","Vector2","Vector4Keyframe","KeyframeNodeOwner","indexInList","referenceCount","updateMark","property","defaultValue","crossFixedValue","isMaterial","saveCrossFixedValue","animatorDataSetCallBack","callBackOwner","callbackFun","apply","callParams","getCallbackNode","callbackFunData","funPropertys","split","AnimationClipParser04","version","_version","propertyChangePath","paramLen","callParms","Float","Position","Scale","RotationEuler","Rotation","quaternionKeyframe","vec2Keyfram","inTangentV2","outTangentV2","valueV2","Color","vec4Keyfram","inTangentV4","outTangentV4","valueV4","isWeight","In","Both","Out","weidhtMode","weightModeV4","inWeightQua","outWeightQua","weightModeV2","inWeightV2","outWeightV2","weightMode_V4","inWeightV4","outWeightV4","HalfFloatUtils","convertToNumber","KeyframeNodeList","getNodeByIndex","TextureGenerator","lightAttenTexture","maxX","maxY","data","sqrRange","atten","floor","haloTexture","xFac","yFac","_generateTexture2D","texture","textureWidth","textureHeight","func","format","TextureFormat","R8G8B8","Alpha8","Uint8Array","setPixelsData","Utils3D","_createFloatTextureBuffer","floatTex","Texture2D","R32G32B32A32","filterMode","FilterMode","Point","wrapModeU","WrapMode","Clamp","wrapModeV","anisoLevel","_rotationTransformScaleSkinAnimation","tx","ty","tz","qx","qy","qz","qw","sx","sy","sz","outArray","outOffset","ai0","ai1","ai2","ai3","re","_tempArray16_0","se","_tempArray16_1","tse","_tempArray16_2","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","billboardTrans","v0","cameraDir","cameraUp","out","normalize","_tempV1","cross","_tempV0","scale","add","PointinTriangle","A","B","C","P","vsub","_tempVector3_0","v1","_tempVector3_1","v2","_tempVector3_2","dot00","dot","dot01","dot02","dot11","dot12","inverDeno","u","v","_computeBoneAndAnimationDatasByBindPoseMatrxix","bones","curData","inverGlobalBindPose","outBonesDatas","outAnimationDatas","boneIndexToMesh","parentOffset","matOffset","boneLength","keyframeWidth","parentIndex","mulMatrixByArray","mulMatrixByArrayAndMatrixFast","_computeAnimationDatasByArrayAndMatrixFast","bonesDatas","_computeBoneAndAnimationDatasByBindPoseMatrxixOld","arrayOffset","_computeAnimationDatasByArrayAndMatrixFastOld","_computeRootAnimationData","animationDatas","createAffineTransformationArray","transformVector3ArrayByQuat","sourceArray","sourceOffset","rotation","ix","iy","iz","iw","leftArray","leftOffset","rightArray","rightOffset","_tempArray16_3","mulMatrixByArrayFast","rightMatrix","rightMatrixE","elements","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","ai0LeftOffset","ai1LeftOffset","ai2LeftOffset","ai3LeftOffset","ai0OutOffset","ai1OutOffset","ai2OutOffset","ai3OutOffset","tX","tY","tZ","rX","rY","rZ","rW","sX","sY","sZ","xy","xz","yz","transformVector3ArrayToVector3ArrayCoordinate","source","transform","result","resultOffset","coordinateX","coordinateY","coordinateZ","transformElem","transformVector3ArrayToVector3ArrayNormal","transformLightingMapTexcoordArray","lightingMapScaleOffset","getURLVerion","url","indexOf","substr","_createAffineTransformationArray","trans","rot","outE","_mulMatrixArray","left","right","l","r","e","l11","l12","l13","l14","l21","l22","l23","l24","l31","l32","l33","l34","l41","l42","l43","l44","r11","r12","r13","r14","r21","r22","r23","r24","r31","r32","r33","r34","r41","r42","r43","r44","arcTanAngle","PI","atan","angleTo","from","location","angle","subtract","TEMPVector30","asin","transformQuat","quaternionWeight","weight","quaternionConjugate","scaleWeight","s","pow","abs","scaleBlend","sa","sb","saw","sbw","sng","matrix4x4MultiplyFFF","a","b","Float32Array","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","matrix4x4MultiplyMFM","_buildTexture2D","colorFunc","mipmaps","_drawBound","debugLine","boundBox","color","lineCount","maxLineCount","start","end","max","addLine","_getHierarchyPath","rootSprite","checkSprite","path","sprite","parent","_parent","getChildIndex","_getNodeByHierarchyPath","invPath","getChildAt","_getParentNodeByHierarchyPath","pathlength","uint8ArrayToArrayBuffer","rendertexture","pixelArray","colorFormat","R16G16B16A16","toString","getData","ori","pixels","bs","LayaEnv","isConch","canv","HTMLCanvas","lock","ctx2d","getContext","imgdata","createImageData","Uint8ClampedArray","putImageData","toDataURL","destroy","uint8ArrayToArrayBufferAsync","getDataAsync","then","Promise","resolve","_compIdToNode","Object","window","getRTBase64","AnimationClip","Resource","_parse","Byte","load","complete","ILaya","loader","Loader","ANIMATIONCLIP","duration","_animationEvents","_weightModeHermite","nextweightMode","_hermiteInterpolate","frame","nextFrame","t","dur","t0","t1","Number","isFinite","t2","t3","c","d","_hermiteInterpolateVector3","p0","tan0","p1","tan1","_hermiteCurveSplineWeight","_hermiteInterpolateQuaternion","_hermiteInterpolateVector4","_hermiteInterpolateVector2","frameValue","frametime","frameOutWeight","frameOutTangent","nextframeValue","nextframetime","nextframeInweight","nextframeIntangent","Eps","y1","wt1","wt2","dx","dy","yp1","yp2","wt2s","fg","fpg","fppg","_curveInterpolate","_evaluateClipDatasRealTime","playCurTime","realTimeCurrentFrameIndexes","addtive","frontPlay","outDatas","avatarMask","nextFrameIndex","keyFrames","frameIndex","getTransformActive","isEnd","nextFarme","clipData","_evaluateFrameNodeVector3DatasRealTime","firstFrameValue","clipQuat","_evaluateFrameNodeQuaternionDatasRealTime","tempQuat","_tempQuaternion0","firstFrameValueQua","multiply","v2Data","_evaluateFrameNodeVector2DatasRealTime","v2FrameValue","v4Data","_evaluateFrameNodeVector4DatasRealTime","v4FrameValue","frameData","nextKeyFrame","startTime","firstFrameDatas","_binarySearchEventIndex","mid","midValue","splice","_disposeResource","Laya3DRender","ShaderDataType","StaticFlag","FrustumCorner","volumeIntersectType","AmbientMode","ReflectionProbeMode","RenderBitFlag","IrradianceMode","Sprite3D","Node","WORLDMATRIX","WORLDINVERTFRONT","sprite3DCommandUniformMap","LayaGL","renderDeviceFactory","createGlobalUniformMap","addShaderUniform","Matrix4x4","instantiate","original","worldPositionStays","position","destSprite3D","addChild","worldMatrix","res","runWith","id","_id","layer","_layer","Event","LAYERCHANGE","isStatic","_isStatic","StaticBatch","Normal","staticMask","_transform","scene","_scene","_isRenderNode","_uniqueIDCounter","_is3D","Render3DModuleDataFactory","createTransform","_onActive","Stat","sprite3DCount","_onInActive","_onAdded","parent3D","_setParent","_onWorldTransform","_onRemoved","onStartListeningToType","startsWith","_setBit","NodeFlags","PROCESS_COLLISIONS","PROCESS_TRIGGERS","spriteMap","undefined","active","tag","loccalPosition","localPosition","fromArray","rotationEuler","localRotationEuler","localRotation","localScale","_cloneTo","srcRoot","dstRoot","_destroyed","destTrans","_createSprite3DInstance","scrSprite","_create","children","_children","child","_parseSprite3DInstance","dstSprite","srcChildren","dstChildren","dstSprite3D","destroyChild","Plane","normal","distance","createPlaneBy3P","point0","point1","point2","x1","z1","invPyth","sqrt","normalEX","normalEY","normalEZ","magnitude","PlaneIntersectionType_Back","PlaneIntersectionType_Front","PlaneIntersectionType_Intersecting","Ray","origin","direction","at","ContainmentType","Disjoint","Contains","Intersects","CollisionUtils","distancePlaneToPoint","plane","point","distanceBoxToPoint","box","boxMin","boxMineX","boxMineY","boxMineZ","boxMax","boxMaxeX","boxMaxeY","boxMaxeZ","pointeX","pointeY","pointeZ","distanceBoxToBox","box1","box2","delta","box1Mine","box1MineX","box1MineY","box1MineZ","box1Maxe","box1MaxeX","box1MaxeY","box1MaxeZ","box2Mine","box2MineX","box2MineY","box2MineZ","box2Maxe","box2MaxeX","box2MaxeY","box2MaxeZ","distanceSphereToPoint","sphere","distanceSquared","center","radius","distanceSphereToSphere","sphere1","sphere2","intersectsRayAndTriangleRD","ray","vertex1","vertex2","vertex3","rayO","rayOeX","rayOeY","rayOeZ","rayD","rayDeX","rayDeY","rayDeZ","v1eX","v1eY","v1eZ","v2eX","v2eY","v2eZ","v3eX","v3eY","v3eZ","_tempV30eX","_tempV30","_tempV30eY","_tempV30eZ","_tempV31eX","_tempV31","_tempV31eY","_tempV31eZ","_tempV32eX","_tempV32","_tempV32eY","_tempV32eZ","determinant","MathUtils3D","isZero","inversedeterminant","_tempV33eX","_tempV33","_tempV33eY","_tempV33eZ","triangleU","_tempV34eX","_tempV34","_tempV34eY","_tempV34eZ","triangleV","raydistance","intersectsRayAndTriangleRP","ZERO","intersectsRayAndPoint","zeroTolerance","intersectsRayAndRay","ray1","ray2","ray1o","ray1oeX","ray1oeY","ray1oeZ","ray1d","ray1deX","ray1deY","ray1deZ","ray2o","ray2oeX","ray2oeY","ray2oeZ","ray2d","ray2deX","ray2deY","ray2deZ","tempV3","denominator","scalarLength","nearEqual","dets","point1e","point2e","intersectsPlaneAndTriangle","test1","intersectsPlaneAndPoint","test2","test3","intersectsRayAndPlaneRD","planeNor","intersectsRayAndPlaneRP","scaDis","intersectsRayAndBoxRD","rayoe","rayoeX","rayoeY","rayoeZ","rayde","raydeX","raydeY","raydeZ","boxMine","boxMaxe","tmax","MaxValue","inverse","temp","inverse1","t4","temp1","inverse2","t5","t6","temp2","intersectsRayAndBoxRP","intersectsRayAndSphereRD","sphereR","discriminant","intersectsRayAndSphereRP","intersectsSphereAndTriangle","sphereC","closestPointPointTriangle","intersectsPlaneAndPlane","plane1","plane2","intersectsPlaneAndPlaneRL","line","plane1nor","plane2nor","intersectsPlaneAndBox","planeD","planeNoreX","planeNoreY","planeNoreZ","intersectsPlaneAndSphere","intersectsBoxAndBox","intersectsBoxAndSphere","nearest","intersectsSphereAndSphere","radiisum","boxContainsPoint","boxContainsBox","boxContainsSphere","sphereCeX","sphereCeY","sphereCeZ","sphereContainsPoint","sphereContainsTriangle","sphereContainsBox","_tempV30e","radiusSquared","scalarLengthSquared","sphereContainsSphere","sphere1R","sphere2R","d1","d2","d3","d4","d5","d6","vc","vb","va","w3","denom","w2","_tempV35","_tempV36","closestPointPlanePoint","planeN","closestPointBoxPoint","closestPointSpherePoint","closestPointSphereSphere","sphere1C","BoundFrustum","getPlanesFromMatrix","m","np","fp","lp","rp","tp","bp","matrixE","nearNorE","farNorE","leftNorE","rightNorE","topNorE","bottomNorE","matrix","_matrix","initBoundingPlane","_near","_far","_left","_right","_top","_bottom","top","bottom","equalsBoundFrustum","other","equalsOtherMatrix","equalsObj","obj","bf","getPlane","get3PlaneInterPoint","p2","p3","p1Nor","p2Nor","p3Nor","getCorners","corners","nearBottomRight","nearTopRight","nearTopLeft","nearBottomLeft","FarBottomRight","FarTopRight","FarTopLeft","FarBottomLeft","containsPoint","planeResult","intersects","minX","minY","minZ","maxZ","nearNormal","leftNormal","rightNormal","bottomNormal","topNormal","farNormal","containsBoundBox","p","containsBoundSphere","Picker","calculateCursorRay","viewPort","projectionMatrix","viewMatrix","world","nearSource","_tempVector30","nerSourceE","minDepth","farSource","_tempVector31","farSourceE","maxDepth","nearPoint","farPoint","_tempVector32","unprojectFromWVP","outDire","rayIntersectsTriangle","edge1","edge2","directionCrossEdge2","MIN_VALUE","NaN","inverseDeterminant","distanceVector","_tempVector33","rayDistance","distanceCrossEdge1","_tempVector34","rayPlaneIntersection","ddotn","Transform3D","EventDispatcher","isDefaultMatrix","_getTransformFlag","TRANSFORM_LOCALMATRIX","localMatrix","_isDefaultMatrix","_isFrontFaceInvert","TRANSFORM_WORLDSCALE","getWorldLossyScale","isInvert","_faceInvert","_frontFaceValue","getFrontFaceValue","owner","_owner","worldNeedUpdate","TRANSFORM_WORLDMATRIX","localPositionX","_localPosition","localPositionY","localPositionZ","_setTransformFlag","_onWorldPositionTransform","localRotationX","localRotationY","localRotationZ","localRotationW","TRANSFORM_LOCALQUATERNION","eulerE","_localRotationEuler","createFromYawPitchRoll","_angleToRandin","_localRotation","TRANSFORM_LOCALEULER","_onWorldRotationTransform","localScaleX","_localScale","localScaleY","localScaleZ","_onWorldScaleTransform","localRotationEulerX","localRotationEulerY","localRotationEulerZ","getYawPitchRoll","euler","createAffineTransformation","_localMatrix","isIdentity","decomposeTransRotScale","TRANSFORM_WORLDPOSITION","worldMatE","_position","parentInvMat","_tempMatrix0","invert","transformCoordinate","TRANSFORM_WORLDQUATERNION","_rotation","TRANSFORM_WORLDEULER","rotationEulerE","_rotationEuler","effectiveTrans","_worldMatrix","_scale","_transformFlag","_initProperty","_getScaleMatrix","invRotation","invRotationMat","_tempMatrix3x30","worldRotScaMat","_tempMatrix3x31","scaMat","_tempMatrix3x32","Matrix3x3","createFromMatrix4x4","createRotationQuaternion","parentChilds","_onWorldPositionRotationTransform","TRANSFORM_CHANGED","_onWorldPositionScaleTransform","translate","translation","isLocal","createFromQuaternion","rotate","isRadian","getForward","forward","worldMatElem","getUp","up","getRight","lookAt","target","isCamera","eye","rotationLookAt","worldPosition","objLookat","scaMatE","setWorldLossyScale","scaleMat","_tempMatrix3x33","localScaleMat","localScaleMatE","parInvScaleMat","createFromScaling","localToGlobal","transformV3ToV3","globalToLocal","toLocalNormal","TransformNormal","toDir","dir","rotationTo","UnitX","tmpVec3","UnitY","createFromAxisAngle","console","warn","TRANSFORM_LOCALPOS","TRANSFORM_LOCALSCALE","RenderableSprite3D","SHADERDEFINE_RECEIVE_SHADOW","SAHDERDEFINE_LIGHTMAP","SHADERDEFINE_LIGHTMAP_DIRECTIONAL","LIGHTMAPSCALEOFFSET","LIGHTMAP","LIGHTMAP_DIRECTION","PICKCOLOR","REFLECTIONCUBE_PROBEPOSITION","REFLECTIONCUBE_PROBEBOXMAX","REFLECTIONCUBE_PROBEBOXMIN","VOLUMETRICGI_PROBECOUNTS","VOLUMETRICGI_PROBESTEPS","VOLUMETRICGI_PROBESTARTPOS","VOLUMETRICGI_PROBEPARAMS","VOLUMETRICGI_IRRADIANCE","VOLUMETRICGI_DISTANCE","AMBIENTCOLOR","AMBIENTSH","AMBIENTINTENSITY","REFLECTIONINTENSITY","IBLTEX","IBLROUGHNESSLEVEL","commandUniform","SHADERDEFINE_MORPHTARGET","SHADERDEFINE_MORPHTARGET_POSITION","SHADERDEFINE_MORPHTARGET_NORMAL","SHADERDEFINE_MORPHTARGET_TANGENT","MorphTex","MorphParams","MorphAttriOffset","MorphActiceTargets","MorphActiveCount","Buffer","Int","REFLECTIONTEXTURE","REFLECTIONCUBE_HDR_PARAMS","TextureCube","AMBIENTSHAR","AMBIENTSHAG","AMBIENTSHAB","AMBIENTSHBR","AMBIENTSHBG","AMBIENTSHBB","AMBIENTSHC","_onActiveInScene","_addToInitStaticBatchManager","_setBelongScene","_setUnBelongScene","MeshSprite3DShaderDeclaration","Bounds","merge","containPoint","_imp","getMax","getMin","setMin","setMax","setCenter","getCenter","setExtent","getExtent","createBounds","_getUpdateFlag","_setUpdateFlag","_getCenter","_getExtent","_getMin","extent","_getMax","_rotateExtents","extents","extentsX","extentsY","extentsZ","matE","_tranform","getBoundBox","_getBoundBox","calculateBoundsintersection","bounds","_UPDATE_MIN","_UPDATE_MAX","_UPDATE_CENTER","_UPDATE_EXTENT","Volume","Component","_aroundVolumeCacheNum","_bounds","_primitiveBounds","_importance","runInEditor","_type","boundsMax","_reCaculateBoundBox","boundsMin","probePosition","importance","_onEnable","on","_VolumeChange","_volumeManager","_onDisable","off","remove","_needUpdateAllRender","reManager","_regVolumeManager","ReflectionProbeManager","_reflectionProbes","SingletonList","_sceneReflectionProbe","ReflectionProbe","boxProjection","_isScene","sceneReflectionProbe","_updateRenderObject","baseRender","mainProbe","overlop","maxOverlap","renderBounds","renflectProbe","probReflection","volume","handleMotionlist","motionObjects","render","_surportReflectionProbe","reflectionMode","reCaculateAllRenderObjects","baseRenders","Sprite3DRenderDeclaration","VolumetricGIManager","_GIVolumes","removeVolumetricGI","renderer","_baseRenderNode","shaderData","removeDefine","SHADERDEFINE_VOLUMETRICGI","lightProbe","currentVolume","overlap","volumes","_surportVolumetricGI","renders","VolumeManager","_motionObjects","_volumeList","_reflectionProbeManager","ReflectionProbeVolumeType","_volumetricGIManager","VolumetricGIType","reflectionProbeManager","volumetricGIManager","addMotionObject","renderObj","removeMotionObject","mainVolume","clearMotionObjects","needreCaculateAllRenderObjects","fill","ILaya3D","Scene3D","Laya3D","getID","reflectionCount","_ambientColor","_dataModule","createReflectionProbe","bound","ambientIntensity","reflectionIntensity","_reflectionProbeID","ambientMode","SolidColor","_updateMark","setProbePosition","ambientColor","setAmbientColor","ambientSH","_ambientSH","SphericalHarmonics","setAmbientSH","iblTex","_iblTex","_removeReference","_addReference","_texture","iblTexRGBD","_onDestroy","TEMPVECTOR3","defaultTextureHDRDecodeValues","BaseRender","shaderValueInit","getMeshDefine","mesh","_subMeshes","vertexElements","getSubMesh","_vertexBuffer","vertexDeclaration","_vertexElements","_elementUsage","VertexMesh","MESH_COLOR0","SHADERDEFINE_COLOR","MESH_TEXTURECOORDINATE0","SHADERDEFINE_UV0","MESH_TEXTURECOORDINATE1","SHADERDEFINE_UV1","MESH_TANGENT0","SHADERDEFINE_TANGENT","changeVertexDefine","oldMesh","defineDatas","lastValue","_meshVerticeDefine","addDefine","SHADERDEFINE_GI_LEGACYIBL","SHADERDEFINE_GI_IBL","SHADERDEFINE_IBL_RGBD","SHADERDEFINE_SPECCUBE_BOX_PROJECTION","enabled","enable","sortingFudge","renderbitFlag","boundsChange","renderNode","distanceForSort","geometryBounds","baseGeometryBounds","lightmapIndex","setLightmapIndex","lightmaps","lightmap","_getIrradientMode","irradientMode","lightmapScaleOffset","_lightmapScaleOffset","setLightmapScaleOffset","sharedMaterial","_sharedMaterials","_changeMaterialReference","element","_renderElements","material","_materialsInstance","_isSupportRenderFeature","sharedMaterials","slice","materialsInstance","sharedMats","mat","lastMat","receiveShadow","_receiveShadow","castShadow","_volume","_addRenderNode","_motionInVolume","_removeRenderNode","_probReflection","probeReflectionUpdateMark","probeReflection","blackTexture","setNumber","_lightProb","volumetricGI","lightProbUpdateMark","_sceneUpdateMark","_motionIndexList","_LOD","_createBaseRenderNode","setCommonUniformMap","_getcommonUniformMap","createShaderData","_renderid","_enabled","simple","_calculateBoundingBox","set_caculateBoundingBox","_renderUpdate","set_renderUpdatePreCall","_asynNative","renderNodeType","_setRenderElements","arrayElement","forEach","_renderElementOBJ","setRenderelements","_onWorldMatNeedChange","flag","_addReflectionProbeUpdate","_batchRender","_updateOneRender","createBaseRenderNode","renderUpdate","context","setRenderbitFlag","RenderBitFlag_Editor","_getBit","HIDE_BY_EDITOR","_changeLayer","_changeStaticMask","_addRenderObject","_removeRenderObject","_sceneRenderManager","sceneRenderableManager","removeRenderObject","destroyed","LightMap","VolumetricGI","Common","staticmask","_getInstanceMaterial","insMat","preReflection","prelightprob","_shader","_supportReflectionProbe","_batchOneRender","_statAdd","_statRemove","batch","_removeOneRender","_needRender","boundFrustum","pass","renderElement","materials","_tempBoundBoxCorners","_defaultLightmapScaleOffset","GeometryElement","bufferState","_geometryElementOBj","_deviceBufferState","_bufferState","mode","drawType","setDrawArrayParams","first","setDrawElemenParams","instanceCount","indexFormat","createRenderGeometryElement","_getType","_prepareRender","state","_updateRenderParams","clearRenderParams","_typeCounter","SkyBox","instance","MeshTopology","Triangles","DrawType","DrawElement","vertices","indices","Uint16Array","verDec","getVertexDeclaration","vertexBuffer","renderOBJCreate","createVertexBuffer3D","vertexStride","Static","indexBuffer","createIndexBuffer3D","IndexFormat","UInt16","setData","BufferState","applyState","VertexPositionTexture0","_vertexDeclaration","VertexDeclaration","VertexElement","VertexElementFormat","MESH_POSITION0","textureCoordinate0","_textureCoordinate0","SkyDome","stacks","_stacks","slices","_slices","vertexFloatCount","numberVertices","numberIndices","stackAngle","sliceAngle","vertexIndex","vertexCount","indexCount","stack","sin","cos","_radius","buffer","SkyRenderer","SUNLIGHTDIRECTION","SUNLIGHTDIRCOLOR","SKYVIEWMATRIX","SKYPROJECTIONMATRIX","SKYPROJECTIONVIEWMATRIX","_material","_cacheRenderElement","_mesh","setGeometry","meshType","_renderData","_isAvailable","geomettry","_renderGeometry","setRenderElement","skyRenderElement","isRender","RenderElement","_removeOwnerElement","_setOwnerElement","materialShaderData","materialRenderQueue","subShader","_subShader","materialId","renderSubShader","subShaderIndex","_subShaderIndex","_baseRender","renderShaderData","_createRenderElementOBJ","Render3DPassFactory","createRenderElement3D","setTransform","geometry","_geometry","InvertYScaleMat","SkyRenderElement","_viewMatrix","_projectionMatrix","_projectViewMatrix","calculateViewMatrix","cameraViewMat","setTranslationVector","caluclateProjectionMatrix","cameraProjMat","aspectRatio","fov","orthographic","halfWidth","halfHeight","createOrthoOffCenter","epsilon","yScale","tan","renderpre","invertY","tempprojectMat","TEMPMatrix0","tempProjectView","TEMPMatrix1","setMatrix4x4","setColor","_sunColor","setVector3","_sundir","BaseCamera","SHADERDEFINE_DEPTH","SHADERDEFINE_DEPTHNORMALS","SHADERDEFINE_ORTHOGRAPHIC","SHADERDEFINE_FXAA","camerauniformMap","cameraUniformMap","CAMERAPOS","VIEWMATRIX","VIEWPROJECTMATRIX","PROJECTMATRIX","CAMERADIRECTION","CAMERAUP","VIEWPORT","PROJECTION_PARAMS","OPAQUETEXTURE","OPAQUETEXTUREPARAMS","CAMERAUNIFORMBLOCK","UBONAME_CAMERA","addShaderBlockUniform","propertyName","uniformtype","createCameraUniformBlock","CameraUBOData","uniformPara","uniformMap","key","clearColor","_clearColor","toLinear","_linearClearColor","_skyRenderElement","fieldOfView","_fieldOfView","_calculateProjectionMatrix","_caculateMaxLocalYRange","maxlocalYDistance","_yrange","_nearPlane","_farPlane","vaule","_orthographic","orthographicVerticalSize","_orthographicVerticalSize","cullingMask","_cullingMask","renderingOrder","_renderingOrder","_sortCamerasByRenderingOrder","_forward","_up","_useUserProjectionMatrix","useOcclusionCulling","_renderEngine","renderEngine","_cameraUniformUBO","_cameraUniformData","_addCheckUBO","setUniformBuffer","halffield","dist","_onScreenSizeChanged","displayedInStage","cameraPool","_cameraPool","tempCamera","_prepareCameraToRender","addLayer","removeLayer","addAllLayers","removeAllLayers","resetProjectionMatrix","_addCamera","_removeCamera","stage","RESIZE","RENDERINGTYPE_SHADERDEFINE_FXAA","RENDERINGTYPE_DEFERREDLIGHTING","RENDERINGTYPE_FORWARDRENDERING","_invertYScaleMatrix","_invertYProjectionMatrix","_invertYProjectionViewMatrix","_tempMatrix4x40","RenderContext3D","_instance","GammaCorrect","destTarget","_contextOBJ","setRenderTarget","_renderTarget","RenderClearFlag","Nothing","setViewPort","scissor","setScissor","pipelineMode","cameraShaderValue","cameraData","sceneData","sceneModuleData","_sceneModuleData","changeViewport","Viewport","_tempViewport","changeScissor","tempVec4","applyContext","cameraUpdateMark","cameraUpdateMask","drawRenderElement","renderelemt","drawRenderElementOne","configPipeLineMode","createRenderContext3D","ScreenQuad","SCREENQUAD_POSITION_UV","InvertInstance","TriangleStrip","DrawArray","_bufferStateInvertUV","_vertices","_vertexBufferInvertUV","_verticesInvertUV","_screenInvertY","Command","_screenShaderData","_screenShader","find","SCREENTEXTURE_ID","SCREENTEXTURE_NAME","SCREENTEXTUREOFFSETSCALE_ID","SCREENTEXTUREOFFSETSCALE_NAME","MAINTEXTURE_TEXELSIZE_ID","MAINTEXTURE_TEXELSIZE_NAME","_commandBuffer","recover","_context","BlitScreenQuadCMD","offsetScale","shader","screenType","_SCREENTYPE_QUAD","commandbuffer","cmd","_pool","pop","_source","_defaultOffsetScale","setshader","_dest","_offsetScale","_shaderData","_sourceTexelSize","_blitQuadCMDData","createBlitQuadCMDData","_transform3D","_renderElement","getRenderCMD","getSubShaderAt","run","_internalRenderTexture","vpH","vpY","clientHeight","blitDrawCall","_SCREENTYPE_TRIANGLE","SetShaderDataCMD","nameID","shaderDataType","commandBuffer","_setRenderDataCMD","propertyID","dataType","createSetRenderDataCMD","ShaderDataType_define","SetDefineCMD","define","_setRenderDefineCMD","createSetShaderDefineCMD","BaseRenderType","ShadowCascadesMode","ShadowMode","LightType","LightMode","FrustumFace","ShadowMapFormat","MeshUtil","elementUsage","MeshFilter","getComponent","MeshRenderer","_onMeshChange","_sharedMesh","sharedMesh","RenderState","cull","_cull","blend","_blend","srcBlend","_srcBlend","dstBlend","_dstBlend","srcBlendRGB","_srcBlendRGB","dstBlendRGB","_dstBlendRGB","srcBlendAlpha","_srcBlendAlpha","dstBlendAlpha","_dstBlendAlpha","blendEquation","_blendEquation","blendEquationRGB","_blendEquationRGB","blendEquationAlpha","_blendEquationAlpha","depthTest","_depthTest","depthWrite","_depthWrite","stencilWrite","_stencilWrite","stencilTest","_stencilTest","stencilRef","_stencilRef","stencilOp","_stencilOp","createObj","CULL_BACK","BLEND_DISABLE","BLENDPARAM_ONE","BLENDPARAM_ZERO","BLENDEQUATION_ADD","DEPTHTEST_LEQUAL","STENCILTEST_OFF","STENCILOP_KEEP","STENCILOP_REPLACE","setNull","CULL_NONE","CullMode","Off","CULL_FRONT","Front","Back","BlendType","BLEND_ENABLE_ALL","BLEND_ENABLE_SEPERATE","BlendFactor","Zero","One","BLENDPARAM_SRC_COLOR","SourceColor","BLENDPARAM_ONE_MINUS_SRC_COLOR","OneMinusSourceColor","BLENDPARAM_DST_COLOR","DestinationColor","BLENDPARAM_ONE_MINUS_DST_COLOR","OneMinusDestinationColor","BLENDPARAM_SRC_ALPHA","SourceAlpha","BLENDPARAM_ONE_MINUS_SRC_ALPHA","OneMinusSourceAlpha","BLENDPARAM_DST_ALPHA","DestinationAlpha","BLENDPARAM_ONE_MINUS_DST_ALPHA","OneMinusDestinationAlpha","BLENDPARAM_SRC_ALPHA_SATURATE","SourceAlphaSaturate","BLENDPARAM_BLENDCOLOR","BlendColor","BLENDPARAM_BLEND_ONEMINUS_COLOR","OneMinusBlendColor","BlendEquationSeparate","ADD","BLENDEQUATION_SUBTRACT","SUBTRACT","BLENDEQUATION_REVERSE_SUBTRACT","REVERSE_SUBTRACT","BLENDEQUATION_MIN","MIN","BLENDEQUATION_MAX","MAX","DEPTHTEST_OFF","CompareFunction","DEPTHTEST_NEVER","Never","DEPTHTEST_LESS","Less","DEPTHTEST_EQUAL","Equal","LessEqual","DEPTHTEST_GREATER","Greater","DEPTHTEST_NOTEQUAL","NotEqual","DEPTHTEST_GEQUAL","GreaterEqual","DEPTHTEST_ALWAYS","Always","STENCILTEST_NEVER","STENCILTEST_LESS","STENCILTEST_EQUAL","STENCILTEST_LEQUAL","STENCILTEST_GREATER","STENCILTEST_NOTEQUAL","STENCILTEST_GEQUAL","STENCILTEST_ALWAYS","StencilOperation","Keep","STENCILOP_ZERO","Replace","STENCILOP_INCR","IncrementSaturate","STENCILOP_INCR_WRAP","IncrementWrap","STENCILOP_DECR","DecrementSaturate","STENCILOP_DECR_WRAP","DecrementWrap","STENCILOP_INVERT","Invert","Default","BlinnPhongMaterial","Material","__initDefine__","SHADERDEFINE_DIFFUSEMAP","SHADERDEFINE_NORMALMAP","SHADERDEFINE_SPECULARMAP","SHADERDEFINE_ENABLEVERTEXCOLOR","SHADERDEFINE_ENABLETRANSMISSION","SHADERDEFINE_THICKNESSMAP","ALBEDOTEXTURE","NORMALTEXTURE","SPECULARTEXTURE","ALBEDOCOLOR","MATERIALSPECULAR","SHININESS","TILINGOFFSET","TRANSMISSIONRATE","IBACKDIFFUSE","IBACKSCALE","THINKNESSTEXTURE","TRANSMISSIONCOLOR","AlbedoIntensity","renderMode","RENDERMODE_OPAQUE","alphaTest","renderQueue","RENDERQUEUE_OPAQUE","RENDERMODE_CUTOUT","RENDERQUEUE_ALPHATEST","RENDERMODE_TRANSPARENT","RENDERQUEUE_TRANSPARENT","blendSrc","blendDst","enableVertexColor","hasDefine","tilingOffset","getVector4ByIndex","setVector4ByIndex","albedoColor","getColorByIndex","setColorByIndex","albedoIntensity","getFloatByIndex","setFloatByIndex","specularColor","shininess","albedoTexture","getTextureByIndex","setTextureByIndex","normalTexture","specularTexture","enableTransmission","transmissionRata","backDiffuse","backScale","thinknessTexture","transmissionColor","transmissionRate","setShaderName","destMaterial","SubMeshRenderElement","_dynamicWorldPositionNormalNeedUpdate","canDynamicBatch","_onWorldMatrixChanged","instanceSubMesh","staticBatchElementList","instanceBatchElementList","vertexBatchElementList","vertexBatchVertexDeclaration","SHADERDEFINE_GPU_INSTANCE","_revertStaticBatchDefineUV1","morphTargetActiveCount","_morphWeightChange","_morphTargetValues","_meshChange","_projectionViewWorldMatrix","MeshRender","createMeshRenderNode","_createRenderElement","getMesh","filter","_getMeshDefine","_changeVertexDefine","morphTargetValues","_changeMorphTargetValue","setMorphChannelWeight","channelName","morphTargetData","channel","getMorphChannel","_applyMorphdata","morphData","channelCount","channelIndex","getMorphChannelbyIndex","lastFullWeight","targets","fullWeight","morphTargetWeight","_index","activeIndex","morphTargetActiveData","maxMorphTargetCount","getCapable","RenderCapable","Texture3D","setInt","setBuffer","meshRenderNode","_changeMorphData","maxCount","vertexDec","MESH_NORMAL0","attributeOffset","targetTexture","morphtargetChannels","targetCount","Array","subMeshCount","defaultMaterial","DrawMeshCMD","subMeshIndex","_subMeshIndex","_drawRenderCMDDData","createDrawNodeCMDData","_meshRender","_renderElemnts","sceneReflectionProb","destSubShader","destShaderData","DrawRenderCMD","_render","_drawNodeCMDData","_prematerial","SetGlobalShaderDataCMD","globalShaderData","MeshInstanceGeometry","subMesh","DrawElementInstance","_subMesh","byteCount","UInt32","UInt8","_indexStart","DrawMeshInstancedCMD","matrixs","instanceProperty","drawnums","maxInstanceCount","_matrixs","_instanceProperty","_drawnums","_updateWorldMatrixBuffer","_setInstanceBuffer","_instanceRenderElementArray","_instanceGeometryArray","_instanceWorldMatrixData","_instanceWorldMatrixBuffer","instanceWorldMatrixDeclaration","instanceBuffer","_instanceBufferState","_drawElementCMDData","createDrawElementCMDData","submeshs","instanceBufferState","vertexArray","_vertexBuffers","propertyMap","_propertyMap","_indexBuffer","worldMatrixData","setWorldMatrix","worldMatrixArray","setDrawNums","drawNums","renderUpdateElement","Camera","updateVertexBufferData","SetRTCMD","renderTexture","clearDepth","clearStencil","backgroundColor","depth","stencil","clearflag","_setRenderTargetCMD","clearColorValue","clearDepthValue","Stencil","clearStencilValue","clearFlag","_renderTexture","rt","createSetRenderTargetCMD","DrawRenderElementCMD","CommandBuffer","shadowCaster","_shadow","_commands","_renderCMDs","_name","casterShadow","_apply","runCMDList","cmdDrawCall","_applyOne","shift","runOneCMD","getCommandsSize","setShaderDataTexture","setGlobalTexture","setShaderDataColor","setGlobalColor","setShaderDataVector","setGlobalVector","setShaderDataVector3","setGlobalVector3","setShaderDataVector2","setGlobalVector2","setShaderDataNumber","setGlobalNumber","setShaderDataInt","setGlobalInt","setShaderDataMatrix","setShaderDefine","setGlobalMatrix","blitScreenQuad","blitScreenQuadByMaterial","blitScreenTriangle","BLACK","drawMesh","submeshIndex","drawRender","drawMeshInstance","DrawElement_Instance","drawMeshInstancedCMD","addCustomCMD","command","clear","ClusterData","pointLightCount","spotLightCount","Cluster","xSlices","ySlices","zSlices","maxLightsPerClusterAverage","_depthSliceParam","_xSlices","_ySlices","_zSlices","clusterTexWidth","clisterTexHeight","ceil","_clusterTexture","_clusterPixels","clusterDatas","_clusterDatas","_placePointLightToClusters","lightIndex","lightBound","zMin","zEnd","zMax","yMin","yEnd","yMax","xMin","xEnd","xMax","lightCount","_placeSpotLightToClusters","_insertConePlane","halfAngle","pNor","V1","_tempVector36","V2","_tempVector37","tanR","capRimX","capRimY","capRimZ","_shrinkSphereLightZPerspective","lightviewPos","lvZ","depthSliceParam","log2","_shrinkSpotLightZPerspective","viewLightPos","viewConeCap","pbX","pbY","pbZ","rb","paX","paY","paZ","aX","aY","aZ","dotA","eZ","_shrinkSphereLightByBoundOrth","halfX","halfY","lvX","lvY","xStride","yStride","_shrinkSpotLightByBoundOrth","eX","eY","_shrinkXYByRadiusPerspective","xPlanes","yPlanes","_shrinkSpotXYByConePerspective","viewForward","_updatePointLightPerspective","viewMat","pointLight","_tempLightBound","range","_updateSpotLightPerspective","spotLight","viewPos","spotAngle","viewFor","_updatePointLightOrth","_updateSpotLightOrth","update","camNear","lightClusterCount","curCount","_directionLights","_length","pointLights","_pointLights","poiCount","poiElements","_elements","spotLights","_spotLights","spoCount","spoElements","_updateClusterPlaneXY","_clusterXPlanes","_clusterYPlanes","widthFloat","lightOff","clusterPixels","clusterPixelsCount","freeSpace","clusterOff","pCount","sCount","setSubPixelsData","_tempVector35","PhysicsSettings","flags","maxSubSteps","fixedTimeStep","enableCCD","ccdThreshold","ccdSphereRadius","LightQueue","light","getBrightestLight","maxIntIndex","maxIntensity","intensity","_intensity","normalLightOrdering","brightestIndex","firstLight","AlternateLightQueue","Lightmap","lightmapColor","_lightmapColor","lightmapDirection","_lightmapDirection","createLightmapData","ApplyLightmapEvent","Scene3DShaderDeclaration","Light","shadowMode","shadowDistance","shadowResolution","shadowDepthBias","shadowNormalBias","shadowStrength","shadowNearPlane","lightmapBakedType","_lightmapBakedType","premode","bakeOnly","_removeFromScene","_addToScene","lightWorldMatrix","quaterian","ONE","_lightWoldMatrix","lightType","_lightType","_shadowMode","_isAlternate","_creatModuleData","_intensityColor","realTime","_setOwner","_getRenderDataModule","colorData","g","maxLightCount","_lightCount","_addToLightQueue","_alternateLights","_removeFromLightQueue","alternateLight","ShadowUtils","init","_adjustNearPlane","_adjustFarPlane","supportShadow","RenderTextureFormat_Depth","getTemporaryShadowTexture","witdh","shadowFormat","depthFormat","DEPTH_16","bit16","bit24_8","DEPTHSTENCIL_24_8","bit32","DEPTH_32","shadowMap","compareMode","TextureCompareMode","LESS","Bilinear","getShadowBias","shadowProjectionMatrix","frustumSize","Directional","Spot","Deg2Rad","texelSize","depthBias","normalBias","SoftHigh","kernelRadius","getCameraFrustumPlanes","cameraViewProjectMatrix","frustumPlanes","Near","Far","Left","Right","Top","Bottom","getFarWithRadius","getCascadesSplitDistance","twoSplitRatio","fourSplitRatio","cameraNear","shadowFar","cascadesMode","tFov","NoCascades","TwoCascades","FourCascades","applySliceTransform","shadowSliceData","atlasWidth","atlasHeight","cascadeIndex","outShadowMatrices","sliceE","oneOverAtlasWidth","oneOverAtlasHeight","resolution","offsetX","offsetY","getDirectionLightShadowCullPlanes","cameraFrustumPlanes","splitDistance","frustumCorners","_frustumCorners","backPlaneFaces","_backPlaneFaces","planeNeighbors","_frustumPlaneNeighbors","twoPlaneCorners","_frustumTwoPlaneCorners","edgePlanePoint2","_edgePlanePoint2","cullPlanes","splitNearDistance","splitNear","splitFar","sphereCenterZ","splitBoundSphere","backIndex","edgeIndex","backFace","neighborFaces","neighborFace","notBackFace","k","cullPlaneCount","getBoundSphereByFrustum","cameraPos","outBoundSphere","centerZ","k2","farSNear","farANear","getMaxTileResolutionInAtlas","tileCount","currentTileCount","getDirectionalLightMatrices","lightUp","lightSide","lightForward","shadowMatrices","boundSphere","halfShadowResolution","borderRadius","atlasBorderSize","borderDiam","sizeUnit","radiusUnit","upLen","sideLen","forwardLen","projectMatrix","viewProjectMatrix","createLookAt","offsetMat","_shadowMapScaleOffsetMatrix","_shadowMapInvertScaleOffsetMatrix","prepareShadowReceiverShaderValues","shadowMapWidth","shadowMapHeight","shadowSliceDatas","cascadeCount","shadowMapSize","splitBoundSpheres","matrixFloatCount","sphereFloatCount","unknown","ShadowCasterPass","SHADOW_LIGHT_DIRECTION","SHADOW_SPLIT_SPHERES","SHADOW_MATRICES","SHADOW_MAP_SIZE","SHADOW_MAP","SHADOW_PARAMS","SHADOW_SPOTMAP_SIZE","SHADOW_SPOTMAP","SHADOW_SPOTMATRICES","sceneUniformMap","addShaderUniformArray","_castDepthBufferData","_castDepthBufferOBJ","_castDepthCameraBufferData","_castDepthCameraBufferOBJ","getDirectLightShadowMap","cascadesCount","shadowTileResolution","atlasResolution","shadowCascadesMode","_shadowDirectLightMap","getSpotLightShadowPassData","_shadowSpotLightMap","getPointLightShadowPassData","BlitFrameBufferCMD","shaderdata","_texture_size","vph","SceneRenderManager","_sceneManagerOBJ","createSceneRenderManager","list","renderBaselist","baseRenderList","addRenderObject","object","updateMotionObjects","lists","UI3DManager","_UI3Dlist","FastSinglelist","_submitRT","rayCast","rayOri","clean","sort","_getCameraDistance","hit","_checkUIPos","destory","PostProcessRenderContext","indirectTarget","destination","compositeShaderData","deferredReleaseTextures","createRTByContextReleaseTexture","mipmap","multiSamples","sRGB","depthStencilFormat","_generateMipmap","generateDepthTexture","_gammaSpace","_inPool","PostProcessEffect","_active","_singleton","singleton","getCameraDepthTextureModeFlag","effectInit","postprocess","release","ToneMappingType","PBRRenderQuality","BlitScreenVS","ColorGradEffect","attributeMap","a_PositionTexcoord","u_OffsetScale","u_MainTex","u_MainTex_TexelSize","shaderType","ShaderFeatureType","PostProcess","SubShader","addSubShader","addShaderPass","BlitVS","renderState","SHADERDEFINE_ACES","SHADERDEFINE_CUSTOMLUT","SHADERVALUE_LUT","SHADERVALUE_LUTPARAMS","SHADERVALUE_CUSTOMLUT","SHADERVALUE_CUSTOMLUTPARAMS","toneMapping","_toneMapping","_needBuildLUT","enableSplitTone","_enableSplitTone","splitShadow","_splitShadow","splithighlights","_splithighlights","equal","splitBalance","_splitBalance","enableSMH","_enableSMH","shadows","_shadows","midtones","_midtones","highlights","_highlights","shadowLimitStart","_limits","shadowLimitEnd","highLightLimitStart","highLightLimitEnd","enableLiftGammaGain","_enableLiftGammaGain","lift","_lift","gamma","_gamma","gain","_gain","_StandardIlluminantY","_CIExyToLMS","X","Z","L","M","S","_ColorBalanceToLMSCoeffs","temperature","tint","w1","_balance","enableBalance","_enableBalance","_tint","_temperature","enableColorAdjust","_enableColorAdjust","postExposure","_postExposure","contrast","_contrast","colorFilter","_colorFilter","HueShift","_HueShift","saturation","_saturation","_lutBuilderMat","_lutSize","_u_SplitShadow","_HueSatCon","default_balance","default_splitShadow","default_splithighlights","default_shadow","default_midtones","default_highlight","default_limint","default_lift","default_gamma","default_gain","default_ColorFilter","default_HueSatCon","_blitlutParams","_lutShaderData","lutSize","_lutTex","_buildLUT","lutHeight","lutWidth","lutParams","setVector4","ACES","_postProcess","whiteTexture","_LUTShader","_enableColorGrad","_ColorGradEffect","SHADERDEFINE_BLOOM_LOW","SHADERDEFINE_BLOOM","SHADERDEFINE_FINALPASS","SHADERVALUE_MAINTEX","SHADERVALUE_BLOOMTEX","SHADERVALUE_AUTOEXPOSURETEX","SHADERVALUE_BLOOM_DIRTTEX","SHADERVALUE_BLOOMTEX_TEXELSIZE","SHADERVALUE_BLOOM_DIRTTILEOFFSET","SHADERVALUE_BLOOM_SETTINGS","SHADERVALUE_BLOOM_COLOR","recaculateCameraFlag","_depthtextureFlag","effects","_compositeShader","_compositeShaderData","_effects","_enable","commandContext","oriContext","clearEffect","addEffect","cameraDepthTextureMode","_init","internalRT","_needInternalRenderTexture","cameraTarget","_offScreenRenderTexture","_getRenderTextureFormat","screenTexture","Indirect","clearDefine","canvasWidth","_getCanvasWidth","canvasHeight","_getCanvasHeight","_screenOffsetScale","tempRenderTextures","effect","getEffect","error","classReg","removeEffect","_applyPostProcessCommandBuffers","PBRDefaultDFG","defaultDFG","_defaultDFG","DefaultDfgTexture","tex","hdrBuffer","Base64Tool","decode","hdrInfo","HDRTextureInfo","getHDRInfo","supportFloatTex","TextureFormat_R32G32B32A32","supportFloatLinearFiltering","Texture_FloatLinearFiltering","setHDRData","pixelCount","hdrPixelData","readScanLine","rgbdPixelData","maxRGB","PBRShaderLib","DEFINE_EMISSION","DEFINE_CLEARCOAT","DEFINE_CLEARCOAT_NORMAL","DEFINE_ANISOTROPY","DEFINE_IOR","DEFINE_IRIDESCENCE","DEFINE_SHEEN","DEFINE_TRANSMISSION","DEFINE_THICKNESS","addInclude","regIncludeBindUnifrom","u_IBLDFG","PBRRenderMode","PBRMetallicSmoothnessSource","ParticleSystemShapeType","EPhysicsCapable","PBRMaterial","SHADERDEFINE_ALBEDOTEXTURE","SHADERDEFINE_NORMALTEXTURE","SHADERDEFINE_PARALLAXTEXTURE","SHADERDEFINE_OCCLUSIONTEXTURE","SHADERDEFINE_EMISSIONTEXTURE","SHADERDEFINE_TRANSPARENTBLEND","SHADERDEFINE_LAYA_PBR_BRDF_HIGH","SHADERDEFINE_LAYA_PBR_BRDF_LOW","SHADERDEFINE_DETAILALBEDO","SHADERDEFINE_DETAILNORMAL","NORMALSCALE","SMOOTHNESS","OCCLUSIONTEXTURE","OCCLUSIONSTRENGTH","PARALLAXTEXTURE","PARALLAXSCALE","EMISSIONTEXTURE","EMISSIONCOLOR","EMISSIONIntensity","DETAILALBEDOTEXTURE","DETAILNORMALTEXTURE","DETAILTILLINGOFFSET","DETAILNORMALSCALE","CLEARCOAT","SHADERDEFINE_CLEARCOATTEXTURE","CLEARCOATTEXTURE","CLEARCOATROUGHNESS","SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE","CLEARCOATROUGHNESSTEXTURE","CLEARCOATNORMALTEXTURE","ANISOTROPY","SHADERDEFINE_ANISOTROPYTEXTURE","ANISOTROPYTEXTURE","ANISOTROPYROTATION","getColor","getTexture","normalTextureScale","getNumber","parallaxTexture","parallaxTextureScale","occlusionTexture","occlusionTextureStrength","smoothness","enableEmission","emissionColor","emissionIntensity","emissionTexture","getVector","detailAlbedoTexture","detailNormalTexture","detailTilingOffset","detailNormalScale","Opaque","Cutout","Fade","Transparent","anisotropyEnable","anisotropy","anisotropyTexture","anisotropyRotation","clearCoatEnable","clearCoat","clearCoatTexture","clearCoatRoughness","clearCoatRoughnessTexture","clearCoatNormalTexture","ALPHATESTVALUE","smoothnessTextureScale","renderQuality","High","PBRStandardMaterial","SHADERDEFINE_METALLICGLOSSTEXTURE","SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA","METALLICGLOSSTEXTURE","METALLIC","metallicGlossTexture","metallic","smoothnessSource","_smoothnessSource","SkyBoxMaterial","TINTCOLOR","EXPOSURE","ROTATION","TEXTURECUBE","tintColor","exposure","textureCube","SkyProceduralMaterial","SHADERDEFINE_SUN_HIGH_QUALITY","SHADERDEFINE_SUN_SIMPLE","SUNSIZE","SUNSIZECONVERGENCE","ATMOSPHERETHICKNESS","SKYTINT","GROUNDTINT","sunDisk","_sunDisk","SUN_HIGH_QUALITY","SUN_SIMPLE","SUN_NODE","sunSize","sunSizeConvergence","atmosphereThickness","skyTint","groundTint","UnlitMaterial","_albedoIntensity","RENDERMODE_ADDTIVE","MeshSprite3D","meshFilter","_meshFilter","meshRenderer","addComponent","lightmapScaleOffsetArray","meshPath","getRes","enableRender","receiveShadows","materialCount","GradientMode","Blend","Fixed","Gradient","_alphaElements","_alphaElementDatas","keyCount","colorAlphaKeysCount","maxKeyCount","_colorAlphaKeysCount","_maxAlphaKeysCount","alpha","_alphaDataBuffer","_rgbElements","_rgbElementDatas","colorRGBKeysCount","maxRGBCount","_colorRGBKeysCount","_maxRGBKeysCount","_rgbDataBuffer","rgbElements","alphaElements","_mode","_maxColorAlphaKeysCount","_maxColorRGBKeysCount","maxColorRGBKeysCount","maxColorAlphaKeysCount","_keyRanges","setMaxKeyCount","maxAlphaCount","addColorRGB","addColorAlpha","updateColorRGB","updateColorAlpha","evaluateColorRGB","lerpFactor","startSearchIndex","reverseSearch","curIndex","diff","evaluateColorAlpha","outColor","destGradientDataColor","destAlphaElements","destRGBElements","Burst","_time","minCount","_minCount","_maxCount","destBurst","GradientColor","createByConstant","constant","gradientColor","_constant","createByGradient","gradient","_gradient","createByRandomTwoConstant","minConstant","maxConstant","_constantMin","_constantMax","createByRandomTwoGradient","minGradient","maxGradient","_gradientMin","_gradientMax","constantMin","constantMax","gradientMin","gradientMax","destGradientColor","ColorOverLifetime","_color","destColorOverLifetime","destColor","FrameOverTime","rotationOverLifetime","createByOverTime","overTime","_overTime","createByRandomTwoOverTime","gradientFrameMin","gradientFrameMax","_overTimeMin","_overTimeMax","frameOverTimeData","frameOverTimeDataMin","frameOverTimeDataMax","destFrameOverTime","GradientDataNumber","createConstantData","constantValue","gradientData","_dataBuffer","currentLength","_currentLength","_formatData","gradientCount","log","getKeyByIndex","getValueByIndex","getAverageValue","total","subValue","destGradientDataNumber","destElements","GradientAngularVelocity","gradientAngularVelocity","_separateAxes","createByConstantSeparate","separateConstant","_constantSeparate","createByGradientSeparate","gradientX","gradientY","gradientZ","_gradientX","_gradientY","_gradientZ","createByRandomTwoConstantSeparate","separateConstantMin","separateConstantMax","_constantMinSeparate","_constantMaxSeparate","createByRandomTwoGradientSeparate","gradientXMin","gradientXMax","gradientYMin","gradientYMax","gradientZMin","gradientZMax","gradientWMin","gradientWMax","_gradientXMin","_gradientXMax","_gradientYMin","_gradientYMax","_gradientZMin","_gradientZMax","_gradientWMin","_gradientWMax","__constantSeparate","_constantXGradientDdata","_constantYGradientDdata","_constantZGradientDdata","__constant","_constantGradientDdata","__constantMin","_constantMinGradientDdata","__constantMax","_constantMaxGradientDdata","__constantMinSeparate","_constantXMinGradientDdata","_constantYMinGradientDdata","_constantZMinGradientDdata","__constantMaxSeparate","_constantXMaxGradientDdata","_constantYMaxGradientDdata","_constantZMaxGradientDdata","separateAxes","constantSeparate","gradientW","_gradientW","constantMinSeparate","constantMaxSeparate","destGradientAngularVelocity","GradientDataInt","_curveMin","_curveMax","destGradientDataInt","GradientSize","gradientSize","getMaxSizeInGradient","meshMode","maxSize","MAX_VALUE","destGradientSize","GradientVelocity","gradientVelocity","_gradientConstantXMin","_gradientConstantYMin","_gradientConstantZMin","_gradientConstantXMax","_gradientConstantYMax","_gradientConstantZMax","_gradientConstantX","_gradientConstantY","_gradientConstantZ","gradientConstantX","gradientConstantY","gradientConstantZ","gradientConstantXMin","gradientConstantXMax","gradientConstantYMin","gradientConstantYMax","gradientConstantZMin","gradientConstantZMax","destGradientVelocity","RotationOverLifetime","angularVelocity","_angularVelocity","destRotationOverLifetime","destAngularVelocity","BoundBox","matElements","setCenterAndExtent","tranform","toDefault","createfromPoints","points","BaseShape","randomDirection","_getShapeBoundBox","_getSpeedBoundBox","generatePositionAndDirection","rand","randomSeeds","_calculateProceduralBounds","emitterPosScale","minMaxBounds","speedBounds","maxSpeedBound","maxSpeedMin","maxSpeedMax","minSpeedBound","minSpeedMin","minSpeedMax","destShape","ShapeUtils","_randomPointUnitArcCircle","arc","getFloat","random","_randomPointInsideUnitArcCircle","_randomPointUnitCircle","_randomPointInsideUnitCircle","_randomPointUnitSphere","_randomPointInsideUnitSphere","_randomPointInsideHalfUnitBox","BoxShape","shapeType","Box","seed","CircleShape","Circle","emitFromEdge","arcDEG","deg","positionPoint","_tempPositionPoint","ConeShape","Cone","emitType","angleDEG","coneRadius2","coneLength","sinA","positionX","positionY","directionPointE","positionPointE","dirCosA","dirSinA","_tempDirectionPoint","HemisphereShape","Hemisphere","emitFromShell","SphereShape","Sphere","SizeOverLifetime","_size","destSizeOverLifetime","destSize","StartFrame","destStartFrame","TextureSheetAnimation","_frame","startFrame","_startFrame","randomRow","rowIndex","cycles","enableUVChannels","tiles","destTextureSheetAnimation","destFrame","VelocityOverLifetime","velocity","_velocity","space","destVelocityOverLifetime","destVelocity","VertexShuriKenParticle","PARTICLE_DIRECTIONTIME","PARTICLE_POSITION0","PARTICLE_COLOR0","PARTICLE_TEXTURECOORDINATE0","PARTICLE_SHAPEPOSITIONSTARTLIFETIME","PARTICLE_CORNERTEXTURECOORDINATE0","PARTICLE_STARTCOLOR0","PARTICLE_ENDCOLOR0","PARTICLE_STARTSIZE","PARTICLE_STARTROTATION","PARTICLE_STARTSPEED","PARTICLE_RANDOM0","PARTICLE_RANDOM1","PARTICLE_SIMULATIONWORLDPOSTION","PARTICLE_SIMULATIONWORLDROTATION","PARTICLE_SIMULATIONUV","VertexShurikenParticleBillboard","vertexInstanceMeshDeclaration","_vertexInstanceMeshDeclaration","vertexInstanceParticleDeclaration","_vertexInstanceParticleDeclaration","billboardVertexArray","_billboardVertexArray","billboardIndexArray","_billboardIndexArray","Single","cornerTextureCoordinate","_cornerTextureCoordinate","positionStartLifeTime","_positionStartLifeTime","startColor","_startColor","startSize","_startSize","startRotation0","_startRotation0","startRotation1","_startRotation1","startRotation2","_startRotation2","startLifeTime","_startLifeTime","startSpeed","_startSpeed","random0","_randoms0","random1","_randoms1","simulationWorldPostion","_simulationWorldPostion","ageAddScale","randoms0","randoms1","VertexShurikenParticleMesh","Rand","getFloatFromInt","getByteFromInt","seeds","_temp","Uint32Array","getUint","getSignedFloat","Emission","emissionRate","_emissionRate","emissionRateOverDistance","_emissionRateOverDistance","_bursts","getBurstsCount","getBurstByIndex","addBurst","burst","burstsCount","removeBurst","removeBurstByIndex","clearBurst","destEmission","destBursts","ShuriKenParticle3DShaderDeclaration","SHADERDEFINE_RENDERMODE_BILLBOARD","SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD","SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD","SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD","SHADERDEFINE_COLORKEYCOUNT_8","SHADERDEFINE_RANDOMCOLOROVERLIFETIME","SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE","SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE","SHADERDEFINE_ROTATIONOVERLIFETIME","SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE","SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES","SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE","SHADERDEFINE_RENDERMODE_MESH","WORLDPOSITION","WORLDROTATION","POSITIONSCALE","SIZESCALE","SCALINGMODE","GRAVITY","THREEDSTARTROTATION","SHAPE","STRETCHEDBILLBOARDLENGTHSCALE","STRETCHEDBILLBOARDSPEEDSCALE","SIMULATIONSPACE","CURRENTTIME","DRAG","VOLVELOCITYGRADIENTX","VOLVELOCITYGRADIENTY","VOLVELOCITYGRADIENTZ","VOLVELOCITYGRADIENTXMAX","VOLVELOCITYGRADIENTYMAX","VOLVELOCITYGRADIENTZMAX","VOLSPACETYPE","COLOROVERLIFEGRADIENTALPHAS","COLOROVERLIFEGRADIENTCOLORS","COLOROVERLIFEGRADIENTRANGES","MAXCOLOROVERLIFEGRADIENTALPHAS","MAXCOLOROVERLIFEGRADIENTCOLORS","MAXCOLOROVERLIFEGRADIENTRANGES","SOLSIZEGRADIENT","SOLSIZEGRADIENTX","SOLSIZEGRADIENTY","SOLSizeGradientZ","SOLSizeGradientMax","SOLSIZEGRADIENTXMAX","SOLSIZEGRADIENTYMAX","SOLSizeGradientZMAX","ROLANGULARVELOCITYGRADIENT","ROLANGULARVELOCITYGRADIENTX","ROLANGULARVELOCITYGRADIENTY","ROLANGULARVELOCITYGRADIENTZ","ROLANGULARVELOCITYGRADIENTMAX","ROLANGULARVELOCITYGRADIENTXMAX","ROLANGULARVELOCITYGRADIENTYMAX","ROLANGULARVELOCITYGRADIENTZMAX","TEXTURESHEETANIMATIONCYCLES","TEXTURESHEETANIMATIONSUBUVLENGTH","TEXTURESHEETANIMATIONGRADIENTUVS","TEXTURESHEETANIMATIONGRADIENTMAXUVS","ShurikenParticleData","_getStartLifetimeFromGradient","startLifeTimeGradient","emissionTime","lastKey","age","MathUtil","lerp","_randomInvertRoationArray","rotatonE","randomizeRotationDirection","randDic","_randomInvertRoation","rotaton","particleSystem","particleRender","autoRandomSeed","_rand","_randomSeeds","startColorType","constantStartColor","startColorConstant","startColorConstantMin","startColorConstantMax","colorOverLifetime","colorRandom","minConstantColor","maxConstantColor","particleSize","startSizeType","threeDStartSize","startSizeConstantSeparate","startSizeConstant","startSizeConstantMinSeparate","startSizeConstantMaxSeparate","startSizeConstantMin","startSizeConstantMax","sizeOverLifetime","randomSize","startRotationType","threeDStartRotation","startRotationConstantSeparate","randomRotationE","startRotation","startRotationConstant","startRotationConstantMinSeparate","startRotationConstantMaxSeparate","lerpRoationE","startRotationConstantMin","startRotationConstantMax","startLifetimeType","startLifetimeConstant","startLifetimeConstantMin","startLifetimeConstantMax","startLifeTimeGradientMin","startLifeTimeGradientMax","textureSheetAnimation","startFrameCount","title","titleX","titleY","subU","subV","startRow","startCol","startUVInfo","ShurikenParticleSystem","maxParticles","_bufferMaxParticles","newMaxParticles","_initBufferDatas","SerializeUtil","isDeserializing","_updateParticlesSimulationRestart","emission","_emission","aliveParticleCount","_firstNewElement","_firstRetiredElement","_emissionTime","shape","_shape","isAlive","_isPlaying","isEmitting","_isEmitting","isPlaying","isPaused","_isPaused","_startLifetimeType","_maxStartLifetime","_startLifetimeConstant","_startLifeTimeGradient","_startLifetimeConstantMin","_startLifetimeConstantMax","_startLifeTimeGradientMin","_startLifeTimeGradientMax","velocityOverLifetime","_velocityOverLifetime","shaDat","_ownerRender","velocityType","_colorOverLifetime","ranges","colorKey","alphaKey","minGradientColor","maxGradientColor","minalphaElements","minrgbElements","maxalphaElements","maxrgbElements","minRanges","maxRanges","_sizeOverLifetime","sizeSeparate","sizeType","_rotationOverLifetime","rotationSeparate","rotationType","_textureSheetAnimation","frameOverTime","textureAniType","_uvLengthE","_uvLength","setVector2","meshTopology","_gravityOffset","_customBounds","_useCustomBounds","_floatCountPerVertex","_startLifeTimeIndex","_timeIndex","_simulationUV_Index","_simulateUpdate","_firstActiveElement","_firstFreeElement","_drawCounter","_playStartDelay","_frameRateTime","_totalDelayTime","_emissionDistance","_emissionLastPosition","_burstsIndex","_vertexStride","_indexStride","_updateMask","_currentTime","_startUpdateLoopCount","looping","prewarm","startDelayType","startDelay","startDelayMin","startDelayMax","startSpeedType","startSpeedConstant","startSpeedConstantMin","startSpeedConstantMax","dragType","dragConstant","dragSpeedConstantMin","dragSpeedConstantMax","gravityModifier","simulationSpace","simulationSpeed","scaleMode","playOnAwake","randomSeed","isPerformanceMode","_RANDOMOFFSET","_getVertexBuffer","_getIndexBuffer","_generateBounds","speedOrigan","maxSizeScale","zDirectionSpeed","fDirectionSpeed","zEmisionOffsetXYZ","fEmisionOffsetXYZ","hemiShpere","cone","sinAngle","tanAngle","rPLCT","circle","meshSize","halfKSqrtOf2","meshBounds","endSizeOffset","offsetSize","speedZOffset","speedFOffset","velocitySpeedOffset","curveX","curveY","curveZ","gravity","gravityOffset","speedZOffsetY","speedFOffsetY","customBounds","_simulationSupported","_updateEmission","elapsedTime","loopCount","timer","_delta","_maxElapsedTime","_updateParticles","_retireActiveParticles","_freeRetiredParticles","_advanceTime","_advanceDistance","delayTime","timeIndex","_burst","fromTime","toTime","totalEmitCount","bursts","emitCount","burstTime","emitTime","lastEmissionTime","emit","stop","minEmissionTime","offsetDistance","rateOverDistance","_buffer","memorySize","_byteLength","_addMemory","indexOffset","perPartOffset","vbMemorySize","getVertexElementByUsage","_vertexCount","totalVertexCount","lastVBVertexCount","indexDatas","indexValueOffset","firstVertex","secondVertex","_tempPosition","_tempDirection","addParticle","nextFreeParticle","randomVelocityX","randomVelocityY","randomVelocityZ","randomColor","randomRotation","randomTextureAnimation","needRandomVelocity","needRandomColor","needRandomSize","needRandomRotation","needRandomTextureAnimation","meshVertices","meshVertexStride","meshPosOffset","meshCorOffset","meshUVOffset","meshVertexIndex","startIndex","startU","startV","meshVB","getFloat32Data","meshVertexDeclaration","_offset","colorElement","uvElement","vertexOffset","meshOffset","addNewParticlesToVertexBuffer","byteStride","play","pause","simulate","restart","ShurikenParticleInstanceSystem","_instanceParticleVertexBuffer","_instanceVertex","_initMeshVertex","vertex","meshVertexBuffer","meshColorOffset","perParticleDataCount","positionOffset","colorOffset","uvOffset","meshDeclaration","particleDeclaration","_meshIndexCount","_floatCountPerParticleData","meshVertexCount","vbSize","meshVertex","particleVbSize","billboardDeclaration","indexArray","meshVBSize","firstActive","activeStart","_meshFloatCountPreVertex","ShurikenParticleMaterial","SHADERDEFINE_TINTCOLOR","SHADERDEFINE_ADDTIVEFOG","DIFFUSETEXTURE","RENDERMODE_ALPHABLENDED","tilingOffsetX","_MainTex_STX","tilingOffsetY","_MainTex_STY","tilingOffsetZ","_MainTex_STZ","tilingOffsetW","_MainTex_STW","_TintColor","_TintColorR","_TintColorG","_TintColorB","_TintColorA","_MainTex_ST","tilOff","colorR","colorG","colorB","colorA","ShurikenParticleRenderer","_particleSystem","_renderMode","parSys","_finalGravity","_dragConstant","stretchedBillboardCameraSpeedScale","stretchedBillboardSpeedScale","stretchedBillboardLengthScale","ParticleRender","particleRenderNode","enableParticle","sv","setShaderData","setBool","parRender","ShuriKenParticle3D","particleRenderer","_parseModule","module","moduleData","bases","vector2s","vec2","vec2Data","vector3s","vec3","vec3Data","vector4s","vec4","vec4Data","gradientDataNumbers","gradientNumber","gradientNumberData","valueData","resources","Texture","bitmap","burstsData","brust","main","shapeData","velocityOverLifetimeData","velocityData","constantData","_initParticleVelocity","constantMinData","constantMaxData","colorOverLifetimeData","constColorData","_initParticleColor","minConstColorData","maxConstColorData","sizeOverLifetimeData","sizeData","_initParticleSize","constantMinSeparateData","constantMaxSeparateData","rotationOverLifetimeData","angularVelocityData","conSep","_initParticleRotation","minSep","maxSep","textureSheetAnimationData","_initParticleFrame","overTimeMin","overTimeMax","startFrameData","_parseOld","anglelToRad","materialData","_initStartLife","startLifetimeGradient","startLifetimeGradientMin","startLifetimeGradientMax","startSizeConstantSeparateArray","startSizeConstantSeparateElement","startSizeConstantMinSeparateArray","startSizeConstantMinSeparateElement","startSizeConstantMaxSeparateArray","startSizeConstantMaxSeparateElement","startRotationConstantSeparateArray","startRotationConstantSeparateElement","startRotationConstantMinSeparateArray","startRotationConstantMinSeparateElement","startRotationConstantMaxSeparateArray","startRotationConstantMaxSeparateElement","startColorConstantArray","startColorConstantElement","startColorConstantMinArray","startColorConstantMinElement","startColorConstantMaxArray","startColorConstantMaxElement","emissionData","sphereShape","sphereRadius","sphereEmitFromShell","sphereRandomDirection","hemiSphereShape","hemiSphereRadius","hemiSphereEmitFromShell","hemiSphereRandomDirection","coneShape","coneAngle","coneRadius","coneEmitType","coneRandomDirection","boxShape","boxX","boxY","boxZ","boxRandomDirection","circleShape","circleRadius","circleArc","circleEmitFromEdge","circleRandomDirection","tempShape","tilesData","gradientColorData","maxkeyCount","alphasData","alphas","alphaData","rgbsData","rgbs","rgbData","rgbValue","overTimeFramesData","overTimeFrame","framesData","frames","startLifetimesData","startLifetimes","velocitysData","velocitys","gradientSizeData","sizesData","sizes","angularVelocitysData","angularVelocitys","PixelLineVertex","SkinnedMeshSprite3DShaderDeclaration","SkinRenderElement","setSkinData","skinnedData","createSkinRenderElement","SkinnedMeshRenderer","_bones","__bones","_isISkinRenderNode","_ownerSkinRenderNode","setBones","localBounds","_localBounds","rootBone","_cacheRootBone","setRootBoneTransfom","_worldParams","SHADERDEFINE_BONE","SkinnedMeshRender","createSkinRenderNode","enableSkin","setCacheMesh","_onSkinMeshChange","_cacheMesh","_skinnedData","subBoneIndices","_boneIndicesList","subCount","subData","setSkinnedData","setOwnerTransform","skinRenderNode","computeSkinnedData","cloneHierachFun","rootNode","rootCheckNode","destNode","rootparent","nodeArray","checkNode","getCommomParent","pathcheck","destParent","destBone","ceckNode","lbb","SkinnedMeshSprite3D","SHADERDEFINE_SIMPLEBONE","BONES","skinnedMeshRenderer","rootBoneData","bonesData","_tempArray0","TrailMaterial","MAINTEXTURE","SHADERDEFINE_MAINTEXTURE","materialRenderMode","MaterialRenderMode","VertexTrail","vertexDeclaration1","_vertexDeclaration1","vertexDeclaration2","_vertexDeclaration2","TRAIL_POSITION0","TRAIL_OFFSETVECTOR","TRAIL_TIME0","TRAIL_TEXTURECOORDINATE0Y","TRAIL_TEXTURECOORDINATE0X","TRAIL_COLOR","SubMeshInstanceBatch","instanceWorldMatrixData","instanceSimpleAnimatorData","instanceWorldMatrixBuffer","instanceSimpleAnimatorBuffer","instanceSimpleAnimatorDeclaration","VertexPositionTerrain","TERRAIN_POSITION0","TERRAIN_NORMAL0","TERRAIN_TEXTURECOORDINATE0","TERRAIN_TEXTURECOORDINATE1","_normal","textureCoord0","_textureCoord0","textureCoord1","_textureCoord1","InstanceRenderElement","elemet","_isInPool","_InvertFront","_instanceBatchElementList","_isUpdataData","_invertFrontFace","getInvertFront","InvertFront","compileShader","_passes","_renderUpdatePre","updateInstanceData","SubMesh","_indexCount","Element_Index_Uint32","_subIndexBufferStart","_subIndexBufferCount","_setIndexRange","indexStart","canRead","_indices","_uploadVerticesData","_indexFormat","getIndices","_isReadable","setIndices","skinnedMatrixCache","batchIndex","batchBoneIndex","Mesh","MESH","inverseAbsoluteBindPoses","_inverseBindPoses","isReadable","_minVerticesUpdate","_maxVerticesUpdate","_needUpdateBounds","_instanceBufferStateType","_skinnedMatrixCaches","destroyedImmediately","Config","destroyResourceImmediatelyDefault","_getPositionElement","vertexElement","_elementFormat","_getVerticeElementData","uint8Vertices","getUint8Data","floatVertices","uint8VerStr","floatVerStr","uint8EleOffset","floatEleOffset","MESH_BLENDWEIGHT0","MESH_BLENDINDICES0","_setVerticeElementData","float8VerStr","cor","MAX_SAFE_INTEGER","_instanceWorldVertexBuffer","_instanceSimpleAniVertexBuffer","_instanceLightMapVertexBuffer","instanceLightMapScaleOffsetData","_setCPUMemory","_setGPUMemory","_btTriangleMesh","_boneNames","__convexMesh","_setSubMeshes","subMeshes","_indexInMesh","_setBuffer","instanceBufferStateType","instanceBuffer3D","MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR","MESH_INSTANCEBUFFER_TYPE_NORMAL","instanceLightMapVertexBuffer","instanceLightMapScaleOffsetDeclaration","getPositions","positions","setPositions","getColors","colors","setColors","getUVs","uvs","setUVs","getNormals","normals","setNormals","getTangents","tangents","setTangents","getBoneWeights","boneWeights","setBoneWeights","getBoneIndices","boneIndices","setBoneIndices","markAsUnreadbale","getVertices","setVertices","calculateBounds","positionElement","verticesData","floatCount","posOffset","ofset","pX","pY","pZ","getCorveMesh","_convexMesh","_PhysicsCreateUtil","getPhysicsCapable","Physics_CreateCorveMesh","createCorveMesh","destMesh","destVB","bufferUsage","ib","destIB","cpuMemory","gpuMemory","boneNames","destBoneNames","inverseBindPoses","destInverseBindPoses","_inverseBindPosesBuffer","byteLength","ArrayBuffer","cacheLength","skinnedCache","subIndexBufferStart","subIndexBufferCount","boneIndicesList","destSubmesh","PrimitiveMesh","_createMesh","createBox","long","halfLong","createCapsule","vertexFloatStride","hcHeight","posX","posY","posZ","ic","verticeCount","createCone","rotateRadius","curAngle","downV3","upPoint","downPoint","v3","q4","rotateAxis","rv","acos","ri","bv","bi","createCylinder","tv","ti","createPlane","stacksLong","slicesWidth","indiceIndex","createQuad","createSphere","BlitFS","BlitScreenShaderInit","blitPass","statefirst","blitState","transparentShader","transparentSubShader","blitPassTrans","lutBuilderInit","u_LutParams","PBRDepthVS","PBRDepthFS","UnlitShaderInit","UnlitBlock","u_AlbedoColor","u_TilingOffset","u_AlbedoTexture","u_AlphaTestValue","WHITE","D3","DefaultAttributeMap","DepthVS","DepthFS","BlinnPhongShaderInit","u_DiffuseColor","u_DiffuseTexture","u_AlbedoIntensity","u_MaterialSpecular","u_SpecularTexture","u_Shininess","u_NormalTexture","TrailShaderInit","a_Position","a_OffsetVector","a_Texcoord0X","a_Texcoord0Y","a_BirthTime","a_Color","u_MainTexture","u_MainColor","Effect","PBRStandardShaderInit","u_NormalScale","u_Metallic","u_Smoothness","u_OcclusionStrength","u_EmissionColor","u_EmissionIntensity","u_OcclusionTexture","u_EmissionTexture","u_MetallicGlossTexture","u_AnisotropyStrength","u_AnisotropyTexture","u_AnisotropyRotation","u_ClearCoatFactor","u_ClearCoatTexture","u_ClearCoatRoughness","u_ClearCoatRoughnessTexture","u_ClearCoatNormalTexture","u_DetailAlbedoTexture","u_DetailNormalTexture","u_DetailNormalScale","u_DetailTillingOffset","SkyBoxShaderInit","u_TintColor","u_Exposure","u_Rotation","u_CubeTexture","Sky","ParticleShuriKenShaderInit","a_CornerTextureCoordinate","a_MeshPosition","a_MeshColor","a_MeshTextureCoordinate","a_ShapePositionStartLifeTime","a_DirectionTime","a_StartColor","a_StartSize","a_StartRotation0","a_StartSpeed","a_Random0","a_Random1","a_SimulationWorldPostion","a_SimulationWorldRotation","a_SimulationUV","u_Tintcolor","u_texture","SkyProceduralShaderInit","u_SunSize","u_SunSizeConvergence","u_AtmosphereThickness","u_SkyTint","u_GroundTint","SkyPanoramicShaderInit","u_Texture","grayTexture","TrailAlignment","ACESShaderLib","ShaderInit3D","SHADERDEFINE_LEGACYSINGALLIGHTING","SHADERDEFINE_ENUNIFORMBLOCK","SHADERDEFINE_FLOATTEXTURE","SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR","SHADERDEFINE_BLITSCREEN_INVERTY","SHADERDEFINE_REMAP_POSITIONZ","SHADERDEFINE_LOD_TEXTURE_SAMPLE","SimpleSkinnedMeshRenderer","simpleAnimatorTexture","_simpleAnimatorTexture","_simpleAnimatorTextureSize","SimpleSkinnedMeshSprite3D","SIMPLE_SIMPLEANIMATORTEXTURE","SIMPLE_SIMPLEANIMATORTEXTURESIZE","simpleAnimatorOffset","_simpleAnimatorOffset","_simpleAnimatorParams","SimpleSkinRender","SIMPLE_SIMPLEANIMATORPARAMS","_ownerSimpleRenderNode","createSimpleSkinRenderNode","_computeSkinnedData","_computeAnimatorParamsData","round","_bonesNums","setSimpleAnimatorParams","setCustomData","value1","value2","simpleSkinnedMeshRenderer","bonesNums","animatorTexture","animatortexture","TEXTURE2D","TrailTextureMode","Stretch","Tile","TrailGeometry","_floatCountPerVertices1","_floatCountPerVertices2","_increaseSegementCount","_activeIndex","_endIndex","_needAddFirstVertex","_isTempEndVertex","_vertices1","_vertices2","_lastFixedVertexPosition","tmpColor","_disappearBoundsMode","_segementCount","_resizeData","segementCount","_subBirthTime","_subDistance","Float64Array","vertexBuffers","vertexbuffer1Size","vertexbuffer2Size","_vertexBuffer1","_vertexBuffer2","_resetData","oldVertices1","oldVertices2","oldSubDistance","oldSubBirthTime","_updateTrail","lastPosition","equals","_addTrailByFirstPosition","_addTrailByNextPosition","_curtime","delVector3","pointAtoBVector3","alignment","View","cameraMatrix","TransformZ","widthMultiplier","tempEndIndex","delLength","_updateVerticesByPositionData","minVertexDistance","_updateVerticesByPosition","_totalLength","curtime","down","delDistance","_updateVertexBufferUV","sprite3dPosition","curLength","colorGradient","startAlphaIndex","startColorIndex","totalLength","stride","uvX","textureMode","side","_updateDisappear","nextIndex","fixedPos","ALIGNMENT_VIEW","ALIGNMENT_TRANSFORM_Z","TrailFilter","CURTIME","LIFETIME","WIDTHCURVE","WIDTHCURVEKEYLENGTH","spriteParms","_minVertexDistance","_widthMultiplier","widthCurve","_widthCurve","widthCurveFloatArray","_colorGradient","_textureMode","_lastPosition","_initDefaultData","addRenderElement","_trialGeometry","_update","curPos","widthKeyFrames","widthKeyFrame1","widthKeyFrame2","SkyPanoramicMaterial","TEXTURE","TEXTURE_HDR_PARAMS","panoramicTexture","_textureHDRParams","BloomVS","BloomEffect","u_AutoExposureTex","u_Threshold","u_Params","u_BloomTex","u_SampleScale","shaderPass","CompositeInit","u_Bloom_DirtTex","u_BloomTex_TexelSize","u_Bloom_DirtTileOffset","u_Bloom_Settings","u_Bloom_Color","SHADERVALUE_SAMPLESCALE","SHADERVALUE_THRESHOLD","SHADERVALUE_PARAMS","clamp","_clamp","fastMode","_fastMode","dirtTexture","_dirtTexture","threshold","_threshold","softKnee","_softKnee","diffusion","_diffusion","anamorphicRatio","_anamorphicRatio","dirtIntensity","_dirtIntensity","_linearColor","_bloomTextureTexelSize","_shaderThreshold","_shaderParams","_pyramid","_shaderSetting","_dirtTileOffset","MAXPYRAMIDSIZE","logs","ratio","rw","rh","tw","th","logsInt","iterations","sampleScale","lthresh","gammaToLinearSpace","knee","lclamp","qualityOffset","lastDownTexture","downIndex","upIndex","SUBSHADER_PREFILTER13","SUBSHADER_DOWNSAMPLE13","mipDownTexture","mipUpTexture","lastUpTexture","SUBSHADER_UPSAMPLETENT","linearColor","shaderSettings","usedirtTexture","dirtRatio","screenRatio","dirtTileOffset","SUBSHADER_PREFILTER4","SUBSHADER_DOWNSAMPLE4","SUBSHADER_UPSAMPLEBOX","AOQUALITY","ScalableAO","BlurDelty","AOColor","aoTexture","AOParams","SourceTex","SHADERDEFINE_AOHigh","SHADERDEFINE_AOMEDIUM","SHADERDEFINE_LOWEST","u_Delty","u_PlugTime","u_AOParams","u_BlurVector","u_AOColor","u_compositionAoTexture","aoPass","blurPass","compositionPass","_aoParams","_aoQuality","MEDIUM","_aoBlurHorizontalShader","_aoComposition","aoQuality","aoColor","LOWEST","DepthAndDepthNormals","depthTextureMode","textureFormat","finalTex","blurTex","deltyVector","deltyHorizontal","FullScreenVert","GaussianDoF","SOURCESIZE","ZBUFFERPARAMS","COCPARAMS","NORMALDEPTHTEXTURE","FULLCOCTEXTURE","DOWNSAMPLESCALE","BLURCOCTEXTURE","SHADERDEFINE_DEPTHNORMALTEXTURE","u_ZBufferParams","u_CoCParams","u_FullCoCTex","u_SourceSize","u_DownSampleScale","u_BlurCoCTex","cocSubShader","cocPass","prefilterSubShader","prefilterPass","blurHSubShader","blurHPass","blurVSubShader","blurVPass","compositeSubShader","compositePass","_sourceSize","_dowmSampleScale","farStart","getVector3","cocParams","farEnd","maxRadius","_setupShaderValue","dataTexFormat","fullCoC","prefilterTex","blurHTex","blurVTex","LensFlareElementGeomtry","quadSize","lensQuadVertices","lensQuadIndex","instanceVertexDeclaration","_createBuffer","_instanceVertexBuffer","lensFlareElementMax","PositionUV","PositionRotationScale","LensFlareCMD","_instanceCount","_lensFlareGeometry","_initMaterial","_materials","setFloat","lensFlareElement","_lensFlareElementData","applyElementData","angularOffset","autoRotate","LensFlareEffect","SHADERDEFINE_AUTOROTATE","testFloat","startPosition","Utils","toAngle","EPhysicsStatisticsInfo","FogMode","CameraClearFlags","CameraEventFlags","AreaShape","LensFlareShaderInit","attribute","a_DistanceRotationScale","u_Tint","u_TintIntensity","u_FlareTexture","u_FlareCenter","u_aspectRatio","u_rotate","u_Postionoffset","u_Angularoffset","subshader","LensFlareElement","_positionOffset","_autoRotate","_startPosition","_angularOffset","_aspectRatio","_modulateByLightColor","_translationScale","LensFlareData","lensFlareData","_lensFlareData","_flareCMDS","ele","_needUpdate","bindLight","_light","effectIntensity","_effectIntensity","effectScale","_effectScale","_center","_tempV3","_tempV4","_updateEffectData","_rotate","cmdEle","caculateDirCenter","transformV3ToV4","projectionViewMatrix","atan2","caculatePointCenter","caculateSpotCenter","PixelLineMaterial","COLOR","Physics3DStatInfo","initStatisticsInfo","Count","_PhysicsStatisticsInfo","enableStatistics","autoFrameClear","frameLoop","clearStatisticsInfo","addStatisticsInfo","info","get","getStatisticsInfo","FrameClearCount","stopAndClearAllStatisticsInfo","PhysicsCreateUtil","_enablePhysics","enablePhysics","_changeWebGLSize","WebGL","onStageResize","clientWidth","_multiLighting","enableMultiLight","enableUniformBufferObject","UnifromBufferObject","lcc","maxAreaLightCountWithZ","_maxAreaLightCountPerClusterAverage","pixelLineMaterial","Texture2DArray","__initPhysics__","PlayerConfig","physics3D","assign","physicsSettings","initialize","Laya","addInitCallback","Sprite","regManager","cla","componentManagerMap","SHADERDEFINE_FOG","SHADERDEFINE_FOG_LINEAR","SHADERDEFINE_FOG_EXP","SHADERDEFINE_FOG_EXP2","SHADERDEFINE_DIRECTIONLIGHT","SHADERDEFINE_POINTLIGHT","SHADERDEFINE_SPOTLIGHT","SHADERDEFINE_SHADOW","SHADERDEFINE_SHADOW_CASCADE","SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW","SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH","SHADERDEFINE_SHADOW_SPOT","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH","FOGCOLOR","FOGPARAMS","DIRECTIONLIGHTCOUNT","LIGHTBUFFER","CLUSTERBUFFER","TIME","GIRotate","SCENEUNIFORMBLOCK","UBONAME_SCENE","legacyLightingValueInit","LIGHTDIRECTION","LIGHTDIRCOLOR","LIGHTMODE","POINTLIGHTPOS","POINTLIGHTRANGE","POINTLIGHTCOLOR","POINTLIGHTMODE","SPOTLIGHTPOS","SPOTLIGHTDIRECTION","SPOTLIGHTSPOTANGLE","SPOTLIGHTRANGE","SPOTLIGHTCOLOR","SPOTLIGHTMODE","createSceneUniformBlock","clusterSlices","_lightTexture","_lightPixles","configShaderValue","_configDefineValues","_shadowCasterPass","ret","Scene","_scene3D","scene2D","_scene2D","manager","enableFog","_enableFog","fogMode","_fogMode","Linear","EXP","EXP2","fogColor","fogStart","_fogParams","fogParams","fogEnd","fogDensity","_sceneReflectionProb","skyRenderer","_skyRenderer","physicsSimulation","_physicsManager","_timer","_lightmaps","maps","map","lightmapDirtyFlag","shadowMapFrequency","_ShadowMapupdateFrequency","_reflectionsSource","_reflectionsResolution","_reflectionsIblSamples","_physicsStepTime","sceneID","_collsionTestList","_key","SubmitKey","_UI3DManager","currentCreationLayer","enableLight","componentElementMap","_componentElementDatasMap","_componentDriver","ComponentDriver","createSceneModuleData","conchConfig","getGraphicsAPI","_nativeObj","conchSubmitScene3D","renderSubmit","bind","createPhysicsManger","addDefines","_sceneUniformObj","_sceneUniformData","debugFrustumCulling","val","componentElementDatasMap","Init","physicsManager","enablePhysicsUpdate","callStart","callUpdate","callLateUpdate","callDestroy","_renderByEditor","_binarySearchIndexInCameraPool","_getGroup","_group","_setGroup","_scene3Ds","scenes","_prepareSceneToRender","shaderValues","enableMulLight","ligTex","ligPix","pixelWidth","floatWidth","dirCount","dirElements","sunLightIndex","_mainDirectionLight","dirLight","intCor","mainPointLightIndex","_mainPointLight","poiLight","mainSpotLightIndex","_mainSpotLight","spoLight","cullInfoCamera","_cullInfoCamera","_setCullCamera","recaculateCullCamera","order","getComponentElementManager","ctx","activeInHierarchy","renderTarget","enableBuiltInRenderTexture","blitMainCanvans","normalizedViewport","_aftRenderMainPass","Context","set2DRenderConfig","clearPool","normalizeViewPort","mainCavansViewPort","fxaa","RenderTexture2D","_clear","reUse","setGlobalShaderValue","shaderOffset","fogRange","setlightmaps","lightMap","getlightmaps","lightmapColors","drawRenderTextureByScene","recoverTexture","originScene","callPostRender","getTexturePixel","coverFilter","pixelData","rtFormat","R32G32B32","R16G16B16","R5G6B5","getTexturePixelAsync","pd","drawTextureCubePixelByScene","renderCubeSize","bytelength","quaterionArray","drawTextureCubeByScene","depthPass","_renderDataModule","nearplane","farplane","vp","_calculationViewport","_normalizedViewport","_viewport","needUpdateCanvasSize","customResolution","pixelRatio","_resoluWidth","_resoluHeight","msaa","MSAA","_msaa","enablemsaa","_fxaa","_updateViewMatrix","scaleX","scaleY","scaleZ","viewMatE","_projectionViewMatrix","setProjectionViewMatrix","_boundFrustum","_isCameraTarget","postProcess","enableHDR","_enableHDR","RenderTextureFormat_R16G16B16A16","_needBuiltInRenderTexture","_depthTextureMode","opaquePass","_opaquePass","_opaqueTexture","_depthTextureFormat","enableBlitDepth","_canBlitDepth","_cacheDepth","_needRenderGamma","_cacheDepthTexture","canblitDepth","_viewportParams","_projectionParams","_internalCommandBuffer","_cameraEventCommandBuffer","_shadowCasterCommanBuffer","_clusterPlaneCacheFlag","opaqueTextureSize","createCameraModuleData","_Render3DProcess","createRender3DProcess","_rayViewport","_onTransformChanged","lx","ly","rx","ry","ceilLeftX","ceilLeftY","floorRightX","floorRightY","pixelLeftX","pixelLeftY","pixelRightX","pixelRightY","createPerspective","_isLayerVisible","clearFlagData","_getRenderTexture","needInternalRT","samples","_updateCameraRenderData","_applyViewProject","_contextApply","proMat","projectView","clusterCount","xSlixe","ySlice","xCount","yCount","yLengthPerCluster","xLengthPerCluster","normX","normY","_addCasterShadowCommandBuffer","_removeCasterShadowCommandBuffer","_preRenderMainPass","DepthOnly","bindCanvasRender","grabTexture","copySubFrameBuffertoTex","_createOpaqueTexture","opaqueTexParams","maxMipmapLevel","multiSampler","frameFormat","renderRT","setDataByUniformBufferData","callPreRender","performance","now","fowardRender","renderPassStatArray","RenderPassStatisticsInfo","T_CameraRender","viewportPointToRay","_width","_height","normalizedViewportPointToRay","finalPoint","_tempVector20","worldToViewportPoint","project","_wr","_hr","clientScaleX","clientScaleY","worldToNormalizedViewportPoint","convertScreenCoordToOrthographicCoord","ratioX","ratioY","addCommandBuffer","commandBufferArray","removeCommandBuffer","removeCommandBuffers","_context3DViewPortCatch","_contextScissorPortCatch","LightSprite","spriteLight","EffectMaterial","ExtendTerrainMaterial","SHADERDEFINE_DETAIL_NUM1","SHADERDEFINE_DETAIL_NUM2","SHADERDEFINE_DETAIL_NUM3","SHADERDEFINE_DETAIL_NUM4","SHADERDEFINE_DETAIL_NUM5","SPLATALPHATEXTURE","DIFFUSETEXTURE1","DIFFUSETEXTURE2","DIFFUSETEXTURE3","DIFFUSETEXTURE4","DIFFUSETEXTURE5","DIFFUSESCALEOFFSET1","DIFFUSESCALEOFFSET2","DIFFUSESCALEOFFSET3","DIFFUSESCALEOFFSET4","DIFFUSESCALEOFFSET5","splatAlphaTexture","diffuseTexture1","_setDetailNum","diffuseTexture2","diffuseTexture3","diffuseTexture4","diffuseTexture5","diffuseScaleOffset1","scaleOffset1","diffuseScaleOffset2","scaleOffset2","diffuseScaleOffset3","scaleOffset3","diffuseScaleOffset4","scaleOffset4","diffuseScaleOffset5","scaleOffset5","TrailRenderer","_trailFilter","_a","_b","widthCurveData","SphericalHarmonicsL2","_coefficients","getCoefficient","setCoefficient","coefficient","setCoefficients","coefficient0","coefficient1","coefficient2","coefficient3","coefficient4","coefficient5","coefficient6","coefficient7","coefficient8","coes","destCoes","_default","SphericalHarmonicsL2Generater","surfaceArea","uv2Dir","face","out_dir","TextureCubeFace","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","sh_eval_9","M_PI","CalCubemapSH","cubemapPixels","pixelComponentSize","cubemapSize","isGamma","shr","_tempSHR","shg","_tempSHG","shb","_tempSHB","facePixels","x0","y0","da","pixelOffset","SH_Count","sh_val","sh","CalGradientSH","skyColor","equatorColor","groundColor","skyPixels","_tempSkyPixels","equatorPixels","_tempEquatorPixels","groundPixels","_tempGroundPixels","fillPixelBuffer","float32","fillColor","gradientPixles","GradientSimulateSize","timeEnd","DirectionLightCom","_direction","setDirection","shadowTwoCascadeSplits","shadowFourCascadeSplits","_shadowFourCascadeSplits","setShadowFourCascadeSplits","_shadowTwoCascadeSplits","createDirectLight","PointLightCom","_range","createPointLight","pointlight","SpotLightCom","spotRange","createSpotLight","volumetricCount","_probeCounts","_probeStep","_params","createVolumetricGI","setParams","_volumetricProbeID","irradiance","_irradiance","_distance","viewBias","irradianceTexel","distanceTexel","probeCounts","setProbeCounts","probeStep","setProbeStep","AreaLightCom","Area","_spread","_maxBounces","_areaShape","rectangle","_power","power","spread","maxBounces","tempVec","LODInfo","mincullRate","_mincullRate","_renders","_cachSprite3D","group","_updateRecaculateFlag","_lodIndex","addNode","ren","components","comp","numChildren","removeNode","RenderBitFlag_CullFlag","removeAllRender","LODGroup","_needcaculateBounds","_lods","_visialIndex","_lodPosition","shadowCullPass","lods","_lodCount","nowRate","_nowRate","recalculateBounds","_setLODinvisible","_applyVisibleRate","rate","_setLODvisible","lod","onDestroy","renderarray","lodGroup","lodArray","cloneLOD","firstBounds","extend","onPreRender","checkCamera","maxYDistance","cameraFrustum","rateYDistance","PixelLineData","endPosition","endColor","startNormal","endNormal","PixelLineFilter","Lines","_floatCountPerVertices","_minUpdate","_maxUpdate","_floatBound","_calculateBound","_maxLineCount","_lineCount","pointCount","_tempVector0","_tempVector1","_resizeLineData","lastVertices","_updateLineVertices","floatBound","_reCalculateBound","_removeLineData","rightPartVertices","startX","startY","startZ","endX","endY","endZ","_updateLineData","_updateLineDatas","_getLineData","PixelLineRenderer","_isRenderActive","_isInRenders","_needUpdatelines","_lines","_pixelLineFilter","pixelLinesDatas","addLines","_changeRenderObjects","renderObjects","_pixelLinesDataChange","keyN","parseInt","setLine","addLineWithNormal","lines","addCount","removeLine","pixeldata","setLineWithNormal","getLine","pixelLineDatas","linedata","AnimatorPlayState","currentState","_currentState","curTransition","normalizedTime","_normalizedTime","animatorState","_resetPlayState","clipDuration","_finish","_playEventIndex","_startPlayTime","_elapsedTime","_lastIsFront","playTime","_normalizedPlayTime","AnimatorControllerLayer","defaultState","_defaultState","_avatarMask","defaultStateName","getAnimatorState","_states","_defaultStateNameCatch","states","removed","removeState","newAdded","addState","_referenceCount","_playType","_crossDuration","_crossMark","_crossNodesOwnersCount","_crossNodesOwners","_crossNodesOwnersIndicesMap","_srcCrossClipNodeIndices","_destCrossClipNodeIndices","_playStateInfo","_crossPlayStateInfo","blendingMode","BLENDINGMODE_OVERRIDE","playOnWake","_removeClip","clipStateInfos","_clip","clipStateInfo","_animator","frameNodes","nodeOwners","_nodeOwners","_removeKeyframeNodeOwner","_getReferenceCount","_clearReference","getCurrentPlayState","stateName","_getOwnersByClip","BLENDINGMODE_ADDTIVE","AnimatorResource","getAnimatorResource","propertyKey","ClassUtils","getClass","AnimatorState","realtimeDatas","_realtimeDatas","clipNodes","_currentFrameIndices","Int16Array","_resetFrameIndices","_isLooping","transitions","_transitions","soloTransitions","_soloTransitions","_scripts","speed","clipStart","clipEnd","cycleOffset","_eventStart","animator","layerIndex","EVENT_OnStateEnter","setPlayScriptInfo","onStateEnter","_eventExit","EVENT_OnStateExit","onStateExit","_eventStateUpdate","EVENT_OnStateUpdate","onStateUpdate","_eventLoop","EVENT_OnStateLoop","onStateLoop","_eventtransition","normalizeTime","paramsMap","soloNums","check","transNums","addScript","script","getScript","getScripts","coms","AvatarMask","_avatarPathMap","setTransformActive","getAllTranfromPath","Animator","controller","_controller","updateTo","_speed","updateMode","_updateMode","lowUpdateDelty","_lowUpdateDelty","controllerLayerCount","_controllerLayers","animatorParams","_animatorParams","values","sleep","_finishSleep","_keyframeNodeOwners","AnimatorUpdateMode","_linkAvatarSpritesData","_linkAvatarSprites","_renderableSprites","cullingMode","CULLINGMODE_CULLCOMPLETELY","_keyframeNodeOwnerMap","_addKeyframeNodeOwner","clipOwners","nodeIndex","keyframeNodeOwner","propertys","frameNodesCount","ownPat","getChildByName","oriProperty","_updatePlayer","playState","lastElapsedTime","elapsedPlaybackTime","_lastElapsedTime","loopNum","_applyTransition","layerindex","transition","crossFade","destState","transduration","transstartoffset","_updateStateFinish","_updateEventScript","stateInfo","playStateInfo","HAS_SCRIPT","events","parentPlayTime","_parentPlayTime","_eventScript","currPlayTime","scripts","len","_isScript","fun","_updateClipDatas","animatorMask","curPlayTime","currentFrameIndices","_applyFloat","nodeOwner","additive","isFirstLayer","defValue","_applyVec2","oriValue","_applyVec3","_applyVec4","_applyColor","_applyPositionAndRotationEuler","oriX","oriY","oriZ","defX","defY","defZ","_applyRotation","clipRot","_tempQuaternion1","defaultRot","_applyScale","clipSca","defaultSca","_applyCrossData","srcValue","desValue","crossWeight","pro","lastpro","proPat","crossValue","localPos","srcX","srcY","srcZ","localRot","localSca","localEuler","v44","getVector2","v4","getVector4","_setClipDatasToNode","controllerLayer","_setCrossClipDatasToNode","srcState","ownerCount","destRealtimeDatas","destDataIndices","destNodeOwners","srcRealtimeDatas","srcDataIndices","srcNodeOwners","srcIndex","destIndex","_setFixedCrossClipDatasToNode","_revertDefaultKeyframeNodes","locPos","def","locRot","defQua","locSca","locEul","tempColor","_tempColor","onAfterDeserialize","arr","controllerLayers","addControllerLayer","defaultClip","getDefaultState","_applyUpdateMode","LowFrame","UnScaleTime","_handleSpriteOwnersBySprite","isLink","ownersNodes","layersData","layers","layerData","animatorLayer","blendingModeData","clipPath","motion","getControllerLayer","layerMaskData","avaMask","bips","cullingModeData","onUpdate","enableAnimatorUpdate","crossPlayStateInfo","finish","crossState","_crossPlayState","crossClip","crossDuratuion","startPlayTime","crossClipDuration","crossScale","crossSpeed","needUpdateFinishcurrentState","controllLayer","animatorStates","cloneLayer","controllderLayer","layerInex","NEGATIVE_INFINITY","curPlayState","calclipduration","transitionDuration","destAnimatorState","playType","crossNodeOwners","crossNodeOwnerIndicesMap","srcAnimatorState","destCrossClipNodeIndices","destClip","destNodes","destNodesMap","crossCount","scrCrossClipNodeIndices","srcClip","srcNodes","srcNodesMap","crossMark","srcNode","srcNodeOwner","srcFullPath","destNodeOwner","destFullPath","setParamsTrigger","AnimatorStateCondition","conditionNameToID","setParamsNumber","setParamsBool","getParamsvalue","getCurrentAnimatorPlayState","CULLINGMODE_ALWAYSANIMATE","AnimatorTransition","_conditions","_exitByTime","_exitTime","_transduration","_transstartoffset","_mute","mute","_destState","conditions","removeCondition","addCondition","exitByTime","exitTime","condition","isAndOperEnabled","_isAndOperEnabled","vlaue","triggerCatch","con","checkState","AniStateConditionType","Trigger","AnimatorController","AnimatorControllerParse","clipsID","getLayers","lArr","acl","unshift","err","getState","currLayer","parms","AniParmType","Bool","Boolean","isNaN","createState","idCatch","defID","childStates","groupRet","isArray","uuid","substring","setExitTransition","exitRet","pExitRet","ats","sts","linArr","ato","addConditions","solo","setTransitions","pState","exitTransition","o","idk","parm","AnimatorStateBoolCondition","compareFlag","checkValue","AnimatorStateNumberCondition","numberValue","AnimatorStateTriggerCondition","BatchMark","batched","InstanceBatchManager","_instanceBatchOpaqueMarks","updateCountMark","_getData","cls","getInstanceBatchOpaquaMark","invertFrontFace","matID_geometry","giID","BatchRender","_lodInstanceRenderElement","_RenderBitFlag","RenderBitFlag_Batch","_batchList","checkLOD","_checkLOD","lodCullRateArray","_lodRateArray","_canBatch","_changeLOD","_cacheLod","concat","_lodsize","addList","reBatch","renderNums","_restorRenderNode","StaticInstanceBatchRender","_insBatchMarksNums","_insElementMarksArray","_instanceBatchminNums","_updateChangeElement","_batchManager","RenderBitFlag_InstanceBatch","_isRenderNodeAllCanInstanceBatch","_enableInstancing","_sumInstanceBatch","insBatchMarks","_batchOneElement","instanceelement","_createInstanceElement","indexof","_removeOneElement","_updateOneElement","batchMark","instanceRenderElement","renderelement","renderNodes","StatiVertexMergeBatchRender","_addList","StaticBatchVolume","_getStaticInstanceBatchRender","_getStatiVertexMergeBatchRender","_enableStaticInstanceBatch","_instanceBatchRender","_enableStaticVertexMergeBatch","_vertexMergeBatchRender","_enableCustomBatch","_customBatchs","enableStaticInstanceBatchRender","enableMergeBatchRender","enableCustomBatchRender","customBatchRenders","_destroyComponent","addComponentInstance","_cacheRender","__addRenderNodeToBatch","__removeRenderNodeFromBatch","onStart","UI3DGeometry","_bound","_vertex","_positionArray","_resizeViewVertexData","viewMode","worldPos","halfwidth","halfhight","tempV0","_changeVertex","_resizeVertexData","_resizeWorldVertexData","worldMat","applyMat","UI3D","_uisprite","_shellSprite","removeChildren","_resizeRT","prefab","_prefab","_ui3DMat","resolutionRate","_resolutionRate","billboard","_view","_sizeChange","enableHit","_hit","_bindPropertyName","_uiPlane","DISPLAYED_INSTAGE","ACTIVE_INHIERARCHY","_creatDefaultMat","_addRenderElement","_setMaterialTexture","_rendertexure2D","_invertY","_parseHit","_tempRay","_ray","TempMatrix","normalizeHitWidth","normalizeHitHeight","cx","cy","InputManager","inst","getSpriteUnderPoint","getUITexture","worldParams","drawToTexture","_transByRotate","temp0","DEBUG","internalResources","registerLoader","task","AssetDb","getSubAssetURL","fetch","progress","createCallback","options","CubemapLoader","getBaseName","ext","ktxInfo","KTXTextureInfo","getKTXTextureInfo","dimension","TextureDimension","Cube","mipmapCount","setKTXData","obsoluteInst","move","byte","readUint8","mipCount","readUint16","wrapModev","mipSize","uint8Arrays","mipPixelLength","_getFormatByteCount","updateSubPixelsData","ltcBasePath","URL","getPath","urls","front","back","all","images","constructParams","srgb","setImageData","_format","obsolute","_idResourcesMap","textures","basePath","premultiplyAlpha","LoadModelV04","readData","_readData","_readString","READ_MESH","arrayBuffer","__getBuffer","vertexBufferCount","vbStart","vbLength","vbArrayBuffer","vbDatas","bufferAttribute","ibStart","ibLength","ibDatas","boneCount","bindPoseDataStart","bindPoseDataLength","bindPoseDatas","bindPoseFloatCount","bindPoseBuffer","inverseGlobalBindPose","READ_SUBMESH","ibCount","drawCount","boneDicofs","boneDicCount","boneIndexCount","MorphTarget","MorphTargetChannel","getTargetByIndex","addTarget","MorphTargetData","channels","addMorphChannel","initData","targetNum","maxTexSize","getParams","RenderParams","MAX_Texture_Size","morphStride","elementCount","vertexElementCount","texHeight","texelStride","targetStride","targetIndex","dataOffset","elementIndex","elementOffset","targetDataOffset","newChannel","newTarget","LoadModelV05","vertexData","floatData","uint8Data","vertexFlag","subVertexFlags","subVertexCount","subOffset","verOffset","READ_MORPH","morphVertexDecStr","targetName","readFloat32","bufferStart","readUint32","bufferLength","READ_UVSIZE","MeshReader","read","HierarchyParserV2","nodeData","outBatchSprites","props","childData","instanceID","_createComponentInstance","interactMap","componentsData","_createNodeByJson02","component","_createInteractInstance","interatMap","_parseInteractive","json","outBatchSprits","_createNodeByJson","clas","collectResourceLinks","test","innerUrls","addInnerUrl","propertyParams","url2","lightmapColorData","lightmapDirectionData","reflectionTextureData","reflectionTexture","reflection","reflectionData","sky","skyboxMaterial","MATERIAL","skyboxMatData","parMeshPath","dataPath","TERRAINRES","clipPaths","shapes","HierarchyLoader","ShaderCompile","promises","loadAvatarMask","loadStates","_$uuid","getResURLByUUID","HitResult","succeeded","collider","hitFraction","_vec2","_hitResult","prototype","getSprite3DUnderPoint","pageX","_stage","pageY","normalWidth","Render","_mainCanvas","normalHeight","sim","uiManager","cameras","regClass","LensFlareSettingsLoader","Texture2DArrayLoader","default","defaultTexture","TEXTURE2DARRAY","BoundsImpl","_boundBox","_extent","_updateFlag","outCen","outExt","ownMax","ownMin","calMax","calMin","TEMP_VECTOR3_MAX0","tempV1","TEMP_VECTOR3_MAX1","thisExtends","boundExtends","destBounds","BoundSphere","createFromSubPoints","upperEnd","_tempVector3","outCenter","intersectsRayDistance","intersectsRayPoint","outPoint","RandX","_state0U","_state0L","_state1U","_state1L","randomint","s1U","s1L","s0U","s0L","sumL","resU","resL","t1U","t1L","t2U","xU","xL","_CONVERTION_BUFFER","setUint32","getFloat64","ShadowLightType","RenderCMDType","ECharacterCapable","EColliderCapable","EJointCapable","D6MotionType","D6Axis","D6Drive","DataView","defaultRand","Date","CameraCullInfo","Physics3DUtils","COLLISIONFILTERGROUP_DEFAULTFILTER","COLLISIONFILTERGROUP_STATICFILTER","COLLISIONFILTERGROUP_KINEMATICFILTER","COLLISIONFILTERGROUP_DEBRISFILTER","COLLISIONFILTERGROUP_SENSORTRIGGER","COLLISIONFILTERGROUP_CHARACTERFILTER","COLLISIONFILTERGROUP_CUSTOMFILTER1","COLLISIONFILTERGROUP_CUSTOMFILTER2","COLLISIONFILTERGROUP_CUSTOMFILTER3","COLLISIONFILTERGROUP_CUSTOMFILTER4","COLLISIONFILTERGROUP_CUSTOMFILTER5","COLLISIONFILTERGROUP_CUSTOMFILTER6","COLLISIONFILTERGROUP_CUSTOMFILTER7","COLLISIONFILTERGROUP_CUSTOMFILTER8","COLLISIONFILTERGROUP_CUSTOMFILTER9","COLLISIONFILTERGROUP_CUSTOMFILTER10","COLLISIONFILTERGROUP_ALLFILTER","PHYSXDEFAULTMASKVALUE","Size","fullScreen","IndexBuffer3D","indexType","_indexType","indexTypeByteCount","_indexTypeByteCount","_canRead","_deviceBuffer","createIndexBuffer","_setIndexDataLength","bufferOffset","dataStartIndex","dataCount","_setIndexData","maxLength","VertexBuffer3D","_float32Reader","createVertexBuffer","setDataLength","LengencyRenderEngine3DFactory","addBeforeInitCallback","FrustumCulling","cullingRenderBounds","cullInfo","WebXRCamera","isWebXR","_clientWidth","_clientHeight","_restoreView","gl","vpX","vpW","_renderMainPass","replacementTag","RenderStateContext","setDepthMask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","WebXRRenderTexture","STENCIL_8","frameBuffer","_frameBuffer","WebXRSessionManager","currentTimestamp","defaultHeightCompensation","_sessionEnded","referenceSpace","_referenceSpace","newReferenceSpace","sessionMode","_sessionMode","exitXR","endXRRenderLoop","EVENT_MANAGER_END","initializeXRGL","xrSession","makeXRCompatible","initializeAsync","_xrNavigator","navigator","xr","reject","isSessionSupportedAsync","isSessionSupported","supportsSession","initializeSessionAsync","xrSessionMode","xrSessionInit","requestSession","session","addEventListener","once","resetReferenceSpace","baseReferenceSpace","runXRRenderLoop","requestAnimationFrame","timestamp","xrFrame","_updateByXrFrame","EVENT_FRAME_LOOP","_loop","currentFrame","setReferenceSpaceTypeAsync","referenceSpaceType","requestReferenceSpace","rejectionReason","heightCompensation","XRRigidTransform","getOffsetReferenceSpace","updateRenderStateAsync","baseLayer","_baseLayer","updateRenderState","currentFrameRate","frameRate","supportedFrameRates","updateTargetFrameRate","WebXRCameraManager","newPosition","rotationQuaternion","_referenceQuaternion","rigCameras","_rigCameras","_referencedPosition","_firstFrame","_XRRenderTexture","_webXRSessionManager","_updateFromXRSession","_updateReferenceSpace","pose","getViewerPose","orientation","views","_updateNumberOfRigCameras","view","currentRig","getViewport","framebufferWidth","framebufferHeight","framebuffer","cameraViewPort","cloneByArray","viewCount","xrcamera","removeChild","AxiGamepad","handness","axisData","axisLength","padGameAxi","axes","outPutStickValue","eventnam","EVENT_OUTPUT","eventname","offAll","ButtonGamepad","lastTouch","lastPress","lastPressValue","touch","press","pressValue","padButton","touched","pressed","touchEnter","touchStay","touchOut","pressEnter","pressStay","pressOut","outpressed","EVENT_TOUCH_ENTER","EVENT_TOUCH_STAY","EVENT_TOUCH_OUT","EVENT_PRESS_ENTER","EVENT_PRESS_STAY","EVENT_PRESS_OUT","EVENT_PRESS_VALUE","WebXRInput","preButtonEventList","preAxisEventList","_updateByXRPose","rayPose","getPose","_inputSource","targetRaySpace","_lastXRPose","tempQua","UnitZ","gripSpace","meshPose","EVENT_FRAMEUPDATA_WEBXRINPUT","_handleProcessGamepad","gamepad","gamepadAxis","caller","listener","gamepadButton","buttons","addButtonEvent","addAxisEvent","offAxisEvent","offButtonEvent","HANDNESS_LEFT","HANDNESS_RIGHT","WebXRInputManager","webxrManager","webXRCamera","controllers","controllerHandMesh","controllerLineRender","lineColor","RED","rayLength","webXRSessionManager","webXRCameraManager","_updateFromXRFrame","_updataMeshRender","xrInput","has","meshNode","tempVec1","refSpace","inputSource","inputSources","handedness","getController","bindMeshNode","meshSprite","bindRayNode","lineSprite","WebXRExperienceHelper","supportXR","xr_Manager","supported","enterXRAsync","cameraInfo","glInstance","depthFar","depthNear","XRWebGLLayer","setWebXRCamera","setWebXRInput","sessionManager","cameraManager","canvasOptions","antialias","multiview","framebufferScaleFactor","UniformBufferBlock","sn","cluster","alignedSize","user","uploadNum","moved","needUpload","UniformBufferCluster","blockSize","blockNum","blocks","expand","totalSize","createGPUBuffer","statisGPUMemory","usedNum","_expandBuffer","expandNum","clusterMaxBlock","expandSize","newArrayBuffer","block","notifyGPUBufferChange","renderContext","_moveBlock","dataView","copyWithin","getBlock","roundUp","byteAlign","_getBlockWithExpand","bb","snCounter","freeBlock","upload","bytes","next","endIndex","writeBuffer","uploadByte","statisUpload","optimize","uploadThreshold","moveNum","removeHole","align","UniformBufferAlone","getBufferAlone","timeCostSum","timeCostCount","timeCostAvg","UniformBufferUser","strId","items","itemNum","useBigBuffer","bufferBlock","bufferAlone","item","tac","_typeArray","byteOffset","BYTES_PER_ELEMENT","clearGPUBufferBind","addUniform","_getUniformItem","setUniformData","arraySize","alignElements","subarray","setBoolArray","setIntArray","setFloatArray","setVector2Array","setVector3Array","setVector4Array","setMatrix3x3","setMatrix3x3Array","setMatrix4x4Array","getUniform","hasUniform","isMe","Int32Array","Script3D","Script","HLODRender","curHLODRS","_curHLODRS","_changeMesh","HLODMesh","_createRenderelementByHLODElement","lodMesh","meshDefines","batchMesh","_curSubBatchMeshBounds","batchSubMeshInfo","_applyLightMapParams","hodMesh","drawSubMeshs","lodbatchMesh","onEnable","onDisable","HLOD","lodResource","_resourceList","_applyLODResource","resource","_curLODSource","hlodRender","_curRender","_releaseGroupRender","applyResource","loaded","StaticBatchSubInfo","needRender","StaticBatchSubMesh","subInfos","addSubMesh","centerA","distanceA","centerB","indexByteCount","tempMatrix","TriangleIndices","InvertTriangleIndices","StaticBatchMesh","staticMesh","vertexFloatArray","mergeIndexFormat","mergeIndexByteCount","vertexDataOffset","vertexCountOffset","sp","invertFront","normalMat","transpose","meshIndexCount","meshVertexData","meshIndexData","triangleIndices","staticSubMesh","_staticSubMeshes","submesh","StaticBatchMeshRenderElement","StaticBatchMeshRender","mergeInfo","_staticMesh","_mergeInfo","meshDef","StaticMeshMergeInfo","match","addElement","GradientDataVector2","destGradientDataVector2","MaterialInstanceProperty","_isNeedUpdate","createInstanceVertexBuffer3D","_instanceData","instanceData","dataValue","_value","datalength","updateType","writeTo","InstanceLocation","MaterialInstancePropertyBlock","_checkPropertyLegal","vertexElementFormat","attributeLocation","prob","_creatProperty","attributeName","arrays","vertexformat","setVectorArray","setNumberArray","getPropertyArray","INSTANCETYPE_ATTRIBUTE","INSTANCETYPE_UNIFORMBUFFER","playstate","_element","_scissor","_lastUpdateFrame","_updateFrame","_isTrigger","contacts","_setUpdateFrame","farme","arrayLength","blockname","blockProperty","_idCounter","_colliderA","_colliderB","positionOnA","positionOnB","_node","_destShaderData","_destSubShader","_batchSubMeshInfos","_drawSubMeshs","drawPramas","_lightmap","callFun","hlod","Handler","pixelLineRenderer","_geometryFilter","_motionRenders","_dataType","_propertyID","_rt","_clearFlag","_clearDepthValue","_clearStencilValue","_clearColorValue","_define","_add","ownerResource","_ownerResource","ubo","uboData","_releaseUBOData","getDefineData","getBool","getInt","getMatrix4x4","getMatrix3x3","getUniformBuffer","uniformIndex","getShaderData","_setInternalTexture","_cloneUBO","uboDatas","reset","DEFAULT","cameraUBO","cameraUBData","cameraCullInfo","meshVertexDecSet","Set","combine","haveMatch","staticRenders","text","_text","fontSize","_fontSize","removeHoleTimer","clustersAll","clustersCur","_addCluster","clusters","_removeHole","setRenderContext","removeCluster","delete"],"sources":["../../src/layaAir/laya/d3/depthMap/DepthCasterData.ts","../../src/layaAir/laya/d3/depthMap/DepthPass.ts","../../src/layaAir/laya/d3/animation/KeyframeNode.ts","../../src/layaAir/laya/d3/animation/AnimationEvent.ts","../../src/layaAir/laya/d3/core/Keyframe.ts","../../src/layaAir/laya/d3/component/Animator/KeyframeNodeOwner.ts","../../src/layaAir/laya/d3/core/FloatKeyframe.ts","../../src/layaAir/laya/d3/core/QuaternionKeyframe.ts","../../src/layaAir/laya/d3/core/Vector3Keyframe.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser03.ts","../../src/layaAir/laya/d3/core/Vector2Keyframe.ts","../../src/layaAir/laya/d3/core/Vector4Keyframe.ts","../../src/layaAir/laya/d3/animation/AnimationClipParser04.ts","../../src/layaAir/laya/d3/animation/KeyframeNodeList.ts","../../src/layaAir/laya/d3/resource/TextureGenerator.ts","../../src/layaAir/laya/d3/utils/Utils3D.ts","../../src/layaAir/laya/d3/animation/AnimationClip.ts","../../src/layaAir/laya/d3/RenderObjs/Laya3DRender.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/ShaderData.ts","../../src/layaAir/laya/d3/core/Sprite3D.ts","../../src/layaAir/laya/d3/math/BoundFrustum.ts","../../src/layaAir/laya/d3/component/Volume/Volume.ts","../../src/layaAir/laya/d3/core/scene/AmbientMode.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbe.ts","../../src/layaAir/laya/d3/core/render/BaseRender.ts","../../src/layaAir/laya/d3/math/Plane.ts","../../src/layaAir/laya/d3/math/Ray.ts","../../src/layaAir/laya/d3/math/ContainmentType.ts","../../src/layaAir/laya/d3/math/CollisionUtils.ts","../../src/layaAir/laya/d3/utils/Picker.ts","../../src/layaAir/laya/d3/core/Transform3D.ts","../../src/layaAir/laya/d3/core/RenderableSprite3D.ts","../../src/layaAir/laya/d3/core/MeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/math/Bounds.ts","../../src/layaAir/laya/d3/component/Volume/reflectionProbe/ReflectionProbeManager.ts","../../src/layaAir/laya/d3/core/render/Sprite3DRenderDeclaration.ts","../../src/layaAir/laya/d3/component/Volume/VolumetricGI/VolumetricGIManager.ts","../../src/layaAir/laya/d3/component/Volume/VolumeManager.ts","../../src/layaAir/ILaya3D.ts","../../src/layaAir/laya/d3/core/GeometryElement.ts","../../src/layaAir/laya/d3/resource/models/SkyBox.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTexture0.ts","../../src/layaAir/laya/d3/resource/models/SkyDome.ts","../../src/layaAir/laya/d3/resource/models/SkyRenderer.ts","../../src/layaAir/laya/d3/core/render/RenderElement.ts","../../src/layaAir/laya/d3/core/render/SkyRenderElement.ts","../../src/layaAir/laya/d3/core/BaseCamera.ts","../../src/layaAir/laya/d3/core/render/RenderContext3D.ts","../../src/layaAir/laya/d3/core/render/ScreenQuad.ts","../../src/layaAir/laya/d3/core/render/command/Command.ts","../../src/layaAir/laya/d3/core/render/command/BlitScreenQuadCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetShaderDataCMD.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData.ts","../../src/layaAir/laya/d3/core/light/ShadowCascadesMode.ts","../../src/layaAir/laya/d3/core/light/ShadowMode.ts","../../src/layaAir/laya/d3/core/light/Light.ts","../../src/layaAir/laya/d3/core/light/ShadowUtils.ts","../../src/layaAir/laya/d3/resource/models/MeshUtil.ts","../../src/layaAir/laya/d3/core/MeshFilter.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/Design/RenderState.ts","../../src/layaAir/laya/d3/core/material/BlinnPhongMaterial.ts","../../src/layaAir/laya/d3/core/render/SubMeshRenderElement.ts","../../src/layaAir/laya/d3/core/MeshRenderer.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshCMD.ts","../../src/layaAir/laya/d3/core/render/command/DrawRenderCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetGlobalShaderDataCMD.ts","../../src/layaAir/laya/d3/graphics/MeshInstanceGeometry.ts","../../src/layaAir/laya/d3/core/render/command/DrawMeshInstancedCMD.ts","../../src/layaAir/laya/d3/core/render/command/SetRenderTargetCMD.ts","../../src/layaAir/laya/d3/core/render/command/DrawRenderElemenetCMD.ts","../../src/layaAir/laya/d3/core/render/command/CommandBuffer.ts","../../src/layaAir/laya/d3/graphics/renderPath/Cluster.ts","../../src/layaAir/laya/d3/physics/PhysicsSettings.ts","../../src/layaAir/laya/d3/core/light/LightQueue.ts","../../src/layaAir/laya/d3/core/scene/Lightmap.ts","../../src/layaAir/laya/d3/core/scene/Scene3DShaderDeclaration.ts","../../src/layaAir/laya/d3/shadowMap/ShadowCasterPass.ts","../../src/layaAir/laya/d3/core/render/command/BlitFrameBufferCMD.ts","../../src/layaAir/laya/d3/core/scene/SceneRenderManager.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DManager.ts","../../src/layaAir/laya/d3/core/render/PostProcessRenderContext.ts","../../src/layaAir/laya/d3/core/render/PostProcessEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.vs","../../src/layaAir/laya/d3/core/render/PostEffect/ColorGradEffect.ts","../../src/layaAir/laya/d3/core/material/PBRRenderQuality.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitLUTScreen.fs","../../src/layaAir/laya/d3/component/PostProcess.ts","../../src/layaAir/laya/d3/shader/pbr/PBRDefaultDFG.ts","../../src/layaAir/laya/d3/shader/pbr/PBRShaderLib.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/BRDF.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrGI.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrMetallicFrag.glsl","../../src/layaAir/laya/d3/core/material/PBRMaterial.ts","../../src/layaAir/laya/d3/core/material/PBRStandardMaterial.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BaseShape.ts","../../src/layaAir/laya/Physics3D/physicsEnum/EPhycisCapable.ts","../../src/layaAir/laya/d3/core/material/SkyBoxMaterial.ts","../../src/layaAir/laya/d3/core/material/SkyProceduralMaterial.ts","../../src/layaAir/laya/d3/core/material/UnlitMaterial.ts","../../src/layaAir/laya/d3/core/MeshSprite3D.ts","../../src/layaAir/laya/d3/core/GradientMode.ts","../../src/layaAir/laya/d3/core/Gradient.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Burst.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientColor.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/ColorOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/FrameOverTime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataNumber.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientAngularVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataInt.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientSize.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientVelocity.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/RotationOverLifetime.ts","../../src/layaAir/laya/d3/math/BoundBox.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ShapeUtils.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/BoxShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/CircleShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/ConeShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/HemisphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/shape/SphereShape.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/SizeOverLifetime.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/StartFrame.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/TextureSheetAnimation.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/VelocityOverLifetime.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShuriKenParticle.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleBillboard.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexShurikenParticleMesh.ts","../../src/layaAir/laya/d3/math/Rand.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/Emission.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleData.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleInstanceSystem.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleMaterial.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShurikenParticleRenderer.ts","../../src/layaAir/laya/d3/core/particleShuriKen/ShuriKenParticle3D.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineVertex.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3DShaderDeclaration.ts","../../src/layaAir/laya/d3/core/render/SkinRenderElement.ts","../../src/layaAir/laya/d3/core/SkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/trail/TrailMaterial.ts","../../src/layaAir/laya/d3/core/trail/VertexTrail.ts","../../src/layaAir/laya/d3/graphics/SubMeshInstanceBatch.ts","../../src/layaAir/laya/d3/graphics/Vertex/VertexPositionTerrain.ts","../../src/layaAir/laya/d3/core/render/InstanceRenderElement.ts","../../src/layaAir/laya/d3/resource/models/SubMesh.ts","../../src/layaAir/laya/d3/resource/models/Mesh.ts","../../src/layaAir/laya/d3/resource/models/PrimitiveMesh.ts","../../bin/tsc/layaAir/laya/d3/shader/utils/Utils.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.fs","../../src/layaAir/laya/d3/shader/postprocess/BlitScreenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/FastApproximateAntiAliasing.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ColorGrading.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/Tonemapping.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/LUTBuilder.fs","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.vs","../../bin/tsc/layaAir/laya/d3/shader/depth/Depth.fs","../../src/layaAir/laya/d3/shader/unlit/UnlitShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/unlit/Unlit.fs","../../src/layaAir/laya/d3/shader/blinnphong/BlinnPhongShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.vs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhong.fs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongDepthNormal.vs","../../bin/tsc/layaAir/laya/d3/shader/blinnphong/BlinnPhongDepthNormal.fs","../../src/layaAir/laya/d3/shader/Trail/TrailShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.vs","../../bin/tsc/layaAir/laya/d3/shader/Trail/Trail.fs","../../src/layaAir/laya/d3/shader/pbr/PBRStandardShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.vs","../../bin/tsc/layaAir/laya/d3/shader/pbr/pbrStandard.fs","../../bin/tsc/layaAir/laya/d3/shader/pbr/PBRStandardDepthNormal.vs","../../bin/tsc/layaAir/laya/d3/shader/pbr/PBRStandardDepthNormal.fs","../../src/layaAir/laya/d3/shader/sky/SkyBoxShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyBox.fs","../../src/layaAir/laya/d3/shader/ShurikenParticle/ParticleShuriKenShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/MathGradient.glsl","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKenSpriteVS.glsl","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.vs","../../bin/tsc/layaAir/laya/d3/shader/ShurikenParticle/particleShuriKen.fs","../../src/layaAir/laya/d3/shader/sky/SkyProceduralShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyProceduralShader.fs","../../src/layaAir/laya/d3/shader/sky/SkyPanoramicShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.vs","../../bin/tsc/layaAir/laya/d3/shader/sky/SkyPanoramic.fs","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/UtillitiesColor.glsl","../../src/layaAir/laya/d3/core/trail/TrailAlignment.ts","../../src/layaAir/laya/d3/shader/postprocess/ACES/ACESShaderLib.ts","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/TransformCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/Tonescales.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/RRTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/lib/ODTCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/rrt/RRT.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/odt/ODT_sRGB_100nits.glsl","../../bin/tsc/layaAir/laya/d3/shader/postprocess/ACES/ACES.glsl","../../src/layaAir/laya/d3/shader/ShaderInit3D.ts","../../bin/tsc/layaAir/laya/d3/shader/utils/Color.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/Math.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/BakedBoneMatrixSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/MorphTarget.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/VertexCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/ShadingFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/OutputTransform.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/SceneCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/CameraCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/SkyCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DCommon.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/common/Sprite3DFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthVertex.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormalUtil.glsl","../../bin/tsc/layaAir/laya/d3/shader/depth/DepthNormalFrag.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/SceneFog.glsl","../../bin/tsc/layaAir/laya/d3/shader/utils/SceneFogInput.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampleTent.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/ShadowSampler.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/Lighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/globalIllumination.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/Oct.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/GridHelpers.glsl","../../bin/tsc/layaAir/laya/d3/shader/lighting/volumetricGI/VolumetricGI.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/BlinnPhongLighting.glsl","../../bin/tsc/layaAir/laya/d3/shader/lightingmode/PBRLighting.glsl","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshRenderer.ts","../../src/layaAir/laya/d3/core/SimpleSkinnedMeshSprite3D.ts","../../src/layaAir/laya/d3/core/TrailTextureMode.ts","../../src/layaAir/laya/d3/core/trail/TrailGeometry.ts","../../src/layaAir/laya/d3/core/trail/TrailFilter.ts","../../src/layaAir/laya/d3/core/material/SkyPanoramicMaterial.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Bloom.vs","../../src/layaAir/laya/d3/core/render/PostEffect/BloomEffect.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/StdLib.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Colors.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Sampling.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomPrefilter4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample13.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomDownsample4.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleTent.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/BloomUpsampleBox.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.vs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/Bloom/Composite.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/FragAO.fs","../../src/layaAir/laya/d3/core/render/PostEffect/ScalableAO.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/ScalableAO/AOComposition.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/FullScreenVert.vs","../../src/layaAir/laya/d3/core/render/PostEffect/GaussianDoF.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/CoC.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Prefilter.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurH.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/BlurV.fs","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/GaussianDoF/Composite.fs","../../src/layaAir/laya/d3/core/render/PostEffect/LensFlares/LensFlareGeometry.ts","../../src/layaAir/laya/d3/core/render/PostEffect/LensFlares/LensFlareCMD.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/LensFlare/LensFlare.vs","../../src/layaAir/laya/Physics3D/physicsEnum/EPhysicsStatisticsInfo.ts","../../src/layaAir/laya/d3/core/scene/Scene3D.ts","../../src/layaAir/laya/d3/core/Camera.ts","../../src/layaAir/laya/d3/core/light/AreaLightCom.ts","../../src/layaAir/laya/d3/core/render/PostEffect/LensFlares/LensFlareShaderInit.ts","../../bin/tsc/layaAir/laya/d3/shader/files/postProcess/LensFlare/LensFlare.fs","../../src/layaAir/laya/d3/core/render/PostEffect/LensFlares/LensFlareEffect.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineMaterial.ts","../../src/layaAir/laya/Physics3D/interface/Physics3DStatInfo.ts","../../src/layaAir/Laya3D.ts","../../src/layaAir/laya/d3/core/light/LightSprite.ts","../../src/layaAir/laya/d3/core/material/EffectMaterial.ts","../../src/layaAir/laya/d3/core/material/ExtendTerrainMaterial.ts","../../src/layaAir/laya/d3/core/trail/TrailRenderer.ts","../../src/layaAir/laya/d3/graphics/SphericalHarmonicsL2.ts","../../src/layaAir/laya/d3/core/light/DirectionLightCom.ts","../../src/layaAir/laya/d3/core/light/PointLightCom.ts","../../src/layaAir/laya/d3/core/light/SpotLightCom.ts","../../src/layaAir/laya/d3/component/Volume/VolumetricGI/VolumetricGI.ts","../../src/layaAir/laya/d3/component/LODGroup.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineData.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineFilter.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineRenderer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorPlayState.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorControllerLayer.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorResource.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorState.ts","../../src/layaAir/laya/d3/component/Animator/AvatarMask.ts","../../src/layaAir/laya/d3/component/Animator/Animator.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorTransition.ts","../../src/layaAir/laya/d3/component/Animator/AnimatorController.ts","../../src/layaAir/laya/d3/core/render/BatchMark.ts","../../src/layaAir/laya/d3/graphics/Batch/InstanceBatchManager.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/BatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticInstanceBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StatiVertexMergeBatchRender.ts","../../src/layaAir/laya/d3/component/Volume/BatchVolume/StaticBatchVolume.ts","../../src/layaAir/laya/d3/core/UI3D/UI3DGeometry.ts","../../src/layaAir/laya/d3/core/UI3D/UI3D.ts","../../src/layaAir/laya/d3/loaders/CubemapLoader.ts","../../src/layaAir/laya/d3/loaders/AnimationClipLoader.ts","../../src/layaAir/laya/d3/loaders/Texture2DArrayLoader.ts","../../src/layaAir/laya/d3/loaders/LoadModelV04.ts","../../src/layaAir/laya/d3/resource/models/MorphTarget.ts","../../src/layaAir/laya/d3/resource/models/MorphTargetData.ts","../../src/layaAir/laya/d3/loaders/LoadModelV05.ts","../../src/layaAir/laya/d3/loaders/MeshReader.ts","../../src/layaAir/laya/d3/loaders/MeshLoader.ts","../../src/layaAir/laya/d3/loaders/HierarchyParserV2.ts","../../src/layaAir/laya/d3/loaders/AvatarMaskLoader.ts","../../src/layaAir/laya/d3/loaders/GLSLLoader.ts","../../src/layaAir/laya/d3/loaders/AnimationControllerLoader.ts","../../src/layaAir/laya/d3/physics/HitResult.ts","../../src/layaAir/laya/d3/core/scene/Input3D.ts","../../src/layaAir/laya/d3/ModuleDef.ts","../../src/layaAir/laya/d3/loaders/LensFlareSettingsLoader.ts","../../src/layaAir/laya/d3/loaders/Texture3DLoader.ts","../../src/layaAir/laya/d3/math/BoundsImpl.ts","../../src/layaAir/laya/d3/math/BoundSphere.ts","../../src/layaAir/laya/d3/math/RandX.ts","../../src/layaAir/laya/d3/shadowMap/ShadowLightType.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/3DRenderPass/IRendderCMD.ts","../../src/layaAir/laya/Physics3D/physicsEnum/ECharacterCapable.ts","../../src/layaAir/laya/Physics3D/physicsEnum/EColliderCapable.ts","../../src/layaAir/laya/Physics3D/physicsEnum/EJointCapable.ts","../../src/layaAir/laya/Physics3D/interface/Joint/ID6Joint.ts","../../src/layaAir/laya/d3/shadowMap/ShadowSliceData.ts","../../src/layaAir/laya/d3/utils/Physics3DUtils.ts","../../src/layaAir/laya/d3/utils/Size.ts","../../src/layaAir/laya/d3/graphics/IndexBuffer3D.ts","../../src/layaAir/laya/d3/graphics/VertexBuffer3D.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/3DRenderPass/LengencyRenderEngine3DFactory.ts","../../src/layaAir/laya/d3/graphics/FrustumCulling.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCamera.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRRenderTexture.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRSessionManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRCameraManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRGamepad.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInput.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRInputManager.ts","../../src/layaAir/laya/d3/WebXR/core/WebXRExperienceHelper.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/UniformBufferManager/UniformBufferBlock.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/UniformBufferManager/UniformBufferCluster.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/UniformBufferManager/UniformBufferManager.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/UniformBufferManager/UniformBufferAlone.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/UniformBufferManager/UniformBufferUser.ts","../../src/layaAir/laya/d3/component/Script3D.ts","../../src/layaAir/laya/d3/component/HLOD/HLODRender.ts","../../src/layaAir/laya/d3/component/HLOD/HLOD.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchSubMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMesh.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRenderElement.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticBatchMeshRender.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshMergeInfo.ts","../../src/layaAir/laya/d3/core/particleShuriKen/module/GradientDataVector2.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstanceProperty.ts","../../src/layaAir/laya/d3/core/render/command/MaterialInstancePropertyBlock.ts","../../src/layaAir/laya/d3/animation/AnimatorStateScript.ts","../../src/layaAir/laya/d3/physics/Collision.ts","../../src/layaAir/laya/RenderDriver/DriverDesign/RenderDevice/CommandUniformMap.ts","../../src/layaAir/laya/d3/physics/ContactPoint.ts","../../src/layaAir/laya/d3/component/HLOD/HLODBatchMesh.ts","../../src/layaAir/laya/d3/component/HLOD/HLODUtil.ts","../../src/layaAir/laya/d3/core/pixelLine/PixelLineSprite3D.ts","../../src/layaAir/laya/d3/core/scene/SceneRenderManagerOBJ.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/Design/ShaderDefine.ts","../../src/layaAir/laya/d3/component/staticmesh/StaticMeshBatchManager.ts","../../src/layaAir/laya/d3/text/TextMesh.ts"],"sourcesContent":["import { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\n\r\n/**\r\n * @en DepthCasterData class for managing depth casting data.\r\n * @zh DepthCasterData 类，用于管理深度投射数据。\r\n */\r\nexport class DepthCasterData {\r\n    /**\r\n     * @en Stores the uniform buffer data for the depth caster\r\n     * @zh 存储深度投射器的统一缓冲数据\r\n     */\r\n    static DepthCasterUBOData: UnifromBufferData;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Create DepthCaster UniformBuffer.\r\n     * @returns The created UniformBufferData for depth caster.\r\n     * @zh 创建深度投射器的 UniformBuffer。\r\n     * @returns 创建的深度投射器 UniformBufferData。\r\n     */\r\n    static createDepthCasterUniformBlock(): UnifromBufferData {\r\n\r\n        if (!DepthCasterData.DepthCasterUBOData) {\r\n            let uniformpara = new Map<number, UniformBufferParamsType>();\r\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowBias\"), UniformBufferParamsType.Vector4);\r\n            uniformpara.set(Shader3D.propertyNameToID(\"u_ShadowLightDirection\"), UniformBufferParamsType.Vector3);\r\n            DepthCasterData.DepthCasterUBOData = new UnifromBufferData(uniformpara);\r\n        }\r\n\r\n        return DepthCasterData.DepthCasterUBOData;\r\n    }\r\n}","import { Config3D } from \"../../../Config3D\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DepthCasterData } from \"./DepthCasterData\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { DepthTextureMode, RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Viewport } from \"../../maths/Viewport\";\r\n\r\n/**\r\n * @en The `DepthPass` class is responsible for handling depth rendering and shadow mapping in a 3D scene.\r\n * @zh `DepthPass` 类负责处理3D场景中的深度渲染和阴影映射。\r\n */\r\nexport class DepthPass {\r\n    static SHADOW_BIAS: Vector4 = new Vector4();\r\n    /** @internal */\r\n    static DEPTHPASS: ShaderDefine;\r\n    /** @internal */\r\n    static DEFINE_SHADOW_BIAS: number;\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHNORMALSTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHZBUFFERPARAMS: number;\r\n    /**@internal */\r\n    static SHADOWUNIFORMBLOCK: number;\r\n\r\n    private _zBufferParams: Vector4;\r\n\r\n    static __init__() {\r\n        DepthPass.DEPTHPASS = Shader3D.getDefineByName(\"DEPTHPASS\");\r\n        DepthPass.DEFINE_SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\r\n        DepthPass.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        DepthPass.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\r\n        DepthPass.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        DepthPass.SHADOWUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW);\r\n    }\r\n\r\n    /**@internal */\r\n    private _depthTexture: RenderTexture;\r\n    /**@internal */\r\n    private _depthNormalsTexture: RenderTexture;\r\n    /**@internal */\r\n    private _viewPort: Viewport;\r\n    /**@internal */\r\n    private _camera: Camera;\r\n    /** @internal */\r\n    private _castDepthData: UnifromBufferData;\r\n    /** @internal */\r\n    private _castDepthUBO: UniformBufferObject;\r\n    /** @ignore */\r\n    constructor() {\r\n        if (Config3D._uniformBlock) {\r\n            this._castDepthData = DepthCasterData.createDepthCasterUniformBlock();\r\n            this._castDepthUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\r\n            if (!this._castDepthUBO) {\r\n                this._castDepthUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthData.getbyteLength(), true);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Creates and assigns the appropriate render texture for capturing depth information based on the specified depth texture mode. This method configures the camera's properties to hold newly created textures prepared for depth or depth normals rendering.\r\n     * @param camera The camera for which the depth texture is being prepared.\r\n     * @param depthType The type of depth texture to create, which determines the kind of data the texture will capture (e.g., depth only, depth and normals).\r\n     * @param depthTextureFormat The format of the depth texture, defining how the data is represented.\r\n     * @zh 根据指定的深度纹理模式创建并分配相应的渲染纹理，用于捕捉深度信息。\r\n     * 此方法配置相机的属性，以保存为深度或深度法线渲染准备的新创建的纹理。\r\n     * @param camera 准备深度纹理的相机。\r\n     * @param depthType 要创建的深度纹理类型，决定纹理将捕捉的数据种类（如仅深度，深度加法线等）。\r\n     * @param depthTextureFormat 深度纹理的格式，定义数据的表示方式。\r\n     */\r\n    getTarget(camera: Camera, depthType: DepthTextureMode, depthTextureFormat: RenderTargetFormat): void {\r\n        this._viewPort = camera.viewport;\r\n        this._camera = camera;\r\n        switch (depthType) {\r\n            case DepthTextureMode.Depth:\r\n                camera.depthTexture = this._depthTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, depthTextureFormat, RenderTargetFormat.None, false, 1);\r\n                break;\r\n            case DepthTextureMode.DepthNormals:\r\n                camera.depthNormalTexture = this._depthNormalsTexture = RenderTexture.createFromPool(this._viewPort.width, this._viewPort.height, RenderTargetFormat.R8G8B8A8, depthTextureFormat, false, 1);\r\n                break;\r\n            case DepthTextureMode.MotionVectors:\r\n                //TODO：\r\n                break;\r\n            default:\r\n                throw (\"there is UnDefined type of DepthTextureMode\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Parameters passed after rendering is complete.\r\n     * @zh 渲染完后传入使用的参数。\r\n     */\r\n    _setupDepthModeShaderValue(depthType: DepthTextureMode, camera: Camera) {\r\n        switch (depthType) {\r\n            case DepthTextureMode.Depth:\r\n                var far = camera.farPlane;\r\n                var near = camera.nearPlane;\r\n                this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n                camera._shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\r\n                camera._shaderValues.setTexture(DepthPass.DEPTHTEXTURE, this._depthTexture);\r\n                camera._shaderValues.setVector(DepthPass.DEPTHZBUFFERPARAMS, this._zBufferParams);\r\n                break;\r\n            default:\r\n                throw (\"there is UnDefined type of DepthTextureMode\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Clear the depth data.\r\n     * @zh 清理深度数据\r\n     */\r\n    cleanUp(): void {\r\n        (this._depthTexture instanceof RenderTexture) && this._depthTexture && RenderTexture.recoverToPool(this._depthTexture);\r\n        this._depthNormalsTexture && RenderTexture.recoverToPool(this._depthNormalsTexture);\r\n        this._depthTexture = null;\r\n        this._depthNormalsTexture = null;\r\n    }\r\n}\r\n\r\n","import { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Keyframe } from \"../core/Keyframe\"\r\n\r\n/**\r\n * @en The KeyframeNode class is used for animation keyframes.\r\n * @zh KeyframeNode 类用于动画关键帧。\r\n */\r\nexport class KeyframeNode {\r\n\tprivate _ownerPath: string[] = [];\r\n\tprivate _propertys: string[] = [];\r\n\r\n\t/**@internal */\r\n\t_keyFrames: Keyframe[] = [];\r\n\t/**@internal */\r\n\t_indexInList: number;\r\n\r\n\t/**@internal */\r\n\ttype: KeyFrameValueType;\r\n\t/**@internal */\r\n\tfullPath: string;\r\n\t/**@internal */\r\n\tnodePath: string;\r\n\t/**@internal */\r\n\tpropertyOwner: string;\r\n\t/**@internal call bake fun*/\r\n\tcallbackFunData: string;\r\n\t/**@internal apply params*/\r\n\tcallParams: any[];\r\n\t/**\r\n\t * @internal\r\n\t * ide\r\n\t */\r\n\tpropertyChangePath: string;\r\n\r\n\t/**\r\n\t * @en The number of sprite paths.\r\n\t * @zh 精灵路径个数。\r\n\t */\r\n\tget ownerPathCount(): number {\r\n\t\treturn this._ownerPath.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The number of property paths.\r\n\t * @zh 属性路径个数。\r\n\t */\r\n\tget propertyCount(): number {\r\n\t\treturn this._propertys.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The number of keyframes.\r\n\t * @zh 帧个数。\r\n\t */\r\n\tget keyFramesCount(): number {\r\n\t\treturn this._keyFrames.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathCount(value: number): void {\r\n\t\tthis._ownerPath.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setOwnerPathByIndex(index: number, value: string): void {\r\n\t\tthis._ownerPath[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinOwnerPath(sep: string): string {\r\n\t\treturn this._ownerPath.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyCount(value: number): void {\r\n\t\tthis._propertys.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setPropertyByIndex(index: number, value: string): void {\r\n\t\tthis._propertys[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_joinProperty(sep: string): string {\r\n\t\treturn this._propertys.join(sep);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeCount(value: number): void {\r\n\t\tthis._keyFrames.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setKeyframeByIndex(index: number, value: Keyframe): void {\r\n\t\tthis._keyFrames[index] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the sprite path by index.\r\n\t * @param index The index of the sprite path.\r\n\t * @returns The sprite path at the specified index.\r\n\t * @zh 通过索引获取精灵路径。\r\n\t * @param index 索引。\r\n\t * @returns 指定索引处的精灵路径。\r\n\t */\r\n\tgetOwnerPathByIndex(index: number): string {\r\n\t\treturn this._ownerPath[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the property path by index.\r\n\t * @param index The index of the property path.\r\n\t * @returns The property path at the specified index.\r\n\t * @zh 通过索引获取属性路径。\r\n\t * @param index 索引。\r\n\t * @returns 指定索引处的属性路径。\r\n\t */\r\n\tgetPropertyByIndex(index: number): string {\r\n\t\treturn this._propertys[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the keyframe by index.\r\n\t * @param index The index of the keyframe.\r\n\t * @returns The keyframe at the specified index.\r\n\t * @zh 通过索引获取帧。\r\n\t * @param index 索引。\r\n\t * @returns 指定索引处的关键帧。\r\n\t */\r\n\tgetKeyframeByIndex(index: number): Keyframe {\r\n\t\treturn this._keyFrames[index];\r\n\t}\r\n}","/**\r\n * @en The AnimationEvent class is used to implement animation events.\r\n * @zh AnimationEvent 类用于实现动画事件。\r\n */\r\nexport class AnimationEvent {\r\n    /**\r\n     * @en The time at which the event is triggered.\r\n     * @zh 事件触发的时间。\r\n     */\r\n\ttime: number;\r\n    /**\r\n     * @en The name of the triggered event.\r\n     * @zh 触发的事件名称。\r\n     */\r\n\teventName: string;\r\n    /**\r\n     * @en The parameters of the triggered event.\r\n     * @zh 触发事件的参数。\r\n     */\r\n\tparams: any[];\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../utils/IClone\";\r\n/**\r\n * @en Animation weight mode\r\n * @zh 动画权重模式\r\n */\r\n export enum WeightedMode {\r\n\t\r\n\t\r\n\tNone = 0,\r\n\tIn = 1,\r\n\tOut = 2,\r\n\tBoth = 3,\r\n}\r\n/**\r\n * @en The `Keyframe` class is used to create keyframe instances.\r\n * @zh `Keyframe` 类用于创建关键帧实例。\r\n */\r\nexport class Keyframe implements IClone {\r\n    /**\r\n     * @en The default weight value for keyframes.\r\n     * @zh 关键帧的默认权重值。\r\n     */\r\n\tstatic defaultWeight:number = 0.33333;\r\n    /**\r\n     * @en The time of the keyframe.\r\n     * @zh 关键帧的时间。\r\n     */\r\n\ttime: number;\r\n\r\n    /** @ignore */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n    /**\r\n     * @en Source of the keyframe.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆到另一个对象。\r\n     * @param destObject 克隆源。\r\n     */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destKeyFrame: Keyframe = (<Keyframe>destObject);\r\n\t\tdestKeyFrame.time = this.time;\r\n\t}\r\n\r\n    /**\r\n     * @en Creates a clone of the current keyframe.\r\n     * @returns A clone of the current keyframe.\r\n     * @zh 克隆。\r\n     * @returns 克隆副本。\r\n     */\r\n\tclone(): any {\r\n\t\tvar dest: Keyframe = new Keyframe();\r\n\t\t\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\nexport enum KeyFrameValueType {\r\n\tNone = -1,\r\n\tFloat = 0,\r\n\tPosition = 1,\r\n\tRotation = 2,\r\n\tScale = 3,\r\n\tRotationEuler = 4,\r\n\tVector2 = 5,\r\n\tVector3 = 6,\r\n\tVector4 = 7,\r\n\tColor = 8\r\n}\r\n/**\r\n * @internal\r\n * @en The KeyframeNodeOwner class is used to store the owner information of frame nodes.\r\n * @zh KeyframeNodeOwner 类用于保存帧节点的拥有者信息。\r\n */\r\nexport class KeyframeNodeOwner {\r\n\t/**\r\n\t * @internal\r\n\t * @en Index in the list\r\n\t * @zh 列表中的索引\r\n\t */\r\n\tindexInList: number = -1;\r\n\t/**\r\n\t * @internal\r\n\t * @en Reference count\r\n\t * @zh 引用计数\r\n\t */\r\n\treferenceCount: number = 0;\r\n\t/**\r\n\t * @internal\r\n\t * @en Update mark\r\n\t * @zh 更新标记\r\n\t */\r\n\tupdateMark: number = -1;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en 0 float, 1 position, 2 rotation, 3 Scale, 4 rotationEuler\r\n\t * @zh 0 浮点数, 1 位置, 2 旋转, 3 缩放, 4 欧拉角旋转\r\n\t */\r\n\ttype: KeyFrameValueType = -1;\r\n\t/**\r\n\t * @internal\r\n\t * @en Full path of the node\r\n\t * @zh 节点的完整路径\r\n\t */\r\n\tfullPath: string | null = null;\r\n\tnodePath: string | null = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Owner of the property\r\n\t * @zh 属性的所有者\r\n\t */\r\n\tpropertyOwner: any = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Property array\r\n\t * @zh 属性数组\r\n\t */\r\n\tproperty: string[] | null = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Default value of the property\r\n\t * @zh 属性的默认值\r\n\t */\r\n\tdefaultValue: any = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Current value of the property\r\n\t * @zh 属性的当前值\r\n\t */\r\n\tvalue: any = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Fixed value for cross-fading\r\n\t * @zh 用于交叉淡入淡出的固定值\r\n\t */\r\n\tcrossFixedValue: any = null;\r\n\t/**\r\n\t * @internal\r\n\t * @en Whether the property belongs to a material\r\n\t * @zh 属性是否属于材质\r\n\t */\r\n\tisMaterial: boolean = false;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Callback path\r\n\t * @zh 回调路径\r\n\t */\r\n\tcallbackFunData: string;\r\n\t/**\r\n\t * @internal\r\n\t * @en Callback owner\r\n\t * @zh 回调归属\r\n\t */\r\n\tcallBackOwner: any;\r\n\t/**@internal */\r\n\tcallbackFun: string;\r\n\t/**@internal */\r\n\tcallParams: any[];\r\n\t/**\r\n\t * @en constructor of KeyframeNodeOwner\r\n\t * @zh 构造函数\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsaveCrossFixedValue(): void {\r\n\t\tvar pro: any = this.propertyOwner;\r\n\t\tif (pro) {\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.crossFixedValue = this.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 3:\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t(<Vector3>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t(<Quaternion>this.value).cloneTo(this.crossFixedValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"Animator:unknown type.\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tanimatorDataSetCallBack() {\r\n\t\tlet fn: Function = this.callBackOwner[this.callbackFun];\r\n\t\tfn.apply(this.callBackOwner, this.callParams);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetCallbackNode() {\r\n\t\tif (this.propertyOwner && this.callbackFunData) {\r\n\t\t\tlet funPropertys = this.callbackFunData.split(\".\");\r\n\t\t\tthis.callBackOwner = this.propertyOwner;\r\n\t\t\tfor (let i = 0, n = funPropertys.length - 1; i < n; i++) {\r\n\t\t\t\tthis.callBackOwner = this.callBackOwner[funPropertys[i]];\r\n\t\t\t}\r\n\t\t\tthis.callbackFun = funPropertys[funPropertys.length - 1];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Keyframe, WeightedMode } from \"./Keyframe\";\r\n/**\r\n * @en The `FloatKeyframe` class is used to create floating-point keyframe instances.\r\n * @zh `FloatKeyframe` 类用于创建浮点关键帧实例。\r\n */\r\nexport class FloatKeyframe extends Keyframe {\r\n    /**\r\n     * @en The in-tangent of the keyframe.\r\n     * @zh 关键帧的内切线。\r\n     */\r\n\tinTangent: number;\r\n    /**\r\n     * @en The out-tangent of the keyframe.\r\n     * @zh 关键帧的外切线。\r\n     */\r\n\toutTangent: number;\r\n    /**\r\n     * @en The value of the keyframe.\r\n     * @zh 关键帧的值。\r\n     */\r\n\tvalue: number;\r\n    /**\r\n     * @en The in-weight of the keyframe. Default is Keyframe.defaultWeight.\r\n     * @zh 关键帧的内权重。默认值为 Keyframe.defaultWeight。\r\n     */\r\n\tinWeight: number = Keyframe.defaultWeight;\r\n    /**\r\n     * @en The out-weight of the keyframe. Default is Keyframe.defaultWeight.\r\n     * @zh 关键帧的外权重。默认值为 Keyframe.defaultWeight。\r\n     */\r\n\toutWeight: number = Keyframe.defaultWeight;\r\n    /**\r\n     * @en The weighted mode of the keyframe. Default is WeightedMode.None.\r\n     * @zh 关键帧的权重模式。默认值为 WeightedMode.None。\r\n     */\r\n\tweightedMode: number = WeightedMode.None;\r\n\r\n     /**\r\n      * @ignore\r\n      * @en Creates an instance of `FloatKeyframe`.\r\n      * @zh 创建一个 `FloatKeyframe` 的实例。\r\n      */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n     * @en Clones the data to another object.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆数据到目标对象。\r\n\t * @param destObject 拷贝数据结构\r\n     */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destKeyFrame: FloatKeyframe = (<FloatKeyframe>destObject);\r\n\t\tdestKeyFrame.inTangent = this.inTangent;\r\n\t\tdestKeyFrame.outTangent = this.outTangent;\r\n\t\tdestKeyFrame.value = this.value;\r\n\t\tdestKeyFrame.inTangent = this.inTangent;\r\n\t\tdestKeyFrame.outTangent = this.outTangent;\r\n\t\tdestKeyFrame.value = this.value;\r\n\t\tdestKeyFrame.inWeight = this.inWeight;\r\n\t\tdestKeyFrame.outWeight = this.outWeight;\r\n\t\tdestKeyFrame.weightedMode = this.weightedMode;\r\n\t}\r\n\r\n    /**\r\n     * @en Clones.\r\n     * @zh 克隆\r\n     */\r\n\tclone(): FloatKeyframe {\r\n\t\tlet f = new FloatKeyframe();\r\n\t\tthis.cloneTo(f);\r\n\t\treturn f;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { Keyframe } from \"./Keyframe\";\r\n\r\n/**\r\n * @en The `QuaternionKeyframe` class is used to create quaternion keyframe instances.\r\n * @zh `QuaternionKeyframe` 类用于创建四元数关键帧实例。\r\n */\r\nexport class QuaternionKeyframe extends Keyframe {\r\n    /**\r\n     * @en In-tangent of the keyframe\r\n     * @zh 内切线\r\n     */\r\n\tinTangent: Vector4 = new Vector4();\r\n    /**\r\n     * @en Out-tangent of the keyframe\r\n     * @zh 外切线\r\n     */\r\n\toutTangent: Vector4 = new Vector4();\r\n    /**\r\n     * @en Frame data (quaternion value)\r\n     * @zh 帧数据（四元数值）\r\n     */\r\n\tvalue: Quaternion = new Quaternion();\r\n    /**\r\n     * @en In-weight of the keyframe\r\n     * @zh 内权重\r\n     */\r\n\tinWeight: Vector4;\r\n    /**\r\n     * @en Out-weight of the keyframe\r\n     * @zh 外权重\r\n     */\r\n\toutWeight: Vector4;\r\n    /**\r\n     * @en Weight mode of the keyframe\r\n     * @zh 权重模式\r\n     */\r\n\tweightedMode: Vector4;\r\n\r\n    /**\r\n     * @en Creates an instance of `QuaternionKeyframe`.\r\n     * @param weightMode Whether to enable weight mode\r\n     * @zh 创建一个 `QuaternionKeyframe` 的实例。\r\n\t * @param weightMode 是否启用权重模式\r\n     */\r\n\tconstructor(weightMode: boolean = false) {\r\n\t\tsuper();\r\n\t\tif (weightMode) {\r\n\t\t\tthis.inWeight = new Vector4();\r\n\t\t\tthis.outWeight = new Vector4();\r\n\t\t\tthis.weightedMode = new Vector4();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n     * @en Clone the QuaternionKeyframe.\r\n     * @param dest The target object to clone to\r\n     * @zh 克隆。\r\n     * @param dest 克隆源。\r\n     */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: QuaternionKeyframe = (<QuaternionKeyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif (this.weightedMode) {\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n/**\r\n * @en The `Vector3Keyframe` class is used to create instances of three-dimensional vector keyframes.\r\n * @zh `Vector3Keyframe` 类用于创建三维向量关键帧实例。\r\n */\r\nexport class Vector3Keyframe extends Keyframe {\r\n\t/**\r\n\t * @en In tangent.\r\n\t * @zh 内切线。\r\n\t */\r\n\tinTangent: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en Out tangent.\r\n\t * @zh 外切线。\r\n\t */\r\n\toutTangent: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en Frame data.\r\n\t * @zh 帧数据。\r\n\t */\r\n\tvalue: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en In weight.\r\n\t * @zh 内权重。\r\n\t */\r\n\tinWeight: Vector3;\r\n\t/**\r\n\t * @en Out weight.\r\n\t * @zh 外权重。\r\n\t */\r\n\toutWeight: Vector3;\r\n\t/**\r\n\t * @en Weight mode.\r\n\t * @zh 权重模式。\r\n\t */\r\n\tweightedMode: Vector3;\r\n\r\n\r\n\t/**\r\n\t * @en Creates an instance of Vector3Keyframe.\r\n\t * @param weightMode Whether to use weight mode. Default is false.\r\n\t * @zh 创建一个Vector3Keyframe实例。\r\n\t * @param weightMode 是否使用权重模式。默认为 false。\r\n\t */\r\n\tconstructor(weightMode: boolean = false) {\r\n\t\tsuper();\r\n\t\tif (weightMode) {\r\n\t\t\tthis.inWeight = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.outWeight = new Vector3(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.weightedMode = new Vector3(WeightedMode.None, WeightedMode.None, WeightedMode.None);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* @override\r\n\t* @en Clone\r\n\t* @param destObject The target object to clone to.\r\n\t* @zh 克隆\r\n\t* @param destObject 克隆源。\r\n\t*/\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector3Keyframe = (<Vector3Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif (this.weightedMode) {\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\r\n\t}\r\n}","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * @internal\r\n * @en A tool class for parsing AnimationClip data.\r\n * @zh 解析AnimationClip数据的工具类。\r\n */\r\nexport class AnimationClipParser03 {\r\n\tprivate static _animationClip: AnimationClip;\r\n\tprivate static _reader: Byte;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser03._DATA.offset = AnimationClipParser03._reader.getUint32();\r\n\t\tAnimationClipParser03._DATA.size = AnimationClipParser03._reader.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser03._BLOCK.count = AnimationClipParser03._reader.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser03._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser03._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser03._reader.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser03._reader.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser03._reader.getUint32();\r\n\t\tvar count: number = AnimationClipParser03._reader.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser03._reader.pos;\r\n\t\tAnimationClipParser03._reader.pos = offset + AnimationClipParser03._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser03._strings[i] = AnimationClipParser03._reader.readUTFString();\r\n\t\tAnimationClipParser03._reader.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Parse the AnimationClip data from the byte reader.\r\n\t * This method reads the AnimationClip data, including blocks and strings, and processes each block according to its type.\r\n\t * @param clip The AnimationClip object to be populated with parsed data.\r\n\t * @param reader The Byte reader containing the AnimationClip data.\r\n\t * @zh 从字节读取器中解析AnimationClip数据。\r\n\t * 此方法读取AnimationClip数据，包括块和字符串，并根据每个块的类型进行处理。\r\n\t * @param clip 要填充解析数据的 AnimationClip 对象。\r\n\t * @param reader 包含AnimationClip数据的字节读取器。\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte): void {\r\n\t\tAnimationClipParser03._animationClip = clip;\r\n\t\tAnimationClipParser03._reader = reader;\r\n\r\n\t\tAnimationClipParser03.READ_DATA();\r\n\t\tAnimationClipParser03.READ_BLOCK();\r\n\t\tAnimationClipParser03.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser03._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser03._strings[index];\r\n\t\t\tvar fn: () => void = (AnimationClipParser03 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Read and parse animation data from the byte reader.\r\n\t * This method reads AnimationClip information, keyframe nodes, and animation events.\r\n\t * It populates the AnimationClip object with the parsed data.\r\n\t * @zh 从字节读取器中读取并解析动画数据。\r\n\t * 此方法读取AnimationClip信息、关键帧节点和动画事件。\r\n\t * 它用解析的数据填充 AnimationClip 对象。\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser03._reader;\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser03._animationClip;\r\n\t\tclip.name = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes = clip._nodes;\r\n\t\t(nodes as KeyframeNodeList).count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\t(nodes as KeyframeNodeList).setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser03._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser03._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\r\n\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\r\n\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\r\n\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar quaArrayKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaArrayKeyframe);\r\n\t\t\t\t\t\tquaArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\tvar inTangentQua: Vector4 = quaArrayKeyframe.inTangent;\r\n\t\t\t\t\t\tvar outTangentQua: Vector4 = quaArrayKeyframe.outTangent;\r\n\t\t\t\t\t\tvar valueQua: Quaternion = quaArrayKeyframe.value;\r\n\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"AnimationClipParser03:unknown type.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser03._strings[reader.getUint16()];\r\n\t\t\tvar params: Array<number | boolean | string> = [];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser03._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { Vector2 } from \"../../maths/Vector2\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n\r\n/**\r\n * @en The `Vector2Keyframe` class is used to create instances of two-dimensional vector keyframes.\r\n * @zh `Vector2Keyframe` 类用于创建二维向量关键帧实例。\r\n */\r\nexport class Vector2Keyframe extends Keyframe {\r\n     /**\r\n      * @en In tangent.\r\n      * @zh 内切线。\r\n      */\r\n     inTangent: Vector2 = new Vector2();\r\n     /**\r\n      * @en Out tangent.\r\n      * @zh 外切线。\r\n      */\r\n     outTangent: Vector2 = new Vector2();\r\n     /**\r\n      * @en Frame data.\r\n      * @zh 帧数据。\r\n      */\r\n     value: Vector2 = new Vector2();\r\n     /**\r\n      * @en In weight.\r\n      * @zh 内权重。\r\n      */\r\n     inWeight: Vector2;\r\n     /**\r\n      * @en Out weight.\r\n      * @zh 外权重。\r\n      */\r\n     outWeight: Vector2;\r\n     /**\r\n      * @en Weight mode.\r\n      * @zh 权重模式。\r\n      */\r\n     weightedMode: Vector2;\r\n\r\n\r\n     /**\r\n      * @en Creates an instance of Vector2Keyframe.\r\n      * @param weightMode Whether to use weight mode. Default is false.\r\n      * @zh 创建 Vector2Keyframe 的实例。\r\n      * @param weightMode 是否使用权重模式。默认为 false。\r\n      */\r\n     constructor(weightMode: boolean = false) {\r\n          super();\r\n          if (weightMode) {\r\n               this.inWeight = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n               this.outWeight = new Vector2(Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n               this.weightedMode = new Vector2(WeightedMode.None, WeightedMode.None);\r\n          }\r\n     }\r\n\r\n     /**\r\n     * @override\r\n     * @en Clone\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆\r\n     * @param destObject 克隆源。\r\n     */\r\n     cloneTo(dest: any): void {\r\n          super.cloneTo(dest);\r\n          var destKeyFarme: Vector2Keyframe = (<Vector2Keyframe>dest);\r\n          this.inTangent.cloneTo(destKeyFarme.inTangent);\r\n          this.outTangent.cloneTo(destKeyFarme.outTangent);\r\n          this.value.cloneTo(destKeyFarme.value);\r\n          if (this.weightedMode) {\r\n               this.inWeight.cloneTo(destKeyFarme.inWeight);\r\n               this.outWeight.cloneTo(destKeyFarme.outWeight);\r\n               this.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n          }\r\n\r\n     }\r\n}\r\n","import { Vector4 } from \"../../maths/Vector4\";\r\nimport { Keyframe, WeightedMode } from \"./Keyframe\";\r\n\r\n\r\n/**\r\n * @en The `Vector4Keyframe` class is used to create instances of four-dimensional vector keyframes.\r\n * @zh `Vector4Keyframe` 类用于创建四维向量关键帧实例。\r\n */\r\nexport class Vector4Keyframe extends Keyframe {\r\n    /**\r\n     * @en In tangent.\r\n     * @zh 内切线。\r\n     */\r\n\tinTangent: Vector4 = new Vector4();\r\n    /**\r\n     * @en Out tangent.\r\n     * @zh 外切线。\r\n     */\r\n\toutTangent: Vector4 = new Vector4();\r\n    /**\r\n     * @en Frame data.\r\n     * @zh 帧数据。\r\n     */\r\n\tvalue: Vector4 = new Vector4();\r\n    /**\r\n     * @en In weight.\r\n     * @zh 内权重。\r\n     */\r\n\tinWeight: Vector4;\r\n    /**\r\n     * @en Out weight.\r\n     * @zh 外权重。\r\n     */\r\n\toutWeight: Vector4;\r\n    /**\r\n     * @en Out weight.\r\n     * @zh 外权重。\r\n     */\r\n\tweightedMode: Vector4;\r\n\r\n    /**\r\n     * @en Creates an instance of the `Vector4Keyframe` class.\r\n     * @param weightMode Whether to use weight mode. Default is false.\r\n     * @zh 创建 `Vector4Keyframe` 类的实例。\r\n\t * @param weightMode 是否使用权重模式。默认为 false。\r\n     */\r\n\tconstructor(weightMode: boolean = false) {\r\n\t\tsuper();\r\n\t\tif (weightMode) {\r\n\t\t\tthis.inWeight = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.outWeight = new Vector4(Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight, Keyframe.defaultWeight);\r\n\t\t\tthis.weightedMode = new Vector4(WeightedMode.None, WeightedMode.None, WeightedMode.None, WeightedMode.None);\r\n\t\t}\r\n\t}\r\n\r\n     /**\r\n     * @override\r\n     * @en Clone\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆\r\n     * @param destObject 克隆源。\r\n     */\r\n\tcloneTo(dest: any): void {\r\n\t\tsuper.cloneTo(dest);\r\n\t\tvar destKeyFarme: Vector4Keyframe = (<Vector4Keyframe>dest);\r\n\t\tthis.inTangent.cloneTo(destKeyFarme.inTangent);\r\n\t\tthis.outTangent.cloneTo(destKeyFarme.outTangent);\r\n\t\tthis.value.cloneTo(destKeyFarme.value);\r\n\t\tif (this.weightedMode) {\r\n\t\t\tthis.inWeight.cloneTo(destKeyFarme.inWeight);\r\n\t\t\tthis.outWeight.cloneTo(destKeyFarme.outWeight);\r\n\t\t\tthis.weightedMode.cloneTo(destKeyFarme.weightedMode);\r\n\t\t}\r\n\t}\r\n}","import { KeyframeNode } from \"./KeyframeNode\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { AnimationClip } from \"./AnimationClip\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\";\r\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\r\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\r\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { WeightedMode } from \"../core/Keyframe\";\r\n\r\n/**\r\n * @internal\r\n * @en A tool class for parsing AnimationClip data.\r\n * @zh 解析AnimationClip数据的工具类。\r\n */\r\nexport class AnimationClipParser04 {\r\n\tprivate static _animationClip: AnimationClip | null;\r\n\tprivate static _reader: Byte | null;\r\n\tprivate static _strings: any[] = [];\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\tprivate static _version: string | null;\r\n\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationClipParser04._DATA.offset = AnimationClipParser04._reader!.getUint32();\r\n\t\tAnimationClipParser04._DATA.size = AnimationClipParser04._reader!.getUint32();\r\n\t}\r\n\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationClipParser04._BLOCK.count = AnimationClipParser04._reader!.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationClipParser04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationClipParser04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationClipParser04._reader!.getUint32());\r\n\t\t\tblockLengths.push(AnimationClipParser04._reader!.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationClipParser04._reader!.getUint32();\r\n\t\tvar count: number = AnimationClipParser04._reader!.getUint16();\r\n\t\tvar prePos: number = AnimationClipParser04._reader!.pos;\r\n\t\tAnimationClipParser04._reader!.pos = offset + AnimationClipParser04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationClipParser04._strings[i] = AnimationClipParser04._reader!.readUTFString();\r\n\t\tAnimationClipParser04._reader!.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Parse AnimationClip data from a byte stream.\r\n\t * @param clip The AnimationClip object to be populated with parsed data.\r\n\t * @param reader The Byte object containing the animation data to be parsed.\r\n\t * @param version The version string of the animation data format.\r\n\t * @zh 从字节流中解析AnimationClip数据。\r\n\t * @param clip 要填充解析数据的 AnimationClip 对象。\r\n\t * @param reader 包含要解析的动画数据的 Byte 对象。\r\n\t * @param version 动画数据格式的版本字符串。\r\n\t */\r\n\tstatic parse(clip: AnimationClip, reader: Byte, version: string): void {\r\n\t\tAnimationClipParser04._animationClip = clip;\r\n\t\tAnimationClipParser04._reader = reader;\r\n\t\tAnimationClipParser04._version = version;\r\n\t\tAnimationClipParser04.READ_DATA();\r\n\t\tAnimationClipParser04.READ_BLOCK();\r\n\t\tAnimationClipParser04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationClipParser04._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationClipParser04._strings[index];\r\n\t\t\tvar fn: () => void = (AnimationClipParser04 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tAnimationClipParser04._version = null;\r\n\t\tAnimationClipParser04._reader = null;\r\n\t\tAnimationClipParser04._animationClip = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Parse the various components of the AnimationClip from binary data and assemble them into a complete AnimationClip object for subsequent animation playback and processing.\r\n\t * @zh 从二进制数据中解析出 AnimationClip 的各个组成部分，并将其组装成一个完整的 AnimationClip 对象，以便后续的动画播放和处理。\r\n\t */\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar i: number, j: number;\r\n\t\tvar node: KeyframeNode;\r\n\t\tvar reader: Byte = AnimationClipParser04._reader!;\r\n\r\n\t\tvar startTimeTypes: number[] = [];\r\n\t\tvar startTimeTypeCount: number = reader.getUint16();\r\n\t\tstartTimeTypes.length = startTimeTypeCount;\r\n\t\tfor (i = 0; i < startTimeTypeCount; i++)\r\n\t\t\tstartTimeTypes[i] = reader.getFloat32();\r\n\r\n\t\tvar clip: AnimationClip = AnimationClipParser04._animationClip!;\r\n\t\tclip.name = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\tvar clipDur: number = clip._duration = reader.getFloat32();\r\n\t\tclip.islooping = !!reader.getByte();\r\n\t\tclip._frameRate = reader.getInt16();\r\n\t\tvar nodeCount: number = reader.getInt16();\r\n\t\tvar nodes: KeyframeNodeList = clip._nodes!;\r\n\t\tnodes.count = nodeCount;\r\n\t\tvar nodesMap: any = clip._nodesMap = {};\r\n\t\tvar nodesDic: any = clip._nodesDic = {};\r\n\r\n\t\tfor (i = 0; i < nodeCount; i++) {\r\n\t\t\tnode = new KeyframeNode();\r\n\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\tif (1 == reader.getByte()) {\r\n\t\t\t\t\t//propertyChangePath,IDE里面还原数据时候使用，引擎中是不需要的\r\n\t\t\t\t\tnode.propertyChangePath = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\t\t}\r\n\t\t\t\tif (1 == reader.getByte()) {\r\n\t\t\t\t\tnode.callbackFunData = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet paramLen = reader.getUint8();\r\n\t\t\t\tlet callParms: any[] = null;\r\n\t\t\t\tfor (j = 0; j < paramLen; j++) {\r\n\t\t\t\t\tif (null == callParms) {\r\n\t\t\t\t\t\tcallParms = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallParms.push(AnimationClipParser04._strings[reader.getUint16()]);\r\n\t\t\t\t}\r\n\t\t\t\tnode.callParams = callParms;\r\n\t\t\t}\r\n\t\t\tnodes.setNodeByIndex(i, node);\r\n\t\t\tnode._indexInList = i;\r\n\t\t\tvar type: number = node.type = reader.getUint8();\r\n\r\n\t\t\tvar pathLength: number = reader.getUint16();\r\n\t\t\tnode._setOwnerPathCount(pathLength);\r\n\t\t\tfor (j = 0; j < pathLength; j++)\r\n\t\t\t\tnode._setOwnerPathByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);//TODO:如果只有根节点并且为空，是否可以和componentType一样优化。\r\n\r\n\t\t\tvar nodePath: string = node._joinOwnerPath(\"/\");\r\n\t\t\tvar mapArray: KeyframeNode[] = nodesMap[nodePath];\r\n\t\t\t(mapArray) || (nodesMap[nodePath] = mapArray = []);\r\n\t\t\tmapArray.push(node);\r\n\r\n\t\t\tnode.propertyOwner = AnimationClipParser04._strings[reader.getUint16()];\r\n\r\n\t\t\tvar propertyLength: number = reader.getUint16();\r\n\t\t\tnode._setPropertyCount(propertyLength);\r\n\t\t\tfor (j = 0; j < propertyLength; j++)\r\n\t\t\t\tnode._setPropertyByIndex(j, AnimationClipParser04._strings[reader.getUint16()]);\r\n\r\n\t\t\tvar fullPath: string = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\r\n\t\t\tnodesDic[fullPath] = node;\r\n\t\t\tnode.fullPath = fullPath;\r\n\t\t\tnode.nodePath = nodePath;\r\n\r\n\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\tnode._setKeyframeCount(keyframeCount);\r\n\t\t\tswitch (AnimationClipParser04._version) {\r\n\t\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\r\n\t\t\t\tcase \"LAYAANIMATION:WEIGHT_05\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tlet isWeight = 1;\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tvar floatKeyframe: FloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tfloatKeyframe.weightedMode = reader.getUint8();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tif (WeightedMode.In == floatKeyframe.weightedMode || WeightedMode.Both == floatKeyframe.weightedMode) {\r\n\t\t\t\t\t\t\t\t\t\tfloatKeyframe.inWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (WeightedMode.Out == floatKeyframe.weightedMode || WeightedMode.Both == floatKeyframe.weightedMode) {\r\n\t\t\t\t\t\t\t\t\t\tfloatKeyframe.outWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tfloatKeyframe.inWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tfloatKeyframe.outWeight = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tvar floatArrayKeyframe: Vector3Keyframe = new Vector3Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangent: Vector3 = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangent: Vector3 = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar value: Vector3 = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tlet weidhtMode = floatArrayKeyframe.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeight = floatArrayKeyframe.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeight = floatArrayKeyframe.outWeight;\r\n\t\t\t\t\t\t\t\tinTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangent.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalue.z = reader.getFloat32();\r\n\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweidhtMode.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweidhtMode.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweidhtMode.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeight.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeight.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeight.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeight.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tvar quaternionKeyframe: QuaternionKeyframe = new QuaternionKeyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentQua: Vector4 = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentQua: Vector4 = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueQua: Quaternion = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tlet weightModeV4 = quaternionKeyframe.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeightQua = quaternionKeyframe.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeightQua = quaternionKeyframe.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueQua.w = reader.getFloat32();\r\n\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightModeV4.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV4.w = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightQua.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tlet weightModeV2 = vec2Keyfram.weightedMode;\r\n\t\t\t\t\t\t\t\tlet inWeightV2 = vec2Keyfram.inWeight;\r\n\t\t\t\t\t\t\t\tlet outWeightV2 = vec2Keyfram.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightModeV2.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightModeV2.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV2.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV2.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe(true);\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tvar weightMode_V4 = vec4Keyfram.weightedMode;\r\n\t\t\t\t\t\t\t\tvar inWeightV4 = vec4Keyfram.inWeight;\r\n\t\t\t\t\t\t\t\tvar outWeightV4 = vec4Keyfram.outWeight;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tinTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\toutTangentV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tvalueV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\tif (\"LAYAANIMATION:WEIGHT_05\" == AnimationClipParser04._version) {\r\n\t\t\t\t\t\t\t\t\tisWeight = reader.getByte();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (1 == isWeight) {\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.x = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.y = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.z = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tweightMode_V4.w = reader.getUint8();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\tinWeightV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.x = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.y = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.z = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t\toutWeightV4.w = reader.getFloat32();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\t\t\tfor (j = 0; j < keyframeCount; j++) {\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\t\t\t\tfloatKeyframe = new FloatKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatKeyframe);\r\n\t\t\t\t\t\t\t\tfloatKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tfloatKeyframe.inTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.outTangent = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tfloatKeyframe.value = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe = new Vector3Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, floatArrayKeyframe);\r\n\t\t\t\t\t\t\t\tfloatArrayKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tinTangent = floatArrayKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\toutTangent = floatArrayKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvalue = floatArrayKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangent.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalue.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\t\t\t\tquaternionKeyframe = new QuaternionKeyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, quaternionKeyframe);\r\n\t\t\t\t\t\t\t\tquaternionKeyframe.time = startTimeTypes[reader.getUint16()];\r\n\r\n\t\t\t\t\t\t\t\tinTangentQua = quaternionKeyframe.inTangent;\r\n\t\t\t\t\t\t\t\toutTangentQua = quaternionKeyframe.outTangent;\r\n\t\t\t\t\t\t\t\tvalueQua = quaternionKeyframe.value;\r\n\t\t\t\t\t\t\t\tinTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueQua.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\t\t\t\tvar vec2Keyfram = new Vector2Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec2Keyfram);\r\n\t\t\t\t\t\t\t\tvec2Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV2: Vector2 = vec2Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV2: Vector2 = vec2Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV2: Vector2 = vec2Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV2.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV2.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\t\t\t\tvar vec4Keyfram = new Vector4Keyframe();\r\n\t\t\t\t\t\t\t\tnode._setKeyframeByIndex(j, vec4Keyfram);\r\n\t\t\t\t\t\t\t\tvec4Keyfram.time = startTimeTypes[reader.getUint16()];\r\n\t\t\t\t\t\t\t\tvar inTangentV4: Vector4 = vec4Keyfram.inTangent;\r\n\t\t\t\t\t\t\t\tvar outTangentV4: Vector4 = vec4Keyfram.outTangent;\r\n\t\t\t\t\t\t\t\tvar valueV4: Vector4 = vec4Keyfram.value;\r\n\t\t\t\t\t\t\t\tinTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tinTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\toutTangentV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.x = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.y = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.z = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tvalueV4.w = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow \"AnimationClipParser04:unknown type.\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar eventCount: number = reader.getUint16();\r\n\t\tfor (i = 0; i < eventCount; i++) {\r\n\t\t\tvar event: AnimationEvent = new AnimationEvent();\r\n\t\t\tevent.time = Math.min(clipDur, reader.getFloat32());//TODO:事件时间可能大于动画总时长\r\n\t\t\tevent.eventName = AnimationClipParser04._strings[reader.getUint16()];\r\n\t\t\tvar params: Array<number | string | boolean> = [];\r\n\t\t\tvar paramCount: number = reader.getUint16();\r\n\t\t\t(paramCount > 0) && (event.params = params = []);\r\n\r\n\t\t\tfor (j = 0; j < paramCount; j++) {\r\n\t\t\t\tvar eventType: number = reader.getByte();\r\n\t\t\t\tswitch (eventType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tparams.push(!!reader.getByte());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tparams.push(reader.getInt32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tparams.push(reader.getFloat32());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tparams.push(AnimationClipParser04._strings[reader.getUint16()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknown type.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addEvent(event);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { KeyframeNode } from \"./KeyframeNode\";\r\n\r\n/**\r\n * @en The KeyframeNodeList class is used to create a queue of KeyframeNode nodes.\r\n * @zh KeyframeNodeList 类用于创建 KeyframeNode 节点队列。\r\n */\r\nexport class KeyframeNodeList {\r\n\t/** @internal */\r\n\tprivate _nodes: KeyframeNode[] = [];\r\n\r\n\t/**\r\n\t * @en The number of nodes.\r\n\t * @zh 节点个数。\r\n\t */\r\n\tget count(): number {\r\n\t\treturn this._nodes.length;\r\n\t}\r\n\r\n\tset count(value: number) {\r\n\t\tthis._nodes.length = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of KeyframeNodeList.\r\n\t * @zh 创建一个KeyframeNodeList实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get a node by its index.\r\n\t * @param index The index of the node.\r\n\t * @returns The KeyframeNode at the specified index.\r\n\t * @zh 通过索引获取节点。\r\n\t * @param index 索引。\r\n\t * @returns 指定索引处的 KeyframeNode 节点。\r\n\t */\r\n\tgetNodeByIndex(index: number): KeyframeNode {\r\n\t\treturn this._nodes[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Set a node at the specified index.\r\n\t * @param index The index at which to set the node.\r\n\t * @param node The KeyframeNode to set.\r\n\t * @zh 通过索引设置节点。\r\n\t * @param index 索引。\r\n\t * @param node 要设置的 KeyframeNode 节点。\r\n\t */\r\n\tsetNodeByIndex(index: number, node: KeyframeNode): void {\r\n\t\tthis._nodes[index] = node;\r\n\t}\r\n\r\n}\r\n","import { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { Texture2D } from \"../../resource/Texture2D\"\r\n\r\n\r\n/**\r\n * 贴图生成器\r\n * @internal\r\n */\r\nexport class TextureGenerator {\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\tstatic lightAttenTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\r\n\r\n\t\tvar sqrRange: number = x / maxX;\r\n\t\tvar atten: number = 1.0 / (1.0 + 25.0 * sqrRange);\r\n\t\tif (sqrRange >= 0.64) {\r\n\t\t\tif (sqrRange > 1.0) {\r\n\t\t\t\tatten = 0;\r\n\t\t\t} else {\r\n\t\t\t\tatten *= 1 - (sqrRange - 0.64) / (1 - 0.64);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata[index] = Math.floor(atten * 255.0 + 0.5);\r\n\t}\r\n\r\n\tstatic haloTexture(x: number, y: number, maxX: number, maxY: number, index: number, data: Uint8Array): void {\r\n\r\n\t\tmaxX >>= 1;\r\n\t\tmaxY >>= 1;\r\n\t\tvar xFac: number = (x - maxX) / maxX;\r\n\t\tvar yFac: number = (y - maxY) / maxY;\r\n\t\tvar sqrRange: number = xFac * xFac + yFac * yFac;\r\n\t\tif (sqrRange > 1.0) {\r\n\t\t\tsqrRange = 1.0;\r\n\t\t}\r\n\t\tdata[index] = Math.floor((1.0 - sqrRange) * 255.0 + 0.5);\r\n\t}\r\n\r\n\tstatic _generateTexture2D(texture: Texture2D, textureWidth: number, textureHeight: number, func: Function): void {\r\n\t\tvar index: number = 0;\r\n\t\tvar size: number = 0;\r\n\t\tswitch (texture.format) {\r\n\t\t\tcase TextureFormat.R8G8B8:\r\n\t\t\t\tsize = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.R8G8B8A8:\r\n\t\t\t\tsize = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TextureFormat.Alpha8:\r\n\t\t\t\tsize = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"GeneratedTexture._generateTexture: unkonw texture format.\";\r\n\t\t}\r\n\r\n\t\tvar data: Uint8Array = new Uint8Array(textureWidth * textureHeight * size);\r\n\t\tfor (var y: number = 0; y < textureHeight; y++) {\r\n\t\t\tfor (var x: number = 0; x < textureWidth; x++) {\r\n\t\t\t\tfunc(x, y, textureWidth, textureHeight, index, data);\r\n\t\t\t\tindex += size;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttexture.setPixelsData(data, false, false);\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { PixelLineSprite3D } from \"../core/pixelLine/PixelLineSprite3D\";\r\nimport { BoundBox } from \"../math/BoundBox\";\r\nimport { TextureGenerator } from \"../resource/TextureGenerator\";\r\nimport { ILaya3D } from \"../../../ILaya3D\";\r\nimport { HTMLCanvas } from \"../../resource/HTMLCanvas\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { LayaEnv } from \"../../../LayaEnv\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\n\r\n/**\r\n * @en Utils3D is a class used to create 3D tools.\r\n * @zh Utils3D 类用于创建3D工具。\r\n */\r\nexport class Utils3D {\r\n    private static _tempVector3_0: Vector3 = new Vector3();\r\n    private static _tempVector3_1: Vector3 = new Vector3();\r\n    private static _tempVector3_2: Vector3 = new Vector3();\r\n\r\n    private static _tempArray16_0: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_1: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_2: Float32Array = new Float32Array(16);\r\n    private static _tempArray16_3: Float32Array = new Float32Array(16);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createFloatTextureBuffer(width: number, height: number): Texture2D {\r\n        var floatTex: Texture2D = new Texture2D(width, height, TextureFormat.R32G32B32A32, false, false);\r\n        floatTex.setPixelsData(null, false, false);\r\n        floatTex.filterMode = FilterMode.Point;\r\n        floatTex.wrapModeU = WrapMode.Clamp;\r\n        floatTex.wrapModeV = WrapMode.Clamp;\r\n        floatTex.anisoLevel = 1;\r\n        return floatTex;\r\n    }\r\n\r\n    /**\r\n     *通过数平移、旋转、缩放值计算到结果矩阵数组,骨骼动画专用。\r\n     * @param tx left矩阵数组。\r\n     * @param ty left矩阵数组的偏移。\r\n     * @param tz right矩阵数组。\r\n     * @param qx right矩阵数组的偏移。\r\n     * @param qy 输出矩阵数组。\r\n     * @param qz 输出矩阵数组的偏移。\r\n     * @param qw 输出矩阵数组的偏移。\r\n     * @param sx 输出矩阵数组的偏移。\r\n     * @param sy 输出矩阵数组的偏移。\r\n     * @param sz 输出矩阵数组的偏移。\r\n     * @param outArray 结果矩阵数组。\r\n     * @param outOffset 结果矩阵数组的偏移。\r\n     */\r\n    private static _rotationTransformScaleSkinAnimation(tx: number, ty: number, tz: number, qx: number, qy: number, qz: number, qw: number, sx: number, sy: number, sz: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var re: Float32Array = Utils3D._tempArray16_0;\r\n        var se: Float32Array = Utils3D._tempArray16_1;\r\n        var tse: Float32Array = Utils3D._tempArray16_2;\r\n\r\n        //平移\r\n\r\n        //旋转\r\n        var x2: number = qx + qx;\r\n        var y2: number = qy + qy;\r\n        var z2: number = qz + qz;\r\n\r\n        var xx: number = qx * x2;\r\n        var yx: number = qy * x2;\r\n        var yy: number = qy * y2;\r\n        var zx: number = qz * x2;\r\n        var zy: number = qz * y2;\r\n        var zz: number = qz * z2;\r\n        var wx: number = qw * x2;\r\n        var wy: number = qw * y2;\r\n        var wz: number = qw * z2;\r\n\r\n        //re[3] = re[7] = re[11] = re[12] = re[13] = re[14] = 0;\r\n        re[15] = 1;\r\n        re[0] = 1 - yy - zz;\r\n        re[1] = yx + wz;\r\n        re[2] = zx - wy;\r\n\r\n        re[4] = yx - wz;\r\n        re[5] = 1 - xx - zz;\r\n        re[6] = zy + wx;\r\n\r\n        re[8] = zx + wy;\r\n        re[9] = zy - wx;\r\n        re[10] = 1 - xx - yy;\r\n\r\n        //缩放\r\n        //se[4] = se[8] = se[12] = se[1] = se[9] = se[13] = se[2] = se[6] = se[14] = se[3] = se[7] = se[11] = 0;\r\n        se[15] = 1;\r\n        se[0] = sx;\r\n        se[5] = sy;\r\n        se[10] = sz;\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        //mul(rMat, tMat, tsMat)......................................\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = re[i];\r\n            ai1 = re[i + 4];\r\n            ai2 = re[i + 8];\r\n            ai3 = re[i + 12];\r\n            tse[i] = ai0;\r\n            tse[i + 4] = ai1;\r\n            tse[i + 8] = ai2;\r\n            tse[i + 12] = ai0 * tx + ai1 * ty + ai2 * tz + ai3;\r\n        }\r\n\r\n        //mul(tsMat, sMat, out)..............................................\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = tse[i];\r\n            ai1 = tse[i + 4];\r\n            ai2 = tse[i + 8];\r\n            ai3 = tse[i + 12];\r\n            outArray[i + outOffset] = ai0 * se[0] + ai1 * se[1] + ai2 * se[2] + ai3 * se[3];\r\n            outArray[i + outOffset + 4] = ai0 * se[4] + ai1 * se[5] + ai2 * se[6] + ai3 * se[7];\r\n            outArray[i + outOffset + 8] = ai0 * se[8] + ai1 * se[9] + ai2 * se[10] + ai3 * se[11];\r\n            outArray[i + outOffset + 12] = ai0 * se[12] + ai1 * se[13] + ai2 * se[14] + ai3 * se[15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _compIdToNode: any = new Object();\r\n    static _tempV0: Vector3 = new Vector3();\r\n    static _tempV1: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * @en Convert vertices to a billboard\r\n     * @zh 将顶点进行广告牌转换\r\n     */\r\n    static billboardTrans(v0: Vector3, cameraDir: Vector3, cameraUp: Vector3, out: Vector3) {\r\n        //vec3 positionOS = vertex.positionOS.x * normalize(cross(u_CameraDirection, u_CameraUp));\r\n        //positionOS += vertex.positionOS.y * normalize(u_CameraUp);\r\n        Vector3.normalize(cameraUp, Utils3D._tempV1);\r\n        Vector3.cross(cameraDir, cameraUp, Utils3D._tempV0);\r\n        Vector3.normalize(Utils3D._tempV0, Utils3D._tempV0);\r\n        Vector3.scale(Utils3D._tempV0, v0.x, out);\r\n        Vector3.scale(cameraUp, v0.y, Utils3D._tempV1);\r\n        Vector3.add(out, Utils3D._tempV1, out);\r\n    }\r\n\r\n    /**\r\n     * @en Determines if point P is within the triangle formed by points A, B, and C. https://mathworld.wolfram.com/BarycentricCoordinates.html\r\n     * @param A The first vertex of the triangle.\r\n     * @param B The second vertex of the triangle.\r\n     * @param C The third vertex of the triangle.\r\n     * @param P The point to check.\r\n     * @returns True if P is inside the triangle, false otherwise.\r\n     * @zh 判断点P是否在由点A、B、C组成的三角形内。https://mathworld.wolfram.com/BarycentricCoordinates.html\r\n     * @param A 三角形的第一个顶点。\r\n     * @param B 三角形的第二个顶点。\r\n     * @param C 三角形的第三个顶点。\r\n     * @param P 需要判断的点。\r\n     * @returns 若P在三角形内，返回true，否则返回false。\r\n     */\r\n    static PointinTriangle(A: Vector3, B: Vector3, C: Vector3, P: Vector3): boolean {\r\n        let v0 = C.vsub(A, Utils3D._tempVector3_0);\r\n        let v1 = B.vsub(A, Utils3D._tempVector3_1);\r\n        let v2 = P.vsub(A, Utils3D._tempVector3_2);\r\n\r\n        let dot00 = v0.dot(v0);\r\n        let dot01 = v0.dot(v1);\r\n        let dot02 = v0.dot(v2);\r\n        let dot11 = v1.dot(v1);\r\n        let dot12 = v1.dot(v2);\r\n\r\n        let inverDeno = 1 / (dot00 * dot11 - dot01 * dot01);\r\n\r\n        let u = (dot11 * dot02 - dot01 * dot12) * inverDeno;\r\n        if (u < 0 || u > 1) // if u out of range, return directly\r\n        {\r\n            return false;\r\n        }\r\n\r\n\r\n        let v = (dot00 * dot12 - dot01 * dot02) * inverDeno;\r\n        if (v < 0 || v > 1) // if v out of range, return directly\r\n        {\r\n            return false;\r\n        }\r\n        return u + v <= 1;\r\n    }\r\n\r\n\r\n    /** @internal */\r\n    static _computeBoneAndAnimationDatasByBindPoseMatrxix(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n\r\n        var offset: number = 0;\r\n        var matOffset: number = 0;\r\n\r\n        var i: number;\r\n        var parentOffset: number;\r\n        var boneLength: number = bones.length;\r\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n            //将旋转平移缩放合成矩阵...........................................\r\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], outBonesDatas, matOffset);\r\n\r\n            if (i != 0) {\r\n                parentOffset = bones[i].parentIndex * 16;\r\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n            }\r\n        }\r\n\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeAnimationDatasByArrayAndMatrixFast(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array, boneIndexToMesh: number[]): void {\r\n        for (var i: number = 0, n: number = inverGlobalBindPose.length; i < n; i++)//将绝对矩阵乘以反置矩阵\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, boneIndexToMesh[i] * 16, inverGlobalBindPose[i], outAnimationDatas, i * 16);//TODO:-1处理\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(bones: any, curData: Float32Array, inverGlobalBindPose: Matrix4x4[], outBonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n\r\n        var offset: number = 0;\r\n        var matOffset: number = 0;\r\n\r\n        var i: number;\r\n        var parentOffset: number;\r\n        var boneLength: number = bones.length;\r\n        for (i = 0; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++) {\r\n            //将旋转平移缩放合成矩阵...........................................\r\n            Utils3D._rotationTransformScaleSkinAnimation(curData[offset + 7], curData[offset + 8], curData[offset + 9], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 0], curData[offset + 1], curData[offset + 2], outBonesDatas, matOffset);\r\n\r\n            if (i != 0) {\r\n                parentOffset = bones[i].parentIndex * 16;\r\n                Utils3D.mulMatrixByArray(outBonesDatas, parentOffset, outBonesDatas, matOffset, outBonesDatas, matOffset);\r\n            }\r\n        }\r\n\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (i = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            var arrayOffset: number = i * 16;\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(outBonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeAnimationDatasByArrayAndMatrixFastOld(inverGlobalBindPose: Matrix4x4[], bonesDatas: Float32Array, outAnimationDatas: Float32Array): void {\r\n        var n: number = inverGlobalBindPose.length;\r\n        for (var i: number = 0; i < n; i++)//将绝对矩阵乘以反置矩阵................................................\r\n        {\r\n            var arrayOffset: number = i * 16;\r\n            Utils3D.mulMatrixByArrayAndMatrixFast(bonesDatas, arrayOffset, inverGlobalBindPose[i], outAnimationDatas, arrayOffset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _computeRootAnimationData(bones: any, curData: Float32Array, animationDatas: Float32Array): void {\r\n\r\n        for (var i: number = 0, offset: number = 0, matOffset: number = 0, boneLength: number = bones.length; i < boneLength; offset += bones[i].keyframeWidth, matOffset += 16, i++)\r\n            Utils3D.createAffineTransformationArray(curData[offset + 0], curData[offset + 1], curData[offset + 2], curData[offset + 3], curData[offset + 4], curData[offset + 5], curData[offset + 6], curData[offset + 7], curData[offset + 8], curData[offset + 9], animationDatas, matOffset);\r\n    }\r\n\r\n    /**\r\n     * @en Rotates a 3D vector using a quaternion.\r\n     * @param sourceArray The source vector components in a Float32Array.\r\n     * @param sourceOffset The offset in the source array where the source vector starts.\r\n     * @param rotation The quaternion representing the rotation.\r\n     * @param outArray The array to store the result of the rotation.\r\n     * @param outOffset The offset in the output array where the result will be stored.\r\n     * @zh 使用四元数旋转三维向量。\r\n     * @param sourceArray 源三维向量的数组。\r\n     * @param sourceOffset 源三维向量的偏移。\r\n     * @param rotation 四元数。\r\n     * @param outArray 输出数组。\r\n     * @param outOffset 输出数组的偏移。\r\n     */\r\n    static transformVector3ArrayByQuat(sourceArray: Float32Array, sourceOffset: number, rotation: Quaternion, outArray: Float32Array, outOffset: number): void {\r\n        var x: number = sourceArray[sourceOffset], y: number = sourceArray[sourceOffset + 1], z: number = sourceArray[sourceOffset + 2], qx: number = rotation.x, qy: number = rotation.y, qz: number = rotation.z, qw: number = rotation.w, ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n        outArray[outOffset] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        outArray[outOffset + 1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        outArray[outOffset + 2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    }\r\n\r\n    /**\r\n     * @en Multiplies two matrices using array data.\r\n     * @param leftArray The left-hand side matrix array.\r\n     * @param leftOffset The offset in the left-hand side array.\r\n     * @param rightArray The right-hand side matrix array.\r\n     * @param rightOffset The offset in the right-hand side array.\r\n     * @param outArray The output matrix array where the result will be stored.\r\n     * @param outOffset The offset in the output array.\r\n     * @zh 通过数组数据计算矩阵乘法。\r\n     * @param leftArray 左矩阵数组。\r\n     * @param leftOffset 左矩阵数组的偏移。\r\n     * @param rightArray 右矩阵数组。\r\n     * @param rightOffset 右矩阵数组的偏移。\r\n     * @param outArray 输出矩阵数组。\r\n     * @param outOffset 输出矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArray(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n\r\n        if (outArray === rightArray) {\r\n            rightArray = Utils3D._tempArray16_3;\r\n            for (i = 0; i < 16; ++i) {\r\n                rightArray[i] = outArray[outOffset + i];\r\n            }\r\n            rightOffset = 0;\r\n        }\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[leftOffset + i];\r\n            ai1 = leftArray[leftOffset + i + 4];\r\n            ai2 = leftArray[leftOffset + i + 8];\r\n            ai3 = leftArray[leftOffset + i + 12];\r\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Multiplies two matrices using array data, with the restriction that rightArray and outArray cannot be the same array reference.\r\n     * @param leftArray The left-hand side matrix array.\r\n     * @param leftOffset The offset in the left-hand side array.\r\n     * @param rightArray The right-hand side matrix array.\r\n     * @param rightOffset The offset in the right-hand side array.\r\n     * @param outArray The output matrix array where the result will be stored.\r\n     * @param outOffset The offset in the output array.\r\n     * @zh 通过数组数据计算矩阵乘法，注意 rightArray 和 outArray 不能是同一个数组引用。\r\n     * @param leftArray 左矩阵数组。\r\n     * @param leftOffset 左矩阵数组的偏移。\r\n     * @param rightArray 右矩阵数组。\r\n     * @param rightOffset 右矩阵数组的偏移。\r\n     * @param outArray 输出矩阵数组。\r\n     * @param outOffset 输出矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArrayFast(leftArray: Float32Array, leftOffset: number, rightArray: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[leftOffset + i];\r\n            ai1 = leftArray[leftOffset + i + 4];\r\n            ai2 = leftArray[leftOffset + i + 8];\r\n            ai3 = leftArray[leftOffset + i + 12];\r\n            outArray[outOffset + i] = ai0 * rightArray[rightOffset + 0] + ai1 * rightArray[rightOffset + 1] + ai2 * rightArray[rightOffset + 2] + ai3 * rightArray[rightOffset + 3];\r\n            outArray[outOffset + i + 4] = ai0 * rightArray[rightOffset + 4] + ai1 * rightArray[rightOffset + 5] + ai2 * rightArray[rightOffset + 6] + ai3 * rightArray[rightOffset + 7];\r\n            outArray[outOffset + i + 8] = ai0 * rightArray[rightOffset + 8] + ai1 * rightArray[rightOffset + 9] + ai2 * rightArray[rightOffset + 10] + ai3 * rightArray[rightOffset + 11];\r\n            outArray[outOffset + i + 12] = ai0 * rightArray[rightOffset + 12] + ai1 * rightArray[rightOffset + 13] + ai2 * rightArray[rightOffset + 14] + ai3 * rightArray[rightOffset + 15];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Multiplies a matrix by an array and another matrix, with the restriction that rightArray and outArray cannot be the same array reference.\r\n     * @param leftArray The left-hand side matrix array.\r\n     * @param leftOffset The offset in the left-hand side array.\r\n     * @param rightMatrix The right-hand side matrix.\r\n     * @param outArray The output matrix array where the result will be stored.\r\n     * @param outOffset The offset in the output array.\r\n     * @zh 通过数组数据和一个矩阵计算矩阵乘法，注意 rightArray 和 outArray 不能是同一个数组引用。\r\n     * @param leftArray 左矩阵数组。\r\n     * @param leftOffset 左矩阵数组的偏移。\r\n     * @param rightMatrix 右矩阵。\r\n     * @param outArray 输出矩阵数组。\r\n     * @param outOffset 输出矩阵数组的偏移。\r\n     */\r\n    static mulMatrixByArrayAndMatrixFast(leftArray: Float32Array, leftOffset: number, rightMatrix: Matrix4x4, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        var rightMatrixE: Float32Array = rightMatrix.elements;\r\n        var m11: number = rightMatrixE[0], m12: number = rightMatrixE[1], m13: number = rightMatrixE[2], m14: number = rightMatrixE[3];\r\n        var m21: number = rightMatrixE[4], m22: number = rightMatrixE[5], m23: number = rightMatrixE[6], m24: number = rightMatrixE[7];\r\n        var m31: number = rightMatrixE[8], m32: number = rightMatrixE[9], m33: number = rightMatrixE[10], m34: number = rightMatrixE[11];\r\n        var m41: number = rightMatrixE[12], m42: number = rightMatrixE[13], m43: number = rightMatrixE[14], m44: number = rightMatrixE[15];\r\n        var ai0LeftOffset: number = leftOffset;\r\n        var ai1LeftOffset: number = leftOffset + 4;\r\n        var ai2LeftOffset: number = leftOffset + 8;\r\n        var ai3LeftOffset: number = leftOffset + 12;\r\n        var ai0OutOffset: number = outOffset;\r\n        var ai1OutOffset: number = outOffset + 4;\r\n        var ai2OutOffset: number = outOffset + 8;\r\n        var ai3OutOffset: number = outOffset + 12;\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = leftArray[ai0LeftOffset + i];\r\n            ai1 = leftArray[ai1LeftOffset + i];\r\n            ai2 = leftArray[ai2LeftOffset + i];\r\n            ai3 = leftArray[ai3LeftOffset + i];\r\n            outArray[ai0OutOffset + i] = ai0 * m11 + ai1 * m12 + ai2 * m13 + ai3 * m14;\r\n            outArray[ai1OutOffset + i] = ai0 * m21 + ai1 * m22 + ai2 * m23 + ai3 * m24;\r\n            outArray[ai2OutOffset + i] = ai0 * m31 + ai1 * m32 + ai2 * m33 + ai3 * m34;\r\n            outArray[ai3OutOffset + i] = ai0 * m41 + ai1 * m42 + ai2 * m43 + ai3 * m44;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the result matrix array by the given translation, rotation, and scale values.\r\n     * @param tX X axis translation.\r\n     * @param tY Y axis translation.\r\n     * @param tZ Z axis translation.\r\n     * @param rX X axis rotation.\r\n     * @param rY Y axis rotation.\r\n     * @param rZ Z axis rotation.\r\n     * @param rW W component of the rotation quaternion.\r\n     * @param sX X axis scale.\r\n     * @param sY Y axis scale.\r\n     * @param sZ Z axis scale.\r\n     * @param outArray Output matrix array.\r\n     * @param outOffset Output matrix array offset.\r\n     * @zh 通过数平移、旋转、缩放值计算到结果矩阵数组。\r\n     * @param tX X轴的平移量。\r\n     * @param tY Y轴的平移量。\r\n     * @param tZ Z轴的平移量。\r\n     * @param rX 旋转四元数的X分量。\r\n     * @param rY 旋转四元数的Y分量。\r\n     * @param rZ 旋转四元数的Z分量。\r\n     * @param rW 旋转四元数的实部（W分量）。\r\n     * @param sX X轴的缩放因子。\r\n     * @param sY Y轴的缩放因子。\r\n     * @param sZ Z轴的缩放因子。\r\n     * @param outArray 输出矩阵数组。\r\n     * @param outOffset 输出矩阵数组的偏移。\r\n     */\r\n    static createAffineTransformationArray(tX: number, tY: number, tZ: number, rX: number, rY: number, rZ: number, rW: number, sX: number, sY: number, sZ: number, outArray: Float32Array, outOffset: number): void {\r\n\r\n        var x2: number = rX + rX, y2: number = rY + rY, z2: number = rZ + rZ;\r\n        var xx: number = rX * x2, xy: number = rX * y2, xz: number = rX * z2, yy: number = rY * y2, yz: number = rY * z2, zz: number = rZ * z2;\r\n        var wx: number = rW * x2, wy: number = rW * y2, wz: number = rW * z2;\r\n\r\n        outArray[outOffset + 0] = (1 - (yy + zz)) * sX;\r\n        outArray[outOffset + 1] = (xy + wz) * sX;\r\n        outArray[outOffset + 2] = (xz - wy) * sX;\r\n        outArray[outOffset + 3] = 0;\r\n        outArray[outOffset + 4] = (xy - wz) * sY;\r\n        outArray[outOffset + 5] = (1 - (xx + zz)) * sY;\r\n        outArray[outOffset + 6] = (yz + wx) * sY;\r\n        outArray[outOffset + 7] = 0;\r\n        outArray[outOffset + 8] = (xz + wy) * sZ;\r\n        outArray[outOffset + 9] = (yz - wx) * sZ;\r\n        outArray[outOffset + 10] = (1 - (xx + yy)) * sZ;\r\n        outArray[outOffset + 11] = 0;\r\n        outArray[outOffset + 12] = tX;\r\n        outArray[outOffset + 13] = tY;\r\n        outArray[outOffset + 14] = tZ;\r\n        outArray[outOffset + 15] = 1;\r\n    }\r\n\r\n    /**\r\n     * @en Transforms a 3D vector from one array to another using a transformation matrix.\r\n     * @param source The source vector array.\r\n     * @param sourceOffset The offset in the source array.\r\n     * @param transform The transformation matrix.\r\n     * @param result The resulting vector array.\r\n     * @param resultOffset The offset in the resulting array.\r\n     * @zh 使用变换矩阵将一个三维向量从一个数组转换到另一个数组。\r\n     * @param source 源三维向量所在数组。\r\n     * @param sourceOffset 源三维向量数组偏移。\r\n     * @param transform  变换矩阵。\r\n     * @param result 输出三维向量所在数组。\r\n     * @param resultOffset 输出三维向量数组偏移。\r\n     */\r\n    static transformVector3ArrayToVector3ArrayCoordinate(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n        var coordinateX: number = source[sourceOffset + 0];\r\n        var coordinateY: number = source[sourceOffset + 1];\r\n        var coordinateZ: number = source[sourceOffset + 2];\r\n\r\n        var transformElem: Float32Array = transform.elements;\r\n        var w: number = ((coordinateX * transformElem[3]) + (coordinateY * transformElem[7]) + (coordinateZ * transformElem[11]) + transformElem[15]);\r\n        result[resultOffset] = (coordinateX * transformElem[0]) + (coordinateY * transformElem[4]) + (coordinateZ * transformElem[8]) + transformElem[12] / w;\r\n        result[resultOffset + 1] = (coordinateX * transformElem[1]) + (coordinateY * transformElem[5]) + (coordinateZ * transformElem[9]) + transformElem[13] / w;\r\n        result[resultOffset + 2] = (coordinateX * transformElem[2]) + (coordinateY * transformElem[6]) + (coordinateZ * transformElem[10]) + transformElem[14] / w;\r\n    }\r\n\r\n    /**\r\n     * @en Transforms a 3D vector array from one array to another using a transformation matrix, and normalizes the resulting vector array.\r\n     * @param source The source normal vector array.\r\n     * @param sourceOffset The offset in the source array.\r\n     * @param transform The transformation matrix.\r\n     * @param result The resulting normal vector array.\r\n     * @param resultOffset The offset in the resulting array.\r\n     * @zh 通过矩阵转换一个三维向量数组到另外一个归一化的三维向量数组。\r\n     * @param source 源三维向量法线所在数组。\r\n     * @param sourceOffset 源三维向量法线数组偏移。\r\n     * @param transform 变换矩阵。\r\n     * @param result 输出三维向量法线所在数组。\r\n     * @param resultOffset 输出三维向量法线数组偏移。\r\n     */\r\n    static transformVector3ArrayToVector3ArrayNormal(source: Float32Array, sourceOffset: number, transform: Matrix4x4, result: Float32Array, resultOffset: number): void {\r\n        var coordinateX: number = source[sourceOffset + 0];\r\n        var coordinateY: number = source[sourceOffset + 1];\r\n        var coordinateZ: number = source[sourceOffset + 2];\r\n\r\n        var transformElem: Float32Array = transform.elements;\r\n        result[resultOffset] = coordinateX * transformElem[0] + coordinateY * transformElem[4] + coordinateZ * transformElem[8];\r\n        result[resultOffset + 1] = coordinateX * transformElem[1] + coordinateY * transformElem[5] + coordinateZ * transformElem[9];\r\n        result[resultOffset + 2] = coordinateX * transformElem[2] + coordinateY * transformElem[6] + coordinateZ * transformElem[10];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static transformLightingMapTexcoordArray(source: Float32Array, sourceOffset: number, lightingMapScaleOffset: Vector4, result: Float32Array, resultOffset: number): void {\r\n        result[resultOffset + 0] = source[sourceOffset + 0] * lightingMapScaleOffset.x + lightingMapScaleOffset.z;\r\n        result[resultOffset + 1] = 1.0 - ((1.0 - source[sourceOffset + 1]) * lightingMapScaleOffset.y + lightingMapScaleOffset.w);\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves the version string from a URL.\r\n     * @param url The URL to extract the version from.\r\n     * @returns The version string or null if not found.\r\n     * @zh 从URL中获取版本字符串。\r\n     * @param url 要提取版本的URL。\r\n     * @returns 版本字符串或null。\r\n     */\r\n    static getURLVerion(url: string): string {\r\n        var index: number = url.indexOf(\"?\");\r\n        return index >= 0 ? url.substr(index) : null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createAffineTransformationArray(trans: Vector3, rot: Quaternion, scale: Vector3, outE: Float32Array): void {\r\n\r\n        var x: number = rot.x, y: number = rot.y, z: number = rot.z, w: number = rot.w, x2: number = x + x, y2: number = y + y, z2: number = z + z;\r\n        var xx: number = x * x2, xy: number = x * y2, xz: number = x * z2, yy: number = y * y2, yz: number = y * z2, zz: number = z * z2;\r\n        var wx: number = w * x2, wy: number = w * y2, wz: number = w * z2, sx: number = scale.x, sy: number = scale.y, sz: number = scale.z;\r\n\r\n        outE[0] = (1 - (yy + zz)) * sx;\r\n        outE[1] = (xy + wz) * sx;\r\n        outE[2] = (xz - wy) * sx;\r\n        outE[3] = 0;\r\n        outE[4] = (xy - wz) * sy;\r\n        outE[5] = (1 - (xx + zz)) * sy;\r\n        outE[6] = (yz + wx) * sy;\r\n        outE[7] = 0;\r\n        outE[8] = (xz + wy) * sz;\r\n        outE[9] = (yz - wx) * sz;\r\n        outE[10] = (1 - (xx + yy)) * sz;\r\n        outE[11] = 0;\r\n        outE[12] = trans.x;\r\n        outE[13] = trans.y;\r\n        outE[14] = trans.z;\r\n        outE[15] = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _mulMatrixArray(left: Float32Array, right: Float32Array, rightOffset: number, outArray: Float32Array, outOffset: number): void {\r\n        var l: Float32Array = right;\r\n        var r: Float32Array = left;\r\n        var e: Float32Array = outArray;\r\n\r\n        var l11: number = l[rightOffset], l12: number = l[rightOffset + 1], l13: number = l[rightOffset + 2], l14: number = l[rightOffset + 3];\r\n        var l21: number = l[rightOffset + 4], l22: number = l[rightOffset + 5], l23: number = l[rightOffset + 6], l24: number = l[rightOffset + 7];\r\n        var l31: number = l[rightOffset + 8], l32: number = l[rightOffset + 9], l33: number = l[rightOffset + 10], l34: number = l[rightOffset + 11];\r\n        var l41: number = l[rightOffset + 12], l42: number = l[rightOffset + 13], l43: number = l[rightOffset + 14], l44: number = l[rightOffset + 15];\r\n\r\n        var r11: number = r[0], r12: number = r[1], r13: number = r[2], r14: number = r[3];\r\n        var r21: number = r[4], r22: number = r[5], r23: number = r[6], r24: number = r[7];\r\n        var r31: number = r[8], r32: number = r[9], r33: number = r[10], r34: number = r[11];\r\n        var r41: number = r[12], r42: number = r[13], r43: number = r[14], r44: number = r[15];\r\n\r\n        e[outOffset] = (l11 * r11) + (l12 * r21) + (l13 * r31) + (l14 * r41);\r\n        e[outOffset + 1] = (l11 * r12) + (l12 * r22) + (l13 * r32) + (l14 * r42);\r\n        e[outOffset + 2] = (l11 * r13) + (l12 * r23) + (l13 * r33) + (l14 * r43);\r\n        e[outOffset + 3] = (l11 * r14) + (l12 * r24) + (l13 * r34) + (l14 * r44);\r\n        e[outOffset + 4] = (l21 * r11) + (l22 * r21) + (l23 * r31) + (l24 * r41);\r\n        e[outOffset + 5] = (l21 * r12) + (l22 * r22) + (l23 * r32) + (l24 * r42);\r\n        e[outOffset + 6] = (l21 * r13) + (l22 * r23) + (l23 * r33) + (l24 * r43);\r\n        e[outOffset + 7] = (l21 * r14) + (l22 * r24) + (l23 * r34) + (l24 * r44);\r\n        e[outOffset + 8] = (l31 * r11) + (l32 * r21) + (l33 * r31) + (l34 * r41);\r\n        e[outOffset + 9] = (l31 * r12) + (l32 * r22) + (l33 * r32) + (l34 * r42);\r\n        e[outOffset + 10] = (l31 * r13) + (l32 * r23) + (l33 * r33) + (l34 * r43);\r\n        e[outOffset + 11] = (l31 * r14) + (l32 * r24) + (l33 * r34) + (l34 * r44);\r\n        e[outOffset + 12] = (l41 * r11) + (l42 * r21) + (l43 * r31) + (l44 * r41);\r\n        e[outOffset + 13] = (l41 * r12) + (l42 * r22) + (l43 * r32) + (l44 * r42);\r\n        e[outOffset + 14] = (l41 * r13) + (l42 * r23) + (l43 * r33) + (l44 * r43);\r\n        e[outOffset + 15] = (l41 * r14) + (l42 * r24) + (l43 * r34) + (l44 * r44);\r\n    }\r\n\r\n    /**@internal */\r\n    private static arcTanAngle(x: number, y: number): number {\r\n\r\n        if (x == 0) {\r\n            if (y == 1)\r\n                return Math.PI / 2;\r\n            return -Math.PI / 2;\r\n        }\r\n        if (x > 0)\r\n            return Math.atan(y / x);\r\n        if (x < 0) {\r\n            if (y > 0)\r\n                return Math.atan(y / x) + Math.PI;\r\n            return Math.atan(y / x) - Math.PI;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**@internal */\r\n    static angleTo(from: Vector3, location: Vector3, angle: Vector3): void {\r\n\r\n        Vector3.subtract(location, from, TEMPVector30);\r\n        Vector3.normalize(TEMPVector30, TEMPVector30);\r\n\r\n        angle.x = Math.asin(TEMPVector30.y);\r\n        angle.y = Utils3D.arcTanAngle(-TEMPVector30.z, -TEMPVector30.x);\r\n    }\r\n\r\n    /**\r\n     * @en Applies a rotation to a 3D vector using a quaternion.\r\n     * @param source The original 3D vector.\r\n     * @param rotation The quaternion array representing the rotation.\r\n     * @param out The resulting rotated vector.\r\n     * @zh 使用四元数对三维向量应用旋转。\r\n     * @param source 原始三维向量。\r\n     * @param rotation 旋转四元数数组。\r\n     * @param out 结果旋转后的向量。\r\n     */\r\n    static transformQuat(source: Vector3, rotation: Float32Array, out: Vector3): void {\r\n        var re: Float32Array = rotation;\r\n\r\n        var x: number = source.x, y: number = source.y, z: number = source.z, qx: number = re[0], qy: number = re[1], qz: number = re[2], qw: number = re[3],\r\n\r\n            ix: number = qw * x + qy * z - qz * y, iy: number = qw * y + qz * x - qx * z, iz: number = qw * z + qx * y - qy * x, iw: number = -qx * x - qy * y - qz * z;\r\n\r\n        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n    }\r\n\r\n    /**\r\n     * @en Modifies the weight of a quaternion.\r\n     * @param f The original quaternion.\r\n     * @param weight The weight to apply to the quaternion.\r\n     * @param e The target data.\r\n     * @zh 修改四元数的权重。\r\n     * @param f 元数据\r\n     * @param weight 要应用于四元数的权重。\r\n     * @param e 目标数据。\r\n     */\r\n    static quaternionWeight(f: Quaternion, weight: number, e: Quaternion): void {\r\n        e.x = f.x * weight;\r\n        e.y = f.y * weight;\r\n        e.z = f.z * weight;\r\n        e.w = f.w;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static quaternionConjugate(value: Quaternion, result: Quaternion): void {\r\n        result.x = -value.x;\r\n        result.y = -value.y;\r\n        result.z = -value.z;\r\n        result.w = value.w;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static scaleWeight(s: Vector3, w: number, out: Vector3): void {\r\n        var sX: number = s.x, sY: number = s.y, sZ: number = s.z;\r\n        out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\r\n        out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\r\n        out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\r\n        var saw: Vector3 = Utils3D._tempVector3_0;\r\n        var sbw: Vector3 = Utils3D._tempVector3_1;\r\n        Utils3D.scaleWeight(sa, 1.0 - w, saw);\r\n        Utils3D.scaleWeight(sb, w, sbw);\r\n        var sng: Vector3 = w > 0.5 ? sb : sa;\r\n        out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\r\n        out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\r\n        out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    static matrix4x4MultiplyFFF(a: Float32Array, b: Float32Array, e: Float32Array): void {\r\n\r\n        var i: number, ai0: number, ai1: number, ai2: number, ai3: number;\r\n        if (e === b) {\r\n            b = new Float32Array(16);\r\n            for (i = 0; i < 16; ++i) {\r\n                b[i] = e[i];\r\n            }\r\n        }\r\n\r\n        var b0: number = b[0], b1: number = b[1], b2: number = b[2], b3: number = b[3];\r\n        var b4: number = b[4], b5: number = b[5], b6: number = b[6], b7: number = b[7];\r\n        var b8: number = b[8], b9: number = b[9], b10: number = b[10], b11: number = b[11];\r\n        var b12: number = b[12], b13: number = b[13], b14: number = b[14], b15: number = b[15];\r\n\r\n        for (i = 0; i < 4; i++) {\r\n            ai0 = a[i];\r\n            ai1 = a[i + 4];\r\n            ai2 = a[i + 8];\r\n            ai3 = a[i + 12];\r\n            e[i] = ai0 * b0 + ai1 * b1 + ai2 * b2 + ai3 * b3;\r\n            e[i + 4] = ai0 * b4 + ai1 * b5 + ai2 * b6 + ai3 * b7;\r\n            e[i + 8] = ai0 * b8 + ai1 * b9 + ai2 * b10 + ai3 * b11;\r\n            e[i + 12] = ai0 * b12 + ai1 * b13 + ai2 * b14 + ai3 * b15;\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    static matrix4x4MultiplyMFM(left: Matrix4x4, right: Float32Array, out: Matrix4x4): void {\r\n        Utils3D.matrix4x4MultiplyFFF(left.elements, right, out.elements);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _buildTexture2D(width: number, height: number, format: number, colorFunc: Function, mipmaps: boolean = false): Texture2D {\r\n        var texture: Texture2D = new Texture2D(width, height, format, mipmaps, true);\r\n        texture.anisoLevel = 1;\r\n        texture.filterMode = FilterMode.Point;\r\n        TextureGenerator._generateTexture2D(texture, width, height, colorFunc);\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _drawBound(debugLine: PixelLineSprite3D, boundBox: BoundBox | Bounds, color: Color): void {\r\n        if (debugLine.lineCount + 12 > debugLine.maxLineCount)\r\n            debugLine.maxLineCount += 12;\r\n\r\n        var start: Vector3 = Utils3D._tempVector3_0;\r\n        var end: Vector3 = Utils3D._tempVector3_1;\r\n        var min: Vector3 = boundBox.min;\r\n        var max: Vector3 = boundBox.max;\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(max.x, min.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(min.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, min.z);\r\n        end.setValue(max.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, max.z);\r\n        end.setValue(max.x, min.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, min.z);\r\n        end.setValue(min.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, min.y, max.z);\r\n        end.setValue(min.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, min.z);\r\n        end.setValue(max.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, min.y, max.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, min.z);\r\n        end.setValue(max.x, max.y, min.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, min.z);\r\n        end.setValue(min.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(max.x, max.y, min.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n\r\n        start.setValue(min.x, max.y, max.z);\r\n        end.setValue(max.x, max.y, max.z);\r\n        debugLine.addLine(start, end, color, color);\r\n    }\r\n\r\n    ///**@internal */\r\n    //private static var _tempHierarchyID:int = 0;\r\n    //\r\n    ///**\r\n    //* @internal\r\n    //*/\r\n    //public static function _getSpritesHierarchyID(sprite:Sprite3D, checkSprites:Array, outIDs:Array):void {\r\n    //var index:int = checkSprites.indexOf(sprite);\r\n    //if (index !== -1)\r\n    //outIDs[index] = _tempHierarchyID;\r\n    //_tempHierarchyID++;\r\n    //var children:Array = sprite._children;\r\n    //for (var i:int = 0, n:int = children.length; i < n; i++)\r\n    //_getSpritesHierarchyID(children[i], checkSprites, outIDs);\r\n    //}\r\n\r\n    /**\r\n     * @internal\r\n     * @param rootSprite parent Sprite\r\n     * @param checkSprite check Sprite\r\n     * @param path pathArray\r\n     * @returns \r\n     */\r\n    static _getHierarchyPath(rootSprite: Node, checkSprite: Node, path: number[]): any[] {\r\n        path.length = 0;\r\n        var sprite: Node = checkSprite;\r\n        while (sprite !== rootSprite) {\r\n            var parent: Node = sprite._parent;\r\n            if (parent)\r\n                path.push(parent.getChildIndex(sprite));\r\n            else\r\n                return null;\r\n            sprite = parent;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * @interanl\r\n     * @param rootSprite parentNode\r\n     * @param invPath PathArray\r\n     * @returns \r\n     */\r\n    static _getNodeByHierarchyPath(rootSprite: Node, invPath: number[]): Node {\r\n        var sprite: Node = rootSprite;\r\n        for (var i: number = invPath.length - 1; i >= 0; i--) {\r\n            sprite = sprite.getChildAt(invPath[i]);\r\n        }\r\n        return sprite;\r\n    }\r\n\r\n    static _getParentNodeByHierarchyPath(rootSprite: Node, path: number[]): Node {\r\n        let pathlength = path.length;\r\n        let node: Node = rootSprite;\r\n        for (let i = 0; i < pathlength; i++) {\r\n            if (node)\r\n                node = node.parent;\r\n            else\r\n                return null;\r\n        }\r\n        return node;\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated 请使用uint8ArrayToArrayBufferAsync函数代替\r\n     * 将RenderTexture转换为Base64\r\n     * @param rendertexture 渲染Buffer\r\n     * @returns \r\n     */\r\n    static uint8ArrayToArrayBuffer(rendertexture: RenderTexture) {\r\n        let pixelArray: Uint8Array | Float32Array;\r\n        let width = rendertexture.width;\r\n        let height = rendertexture.height;\r\n        switch (rendertexture.colorFormat) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                pixelArray = new Float32Array(width * height * 4);\r\n                break;\r\n            default:\r\n                throw \"this function is not surpprt \" + rendertexture.format.toString() + \"format Material\";\r\n        }\r\n        rendertexture.getData(0, 0, rendertexture.width, rendertexture.height, pixelArray);\r\n        //tranceTo\r\n        //throw \" rt get Data\";\r\n        switch (rendertexture.colorFormat) {\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                let ori = pixelArray;\r\n                let trans = new Uint8Array(width * height * 4);\r\n                for (let i = 0, n = ori.length; i < n; i++) {\r\n                    trans[i] = Math.min(Math.floor(ori[i] * 255), 255);\r\n                }\r\n                pixelArray = trans;\r\n                break;\r\n        }\r\n\r\n        let pixels = pixelArray;\r\n        var bs: String;\r\n        if (LayaEnv.isConch) {\r\n            //TODO:\r\n            //var base64img=__JS__(\"conchToBase64('image/png',1,pixels,canvasWidth,canvasHeight)\");\r\n            //var l = base64img.split(\",\");\r\n            //if (isBase64)\r\n            //\treturn base64img;\r\n            //return base.utils.DBUtils.decodeArrayBuffer(l[1]);\r\n        }\r\n        else {\r\n            var canv: HTMLCanvas = new HTMLCanvas(true);\r\n            canv.lock = true;\r\n            canv.size(width, height);\r\n            var ctx2d = canv.getContext('2d');\r\n            //@ts-ignore\r\n            var imgdata: ImageData = ctx2d.createImageData(width, height);\r\n            //@ts-ignore\r\n            imgdata.data.set(new Uint8ClampedArray(pixels));\r\n            //@ts-ignore\r\n            ctx2d.putImageData(imgdata, 0, 0);;\r\n            bs = canv.source.toDataURL();\r\n            canv.destroy();\r\n        }\r\n        return bs;\r\n    }\r\n\r\n    /**\r\n     * @en Converts a RenderTexture to a Base64 encoded string.\r\n     * @param rendertexture The RenderTexture to convert.\r\n     * @returns A promise that resolves to a Base64 string representing the RenderTexture.\r\n     * @zh 将 RenderTexture 转换为 Base64 编码的字符串。\r\n     * @param rendertexture 要转换的 RenderTexture。\r\n     * @returns 一个 Promise，该 Promise 将解析为表示 RenderTexture 的 Base64 字符串。\r\n     */\r\n    static uint8ArrayToArrayBufferAsync(rendertexture: RenderTexture): Promise<String> {\r\n        let pixelArray: Uint8Array | Float32Array;\r\n        let width = rendertexture.width;\r\n        let height = rendertexture.height;\r\n        switch (rendertexture.colorFormat) {\r\n            case RenderTargetFormat.R8G8B8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                pixelArray = new Uint8Array(width * height * 4);\r\n                break;\r\n            case RenderTargetFormat.R16G16B16A16:\r\n                pixelArray = new Float32Array(width * height * 4);\r\n                break;\r\n            default:\r\n                throw \"this function is not surpprt \" + rendertexture.format.toString() + \"format Material\";\r\n        }\r\n        return rendertexture.getDataAsync(0, 0, rendertexture.width, rendertexture.height, pixelArray).then(() => {\r\n\r\n            //tranceTo\r\n            //throw \" rt get Data\";\r\n            switch (rendertexture.colorFormat) {\r\n                case RenderTargetFormat.R16G16B16A16:\r\n                    let ori = pixelArray;\r\n                    let trans = new Uint8Array(width * height * 4);\r\n                    for (let i = 0, n = ori.length; i < n; i++) {\r\n                        trans[i] = Math.min(Math.floor(ori[i] * 255), 255);\r\n                    }\r\n                    pixelArray = trans;\r\n                    break;\r\n            }\r\n\r\n            let pixels = pixelArray;\r\n            var bs: String;\r\n            if (LayaEnv.isConch) {\r\n                //TODO:\r\n                //var base64img=__JS__(\"conchToBase64('image/png',1,pixels,canvasWidth,canvasHeight)\");\r\n                //var l = base64img.split(\",\");\r\n                //if (isBase64)\r\n                //\treturn base64img;\r\n                //return base.utils.DBUtils.decodeArrayBuffer(l[1]);\r\n            }\r\n            else {\r\n                var canv: HTMLCanvas = new HTMLCanvas(true);\r\n                canv.lock = true;\r\n                canv.size(width, height);\r\n                var ctx2d = canv.getContext('2d');\r\n                //@ts-ignore\r\n                var imgdata: ImageData = ctx2d.createImageData(width, height);\r\n                //@ts-ignore\r\n                imgdata.data.set(new Uint8ClampedArray(pixels));\r\n                //@ts-ignore\r\n                ctx2d.putImageData(imgdata, 0, 0);;\r\n                bs = canv.source.toDataURL();\r\n                canv.destroy();\r\n            }\r\n            return Promise.resolve(bs);\r\n        });\r\n    }\r\n}\r\n\r\n(window as any).getRTBase64 = Utils3D.uint8ArrayToArrayBuffer;\r\nconst TEMPVector30 = new Vector3();","import { AnimationClipParser03 } from \"./AnimationClipParser03\";\r\nimport { AnimationClipParser04 } from \"./AnimationClipParser04\";\r\nimport { KeyframeNodeList } from \"./KeyframeNodeList\";\r\nimport { AnimationEvent } from \"./AnimationEvent\";\r\nimport { FloatKeyframe } from \"../core/FloatKeyframe\"\r\nimport { QuaternionKeyframe } from \"../core/QuaternionKeyframe\"\r\nimport { Vector3Keyframe } from \"../core/Vector3Keyframe\"\r\nimport { Utils3D } from \"../utils/Utils3D\"\r\nimport { Resource } from \"../../resource/Resource\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { Handler } from \"../../utils/Handler\"\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { WeightedMode } from \"../core/Keyframe\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Vector2Keyframe } from \"../core/Vector2Keyframe\";\r\nimport { Vector4Keyframe } from \"../core/Vector4Keyframe\";\r\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\r\nimport { KeyFrameValueType } from \"../component/Animator/KeyframeNodeOwner\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * @en The AnimationClip class is used for animation clip resources.\r\n * @zh AnimationClip 类用于动画片段资源。\r\n */\r\nexport class AnimationClip extends Resource {\r\n\r\n\t/**@internal\t*/\r\n\tstatic _tempQuaternion0: Quaternion = new Quaternion();\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @inheritDoc\r\n\t * @en Parse animation data into animation clip\r\n\t * @returns Animation clip\r\n\t * @zh 动画数据解析为动画片段\r\n\t * @returns 动画片段\r\n\t */\r\n\tstatic _parse(data: any): AnimationClip {\r\n\t\tvar clip = new AnimationClip();\r\n\t\tvar reader = new Byte(data);\r\n\t\tvar version = reader.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAANIMATION:03\":\r\n\t\t\t\tAnimationClipParser03.parse(clip, reader);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAANIMATION:04\":\r\n\t\t\tcase \"LAYAANIMATION:COMPRESSION_04\":\r\n\t\t\tcase \"LAYAANIMATION:WEIGHT_04\":\r\n\t\t\tcase \"LAYAANIMATION:WEIGHT_05\":\r\n\t\t\t\tAnimationClipParser04.parse(clip, reader, version);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"unknown animationClip version.\";\r\n\t\t}\r\n\t\treturn clip;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Load animation clip.\r\n\t * @param url The URL of the animation clip.\r\n\t * @param complete Callback function when loading is complete.\r\n\t * @zh 加载动画片段。\r\n\t * @param url 动画片段地址。\r\n\t * @param complete 加载完成回调。\r\n\t */\r\n\tstatic load(url: string, complete: Handler): void {\r\n\t\tILaya.loader.load(url, complete, null, Loader.ANIMATIONCLIP);\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_duration: number = 0;\r\n\t/**@internal */\r\n\t_frameRate: number = 0;\r\n\t/**@internal */\r\n\t_nodes: KeyframeNodeList | null = new KeyframeNodeList();\r\n\t/**@internal */\r\n\t_nodesDic: any;\r\n\t/**@internal */\r\n\t_nodesMap: any;//TODO:去掉\r\n\t/** @internal */\r\n\t_animationEvents: AnimationEvent[];\r\n\r\n\t/**\r\n\t * @en Whether the animation is looping.\r\n\t * @zh 是否循环。\r\n\t */\r\n\tislooping: boolean = false;\r\n\r\n\t/**\r\n\t * @en Get the duration of the animation.\r\n\t * @returns The duration of the animation.\r\n\t * @zh 动画持续时间。\r\n\t * @returns 返回动画持续时间。\r\n\t */\r\n\tduration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of AnimationClip.\r\n\t * @zh 创建一个AnimationClip实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._animationEvents = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether is Weight mode.\r\n\t * @param weightMode The current weight mode.\r\n\t * @param nextweightMode The next weight mode.\r\n\t * @returns True if this animation segment uses Hermite interpolation.\r\n\t * @zh 是否是Weight模式。\r\n\t * @param weightMode 当前的权重模式。\r\n\t * @param nextweightMode 下一个权重模式。\r\n\t * @returns 返回true，表示此段动画插值使用埃尔米特插值。\r\n\t */\r\n\tprivate _weightModeHermite(weightMode: number, nextweightMode: number): boolean {\r\n\t\treturn (((weightMode & WeightedMode.Out) == 0) && ((nextweightMode & WeightedMode.In) == 0));\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\r\n\t\tvar t0 = frame.outTangent, t1 = nextFrame.inTangent;\r\n\t\tif (Number.isFinite(t0) && Number.isFinite(t1)) {\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\t\tvar c = t3 - t2;\r\n\t\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\t\t\treturn a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\r\n\t\t} else\r\n\t\t\treturn frame.value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateVector3(frame: Vector3Keyframe, nextFrame: Vector3Keyframe, t: number, dur: number, out: Vector3): void {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _hermiteInterpolateQuaternion(frame: QuaternionKeyframe, nextFrame: QuaternionKeyframe, t: number, dur: number, out: Quaternion): void {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.w, t1 = tan1.w;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\r\n\t\t\telse\r\n\t\t\t\tout.w = p0.w;\r\n\t\t} else {\r\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\r\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteInterpolateVector4(frame: Vector4Keyframe, nextFrame: Vector4Keyframe, t: number, dur: number, out: Vector4) {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.z, t1 = tan1.z;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.z, nextFrame.weightedMode.z)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\r\n\t\t\telse\r\n\t\t\t\tout.z = p0.z;\r\n\t\t} else {\r\n\t\t\tout.z = this._hermiteCurveSplineWeight(frame.value.z, frame.time, frame.outWeight.z, frame.outTangent.z,\r\n\t\t\t\tnextFrame.value.z, nextFrame.time, nextFrame.inWeight.z, nextFrame.inTangent.z, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.w, t1 = tan1.w;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.w, nextFrame.weightedMode.w)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\r\n\t\t\telse\r\n\t\t\t\tout.w = p0.w;\r\n\t\t} else {\r\n\t\t\tout.w = this._hermiteCurveSplineWeight(frame.value.w, frame.time, frame.outWeight.w, frame.outTangent.w,\r\n\t\t\t\tnextFrame.value.w, nextFrame.time, nextFrame.inWeight.w, nextFrame.inTangent.w, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteInterpolateVector2(frame: Vector2Keyframe, nextFrame: Vector2Keyframe, t: number, dur: number, out: Vector2) {\r\n\t\tvar p0 = frame.value;\r\n\t\tvar tan0 = frame.outTangent;\r\n\t\tvar p1 = nextFrame.value;\r\n\t\tvar tan1 = nextFrame.inTangent;\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\tvar a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\t\tvar b = t3 - 2.0 * t2 + t;\r\n\t\tvar c = t3 - t2;\r\n\t\tvar d = -2.0 * t3 + 3.0 * t2;\r\n\r\n\t\tvar t0 = tan0.x, t1 = tan1.x;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.x, nextFrame.weightedMode.x)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\r\n\t\t\telse\r\n\t\t\t\tout.x = p0.x;\r\n\t\t} else {\r\n\t\t\tout.x = this._hermiteCurveSplineWeight(frame.value.x, frame.time, frame.outWeight.x, frame.outTangent.x,\r\n\t\t\t\tnextFrame.value.x, nextFrame.time, nextFrame.inWeight.x, nextFrame.inTangent.x, t);\r\n\t\t}\r\n\r\n\t\tt0 = tan0.y, t1 = tan1.y;\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode.y, nextFrame.weightedMode.y)) {\r\n\t\t\tif (Number.isFinite(t0) && Number.isFinite(t1))\r\n\t\t\t\tout.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\r\n\t\t\telse\r\n\t\t\t\tout.y = p0.y;\r\n\t\t} else {\r\n\t\t\tout.y = this._hermiteCurveSplineWeight(frame.value.y, frame.time, frame.outWeight.y, frame.outTangent.y,\r\n\t\t\t\tnextFrame.value.y, nextFrame.time, nextFrame.inWeight.y, nextFrame.inTangent.y, t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _hermiteCurveSplineWeight(frameValue: number, frametime: number, frameOutWeight: number, frameOutTangent: number, nextframeValue: number, nextframetime: number, nextframeInweight: number, nextframeIntangent: number, time: number) {\r\n\t\tlet Eps = 2.22e-16;\r\n\r\n\t\tlet x = time;\r\n\t\tlet x1 = frametime;\r\n\t\tlet y1 = frameValue;\r\n\t\tlet wt1 = frameOutWeight;\r\n\t\tlet x2 = nextframetime;\r\n\t\tlet y2 = nextframeValue;\r\n\t\tlet wt2 = nextframeInweight;\r\n\r\n\t\tlet dx = x2 - x1;\r\n\t\tlet dy = y2 - y1;\r\n\t\tdy = Math.max(Math.abs(dy), Eps) * (dy < 0 ? -1 : 1);\r\n\r\n\t\tlet yp1 = frameOutTangent;\r\n\t\tlet yp2 = nextframeIntangent;\r\n\r\n\t\tif (!Number.isFinite(yp1) || !Number.isFinite(yp2)) {\r\n\t\t\treturn frameValue;\r\n\t\t}\r\n\r\n\t\typ1 = yp1 * dx / dy;\r\n\t\typ2 = yp2 * dx / dy;\r\n\r\n\t\tlet wt2s = 1 - wt2;\r\n\r\n\t\tlet t = 0.5;\r\n\t\tlet t2 = 0;\r\n\r\n\t\tif (Math.abs(wt1 - 0.33333334) < 0.0001 && Math.abs(wt2 - 0.33333334) < 0.0001) {\r\n\t\t\tt = x;\r\n\t\t\tt2 = 1 - t;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twhile (true) {\r\n\t\t\t\tt2 = (1 - t);\r\n\t\t\t\tlet fg = 3 * t2 * t2 * t * wt1 + 3 * t2 * t * t * wt2s + t * t * t - x;\r\n\t\t\t\tif (Math.abs(fg) <= 2.5 * Eps)\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// third order householder method\r\n\t\t\t\tlet fpg = 3 * t2 * t2 * wt1 + 6 * t2 * t * (wt2s - wt1) + 3 * t * t * (1 - wt2s);\r\n\t\t\t\tlet fppg = 6 * t2 * (wt2s - 2 * wt1) + 6 * t * (1 - 2 * wt2s + wt1);\r\n\t\t\t\tlet fpppg = 18 * wt1 - 18 * wt2s + 6;\r\n\r\n\t\t\t\tt -= (6 * fg * fpg * fpg - 3 * fg * fg * fppg) / (6 * fpg * fpg * fpg - 6 * fg * fpg * fppg + fg * fg * fpppg);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet y = 3 * t2 * t2 * t * wt1 * yp1 + 3 * t2 * t * t * (1 - wt2 * yp2) + t * t * t;\r\n\r\n\t\treturn y * dy + y1;\r\n\t}\r\n\r\n\tprivate _curveInterpolate(frame: FloatKeyframe, nextFrame: FloatKeyframe, t: number, dur: number): number {\r\n\t\tif ((!frame.weightedMode) || this._weightModeHermite(frame.weightedMode, nextFrame.weightedMode)) {\r\n\t\t\treturn this._hermiteInterpolate(frame, nextFrame, t, dur);\r\n\t\t} else {\r\n\t\t\t//weight\r\n\t\t\treturn this._hermiteCurveSplineWeight(frame.value, frame.time, frame.outWeight, frame.outTangent,\r\n\t\t\t\tnextFrame.value, nextFrame.time, nextFrame.inWeight, nextFrame.inTangent, t);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Calculate animation data for the current frame.\r\n\t * @param nodes Animation keyframes.\r\n\t * @param playCurTime Current playback time.\r\n\t * @param realTimeCurrentFrameIndexes Current frame indices of the animation.\r\n\t * @param addtive Whether it's in additive mode.\r\n\t * @param frontPlay Whether it's playing forward.\r\n\t * @param outDatas Calculated animation data.\r\n\t * @zh 计算当前帧的动画数据。\r\n\t * @param nodes 动画帧。\r\n\t * @param playCurTime 现在的播放时间。\r\n\t * @param realTimeCurrentFrameIndexes 目前到达了动画的第几帧。\r\n\t * @param addtive 是否是addtive模式。\r\n\t * @param frontPlay 是否是前向播放。\r\n\t * @param outDatas 计算好的动画数据。\r\n\t */\r\n\t_evaluateClipDatasRealTime(nodes: KeyframeNodeList, playCurTime: number, realTimeCurrentFrameIndexes: Int16Array, addtive: boolean, frontPlay: boolean, outDatas: Array<number | Vector3 | Quaternion | Vector4 | Vector2>, avatarMask: AvatarMask): void {\r\n\t\tfor (var i = 0, n = nodes.count; i < n; i++) {\r\n\t\t\tvar node = nodes.getNodeByIndex(i);\r\n\t\t\tvar type = node.type;\r\n\t\t\tvar nextFrameIndex;\r\n\t\t\tvar keyFrames = node._keyFrames;\r\n\t\t\tvar keyFramesCount = keyFrames.length;\r\n\t\t\tvar frameIndex = realTimeCurrentFrameIndexes[i];\r\n\t\t\tif (avatarMask && (!avatarMask.getTransformActive(node.nodePath))) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (frontPlay) {\r\n\t\t\t\tif ((frameIndex !== -1) && (playCurTime < keyFrames[frameIndex].time)) {//重置正向循环\r\n\t\t\t\t\tframeIndex = -1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (nextFrameIndex < keyFramesCount) {\r\n\t\t\t\t\tif (keyFrames[nextFrameIndex].time > playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex++;\r\n\t\t\t\t\tnextFrameIndex++;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\tif ((nextFrameIndex !== keyFramesCount) && (playCurTime > keyFrames[nextFrameIndex].time)) {//重置逆向循环\r\n\t\t\t\t\tframeIndex = keyFramesCount - 1;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnextFrameIndex = frameIndex + 1;\r\n\t\t\t\twhile (frameIndex > -1) {\r\n\t\t\t\t\tif (keyFrames[frameIndex].time < playCurTime)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tframeIndex--;\r\n\t\t\t\t\tnextFrameIndex--;\r\n\t\t\t\t\trealTimeCurrentFrameIndexes[i] = frameIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar isEnd = nextFrameIndex === keyFramesCount;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase KeyFrameValueType.Float:\r\n\t\t\t\t\tif (frameIndex !== -1) {\r\n\t\t\t\t\t\tvar frame = (<FloatKeyframe>keyFrames[frameIndex]);\r\n\t\t\t\t\t\tif (isEnd) {//如果nextFarme为空，不修改数据，保持上一帧\r\n\t\t\t\t\t\t\toutDatas[i] = frame.value;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar nextFarme = (<FloatKeyframe>keyFrames[nextFrameIndex]);\r\n\t\t\t\t\t\t\tvar d = nextFarme.time - frame.time;\r\n\t\t\t\t\t\t\tvar t;\r\n\t\t\t\t\t\t\tif (d !== 0)\r\n\t\t\t\t\t\t\t\tt = (playCurTime - frame.time) / d;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tt = 0;\r\n\t\t\t\t\t\t\toutDatas[i] = this._curveInterpolate(frame, nextFarme, t, d);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutDatas[i] = (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (addtive)\r\n\t\t\t\t\t\toutDatas[i] = <number>outDatas[i] - (<FloatKeyframe>keyFrames[0]).value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Position:\r\n\t\t\t\tcase KeyFrameValueType.RotationEuler:\r\n\t\t\t\tcase KeyFrameValueType.Vector3:\r\n\t\t\t\t\tvar clipData = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar firstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x -= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y -= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z -= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Rotation:\r\n\t\t\t\t\tvar clipQuat = <Quaternion>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeQuaternionDatasRealTime(keyFrames as QuaternionKeyframe[], frameIndex, isEnd, playCurTime, clipQuat);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar tempQuat = AnimationClip._tempQuaternion0;\r\n\t\t\t\t\t\tvar firstFrameValueQua = ((<QuaternionKeyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tUtils3D.quaternionConjugate(firstFrameValueQua, tempQuat);\r\n\t\t\t\t\t\tQuaternion.multiply(tempQuat, clipQuat, clipQuat);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Scale:\r\n\t\t\t\t\tclipData = <Vector3>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector3DatasRealTime(keyFrames as Vector3Keyframe[], frameIndex, isEnd, playCurTime, clipData);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tfirstFrameValue = ((<Vector3Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tclipData.x /= firstFrameValue.x;\r\n\t\t\t\t\t\tclipData.y /= firstFrameValue.y;\r\n\t\t\t\t\t\tclipData.z /= firstFrameValue.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Vector2:\r\n\t\t\t\t\tvar v2Data = <Vector2>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector2DatasRealTime(keyFrames as Vector2Keyframe[], frameIndex, isEnd, playCurTime, v2Data);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar v2FrameValue = ((<Vector2Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tv2Data.x -= v2FrameValue.x;\r\n\t\t\t\t\t\tv2Data.y -= v2FrameValue.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KeyFrameValueType.Vector4:\r\n\t\t\t\tcase KeyFrameValueType.Color:\r\n\t\t\t\t\tvar v4Data = <Vector4>outDatas[i];\r\n\t\t\t\t\tthis._evaluateFrameNodeVector4DatasRealTime(keyFrames as Vector4Keyframe[], frameIndex, isEnd, playCurTime, v4Data);\r\n\t\t\t\t\tif (addtive) {\r\n\t\t\t\t\t\tvar v4FrameValue = ((<Vector4Keyframe>keyFrames[0])).value;\r\n\t\t\t\t\t\tv4Data.x -= v4FrameValue.x;\r\n\t\t\t\t\t\tv4Data.y -= v4FrameValue.y;\r\n\t\t\t\t\t\tv4Data.z -= v4FrameValue.z;\r\n\t\t\t\t\t\tv4Data.w -= v4FrameValue.w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"AnimationClip:unknown node type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector3DatasRealTime(keyFrames: Vector3Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector3): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector3(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector2DatasRealTime(keyFrames: Vector2Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector2): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector2(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _evaluateFrameNodeVector4DatasRealTime(keyFrames: Vector4Keyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Vector4): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateVector4(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprivate _evaluateFrameNodeQuaternionDatasRealTime(keyFrames: QuaternionKeyframe[], frameIndex: number, isEnd: boolean, playCurTime: number, outDatas: Quaternion): void {\r\n\t\tif (frameIndex !== -1) {\r\n\t\t\tvar frame = keyFrames[frameIndex];\r\n\t\t\tif (isEnd) {\r\n\t\t\t\tvar frameData = frame.value;\r\n\t\t\t\toutDatas.x = frameData.x;//不能设为null，会造成跳过当前帧数据\r\n\t\t\t\toutDatas.y = frameData.y;\r\n\t\t\t\toutDatas.z = frameData.z;\r\n\t\t\t\toutDatas.w = frameData.w;\r\n\t\t\t} else {\r\n\t\t\t\tvar nextKeyFrame = keyFrames[frameIndex + 1];\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar startTime = frame.time;\r\n\t\t\t\tvar d = nextKeyFrame.time - startTime;\r\n\t\t\t\tif (d !== 0)\r\n\t\t\t\t\tt = (playCurTime - startTime) / d;\r\n\t\t\t\telse\r\n\t\t\t\t\tt = 0;\r\n\r\n\t\t\t\tthis._hermiteInterpolateQuaternion(frame, nextKeyFrame, t, d, outDatas);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tvar firstFrameDatas = keyFrames[0].value;\r\n\t\t\toutDatas.x = firstFrameDatas.x;\r\n\t\t\toutDatas.y = firstFrameDatas.y;\r\n\t\t\toutDatas.z = firstFrameDatas.z;\r\n\t\t\toutDatas.w = firstFrameDatas.w;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _binarySearchEventIndex(time: number): number {\r\n\t\tvar start = 0;\r\n\t\tvar end = this._animationEvents.length - 1;\r\n\t\tvar mid;\r\n\t\twhile (start <= end) {\r\n\t\t\tmid = Math.floor((start + end) / 2);\r\n\t\t\tvar midValue = this._animationEvents[mid].time;\r\n\t\t\tif (midValue == time)\r\n\t\t\t\treturn mid;\r\n\t\t\telse if (midValue > time)\r\n\t\t\t\tend = mid - 1;\r\n\t\t\telse\r\n\t\t\t\tstart = mid + 1;\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add an animation event.\r\n\t * @param event The animation event to be added.\r\n\t * @zh 添加动画事件。\r\n\t * @param event 动画事件。\r\n\t */\r\n\taddEvent(event: AnimationEvent): void {\r\n\t\tvar index = this._binarySearchEventIndex(event.time);\r\n\t\tthis._animationEvents.splice(index, 0, event);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Dispose the resources.\r\n\t * @zh 销毁资源。\r\n\t */\r\n\tprotected _disposeResource(): void {\r\n\t\tthis._nodes = null;\r\n\t\tthis._nodesMap = null;\r\n\t}\r\n}\r\n\r\n\r\n\r\n","import { I3DRenderPassFactory } from \"../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPassFactory\";\r\nimport { IRenderEngine3DOBJFactory } from \"../../RenderDriver/DriverDesign/3DRenderPass/IRenderEngine3DOBJFactory\";\r\nimport { I3DRenderModuleFactory } from \"../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleFactory\";\r\n\r\nexport class Laya3DRender {\r\n    static Render3DModuleDataFactory: I3DRenderModuleFactory;\r\n    static Render3DPassFactory: I3DRenderPassFactory;\r\n    /**\r\n     * @deprecated\r\n     */\r\n    static renderOBJCreate: IRenderEngine3DOBJFactory;\r\n}","import { UnifromBufferData } from \"../../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix3x3 } from \"../../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { IDefineDatas } from \"../../RenderModuleData/Design/IDefineDatas\";\r\nimport { ShaderDefine } from \"../../RenderModuleData/Design/ShaderDefine\";\r\nimport { InternalTexture } from \"./InternalTexture\";\r\n\r\nexport type uboParams = { ubo: UniformBufferObject; uboBuffer: UnifromBufferData };\r\nexport enum ShaderDataType {\r\n    None,\r\n    Int,\r\n    Bool,\r\n    Float,\r\n    Vector2,\r\n    Vector3,\r\n    Vector4,\r\n    Color,\r\n    Matrix4x4,\r\n    Texture2D,\r\n    Texture3D,\r\n    TextureCube,\r\n    Buffer,\r\n    Matrix3x3,\r\n    Texture2DArray\r\n}\r\n\r\nexport type ShaderDataItem = number | boolean | Vector2 | Vector3 | Vector4 | Color | Matrix4x4 | BaseTexture | Float32Array | Matrix3x3;\r\n\r\nexport function ShaderDataDefaultValue(type: ShaderDataType) {\r\n    switch (type) {\r\n        case ShaderDataType.Int:\r\n            return 0;\r\n        case ShaderDataType.Bool:\r\n            return false;\r\n        case ShaderDataType.Float:\r\n            return 0;\r\n        case ShaderDataType.Vector2:\r\n            return Vector2.ZERO;\r\n        case ShaderDataType.Vector3:\r\n            return Vector3.ZERO;\r\n        case ShaderDataType.Vector4:\r\n            return Vector4.ZERO;\r\n        case ShaderDataType.Color:\r\n            return Color.BLACK;\r\n        case ShaderDataType.Matrix4x4:\r\n            return Matrix4x4.DEFAULT;\r\n        case ShaderDataType.Matrix3x3:\r\n            return Matrix3x3.DEFAULT;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 着色器数据类。\r\n */\r\nexport class ShaderData implements IClone {\r\n    /**@internal */\r\n    readonly _ownerResource: Resource;\r\n\r\n    /**\r\n     * @internal\t\r\n     */\r\n    constructor(ownerResource: Resource = null) {\r\n        this._ownerResource = ownerResource;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * 增加一个UBO Block\r\n     * @param key \r\n     * @param ubo \r\n     * @param uboData \r\n     */\r\n    _addCheckUBO(key: string, ubo: UniformBufferObject, uboData: UnifromBufferData) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    _releaseUBOData() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n\r\n    getDefineData(): IDefineDatas {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    getData(): any {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 增加Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    addDefine(define: ShaderDefine): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    addDefines(define: IDefineDatas): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 移除Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    removeDefine(define: ShaderDefine): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 是否包含Shader宏定义。\r\n     * @param value 宏定义。\r\n     */\r\n    hasDefine(define: ShaderDefine): boolean {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 清空宏定义。\r\n     */\r\n    clearDefine(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取布尔。\r\n     * @param\tindex shader索引。\r\n     * @return  布尔。\r\n     */\r\n    getBool(index: number): boolean {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置布尔。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 布尔。\r\n     */\r\n    setBool(index: number, value: boolean): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取整形。\r\n     * @param\tindex shader索引。\r\n     * @return  整形。\r\n     */\r\n    getInt(index: number): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置整型。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 整形。\r\n     */\r\n    setInt(index: number, value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取浮点。\r\n     * @param\tindex shader索引。\r\n     * @return\t浮点。\r\n     */\r\n    getNumber(index: number): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置浮点。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 浮点。\r\n     */\r\n    setNumber(index: number, value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取Vector2向量。\r\n     * @param\tindex shader索引。\r\n     * @return Vector2向量。\r\n     */\r\n    getVector2(index: number): Vector2 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置Vector2向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue Vector2向量。\r\n     */\r\n    setVector2(index: number, value: Vector2): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取Vector3向量。\r\n     * @param\tindex shader索引。\r\n     * @return Vector3向量。\r\n     */\r\n    getVector3(index: number): Vector3 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue Vector3向量。\r\n     */\r\n    setVector3(index: number, value: Vector3): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取颜色。\r\n     * @param \tindex shader索引。\r\n     * @return  向量。\r\n     */\r\n    getVector(index: number): Vector4 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置向量。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 向量。\r\n     */\r\n    setVector(index: number, value: Vector4): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取颜色\r\n     * @param index 索引\r\n     * @returns 颜色\r\n     */\r\n    getColor(index: number): Color {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置颜色\r\n     * @param index 索引\r\n     * @param value 颜色值\r\n     */\r\n    setColor(index: number, value: Color): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取矩阵。\r\n     * @param\tindex shader索引。\r\n     * @return  矩阵。\r\n     */\r\n    getMatrix4x4(index: number): Matrix4x4 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue  矩阵。\r\n     */\r\n    setMatrix4x4(index: number, value: Matrix4x4): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取矩阵\r\n     * @param index \r\n     * @returns \r\n     */\r\n    getMatrix3x3(index: number): Matrix3x3 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵。\r\n     * @param index \r\n     * @param value \r\n     */\r\n    setMatrix3x3(index: number, value: Matrix3x3): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取Buffer。\r\n     * @param\tindex shader索引。\r\n     * @return\r\n     */\r\n    getBuffer(index: number): Float32Array {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue  buffer数据。\r\n     */\r\n    setBuffer(index: number, value: Float32Array): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 设置纹理。\r\n     * @param\tindex shader索引。\r\n     * @param\tvalue 纹理。\r\n     */\r\n    setTexture(index: number, value: BaseTexture): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 获取纹理。\r\n     * @param\tindex shader索引。\r\n     * @return  纹理。\r\n     */\r\n    getTexture(index: number): BaseTexture {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index \r\n     * @param value \r\n     */\r\n    setUniformBuffer(index: number, value: UniformBufferObject) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getUniformBuffer(index: number): UniformBufferObject {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    setShaderData(uniformIndex: number, type: ShaderDataType, value: ShaderDataItem | Quaternion) {\r\n        switch (type) {\r\n            case ShaderDataType.Int:\r\n                this.setInt(uniformIndex, <number>value);\r\n                break;\r\n            case ShaderDataType.Bool:\r\n                this.setBool(uniformIndex, <boolean>value);\r\n                break;\r\n            case ShaderDataType.Float:\r\n                this.setNumber(uniformIndex, <number>value);\r\n                break;\r\n            case ShaderDataType.Vector2:\r\n                this.setVector2(uniformIndex, <Vector2>value);\r\n                break;\r\n            case ShaderDataType.Vector3:\r\n                this.setVector3(uniformIndex, <Vector3>value);\r\n                break;\r\n            case ShaderDataType.Vector4:\r\n                this.setVector(uniformIndex, <Vector4>value);\r\n                break;\r\n            case ShaderDataType.Color:\r\n                this.setColor(uniformIndex, <Color>value);\r\n                break;\r\n            case ShaderDataType.Matrix4x4:\r\n                this.setMatrix4x4(uniformIndex, <Matrix4x4>value);\r\n                break;\r\n            case ShaderDataType.Matrix3x3:\r\n                this.setMatrix3x3(uniformIndex, <Matrix3x3>value);\r\n                break;\r\n            case ShaderDataType.Texture2D:\r\n            case ShaderDataType.TextureCube:\r\n                this.setTexture(uniformIndex, <BaseTexture>value);\r\n                break;\r\n            case ShaderDataType.Buffer:\r\n                this.setBuffer(uniformIndex, <Float32Array>value);\r\n                break;\r\n            default:\r\n                throw new Error(`unkown shader data type: ${type}`);\r\n        }\r\n    }\r\n\r\n    getShaderData(uniformIndex: number, type: ShaderDataType): ShaderDataItem {\r\n        switch (type) {\r\n            case ShaderDataType.Int:\r\n                return this.getInt(uniformIndex);\r\n            case ShaderDataType.Bool:\r\n                return this.getBool(uniformIndex);\r\n            case ShaderDataType.Float:\r\n                return this.getNumber(uniformIndex);\r\n            case ShaderDataType.Vector2:\r\n                return this.getVector2(uniformIndex);\r\n            case ShaderDataType.Vector3:\r\n                return this.getVector3(uniformIndex);\r\n            case ShaderDataType.Vector4:\r\n                return this.getVector(uniformIndex);\r\n            case ShaderDataType.Color:\r\n                return this.getColor(uniformIndex);\r\n            case ShaderDataType.Matrix4x4:\r\n                return this.getMatrix4x4(uniformIndex);\r\n            case ShaderDataType.Texture2D:\r\n            case ShaderDataType.TextureCube:\r\n                return this.getTexture(uniformIndex);\r\n            case ShaderDataType.Buffer:\r\n                return this.getBuffer(uniformIndex);\r\n            case ShaderDataType.Matrix3x3:\r\n                return this.getMatrix3x3(uniformIndex);\r\n            case ShaderDataType.Matrix4x4:\r\n                return this.getMatrix4x4(uniformIndex);\r\n            default:\r\n                throw \"unkone shader data type.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _setInternalTexture(index: number, value: InternalTexture): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n\r\n    /**\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    cloneTo(destObject: ShaderData): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * clone UBO Data\r\n     * @internal\r\n     * @param uboDatas \r\n     */\r\n    _cloneUBO(uboDatas: Map<string, uboParams>) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * 克隆。\r\n     * @return\t 克隆副本。\r\n     */\r\n    clone(): any {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    reset() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    destroy(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { Prefab } from \"../../resource/HierarchyResource\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { NodeFlags } from \"../../Const\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { CommandUniformMap } from \"../../RenderDriver/DriverDesign/RenderDevice/CommandUniformMap\";\r\nimport { Event } from \"../../events/Event\";\r\n/**\r\n * @internal\r\n */\r\nexport enum StaticFlag {\r\n    Normal = 1 << 0,\r\n    StaticBatch = 1 << 1,\r\n}\r\n\r\n/**\r\n * @en The `Sprite3D` class is used to implement 3D sprites.\r\n * @zh `Sprite3D` 类用于实现3D精灵。\r\n */\r\nexport class Sprite3D extends Node {\r\n    /**\r\n     * @internal\r\n     * @en Shader variable name for world matrix.\r\n     * @zh 着色器变量名，世界矩阵。\r\n     */\r\n    static WORLDMATRIX: number;\r\n    /**\r\n     * @en Indicates the front face direction. -1 for inverted back face, 1 for normal situation.\r\n     * @zh -1 表示翻转了背面，1 表示正常情况。\r\n     */\r\n    static WORLDINVERTFRONT: number;\r\n    /**@internal */\r\n    static sprite3DCommandUniformMap: CommandUniformMap;\r\n    /**@internal */\r\n    protected static _uniqueIDCounter: number = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        Sprite3D.WORLDMATRIX = Shader3D.propertyNameToID(\"u_WorldMat\");\r\n        Sprite3D.WORLDINVERTFRONT = Shader3D.propertyNameToID(\"u_WroldInvertFront\");\r\n        Sprite3D.sprite3DCommandUniformMap = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Sprite3D\");\r\n        Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDMATRIX, \"u_WorldMat\", ShaderDataType.Matrix4x4);\r\n        Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDINVERTFRONT, \"u_WroldInvertFront\", ShaderDataType.Vector4);\r\n    }\r\n\r\n    /**\r\n     * @en Create a clone instance of the sprite.\r\n     * @param original The original sprite.\r\n     * @param parent The parent node. Default is null.\r\n     * @param worldPositionStays Whether to maintain its own world transformation. Default is true.\r\n     * @param position World position, effective when worldPositionStays is false. Default is null.\r\n     * @param rotation World rotation, effective when worldPositionStays is false. Default is null.\r\n     * @returns The cloned instance.\r\n     * @zh 创建精灵的克隆实例。\r\n     * @param original 原始精灵。\r\n     * @param parent 父节点。默认为 null。\r\n     * @param worldPositionStays 是否保持自身世界变换。默认为 true。\r\n     * @param position 世界位置，worldPositionStays 为 false 时生效。默认为 null。\r\n     * @param rotation 世界旋转，worldPositionStays 为 false 时生效。默认为 null。\r\n     * @returns 克隆实例。\r\n     */\r\n    static instantiate(original: Sprite3D, parent: Node = null, worldPositionStays: boolean = true, position: Vector3 = null, rotation: Quaternion = null): Sprite3D {\r\n        var destSprite3D: Sprite3D = (<Sprite3D>original.clone());\r\n        (parent) && (parent.addChild(destSprite3D));\r\n        var transform: Transform3D = destSprite3D.transform;\r\n        if (worldPositionStays) {\r\n            var worldMatrix: Matrix4x4 = transform.worldMatrix;\r\n            original.transform.worldMatrix.cloneTo(worldMatrix);\r\n            transform.worldMatrix = worldMatrix;\r\n        } else {\r\n            (position) && (transform.position = position);\r\n            (rotation) && (transform.rotation = rotation);\r\n        }\r\n        return destSprite3D;\r\n    }\r\n\r\n    /**\r\n     * @en Load mesh template.\r\n     * @param url The template URL.\r\n     * @param complete The completion callback.\r\n     * @zh 加载网格模板。\r\n     * @param url 模板地址。\r\n     * @param complete 完成回调。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url).then((res: Prefab) => {\r\n            complete && complete.runWith([res?.create()]);\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _id: number;\r\n\r\n    /** @internal */\r\n    _isStatic: number;\r\n    /** @internal */\r\n    _layer: number;\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n    /**@internal 0表示不是渲染节点*/\r\n    _isRenderNode: number = 0;\r\n\r\n    /**\r\n     * @en Unique identifier ID.\r\n     * @zh 唯一标识ID。\r\n     */\r\n    get id(): number {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @en Mask layer.\r\n     * @zh 蒙版层。\r\n     */\r\n    get layer(): number {\r\n        return this._layer;\r\n    }\r\n\r\n    set layer(value: number) {\r\n        if (this._layer !== value) {\r\n            if (value >= 0 && value <= 30) {\r\n                this._layer = value;\r\n                this.event(Event.LAYERCHANGE, value);\r\n            } else {\r\n                throw new Error(\"Layer value must be 0-30.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether the sprite is static.\r\n     * @zh 是否为静态。\r\n     */\r\n    get isStatic(): boolean {\r\n        return !!(this._isStatic >> 1 | 0x0);\r\n    }\r\n\r\n    /**@internal IDE only*/\r\n    set isStatic(value: boolean) {\r\n        this._isStatic = value ? StaticFlag.StaticBatch : StaticFlag.Normal;\r\n        this.event(Event.staticMask, this._isStatic);\r\n    }\r\n\r\n    /**\r\n     * @en Sprite transformation.\r\n     * @zh 精灵变换。\r\n     */\r\n    get transform(): Transform3D {\r\n        return this._transform;\r\n    }\r\n\r\n    /**\r\n     * @en Get the scene to which the sprite belongs.\r\n     * @zh 获取精灵所属的场景。\r\n     */\r\n    get scene(): Scene3D {\r\n        return <Scene3D>this._scene;\r\n    }\r\n\r\n    /**\r\n     * @en Creates an instance of the Sprite3D class.\r\n     * @param name Sprite name.\r\n     * @param isStatic Whether it is static.\r\n     * @zh 创建 Sprite3D 类的实例。\r\n     * @param name 精灵名称。\r\n     * @param isStatic 是否为静态。\r\n     */\r\n    constructor(name: string = null, isStatic: boolean = false) {\r\n        super();\r\n        this._id = ++Sprite3D._uniqueIDCounter;\r\n        this._is3D = true;\r\n        this._transform = Laya3DRender.Render3DModuleDataFactory.createTransform(this);\r\n        this._isStatic = isStatic ? StaticFlag.StaticBatch : StaticFlag.Normal;\r\n        this.layer = 0;\r\n        this.name = name ? name : \"New Sprite3D\";\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    * @protected\r\n    */\r\n    protected _onActive(): void {\r\n        super._onActive();\r\n        Stat.sprite3DCount++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onInActive(): void {\r\n        super._onInActive();\r\n        Stat.sprite3DCount--;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onAdded(): void {\r\n        if (this._parent instanceof Sprite3D) {\r\n            var parent3D: Sprite3D = (<Sprite3D>this._parent);\r\n            this.transform._setParent(parent3D.transform);\r\n        }\r\n        else\r\n            this.transform._onWorldTransform();\r\n        super._onAdded();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onRemoved(): void {\r\n        super._onRemoved();\r\n        if (this._parent instanceof Sprite3D)\r\n            this.transform._setParent(null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @param type \r\n     */\r\n    protected onStartListeningToType(type: string) {\r\n        super.onStartListeningToType(type);\r\n        if (type.startsWith(\"collision\"))\r\n            this._setBit(NodeFlags.PROCESS_COLLISIONS, true);\r\n        else if (type.startsWith(\"trigger\"))\r\n            this._setBit(NodeFlags.PROCESS_TRIGGERS, true);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        (data.isStatic !== undefined) && (this.isStatic = data.isStatic);\r\n        (data.active !== undefined) && (this.active = data.active);\r\n        (data.name != undefined) && (this.name = data.name);\r\n        (data.tag != undefined) && (this.tag = data.tag);\r\n\r\n        if (data.position !== undefined) {\r\n            var loccalPosition: Vector3 = this.transform.localPosition;\r\n            loccalPosition.fromArray(data.position);\r\n            this.transform.localPosition = loccalPosition;\r\n        }\r\n\r\n        if (data.rotationEuler !== undefined) {\r\n            var localRotationEuler: Vector3 = this.transform.localRotationEuler;\r\n            localRotationEuler.fromArray(data.rotationEuler);\r\n            this.transform.localRotationEuler = localRotationEuler;\r\n        }\r\n        if (data.rotation !== undefined) {\r\n            var localRotation: Quaternion = this.transform.localRotation;\r\n            localRotation.fromArray(data.rotation);\r\n            this.transform.localRotation = localRotation;\r\n        }\r\n\r\n        if (data.scale !== undefined) {\r\n            var localScale: Vector3 = this.transform.localScale;\r\n            localScale.fromArray(data.scale);\r\n            this.transform.localScale = localScale;\r\n        }\r\n\r\n        (data.layer != undefined) && (this.layer = data.layer);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        if (this._destroyed)\r\n            throw new Error(\"Sprite3D: Can't be cloned if the Sprite3D has destroyed.\");\r\n\r\n        var destSprite3D: Sprite3D = <Sprite3D>destObject;\r\n        var trans: Transform3D = this._transform;\r\n        var destTrans: Transform3D = destSprite3D._transform;\r\n\r\n        destSprite3D.name = this.name/* + \"(clone)\"*/;//TODO:克隆后不能播放刚体动画，找不到名字\r\n        destSprite3D.tag = this.tag;\r\n        destSprite3D._destroyed = this._destroyed;\r\n        destSprite3D.active = this.active;\r\n        destTrans.localPosition = trans.localPosition;\r\n        destTrans.localRotation = trans.localRotation;\r\n        destTrans.localScale = trans.localScale;\r\n\r\n        destSprite3D._isStatic = this._isStatic;\r\n        destSprite3D.layer = this.layer;\r\n        super._cloneTo(destSprite3D, srcRoot, dstRoot);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _createSprite3DInstance(scrSprite: Sprite3D): Node {\r\n        var node: Node = scrSprite._create();\r\n        var children: any[] = scrSprite._children;\r\n        for (var i: number = 0, n: number = children.length; i < n; i++) {\r\n            var child: any = Sprite3D._createSprite3DInstance(children[i])\r\n            node.addChild(child);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _parseSprite3DInstance(srcRoot: Node, dstRoot: Node, scrSprite: Node, dstSprite: Node): void {\r\n        var srcChildren: any[] = scrSprite._children;\r\n        var dstChildren: any[] = dstSprite._children;\r\n        for (var i: number = 0, n: number = srcChildren.length; i < n; i++)\r\n            Sprite3D._parseSprite3DInstance(srcRoot, dstRoot, srcChildren[i], dstChildren[i])\r\n        scrSprite._cloneTo(dstSprite, srcRoot, dstRoot);\r\n    }\r\n\r\n    /**\r\n     * @en clone.\r\n     * @returns clone instance.\r\n     * @zh 克隆。\r\n     * @returns\t克隆副本。\r\n     */\r\n    clone(): Node {\r\n        var dstSprite3D: Node = Sprite3D._createSprite3DInstance(this);\r\n        Sprite3D._parseSprite3DInstance(this, dstSprite3D, this, dstSprite3D);\r\n        return dstSprite3D;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en destroy\r\n     * @param dextroychild whether to destroy the child node.\r\n     * @zh 销毁\r\n     * @param destroyChild 是否销毁子节点\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n\r\n        super.destroy(destroyChild);\r\n        this._transform = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n}\r\n\r\n","import { Plane } from \"./Plane\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { Bounds } from \"./Bounds\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en The corner of frustum.\r\n * @zh 锥体角点。\r\n */\r\nexport enum FrustumCorner {\r\n\tFarBottomLeft = 0,\r\n\tFarTopLeft = 1,\r\n\tFarTopRight = 2,\r\n\tFarBottomRight = 3,\r\n\tnearBottomLeft = 4,\r\n\tnearTopLeft = 5,\r\n\tnearTopRight = 6,\r\n\tnearBottomRight = 7,\r\n\tunknown = 8\r\n}\r\n\r\n\r\n/**\r\n * @en The BoundFrustum class is used to create a frustum.\r\n * @zh BoundFrustum 类用于创建截锥体。\r\n */\r\nexport class BoundFrustum implements IClone {\r\n\t/** @internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV32: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV33: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV34: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV35: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprivate static _tempV36: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en Obtain 6 enclosing planes based on the matrix.\r\n\t * @param  m The matrix that describes the frustum.\r\n\t * @param  np The near plane.\r\n\t * @param  fp The far plane.\r\n\t * @param  lp The left plane.\r\n\t * @param  rp The right plane.\r\n\t * @param  tp The top plane.\r\n\t * @param  bp The bottom plane.\r\n\t * @zh 根据矩阵获取6个包围平面。\r\n\t * @param  m 描述矩阵。\r\n\t * @param  np 近平面。\r\n\t * @param  fp 远平面。\r\n\t * @param  lp 左平面。\r\n\t * @param  rp 右平面。\r\n\t * @param  tp 顶平面。\r\n\t * @param  bp 底平面。\r\n\t */\r\n\tstatic getPlanesFromMatrix(m: Matrix4x4, np: Plane, fp: Plane, lp: Plane, rp: Plane, tp: Plane, bp: Plane): void {\r\n\t\tvar matrixE: Float32Array = m.elements;\r\n\t\tvar m11: number = matrixE[0];\r\n\t\tvar m12: number = matrixE[1];\r\n\t\tvar m13: number = matrixE[2];\r\n\t\tvar m14: number = matrixE[3];\r\n\t\tvar m21: number = matrixE[4];\r\n\t\tvar m22: number = matrixE[5];\r\n\t\tvar m23: number = matrixE[6];\r\n\t\tvar m24: number = matrixE[7];\r\n\t\tvar m31: number = matrixE[8];\r\n\t\tvar m32: number = matrixE[9];\r\n\t\tvar m33: number = matrixE[10];\r\n\t\tvar m34: number = matrixE[11];\r\n\t\tvar m41: number = matrixE[12];\r\n\t\tvar m42: number = matrixE[13];\r\n\t\tvar m43: number = matrixE[14];\r\n\t\tvar m44: number = matrixE[15];\r\n\r\n\t\t//near\r\n\t\tvar nearNorE: Vector3 = np.normal;\r\n\t\tnearNorE.x = m13;\r\n\t\tnearNorE.y = m23;\r\n\t\tnearNorE.z = m33;\r\n\t\tnp.distance = m43;\r\n\t\tnp.normal = nearNorE;\r\n\t\tnp.normalize();\r\n\r\n\t\t//far\r\n\t\tvar farNorE: Vector3 = fp.normal;\r\n\t\tfarNorE.x = m14 - m13;\r\n\t\tfarNorE.y = m24 - m23;\r\n\t\tfarNorE.z = m34 - m33;\r\n\t\tfp.distance = m44 - m43;\r\n\t\tfp.normal = farNorE;\r\n\t\tfp.normalize();\r\n\r\n\t\t//left\r\n\t\tvar leftNorE: Vector3 = lp.normal;\r\n\t\tleftNorE.x = m14 + m11;\r\n\t\tleftNorE.y = m24 + m21;\r\n\t\tleftNorE.z = m34 + m31;\r\n\t\tlp.distance = m44 + m41;\r\n\t\tlp.normal = leftNorE;\r\n\t\tlp.normalize();\r\n\r\n\t\t//right\r\n\t\tvar rightNorE: Vector3 = rp.normal;\r\n\t\trightNorE.x = m14 - m11;\r\n\t\trightNorE.y = m24 - m21;\r\n\t\trightNorE.z = m34 - m31;\r\n\t\trp.distance = m44 - m41;\r\n\t\trp.normal = rightNorE;\r\n\t\trp.normalize();\r\n\r\n\t\t//top\r\n\t\tvar topNorE: Vector3 = tp.normal;\r\n\t\ttopNorE.x = m14 - m12;\r\n\t\ttopNorE.y = m24 - m22;\r\n\t\ttopNorE.z = m34 - m32;\r\n\t\ttp.distance = m44 - m42;\r\n\t\ttp.normal = topNorE;\r\n\t\ttp.normalize();\r\n\r\n\t\t//bottom\r\n\t\tvar bottomNorE: Vector3 = bp.normal;\r\n\t\tbottomNorE.x = m14 + m12;\r\n\t\tbottomNorE.y = m24 + m22;\r\n\t\tbottomNorE.z = m34 + m32;\r\n\t\tbp.distance = m44 + m42;\r\n\t\tbp.normal = bottomNorE;\r\n\t\tbp.normalize();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprotected _matrix: Matrix4x4;\r\n\t/** @internal */\r\n\tprotected _near: Plane;\r\n\t/** @internal */\r\n\tprotected _far: Plane;\r\n\t/** @internal */\r\n\tprotected _left: Plane;\r\n\t/** @internal */\r\n\tprotected _right: Plane;\r\n\t/** @internal */\r\n\tprotected _top: Plane;\r\n\t/** @internal */\r\n\tprotected _bottom: Plane;\r\n\r\n\t/**\r\n\t * @en Constructor method.\r\n\t * @param matrix The 4x4 matrix that describes the frustum.\r\n\t * @zh 构造方法。\r\n\t * @param matrix 锥截体的描述4x4矩阵。\r\n\t */\r\n\tconstructor(matrix: Matrix4x4) {\r\n\t\tthis._matrix = matrix;\r\n\t\tthis.initBoundingPlane();\r\n\t}\r\n\r\n\tprotected initBoundingPlane() {\r\n\t\tthis._near = new Plane();\r\n\t\tthis._far = new Plane();\r\n\t\tthis._left = new Plane();\r\n\t\tthis._right = new Plane();\r\n\t\tthis._top = new Plane();\r\n\t\tthis._bottom = new Plane();\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The matrix that describes the frustum.\r\n\t * @zh 描述矩阵。\r\n\t */\r\n\tget matrix(): Matrix4x4 {\r\n\t\treturn this._matrix;\r\n\t}\r\n\r\n\tset matrix(matrix: Matrix4x4) {\r\n\t\tmatrix.cloneTo(this._matrix)\r\n\t\tBoundFrustum.getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The near plane.\r\n\t * @zh 近平面。\r\n\t */\r\n\tget near(): Plane {\r\n\t\treturn this._near;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The far plane.\r\n\t * @zh 远平面。\r\n\t */\r\n\tget far(): Plane {\r\n\t\treturn this._far;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The left plane.\r\n\t * @zh 左平面。\r\n\t */\r\n\tget left(): Plane {\r\n\t\treturn this._left;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The right plane.\r\n\t * @zh 右平面。\r\n\t */\r\n\tget right(): Plane {\r\n\t\treturn this._right;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The top plane.\r\n\t * @zh 顶平面。\r\n\t */\r\n\tget top(): Plane {\r\n\t\treturn this._top;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The bottom plane.\r\n\t * @zh 底平面。\r\n\t */\r\n\tget bottom(): Plane {\r\n\t\treturn this._bottom;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines whether this bound frustum is equal to another bound frustum.\r\n\t * @param other The other bound frustum to compare.\r\n\t * @zh 判断这个截锥体是否与另一个截锥体相等。\r\n\t * @param other 要比较的另一个截锥体。\r\n\t */\r\n\tequalsBoundFrustum(other: BoundFrustum): boolean {\r\n\t\treturn this._matrix.equalsOtherMatrix(other.matrix)\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines whether this object is equal to another object.\r\n\t * @param obj The object to compare.\r\n\t * @zh 判断此对象是否等于另一个对象。\r\n\t * @param obj 要比较的另一个对象。\r\n\t */\r\n\tequalsObj(obj: any): boolean {\r\n\t\tif (obj instanceof BoundFrustum) {\r\n\t\t\tvar bf: BoundFrustum = (<BoundFrustum>obj);\r\n\t\t\treturn this.equalsBoundFrustum(bf);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets a specific plane of the frustum.\r\n\t * @param index The index of the plane to retrieve. Indices:\r\n\t * - 0: Near plane\r\n\t * - 1: Far plane\r\n\t * - 2: Left plane\r\n\t * - 3: Right plane\r\n\t * - 4: Top plane\r\n\t * - 5: Bottom plane\r\n\t * @returns The requested plane or `null` if the index is out of range.\r\n\t * @zh 获取截锥体的特定平面。\r\n\t * @param index 要检索的平面的索引。索引：\r\n\t * - 0: 近平面\r\n\t * - 1: 远平面\r\n\t * - 2: 左平面\r\n\t * - 3: 右平面\r\n\t * - 4: 顶平面\r\n\t * - 5: 底平面\r\n\t * @returns 所请求的平面或 `null` 如果索引超出范围。\r\n\t */\r\n\tgetPlane(index: number): Plane {\r\n\t\tswitch (index) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn this._near;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this._far;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn this._left;\r\n\t\t\tcase 3:\r\n\t\t\t\treturn this._right;\r\n\t\t\tcase 4:\r\n\t\t\t\treturn this._top;\r\n\t\t\tcase 5:\r\n\t\t\t\treturn this._bottom;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Calculates the intersection point of three planes within the frustum.\r\n\t * @param p1 The first plane.\r\n\t * @param p2 The second plane.\r\n\t * @param p3 The third plane.\r\n\t * @param out The vector to store the intersection point.\r\n\t * @zh 计算截锥体中三个平面的交点。\r\n\t * @param p1 第一个平面。\r\n\t * @param p2 第二个平面。\r\n\t * @param p3 第三个平面。\r\n\t * @param out 存储交点的向量。\r\n\t */\r\n\tstatic get3PlaneInterPoint(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\r\n\t\tvar p1Nor: Vector3 = p1.normal;\r\n\t\tvar p2Nor: Vector3 = p2.normal;\r\n\t\tvar p3Nor: Vector3 = p3.normal;\r\n\r\n\t\tVector3.cross(p2Nor, p3Nor, BoundFrustum._tempV30);\r\n\t\tVector3.cross(p3Nor, p1Nor, BoundFrustum._tempV31);\r\n\t\tVector3.cross(p1Nor, p2Nor, BoundFrustum._tempV32);\r\n\r\n\t\tvar a: number = Vector3.dot(p1Nor, BoundFrustum._tempV30);\r\n\t\tvar b: number = Vector3.dot(p2Nor, BoundFrustum._tempV31);\r\n\t\tvar c: number = Vector3.dot(p3Nor, BoundFrustum._tempV32);\r\n\r\n\t\tVector3.scale(BoundFrustum._tempV30, -p1.distance / a, BoundFrustum._tempV33);\r\n\t\tVector3.scale(BoundFrustum._tempV31, -p2.distance / b, BoundFrustum._tempV34);\r\n\t\tVector3.scale(BoundFrustum._tempV32, -p3.distance / c, BoundFrustum._tempV35);\r\n\r\n\t\tVector3.add(BoundFrustum._tempV33, BoundFrustum._tempV34, BoundFrustum._tempV36);\r\n\t\tVector3.add(BoundFrustum._tempV35, BoundFrustum._tempV36, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Retrieves the eight corner points of the frustum.\r\n\t * @param corners The array to store the corner points.\r\n\t * @zh 获取截锥体的八个角点\r\n\t * @param corners 存储角点的数组。\r\n\t */\r\n\tgetCorners(corners: Vector3[]): void {\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._right, corners[FrustumCorner.nearBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._right, corners[FrustumCorner.nearTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._top, this._left, corners[FrustumCorner.nearTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._near, this._bottom, this._left, corners[FrustumCorner.nearBottomLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._right, corners[FrustumCorner.FarBottomRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._right, corners[FrustumCorner.FarTopRight]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._top, this._left, corners[FrustumCorner.FarTopLeft]);\r\n\t\tBoundFrustum.get3PlaneInterPoint(this._far, this._bottom, this._left, corners[FrustumCorner.FarBottomLeft]);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines the relationship between the frustum and a point.\r\n\t * @param point The point to test.\r\n\t * @returns The relationship between the point and the frustum:\r\n\t * - 1: The point is inside the frustum.\r\n\t * - 2: The point intersects the frustum.\r\n\t * - 0: The point is outside and does not intersect the frustum.\r\n\t * @zh 确定截锥体与点的关系。\r\n\t * @param point  要测试的点。\r\n\t * @returns 点与截锥体之间的关系：\r\n\t * - 1: 点在截锥体内。\r\n\t * - 2: 点与截锥体相交。\r\n\t * - 0: 点在截锥体外且不相交。\r\n\t */\r\n\tcontainsPoint(point: Vector3): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._near, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._far, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._left, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._right, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._top, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndPoint(this._bottom, point);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines whether this frustum intersects with a bounding box.\r\n\t * @param box The bounding box to test against.\r\n\t * @returns `true` if they intersect; otherwise, `false`.\r\n\t * @zh 判断这个截锥体是否与包围盒相交。\r\n\t * @param box 要测试的包围盒。\r\n\t * @returns 如果相交返回 `true`；否则返回 `false`。\r\n\t */\r\n\tintersects(box: BoundBox | Bounds): boolean {\r\n\t\tvar min: Vector3 = box.min;\r\n\t\tvar max: Vector3 = box.max;\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minY: number = min.y;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxY: number = max.y;\r\n\t\tvar maxZ: number = max.z;\r\n\r\n\t\tvar nearNormal: Vector3 = this._near.normal;\r\n\t\tif (this._near.distance + (nearNormal.x * (nearNormal.x < 0 ? minX : maxX)) + (nearNormal.y * (nearNormal.y < 0 ? minY : maxY)) + (nearNormal.z * (nearNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar leftNormal: Vector3 = this._left.normal;\r\n\t\tif (this._left.distance + (leftNormal.x * (leftNormal.x < 0 ? minX : maxX)) + (leftNormal.y * (leftNormal.y < 0 ? minY : maxY)) + (leftNormal.z * (leftNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false\r\n\r\n\t\tvar rightNormal: Vector3 = this._right.normal;\r\n\t\tif (this._right.distance + (rightNormal.x * (rightNormal.x < 0 ? minX : maxX)) + (rightNormal.y * (rightNormal.y < 0 ? minY : maxY)) + (rightNormal.z * (rightNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar bottomNormal: Vector3 = this._bottom.normal;\r\n\t\tif (this._bottom.distance + (bottomNormal.x * (bottomNormal.x < 0 ? minX : maxX)) + (bottomNormal.y * (bottomNormal.y < 0 ? minY : maxY)) + (bottomNormal.z * (bottomNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\tvar topNormal: Vector3 = this._top.normal;\r\n\t\tif (this._top.distance + (topNormal.x * (topNormal.x < 0 ? minX : maxX)) + (topNormal.y * (topNormal.y < 0 ? minY : maxY)) + (topNormal.z * (topNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\t// Can ignore far plane when distant object culling is handled by another mechanism\r\n\t\tvar farNormal: Vector3 = this._far.normal;\r\n\t\tif (this._far.distance + (farNormal.x * (farNormal.x < 0 ? minX : maxX)) + (farNormal.y * (farNormal.y < 0 ? minY : maxY)) + (farNormal.z * (farNormal.z < 0 ? minZ : maxZ)) < 0)\r\n\t\t\treturn false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines the spatial relationship between this frustum and a bounding box.\r\n\t * @param box The bounding box to test.\r\n\t * @returns The spatial relationship: \r\n\t * - 1: The bounding box is inside the frustum.\r\n\t * - 2: The bounding box intersects the frustum.\r\n\t * - 0: The bounding box is outside and does not intersect the frustum.\r\n\t * @zh 确定这个截锥体和包围盒之间的空间关系。\r\n\t * @param box 要测试的包围盒。\r\n\t * @returns 关系类型：\r\n\t * - 1: 包围盒在截锥体内。\r\n\t * - 2: 包围盒与截锥体相交。\r\n\t * - 0: 包围盒在截锥体外且不相交。\r\n\t */\r\n\tcontainsBoundBox(box: BoundBox | Bounds): number {\r\n\t\tvar p: Vector3 = BoundFrustum._tempV30, n: Vector3 = BoundFrustum._tempV31;\r\n\t\tvar boxMin: Vector3 = box.min;\r\n\t\tvar boxMax: Vector3 = box.max;\r\n\t\tvar result: number = ContainmentType.Contains;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tvar plane: Plane = this.getPlane(i);\r\n\t\t\tvar planeNor: Vector3 = plane.normal;\r\n\r\n\t\t\tif (planeNor.x >= 0) {\r\n\t\t\t\tp.x = boxMax.x;\r\n\t\t\t\tn.x = boxMin.x;\r\n\t\t\t} else {\r\n\t\t\t\tp.x = boxMin.x;\r\n\t\t\t\tn.x = boxMax.x;\r\n\t\t\t}\r\n\t\t\tif (planeNor.y >= 0) {\r\n\t\t\t\tp.y = boxMax.y;\r\n\t\t\t\tn.y = boxMin.y;\r\n\t\t\t} else {\r\n\t\t\t\tp.y = boxMin.y;\r\n\t\t\t\tn.y = boxMax.y;\r\n\t\t\t}\r\n\t\t\tif (planeNor.z >= 0) {\r\n\t\t\t\tp.z = boxMax.z;\r\n\t\t\t\tn.z = boxMin.z;\r\n\t\t\t} else {\r\n\t\t\t\tp.z = boxMin.z;\r\n\t\t\t\tn.z = boxMax.z;\r\n\t\t\t}\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t\t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n\t\t\t\tresult = ContainmentType.Intersects;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines the spatial relationship between this frustum and a bounding sphere.\r\n\t * @param sphere The bounding sphere to test.\r\n\t * @returns The relationship type: \r\n\t * - 1: The sphere is inside the frustum.\r\n\t * - 2: The sphere intersects the frustum.\r\n\t * - 0: The sphere is outside and does not intersect the frustum.\r\n\t * @zh 确定这个截锥体和包围球之间的空间关系。\r\n\t * @param sphere 要测试的包围球。\r\n\t * @returns 关系类型：\r\n\t * - 1: 包围球在截锥体内。\r\n\t * - 2: 包围球与截锥体相交。\r\n\t * - 0: 包围球在截锥体外且不相交。\r\n\t */\r\n\tcontainsBoundSphere(sphere: BoundSphere): number {\r\n\t\tvar result: number = Plane.PlaneIntersectionType_Front;\r\n\t\tvar planeResult: number = Plane.PlaneIntersectionType_Front;\r\n\t\tfor (var i: number = 0; i < 6; i++) {\r\n\t\t\tswitch (i) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._near, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._far, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._left, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._right, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._top, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tplaneResult = CollisionUtils.intersectsPlaneAndSphere(this._bottom, sphere);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (planeResult) {\r\n\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Back:\r\n\t\t\t\t\treturn ContainmentType.Disjoint;\r\n\t\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\t\tresult = Plane.PlaneIntersectionType_Intersecting;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (result) {\r\n\r\n\t\t\tcase Plane.PlaneIntersectionType_Intersecting:\r\n\t\t\t\treturn ContainmentType.Intersects;\r\n\t\t\tdefault:\r\n\t\t\t\treturn ContainmentType.Contains;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones this frustum into another object.\r\n\t * @param dest The destination BoundFrustum to copy the values into.\r\n\t * @zh 克隆这个截锥体到另一个对象。\r\n\t * @param dest 目标对象，用以复制值。\r\n\t */\r\n\tcloneTo(dest: BoundFrustum) {\r\n\t\tdest.matrix = this.matrix;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a clone of this frustum.\r\n\t * @returns A new BoundFrustum that is a clone of this one.\r\n\t * @zh 创建这个截锥体的克隆。\r\n\t * @returns 一个克隆自当前截锥体的新的 BoundFrustum。\r\n\t */\r\n\tclone(): BoundFrustum {\r\n\t\tlet dest = new BoundFrustum(new Matrix4x4);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { VolumeManager } from \"./VolumeManager\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * @en Enum representing the types of intersection between volumes.\r\n * @zh 表示体积之间相交类型的枚举。\r\n */\r\nexport enum volumeIntersectType {\r\n    /**\r\n     * @en One volume contains the other.\r\n     * @zh 一个体积包含另一个体积。\r\n     */\r\n    contain,\r\n    /**\r\n     * @en Volumes intersect but do not fully contain each other.\r\n     * @zh 体积相交但不完全包含彼此。\r\n     */\r\n    intersect,\r\n    /**\r\n     * @en Volumes are disjoint (do not intersect).\r\n     * @zh 体积不相交（互不相交）。\r\n     */\r\n    Disjoint\r\n}\r\n\r\n/**\r\n * @en Represents the intersection properties between volume.\r\n * @zh 表示物体的相交属性。\r\n */\r\nexport class volumeIntersectInfo {\r\n    /**\r\n     * @en Intersection Type\r\n     * @zh 相交类型 \r\n     */\r\n    type: volumeIntersectType;\r\n    /**\r\n     * @en Intersection ratio\r\n     * @zh 相交比例\r\n     */\r\n    intersectRate: number;\r\n}\r\n\r\n/**\r\n * @en Represents a volume component in the scene.\r\n * @zh 表示场景中的体积组件。\r\n */\r\nexport class Volume extends Component {\r\n    /**@internal */\r\n    protected _primitiveBounds: Bounds;\r\n    /** @internal @protected 包围盒 */\r\n    protected _bounds: Bounds;\r\n    /**@internal @protected cache number of around Volume */\r\n    protected _aroundVolumeCacheNum: number = 0;\r\n    /** @internal @protected around Volume */\r\n    protected _aroundVolume: Volume[];\r\n    /** @internal @protected volume manager */\r\n    protected _volumeManager: VolumeManager;\r\n    /** @internal @protected volume intersect Comonent */\r\n    protected _type: number;\r\n    /** @internal @protected 重要性 */\r\n    protected _importance: number;\r\n\r\n    /**\r\n     * @en constractor of Volume \r\n     * @zh 体积组件的构造函数。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._bounds = new Bounds();\r\n        this._primitiveBounds = new Bounds();\r\n        this._importance = 0;\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n     * @en The volume type.\r\n     * @zh 体积类型。\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The bounds of the volume.\r\n     * @zh 体积的边界。\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @en The maximum point of the volume component's own bounding box.\r\n     * @zh 体积组件自身包围盒的最大点。\r\n     */\r\n    get boundsMax(): Vector3 {\r\n        return this._primitiveBounds.getMax();\r\n    }\r\n\r\n    set boundsMax(value: Vector3) {\r\n        this._primitiveBounds.setMax(value);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * @en The minimum point of the volume component's own bounding box.\r\n     * @zh 体积组件自身包围盒的最小点。\r\n     */\r\n    get boundsMin(): Vector3 {\r\n        return this._primitiveBounds.getMin();\r\n    }\r\n\r\n    set boundsMin(value: Vector3) {\r\n        this._primitiveBounds.setMin(value);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * @en The probe position of the volume.\r\n     * @zh 体积的探针位置。\r\n     */\r\n    get probePosition(): Vector3 {\r\n        return (this.owner as Sprite3D).transform.position;\r\n    }\r\n\r\n    /**\r\n     * @en The importance value of the volume probe.\r\n     * @zh 体积探针的重要度。\r\n     */\r\n    get importance() {\r\n        return this._importance;\r\n    }\r\n\r\n    set importance(value: number) {\r\n        this._importance = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onEnable(): void {\r\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\r\n        this._volumeManager = ((this.owner as Sprite3D).scene as Scene3D)._volumeManager;\r\n        this._volumeManager.add(this);\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onDisable(): void {\r\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._VolumeChange);\r\n        this._volumeManager.remove(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Called when a render node enters the volume.\r\n     * @param renderNode The BaseRender node entering the volume.\r\n     * @zh 当一个渲染节点进入体积时调用。\r\n     * @param renderNode 进入体积的BaseRender节点。\r\n     */\r\n    _addRenderNode?(renderNode: BaseRender): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Called when a render node is removed from the volume.\r\n     * @param renderNode The BaseRender node being removed from the volume.\r\n     * @zh 当一个渲染节点从体积中移除时调用。\r\n     * @param renderNode 从体积中移除的BaseRender节点。\r\n     */\r\n    _removeRenderNode?(renderNode: BaseRender): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Called when a render node moves within the volume.\r\n     * @param renderNode The BaseRender node moving within the volume.\r\n     * @zh 当一个渲染节点在体积中移动时调用。\r\n     * @param renderNode 在体积中移动的BaseRender节点。\r\n     */\r\n    _motionInVolume?(renderNode: BaseRender): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Handles volume changes.\r\n     * @zh 处理体积变化。\r\n     */\r\n    _VolumeChange() {\r\n        this._volumeManager._needUpdateAllRender = true;\r\n        let reManager = this._volumeManager._regVolumeManager[this.type];\r\n        if (reManager) {\r\n            reManager._needUpdateAllRender = true;\r\n        }\r\n        this._reCaculateBoundBox();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _reCaculateBoundBox() {\r\n        this.owner && this._primitiveBounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Volume): void {\r\n    }\r\n\r\n}","/**\r\n * @en Environment light mode.\r\n * @zh 环境光模式。\r\n */\r\nexport enum AmbientMode {\r\n    /** \r\n     * @en Fixed color\r\n     * @zh 固定颜色。\r\n     */\r\n    SolidColor,\r\n    /** \r\n     * @en Spherical harmonic illumination generates spherical harmonic data through the sky box.\r\n     * @zh 球谐光照, 通过天空盒生成的球谐数据。\r\n     */\r\n    SphericalHarmonics\r\n}\r\n","import { Sprite3D } from \"../../../core/Sprite3D\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { TextureCube } from \"../../../../resource/TextureCube\";\r\nimport { Volume } from \"../Volume\";\r\nimport { VolumeManager } from \"../VolumeManager\";\r\nimport { ILaya3D } from \"../../../../../ILaya3D\";\r\nimport { AmbientMode } from \"../../../core/scene/AmbientMode\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { IReflectionProbeData } from \"../../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\n\r\n/**\r\n * @en Reflective probe mode\r\n * @zh 反射探针模式\r\n */\r\nexport enum ReflectionProbeMode {\r\n\t/**\r\n\t * @en Baking mode. Currently, only Back baking is supported.\r\n\t * @zh 烘培模式。现在仅仅支持Back烘培\r\n\t */\r\n\toff = 0,\r\n\t/**\r\n\t * @en Real time simple sampling mode, not supported yet.\r\n\t * @zh 实时简单采样模式 还未支持*/\r\n\tsimple = 1,\r\n}\r\n/**\r\n * @miner\r\n * @en used to implement reflection probe components\r\n * @zh 用于实现反射探针组件\r\n */\r\nexport class ReflectionProbe extends Volume {\r\n\t/**\r\n\t * @en Number of reflection probes\r\n\t * @zh 反射探针数量\r\n\t */\r\n\tstatic reflectionCount: number = 0;\r\n\t/**\r\n\t * @en Get a globally unique ID\r\n\t * @zh 获取一个全局唯一ID\r\n\t */\r\n\tstatic getID(): number {\r\n\t\treturn ReflectionProbe.reflectionCount++;\r\n\t}\r\n\r\n\t//因为纹理数量问题 暂不支持探针混合\r\n\t/**\r\n\t * @internal\r\n\t * @en Temporary Vector3 for calculations\r\n\t * @zh 用于计算的临时 Vector3\r\n\t */\r\n\tstatic TEMPVECTOR3: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en Default HDR decode values\r\n\t * @zh 默认的 HDR 解码数据\r\n\t */\r\n\tstatic defaultTextureHDRDecodeValues: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\r\n\r\n\t/**@internal @protected 探针重要度 */\r\n\tprotected _importance: number;\r\n\t/**漫反射顔色 */\r\n\tprivate _ambientColor: Color = new Color();\r\n\t/**漫反射SH */\r\n\tprivate _ambientSH: Float32Array;\r\n\t/**\r\n\t * @internal \r\n\t * @en Whether the probe is a scene probe.\r\n\t * @zh 是否是场景探针 \r\n\t */\r\n\t_isScene: boolean = false;\r\n\t/**@internal */\r\n\t_reflectionProbeID: number;\r\n\t/**@internal */\r\n\t_dataModule: IReflectionProbeData;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._importance = 0;\r\n\t\tthis._type = VolumeManager.ReflectionProbeVolumeType;\r\n\t\tthis._dataModule = Laya3DRender.Render3DModuleDataFactory.createReflectionProbe();\r\n\t\tthis._dataModule.bound = this._bounds;\r\n\t\tthis.ambientIntensity = 1.0;\r\n\t\tthis.reflectionIntensity = 1.0;\r\n\t\tthis.boundsMax = new Vector3(5, 5, 5);\r\n\t\tthis.boundsMin = new Vector3(-5, -5, -5);\r\n\t\tthis._reflectionProbeID = ReflectionProbe.getID();\r\n\t\tthis.ambientMode = AmbientMode.SolidColor;\r\n\r\n\t\tthis._dataModule.updateMark = -1;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Whether to enable orthogonal reflection\r\n\t * @zh 是否开启正交反射\r\n\t */\r\n\tget boxProjection(): boolean {\r\n\t\treturn this._dataModule.boxProjection;\r\n\t}\r\n\r\n\tset boxProjection(value: boolean) {\r\n\t\tif (value != this._dataModule.boxProjection) {\r\n\t\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\t}\r\n\t\tthis._dataModule.boxProjection = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The importance of the reflection probe\r\n\t * @zh 反射探针的重要度\r\n\t */\r\n\tget importance(): number {\r\n\t\treturn this._importance;\r\n\t}\r\n\r\n\tset importance(value: number) {\r\n\t\tthis._importance = value\r\n\t}\r\n\r\n\t/**\r\n\t * @en The intensity of ambient diffuse reflection\r\n\t * @zh 环境漫反射的强度\r\n\t */\r\n\tget ambientIntensity(): number {\r\n\t\treturn this._dataModule.ambientIntensity;\r\n\t}\r\n\r\n\tset ambientIntensity(value: number) {\r\n\t\tif (value == this._dataModule.ambientIntensity) return;\r\n\t\tthis._dataModule.ambientIntensity = value;\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The intensity of the reflection probe\r\n\t * @zh 反射探针的强度\r\n\t */\r\n\tget reflectionIntensity(): number {\r\n\t\treturn this._dataModule.reflectionIntensity;\r\n\t}\r\n\r\n\tset reflectionIntensity(value: number) {\r\n\t\tif (value == this._dataModule.reflectionIntensity) return;\r\n\t\tvalue = Math.max(value, 0.0);\r\n\t\tthis._dataModule.reflectionIntensity = value\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t_reCaculateBoundBox() {\r\n\t\tsuper._reCaculateBoundBox();\r\n\t\tthis.owner && this._dataModule.setProbePosition((this.owner as Sprite3D).transform.position);\r\n\t\tthis.bounds.cloneTo(this._dataModule.bound);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The bounding box of the reflection probe\r\n\t * @zh 反射探针的包围盒\r\n\t */\r\n\tget bounds(): Bounds {\r\n\t\treturn this._bounds as Bounds;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum point of the bounding box\r\n\t * @zh 包围盒的最大点\r\n\t */\r\n\tget boundsMax(): Vector3 {\r\n\t\treturn this._primitiveBounds.getMax();\r\n\t}\r\n\r\n\tset boundsMax(value: Vector3) {\r\n\t\tsuper.boundsMax = value;\r\n\t\tif (this.boxProjection)\r\n\t\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en The minimum point of the bounding box\r\n\t * @zh 包围盒的最小点\r\n\t */\r\n\tget boundsMin(): Vector3 {\r\n\t\treturn this._primitiveBounds.getMin();\r\n\t}\r\n\r\n\tset boundsMin(value: Vector3) {\r\n\t\tsuper.boundsMin = value;\r\n\t\tif (this.boxProjection)\r\n\t\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en The position of the probe\r\n\t * @zh 探针的位置\r\n\t */\r\n\tget probePosition(): Vector3 {\r\n\t\treturn (this.owner as Sprite3D).transform.position;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The ambient diffuse color\r\n\t * @zh 环境漫反射颜色\r\n\t */\r\n\tpublic get ambientColor(): Color {\r\n\t\treturn this._ambientColor;\r\n\t}\r\n\tpublic set ambientColor(value: Color) {\r\n\t\t// if (!value || value.equal(this._ambientColor))\r\n\t\t// \treturn\r\n\t\tvalue.cloneTo(this._ambientColor);\r\n\t\tthis._dataModule.setAmbientColor(this._ambientColor);\r\n\t\tif (this.ambientMode == AmbientMode.SolidColor)\r\n\t\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The spherical harmonics coefficients for ambient color\r\n\t * @zh 环境颜色的球谐系数\r\n\t */\r\n\tpublic get ambientSH(): Float32Array {\r\n\t\treturn this._ambientSH;\r\n\t}\r\n\r\n\tpublic set ambientSH(value: Float32Array) {\r\n\t\tif (this.ambientMode == AmbientMode.SphericalHarmonics)\r\n\t\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t\tthis._ambientSH = value;\r\n\t\tthis._dataModule.setAmbientSH(this._ambientSH);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get or set the ambient light mode\r\n\t * If the value is AmbientMode.SolidColor, ambientColor is generally used as the ambient light source\r\n\t * If the value is AmbientMode.SphericalHarmonics, ambientSphericalHarmonics is generally used as the ambient light source\r\n\t * @zh 获取或设置环境光模式\r\n\t * 如果值为AmbientMode.SolidColor，一般使用ambientColor作为环境光源\r\n\t * 如果值为AmbientMode.SphericalHarmonics，一般使用ambientSphericalHarmonics作为环境光源\r\n\t */\r\n\tget ambientMode(): AmbientMode {\r\n\t\treturn this._dataModule.ambientMode;\r\n\t}\r\n\r\n\tset ambientMode(value: AmbientMode) {\r\n\t\tif (value == this.ambientMode) return;\r\n\t\tthis._dataModule.ambientMode = value;\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\r\n\t}\r\n\r\n\tprivate _iblTex: TextureCube;\r\n\t/**\r\n\t * @en The Image-Based Lighting (IBL) texture\r\n\t * @zh 基于图像的照明(IBL)纹理\r\n\t */\r\n\tpublic get iblTex(): TextureCube {\r\n\t\treturn this._iblTex;\r\n\t}\r\n\r\n\tpublic set iblTex(value: TextureCube) {\r\n\t\tif (this._iblTex == value) return;\r\n\t\tif (this._iblTex) this._iblTex._removeReference();\r\n\t\tthis._iblTex = value;\r\n\t\tthis._dataModule.iblTex = null;\r\n\t\tif (value) {\r\n\t\t\tvalue._addReference();\r\n\t\t\tthis._dataModule.iblTex = value._texture;\r\n\t\t}\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the Image-Based Lighting texture is compressed using RGBD format\r\n\t * @zh 基于图像的照明纹理是否使用RGBD格式压缩\r\n\t */\r\n\tpublic get iblTexRGBD(): boolean {\r\n\t\treturn this._dataModule.iblTexRGBD;\r\n\t}\r\n\r\n\tpublic set iblTexRGBD(value: boolean) {\r\n\t\tif (value == this._dataModule.iblTexRGBD)\r\n\t\t\treturn;\r\n\t\tthis._dataModule.iblTexRGBD = value;\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @protected\r\n\t * @internal\r\n\t */\r\n\tprotected _onEnable(): void {\r\n\t\tsuper._onEnable();\r\n\t\tthis._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @internal\r\n\t * @protected\r\n\t */\r\n\tprotected _onDisable(): void {\r\n\t\tsuper._onDisable();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @internal\r\n\t * @protected\r\n\t */\r\n\tprotected _onDestroy() {\r\n\t\tthis.iblTex = null;\r\n\t\tthis._dataModule.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: ReflectionProbe): void {\r\n\t\t//TODO\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\"\r\nimport { Event } from \"../../../events/Event\"\r\nimport { MeshSprite3DShaderDeclaration } from \"../../../d3/core/MeshSprite3DShaderDeclaration\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Volume } from \"../../component/Volume/Volume\";\r\nimport { ReflectionProbe, ReflectionProbeMode } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { Sprite3DRenderDeclaration } from \"./Sprite3DRenderDeclaration\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { BatchRender } from \"../../component/Volume/BatchVolume/BatchRender\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VolumetricGI } from \"../../component/Volume/VolumetricGI/VolumetricGI\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { ShaderData } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { IBaseRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { IRenderContext3D, IRenderElement3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { Transform3D } from \"../Transform3D\";\r\n\r\nexport enum RenderBitFlag {\r\n    RenderBitFlag_CullFlag = 0,\r\n    RenderBitFlag_Batch = 1,\r\n    RenderBitFlag_Editor = 2,\r\n    RenderBitFlag_InstanceBatch = 3,\r\n    RenderBitFlag_VertexMergeBatch = 4,\r\n\r\n}\r\n\r\nexport enum IrradianceMode {\r\n    LightMap,\r\n    VolumetricGI,\r\n    Common\r\n}\r\n\r\n/**\r\n * @en The `BaseRender` class is the parent class for renderers and is an abstract class that should not be instantiated.\r\n * @zh `BaseRender` 类是渲染器的父类，是一个抽象类，不允许实例化。\r\n */\r\nexport class BaseRender extends Component {\r\n\r\n    /** @internal */\r\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\r\n\r\n    /**@internal */\r\n    private static _uniqueIDCounter: number = 0;\r\n\r\n    /**@internal */\r\n    static _tempBoundBoxCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n\r\n    /**@internal */\r\n    static _defaultLightmapScaleOffset: Vector4 = new Vector4(1.0, 1.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * @en Initialize the BaseRender class.\r\n     * @zh 初始化 BaseRender 类。\r\n     */\r\n    static __init__() {\r\n        BaseRender.shaderValueInit();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Get mesh definitions and store them in the output array.\r\n     * @param mesh The input mesh.\r\n     * @param out The output array to store shader definitions.\r\n     * @zh 获取网格定义并存储在输出数组中。\r\n     * @param mesh 输入网格。\r\n     * @param out 输出数组用于存储着色器定义。\r\n     */\r\n    static getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\r\n        out.length = 0;\r\n        var define: number;\r\n        for (var i: number = 0, n: number = mesh._subMeshes.length; i < n; i++) {\r\n            var subMesh = mesh.getSubMesh(i);\r\n            var vertexElements: any[] = subMesh._vertexBuffer.vertexDeclaration._vertexElements;\r\n            for (var j: number = 0, m: number = vertexElements.length; j < m; j++) {\r\n                var vertexElement = vertexElements[j];\r\n                var name: number = vertexElement._elementUsage;\r\n                switch (name) {\r\n                    case VertexMesh.MESH_COLOR0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                        break\r\n                    case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                        break;\r\n                    case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                        break;\r\n                    case VertexMesh.MESH_TANGENT0:\r\n                        out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return define;\r\n    }\r\n\r\n    /**\r\n     * @en Change vertex shader definitions based on mesh changes.\r\n     * @param oldMesh The old mesh.\r\n     * @param mesh The new mesh.\r\n     * @param defineDatas The shader data containing definitions.\r\n     * @zh 根据网格变化更改顶点着色器宏定义。\r\n     * @param oldMesh 旧的网格。\r\n     * @param mesh 新的网格。\r\n     * @param defineDatas 包含着色器定义的着色器数据。  \r\n     */\r\n    static changeVertexDefine(oldMesh: Mesh, mesh: Mesh, defineDatas: ShaderData) {\r\n\r\n        var lastValue: Mesh = oldMesh;\r\n        if (lastValue) {\r\n            BaseRender.getMeshDefine(lastValue, BaseRender._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.removeDefine(BaseRender._meshVerticeDefine[i]);\r\n        }\r\n        if (mesh) {\r\n            BaseRender.getMeshDefine(mesh, BaseRender._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = BaseRender._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(BaseRender._meshVerticeDefine[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Macro definition initialization\r\n     * @zh 宏定义初始化\r\n     */\r\n    static shaderValueInit() {\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL = Shader3D.getDefineByName(\"GI_LEGACYIBL\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL = Shader3D.getDefineByName(\"GI_IBL\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD = Shader3D.getDefineByName(\"IBL_RGBD\");\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION = Shader3D.getDefineByName(\"SPECCUBE_BOX_PROJECTION\");\r\n\r\n        Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI = Shader3D.getDefineByName(\"VOLUMETRICGI\");\r\n    }\r\n\r\n    /**@internal renderData*/\r\n    _baseRenderNode: IBaseRenderNode;\r\n\r\n    /** @internal */\r\n    _sharedMaterials: Material[] = [];\r\n\r\n    /** @internal */\r\n    _scene: any;//Scene3D\r\n\r\n    /** @internal */\r\n    _sceneUpdateMark: number = -1;\r\n\r\n    /** @internal 属于相机的标记*/\r\n    _updateMark: number = -1;\r\n\r\n    /** @internal 是否需要反射探针*/\r\n    _probReflection: ReflectionProbe;\r\n\r\n    /** @internal 材质是否支持反射探针*/\r\n    _surportReflectionProbe: boolean = false;\r\n\r\n    /** @internal */\r\n    _lightProb: VolumetricGI;\r\n\r\n    /**@internal */\r\n    _surportVolumetricGI: boolean = false;\r\n\r\n    /**@internal motion list index，not motion is -1*/\r\n    _motionIndexList: number = -1;\r\n\r\n    /**@internal TODO*/\r\n    _LOD: number = -1;\r\n\r\n    /**@internal TODO*/\r\n    _batchRender: BatchRender;\r\n\r\n    /**@interface */\r\n    _receiveShadow: boolean;\r\n\r\n    /** @internal */\r\n    protected _bounds: Bounds;\r\n\r\n    /**@internal */\r\n    protected _transform: Transform3D;\r\n\r\n    /**@internal 如果这个值不是0,说明有一些条件使他不能加入渲染队列，例如如果是1，证明此节点被lod淘汰*/\r\n    private _volume: Volume;\r\n\r\n    /**@internal */\r\n    protected _asynNative: boolean;\r\n\r\n    /** @internal */\r\n    private _materialsInstance: boolean[];\r\n\r\n    /**@internal */\r\n    private _renderid: number;\r\n\r\n    /**@internal */\r\n    private _lightmapScaleOffset: Vector4 = new Vector4();\r\n\r\n    _renderElements: RenderElement[] = [];\r\n\r\n    /**\r\n     * @en Whether to enable the renderer.\r\n     * @zh 是否启用。\r\n     */\r\n    get enabled(): boolean {\r\n        return super.enabled;\r\n    }\r\n    set enabled(value: boolean) {\r\n        super.enabled = value;\r\n        this._baseRenderNode.enable = value;\r\n    }\r\n\r\n    /**\r\n     * @en The sorting fudge value.\r\n     * @zh 排序矫正值。\r\n     */\r\n    get sortingFudge() {\r\n        return this._baseRenderNode.sortingFudge;\r\n    }\r\n    set sortingFudge(value: number) {\r\n        this._baseRenderNode.sortingFudge = value;\r\n    }\r\n\r\n    /**\r\n     * @en The render bit flag of the render node.\r\n     * @zh 渲染节点的渲染禁用位。\r\n     */\r\n    get renderbitFlag() {\r\n        return this._baseRenderNode.renderbitFlag;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the bounds have changed.\r\n     * @zh 包围盒是否更新。\r\n     */\r\n    get boundsChange(): boolean {\r\n        return this._baseRenderNode.boundsChange;\r\n    }\r\n    set boundsChange(value: boolean) {\r\n        this._baseRenderNode.boundsChange = value\r\n    }\r\n\r\n    /**\r\n     * 渲染数据\r\n     */\r\n    /**\r\n     * @en The render node.\r\n     * @zh 渲染节点。\r\n     */\r\n    get renderNode(): IBaseRenderNode {\r\n        return this._baseRenderNode;\r\n    }\r\n\r\n    /**\r\n     * @en The distance used for sorting.\r\n     * @zh 排序距离。\r\n     */\r\n    get distanceForSort() {\r\n        return this._baseRenderNode.distanceForSort;\r\n    }\r\n    set distanceForSort(value: number) {\r\n        this._baseRenderNode.distanceForSort = value;\r\n    }\r\n\r\n    /**\r\n     * @en The Geometry Bounds.\r\n     * If this bounds is set, the render bounding box will be updated based on geometryBounds and transform, and the native layer will be sunk.\r\n     * @zh 几何包围盒，\r\n     * 如果设置了此包围盒，渲染包围盒会根据 geometryBounds 和变换来更新，并且原生层会下沉。\r\n     */\r\n    get geometryBounds(): Bounds {\r\n        return this._baseRenderNode.baseGeometryBounds;\r\n    }\r\n    set geometryBounds(value: Bounds) {\r\n        this._baseRenderNode.baseGeometryBounds = value;\r\n    }\r\n\r\n    /**\r\n     * @en The lightmap index.\r\n     * @zh 光照贴图的索引。\r\n     */\r\n    get lightmapIndex(): number {\r\n        return this._baseRenderNode.lightmapIndex;\r\n    }\r\n\r\n    set lightmapIndex(value: number) {\r\n        this._baseRenderNode.lightmapIndex = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Sets the lightmap index.\r\n     * @param value The new lightmap index.\r\n     * @zh 设置光照贴图的索引。\r\n     * @param value 新的光照贴图索引。\r\n     */\r\n    setLightmapIndex(value: number) {\r\n        let scene = <Scene3D>this._scene;\r\n        if (value != -1 && (scene.lightmaps[value])) {\r\n            this._baseRenderNode.lightmap = scene.lightmaps[value]._dataModule;\r\n        }\r\n        else {\r\n            this._baseRenderNode.lightmap = null;\r\n        }\r\n        //this._scene && this._applyLightMapParams(); todo miner\r\n        this._getIrradientMode();\r\n    }\r\n\r\n    /**\r\n     * @en The irradient mode.\r\n     * @zh 间接光照功能。\r\n     */\r\n    get irradientMode() {\r\n        return this._baseRenderNode.irradientMode;\r\n    }\r\n\r\n    /**\r\n     * @en The lightmap scale and offset.\r\n     * @zh 光照贴图的缩放和偏移。\r\n     */\r\n    get lightmapScaleOffset(): Vector4 {\r\n        return this._lightmapScaleOffset;\r\n    }\r\n\r\n    set lightmapScaleOffset(value: Vector4) {\r\n        value.cloneTo(this._lightmapScaleOffset);\r\n        this._baseRenderNode.setLightmapScaleOffset(this._lightmapScaleOffset);\r\n    }\r\n\r\n    /**\r\n     * @en The first material.\r\n     * @zh 第一个材质。\r\n     */\r\n    get sharedMaterial(): Material {\r\n        return this._sharedMaterials[0];\r\n    }\r\n\r\n    set sharedMaterial(value: Material) {\r\n        var lastValue = this._sharedMaterials[0];\r\n        this._changeMaterialReference(lastValue, value);\r\n        this._sharedMaterials[0] = value;\r\n\r\n        let element = this._renderElements[0];\r\n        if (element && element.material != value) {\r\n            this._materialsInstance[0] = false;\r\n            element.material = value;\r\n        }\r\n\r\n        this._isSupportRenderFeature();\r\n    }\r\n\r\n    /**\r\n     * @en All shared materials.\r\n     * @zh 所有渲染材质。\r\n     */\r\n    get sharedMaterials(): Material[] {\r\n        return this._sharedMaterials.slice();\r\n    }\r\n\r\n    set sharedMaterials(value: Material[]) {\r\n        var materialsInstance: boolean[] = this._materialsInstance;\r\n        var sharedMats: Material[] = this._sharedMaterials;\r\n\r\n        if (value) {\r\n            let count = value.length;\r\n            for (let i = 0; i < count; i++) {\r\n                let mat = value[i];\r\n                let lastMat = sharedMats[i];\r\n                this._changeMaterialReference(lastMat, mat);\r\n                sharedMats[i] = mat;\r\n\r\n                let element = this._renderElements[i];\r\n                if (element && element.material != mat) {\r\n                    materialsInstance[i] = false;\r\n                    element.material = mat;\r\n                }\r\n            }\r\n\r\n            for (let i = count, n = sharedMats.length; i < n; i++) {\r\n                let mat = sharedMats[i];\r\n                mat && mat._removeReference();\r\n\r\n                let element = this._renderElements[i];\r\n                element && (element.material = null);\r\n            }\r\n\r\n            materialsInstance.length = count;\r\n            sharedMats.length = count;\r\n        }\r\n        else {\r\n            for (let i = 0, n = sharedMats.length; i < n; i++) {\r\n                let lastMat = sharedMats[i];\r\n                lastMat && lastMat._removeReference();\r\n            }\r\n\r\n            this._sharedMaterials = [];\r\n        }\r\n        this._isSupportRenderFeature();\r\n    }\r\n\r\n    /**\r\n     * @en The bounds. Read-only, do not modify its value.\r\n     * @zh 包围盒。只读，不允许修改其值。\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._baseRenderNode.bounds;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the object receives shadows.\r\n     * @zh 是否接收阴影属性。\r\n     */\r\n    get receiveShadow(): boolean {\r\n        return this._receiveShadow;\r\n    }\r\n\r\n    set receiveShadow(value: boolean) {\r\n        if (this._receiveShadow !== value) {\r\n            this._receiveShadow = value;\r\n            if (value)\r\n                this._baseRenderNode.shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n            else\r\n                this._baseRenderNode.shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW);\r\n        }\r\n        this._baseRenderNode.receiveShadow = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the object casts shadows.\r\n     * @zh 是否产生阴影。\r\n     */\r\n    get castShadow(): boolean {\r\n        return this._baseRenderNode.castShadow;\r\n    }\r\n\r\n    set castShadow(value: boolean) {\r\n        this._baseRenderNode.castShadow = value;\r\n    }\r\n\r\n    /**\r\n     * @en The reflection mode.\r\n     * @zh 反射模式。\r\n     */\r\n    get reflectionMode(): ReflectionProbeMode {\r\n        return this._baseRenderNode.reflectionMode;\r\n    }\r\n\r\n    set reflectionMode(value: ReflectionProbeMode) {\r\n        this._baseRenderNode.reflectionMode = value;\r\n    }\r\n\r\n    /**\r\n     * @en The volume light probe.\r\n     * @zh 体积光探针。\r\n     */\r\n    get volume(): Volume {\r\n        return this._volume;\r\n    }\r\n\r\n    set volume(value: Volume) {\r\n        if (!value) {//value = null,\r\n            if (this._volume) {\r\n                this._volume._removeRenderNode && this._volume._removeRenderNode(this);\r\n                this._volume = null;\r\n            }\r\n            return;\r\n        }\r\n        if (this._volume != value) {\r\n            value._addRenderNode && value._addRenderNode(this);\r\n            this._volume = value;\r\n            return;\r\n        } else {\r\n            value._motionInVolume && value._motionInVolume(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The reflection probe.\r\n     * @zh 反射探针。\r\n     */\r\n    get probReflection() {\r\n        return this._probReflection;\r\n    }\r\n\r\n    set probReflection(value: ReflectionProbe) {\r\n        if (this._probReflection == value)\r\n            return;\r\n        this._baseRenderNode.probeReflectionUpdateMark = -1;//initial update mask\r\n        this._probReflection = value;\r\n        this._baseRenderNode.probeReflection = value._dataModule;\r\n        if (this._baseRenderNode.reflectionMode == ReflectionProbeMode.off) {\r\n            this._baseRenderNode.shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n            this._baseRenderNode.shaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n            this._baseRenderNode.shaderData.setTexture(RenderableSprite3D.IBLTEX, TextureCube.blackTexture);\r\n            this._baseRenderNode.shaderData.setNumber(RenderableSprite3D.IBLROUGHNESSLEVEL, 0);\r\n        };\r\n        this._getIrradientMode();\r\n    }\r\n\r\n    /**\r\n     * @en The light probe.\r\n     * @zh 光照探针。\r\n     */\r\n    get lightProbe(): VolumetricGI {\r\n        return this._lightProb;\r\n    }\r\n\r\n    set lightProbe(volumetricGI: VolumetricGI) {\r\n        if (this._lightProb == volumetricGI) {\r\n            return;\r\n        }\r\n        this._baseRenderNode.lightProbUpdateMark = -1;\r\n        this._lightProb = volumetricGI;\r\n        this._baseRenderNode.volumetricGI = volumetricGI ? volumetricGI._dataModule : null;\r\n        this._getIrradientMode();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en consructor of BaseRender.\r\n     * @zh 构造函数，初始化BaseRender。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._baseRenderNode = this._createBaseRenderNode();\r\n        this._baseRenderNode.setCommonUniformMap(this._getcommonUniformMap());\r\n        this._baseRenderNode.shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n        //this._rendernode.owner = this;\r\n        this._renderid = ++BaseRender._uniqueIDCounter;\r\n        this._baseRenderNode.bounds = this._bounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\r\n        this._enabled = true;\r\n        this._baseRenderNode.enable = true;\r\n        this._materialsInstance = [];\r\n        this.lightmapIndex = -1;\r\n        this.receiveShadow = false;\r\n        this._baseRenderNode.sortingFudge = 0.0;\r\n        this.reflectionMode = ReflectionProbeMode.simple;\r\n        if (!!this._calculateBoundingBox) {\r\n            this._baseRenderNode.set_caculateBoundingBox(this, this._calculateBoundingBox);\r\n        }\r\n        if (!!this._renderUpdate) {\r\n            this._baseRenderNode.set_renderUpdatePreCall(this, this._renderUpdate);\r\n        }\r\n        this.runInEditor = true;\r\n        this._asynNative = true;\r\n        this.boundsChange = true;\r\n        this._baseRenderNode.renderbitFlag = 0;\r\n        this._baseRenderNode.staticMask = 1;\r\n\r\n        this.castShadow = false;\r\n        this._baseRenderNode.renderNodeType = 0;\r\n    }\r\n\r\n    /**\r\n     * @en The function called by the bounding box calculation for each frame.\r\n     * @zh 每一帧计算包围盒会调用的函数\r\n     */\r\n    _calculateBoundingBox?(): void;\r\n\r\n    /**\r\n     * @en Update the calling function of SpriteShaderData before rendering each frame.\r\n     * @param context3D The 3D rendering context.\r\n     * @zh 每一帧渲染前更新SpriteShaderData的调用函数。\r\n     * @param context3D 3D渲染上下文。\r\n     */\r\n    _renderUpdate?(context3D: IRenderContext3D): void;\r\n\r\n    /**\r\n     * set BaseRenderElement\r\n     * @param mesh \r\n     */\r\n    protected _setRenderElements() {\r\n        let arrayElement: IRenderElement3D[] = [];\r\n        this._renderElements.forEach(element => {\r\n            arrayElement.push(element._renderElementOBJ);\r\n        });\r\n        this._baseRenderNode.setRenderelements(arrayElement)\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * BaseRender motion\r\n     */\r\n    protected _onWorldMatNeedChange(flag: number): void {\r\n        this.boundsChange = true;\r\n        this._addReflectionProbeUpdate();\r\n        this._batchRender && this._batchRender._updateOneRender(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @returns \r\n     */\r\n    protected _getcommonUniformMap(): Array<string> {\r\n        return [\"Sprite3D\"];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @returns \r\n     */\r\n    protected _createBaseRenderNode(): IBaseRenderNode {\r\n        return Laya3DRender.Render3DModuleDataFactory.createBaseRenderNode();\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @param context \r\n     */\r\n    renderUpdate(context: RenderContext3D) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onAdded(): void {\r\n        this._transform = (this.owner as Sprite3D).transform;\r\n        (this.owner as Sprite3D)._isRenderNode++;\r\n        this.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Editor, this.owner._getBit(NodeFlags.HIDE_BY_EDITOR));\r\n        this._baseRenderNode.transform = this._transform;\r\n        this._changeLayer((this.owner as Sprite3D).layer);\r\n        this._changeStaticMask((this.owner as Sprite3D)._isStatic);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this.owner) {\r\n            (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\r\n            (this.owner as Sprite3D).on(Event.LAYERCHANGE, this, this._changeLayer);\r\n            (this.owner as Sprite3D).on(Event.staticMask, this, this._changeStaticMask);\r\n            this._changeLayer((this.owner as Sprite3D).layer);\r\n            this._changeStaticMask((this.owner as Sprite3D)._isStatic);\r\n        }\r\n        (<Scene3D>this.owner.scene)._addRenderObject(this);\r\n        this._setBelongScene(this.owner.scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDisable(): void {\r\n        if (this.owner) {\r\n            (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);//如果为合并BaseRender,owner可能为空\r\n            (this.owner as Sprite3D).off(Event.LAYERCHANGE, this, this._changeLayer);\r\n            (this.owner as Sprite3D).off(Event.staticMask, this, this._changeStaticMask);\r\n        }\r\n        let scene = <Scene3D>this.owner.scene;\r\n        scene._removeRenderObject(this);\r\n        this._setUnBelongScene();\r\n        this.volume = null;\r\n    }\r\n\r\n    /**\r\n     * override it\r\n     * @internal\r\n     */\r\n    protected _onDestroy() {\r\n        if (this.owner as Sprite3D)\r\n            (this.owner as Sprite3D)._isRenderNode--;\r\n        (this._motionIndexList !== -1) && (this._scene._sceneRenderManager.removeMotionObject(this));\r\n        (this._scene) && this._scene.sceneRenderableManager.removeRenderObject(this);\r\n        this._baseRenderNode.destroy();\r\n        var i: number = 0, n: number = 0;\r\n        for (i = 0, n = this._sharedMaterials.length; i < n; i++) {\r\n            let m = this._sharedMaterials[i];\r\n            m && !m.destroyed && m._removeReference();\r\n        }\r\n        this._sharedMaterials = null;\r\n        this._bounds = null;\r\n        this._lightmapScaleOffset = null;\r\n        this._scene = null;\r\n        this._transform = null;\r\n        this._batchRender = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 确定间接光模式\r\n     */\r\n    private _getIrradientMode() {\r\n        if (this.lightmapIndex >= 0) {\r\n            this._baseRenderNode.irradientMode = IrradianceMode.LightMap;\r\n        } else if (this.lightProbe) {\r\n            this._baseRenderNode.irradientMode = IrradianceMode.VolumetricGI;\r\n        } else {\r\n            this._baseRenderNode.irradientMode = IrradianceMode.Common;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param layer \r\n     */\r\n    private _changeLayer(layer: number) {\r\n        this._baseRenderNode.layer = layer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param staticmask \r\n     */\r\n    private _changeStaticMask(staticmask: number) {\r\n        this._baseRenderNode.staticMask = staticmask;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _changeMaterialReference(lastValue: Material, value: Material): void {\r\n        (lastValue) && (lastValue._removeReference());\r\n        value && value._addReference();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getInstanceMaterial(material: Material, index: number): Material {\r\n        var insMat: Material = material.clone();//深拷贝\r\n        insMat.name = insMat.name + \"(Instance)\";\r\n        this._materialsInstance[index] = true;\r\n        this._changeMaterialReference(this._sharedMaterials[index], insMat);\r\n        this._sharedMaterials[index] = insMat;\r\n        return insMat;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _isSupportRenderFeature() {\r\n        //surportReflectionProbe\r\n        let preReflection = this._surportReflectionProbe;\r\n        let prelightprob = this._surportVolumetricGI;\r\n        this._surportReflectionProbe = false;\r\n        this._surportVolumetricGI = false;\r\n        var sharedMats: Material[] = this._sharedMaterials;\r\n        for (var i: number = 0, n: number = sharedMats.length; i < n; i++) {\r\n            var mat: Material = sharedMats[i];\r\n            this._surportReflectionProbe ||= (this._surportReflectionProbe || (mat && mat._shader._supportReflectionProbe));//TODO：最后一个判断是否合理\r\n            this._surportVolumetricGI ||= (this._surportVolumetricGI || (mat && mat._shader._surportVolumetricGI));\r\n        }\r\n        if ((!preReflection && this._surportReflectionProbe) || (!prelightprob && this._surportVolumetricGI))//如果变成支持Reflection\r\n            this._addReflectionProbeUpdate();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Adds the renderer to the update reflection probe queue.\r\n     * @zh 渲染器添加到更新反射探针队列。\r\n     */\r\n    _addReflectionProbeUpdate() {\r\n        //TODO目前暂时不支持混合以及与天空盒模式，只支持simple和off\r\n        this._scene && this._scene._volumeManager.addMotionObject(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Sets the scene to which this object belongs.\r\n     * @zh 设置所属 Scene 调用此方法。\r\n     */\r\n    _setBelongScene(scene: any): void {\r\n        this._scene = scene;\r\n        this._onWorldMatNeedChange(1);\r\n        this._isSupportRenderFeature();\r\n        this._batchRender && this._batchRender._batchOneRender(this);\r\n        this.setLightmapIndex(this.lightmapIndex);\r\n        this._statAdd();\r\n    }\r\n\r\n    protected _statAdd() {\r\n        Stat.renderNode++;\r\n    }\r\n\r\n    protected _statRemove() {\r\n        Stat.renderNode--;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en This method is called when the object is removed from the Scene.\r\n     * @zh 从 Scene 移除会调用此方法。\r\n     */\r\n    _setUnBelongScene() {\r\n        this._statRemove();\r\n        this._scene._volumeManager.removeMotionObject(this);\r\n        let batch = this._batchRender;\r\n        this._batchRender && this._batchRender._removeOneRender(this);\r\n        this._batchRender = batch;\r\n        this._scene = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param boundFrustum 裁剪。\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        //TODO miner\r\n        if (boundFrustum)\r\n            return boundFrustum.intersects(this.bounds);\r\n        else\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = (dest as BaseRender);\r\n        render.receiveShadow = this.receiveShadow;\r\n        render.sharedMaterials = this.sharedMaterials;\r\n        render.reflectionMode = this.reflectionMode;\r\n        render.castShadow = this.castShadow;\r\n        render.sortingFudge = this.sortingFudge;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the rendering flag, where each bit represents a different culling reason, 1 indicates LOD culling.\r\n     * @param flag The flag to set, refer to RenderBitFlag for related flags or define custom bit flags.\r\n     * @param pass Whether to set the flag.\r\n     * @zh 设置渲染标志，每一位都代表不同的淘汰原因，1表示LOD淘汰。\r\n     * @param flag 标记，可以查RenderBitFlag相关，也可以自定义标签位\r\n     * @param pass 设置标签值\r\n     */\r\n    setRenderbitFlag(flag: number, pass: boolean) {\r\n        if (pass)\r\n            this._baseRenderNode.renderbitFlag |= (1 << flag);\r\n        else\r\n            this._baseRenderNode.renderbitFlag &= ~(1 << flag);\r\n    }\r\n\r\n\r\n    //-------------------------------------deprecated----------------------------------\r\n    /**\r\n     * @deprecated 请使用shareMaterial接口\r\n     * 返回第一个实例材质,第一次使用会拷贝实例对象。\r\n     */\r\n    get material(): Material {\r\n        var material: Material = this._sharedMaterials[0];\r\n        if (material && !this._materialsInstance[0]) {\r\n            var insMat: Material = this._getInstanceMaterial(material, 0);\r\n            var renderElement: RenderElement = this._renderElements[0];\r\n            (renderElement) && (renderElement.material = insMat);\r\n        }\r\n        return this._sharedMaterials[0];\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this.sharedMaterial = value;\r\n        this._isSupportRenderFeature();\r\n    }\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @param dest \r\n     */\r\n    get materials(): Material[] {\r\n        for (var i: number = 0, n: number = this._sharedMaterials.length; i < n; i++) {\r\n            if (!this._materialsInstance[i]) {\r\n                var insMat: Material = this._getInstanceMaterial(this._sharedMaterials[i], i);\r\n                var renderElement: RenderElement = this._renderElements[i];\r\n                (renderElement) && (renderElement.material = insMat);\r\n            }\r\n        }\r\n        return this._sharedMaterials.slice();\r\n    }\r\n\r\n    set materials(value: Material[]) {\r\n        this.sharedMaterials = value;\r\n        this._isSupportRenderFeature();\r\n    }\r\n}\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en Plane in 3D space.\r\n * @zh 三维空间中的平面。\r\n */\r\nexport class Plane {\r\n    /**\r\n     * @en Intersection type of the plane with other geometries, indicating the back side.\r\n     * @zh 平面与其他几何体相交类型，表示背面。\r\n     */\r\n\tstatic PlaneIntersectionType_Back: number = 0;\r\n    /**\r\n     * @en Intersection type of the plane with other geometries, indicating the front side.\r\n     * @zh 平面与其他几何体相交类型，表示正面。\r\n     */\r\n\tstatic PlaneIntersectionType_Front: number = 1;\r\n    /**\r\n     * @en Intersection type of the plane with other geometries, indicating intersection.\r\n     * @zh 平面与其他几何体相交类型，表示相交。\r\n     */\r\n\tstatic PlaneIntersectionType_Intersecting: number = 2;\r\n\r\n    /**\r\n\t * @internal\r\n     * @en The normal vector of the plane.\r\n     * @zh 平面的法线向量。\r\n     */\r\n\tnormal: Vector3;\r\n\r\n    /**\r\n\t * @internal\r\n     * @en The distance from the plane to the origin of the coordinate system.\r\n     * @zh 平面到坐标系原点的距离。\r\n     */\r\n\tdistance: number;\r\n\r\n\t/**\r\n\t * @en Constructor method of the plane.\r\n\t * @param normal The normal vector of the plane.\r\n\t * @param d The distance from the plane to the origin of the coordinate system.\r\n\t * @zh 平面的构造方法\r\n\t * @param normal 平面的向量\r\n\t * @param d  平面到原点的距离\r\n\t */\r\n\tconstructor(normal: Vector3 = new Vector3, d: number = 0) {\r\n\t\tthis.normal = normal;\r\n\t\tthis.distance = d;//this.distance = d;\r\n\t}\r\n\r\n\r\n    /**\r\n     * @en Creates a plane defined by three points.\r\n     * @param point0 The first point.\r\n     * @param point1 The second point.\r\n     * @param point2 The third point.\r\n     * @param out The plane to store the result.\r\n     * @zh 通过三个点创建一个平面。\r\n     * @param point0 第一个点。\r\n     * @param point1 第二个点。\r\n     * @param point2 第三个点。\r\n     * @param out 存储结果的平面。\r\n     */\r\n\tstatic createPlaneBy3P(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\r\n\t\tvar x1: number = point1.x - point0.x;\r\n\t\tvar y1: number = point1.y - point0.y;\r\n\t\tvar z1: number = point1.z - point0.z;\r\n\t\tvar x2: number = point2.x - point0.x;\r\n\t\tvar y2: number = point2.y - point0.y;\r\n\t\tvar z2: number = point2.z - point0.z;\r\n\t\tvar yz: number = (y1 * z2) - (z1 * y2);\r\n\t\tvar xz: number = (z1 * x2) - (x1 * z2);\r\n\t\tvar xy: number = (x1 * y2) - (y1 * x2);\r\n\t\tvar invPyth: number = 1.0 / (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\r\n\r\n\t\tvar x: number = yz * invPyth;\r\n\t\tvar y: number = xz * invPyth;\r\n\t\tvar z: number = xy * invPyth;\r\n\r\n\t\tvar normal: Vector3 = out.normal;\r\n\t\tnormal.x = x;\r\n\t\tnormal.y = y;\r\n\t\tnormal.z = z;\r\n\t\tout.normal = normal.normalize();\r\n\t\tout.distance = -((x * point0.x) + (y * point0.y) + (z * point0.z));\r\n\t}\r\n\r\n\r\n    /**\r\n     * @en Normalizes the plane's normal vector to unit length.\r\n     * @zh 使平面的法线向量成为单位长度。\r\n     */\r\n\tnormalize(): void {\r\n\t\tvar normalEX: number = this.normal.x;\r\n\t\tvar normalEY: number = this.normal.y;\r\n\t\tvar normalEZ: number = this.normal.z;\r\n\t\tvar magnitude: number = 1.0 / Math.sqrt(normalEX * normalEX + normalEY * normalEY + normalEZ * normalEZ);\r\n\r\n\t\tthis.normal.x = normalEX * magnitude;\r\n\t\tthis.normal.y = normalEY * magnitude;\r\n\t\tthis.normal.z = normalEZ * magnitude;\r\n\t\tthis.distance *= magnitude;\r\n\t}\r\n\r\n    /**\r\n     * @en Clones the plane into another object.\r\n     * @param destObject The destination object to clone into. \r\n\t * @zh 克隆平面到另一个对象。\r\n     * @param destObject 克隆目标对象。\r\n     */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: Plane = <Plane>destObject;\r\n\t\tthis.normal.cloneTo(dest.normal);\r\n\t\tdest.distance = this.distance;\r\n\t}\r\n\r\n    /**\r\n     * @en Creates a clone of this plane.\r\n     * @return A new Plane instance that is a clone of this one.\r\n\t * @zh 创建这个平面的克隆。\r\n     * @return 一个新的 Plane 实例，是当前平面的克隆。\r\n     */\r\n\tclone(): Plane {\r\n\t\tvar dest = new Plane();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en Ray class used to create a ray.\r\n * @zh Ray 类用于创建射线。\r\n */\r\nexport class Ray {\r\n    /**\r\n     * @en The origin point of the ray.\r\n     * @zh 射线的原点。\r\n     */\r\n\torigin: Vector3;\r\n    /**\r\n     * @en The direction of the ray.\r\n     * @zh 射线的方向。\r\n     */\r\n\tdirection: Vector3;\r\n\r\n\t/**\r\n\t * @en Constructor method of the ray class.\r\n\t * @param origin The origin point of the ray.\r\n\t * @param direction The direction vector of the ray.\r\n\t * @zh 射线的构造方法\r\n\t * @param origin 射线的起点\r\n\t * @param direction 射线的方向\r\n\t */\r\n\tconstructor(origin: Vector3, direction: Vector3) {\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\t}\r\n\r\n    /**\r\n     * @en Calculates a point on the ray at the specified parameter t.\r\n     * @param t The parameter along the ray at which to calculate the point. \r\n     * @param out The `Vector3` object to store the result.\r\n\t * @zh 计算在指定参数 t 处的射线上的点。\r\n\t * @param t 沿射线计算点的参数。\r\n     * @param out 存储结果的 `Vector3` 对象。\r\n     */\r\n\tat(t: number, out: Vector3) {\r\n\t\tVector3.scale(this.direction, t, out);\r\n\t\tVector3.add(this.origin, out, out);\r\n\t}\r\n\r\n}\r\n\r\n","/**\r\n * @en ContainmentType class defines the space object position relationship.\r\n * @zh ContainmentType 类用于定义空间物体位置关系。\r\n */\r\nexport class ContainmentType {\r\n\r\n\t/**\r\n\t * @en Disjoint.\r\n\t * @zh 不相交\r\n\t */\r\n\tstatic Disjoint: number = 0;\r\n\t/**\r\n\t * @en Contains.\r\n\t * @zh 包含\r\n\t */\r\n\tstatic Contains: number = 1;\r\n\t/**\r\n\t * @en Intersects.\r\n\t * @zh 相交\r\n\t */\r\n\tstatic Intersects: number = 2;\r\n\r\n}\r\n\r\n\r\n","import { Plane } from \"./Plane\";\r\nimport { BoundBox } from \"./BoundBox\";\r\nimport { BoundSphere } from \"./BoundSphere\";\r\nimport { Ray } from \"./Ray\";\r\nimport { ContainmentType } from \"./ContainmentType\";\r\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en Collision class is used to detect collisions\r\n * @zh Collision 类用于检测碰撞。\r\n */\r\nexport class CollisionUtils {\r\n\r\n    /** @internal */\r\n    private static _tempV30: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV31: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV32: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV33: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV34: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV35: Vector3 = new Vector3();\r\n    /** @internal */\r\n    private static _tempV36: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * @en constructor\r\n     * @zh 构造方法\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the distance from a point to a plane in space.\r\n     * @param plane The plane.\r\n     * @param point The point.\r\n     * @returns The distance from the point to the plane.\r\n     * @zh 计算空间中点到平面的距离。\r\n     * @param plane 平面。\r\n     * @param point 点。\r\n     * @returns 点到平面的距离。\r\n     */\r\n    static distancePlaneToPoint(plane: Plane, point: Vector3): number {\r\n\r\n        var dot: number = Vector3.dot(plane.normal, point);\r\n        return dot + plane.distance;\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the distance from a point to a bounding box in space.\r\n     * @param box The bounding box.\r\n     * @param point The point.\r\n     * @returns The distance from the point to the bounding box.\r\n     * @zh 计算空间中点到包围盒的距离。\r\n     * @param box 包围盒。\r\n     * @param point 点。\r\n     * @returns 点到包围盒的距离。\r\n     */\r\n    static distanceBoxToPoint(box: BoundBox, point: Vector3): number {\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var pointeX: number = point.x;\r\n        var pointeY: number = point.y;\r\n        var pointeZ: number = point.z;\r\n\r\n        var distance: number = 0;\r\n\r\n        if (pointeX < boxMineX)\r\n            distance += (boxMineX - pointeX) * (boxMineX - pointeX);\r\n        if (pointeX > boxMaxeX)\r\n            distance += (boxMaxeX - pointeX) * (boxMaxeX - pointeX);\r\n\r\n        if (pointeY < boxMineY)\r\n            distance += (boxMineY - pointeY) * (boxMineY - pointeY);\r\n        if (pointeY > boxMaxeY)\r\n            distance += (boxMaxeY - pointeY) * (boxMaxeY - pointeY);\r\n\r\n        if (pointeZ < boxMineZ)\r\n            distance += (boxMineZ - pointeZ) * (boxMineZ - pointeZ);\r\n        if (pointeZ > boxMaxeZ)\r\n            distance += (boxMaxeZ - pointeZ) * (boxMaxeZ - pointeZ);\r\n\r\n        return Math.sqrt(distance);\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the distance between two bounding boxes in space.\r\n     * @param box1 The first bounding box.\r\n     * @param box2 The second bounding box.\r\n     * @returns The distance between the two bounding boxes.\r\n     * @zh 计算空间中两个包围盒之间的距离。\r\n     * @param box1 第一个包围盒。\r\n     * @param box2 第二个包围盒。\r\n     * @returns 两个包围盒之间的距离。\r\n     */\r\n    static distanceBoxToBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1MineX: number = box1Mine.x;\r\n        var box1MineY: number = box1Mine.y;\r\n        var box1MineZ: number = box1Mine.z;\r\n\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box1MaxeX: number = box1Maxe.x;\r\n        var box1MaxeY: number = box1Maxe.y;\r\n        var box1MaxeZ: number = box1Maxe.z;\r\n\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2MineX: number = box2Mine.x;\r\n        var box2MineY: number = box2Mine.y;\r\n        var box2MineZ: number = box2Mine.z;\r\n\r\n        var box2Maxe: Vector3 = box2.max;\r\n        var box2MaxeX: number = box2Maxe.x;\r\n        var box2MaxeY: number = box2Maxe.y;\r\n        var box2MaxeZ: number = box2Maxe.z;\r\n\r\n        var distance: number = 0;\r\n        var delta: number;\r\n\r\n        if (box1MineX > box2MaxeX) {\r\n\r\n            delta = box1MineX - box2MaxeX;\r\n            distance += delta * delta;\r\n        } else if (box2MineX > box1MaxeX) {\r\n\r\n            delta = box2MineX - box1MaxeX;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        if (box1MineY > box2MaxeY) {\r\n\r\n            delta = box1MineY - box2MaxeY;\r\n            distance += delta * delta;\r\n        } else if (box2MineY > box1MaxeY) {\r\n\r\n            delta = box2MineY - box1MaxeY;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        if (box1MineZ > box2MaxeZ) {\r\n\r\n            delta = box1MineZ - box2MaxeZ;\r\n            distance += delta * delta;\r\n        } else if (box2MineZ > box1MaxeZ) {\r\n\r\n            delta = box2MineZ - box1MaxeZ;\r\n            distance += delta * delta;\r\n        }\r\n\r\n        return Math.sqrt(distance);\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the distance from a point to a bounding sphere in space.\r\n     * @param sphere The bounding sphere.\r\n     * @param point The point in space.\r\n     * @returns The distance from the point to the bounding sphere.\r\n     * @zh 计算空间中点到包围球的距离。\r\n     * @param sphere 包围球。\r\n     * @param point 空间中的点。\r\n     * @returns 点到包围球的距离\r\n     */\r\n    static distanceSphereToPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere.center, point));\r\n        distance -= sphere.radius;\r\n\r\n        return Math.max(distance, 0);\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the distance between two bounding spheres in space.\r\n     * @param sphere1 The first bounding sphere.\r\n     * @param sphere2 The second bounding sphere.\r\n     * @returns The distance between the two bounding spheres.\r\n     * @zh 计算空间中两个包围球之间的距离。\r\n     * @param sphere1 第一个包围球。\r\n     * @param sphere2 第二个包围球。\r\n     * @returns 两个包围球之间的距离。\r\n     */\r\n    static distanceSphereToSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n        var distance: number = Math.sqrt(Vector3.distanceSquared(sphere1.center, sphere2.center));\r\n        distance -= sphere1.radius + sphere2.radius;\r\n\r\n        return Math.max(distance, 0);\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a triangle and outputs the distance to the intersection.\r\n     * @param ray The ray.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @param out The distance to the intersection point.\r\n     * @returns True if there is an intersection, otherwise false.\r\n     * @zh 判断射线是否与三角形相交，并输出到交点的距离。\r\n     * @param ray 射线。\r\n     * @param vertex1 三角形的第一个顶点。\r\n     * @param vertex2 三角形的第二个顶点。\r\n     * @param vertex3 三角形的第三个顶点。\r\n     * @param out 点和三角面间距离。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsRayAndTriangleRD(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: number): boolean {\r\n\r\n        var rayO: Vector3 = ray.origin;\r\n        var rayOeX: number = rayO.x;\r\n        var rayOeY: number = rayO.y;\r\n        var rayOeZ: number = rayO.z;\r\n\r\n        var rayD: Vector3 = ray.direction;\r\n        var rayDeX: number = rayD.x;\r\n        var rayDeY: number = rayD.y;\r\n        var rayDeZ: number = rayD.z;\r\n\r\n        var v1eX: number = vertex1.x;\r\n        var v1eY: number = vertex1.y;\r\n        var v1eZ: number = vertex1.z;\r\n\r\n        var v2eX: number = vertex2.x;\r\n        var v2eY: number = vertex2.y;\r\n        var v2eZ: number = vertex2.z;\r\n\r\n        var v3eX: number = vertex3.x;\r\n        var v3eY: number = vertex3.y;\r\n        var v3eZ: number = vertex3.z;\r\n\r\n        var _tempV30eX: number = CollisionUtils._tempV30.x;\r\n        var _tempV30eY: number = CollisionUtils._tempV30.y;\r\n        var _tempV30eZ: number = CollisionUtils._tempV30.z;\r\n\r\n        _tempV30eX = v2eX - v1eX;\r\n        _tempV30eY = v2eY - v1eY;\r\n        _tempV30eZ = v2eZ - v1eZ;\r\n\r\n        var _tempV31eX: number = CollisionUtils._tempV31.x;\r\n        var _tempV31eY: number = CollisionUtils._tempV31.y;\r\n        var _tempV31eZ: number = CollisionUtils._tempV31.z;\r\n\r\n        _tempV31eX = v3eX - v1eX;\r\n        _tempV31eY = v3eY - v1eY;\r\n        _tempV31eZ = v3eZ - v1eZ;\r\n\r\n        var _tempV32eX: number = CollisionUtils._tempV32.x;\r\n        var _tempV32eY: number = CollisionUtils._tempV32.y;\r\n        var _tempV32eZ: number = CollisionUtils._tempV32.z;\r\n\r\n        _tempV32eX = (rayDeY * _tempV31eZ) - (rayDeZ * _tempV31eY);\r\n        _tempV32eY = (rayDeZ * _tempV31eX) - (rayDeX * _tempV31eZ);\r\n        _tempV32eZ = (rayDeX * _tempV31eY) - (rayDeY * _tempV31eX);\r\n\r\n        var determinant: number = (_tempV30eX * _tempV32eX) + (_tempV30eY * _tempV32eY) + (_tempV30eZ * _tempV32eZ);\r\n\r\n        if (MathUtils3D.isZero(determinant)) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var inversedeterminant: number = 1 / determinant;\r\n\r\n        var _tempV33eX: number = CollisionUtils._tempV33.x;\r\n        var _tempV33eY: number = CollisionUtils._tempV33.y;\r\n        var _tempV33eZ: number = CollisionUtils._tempV33.z;\r\n\r\n        _tempV33eX = rayOeX - v1eX;\r\n        _tempV33eY = rayOeY - v1eY;\r\n        _tempV33eZ = rayOeZ - v1eZ;\r\n\r\n        var triangleU: number = (_tempV33eX * _tempV32eX) + (_tempV33eY * _tempV32eY) + (_tempV33eZ * _tempV32eZ);\r\n        triangleU *= inversedeterminant;\r\n\r\n        if (triangleU < 0 || triangleU > 1) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var _tempV34eX: number = CollisionUtils._tempV34.x;\r\n        var _tempV34eY: number = CollisionUtils._tempV34.y;\r\n        var _tempV34eZ: number = CollisionUtils._tempV34.z;\r\n\r\n        _tempV34eX = (_tempV33eY * _tempV30eZ) - (_tempV33eZ * _tempV30eY);\r\n        _tempV34eY = (_tempV33eZ * _tempV30eX) - (_tempV33eX * _tempV30eZ);\r\n        _tempV34eZ = (_tempV33eX * _tempV30eY) - (_tempV33eY * _tempV30eX);\r\n\r\n        var triangleV: number = ((rayDeX * _tempV34eX) + (rayDeY * _tempV34eY)) + (rayDeZ * _tempV34eZ);\r\n        triangleV *= inversedeterminant;\r\n\r\n        if (triangleV < 0 || triangleU + triangleV > 1) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        var raydistance: number = (_tempV31eX * _tempV34eX) + (_tempV31eY * _tempV34eY) + (_tempV31eZ * _tempV34eZ);\r\n        raydistance *= inversedeterminant;\r\n\r\n        if (raydistance < 0) {\r\n\r\n            out = 0;\r\n            return false;\r\n        }\r\n\r\n        out = raydistance;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a triangle and outputs the intersection point.\r\n     * @param ray The ray.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @param out The intersection point.\r\n     * @returns True if there is an intersection, otherwise false.\r\n     * @zh 判断射线是否与三角形相交，并输出交点。\r\n     * @param ray 射线。\r\n     * @param vertex1 三角形的第一个顶点。\r\n     * @param vertex2 三角形的第二个顶点。\r\n     * @param vertex3 三角形的第三个顶点。\r\n     * @param out 交点。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsRayAndTriangleRP(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): boolean {\r\n\r\n        var distance: number;\r\n        if (!CollisionUtils.intersectsRayAndTriangleRD(ray, vertex1, vertex2, vertex3, distance)) {\r\n\r\n            Vector3.ZERO.cloneTo(out);\r\n            return false;\r\n        }\r\n\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, out);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a point.\r\n     * @param ray The ray.\r\n     * @param point The point.\r\n     * @returns True if there is an intersection, otherwise false.\r\n     * @zh 判断射线是否与点相交。\r\n     * @param ray 射线。\r\n     * @param point 点。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsRayAndPoint(ray: Ray, point: Vector3): boolean {\r\n\r\n        Vector3.subtract(ray.origin, point, CollisionUtils._tempV30);\r\n\r\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - MathUtils3D.zeroTolerance;\r\n\r\n        if (c > 0 && b > 0)\r\n            return false;\r\n        var discriminant: number = b * b - c;\r\n        if (discriminant < 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether two rays intersect and outputs the intersection point.\r\n     * @param ray1 The first ray.\r\n     * @param ray2 The second ray.\r\n     * @param out The intersection point.\r\n     * @returns True if there is an intersection, otherwise false.\r\n     * @zh 判断两条射线是否相交，并输出交点。\r\n     * @param ray1 第一个射线。\r\n     * @param ray2 第二个射线。\r\n     * @param out 交点。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsRayAndRay(ray1: Ray, ray2: Ray, out: Vector3): boolean {\r\n\r\n        var ray1o: Vector3 = ray1.origin;\r\n        var ray1oeX: number = ray1o.x;\r\n        var ray1oeY: number = ray1o.y;\r\n        var ray1oeZ: number = ray1o.z;\r\n\r\n        var ray1d: Vector3 = ray1.direction;\r\n        var ray1deX: number = ray1d.x;\r\n        var ray1deY: number = ray1d.y;\r\n        var ray1deZ: number = ray1d.z;\r\n\r\n        var ray2o: Vector3 = ray2.origin;\r\n        var ray2oeX: number = ray2o.x;\r\n        var ray2oeY: number = ray2o.y;\r\n        var ray2oeZ: number = ray2o.z;\r\n\r\n        var ray2d: Vector3 = ray2.direction;\r\n        var ray2deX: number = ray2d.x;\r\n        var ray2deY: number = ray2d.y;\r\n        var ray2deZ: number = ray2d.z;\r\n\r\n        Vector3.cross(ray1d, ray2d, CollisionUtils._tempV30);\r\n        var tempV3: Vector3 = CollisionUtils._tempV30;\r\n        var denominator: number = Vector3.scalarLength(CollisionUtils._tempV30);\r\n\r\n        if (MathUtils3D.isZero(denominator)) {\r\n\r\n            if (MathUtils3D.nearEqual(ray2oeX, ray1oeX) && MathUtils3D.nearEqual(ray2oeY, ray1oeY) && MathUtils3D.nearEqual(ray2oeZ, ray1oeZ)) {\r\n                Vector3.ZERO.cloneTo(out);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        denominator = denominator * denominator;\r\n\r\n        var m11: number = ray2oeX - ray1oeX;\r\n        var m12: number = ray2oeY - ray1oeY;\r\n        var m13: number = ray2oeZ - ray1oeZ;\r\n        var m21: number = ray2deX;\r\n        var m22: number = ray2deY;\r\n        var m23: number = ray2deZ;\r\n        var m31: number = tempV3.x;\r\n        var m32: number = tempV3.y;\r\n        var m33: number = tempV3.z;\r\n\r\n        var dets: number = m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 - m13 * m22 * m31;\r\n\r\n        m21 = ray1deX;\r\n        m22 = ray1deY;\r\n        m23 = ray1deZ;\r\n\r\n\r\n        var s: number = dets / denominator;\r\n\r\n        Vector3.scale(ray1d, s, CollisionUtils._tempV30);\r\n        Vector3.scale(ray2d, s, CollisionUtils._tempV31);\r\n\r\n        Vector3.add(ray1o, CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n        Vector3.add(ray2o, CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n\r\n        var point1e: Vector3 = CollisionUtils._tempV32;\r\n        var point2e: Vector3 = CollisionUtils._tempV33;\r\n\r\n        if (!MathUtils3D.nearEqual(point2e.x, point1e.x) || !MathUtils3D.nearEqual(point2e.y, point1e.y) || !MathUtils3D.nearEqual(point2e.z, point1e.z)) {\r\n            Vector3.ZERO.cloneTo(out);\r\n            return false;\r\n        }\r\n\r\n        out = CollisionUtils._tempV32;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a plane intersects with a triangle in space and returns the spatial relationship.\r\n     * @param plane The plane.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @returns The spatial relationship between the plane and the triangle： \r\n     * - 0(PlaneIntersectionType_Back): back, \r\n     * - 1(PlaneIntersectionType_Front): front, \r\n     * - 2(PlaneIntersectionType_Intersecting): intersecting.\r\n     * @zh 判断空间中的平面是否与三角形相交，并返回空间位置关系。\r\n     * @param plane 平面。\r\n     * @param vertex1 三角形的第一个顶点。\r\n     * @param vertex2 三角形的第二个顶点。\r\n     * @param vertex3 三角形的第三个顶点。\r\n     * @returns 平面与三角面的相交类型： \r\n     * - 0(PlaneIntersectionType_Back): 背面，\r\n     * - 1(PlaneIntersectionType_Front): 正面，\r\n     * - 2(PlaneIntersectionType_Intersecting): 相交。\r\n     */\r\n    static intersectsPlaneAndTriangle(plane: Plane, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\r\n        var test1: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex1);\r\n        var test2: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex2);\r\n        var test3: number = CollisionUtils.intersectsPlaneAndPoint(plane, vertex3);\r\n\r\n        if (test1 == Plane.PlaneIntersectionType_Front && test2 == Plane.PlaneIntersectionType_Front && test3 == Plane.PlaneIntersectionType_Front)\r\n            return Plane.PlaneIntersectionType_Front;\r\n\r\n        if (test1 == Plane.PlaneIntersectionType_Back && test2 == Plane.PlaneIntersectionType_Back && test3 == Plane.PlaneIntersectionType_Back)\r\n            return Plane.PlaneIntersectionType_Back;\r\n\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a plane and returns the distance to the intersection.\r\n     * @param ray The ray.\r\n     * @param plane The plane.\r\n     * @returns The distance to the intersection point, or -1 if there is no intersection.\r\n     * @zh 判断射线是否与平面相交，并返回到交点的距离。\r\n     * @param ray 射线。    \r\n     * @param plane 平面。\r\n     * @returns 到交点的距离，如果没有交点则为 -1。\r\n     */\r\n    static intersectsRayAndPlaneRD(ray: Ray, plane: Plane): number {\r\n        //Source: Real-Time Collision Detection by Christer Ericson\r\n        //Reference: Page 175\r\n        var planeNor: Vector3 = plane.normal;\r\n        var direction: number = Vector3.dot(planeNor, ray.direction);\r\n\r\n        if (Math.abs(direction) < MathUtils3D.zeroTolerance)\r\n            return -1;\r\n\r\n        var position: number = Vector3.dot(planeNor, ray.origin);\r\n        var distance: number = (-plane.distance - position) / direction;\r\n\r\n        if (distance < 0) {\r\n            if (distance < -MathUtils3D.zeroTolerance)\r\n                return -1;\r\n            distance = 0;\r\n        }\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a plane and outputs the intersection point.\r\n     * @param ray The ray.\r\n     * @param plane The plane.\r\n     * @param out The intersection point.\r\n     * @returns True if there is an intersection, otherwise false.\r\n     * @zh 判断射线是否与平面相交，并输出交点。\r\n     * @param ray 射线。\r\n     * @param plane 平面。\r\n     * @param out 交点。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsRayAndPlaneRP(ray: Ray, plane: Plane, out: Vector3): boolean {\r\n        //Source: Real-Time Collision Detection by Christer Ericson\r\n        //Reference: Page 175\r\n        var distance: number = CollisionUtils.intersectsRayAndPlaneRD(ray, plane);\r\n        if (distance == -1) {\r\n            out.setValue(0, 0, 0);\r\n            return false;\r\n        }\r\n\r\n        var scaDis: Vector3 = CollisionUtils._tempV30;\r\n        Vector3.scale(ray.direction, distance, scaDis);\r\n        Vector3.add(ray.origin, scaDis, out);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a bounding box and outputs the distance to the intersection.\r\n     * @param ray The ray.\r\n     * @param box The bounding box.\r\n     * @returns The distance to the intersection point, or -1 if there is no intersection.\r\n     * @zh 判断射线是否与包围盒相交，并输出到交点的距离。\r\n     * @param ray 射线。\r\n     * @param box 包围盒。\r\n     * @returns 到交点的距离，如果没有交点则为 -1。\r\n     */\r\n    static intersectsRayAndBoxRD(ray: Ray, box: BoundBox): number {\r\n\r\n        var rayoe: Vector3 = ray.origin;\r\n        var rayoeX: number = rayoe.x;\r\n        var rayoeY: number = rayoe.y;\r\n        var rayoeZ: number = rayoe.z;\r\n\r\n        var rayde: Vector3 = ray.direction;\r\n        var raydeX: number = rayde.x;\r\n        var raydeY: number = rayde.y;\r\n        var raydeZ: number = rayde.z;\r\n\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMineX: number = boxMine.x;\r\n        var boxMineY: number = boxMine.y;\r\n        var boxMineZ: number = boxMine.z;\r\n\r\n        var boxMaxe: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMaxe.x;\r\n        var boxMaxeY: number = boxMaxe.y;\r\n        var boxMaxeZ: number = boxMaxe.z;\r\n\r\n        var out: number = 0;\r\n\r\n        var tmax: number = MathUtils3D.MaxValue;\r\n\r\n        if (MathUtils3D.isZero(raydeX)) {\r\n\r\n            if (rayoeX < boxMineX || rayoeX > boxMaxeX) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse: number = 1 / raydeX;\r\n            var t1: number = (boxMineX - rayoeX) * inverse;\r\n            var t2: number = (boxMaxeX - rayoeX) * inverse;\r\n\r\n            if (t1 > t2) {\r\n\r\n                var temp: number = t1;\r\n                t1 = t2;\r\n                t2 = temp;\r\n            }\r\n\r\n            out = Math.max(t1, out);\r\n            tmax = Math.min(t2, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        if (MathUtils3D.isZero(raydeY)) {\r\n\r\n            if (rayoeY < boxMineY || rayoeY > boxMaxeY) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse1: number = 1 / raydeY;\r\n            var t3: number = (boxMineY - rayoeY) * inverse1;\r\n            var t4: number = (boxMaxeY - rayoeY) * inverse1;\r\n\r\n            if (t3 > t4) {\r\n\r\n                var temp1: number = t3;\r\n                t3 = t4;\r\n                t4 = temp1;\r\n            }\r\n\r\n            out = Math.max(t3, out);\r\n            tmax = Math.min(t4, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        if (MathUtils3D.isZero(raydeZ)) {\r\n\r\n            if (rayoeZ < boxMineZ || rayoeZ > boxMaxeZ) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        } else {\r\n\r\n            var inverse2: number = 1 / raydeZ;\r\n            var t5: number = (boxMineZ - rayoeZ) * inverse2;\r\n            var t6: number = (boxMaxeZ - rayoeZ) * inverse2;\r\n\r\n            if (t5 > t6) {\r\n\r\n                var temp2: number = t5;\r\n                t5 = t6;\r\n                t6 = temp2;\r\n            }\r\n\r\n            out = Math.max(t5, out);\r\n            tmax = Math.min(t6, tmax);\r\n\r\n            if (out > tmax) {\r\n\r\n                //out = 0;\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a bounding box and returns the intersection point.\r\n     * @param ray The ray.\r\n     * @param box The bounding box.\r\n     * @param out The intersection point.\r\n     * @returns The distance to the intersection, or -1 if there is no intersection.\r\n     * @zh 判断射线是否与包围盒相交，并返回交点。\r\n     * @param ray 射线。\r\n     * @param box 包围盒。\r\n     * @param out 交点。\r\n     * @returns 到交点的距离，如果没有交点则为 -1。\r\n     */\r\n    static intersectsRayAndBoxRP(ray: Ray, box: BoundBox, out: Vector3): number {\r\n\r\n        var distance: number = CollisionUtils.intersectsRayAndBoxRD(ray, box);\r\n        if (distance === -1) {\r\n\r\n            Vector3.ZERO.cloneTo(out);\r\n            return distance;\r\n        }\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n        CollisionUtils._tempV31.cloneTo(out);\r\n\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a bounding sphere and returns the distance to the intersection.\r\n     * @param ray The ray.\r\n     * @param sphere The bounding sphere.\r\n     * @returns The distance to the intersection point, or -1 if there is no intersection.\r\n     * @zh 判断射线是否与包围球相交，并返回到交点的距离。\r\n     * @param ray 射线。\r\n     * @param sphere 包围球。\r\n     * @returns 到交点的距离，如果没有交点则为 -1。\r\n     */\r\n    static intersectsRayAndSphereRD(ray: Ray, sphere: BoundSphere): number {\r\n\r\n        var sphereR: number = sphere.radius;\r\n        Vector3.subtract(ray.origin, sphere.center, CollisionUtils._tempV30);\r\n\r\n        var b: number = Vector3.dot(CollisionUtils._tempV30, ray.direction);\r\n        var c: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30) - (sphereR * sphereR);\r\n\r\n        if (c > 0 && b > 0) {\r\n            return -1;\r\n        }\r\n\r\n        var discriminant: number = b * b - c;\r\n\r\n        if (discriminant < 0) {\r\n            return -1;\r\n        }\r\n\r\n        var distance: number = -b - Math.sqrt(discriminant);\r\n\r\n        if (distance < 0)\r\n            distance = 0;\r\n\r\n        return distance;\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a ray intersects with a bounding sphere and returns the distance to the intersection.\r\n     * @param ray The ray.\r\n     * @param sphere The bounding sphere.\r\n     * @param out The intersection point.\r\n     * @returns The distance to the intersection, or -1 if there is no intersection.\r\n     * @zh 判断射线是否与包围球相交并返回到交点的距离。\r\n     * @param ray 射线。\r\n     * @param sphere 包围球。\r\n     * @param out 交点。\r\n     * @returns 到交点的距离，如果没有交点则为 -1。\r\n     */\r\n    static intersectsRayAndSphereRP(ray: Ray, sphere: BoundSphere, out: Vector3): number {\r\n        var distance: number = CollisionUtils.intersectsRayAndSphereRD(ray, sphere);\r\n        if (distance === -1) {\r\n            Vector3.ZERO.cloneTo(out);\r\n            return distance;\r\n        }\r\n\r\n        Vector3.scale(ray.direction, distance, CollisionUtils._tempV30);\r\n        Vector3.add(ray.origin, CollisionUtils._tempV30, CollisionUtils._tempV31);\r\n\r\n        CollisionUtils._tempV31.cloneTo(out);\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a bounding sphere intersects with a triangle.\r\n     * @param sphere The bounding sphere.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断包围球是否与三角形相交。\r\n     * @param sphere 包围球。\r\n     * @param vertex1 三角形的第一个顶点。\r\n     * @param vertex2 三角形的第二个顶点。\r\n     * @param vertex3 三角形的第三个顶点。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsSphereAndTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): boolean {\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereR: number = sphere.radius;\r\n\r\n        CollisionUtils.closestPointPointTriangle(sphereC, vertex1, vertex2, vertex3, CollisionUtils._tempV30);\r\n        Vector3.subtract(CollisionUtils._tempV30, sphereC, CollisionUtils._tempV31);\r\n\r\n        var dot: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV31);\r\n\r\n        return dot <= sphereR * sphereR;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the intersection status between a point and a plane.\r\n     * @param plane The plane.\r\n     * @param point The point.\r\n     * @returns The type of intersection between a point and a plane: \r\n     * - 0(PlaneIntersectionType_Back): back, \r\n     * - 1(PlaneIntersectionType_Front): front, \r\n     * - 2(PlaneIntersectionType_Intersecting): intersecting.\r\n     * @zh 判断点与平面之间的相交状态。\r\n     * @param plane 平面。\r\n     * @param point 点。\r\n     * @returns 点与平面的相交类型：\r\n     * - 0(PlaneIntersectionType_Back): 背面，\r\n     * - 1(PlaneIntersectionType_Front): 正面，\r\n     * - 2(PlaneIntersectionType_Intersecting): 相交。\r\n     */\r\n    static intersectsPlaneAndPoint(plane: Plane, point: Vector3): number {\r\n        var distance: number = Vector3.dot(plane.normal, point) + plane.distance;\r\n        if (distance > 0)\r\n            return Plane.PlaneIntersectionType_Front;\r\n        if (distance < 0)\r\n            return Plane.PlaneIntersectionType_Back;\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether two planes intersect.\r\n     * @param plane1 The first plane.\r\n     * @param plane2 The second plane.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断两个平面是否相交。\r\n     * @param plane1 第一个平面。\r\n     * @param plane2 第二个平面。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n\r\n    static intersectsPlaneAndPlane(plane1: Plane, plane2: Plane): boolean {\r\n\r\n        Vector3.cross(plane1.normal, plane2.normal, CollisionUtils._tempV30);\r\n\r\n        var denominator: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV30);\r\n\r\n        if (MathUtils3D.isZero(denominator))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether two planes intersect and outputs the line of intersection.\r\n     * @param plane1 The first plane.\r\n     * @param plane2 The second plane.\r\n     * @param line The line representing the intersection.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断两个平面是否相交并输出相交线。\r\n     * @param plane1 第一个平面。\r\n     * @param plane2 第二个平面。\r\n     * @param line 相交线。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsPlaneAndPlaneRL(plane1: Plane, plane2: Plane, line: Ray): boolean {\r\n\r\n        var plane1nor: Vector3 = plane1.normal;\r\n        var plane2nor: Vector3 = plane2.normal;\r\n\r\n        Vector3.cross(plane1nor, plane2nor, CollisionUtils._tempV34);\r\n        var denominator: number = Vector3.dot(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n\r\n        if (MathUtils3D.isZero(denominator))\r\n            return false;\r\n\r\n        Vector3.scale(plane2nor, plane1.distance, CollisionUtils._tempV30);\r\n        Vector3.scale(plane1nor, plane2.distance, CollisionUtils._tempV31);\r\n        Vector3.subtract(CollisionUtils._tempV30, CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n        Vector3.cross(CollisionUtils._tempV32, CollisionUtils._tempV34, CollisionUtils._tempV33);\r\n\r\n        Vector3.normalize(CollisionUtils._tempV34, CollisionUtils._tempV34);\r\n        line = new Ray(CollisionUtils._tempV33, CollisionUtils._tempV34);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the intersection status between a plane and a bounding box.\r\n     * @param plane The plane.\r\n     * @param box The bounding box.\r\n     * @returns The intersection type of the plane and the bounding box: \r\n     * - 0(PlaneIntersectionType_Back): back, \r\n     * - 1(PlaneIntersectionType_Front): front, \r\n     * - 2(PlaneIntersectionType_Intersecting): intersecting.\r\n     * @zh 判断平面与包围盒之间的相交状态。\r\n     * @param plane 平面。\r\n     * @param box 包围盒。\r\n     * @returns 平面与包围盒的相交类型: \r\n     * - 0(PlaneIntersectionType_Back): 背面，\r\n     * - 1(PlaneIntersectionType_Front): 正面，\r\n     * - 2(PlaneIntersectionType_Intersecting): 相交。\r\n     */\r\n    static intersectsPlaneAndBox(plane: Plane, box: BoundBox): number {\r\n\r\n        var planeD: number = plane.distance;\r\n\r\n        var planeNor: Vector3 = plane.normal;\r\n        var planeNoreX: number = planeNor.x;\r\n        var planeNoreY: number = planeNor.y;\r\n        var planeNoreZ: number = planeNor.z;\r\n\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMineX: number = boxMine.x;\r\n        var boxMineY: number = boxMine.y;\r\n        var boxMineZ: number = boxMine.z;\r\n\r\n        var boxMaxe: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMaxe.x;\r\n        var boxMaxeY: number = boxMaxe.y;\r\n        var boxMaxeZ: number = boxMaxe.z;\r\n\r\n        CollisionUtils._tempV30.x = (planeNoreX > 0) ? boxMineX : boxMaxeX;\r\n        CollisionUtils._tempV30.y = (planeNoreY > 0) ? boxMineY : boxMaxeY;\r\n        CollisionUtils._tempV30.z = (planeNoreZ > 0) ? boxMineZ : boxMaxeZ;\r\n\r\n        CollisionUtils._tempV31.x = (planeNoreX > 0) ? boxMaxeX : boxMineX;\r\n        CollisionUtils._tempV31.y = (planeNoreY > 0) ? boxMaxeY : boxMineY;\r\n        CollisionUtils._tempV31.z = (planeNoreZ > 0) ? boxMaxeZ : boxMineZ;\r\n\r\n        var distance: number = Vector3.dot(planeNor, CollisionUtils._tempV30);\r\n        if (distance + planeD > 0)\r\n            return Plane.PlaneIntersectionType_Front;\r\n\r\n        distance = Vector3.dot(planeNor, CollisionUtils._tempV31);\r\n        if (distance + planeD < 0)\r\n            return Plane.PlaneIntersectionType_Back;\r\n\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the intersection status between a plane and a bounding sphere.\r\n     * @param plane The plane.\r\n     * @param sphere The bounding sphere.\r\n     * @returns The intersection type of the plane and the bounding sphere: 0-back, 1-front, 2-intersecting.\r\n     * @zh 判断平面与包围球之间的相交状态。\r\n     * @param plane 平面。\r\n     * @param sphere 包围球。\r\n     * @returns 平面与包围球的相交类型:  0-背面，1-正面，2-相交。\r\n     */\r\n    static intersectsPlaneAndSphere(plane: Plane, sphere: BoundSphere): number {\r\n\r\n        var sphereR: number = sphere.radius;\r\n        var distance: number = Vector3.dot(plane.normal, sphere.center) + plane.distance;\r\n\r\n        if (distance > sphereR)\r\n            return Plane.PlaneIntersectionType_Front;\r\n        if (distance < -sphereR)\r\n            return Plane.PlaneIntersectionType_Back;\r\n        return Plane.PlaneIntersectionType_Intersecting;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether two bounding boxes intersect.\r\n     * @param box1 The first bounding box.\r\n     * @param box2 The second bounding box.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断两个包围盒是否相交。\r\n     * @param box1 第一个包围盒。\r\n     * @param box2 第二个包围盒。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsBoxAndBox(box1: BoundBox, box2: BoundBox): boolean {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2Maxe: Vector3 = box2.max;\r\n\r\n        if (box1Mine.x > box2Maxe.x || box2Mine.x > box1Maxe.x)\r\n            return false;\r\n        if (box1Mine.y > box2Maxe.y || box2Mine.y > box1Maxe.y)\r\n            return false;\r\n        if (box1Mine.z > box2Maxe.z || box2Mine.z > box1Maxe.z)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a bounding box intersects with a bounding sphere.\r\n     * @param box The bounding box.\r\n     * @param sphere The bounding sphere.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断包围盒是否与包围球是否相交。\r\n     * @param box 包围盒。\r\n     * @param sphere 包围球。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsBoxAndSphere(box: BoundBox, sphere: BoundSphere): boolean {\r\n        var center: Vector3 = sphere.center;\r\n        var radius: number = sphere.radius;\r\n        var nearest: Vector3 = CollisionUtils._tempV30;\r\n        Vector3.Clamp(center, box.min, box.max, nearest);\r\n        var distance: number = Vector3.distanceSquared(center, nearest);\r\n        return distance <= radius * radius;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether one bounding sphere intersects with another bounding sphere.\r\n     * @param sphere1 The first bounding sphere.\r\n     * @param sphere2 The second bounding sphere.\r\n     * @returns True if they intersect, otherwise false.\r\n     * @zh 判断一个包围球是否与另一个包围球相交。\r\n     * @param sphere1 第一个包围球。\r\n     * @param sphere2 第二个包围球。\r\n     * @returns 如果相交返回真，否则返回假。\r\n     */\r\n    static intersectsSphereAndSphere(sphere1: BoundSphere, sphere2: BoundSphere): boolean {\r\n\r\n        var radiisum: number = sphere1.radius + sphere2.radius;\r\n        return Vector3.distanceSquared(sphere1.center, sphere2.center) <= radiisum * radiisum;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the spatial relationship between a bounding box and a point.\r\n     * @param box The bounding box.\r\n     * @param point The point.\r\n     * @returns The relationship type: 0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 确定包围盒和点之间的空间关系。\r\n     * @param box 包围盒。\r\n     * @param point 点。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static boxContainsPoint(box: BoundBox, point: Vector3): number {\r\n        var boxMine: Vector3 = box.min;\r\n        var boxMaxe: Vector3 = box.max;\r\n        if (boxMine.x <= point.x && boxMaxe.x >= point.x && boxMine.y <= point.y && boxMaxe.y >= point.y && boxMine.z <= point.z && boxMaxe.z >= point.z)\r\n            return ContainmentType.Contains;\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the spatial relationship between two bounding boxes.\r\n     * @param box1 The first bounding box.\r\n     * @param box2 The second bounding box.\r\n     * @returns The relationship type: 0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 确定两个包围盒之间的空间关系。\r\n     * @param box1 第一个包围盒。\r\n     * @param box2 第二个包围盒。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static boxContainsBox(box1: BoundBox, box2: BoundBox): number {\r\n\r\n        var box1Mine: Vector3 = box1.min;\r\n        var box1MineX: number = box1Mine.x;\r\n        var box1MineY: number = box1Mine.y;\r\n        var box1MineZ: number = box1Mine.z;\r\n\r\n        var box1Maxe: Vector3 = box1.max;\r\n        var box1MaxeX: number = box1Maxe.x;\r\n        var box1MaxeY: number = box1Maxe.y;\r\n        var box1MaxeZ: number = box1Maxe.z;\r\n\r\n        var box2Mine: Vector3 = box2.min;\r\n        var box2MineX: number = box2Mine.x;\r\n        var box2MineY: number = box2Mine.y;\r\n        var box2MineZ: number = box2Mine.z;\r\n\r\n        var box2Maxe: Vector3 = box2.max;\r\n        var box2MaxeX: number = box2Maxe.x;\r\n        var box2MaxeY: number = box2Maxe.y;\r\n        var box2MaxeZ: number = box2Maxe.z;\r\n\r\n        if (box1MaxeX < box2MineX || box1MineX > box2MaxeX)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MaxeY < box2MineY || box1MineY > box2MaxeY)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MaxeZ < box2MineZ || box1MineZ > box2MaxeZ)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (box1MineX <= box2MineX && box2MaxeX <= box1MaxeX && box1MineY <= box2MineY && box2MaxeY <= box1MaxeY && box1MineZ <= box2MineZ && box2MaxeZ <= box1MaxeZ) {\r\n            return ContainmentType.Contains;\r\n        }\r\n\r\n        return ContainmentType.Intersects;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Determines the spatial relationship between a bounding box and a bounding sphere.\r\n     * @param box The bounding box.\r\n     * @param sphere The bounding sphere.\r\n     * @returns The relationship type:  0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 确定包围盒和包围球之间的空间关系。\r\n     * @param box 包围盒。\r\n     * @param sphere 包围球。\r\n     * @returns 位置关系: 0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static boxContainsSphere(box: BoundBox, sphere: BoundSphere): number {\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereCeX: number = sphereC.x;\r\n        var sphereCeY: number = sphereC.y;\r\n        var sphereCeZ: number = sphereC.z;\r\n\r\n        var sphereR: number = sphere.radius;\r\n\r\n        Vector3.Clamp(sphereC, boxMin, boxMax, CollisionUtils._tempV30);\r\n        var distance: number = Vector3.distanceSquared(sphereC, CollisionUtils._tempV30);\r\n\r\n        if (distance > sphereR * sphereR)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if ((((boxMineX + sphereR <= sphereCeX) && (sphereCeX <= boxMaxeX - sphereR)) && ((boxMaxeX - boxMineX > sphereR) &&\r\n            (boxMineY + sphereR <= sphereCeY))) && (((sphereCeY <= boxMaxeY - sphereR) && (boxMaxeY - boxMineY > sphereR)) &&\r\n                (((boxMineZ + sphereR <= sphereCeZ) && (sphereCeZ <= boxMaxeZ - sphereR)) && (boxMaxeZ - boxMineZ > sphereR))))\r\n            return ContainmentType.Contains;\r\n\r\n        return ContainmentType.Intersects;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the spatial relationship between a bounding sphere and a point.\r\n     * @param sphere The bounding sphere.\r\n     * @param point The point.\r\n     * @returns The relationship type: 0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 确定包围球和点之间的空间关系。\r\n     * @param sphere 包围球。\r\n     * @param point 点。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static sphereContainsPoint(sphere: BoundSphere, point: Vector3): number {\r\n\r\n        if (Vector3.distanceSquared(point, sphere.center) <= sphere.radius * sphere.radius)\r\n            return ContainmentType.Contains;\r\n\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * @en Determines the spatial relationship between a bounding sphere and a triangle.\r\n     * @param sphere The bounding sphere.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @returns The relationship type:  0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 确定包围球和三角形之间的空间关系。\r\n     * @param sphere 包围球。\r\n     * @param vertex1 第一个顶点。\r\n     * @param vertex2 第二个顶点。\r\n     * @param vertex3 第三个顶点。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static sphereContainsTriangle(sphere: BoundSphere, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n        var test1: number = CollisionUtils.sphereContainsPoint(sphere, vertex1);\r\n        var test2: number = CollisionUtils.sphereContainsPoint(sphere, vertex2);\r\n        var test3: number = CollisionUtils.sphereContainsPoint(sphere, vertex3);\r\n\r\n        if (test1 == ContainmentType.Contains && test2 == ContainmentType.Contains && test3 == ContainmentType.Contains)\r\n            return ContainmentType.Contains;\r\n\r\n        if (CollisionUtils.intersectsSphereAndTriangle(sphere, vertex1, vertex2, vertex3))\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Disjoint;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether a bounding sphere contains a bounding box.\r\n     * @param sphere The bounding sphere.\r\n     * @param box The bounding box.\r\n     * @returns The spatial relationship: 0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 判断包围球是否包含包围盒。\r\n     * @param sphere 包围球。\r\n     * @param box 包围盒。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static sphereContainsBox(sphere: BoundSphere, box: BoundBox): number {\r\n\r\n        var sphereC: Vector3 = sphere.center;\r\n        var sphereCeX: number = sphereC.x;\r\n        var sphereCeY: number = sphereC.y;\r\n        var sphereCeZ: number = sphereC.z;\r\n\r\n        var sphereR: number = sphere.radius;\r\n\r\n        var boxMin: Vector3 = box.min;\r\n        var boxMineX: number = boxMin.x;\r\n        var boxMineY: number = boxMin.y;\r\n        var boxMineZ: number = boxMin.z;\r\n\r\n        var boxMax: Vector3 = box.max;\r\n        var boxMaxeX: number = boxMax.x;\r\n        var boxMaxeY: number = boxMax.y;\r\n        var boxMaxeZ: number = boxMax.z;\r\n\r\n        var _tempV30e: Vector3 = CollisionUtils._tempV30;\r\n        var _tempV30eX: number = _tempV30e.x;\r\n        var _tempV30eY: number = _tempV30e.y;\r\n        var _tempV30eZ: number = _tempV30e.z;\r\n\r\n        if (!CollisionUtils.intersectsBoxAndSphere(box, sphere))\r\n            return ContainmentType.Disjoint;\r\n\r\n        var radiusSquared: number = sphereR * sphereR;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMaxeZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMaxeY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMaxeX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        _tempV30eX = sphereCeX - boxMineX;\r\n        _tempV30eY = sphereCeY - boxMineY;\r\n        _tempV30eZ = sphereCeZ - boxMineZ;\r\n        if (Vector3.scalarLengthSquared(CollisionUtils._tempV30) > radiusSquared)\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Contains;\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether one bounding sphere contains another bounding sphere.\r\n     * @param sphere1 The first bounding sphere.\r\n     * @param sphere2 The second bounding sphere.\r\n     * @returns The spatial relationship: 0 for disjoint, 1 for contains, 2 for intersecting.\r\n     * @zh 判断一个包围球是否包含另一个包围球。\r\n     * @param sphere1 第一个包围球。\r\n     * @param sphere2 第二个包围球。\r\n     * @returns 位置关系：0 表示不相交，1 表示包含，2 表示相交。\r\n     */\r\n    static sphereContainsSphere(sphere1: BoundSphere, sphere2: BoundSphere): number {\r\n\r\n        var sphere1R: number = sphere1.radius;\r\n        var sphere2R: number = sphere2.radius;\r\n\r\n        var distance: number = Vector3.distance(sphere1.center, sphere2.center);\r\n\r\n        if (sphere1R + sphere2R < distance)\r\n            return ContainmentType.Disjoint;\r\n\r\n        if (sphere1R - sphere2R < distance)\r\n            return ContainmentType.Intersects;\r\n\r\n        return ContainmentType.Contains;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Finds the closest point on a triangle to a given point in space.\r\n     * @param point The point in space.\r\n     * @param vertex1 The first vertex of the triangle.\r\n     * @param vertex2 The second vertex of the triangle.\r\n     * @param vertex3 The third vertex of the triangle.\r\n     * @param out The closest point on the triangle.\r\n     * @zh 找到空间中点到三角形的最近点。\r\n     * @param point 空间中的点。\r\n     * @param vertex1 三角形的第一个顶点。\r\n     * @param vertex2 三角形的第二个顶点。\r\n     * @param vertex3 三角形的第三个顶点。\r\n     * @param out 三角形上的最近点。\r\n     */\r\n    static closestPointPointTriangle(point: Vector3, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3, out: Vector3): void {\r\n\r\n        Vector3.subtract(vertex2, vertex1, CollisionUtils._tempV30);\r\n        Vector3.subtract(vertex3, vertex1, CollisionUtils._tempV31);\r\n\r\n        Vector3.subtract(point, vertex1, CollisionUtils._tempV32);\r\n        Vector3.subtract(point, vertex2, CollisionUtils._tempV33);\r\n        Vector3.subtract(point, vertex3, CollisionUtils._tempV34);\r\n\r\n        var d1: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV32);\r\n        var d2: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV32);\r\n        var d3: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV33);\r\n        var d4: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV33);\r\n        var d5: number = Vector3.dot(CollisionUtils._tempV30, CollisionUtils._tempV34);\r\n        var d6: number = Vector3.dot(CollisionUtils._tempV31, CollisionUtils._tempV34);\r\n\r\n        if (d1 <= 0 && d2 <= 0) {\r\n            vertex1.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        if (d3 >= 0 && d4 <= d3) {\r\n            vertex2.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        var vc: number = d1 * d4 - d3 * d2;\r\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\r\n            var v: number = d1 / (d1 - d3);\r\n            Vector3.scale(CollisionUtils._tempV30, v, out);\r\n            Vector3.add(vertex1, out, out);\r\n            return;\r\n        }\r\n\r\n        if (d6 >= 0 && d5 <= d6) {\r\n            vertex3.cloneTo(out);\r\n            return;\r\n        }\r\n\r\n        var vb: number = d5 * d2 - d1 * d6;\r\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\r\n            var w: number = d2 / (d2 - d6);\r\n            Vector3.scale(CollisionUtils._tempV31, w, out);\r\n            Vector3.add(vertex1, out, out);\r\n            return;\r\n        }\r\n\r\n        var va: number = d3 * d6 - d5 * d4;\r\n        if (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {\r\n            var w3: number = (d4 - d3) / ((d4 - d3) + (d5 - d6));\r\n            Vector3.subtract(vertex3, vertex2, out);\r\n            Vector3.scale(out, w3, out);\r\n            Vector3.add(vertex2, out, out);\r\n            return;\r\n        }\r\n\r\n        var denom: number = 1 / (va + vb + vc);\r\n        var v2: number = vb * denom;\r\n        var w2: number = vc * denom;\r\n        Vector3.scale(CollisionUtils._tempV30, v2, CollisionUtils._tempV35);\r\n        Vector3.scale(CollisionUtils._tempV31, w2, CollisionUtils._tempV36);\r\n        Vector3.add(CollisionUtils._tempV35, CollisionUtils._tempV36, out);\r\n        Vector3.add(vertex1, out, out);\r\n    }\r\n\r\n    /**\r\n     * @en Finds the closest point on a plane to a given point in space.\r\n     * @param plane The plane.\r\n     * @param point The point in space.\r\n     * @param out The closest point on the plane.\r\n     * @zh 找到空间中点到平面的最近点。\r\n     * @param plane 平面。\r\n     * @param point 空间中的点。\r\n     * @param out 平面上的最近点。\r\n     */\r\n    static closestPointPlanePoint(plane: Plane, point: Vector3, out: Vector3): void {\r\n\r\n        var planeN: Vector3 = plane.normal;\r\n        var t: number = Vector3.dot(planeN, point) - plane.distance;\r\n\r\n        Vector3.scale(planeN, t, CollisionUtils._tempV30);\r\n        Vector3.subtract(point, CollisionUtils._tempV30, out);\r\n    }\r\n\r\n    /**\r\n     * @en Finds the closest point on a bounding box to a given point in space.\r\n     * @param box The bounding box.\r\n     * @param point The point in space.\r\n     * @param out The closest point on the bounding box.\r\n     * @zh 找到空间中点到包围盒的最近点。\r\n     * @param box 包围盒。\r\n     * @param point 空间中的点。\r\n     * @param out 包围盒上的最近点。\r\n     */\r\n    static closestPointBoxPoint(box: BoundBox, point: Vector3, out: Vector3): void {\r\n        Vector3.max(point, box.min, CollisionUtils._tempV30);\r\n        Vector3.min(CollisionUtils._tempV30, box.max, out);\r\n    }\r\n\r\n    /**\r\n     * @en Finds the closest point on a bounding sphere to a given point in space.\r\n     * @param sphere The bounding sphere.\r\n     * @param point The point in space.\r\n     * @param out The closest point on the bounding sphere.\r\n     * @zh 找到空间中点到包围球的最近点。\r\n     * @param sphere 包围球。\r\n     * @param point 空间中的点。\r\n     * @param out 包围球上的最近点。\r\n     */\r\n    static closestPointSpherePoint(sphere: BoundSphere, point: Vector3, out: Vector3): void {\r\n        var sphereC: Vector3 = sphere.center;\r\n\r\n        Vector3.subtract(point, sphereC, out);\r\n        Vector3.normalize(out, out);\r\n\r\n        Vector3.scale(out, sphere.radius, out);\r\n        Vector3.add(out, sphereC, out);\r\n    }\r\n\r\n    /**\r\n     * @en Finds the closest points between two bounding spheres.\r\n     * @param sphere1 The first bounding sphere.\r\n     * @param sphere2 The second bounding sphere.\r\n     * @param out The closest point on the first bounding sphere to the second.\r\n     * @zh 找到两个包围球之间的最近点。\r\n     * @param sphere1 第一个包围球。\r\n     * @param sphere2 第二个包围球。\r\n     * @param out 第一个包围球上到第二个包围球的最近点。\r\n     */\r\n    static closestPointSphereSphere(sphere1: BoundSphere, sphere2: BoundSphere, out: Vector3): void {\r\n        var sphere1C: Vector3 = sphere1.center;\r\n\r\n        Vector3.subtract(sphere2.center, sphere1C, out);\r\n        Vector3.normalize(out, out);\r\n\r\n        Vector3.scale(out, sphere1.radius, out);\r\n        Vector3.add(out, sphere1C, out);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Viewport } from \"../../maths/Viewport\";\r\nimport { Plane } from \"../math/Plane\"\r\nimport { Ray } from \"../math/Ray\"\r\n\r\n/**\r\n * @en Picker class used to create picking.\r\n * @zh Picker 类用于创建拾取。\r\n */\r\nexport class Picker {\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\r\n\t/** @ignore */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @en Calculates a ray originating from the mouse position.\r\n\t * @param point The mouse position in screen space.\r\n\t * @param viewPort The viewport dimensions.\r\n\t * @param projectionMatrix The projection (perspective) matrix.\r\n\t * @param viewMatrix The view matrix.\r\n\t * @param world The world offset matrix.\r\n\t * @param out The output ray.\r\n\t * @zh 根据鼠标位置计算射线。\r\n\t * @param point 屏幕空间中的鼠标位置。\r\n\t * @param viewPort 视口尺寸。\r\n\t * @param projectionMatrix 投影（透视）矩阵。\r\n\t * @param viewMatrix 视图矩阵。\r\n\t * @param world 世界偏移矩阵。\r\n\t * @param out 输出射线。\r\n\t */\r\n\tstatic calculateCursorRay(point: Vector2, viewPort: Viewport, projectionMatrix: Matrix4x4, viewMatrix: Matrix4x4, world: Matrix4x4, out: Ray): void {\r\n\r\n\t\tvar x: number = point.x;\r\n\t\tvar y: number = point.y;\r\n\r\n\t\tvar nearSource: Vector3 = Picker._tempVector30;\r\n\t\tvar nerSourceE: Vector3 = nearSource;\r\n\t\tnerSourceE.x = x;\r\n\t\tnerSourceE.y = y;\r\n\t\tnerSourceE.z = viewPort.minDepth;\r\n\r\n\t\tvar farSource: Vector3 = Picker._tempVector31;\r\n\t\tvar farSourceE: Vector3 = farSource;\r\n\t\tfarSourceE.x = x;\r\n\t\tfarSourceE.y = y;\r\n\t\tfarSourceE.z = viewPort.maxDepth;\r\n\r\n\t\tvar nearPoint: Vector3 = out.origin;\r\n\t\tvar farPoint: Vector3 = Picker._tempVector32;\r\n\r\n\t\tviewPort.unprojectFromWVP(nearSource, projectionMatrix, viewMatrix, world, nearPoint);\r\n\t\tviewPort.unprojectFromWVP(farSource, projectionMatrix, viewMatrix, world, farPoint);\r\n\r\n\t\tvar outDire: Vector3 = out.direction;\r\n\t\toutDire.x = farPoint.x - nearPoint.x;\r\n\t\toutDire.y = farPoint.y - nearPoint.y;\r\n\t\toutDire.z = farPoint.z - nearPoint.z;\r\n\t\tVector3.normalize(out.direction, out.direction);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Calculates the intersection of a ray with a triangle and returns the intersection distance.\r\n\t * @param ray The ray.\r\n\t * @param vertex1 The first vertex of the triangle.\r\n\t * @param vertex2 The second vertex of the triangle.\r\n\t * @param vertex3 The third vertex of the triangle.\r\n\t * @returns The distance from the ray to the triangle, or `Number.NaN` if there is no intersection.\r\n\t * @zh 计算射线与三角形的交点并返回交点距离。\r\n\t * @param ray 射线。\r\n\t * @param vertex1 三角形的第一个顶点。\r\n\t * @param vertex2 三角形的第二个顶点。\r\n\t * @param vertex3 三角形的第三个顶点。\r\n\t * @returns 射线到三角形的距离，如果没有交点则返回 `Number.NaN`。\r\n\t */\r\n\tstatic rayIntersectsTriangle(ray: Ray, vertex1: Vector3, vertex2: Vector3, vertex3: Vector3): number {\r\n\r\n\t\tvar result: number;\r\n\t\t// Compute vectors along two edges of the triangle.\r\n\t\tvar edge1: Vector3 = Picker._tempVector30, edge2: Vector3 = Picker._tempVector31;\r\n\r\n\t\tVector3.subtract(vertex2, vertex1, edge1);\r\n\t\tVector3.subtract(vertex3, vertex1, edge2);\r\n\r\n\t\t// Compute the determinant.\r\n\t\tvar directionCrossEdge2: Vector3 = Picker._tempVector32;\r\n\t\tVector3.cross(ray.direction, edge2, directionCrossEdge2);\r\n\r\n\t\tvar determinant: number;\r\n\t\tdeterminant = Vector3.dot(edge1, directionCrossEdge2);\r\n\r\n\t\t// If the ray is parallel to the triangle plane, there is no collision.\r\n\t\tif (determinant > -Number.MIN_VALUE && determinant < Number.MIN_VALUE) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar inverseDeterminant: number = 1.0 / determinant;\r\n\r\n\t\t// Calculate the U parameter of the intersection point.\r\n\t\tvar distanceVector: Vector3 = Picker._tempVector33;\r\n\t\tVector3.subtract(ray.origin, vertex1, distanceVector);\r\n\r\n\t\tvar triangleU: number;\r\n\t\ttriangleU = Vector3.dot(distanceVector, directionCrossEdge2);\r\n\t\ttriangleU *= inverseDeterminant;\r\n\r\n\t\t// Make sure it is inside the triangle.\r\n\t\tif (triangleU < 0 || triangleU > 1) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Calculate the V parameter of the intersection point.\r\n\t\tvar distanceCrossEdge1: Vector3 = Picker._tempVector34;\r\n\t\tVector3.cross(distanceVector, edge1, distanceCrossEdge1);\r\n\r\n\t\tvar triangleV: number;\r\n\t\ttriangleV = Vector3.dot(ray.direction, distanceCrossEdge1);\r\n\t\ttriangleV *= inverseDeterminant;\r\n\r\n\t\t// Make sure it is inside the triangle.\r\n\t\tif (triangleV < 0 || triangleU + triangleV > 1) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Compute the distance along the ray to the triangle.\r\n\t\tvar rayDistance: number;\r\n\t\trayDistance = Vector3.dot(edge2, distanceCrossEdge1);\r\n\t\trayDistance *= inverseDeterminant;\r\n\r\n\t\t// Is the triangle behind the ray origin?\r\n\t\tif (rayDistance < 0) {\r\n\t\t\tresult = Number.NaN;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tresult = rayDistance;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Detects the intersection point between a ray and a plane.\r\n\t * @param ray The ray.\r\n\t * @param plane The plane.\r\n\t * @returns The intersection point, or `null` if there is no intersection.\r\n\t * @zh 检测射线和平面的交点。\r\n\t * @param ray 射线。\r\n\t * @param plane 平面。\r\n\t * @returns 交点，如果没有交点则返回 `null`。\r\n\t */\r\n\tstatic rayPlaneIntersection(ray: Ray, plane: Plane): Vector3 {\r\n\t\tlet point = new Vector3();\r\n\t\tlet ddotn = Vector3.dot(ray.direction.normalize(), plane.normal.normalize());\r\n\t\tif (ddotn == 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet t = (-plane.distance - Vector3.dot(ray.origin, plane.normal)) / ddotn;\r\n\t\tif (t < 0)\r\n\t\t\treturn null;\r\n\t\tray.at(t, point);\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n\r\n","\r\nimport { Event } from \"../../events/Event\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { MathUtils3D } from \"../../maths/MathUtils3D\";\r\nimport { Matrix3x3 } from \"../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\n\r\n/**\r\n * @en The `Transform3D` class is used to implement 3D transformations.\r\n * @zh `Transform3D` 类用于实现3D变换。\r\n */\r\nexport class Transform3D extends EventDispatcher {\r\n\t/** @internal */\r\n\tprotected static _tempVector30: Vector3 = new Vector3();\r\n\t/** @internal */\r\n\tprotected static _tempQuaternion0: Quaternion = new Quaternion();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix0: Matrix4x4 = new Matrix4x4();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x30: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x31: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x32: Matrix3x3 = new Matrix3x3();\r\n\t/** @internal */\r\n\tprotected static _tempMatrix3x33: Matrix3x3 = new Matrix3x3();\r\n\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALQUATERNION: number = 0x01;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALEULER: number = 0x02;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALMATRIX: number = 0x04;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDPOSITION: number = 0x08;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDQUATERNION: number = 0x10;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDSCALE: number = 0x20;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDMATRIX: number = 0x40;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_WORLDEULER: number = 0x80;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALPOS: number = 0x100;\r\n\t/**@internal */\r\n\tstatic TRANSFORM_LOCALSCALE: number = 0x200;\r\n\r\n\t/**@internal */\r\n\tstatic _angleToRandin: number = 180 / Math.PI;\r\n\r\n\t/** @internal */\r\n\tprotected _owner: Sprite3D;\r\n\t/** @internal */\r\n\tprotected _localPosition: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _localRotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprotected _localScale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprotected _localRotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _localMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\tprotected _position: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _rotation: Quaternion = new Quaternion(0, 0, 0, 1);\r\n\t/** @internal */\r\n\tprotected _scale: Vector3 = new Vector3(1, 1, 1);\r\n\t/**@internal */\r\n\tprotected _rotationEuler: Vector3 = new Vector3(0, 0, 0);\r\n\t/** @internal */\r\n\tprotected _worldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n\t/** @internal */\r\n\t_children: Transform3D[] | null = null;\r\n\t/**@internal 如果为true 表示自身相对于父节点并无任何改变，将通过这个参数忽略计算*/\r\n\tprotected _isDefaultMatrix: boolean = false;\r\n\t/**@internal @protected */\r\n\tprotected _faceInvert: boolean = false;\r\n\t/**@internal @protected */\r\n\tprotected _frontFaceValue: number = 1;\r\n\r\n\t/** @internal */\r\n\t_parent: Transform3D | null = null;\r\n\t/**@internal */\r\n\tprivate _transformFlag: number = 0;\r\n\r\n\r\n\t/**\r\n\t * @en Whether it is the default matrix. If `true`, it indicates that there is no change relative to the parent node, and calculations will be skipped based on this parameter.\r\n\t * @zh 是否为默认矩阵，如果为true，表示自身相对于父节点并无任何改变，将通过这个参数忽略计算。\r\n\t */\r\n\tget isDefaultMatrix(): boolean {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\r\n\t\t\tlet localMat = this.localMatrix;\r\n\t\t}\r\n\t\treturn this._isDefaultMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _isFrontFaceInvert(): boolean {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tvar scale: Vector3 = this.getWorldLossyScale();\r\n\t\t\tvar isInvert: boolean = scale.x < 0;\r\n\t\t\t(scale.y < 0) && (isInvert = !isInvert);\r\n\t\t\t(scale.z < 0) && (isInvert = !isInvert);\r\n\t\t\tthis._faceInvert = isInvert;\r\n\t\t\tthis._frontFaceValue = this._faceInvert ? -1 : 1;\r\n\t\t}\r\n\t\treturn this._faceInvert;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the front face is clockwise.\r\n\t * @zh 获取是否前向顺时针面。\r\n\t */\r\n\tgetFrontFaceValue(): number {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tlet value = this._isFrontFaceInvert;\r\n\t\t}\r\n\t\treturn this._frontFaceValue;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en The sprite to which this transform belongs.\r\n\t * @zh 所属精灵。\r\n\t */\r\n\tget owner(): Sprite3D {\r\n\t\treturn this._owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the world matrix needs to be updated.\r\n\t * @zh 世界矩阵是否需要更新。\r\n\t */\r\n\tget worldNeedUpdate(): boolean {\r\n\t\treturn this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The X component of the local position.\r\n\t * @zh 局部位置X轴分量。\r\n\t */\r\n\tget localPositionX(): number {\r\n\t\treturn this._localPosition.x;\r\n\t}\r\n\r\n\tset localPositionX(x: number) {\r\n\t\tthis._localPosition.x = x;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Y component of the local position.\r\n\t * @zh 局部位置Y轴分量。\r\n\t */\r\n\tget localPositionY(): number {\r\n\t\treturn this._localPosition.y;\r\n\t}\r\n\r\n\tset localPositionY(y: number) {\r\n\t\tthis._localPosition.y = y;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Z component of the local position.\r\n\t * @zh 局部位置Z轴分量。\r\n\t */\r\n\tget localPositionZ(): number {\r\n\t\treturn this._localPosition.z;\r\n\t}\r\n\r\n\tset localPositionZ(z: number) {\r\n\t\tthis._localPosition.z = z;\r\n\t\tthis.localPosition = this._localPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The local position.\r\n\t * @zh 局部位置。\r\n\t */\r\n\tget localPosition(): Vector3 {\r\n\t\treturn this._localPosition;\r\n\t}\r\n\r\n\tset localPosition(value: Vector3) {\r\n\t\tif (this._localPosition !== value)\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldPositionTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en The X component of the local rotation quaternion.\r\n\t * @zh 局部旋转四元数X分量。\r\n\t */\r\n\tget localRotationX(): number {\r\n\t\treturn this.localRotation.x;\r\n\t}\r\n\r\n\tset localRotationX(x: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.x = x;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Y component of the local rotation quaternion.\r\n\t * @zh 局部旋转四元数Y分量。\r\n\t */\r\n\tget localRotationY(): number {\r\n\t\treturn this.localRotation.y;\r\n\t}\r\n\r\n\tset localRotationY(y: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.y = y;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Z component of the local rotation quaternion.\r\n\t * @zh 局部旋转四元数Z分量。\r\n\t */\r\n\tget localRotationZ(): number {\r\n\t\treturn this.localRotation.z;\r\n\t}\r\n\r\n\tset localRotationZ(z: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.z = z;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The W component of the local rotation quaternion.\r\n\t * @zh 局部旋转四元数W分量。\r\n\t */\r\n\tget localRotationW(): number {\r\n\t\treturn this.localRotation.w;\r\n\t}\r\n\r\n\tset localRotationW(w: number) {\r\n\t\tlet rot = this.localRotation;\r\n\t\trot.w = w;\r\n\t\tthis.localRotation = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The local rotation.\r\n\t * @zh 局部旋转。\r\n\t */\r\n\tget localRotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION)) {\r\n\t\t\tvar eulerE: Vector3 = this._localRotationEuler;\r\n\t\t\tQuaternion.createFromYawPitchRoll(eulerE.y / Transform3D._angleToRandin, eulerE.x / Transform3D._angleToRandin, eulerE.z / Transform3D._angleToRandin, this._localRotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._localRotation;\r\n\t}\r\n\r\n\tset localRotation(value: Quaternion) {\r\n\t\tif (this._localRotation !== value)\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\tthis._localRotation.normalize(this._localRotation);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION, false);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en The X component of the local scale.\r\n\t * @zh 局部缩放X。\r\n\t */\r\n\tget localScaleX(): number {\r\n\t\treturn this._localScale.x;\r\n\t}\r\n\r\n\tset localScaleX(value: number) {\r\n\t\tthis._localScale.x = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Y component of the local scale.\r\n\t * @zh 局部缩放Y。\r\n\t */\r\n\tget localScaleY(): number {\r\n\t\treturn this._localScale.y;\r\n\t}\r\n\r\n\tset localScaleY(value: number) {\r\n\t\tthis._localScale.y = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Z component of the local scale.\r\n\t * @zh 局部缩放Z。\r\n\t */\r\n\tget localScaleZ(): number {\r\n\t\treturn this._localScale.z;\r\n\t}\r\n\r\n\tset localScaleZ(value: number) {\r\n\t\tthis._localScale.z = value;\r\n\t\tthis.localScale = this._localScale;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The local scale of the transform.\r\n\t * @zh 局部缩放。\r\n\t */\r\n\tget localScale(): Vector3 {\r\n\t\treturn this._localScale;\r\n\t}\r\n\r\n\tset localScale(value: Vector3) {\r\n\t\tif (this._localScale !== value)\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldScaleTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en The X component of the local rotation euler angles.\r\n\t * @zh 局部空间的X轴欧拉角。\r\n\t */\r\n\tget localRotationEulerX(): number {\r\n\t\treturn this.localRotationEuler.x;\r\n\t}\r\n\r\n\tset localRotationEulerX(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.x = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Y component of the local rotation euler angles.\r\n\t * @zh 局部空间的Y轴欧拉角。\r\n\t */\r\n\tget localRotationEulerY(): number {\r\n\t\treturn this.localRotationEuler.y;\r\n\t}\r\n\r\n\tset localRotationEulerY(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.y = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Z component of the local rotation euler angles.\r\n\t * @zh 局部空间的Z轴欧拉角。\r\n\t */\r\n\tget localRotationEulerZ(): number {\r\n\t\treturn this.localRotationEuler.z;\r\n\t}\r\n\r\n\tset localRotationEulerZ(value: number) {\r\n\t\tlet rot = this.localRotationEuler;\r\n\t\trot.z = value;\r\n\t\tthis.localRotationEuler = rot;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The local rotation euler angles of the transform.\r\n\t * @zh 局部空间欧拉角。\r\n\t */\r\n\tget localRotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALEULER)) {\r\n\t\t\tthis._localRotation.getYawPitchRoll(Transform3D._tempVector30);\r\n\t\t\tvar euler: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar localRotationEuler: Vector3 = this._localRotationEuler;\r\n\t\t\tlocalRotationEuler.x = euler.y * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.y = euler.x * Transform3D._angleToRandin;\r\n\t\t\tlocalRotationEuler.z = euler.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\t}\r\n\t\treturn this._localRotationEuler;\r\n\t}\r\n\r\n\tset localRotationEuler(value: Vector3) {\r\n\t\tif (this._localRotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._localRotationEuler);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALMATRIX, true);\r\n\t\tthis._onWorldRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en The local matrix.\r\n\t * @zh 局部矩阵。\r\n\t */\r\n\tget localMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)) {\r\n\t\t\tMatrix4x4.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);\r\n\t\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\t}\r\n\t\treturn this._localMatrix;\r\n\t}\r\n\r\n\tset localMatrix(value: Matrix4x4) {\r\n\t\tif (this._localMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\tthis._isDefaultMatrix = this._localMatrix.isIdentity();\r\n\t\tthis._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER, true);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en World position.\r\n\t * @zh 世界位置。\r\n\t */\r\n\tget position(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\tvar worldMatE = this.worldMatrix.elements;\r\n\t\t\t\tthis._position.x = worldMatE[12];\r\n\t\t\t\tthis._position.y = worldMatE[13];\r\n\t\t\t\tthis._position.z = worldMatE[14];\r\n\t\t\t} else {\r\n\t\t\t\tthis._localPosition.cloneTo(this._position);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t\t}\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset position(value: Vector3) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tvar parentInvMat: Matrix4x4 = Transform3D._tempMatrix0;\r\n\t\t\tthis._parent.worldMatrix.invert(parentInvMat);\r\n\t\t\tVector3.transformCoordinate(value, parentInvMat, this._localPosition);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue.cloneTo(this._localPosition);\r\n\t\t}\r\n\t\tthis.localPosition = this._localPosition;\r\n\t\tif (this._position !== value)\r\n\t\t\tvalue.cloneTo(this._position);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @en World rotation.\r\n\t * @zh 世界旋转。\r\n\t */\r\n\tget rotation(): Quaternion {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n\t\t\tif (this._parent != null)\r\n\t\t\t\tQuaternion.multiply(this._parent.rotation, this.localRotation, this._rotation);//使用localRotation不使用_localRotation,内部需要计算\r\n\t\t\telse\r\n\t\t\t\tthis.localRotation.cloneTo(this._rotation);\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t\t}\r\n\t\treturn this._rotation;\r\n\t}\r\n\r\n\tset rotation(value: Quaternion) {\r\n\t\tif (this._parent != null) {\r\n\t\t\tthis._parent.rotation.invert(Transform3D._tempQuaternion0);\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, value, this._localRotation);\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localRotation);\r\n\t\t}\r\n\t\tthis.localRotation = this._localRotation;\r\n\t\tif (value !== this._rotation)\r\n\t\t\tvalue.cloneTo(this._rotation);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Rotation angles in world space, in the order of x, y, z.\r\n\t * @zh 世界空间的旋转角度，顺序为x、y、z。\r\n\t */\r\n\tget rotationEuler(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis.rotation.getYawPitchRoll(Transform3D._tempVector30);//使用rotation属性,可能需要更新\r\n\t\t\tvar eulerE: Vector3 = Transform3D._tempVector30;\r\n\t\t\tvar rotationEulerE: Vector3 = this._rotationEuler;\r\n\t\t\trotationEulerE.x = eulerE.y * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.y = eulerE.x * Transform3D._angleToRandin;\r\n\t\t\trotationEulerE.z = eulerE.z * Transform3D._angleToRandin;\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t\t}\r\n\t\treturn this._rotationEuler;\r\n\t}\r\n\r\n\tset rotationEuler(value: Vector3) {\r\n\t\tQuaternion.createFromYawPitchRoll(value.y / Transform3D._angleToRandin, value.x / Transform3D._angleToRandin, value.z / Transform3D._angleToRandin, this._rotation);\r\n\t\tthis.rotation = this._rotation;\r\n\t\tif (this._rotationEuler !== value)\r\n\t\t\tvalue.cloneTo(this._rotationEuler);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @en World matrix.\r\n\t * @zh 世界矩阵。\r\n\t */\r\n\tget worldMatrix(): Matrix4x4 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)) {\r\n\t\t\tif (this._parent != null) {\r\n\t\t\t\t//这里将剔除单位矩阵的计算\r\n\t\t\t\tlet effectiveTrans = this._parent;\r\n\r\n\t\t\t\twhile (effectiveTrans._parent && effectiveTrans.isDefaultMatrix) {\r\n\t\t\t\t\teffectiveTrans = effectiveTrans._parent;\r\n\t\t\t\t}\r\n\t\t\t\tMatrix4x4.multiply(effectiveTrans.worldMatrix, this.localMatrix, this._worldMatrix);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.localMatrix.cloneTo(this._worldMatrix);\r\n\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t\t}\r\n\t\treturn this._worldMatrix;\r\n\t}\r\n\r\n\tset worldMatrix(value: Matrix4x4) {\r\n\t\tif (this._parent === null) {\r\n\t\t\tvalue.cloneTo(this._localMatrix);\r\n\t\t} else {\r\n\t\t\tthis._parent.worldMatrix.invert(this._localMatrix);\r\n\t\t\tMatrix4x4.multiply(this._localMatrix, value, this._localMatrix);\r\n\t\t}\r\n\t\tthis.localMatrix = this._localMatrix;\r\n\t\tif (this._worldMatrix !== value)\r\n\t\t\tvalue.cloneTo(this._worldMatrix);\r\n\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Creates an instance of Transform3D.\r\n\t * @param owner The sprite of the owner.\r\n\t * @zh 创建一个 Transform3D 的实例。\r\n\t * @param owner 所属精灵。\r\n\t */\r\n\tconstructor(owner: Sprite3D) {\r\n\t\tsuper();\r\n\t\tthis._owner = owner;\r\n\t\tthis._children = [];\r\n\t\tthis._initProperty();\r\n\t}\r\n\r\n\tprotected _initProperty() {\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION | Transform3D.TRANSFORM_LOCALEULER | Transform3D.TRANSFORM_LOCALMATRIX, false);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE | Transform3D.TRANSFORM_WORLDMATRIX, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_getScaleMatrix(): Matrix3x3 {\r\n\t\tvar invRotation: Quaternion = Transform3D._tempQuaternion0;\r\n\t\tvar invRotationMat: Matrix3x3 = Transform3D._tempMatrix3x30;\r\n\t\tvar worldRotScaMat: Matrix3x3 = Transform3D._tempMatrix3x31;\r\n\t\tvar scaMat: Matrix3x3 = Transform3D._tempMatrix3x32;\r\n\t\tMatrix3x3.createFromMatrix4x4(this.worldMatrix, worldRotScaMat)\r\n\t\tthis.rotation.invert(invRotation);\r\n\t\tMatrix3x3.createRotationQuaternion(invRotation, invRotationMat);\r\n\t\tMatrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\r\n\t\treturn scaMat;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _setTransformFlag(type: number, value: boolean): void {\r\n\t\tif (value)\r\n\t\t\tthis._transformFlag |= type;\r\n\t\telse\r\n\t\t\tthis._transformFlag &= ~type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _getTransformFlag(type: number): boolean {\r\n\t\treturn (this._transformFlag & type) != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setParent(value: Transform3D): void {\r\n\t\tif (this._parent !== value) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tvar parentChilds: Transform3D[] = this._parent._children!;\r\n\t\t\t\tvar index: number = parentChilds.indexOf(this);\r\n\t\t\t\tparentChilds.splice(index, 1);\r\n\t\t\t}\r\n\t\t\tif (value) {\r\n\t\t\t\tvalue._children!.push(this);\r\n\t\t\t\t(value) && (this._onWorldTransform());\r\n\t\t\t}\r\n\t\t\tthis._parent = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldPositionRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldPositionScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldPositionTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldRotationTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionRotationTransform();//父节点旋转发生变化，子节点的世界位置和旋转都需要更新\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _onWorldScaleTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldPositionScaleTransform();//父节点缩放发生变化，子节点的世界位置和缩放都需要更新\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onWorldTransform(): void {\r\n\t\tif (!this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER) || !this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX | Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDEULER | Transform3D.TRANSFORM_WORLDSCALE, true);\r\n\t\t\tthis.event(Event.TRANSFORM_CHANGED, this._transformFlag);\r\n\t\t}\r\n\t\tfor (var i: number = 0, n: number = this._children!.length; i < n; i++)\r\n\t\t\tthis._children![i]._onWorldTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @en Perform translation transformation.\r\n\t * @param translation The distance to move.\r\n\t * @param isLocal Whether to use local space. Default is true.\r\n\t * @zh 平移变换。\r\n\t * @param translation 移动距离。\r\n\t * @param isLocal 是否局部空间。默认为 true。\r\n\t */\r\n\ttranslate(translation: Vector3, isLocal: boolean = true): void {\r\n\t\tif (isLocal) {\r\n\t\t\tMatrix4x4.createFromQuaternion(this.localRotation, Transform3D._tempMatrix0);\r\n\t\t\tVector3.transformCoordinate(translation, Transform3D._tempMatrix0, Transform3D._tempVector30);\r\n\t\t\tVector3.add(this.localPosition, Transform3D._tempVector30, this._localPosition);\r\n\t\t\tthis.localPosition = this._localPosition;\r\n\t\t} else {\r\n\t\t\tVector3.add(this.position, translation, this._position);\r\n\t\t\tthis.position = this._position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Perform rotation transformation.\r\n\t * @param rotation The rotation amount.\r\n\t * @param isLocal Whether to use local space. Default is true.\r\n\t * @param isRadian Whether the rotation is in radians. Default is true.\r\n\t * @zh 旋转变换。\r\n\t * @param rotation 旋转幅度。\r\n\t * @param isLocal 是否局部空间。默认为 true。\r\n\t * @param isRadian 是否弧度制。默认为 true。\r\n\t */\r\n\trotate(rotation: Vector3, isLocal: boolean = true, isRadian: boolean = true): void {\r\n\t\tvar rot: Vector3;\r\n\t\tif (isRadian) {\r\n\t\t\trot = rotation;\r\n\t\t} else {\r\n\t\t\tVector3.scale(rotation, Math.PI / 180.0, Transform3D._tempVector30);\r\n\t\t\trot = Transform3D._tempVector30;\r\n\t\t}\r\n\r\n\t\tQuaternion.createFromYawPitchRoll(rot.y, rot.x, rot.z, Transform3D._tempQuaternion0);\r\n\t\tif (isLocal) {\r\n\t\t\tQuaternion.multiply(this.localRotation, Transform3D._tempQuaternion0, this._localRotation);\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tQuaternion.multiply(Transform3D._tempQuaternion0, this.rotation, this._rotation);\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the forward direction.\r\n\t * @param forward The vector to the forward direction.\r\n\t * @zh 获取向前方向。\r\n\t * @param forward 前方向。\r\n\t */\r\n\tgetForward(forward: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tforward.x = -worldMatElem[8];\r\n\t\tforward.y = -worldMatElem[9];\r\n\t\tforward.z = -worldMatElem[10];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the up direction.\r\n\t * @param up The vector to the up direction.\r\n\t * @zh 获取向上方向。\r\n\t * @param up 上方向。\r\n\t */\r\n\tgetUp(up: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tup.x = worldMatElem[4];\r\n\t\tup.y = worldMatElem[5];\r\n\t\tup.z = worldMatElem[6];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the right direction.\r\n\t * @param right The vector to the right direction.\r\n\t * @zh 获取向右方向。\r\n\t * @param right 右方向。\r\n\t */\r\n\tgetRight(right: Vector3): void {\r\n\t\tvar worldMatElem: Float32Array = this.worldMatrix.elements;\r\n\t\tright.x = worldMatElem[0];\r\n\t\tright.y = worldMatElem[1];\r\n\t\tright.z = worldMatElem[2];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Look at a target position.\r\n\t * @param target The target to look at.\r\n\t * @param up The up vector.\r\n\t * @param isLocal Whether to use local space. Default is false.\r\n\t * @param isCamera Whether it's a camera. Default is true.\r\n\t * @zh 观察目标位置。\r\n\t * @param target 观察目标。\r\n\t * @param up 向上向量。\r\n\t * @param isLocal 是否局部空间。默认为 false。\r\n\t * @param isCamera 是否为相机。默认为 true。\r\n\t */\r\n\tlookAt(target: Vector3, up: Vector3, isLocal: boolean = false, isCamera: boolean = true): void {\r\n\t\tvar eye: Vector3;\r\n\t\tif (isLocal) {\r\n\t\t\teye = this.localPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\t\t\tif (isCamera) {\r\n\t\t\t\tQuaternion.lookAt(this.localPosition, target, up, this._localRotation);\r\n\t\t\t\tthis._localRotation.invert(this._localRotation);\r\n\t\t\t} else {\r\n\t\t\t\tVector3.subtract(this.localPosition, target, Transform3D._tempVector30);\r\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this._localRotation);\r\n\t\t\t\tthis._localRotation.invert(this._localRotation);\r\n\t\t\t}\r\n\r\n\t\t\tthis.localRotation = this._localRotation;\r\n\t\t} else {\r\n\t\t\tvar worldPosition: Vector3 = this.position;\r\n\t\t\teye = worldPosition;\r\n\t\t\tif (Math.abs(eye.x - target.x) < MathUtils3D.zeroTolerance && Math.abs(eye.y - target.y) < MathUtils3D.zeroTolerance && Math.abs(eye.z - target.z) < MathUtils3D.zeroTolerance)\r\n\t\t\t\treturn;\r\n\t\t\tif (isCamera) {\r\n\t\t\t\tQuaternion.lookAt(worldPosition, target, up, this._rotation);\r\n\t\t\t\tthis._rotation.invert(this._rotation);\r\n\t\t\t} else {\r\n\t\t\t\tVector3.subtract(this.position, target, Transform3D._tempVector30);\r\n\t\t\t\tQuaternion.rotationLookAt(Transform3D._tempVector30, up, this._rotation);\r\n\t\t\t\tthis._rotation.invert(this._rotation);\r\n\t\t\t}\r\n\t\t\tthis.rotation = this._rotation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Make the object face towards a target.\r\n\t * @param target The target position to face.\r\n\t * @param up The up vector.\r\n\t * @param isLocal Whether to use local space. Default is false.\r\n\t * @zh 对象朝向目标。\r\n\t * @param target 朝向目标位置。\r\n\t * @param up 向上向量。\r\n\t * @param isLocal 是否局部空间。默认为 false。\r\n\t */\r\n\tobjLookat(target: Vector3, up: Vector3, isLocal: boolean = false): void {\r\n\t\tthis.lookAt(target, up, isLocal, false);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @en The world scale.\r\n\t * Under certain conditions, obtaining this value may not be accurate (e.g., when the parent node has scaling and the child node has rotation). \r\n\t * The scaling may be skewed and cannot be correctly represented using Vector3. A Matrix3x3 matrix must be used for correct representation.\r\n\t * @returns The world scale.\r\n\t * @zh 世界缩放。\r\n\t * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转）。\r\n\t * 缩放会倾斜，无法使用Vector3正确表示，必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @returns 世界缩放。\r\n\t */\r\n\tgetWorldLossyScale(): Vector3 {\r\n\t\tif (this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n\t\t\tif (this._parent !== null) {\r\n\t\t\t\tvar scaMatE = this._getScaleMatrix().elements;\r\n\t\t\t\tthis._scale.x = scaMatE[0];\r\n\t\t\t\tthis._scale.y = scaMatE[4];\r\n\t\t\t\tthis._scale.z = scaMatE[8];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._localScale.cloneTo(this._scale);\r\n\t\t\t}\r\n\t\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t\t}\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Set the world scale.\r\n\t * Under certain conditions, setting this value may not be accurate (e.g., when the parent node has scaling and the child node has rotation). \r\n\t * The scaling may be skewed and cannot be correctly represented using Vector3. A Matrix3x3 matrix must be used for correct representation.\r\n\t * @param value The world scale to set.\r\n\t * @return The world scale.\r\n\t * @zh 设置世界缩放。\r\n\t * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转）。\r\n\t * 缩放会倾斜，无法使用Vector3正确表示，必须使用Matrix3x3矩阵才能正确表示。\r\n\t * @param value 要设置的世界缩放。\r\n\t * @return\t世界缩放。\r\n\t */\r\n\tsetWorldLossyScale(value: Vector3) {\r\n\t\tif (this._parent !== null) {\r\n\t\t\tvar scaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMat: Matrix3x3 = Transform3D._tempMatrix3x33;\r\n\t\t\tvar localScaleMatE: Float32Array = localScaleMat.elements;\r\n\t\t\tvar parInvScaleMat: Matrix3x3 = this._parent._getScaleMatrix();\r\n\t\t\tparInvScaleMat.invert(parInvScaleMat);\r\n\t\t\tMatrix3x3.createFromScaling(value, scaleMat);\r\n\t\t\tMatrix3x3.multiply(parInvScaleMat, scaleMat, localScaleMat);\r\n\t\t\tthis._localScale.x = localScaleMatE[0];\r\n\t\t\tthis._localScale.y = localScaleMatE[4];\r\n\t\t\tthis._localScale.z = localScaleMatE[8];\r\n\t\t} else {\r\n\t\t\tvalue.cloneTo(this._localScale);\r\n\t\t}\r\n\t\tthis.localScale = this._localScale;\r\n\t\tif (this._scale !== value)\r\n\t\t\tvalue.cloneTo(this._scale);\r\n\t\tthis._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transform a local vector to global space.\r\n\t * @param value The local vector to transform.\r\n\t * @param out The output global vector.\r\n\t * @zh 将局部向量转换为全局向量。\r\n\t * @param value 要转换的局部向量。\r\n\t * @param out 输出的全局向量。\r\n\t */\r\n\tlocalToGlobal(value: Vector3, out: Vector3): void {\r\n\t\tVector3.transformV3ToV3(value, this.worldMatrix, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transform a global position to local space.\r\n\t * @param pos The world position to transform.\r\n\t * @param out The output local position.\r\n\t * @zh 将世界坐标转换为局部坐标。\r\n\t * @param pos 要转换的世界坐标。\r\n\t * @param out 输出的局部坐标。\r\n\t */\r\n\tglobalToLocal(pos: Vector3, out: Vector3): void {\r\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\r\n\t\tVector3.transformV3ToV3(pos, Transform3D._tempMatrix0, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transform a global normal vector to local space.\r\n\t * @param pos The global normal vector to transform.\r\n\t * @param out The output local normal vector.\r\n\t * @zh 将全局法线向量转换为局部空间。\r\n\t * @param pos 要转换的全局法线向量。\r\n\t * @param out 输出的局部法线向量。\r\n\t */\r\n\ttoLocalNormal(pos: Vector3, out: Vector3): void {\r\n\t\tthis.worldMatrix.invert(Transform3D._tempMatrix0);\r\n\t\tVector3.TransformNormal(pos, Transform3D._tempMatrix0, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Rotate to face a specified direction.\r\n\t * @param forward The forward vector.\r\n\t * @param dir The target direction to face.\r\n\t * @zh 朝向指定方向。\r\n\t * @param forward 前向向量。\r\n\t * @param dir 目标朝向方向。\r\n\t */\r\n\ttoDir(forward: Vector3, dir: Vector3) {\r\n\t\tthis.rotationTo(this.rotation, forward, dir);\r\n\t\tthis.rotation = this.rotation;\r\n\t}\r\n\t/**@internal */\r\n\tstatic tmpVec3: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en This is a function from glmatrix. Sets a quaternion to represent the shortest rotation from one vector to another.\r\n\t * Both vectors are assumed to be unit length.\r\n\t * @param out The receiving quaternion.\r\n\t * @param a The initial vector (normalized).\r\n\t * @param b The destination vector (normalized).\r\n\t * @returns {boolean} True if a rotation was applied, false if the vectors are already aligned.\r\n\t * @zh 这是一个 glmatrix 中的函数。设置一个四元数来表示从一个向量到另一个向量的最短旋转。\r\n\t * 假设两个向量都是单位长度。\r\n\t * @param out 接收结果的四元数。\r\n\t * @param a 初始向量（已归一化）。\r\n\t * @param b 目标向量（已归一化）。\r\n\t * @returns {boolean} 如果应用了旋转则返回 true，如果向量已经对齐则返回 false。\r\n\t */\r\n\trotationTo(out: Quaternion, a: Vector3, b: Vector3): boolean {\r\n\t\tvar dot: number = Vector3.dot(a, b);\r\n\t\tif (dot < -0.999999) {// 180度了，可以选择多个轴旋转\r\n\t\t\tVector3.cross(Vector3.UnitX, a, Transform3D.tmpVec3);\r\n\t\t\tif (Vector3.scalarLength(Transform3D.tmpVec3) < 0.000001)\r\n\t\t\t\tVector3.cross(Vector3.UnitY, a, Transform3D.tmpVec3);\r\n\t\t\tVector3.normalize(Transform3D.tmpVec3, Transform3D.tmpVec3);\r\n\t\t\tQuaternion.createFromAxisAngle(Transform3D.tmpVec3, Math.PI, out);\r\n\t\t\treturn true\r\n\t\t} else if (dot > 0.999999) {// 没有变化\r\n\t\t\tout.x = 0;\r\n\t\t\tout.y = 0;\r\n\t\t\tout.z = 0;\r\n\t\t\tout.w = 1;\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\t// 下面是求这个四元数，这是一个简化求法，根据cos(a/2)=√((1+dot)/2), cos(a/2)sin(a/2)=sin(a)/2 就能推导出来\r\n\t\t\tVector3.cross(a, b, Transform3D.tmpVec3);\r\n\t\t\tout.x = Transform3D.tmpVec3.x;\r\n\t\t\tout.y = Transform3D.tmpVec3.y;\r\n\t\t\tout.z = Transform3D.tmpVec3.z;\r\n\t\t\tout.w = 1 + dot;\r\n\t\t\tout.normalize(out);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t//----------------------------------------Discard-------------------------------------------------\r\n\t/**\r\n\t * 世界坐标系缩放。\r\n\t * @deprecated\r\n\t */\r\n\tget scale(): Vector3 {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use getWorldLossyScale instead.\");\r\n\t\treturn this.getWorldLossyScale();\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tset scale(value: Vector3) {\r\n\t\tconsole.warn(\"Transfrm3D: discard function,please use setWorldLossyScale instead.\");\r\n\t\tthis.setWorldLossyScale(value);\r\n\t}\r\n}\r\n\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { BaseRender } from \"./render/BaseRender\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n\r\n/**\r\n * @deprecated\r\n * <code>RenderableSprite3D</code> 类用于可渲染3D精灵的父类，抽象类不允许实例。\r\n */\r\nexport class RenderableSprite3D extends Sprite3D {\r\n\t/**精灵级着色器宏定义,接收阴影。*/\r\n\tstatic SHADERDEFINE_RECEIVE_SHADOW: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图。*/\r\n\tstatic SAHDERDEFINE_LIGHTMAP: ShaderDefine;\r\n\t/**精灵级着色器宏定义,光照贴图方向。 */\r\n\tstatic SHADERDEFINE_LIGHTMAP_DIRECTIONAL: ShaderDefine;\r\n\t/**着色器变量名，光照贴图缩放和偏移。*/\r\n\tstatic LIGHTMAPSCALEOFFSET: number;\r\n\t/**着色器变量名，光照贴图。*/\r\n\tstatic LIGHTMAP: number;\r\n\t/**着色器变量名，光照贴图方向。*/\r\n\tstatic LIGHTMAP_DIRECTION: number;\r\n\t/**拾取颜色。*/\r\n\tstatic PICKCOLOR: number;\r\n\r\n\r\n\t/** 反射探针位置 最大、最小值*/\r\n\tstatic REFLECTIONCUBE_PROBEPOSITION: number;\r\n\tstatic REFLECTIONCUBE_PROBEBOXMAX: number;\r\n\tstatic REFLECTIONCUBE_PROBEBOXMIN: number;\r\n\r\n\t/** volumetric GI */\r\n\r\n\tstatic VOLUMETRICGI_PROBECOUNTS: number;\r\n\tstatic VOLUMETRICGI_PROBESTEPS: number;\r\n\tstatic VOLUMETRICGI_PROBESTARTPOS: number;\r\n\tstatic VOLUMETRICGI_PROBEPARAMS: number;\r\n\tstatic VOLUMETRICGI_IRRADIANCE: number;\r\n\tstatic VOLUMETRICGI_DISTANCE: number;\r\n\r\n\t/** @internal */\r\n\tstatic IBLTEX: number;\r\n\t/** @internal */\r\n\tstatic IBLROUGHNESSLEVEL: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTSH: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTCOLOR: number;\r\n\t/** @internal */\r\n\tstatic AMBIENTINTENSITY: number;\r\n\t/** @internal */\r\n\tstatic REFLECTIONINTENSITY: number;\r\n\r\n\t/// Morph target\r\n\r\n\tstatic SHADERDEFINE_MORPHTARGET: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_POSITION: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_NORMAL: ShaderDefine;\r\n\tstatic SHADERDEFINE_MORPHTARGET_TANGENT: ShaderDefine;\r\n\r\n\t/** @internal */\r\n\tstatic MorphTex: number;\r\n\t/** @internal */\r\n\tstatic MorphParams: number;\r\n\t/** @internal */\r\n\tstatic MorphAttriOffset: number;\r\n\t/** @internal */\r\n\tstatic MorphActiceTargets: number;\r\n\t/** @internal */\r\n\tstatic MorphActiveCount: number;\r\n\r\n\t//--------------------------------------------------------deprecated------------------------------------------------------------------------\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAR: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAG: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHAB: number;\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tstatic AMBIENTSHBR: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHBG: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHBB: number;\r\n\t/**\r\n\t* @deprecated\r\n\t* @internal\r\n\t*/\r\n\tstatic AMBIENTSHC: number;\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射贴图 \r\n\t */\r\n\tstatic REFLECTIONTEXTURE: number;\r\n\t/**\r\n\t * @deprecated\r\n\t *  反射贴图参数 \r\n\t */\r\n\tstatic REFLECTIONCUBE_HDR_PARAMS: number;\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tRenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW = Shader3D.getDefineByName(\"RECEIVESHADOW\");\r\n\t\tRenderableSprite3D.SAHDERDEFINE_LIGHTMAP = Shader3D.getDefineByName(\"LIGHTMAP\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL = Shader3D.getDefineByName(\"LIGHTMAP_DIRECTIONAL\");\r\n\r\n\t\tRenderableSprite3D.LIGHTMAPSCALEOFFSET = Shader3D.propertyNameToID(\"u_LightmapScaleOffset\");\r\n\t\tRenderableSprite3D.LIGHTMAP = Shader3D.propertyNameToID(\"u_LightMap\");\r\n\t\tRenderableSprite3D.LIGHTMAP_DIRECTION = Shader3D.propertyNameToID(\"u_LightMapDirection\");\r\n\t\tRenderableSprite3D.PICKCOLOR = Shader3D.propertyNameToID(\"u_PickColor\");\r\n\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION = Shader3D.propertyNameToID(\"u_SpecCubeProbePosition\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX = Shader3D.propertyNameToID(\"u_SpecCubeBoxMax\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN = Shader3D.propertyNameToID(\"u_SpecCubeBoxMin\");\r\n\r\n\t\t// volumestric GI\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBECOUNTS = Shader3D.propertyNameToID(\"u_VolGIProbeCounts\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBESTEPS = Shader3D.propertyNameToID(\"u_VolGIProbeStep\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS = Shader3D.propertyNameToID(\"u_VolGIProbeStartPosition\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_PROBEPARAMS = Shader3D.propertyNameToID(\"u_VolGIProbeParams\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_IRRADIANCE = Shader3D.propertyNameToID(\"u_ProbeIrradiance\");\r\n\t\tRenderableSprite3D.VOLUMETRICGI_DISTANCE = Shader3D.propertyNameToID(\"u_ProbeDistance\");\r\n\r\n\t\t//ambient Color\r\n\t\tRenderableSprite3D.AMBIENTCOLOR = Shader3D.propertyNameToID(\"u_AmbientColor\");\r\n\t\t// sh \r\n\t\tRenderableSprite3D.AMBIENTSH = Shader3D.propertyNameToID(\"u_IblSH\");\r\n\t\t//GI instance\r\n\t\tRenderableSprite3D.AMBIENTINTENSITY = Shader3D.propertyNameToID(\"u_AmbientIntensity\");\r\n\t\tRenderableSprite3D.REFLECTIONINTENSITY = Shader3D.propertyNameToID(\"u_ReflectionIntensity\");\r\n\t\tRenderableSprite3D.IBLTEX = Shader3D.propertyNameToID(\"u_IBLTex\");\r\n\t\tRenderableSprite3D.IBLROUGHNESSLEVEL = Shader3D.propertyNameToID(\"u_IBLRoughnessLevel\");\r\n\r\n\t\tconst commandUniform = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Sprite3D\");\r\n\r\n\t\t/// morph target\r\n\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET = Shader3D.getDefineByName(\"MORPHTARGETS\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION = Shader3D.getDefineByName(\"MORPHTARGETS_POSITION\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL = Shader3D.getDefineByName(\"MORPHTARGETS_NORMAL\");\r\n\t\tRenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT = Shader3D.getDefineByName(\"MORPHTARGETS_TANGENT\");\r\n\r\n\t\tRenderableSprite3D.MorphTex = Shader3D.propertyNameToID(\"u_MorphTargetsTex\");\r\n\t\tRenderableSprite3D.MorphParams = Shader3D.propertyNameToID(\"u_MorphParams\");\r\n\t\tRenderableSprite3D.MorphAttriOffset = Shader3D.propertyNameToID(\"u_MorphAttrOffset\");\r\n\t\tRenderableSprite3D.MorphActiceTargets = Shader3D.propertyNameToID(\"u_MorphActiveTargets\");\r\n\t\tRenderableSprite3D.MorphActiveCount = Shader3D.propertyNameToID(\"u_MorphTargetActiveCount\");\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphTex, \"u_MorphTargetsTex\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphParams, \"u_MorphParams\", ShaderDataType.Vector4);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphAttriOffset, \"u_MorphAttrOffset\", ShaderDataType.Vector4);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphActiceTargets, \"u_MorphActiveTargets\", ShaderDataType.Buffer);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.MorphActiveCount, \"u_MorphTargetActiveCount\", ShaderDataType.Int);\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAPSCALEOFFSET, \"u_LightmapScaleOffset\", ShaderDataType.Vector4);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP, \"u_LightMap\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.LIGHTMAP_DIRECTION, \"u_LightMapDirection\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.PICKCOLOR, \"u_PickColor\", ShaderDataType.Vector3);\r\n\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, \"u_SpecCubeProbePosition\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, \"u_SpecCubeBoxMax\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, \"u_SpecCubeBoxMin\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.IBLTEX, \"u_IBLTex\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.IBLROUGHNESSLEVEL, \"u_IBLRoughnessLevel\", ShaderDataType.Float);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS, \"u_VolGIProbeCounts\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTEPS, \"u_VolGIProbeStep\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS, \"u_VolGIProbeStartPosition\", ShaderDataType.Vector3);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS, \"u_VolGIProbeParams\", ShaderDataType.Vector4);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_IRRADIANCE, \"u_ProbeIrradiance\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_DISTANCE, \"u_ProbeDistance\", ShaderDataType.Texture2D);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSH, \"u_IblSH\", ShaderDataType.Buffer);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTCOLOR, \"u_AmbientColor\", ShaderDataType.Vector4);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTINTENSITY, \"u_AmbientIntensity\", ShaderDataType.Float);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONINTENSITY, \"u_ReflectionIntensity\", ShaderDataType.Float);\r\n\r\n\t\t//Legency Reflectexture\r\n\t\tRenderableSprite3D.REFLECTIONTEXTURE = Shader3D.propertyNameToID(\"u_ReflectTexture\");\r\n\t\tRenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS = Shader3D.propertyNameToID(\"u_ReflectCubeHDRParams\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONTEXTURE, \"u_ReflectTexture\", ShaderDataType.TextureCube);\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS, \"u_ReflectCubeHDRParams\", ShaderDataType.Vector4);\r\n\t\t// legacy sh\r\n\t\tRenderableSprite3D.AMBIENTSHAR = Shader3D.propertyNameToID(\"u_AmbientSHAr\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAR, \"u_AmbientSHAr\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHAG = Shader3D.propertyNameToID(\"u_AmbientSHAg\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAG, \"u_AmbientSHAg\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHAB = Shader3D.propertyNameToID(\"u_AmbientSHAb\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHAB, \"u_AmbientSHAb\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHBR = Shader3D.propertyNameToID(\"u_AmbientSHBr\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBR, \"u_AmbientSHBr\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHBG = Shader3D.propertyNameToID(\"u_AmbientSHBg\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBG, \"u_AmbientSHBg\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHBB = Shader3D.propertyNameToID(\"u_AmbientSHBb\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHBB, \"u_AmbientSHBb\", ShaderDataType.Vector4);\r\n\t\tRenderableSprite3D.AMBIENTSHC = Shader3D.propertyNameToID(\"u_AmbientSHC\");\r\n\t\tcommandUniform.addShaderUniform(RenderableSprite3D.AMBIENTSHC, \"u_AmbientSHC\", ShaderDataType.Vector4);\r\n\t}\r\n\r\n\t/** @internal */\r\n\t_render: BaseRender;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 创建一个 <code>RenderableSprite3D</code> 实例。\r\n\t */\r\n\tconstructor(name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\t/** \r\n\t * @internal\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onInActive(): void {\r\n\t\tsuper._onInActive();\r\n\t}\r\n\r\n\t/** \r\n\t * @internal\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActive(): void {\r\n\t\tsuper._onActive();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tprotected _onActiveInScene(): void {\r\n\t\tsuper._onActiveInScene();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D(this.name);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_addToInitStaticBatchManager(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setBelongScene(scene: Node): void {\r\n\t\tsuper._setBelongScene(scene);\r\n\t\t//this._render._setBelongScene(<Scene3D>scene);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_setUnBelongScene(): void {\r\n\t\tsuper._setUnBelongScene();\r\n\t}\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n/**\r\n * @en Class used to record sprite data macros\r\n * @zh 类用来记录精灵数据宏\r\n */\r\nexport class MeshSprite3DShaderDeclaration {\r\n    /**\r\n     * @en Shader define for UV0 channel vertex data\r\n     * @zh UV0通道顶点数据宏\r\n     */\r\n\tstatic SHADERDEFINE_UV0: ShaderDefine;\r\n    /**\r\n     * @en Shader define for vertex color data\r\n     * @zh 顶点色顶点数据宏\r\n     */\r\n\tstatic SHADERDEFINE_COLOR: ShaderDefine;\r\n    /**\r\n     * @en Shader define for UV1 channel vertex data\r\n     * @zh UV1通道顶点数据宏\r\n     */\r\n\tstatic SHADERDEFINE_UV1: ShaderDefine;\r\n    /**\r\n     * @en Shader define for Tangent channel vertex data\r\n     * @zh Tangent 通道顶点数据宏\r\n     */\r\n\tstatic SHADERDEFINE_TANGENT: ShaderDefine;\r\n    /**\r\n     * @en Using instance\r\n     * @zh instance调用宏\r\n     */\r\n\tstatic SHADERDEFINE_GPU_INSTANCE: ShaderDefine;\r\n\t\r\n}\r\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { BoundBox } from \"./BoundBox\";\r\n\r\n/**\r\n * @en used for creating a bounding volume.\r\n * @zh 用于创建包围体。\r\n */\r\nexport class Bounds implements IClone {\r\n    /**\r\n     * @en Merges two bounding boxes into one.\r\n     * @param box1 The first bounding box.\r\n     * @param box2 The second bounding box.\r\n     * @param out The merged bounding box.\r\n     * @zh 合并两个包围盒。\r\n     * @param box1 第一个包围盒。\r\n     * @param box2 第二个包围盒。\r\n     * @param out 生成的包围盒。\r\n     */\r\n    static merge(box1: Bounds, box2: Bounds, out: Bounds): void {\r\n        Vector3.min(box1.min, box2.min, out.min);\r\n        Vector3.max(box1.max, box2.max, out.max);\r\n        out.min = out.min;\r\n        out.max = out.max;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether the bounding box contains a point.\r\n     * @param box The bounding box.\r\n     * @param point The point to check.\r\n     * @returns `true` if the point is inside the bounding box; otherwise, `false`.\r\n     * @zh 判断包围盒是否包含一个点。\r\n     * @param box 包围盒。\r\n     * @param point 需要检测的点。\r\n     * @return 如果点在包围盒内返回 `true`；否则返回 `false`。\r\n     */\r\n    static containPoint(box: Bounds, point: Vector3): boolean {\r\n        let max = box._imp.getMax();\r\n        let min = box._imp.getMin();\r\n        if (point.x > max.x || point.x < min.x) return false;\r\n        if (point.y > max.y || point.y < min.y) return false;\r\n        if (point.z > max.z || point.z < min.z) return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    static _UPDATE_MIN: number = 0x01;\r\n    /**@internal */\r\n    static _UPDATE_MAX: number = 0x02;\r\n    /**@internal */\r\n    static _UPDATE_CENTER: number = 0x04;\r\n    /**@internal */\r\n    static _UPDATE_EXTENT: number = 0x08;\r\n\r\n    /**@internal\t*/\r\n    _imp: any;\r\n\r\n    /**\r\n     * @en The minimum point of the bounding box.\r\n     * @zh 包围盒的最小点\r\n     */\r\n    get min() {\r\n        return this.getMin();\r\n    }\r\n\r\n    set min(value: Vector3) {\r\n        this.setMin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The maximum point of the bounding box.\r\n     * @zh 包围盒的最大点\r\n     */\r\n    get max() {\r\n        return this.getMax();\r\n    }\r\n\r\n    set max(value: Vector3) {\r\n        this.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * @en The center point of the bounding box.\r\n     * @param value The new center point of the bounding box.\r\n     * @zh 设置包围盒的最小点。\r\n     * @param value\t包围盒的新最小点。\r\n     */\r\n    setMin(value: Vector3): void {\r\n        this._imp.setMin(value);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the minimum point of the bounding box.\r\n     * @return The minimum point of the bounding box.\r\n     * @zh 获取包围盒的最小点。\r\n     * @return\t包围盒的最小点。\r\n     */\r\n    getMin(): Vector3 {\r\n        return this._imp.getMin();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the maximum point of the bounding box.\r\n     * @param value The new maximum point of the bounding box.\r\n     * @zh 设置包围盒的最大点。\r\n     * @param value\t包围盒的新最大点。\r\n     */\r\n    setMax(value: Vector3): void {\r\n        this._imp.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the maximum point of the bounding box.\r\n     * @return The maximum point of the bounding box.\r\n     * @zh 获取包围盒的最大点。\r\n     * @return\t包围盒的最大点。\r\n     */\r\n    getMax(): Vector3 {\r\n        return this._imp.getMax();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the center point of the bounding box.\r\n     * @param value The new center point of the bounding box.\r\n     * @zh 设置包围盒的中心点。\r\n     * @param value\t包围盒的新中心点。\r\n     */\r\n    setCenter(value: Vector3): void {\r\n        this._imp.setCenter(value);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the center point of the bounding box.\r\n     * @return The center point of the bounding box.\r\n     * @zh 获取包围盒的中心点。\r\n     * @return\t包围盒的中心点。\r\n     */\r\n    getCenter(): Vector3 {\r\n        return this._imp.getCenter();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the range of the bounding box.\r\n     * @param value The new range of the bounding box.\r\n     * @zh 设置包围盒的范围。\r\n     * @param value\t包围盒的新范围。\r\n     */\r\n    setExtent(value: Vector3): void {\r\n        this._imp.setExtent(value);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the range of the bounding box.\r\n     * @return The range of the bounding box.\r\n     * @zh 获取包围盒的范围。\r\n     * @return\t包围盒的范围。\r\n     */\r\n    getExtent(): Vector3 {\r\n        return this._imp.getExtent();\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method.\r\n     * @param\tmin  The minimum point of the bounding box.\r\n     * @param\tmax  The maximum point of the bounding box.\r\n     * @zh 构造方法。\r\n     * @param\tmin  min 最小坐标\r\n     * @param\tmax  max 最大坐标。\r\n     */\r\n    constructor(min?: Vector3, max?: Vector3) {\r\n        this._imp = Laya3DRender.Render3DModuleDataFactory.createBounds(min, max);\r\n    }\r\n\r\n    /**\r\n     * 获得更新标志\r\n     * @internal\r\n     * @param type 类型 \r\n     * @return void\r\n     */\r\n    protected _getUpdateFlag(type: number): boolean {\r\n        return this._imp._getUpdateFlag(type);\r\n    }\r\n\r\n    /**\r\n     * 设置更新标志\r\n     * @internal\r\n     * @param type 类型 \r\n     * @param value 值 \r\n     * @return void\r\n     */\r\n    protected _setUpdateFlag(type: number, value: boolean): void {\r\n        this._imp._setUpdateFlag(type, value);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒中心值\r\n     * @internal\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.add(min, max, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒范围\r\n     * @internal\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.subtract(max, min, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒最小值\r\n     * @internal\r\n     * @param center 中心点\r\n     * @param extent 范围\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.subtract(center, extent, out);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒最大值\r\n     * @internal\r\n     * @param center 中心点\r\n     * @param extent 范围\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.add(center, extent, out);\r\n    }\r\n\r\n    /**\r\n    * 旋转范围\r\n    * @internal\r\n    * @param extent 范围\r\n    * @param rotation 旋转矩阵\r\n    * @param out 返回值\r\n    * @return void\r\n    */\r\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n        var extentsX: number = extents.x;\r\n        var extentsY: number = extents.y;\r\n        var extentsZ: number = extents.z;\r\n        var matE: Float32Array = rotation.elements;\r\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\r\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\r\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\r\n    }\r\n\r\n    /**\r\n     * 转换包围盒\r\n     * @internal\r\n     * @param matrix 转换矩阵\r\n     * @param out 输出包围盒\r\n     */\r\n    _tranform(matrix: Matrix4x4, out: Bounds): void {\r\n        this._imp._tranform(matrix, out._imp);\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves the eight corner vertices of the bounding box.\r\n     * @param corners The array to store the corner vertices. \r\n     * @zh 获取包围盒的八个角顶点\r\n     * @param corners 存储角顶点的数组。\r\n     */\r\n    getCorners(corners: Vector3[]) {\r\n        this._imp.getCorners(corners);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the bounding box.\r\n     * @param box The bounding box to store the result.\r\n     * @zh 获取包围盒\r\n     * @param box 用于存储结果的包围盒。\r\n     */\r\n    getBoundBox(box: BoundBox): void {\r\n        this._imp._getBoundBox().cloneTo(box);\r\n    }\r\n\r\n    /**\r\n     * @en Calculate whether two bounding boxes intersect\r\n     * @param bounds The bounding box to calculate the intersection volume.\r\n     * @return -1 if the two bounding boxes do not intersect; when not 0, the return value is the intersecting volume\r\n     * @zh 计算两个包围盒是否相交\r\n     * @param bounds 需要计算包围盒\r\n     * @returns -1为不相交 不为0的时候返回值为相交体积\r\n     */\r\n    calculateBoundsintersection(bounds: Bounds): number {\r\n        return this._imp.calculateBoundsintersection(bounds._imp);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Clones this bounds into another object.\r\n     * @param destObject The destination object to clone into.\r\n     * @zh 克隆这个边界到另一个对象。\r\n     * @param destObject 克隆目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        this._imp.cloneTo(destObject._imp);\r\n    }\r\n\r\n    /**\r\n     * @en Creates a clone of this bounds.\r\n     * @return A new `Bounds` instance that is a clone of this one.\r\n     * @zh 创建这个边界的克隆。\r\n     * @return 一个新的 `Bounds` 实例，是当前边界的克隆。\r\n     */\r\n    clone(): any {\r\n        var dest: Bounds = new Bounds(new Vector3(), new Vector3());\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}\r\n","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { IVolumeManager } from \"../IVolumeManager\";\r\nimport { Volume } from \"../Volume\";\r\nimport { ReflectionProbe } from \"./ReflectionProbe\";\r\n\r\n/**\r\n * @en The `ReflectionProbeManager` class is used for managing reflection probes.\r\n * @zh `ReflectionProbeManager` 类用于管理反射探针。\r\n */\r\nexport class ReflectionProbeManager implements IVolumeManager {\r\n\r\n    /** @internal 反射探针队列 */\r\n    private _reflectionProbes: SingletonList<ReflectionProbe> = new SingletonList<ReflectionProbe>();\r\n    /** @internal 环境探针 */\r\n    private _sceneReflectionProbe: ReflectionProbe;\r\n    /** @internal */\r\n    _needUpdateAllRender: boolean = false;\r\n\r\n    /**\r\n     * @en The constructor of the `ReflectionProbeManager` class.\r\n     * @zh `ReflectionProbeManager` 类构造函数。\r\n     */\r\n    constructor() {\r\n        this._sceneReflectionProbe = new ReflectionProbe();\r\n        this._sceneReflectionProbe.boxProjection = false;\r\n        this._sceneReflectionProbe._isScene = true;\r\n    }\r\n\r\n    /**\r\n     * @en The scene reflection probe\r\n     * @zh 场景反射探针\r\n     */\r\n    get sceneReflectionProbe(): ReflectionProbe {\r\n        return this._sceneReflectionProbe;\r\n    }\r\n\r\n    set sceneReflectionProbe(value: ReflectionProbe) {\r\n        this._sceneReflectionProbe = value;\r\n        this._needUpdateAllRender = true;//update Reflection\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Update the reflection probe for the base render.\r\n     * @param baseRender The base render object to update.\r\n     * @zh 更新基础渲染对象的反射探针。\r\n     * @param baseRender 要更新的基础渲染对象。\r\n     */\r\n    _updateRenderObject(baseRender: BaseRender): void {\r\n        if (this._reflectionProbes.length == 0) {\r\n            baseRender.probReflection = this._sceneReflectionProbe;\r\n            return;\r\n        }\r\n        var elements: ReflectionProbe[] = this._reflectionProbes.elements;\r\n        var maxOverlap: number = 0;\r\n        var mainProbe: ReflectionProbe;\r\n        var renderBounds: Bounds = baseRender.bounds;\r\n        var overlop;\r\n        for (var i: number = 0, n: number = this._reflectionProbes.length; i < n; i++) {\r\n            var renflectProbe = elements[i];\r\n            if (!mainProbe) {\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if (overlop < maxOverlap) continue;\r\n            } else {\r\n                if (mainProbe.importance > renflectProbe.importance) continue;//重要性判断\r\n                overlop = renderBounds.calculateBoundsintersection(renflectProbe.bounds);\r\n                if (overlop < maxOverlap && mainProbe.importance == renflectProbe.importance) continue;\r\n            }\r\n            mainProbe = renflectProbe;\r\n            maxOverlap = overlop;\r\n        }\r\n        if (!mainProbe && this._sceneReflectionProbe)//如果没有相交 传场景反射球\r\n            mainProbe = this._sceneReflectionProbe;\r\n        baseRender.probReflection = mainProbe;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Add a reflection probe to the scene.\r\n     * @param volume The reflection probe to add.\r\n     * @zh 在场景中添加反射探针。\r\n     * @param volume 要添加的反射探针。\r\n     */\r\n    add(volume: ReflectionProbe) {\r\n        this._reflectionProbes.add(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Remove a reflection probe from the scene.\r\n     * @param volume The reflection probe to remove.\r\n     * @zh 从场景中删除反射探针。\r\n     * @param volume 要删除的反射探针。\r\n     */\r\n    remove(volume: ReflectionProbe) {\r\n        this._reflectionProbes.remove(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Update reflection probe information for moving objects.\r\n     * @param motionObjects List of moving render objects.\r\n     * @zh 更新运动物体的反射探针信息。\r\n     * @param motionObjects 运动渲染对象列表。\r\n     */\r\n    handleMotionlist(motionObjects: SingletonList<BaseRender>): void {\r\n        var elements: BaseRender[] = motionObjects.elements;\r\n        let render: BaseRender;\r\n        for (var i: number = 0, n: number = motionObjects.length; i < n; i++) {\r\n            render = elements[i];\r\n            if (render._surportReflectionProbe && render.reflectionMode == 1) {\r\n                this._updateRenderObject(elements[i]);\r\n            }\r\n        }\r\n        //this.clearMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Recalculate reflection probes for all provided renderers.\r\n     * @param baseRenders List of base renderers to update.\r\n     * @zh 重新计算所有提供的渲染器的反射探针。\r\n     * @param baseRenders 要更新的基础渲染器列表。\r\n     */\r\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\r\n        var elements = baseRenders.elements;\r\n        let render: BaseRender;\r\n        for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\r\n            render = elements[i];\r\n            if (render._surportReflectionProbe && render.reflectionMode == 1) {\r\n                this._updateRenderObject(render);\r\n            }\r\n            this._needUpdateAllRender = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Destroy the ReflectionProbeManager and all associated resources.\r\n     * @zh 销毁 ReflectionProbeManager 及其关联的所有资源。\r\n     */\r\n    destroy() {\r\n        for (let index = 0; index < this._reflectionProbes.length; index++) {\r\n            let probe = this._reflectionProbes.elements[index];\r\n            probe.destroy();\r\n        }\r\n        this._reflectionProbes.length = 0;\r\n        this._sceneReflectionProbe.destroy();\r\n        this._sceneReflectionProbe = null;\r\n    }\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n\r\n/**\r\n * @en The `Sprite3DRenderDeclaration` class contains shader defines used in 3D sprite rendering.\r\n * @zh `Sprite3DRenderDeclaration` 类包含了3D精灵渲染中使用的着色器定义。\r\n */\r\nexport class Sprite3DRenderDeclaration {\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_GI_LEGACYIBL: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_GI_IBL: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_IBL_RGBD: ShaderDefine;\r\n\t/**\r\n\t * @en Box reflection macro\r\n\t * @zh 盒子反射宏 */\r\n\tstatic SHADERDEFINE_SPECCUBE_BOX_PROJECTION: ShaderDefine;\r\n\r\n\t/**\r\n\t * @en Volumetric Global Illumination macro\r\n\t * @zh 体积全局光照宏\r\n\t */\r\n\tstatic SHADERDEFINE_VOLUMETRICGI: ShaderDefine;\r\n\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../core/render/Sprite3DRenderDeclaration\";\r\nimport { IVolumeManager } from \"../IVolumeManager\";\r\nimport { VolumetricGI } from \"./VolumetricGI\";\r\n\r\n/**\r\n * @internal\r\n * @en Manager class for Volumetric Global Illumination (GI).\r\n * @zh 体积全局光照(GI)管理器类。\r\n */\r\nexport class VolumetricGIManager implements IVolumeManager {\r\n    /**\r\n     * @en Whether all renders need to be updated.\r\n     * @zh 是否需要更新所有渲染。\r\n     */\r\n    _needUpdateAllRender: boolean;\r\n\r\n    private _GIVolumes: SingletonList<VolumetricGI> = new SingletonList<VolumetricGI>();\r\n\r\n    /**\r\n     * @en Constructor, initialize the VolumetricGI manager.\r\n     * @zh 构造函数，初始化体积全局光照(VolumetricGI)管理器。\r\n     */\r\n    constructor() {\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @en Remove Volumetric GI from the specified renderer.\r\n     * @zh 从指定的渲染器中移除体积全局光照。\r\n     */\r\n    removeVolumetricGI(renderer: BaseRender) {\r\n        let shaderData = renderer._baseRenderNode.shaderData;\r\n        shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI);\r\n        renderer.lightProbe = null;\r\n    }\r\n\r\n    /**\r\n     * @en Add a VolumetricGI volume to the collection.\r\n     * @zh 添加一个体积全局光照(VolumetricGI)到集合中。\r\n     */\r\n    add(volume: VolumetricGI): void {\r\n        this._GIVolumes.add(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @en Remove a VolumetricGI volume from the collection.\r\n     * @zh 从集合中移除一个体积全局光照(VolumetricGI)。\r\n     */\r\n    remove(volume: VolumetricGI): void {\r\n        this._GIVolumes.remove(volume);\r\n        this._needUpdateAllRender = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update the render object based on the current VolumetricGI volumes.\r\n     * This method checks for overlap between the renderer's bounds and VolumetricGI volumes, and applies the most overlapping volume's settings to the renderer.\r\n     * @param renderer The BaseRender object to update.\r\n     * @zh 根据当前的体积全局光照(VolumetricGI)更新渲染对象。\r\n     * 此方法检查渲染器边界与VolumetricGI之间的重叠，并将重叠最多的体积的设置应用于渲染器。\r\n     * @param renderer 要更新的BaseRender对象。\r\n     */\r\n    _updateRenderObject(renderer: BaseRender): void {\r\n        if (this._GIVolumes.length == 0) {\r\n            this.removeVolumetricGI(renderer);\r\n            return;\r\n        }\r\n\r\n        let renderBounds = renderer.bounds;\r\n        let maxOverlap = 0, overlap = 0;\r\n        let currentVolume: VolumetricGI;\r\n\r\n        let volumes = this._GIVolumes.elements;\r\n        for (let index = 0; index < this._GIVolumes.length; index++) {\r\n            let volume = volumes[index];\r\n            if (!currentVolume) {\r\n                overlap = renderBounds.calculateBoundsintersection(volume.bounds);\r\n                if (overlap < maxOverlap)\r\n                    continue;\r\n            }\r\n            else {\r\n                if (currentVolume.importance > volume.importance)\r\n                    continue;\r\n                overlap = renderBounds.calculateBoundsintersection(volume.bounds);\r\n                if (overlap < maxOverlap && currentVolume.importance == volume.importance)\r\n                    continue;\r\n            }\r\n            currentVolume = volume;\r\n            maxOverlap = overlap;\r\n        }\r\n\r\n        if (currentVolume) {\r\n            renderer.lightProbe = currentVolume;\r\n        }\r\n        else {\r\n            this.removeVolumetricGI(renderer);\r\n        }\r\n\r\n    }\r\n    /**\r\n     * @en Handle the list of motion objects by updating their VolumetricGI settings.\r\n     * @param motionObjects A SingletonList of BaseRender objects representing motion objects.\r\n     * @zh 处理运动对象列表，更新它们的体积全局光照(VolumetricGI)设置。\r\n     * @param motionObjects 表示运动对象的BaseRender对象的SingletonList。\r\n     */\r\n    handleMotionlist(motionObjects: SingletonList<BaseRender>): void {\r\n        for (let index = 0; index < motionObjects.length; index++) {\r\n            let render = motionObjects.elements[index];\r\n            if (render._surportVolumetricGI) {\r\n                this._updateRenderObject(render);\r\n            }\r\n        }\r\n        this._needUpdateAllRender = false;\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate VolumetricGI settings for all render objects.\r\n     * @param renders A SingletonList of BaseRender objects to recalculate.\r\n     * @zh 重新计算所有渲染对象的体积全局光照(VolumetricGI)设置。\r\n     * @param renders 需要重新计算的BaseRender对象的SingletonList。\r\n     */\r\n    reCaculateAllRenderObjects(renders: SingletonList<BaseRender>): void {\r\n        for (let index = 0; index < renders.length; index++) {\r\n            let render = renders.elements[index];\r\n            if (render._surportVolumetricGI) {\r\n                this._updateRenderObject(render);\r\n            }\r\n        }\r\n        this._needUpdateAllRender = false;\r\n    }\r\n    /**\r\n     * @en Destroy the instance and release resources.\r\n     * @zh 销毁实例并释放资源。\r\n     */\r\n    destroy(): void {\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { IVolumeManager } from \"./IVolumeManager\";\r\nimport { ReflectionProbeManager } from \"./reflectionProbe/ReflectionProbeManager\";\r\nimport { Volume } from \"./Volume\";\r\nimport { VolumetricGIManager } from \"./VolumetricGI/VolumetricGIManager\";\r\n\r\n\r\n/**\r\n * @en The `VolumeManager` class is used to manage volume components in a scene.\r\n * @zh `VolumeManager` 类用于管理场景中的体积组件。\r\n */\r\nexport class VolumeManager implements IVolumeManager {\r\n    /**\r\n     * @en Type identifier for Reflection Probe Volume.\r\n     * @zh 反射探针体积的类型标识符。\r\n     */\r\n    static ReflectionProbeVolumeType: number = 1;\r\n\r\n    /**\r\n     * @en Type identifier for Volumetric Global Illumination.\r\n     * @zh 体积全局光照的类型标识符。\r\n     */\r\n    static VolumetricGIType: number = 2;\r\n\r\n    //注册特殊的Volume管理类\r\n    //static regVolumeManager: { [key: number]: any } = {};\r\n    /** @internal 需要跟新反射探针的渲染队列 */\r\n    private _motionObjects: SingletonList<BaseRender> = new SingletonList<BaseRender>();\r\n    /** @internal volume list */\r\n    private _volumeList: SingletonList<Volume> = new SingletonList<Volume>();\r\n\r\n    /**\r\n     * @internal\r\n     * @en whether all renders need to be updated.\r\n     * @zh 是否需要更新所有渲染。\r\n     */\r\n    _needUpdateAllRender: boolean = false;\r\n    /**\r\n     * @en Dictionary of specialized volume managers for different volume types.\r\n     * @zh 不同体积类型的专门体积管理器字典。\r\n     */\r\n    _regVolumeManager: { [key: number]: IVolumeManager } = {};\r\n\r\n    /**\r\n     * @internal\r\n     * @en Reflection probe manager.\r\n     * @zh 反射探针管理器。\r\n     */\r\n    _reflectionProbeManager: ReflectionProbeManager;\r\n\r\n    /**\r\n     * @en Volumetric Global Illumination manager.\r\n     * @zh 体积全局光照管理器。\r\n     */\r\n    _volumetricGIManager: VolumetricGIManager;\r\n\r\n    constructor() {\r\n        this._reflectionProbeManager = new ReflectionProbeManager();\r\n        this._regVolumeManager[VolumeManager.ReflectionProbeVolumeType] = this._reflectionProbeManager;\r\n\r\n        this._volumetricGIManager = new VolumetricGIManager();\r\n        this._regVolumeManager[VolumeManager.VolumetricGIType] = this._volumetricGIManager;\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The reflection probe manager.\r\n     * @zh 反射探针管理器。\r\n     */\r\n    get reflectionProbeManager(): ReflectionProbeManager {\r\n        return this._reflectionProbeManager;\r\n    }\r\n\r\n    /**\r\n     * @en The volumetric global illumination manager.\r\n     * @zh 体积全局光照管理器。\r\n     */\r\n    get volumetricGIManager(): VolumetricGIManager {\r\n        return this._volumetricGIManager;\r\n    }\r\n\r\n    /**\r\n     * @en Add a volume component to the manager.\r\n     * @zh 向管理器添加一个体积组件。\r\n     */\r\n    add(volume: Volume) {\r\n        let reManager = this._regVolumeManager[volume.type];\r\n        if (reManager) {\r\n            reManager.add(volume);\r\n        } else {\r\n            this._volumeList.add(volume);\r\n            this._needUpdateAllRender = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove a volume component from the manager.\r\n     * @zh 从管理器中移除一个体积组件。\r\n     */\r\n    remove(volume: Volume) {\r\n        let reManager = this._regVolumeManager[volume.type];\r\n        if (reManager) {\r\n            reManager.remove(volume);\r\n        } else {\r\n            this._volumeList.remove(volume);\r\n            this._needUpdateAllRender = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a motion object to the handle list.\r\n     * @zh 将运动对象添加到处理列表中。\r\n     */\r\n    addMotionObject(renderObj: BaseRender) {\r\n        this._motionObjects.add(renderObj);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a motion object from the handle list.\r\n     * @zh 从处理列表中移除运动对象。\r\n     */\r\n    removeMotionObject(renderObj: BaseRender) {\r\n        this._motionObjects.remove(renderObj);\r\n    }\r\n\r\n    /**\r\n     * @en Update one RenderNode Volume info\r\n     * @param baseRender The BaseRender object to update\r\n     * @zh 更新一个RenderNode的Volume信息\r\n     * @param baseRender 要更新的BaseRender对象\r\n     */\r\n    _updateRenderObject(baseRender: BaseRender): void {\r\n        let elements: Volume[] = this._volumeList.elements;\r\n\r\n        let renderBounds: Bounds = baseRender.bounds;\r\n        let center = renderBounds.getCenter();\r\n        let mainVolume: Volume;\r\n        for (var i: number = 0, n: number = this._volumeList.length; i < n; i++) {\r\n            let volume = elements[i];\r\n            let bounds = volume.bounds;\r\n            if (Bounds.containPoint(bounds, center)) {\r\n                mainVolume = volume;\r\n                continue;\r\n            }\r\n        }\r\n        baseRender.volume = mainVolume;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Handle motion list. \r\n     * This method updates render objects, processes reflection probes, and handles volumetric GI for objects in motion.\r\n     * @zh 处理运动列表。\r\n     * 此方法更新渲染对象，处理反射探针，并处理运动物体的体积全局光照。\r\n     */\r\n    handleMotionlist(): void {\r\n        var elements: BaseRender[] = this._motionObjects.elements;\r\n        for (var i: number = 0, n: number = this._motionObjects.length; i < n; i++) {\r\n            this._updateRenderObject(elements[i]);\r\n        }\r\n\r\n        if (!this.reflectionProbeManager._needUpdateAllRender)\r\n            this.reflectionProbeManager.handleMotionlist(this._motionObjects);\r\n        if (!this.volumetricGIManager._needUpdateAllRender)\r\n            this.volumetricGIManager.handleMotionlist(this._motionObjects);\r\n\r\n        this.clearMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate and update all Volume information for render objects\r\n     * @zh 重新计算并更新所有渲染对象的Volume信息\r\n     */\r\n    reCaculateAllRenderObjects(baseRenders: SingletonList<BaseRender>) {\r\n        if (this._needUpdateAllRender) {\r\n            var elements = baseRenders.elements;\r\n            for (var i: number = 0, n: number = baseRenders.length; i < n; i++) {\r\n                this._updateRenderObject(elements[i]);\r\n            }\r\n            this._needUpdateAllRender = false;\r\n        } else {\r\n            this.handleMotionlist();\r\n        }\r\n\r\n        //miner特殊管理TODO 更新所有渲染物体\r\n        if (this.reflectionProbeManager._needUpdateAllRender) {\r\n            this.reflectionProbeManager.reCaculateAllRenderObjects(baseRenders);\r\n        } else {\r\n            this.reflectionProbeManager.handleMotionlist(this._motionObjects);\r\n        }\r\n\r\n        if (this.volumetricGIManager._needUpdateAllRender) {\r\n            this.volumetricGIManager.reCaculateAllRenderObjects(baseRenders);\r\n        }\r\n        else {\r\n            this.volumetricGIManager.handleMotionlist(this._motionObjects);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Check if all render objects need to be recalculated\r\n     * @zh 检查是否需要重新计算所有渲染对象\r\n     */\r\n    needreCaculateAllRenderObjects(): boolean {\r\n        return this._needUpdateAllRender || this.reflectionProbeManager._needUpdateAllRender || this.volumetricGIManager._needUpdateAllRender;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Clean up the change queue\r\n     * @zh 清理变动队列\r\n     */\r\n    clearMotionObjects() {\r\n        this._motionObjects.length = 0;\r\n        //下面是避免this._motionObjects.elements太长，以及避免引用对象\r\n        if(this._motionObjects.elements.length>100){\r\n            this._motionObjects.elements.length = 100;\r\n        }\r\n        this._motionObjects.elements.fill(null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Destroy the object\r\n     * @zh 销毁对象\r\n     */\r\n    destroy() {\r\n\r\n    }\r\n}","import { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { Laya3D } from \"./Laya3D\";\r\n\r\n/**\r\n * @internal\r\n * 使用全局类的时候，避免引用其他模块\r\n */\r\nexport class ILaya3D {\r\n    static Scene3D: typeof Scene3D = null;\r\n    static Laya3D: typeof Laya3D = null;\r\n}\r\n","import { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { BufferState } from \"../../webgl/utils/BufferState\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { IRenderGeometryElement } from \"../../RenderDriver/DriverDesign/RenderDevice/IRenderGeometryElement\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\n\r\n/**\r\n * @en The `GeometryElement` class is used to implement geometric elements. This class is abstract.\r\n * @zh `GeometryElement` 类用于实现几何体元素，该类为抽象类。\r\n */\r\nexport class GeometryElement {\r\n\t/** @internal */\r\n\tprivate static _uniqueIDCounter: number = 0;\r\n\tprotected _owner: any;\r\n\tstatic _typeCounter: number = 0;\r\n\t/**@internal */\r\n\tprotected _destroyed: boolean;\r\n\t_geometryElementOBj: IRenderGeometryElement;\r\n\t/** @internal */\r\n\t_id: number;\r\n\tprotected _bufferState:BufferState;\r\n    /**\r\n     * @en VAO (Vertex Array Object) instance\r\n     * @zh VAO (顶点数组对象) 实例\r\n     */\r\n\tset bufferState(value: BufferState) {\r\n\t\tthis._geometryElementOBj.bufferState = value._deviceBufferState;\r\n\t\tthis._bufferState = value;\r\n\t}\r\n\r\n\tget bufferState(): BufferState {\r\n\t\treturn this._bufferState;\r\n\t}\r\n\r\n    /**\r\n     * @en Mesh topology type\r\n     * @zh 网格拓扑类型\r\n     */\r\n\tset mode(value: MeshTopology) {\r\n\t\tthis._geometryElementOBj.mode = value;\r\n\t}\r\n\r\n\tget mode(): MeshTopology {\r\n\t\treturn this._geometryElementOBj.mode;\r\n\t}\r\n\r\n    /**\r\n     * @en Draw type\r\n     * @zh 绘制类型\r\n     */\r\n\tset drawType(value: number) {\r\n\t\tthis._geometryElementOBj.drawType = value;\r\n\t}\r\n\r\n\tget drawType(): number {\r\n\t\treturn this._geometryElementOBj.drawType;\r\n\t}\r\n\r\n    /**\r\n     * @en Set parameters for drawing arrays\r\n     * @param first The starting index in the array\r\n     * @param count The number of indices to be rendered\r\n     * @zh 设置绘制数组的参数。\r\n\t * @param first 数组起始索引。\r\n\t * @param count 要渲染的索引数量。\r\n     */\r\n\tsetDrawArrayParams(first: number, count: number): void {\r\n\t\tthis._geometryElementOBj.setDrawArrayParams(first, count);\r\n\r\n\t}\r\n\r\n    /**\r\n     * @en Set parameters for drawing elements\r\n     * @param count The number of elements to be rendered\r\n     * @param offset The starting offset in the element array\r\n\t * @zh 设置绘制元素的参数。\r\n\t * @param count 要渲染的元素数量。\r\n\t * @param offset 元素数组的起始偏移。\r\n     */\r\n\tsetDrawElemenParams(count: number, offset: number): void {\r\n\t\tthis._geometryElementOBj.setDrawElemenParams(count, offset);\r\n\t}\r\n\r\n    /**\r\n     * @en Number of instances to draw\r\n     * @zh 要绘制的实例数量\r\n     */\r\n\tset instanceCount(value: number) {\r\n\t\tthis._geometryElementOBj.instanceCount = value;\r\n\t}\r\n\r\n\tget instanceCount(): number {\r\n\t\treturn this._geometryElementOBj.instanceCount;\r\n\t}\r\n\r\n    /**\r\n     * @en Index buffer format\r\n     * @zh 索引缓冲区格式\r\n     */\r\n\tset indexFormat(value: IndexFormat) {\r\n\t\tthis._geometryElementOBj.indexFormat = value;\r\n\t}\r\n\r\n\tget indexFormat(): IndexFormat {\r\n\t\treturn this._geometryElementOBj.indexFormat;\r\n\t}\r\n\r\n\r\n\r\n    /**\r\n     * @en Get whether the object is destroyed\r\n     * @zh 获取是否已销毁\r\n     */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of GeometryElement.\r\n\t * @param mode The topology used by the mesh.\r\n \t * @param drawType The draw type used for rendering.\r\n\t * @zh 创建一个 GeometryElement 的实例。\r\n\t * @param mode 网格使用的拓扑结构。\r\n\t * @param drawType 用于渲染的绘制类型。\r\n\t */\r\n\tconstructor(mode: MeshTopology, drawType: DrawType) {\r\n\t\tthis._destroyed = false;\r\n\t\tthis._geometryElementOBj = LayaGL.renderDeviceFactory.createRenderGeometryElement(mode, drawType);\r\n\t\tthis._id = ++GeometryElement._uniqueIDCounter;\r\n\t}\r\n\r\n    /**\r\n     * @en Get the geometry type\r\n     * @zh 获取几何体类型\r\n     */\r\n\t_getType(): number {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n    /**\r\n     * @internal\r\n     * @en Whether rendering is needed\r\n     * @param state The render context\r\n     * @returns Whether rendering is needed\r\n     * @zh 是否需要渲染。\r\n\t * @param state 渲染上下文。\r\n\t * @return 是否需要渲染。\r\n     */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n    /**\r\n     * @internal\r\n     * @en Update geometry data\r\n     * @param state The render context\r\n     * @zh 更新几何体数据\r\n\t * @param state 渲染上下文。\r\n     */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tthrow \"GeometryElement:must override it.\";\r\n\t}\r\n\r\n    /**\r\n     * @en Destroy the object\r\n     * @zh 销毁对象\r\n     */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tthis._destroyed = true;\r\n\t\tthis._geometryElementOBj.destroy();\r\n\t}\r\n\r\n    /**\r\n     * @en Clear render parameters\r\n     * @zh 清除渲染参数\r\n     */\r\n\tclearRenderParams() {\r\n\t\tthis._geometryElementOBj.clearRenderParams();\r\n\t}\r\n}\r\n\r\n","import { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\n\r\n//兼容WGSL\r\n/**\r\n * @en SkyBox class used to create a skybox.\r\n * @zh SkyBox 类用于创建天空盒。\r\n */\r\nexport class SkyBox extends GeometryElement {\r\n    /**\r\n     * @en The singleton instance of the SkyBox class.\r\n     * @zh SkyBox类的单例实例。\r\n     */\r\n    static instance: SkyBox;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        SkyBox.instance = new SkyBox();//TODO:移植为标准Mesh后需要加锁\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SkyBox.\r\n     * @zh 创建 SkyBox 的实例。\r\n     */\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n        var halfHeight: number = 1.0;\r\n        var halfWidth: number = 1.0;\r\n        var halfDepth: number = 1.0;\r\n        var vertices: Float32Array = new Float32Array([-halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, -halfWidth, halfDepth, halfHeight, halfWidth, -halfDepth, halfHeight, halfWidth,//上\r\n        -halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, -halfWidth, halfDepth, -halfHeight, halfWidth, -halfDepth, -halfHeight, halfWidth]);//下\r\n        var indices: Uint16Array = new Uint16Array([\r\n            0, 2, 1, 2, 0, 3, //上\r\n            4, 6, 7, 6, 4, 5, //下\r\n            0, 7, 3, 7, 0, 4, //左\r\n            1, 6, 5, 6, 1, 2, //右\r\n            3, 6, 2, 6, 3, 7, //前\r\n            0, 5, 4, 5, 0, 1]); //后\r\n        var verDec: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION\");\r\n        let vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(verDec.vertexStride * 8, BufferUsage.Static, false);\r\n        vertexBuffer.vertexDeclaration = verDec;\r\n        let indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, 36, BufferUsage.Static, false);\r\n        vertexBuffer.setData(vertices);\r\n        indexBuffer.setData(indices);\r\n        this.bufferState = new BufferState();\r\n        this.bufferState.applyState([vertexBuffer], indexBuffer);\r\n        this._geometryElementOBj.setDrawElemenParams(36, 0);\r\n        this.indexFormat = IndexFormat.UInt16;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * UpdateGeometry Data\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n\r\n    }\r\n}","import { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexPositionNormalTexture</code> 类用于创建位置、纹理顶点结构。\r\n */\r\nexport class VertexPositionTexture0 implements IVertex {\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTexture0._vertexDeclaration = new VertexDeclaration(20, [new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector2, VertexMesh.MESH_TEXTURECOORDINATE0)]);\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _textureCoordinate0: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget textureCoordinate0(): Vector2 {\r\n\t\treturn this._textureCoordinate0;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTexture0._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, textureCoordinate0: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._textureCoordinate0 = textureCoordinate0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexPositionTexture0 } from \"../../graphics/Vertex/VertexPositionTexture0\"\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\n\r\n/**\r\n * @en SkyDome class is used to create a sky dome.\r\n * @zh SkyDome 类用于创建天空球。\r\n */\r\nexport class SkyDome extends GeometryElement {\r\n\t/**@internal */\r\n\tprivate static _radius: number = 1;\r\n    /**\r\n     * @en The singleton instance of the SkyDome.\r\n     * @zh SkyDome的实例。\r\n     */\r\n\tstatic instance: SkyDome;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSkyDome.instance = new SkyDome();//TODO:移植为标准Mesh后需要加锁\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _stacks: number;\r\n\t/**@internal */\r\n\tprivate _slices: number;\r\n\r\n    /**\r\n     * @internal\r\n     * @en The number of stacks of the SkyDome.\r\n     * @zh SkyDome的堆数。\r\n     */\r\n\tget stacks(): number {\r\n\t\treturn this._stacks;\r\n\t}\r\n\r\n    /**\r\n     * @internal\r\n     * @en The number of slices of the SkyDome.\r\n     * @zh SkyDome的层数。\r\n     */\r\n\tget slices(): number {\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates an instance of SkyDome.\r\n\t * @param stacks The number of stacks of the SkyDome.\r\n\t * @param slices The number of slices of the SkyDome.\r\n\t * @zh 创建一个 SkyDome 的实例。\r\n\t * @param stacks SkyDome的堆数。\r\n\t * @param slices SkyDome的层数。\r\n\t */\r\n\tconstructor(stacks: number = 48, slices: number = 48) {\r\n\t\tsuper(MeshTopology.Triangles,DrawType.DrawElement);\r\n\t\tthis._stacks = stacks;\r\n\t\tthis._slices = slices;\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexPositionTexture0.vertexDeclaration;\r\n\t\tvar vertexFloatCount: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar numberVertices: number = (this._stacks + 1) * (this._slices + 1);\r\n\t\tvar numberIndices: number = (3 * this._stacks * (this._slices + 1)) * 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array(numberVertices * vertexFloatCount);\r\n\t\tvar indices: Uint16Array = new Uint16Array(numberIndices);\r\n\r\n\t\tvar stackAngle: number = Math.PI / this._stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / this._slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvar vertexCount: number = 0;\r\n\t\tvar indexCount: number = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (this._stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (this._slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle);\r\n\t\t\t\tvertices[vertexCount + 0] = x * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * SkyDome._radius;\r\n\t\t\t\tvertices[vertexCount + 3] = -(slice / this._slices) + 0.75;//gzk 改成我喜欢的坐标系 原来是 slice/_slices\r\n\t\t\t\tvertices[vertexCount + 4] = stack / this._stacks;\r\n\t\t\t\tvertexCount += vertexFloatCount;\r\n\t\t\t\tif (stack != (this._stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (this._slices);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, false);\r\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tlet indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, false);\r\n\t\tvertexBuffer.setData(vertices.buffer);\r\n\t\tindexBuffer.setData(indices);\r\n\r\n\t\tvar bufferState: BufferState = new BufferState();\r\n\t\tbufferState.applyState([vertexBuffer],indexBuffer);\r\n\t\tthis.bufferState = bufferState;\r\n\t\tthis.indexFormat = IndexFormat.UInt16;\r\n\t\tthis._geometryElementOBj.setDrawElemenParams(indexBuffer.indexCount,0);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t _updateRenderParams(state: RenderContext3D): void {\r\n\t\t\r\n\t}\r\n}\r\n\r\n","import { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { IBaseRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { SkyRenderElement } from \"../../core/render/SkyRenderElement\";\r\nimport { SkyBox } from \"./SkyBox\";\r\nimport { SkyDome } from \"./SkyDome\";\r\n\r\n/**\r\n * @en SkyRenderer class used to implement sky rendering.\r\n * @zh SkyRenderer 类用于实现天空渲染器。\r\n */\r\nexport class SkyRenderer {\r\n    /**@internal */\r\n    static SUNLIGHTDIRECTION: number;\r\n    /**@internal */\r\n    static SUNLIGHTDIRCOLOR: number;\r\n    /**@internal */\r\n    static SKYVIEWMATRIX: number;\r\n    /**@internal */\r\n    static SKYPROJECTIONMATRIX: number;\r\n    /**@internal */\r\n    static SKYPROJECTIONVIEWMATRIX: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__() {\r\n        SkyRenderer.SUNLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SunLight_direction\");\r\n        SkyRenderer.SUNLIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_SunLight_color\");\r\n        SkyRenderer.SKYVIEWMATRIX = Shader3D.propertyNameToID(\"u_SkyViewMat\");\r\n        SkyRenderer.SKYPROJECTIONMATRIX = Shader3D.propertyNameToID(\"u_SkyProjectionMat\");\r\n        SkyRenderer.SKYPROJECTIONVIEWMATRIX = Shader3D.propertyNameToID(\"u_SkyProjectionViewMat\");\r\n        const commandUniform = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"SkyRenderer\");\r\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRECTION, \"u_SunLight_direction\", ShaderDataType.Vector3);\r\n        commandUniform.addShaderUniform(SkyRenderer.SUNLIGHTDIRCOLOR, \"u_SunLight_color\", ShaderDataType.Color);\r\n        commandUniform.addShaderUniform(SkyRenderer.SKYVIEWMATRIX, \"u_SkyViewMat\", ShaderDataType.Matrix4x4);\r\n        commandUniform.addShaderUniform(SkyRenderer.SKYPROJECTIONMATRIX, \"u_SkyProjectionMat\", ShaderDataType.Matrix4x4);\r\n        commandUniform.addShaderUniform(SkyRenderer.SKYPROJECTIONVIEWMATRIX, \"u_SkyProjectionViewMat\", ShaderDataType.Matrix4x4);\r\n    }\r\n\r\n    /** @internal */\r\n    private _material: Material;\r\n    /** @internal */\r\n    private _mesh: GeometryElement;\r\n\r\n    /** @internal */\r\n    _baseRenderNode: IBaseRenderNode;\r\n\r\n    private _renderData: BaseRender;\r\n\r\n    private _renderGeometry: boolean;\r\n\r\n    private _cacheRenderElement: SkyRenderElement;\r\n\r\n    /**\r\n     * @en The material.\r\n     * @zh 材质。\r\n     */\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n\r\n    set material(value: Material) {\r\n        if (this._material !== value) {\r\n            (this._material) && (this._material._removeReference());\r\n            this._material = value;\r\n            this._cacheRenderElement && (this._cacheRenderElement.material = value);\r\n            if (value) {\r\n                value._addReference();\r\n                //this._renderElement.renderSubShader = this._material._shader.getSubShaderAt(0);\r\n                //this._baseRenderNode.setOneMaterial(0, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The mesh of the renderer.\r\n     * @zh 渲染器网格。\r\n     */\r\n    get mesh(): GeometryElement {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh(value: GeometryElement) {\r\n        if (this._mesh !== value) {\r\n            this._mesh = value;\r\n            this._cacheRenderElement && this._cacheRenderElement.setGeometry(this.mesh);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private get meshType(): \"box\" | \"dome\" | \"\" {\r\n        return this.mesh == SkyBox.instance ? \"box\" : (this.mesh == SkyDome.instance ? \"dome\" : \"\");\r\n    }\r\n\r\n    /** @internal */\r\n    private set meshType(value: \"box\" | \"dome\" | \"\") {\r\n        if (value == \"dome\")\r\n            this.mesh = SkyDome.instance;\r\n        else\r\n            this.mesh = SkyBox.instance;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SkyRenderer.\r\n     * @zh 创建一个 SkyRenderer 的实例。\r\n     */\r\n    constructor() {\r\n        this.mesh = SkyDome.instance;\r\n        this._renderData = new BaseRender();\r\n        this._baseRenderNode = Laya3DRender.Render3DModuleDataFactory.createBaseRenderNode();\r\n        this._baseRenderNode.transform = new Transform3D(null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 是否可用。\r\n     */\r\n    _isAvailable(): boolean {\r\n        return this._material && this._mesh ? true : false;\r\n    }\r\n\r\n    /** @internal */\r\n    renderUpdate(context: RenderContext3D) {\r\n        let geomettry = this.mesh;\r\n        this._renderGeometry = geomettry._prepareRender(context);\r\n        geomettry._updateRenderParams(context);\r\n    }\r\n\r\n    /**\r\n     * @en Sets the render element for the sky.\r\n     * @param skyRenderElement The render element to set.\r\n     * @zh 设置天空的渲染元素。\r\n     * @param skyRenderElement 要设置的渲染元素。\r\n     */\r\n    setRenderElement(skyRenderElement: SkyRenderElement) {\r\n        if (this._cacheRenderElement != skyRenderElement) {\r\n            skyRenderElement.setGeometry(this.mesh);\r\n            skyRenderElement.material = this._material;\r\n            skyRenderElement.render = this._renderData;\r\n            skyRenderElement._renderElementOBJ.isRender = this._renderGeometry;\r\n            this._baseRenderNode.setRenderelements([skyRenderElement._renderElementOBJ]);\r\n            this._baseRenderNode.setCommonUniformMap([\r\n                \"Sprite3D\",\r\n                \"SkyRenderer\"\r\n            ]);\r\n            this._cacheRenderElement = skyRenderElement;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy(): void {\r\n\r\n        if (this._material) {\r\n            this._material._removeReference();\r\n            this._material = null;\r\n        }\r\n        this._renderData.destroy();\r\n        this._cacheRenderElement = null;\r\n        // this._renderElement.destroy();\r\n        // skyRenderElement 由 camera 设置, camera 负责 destroy\r\n        this._baseRenderNode.setRenderelements([]);\r\n        this._baseRenderNode.destroy();\r\n    }\r\n}\r\n\r\n\r\n","import { BaseRender } from \"./BaseRender\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\"\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\"\r\nimport { IRenderElement3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Transform3D } from \"../Transform3D\";\r\n\r\n/**\r\n * @en RenderElement class is used to implement rendering elements.\r\n * @zh RenderElement 类用于实现渲染元素。\r\n */\r\nexport class RenderElement {\r\n    /**\r\n     * @en Can submit underlying rendering nodes\r\n     * @zh 可提交底层的渲染节点\r\n     */\r\n    _renderElementOBJ: IRenderElement3D;\r\n    /** @internal */\r\n    _geometry: GeometryElement;\r\n    /** @internal */\r\n    _material: Material;//可能为空\r\n    /** @internal */\r\n    _baseRender: BaseRender;\r\n    /**@internal */\r\n    _subShader: SubShader;\r\n    /**@internal */\r\n    _subShaderIndex: number = 0;\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n\r\n    /**\r\n     * @internal\r\n     * @en The transform of the render element.\r\n     * @zh 渲染元素的变换。\r\n     */\r\n    get transform(): Transform3D {\r\n        return this._renderElementOBJ.transform;\r\n    }\r\n    set transform(value: Transform3D) {\r\n        this._transform = value;\r\n        this._renderElementOBJ.transform = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The material of the render element.\r\n     * @zh 渲染元素的材质。\r\n     */\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n    set material(value: Material) {\r\n        if (this._material) {\r\n            this._material._removeOwnerElement(this._renderElementOBJ);\r\n        }\r\n\r\n        if (value) {\r\n            this._material = value;\r\n            this.material._setOwnerElement(this._renderElementOBJ);\r\n        }\r\n        else {\r\n            this._material = null;\r\n            this._renderElementOBJ.materialShaderData = null;\r\n            this._renderElementOBJ.materialRenderQueue = 0;\r\n            this._renderElementOBJ.subShader = this._subShader = null;\r\n            this._renderElementOBJ.materialId = -1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The SubShader of the render element.\r\n     * @zh 渲染元素的 SubShader。\r\n     */\r\n    get renderSubShader(): SubShader {\r\n        return this._subShader;\r\n    }\r\n    set renderSubShader(value: SubShader) {\r\n        this._subShader = value;\r\n        this._renderElementOBJ.subShader = value;\r\n    }\r\n\r\n    /**\r\n     * @en The SubShader index of the render element.\r\n     * @zh 渲染元素的 SubShader 索引。\r\n     */\r\n    get subShaderIndex() {\r\n        return this._subShaderIndex;\r\n    }\r\n    set subShaderIndex(value: number) {\r\n        this._subShaderIndex = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The BaseRender of the render element.\r\n     * @zh 渲染元素的 BaseRender。\r\n     */\r\n    get render(): BaseRender {\r\n        return this._baseRender;\r\n    }\r\n    set render(value: BaseRender) {\r\n        this._baseRender = value;\r\n        this._renderElementOBJ.renderShaderData = value._baseRenderNode.shaderData;\r\n    }\r\n\r\n    /**@ignore */\r\n    constructor() {\r\n        this._createRenderElementOBJ();\r\n    }\r\n\r\n    protected _createRenderElementOBJ() {\r\n        this._renderElementOBJ = Laya3DRender.Render3DPassFactory.createRenderElement3D();\r\n    }\r\n\r\n    /**\r\n     * @en Set the transform of the render element.\r\n     * @param transform The transform to set.\r\n     * @zh 设置渲染元素的位置变换。\r\n     * @param transform 要设置的变换。\r\n     */\r\n    setTransform(transform: Transform3D): void {\r\n        this.transform = transform;\r\n        this._renderElementOBJ.transform = transform;\r\n    }\r\n\r\n    /**\r\n     * @en Set the geometry information of the render element.\r\n     * @param geometry The geometry to set.\r\n     * @zh 设置渲染元素的几何信息。\r\n     * @param geometry 要设置的几何信息。\r\n     */\r\n    setGeometry(geometry: GeometryElement): void {\r\n        this._geometry = geometry;\r\n        this._renderElementOBJ.geometry = geometry._geometryElementOBj;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy(): void {\r\n        this.material = null;\r\n        this._renderElementOBJ = null;\r\n        this._geometry = null;\r\n        this._baseRender = null;\r\n        this._baseRender = null;\r\n        this._subShader = null;\r\n    }\r\n}\r\n\r\n","import { IRenderElement3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { SkyRenderer } from \"../../resource/models/SkyRenderer\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\n\r\nconst InvertYScaleMat = new Matrix4x4(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n/**\r\n * @en The `SkyRenderElement` class is a render element that represents the sky.\r\n * @zh `SkyRenderElement` 类表示天空渲染元素。\r\n */\r\nexport class SkyRenderElement extends RenderElement {\r\n\r\n    /**\r\n     * @en The render element object that is declared for rendering.\r\n     * @zh 声明用于渲染的渲染元素对象。\r\n     */\r\n    declare _renderElementOBJ: IRenderElement3D;\r\n\r\n    private _viewMatrix: Matrix4x4;\r\n    private _projectionMatrix: Matrix4x4;\r\n    private _projectViewMatrix: Matrix4x4;\r\n\r\n    constructor() {\r\n        super();\r\n        this._viewMatrix = new Matrix4x4();\r\n        this._projectionMatrix = new Matrix4x4();\r\n        this._projectViewMatrix = new Matrix4x4();\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the view matrix based on the camera's view matrix.\r\n     * @param cameraViewMat The camera's view matrix.\r\n     * @zh 根据摄像机的视图矩阵计算视图矩阵。\r\n     * @param cameraViewMat 摄像机的视图矩阵。\r\n     */\r\n    calculateViewMatrix(cameraViewMat: Matrix4x4) {\r\n        cameraViewMat.cloneTo(this._viewMatrix);\r\n        this._viewMatrix.setTranslationVector(Vector3.ZERO);\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the projection matrix based on the camera's projection matrix and other parameters.\r\n     * @param cameraProjMat The camera's projection matrix.\r\n     * @param aspectRatio The aspect ratio of the projection.\r\n     * @param nearPlane The near plane distance of the projection.\r\n     * @param farPlane The far plane distance of the projection.\r\n     * @param fov The field of view for the perspective projection.\r\n     * @param orthographic Whether to use an orthographic projection.\r\n     * @zh 根据摄像机的投影矩阵和其他参数计算投影矩阵。\r\n     * @param cameraProjMat 摄像机的投影矩阵。\r\n     * @param aspectRatio 投影的纵横比。\r\n     * @param nearPlane 投影的近平面距离。\r\n     * @param farPlane 投影的远平面距离。\r\n     * @param fov 透视投影的视场角。\r\n     * @param orthographic 是否使用正交投影。\r\n     */\r\n    caluclateProjectionMatrix(cameraProjMat: Matrix4x4, aspectRatio: number, nearPlane: number, farPlane: number, fov: number, orthographic: boolean) {\r\n        if (orthographic) {\r\n            let halfWidth = 0.2;\r\n            let halfHeight = halfWidth;\r\n            Matrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, nearPlane, farPlane, this._projectionMatrix);\r\n        }\r\n        else {\r\n            cameraProjMat.cloneTo(this._projectionMatrix);\r\n            let epsilon = 1e-6;\r\n            let yScale = 1.0 / Math.tan(Math.PI * fov / 180 * 0.5);\r\n\r\n            this._projectionMatrix.elements[0] = yScale / aspectRatio;\r\n            this._projectionMatrix.elements[5] = yScale;\r\n            this._projectionMatrix.elements[10] = epsilon - 1.0;\r\n            this._projectionMatrix.elements[11] = -1.0;\r\n            this._projectionMatrix.elements[14] = -0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Prepares for rendering by setting up matrices and lighting information for sky rendering.\r\n     * @param context The rendering context.\r\n     * @zh 渲染前的准备工作，设置天空渲染所需的矩阵和光照信息。\r\n     * @param context 渲染上下文。\r\n     */\r\n    renderpre(context: RenderContext3D) {\r\n        if (context.invertY) {\r\n            let tempprojectMat = Matrix4x4.TEMPMatrix0;\r\n            let tempProjectView = Matrix4x4.TEMPMatrix1;\r\n            Matrix4x4.multiply(InvertYScaleMat, this._projectionMatrix, tempprojectMat);\r\n            Matrix4x4.multiply(tempprojectMat, this._viewMatrix, tempProjectView);\r\n            this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONMATRIX, tempprojectMat);\r\n            this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONVIEWMATRIX, tempProjectView);\r\n        }\r\n        else {\r\n            Matrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectViewMatrix);\r\n            this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONMATRIX, this._projectionMatrix);\r\n            this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONVIEWMATRIX, this._projectViewMatrix);\r\n        }\r\n\r\n        this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYVIEWMATRIX, this._viewMatrix);\r\n\r\n        this._renderElementOBJ.renderShaderData.setColor(SkyRenderer.SUNLIGHTDIRCOLOR, context.scene._sunColor);\r\n        this._renderElementOBJ.renderShaderData.setVector3(SkyRenderer.SUNLIGHTDIRECTION, context.scene._sundir);\r\n    }\r\n\r\n}","import { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UniformBufferParamsType, UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ShaderDataType, ShaderData } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { IRenderEngine } from \"../../RenderDriver/DriverDesign/RenderDevice/IRenderEngine\";\r\nimport { CommandUniformMap } from \"../../RenderDriver/DriverDesign/RenderDevice/CommandUniformMap\";\r\nimport { SkyRenderElement } from \"./render/SkyRenderElement\";\r\n\r\n/**\r\n * @en The `BaseCamera` class is used to create the parent class of cameras.\r\n * @zh `BaseCamera` 类用于创建摄像机的父类。\r\n */\r\nexport class BaseCamera extends Sprite3D {\r\n    /**\r\n     * @internal\r\n     * @en CameraUniformBlock Map\r\n     * @zh 相机UniformBlock映射\r\n     */\r\n    static cameraUniformMap: CommandUniformMap;\r\n    /**Camera Uniform PropertyID */\r\n    /**@internal */\r\n    static CAMERAPOS: number;\r\n    /**@internal */\r\n    static VIEWMATRIX: number;\r\n    /**@internal */\r\n    static PROJECTMATRIX: number;\r\n    /**@internal */\r\n    static VIEWPROJECTMATRIX: number;\r\n    /**@internal */\r\n    static CAMERADIRECTION: number;\r\n    /**@internal */\r\n    static CAMERAUP: number;\r\n    /**@internal */\r\n    static VIEWPORT: number;\r\n    /**@internal */\r\n    static PROJECTION_PARAMS: number;\r\n    /**@internal */\r\n    static OPAQUETEXTURE: number\r\n    /**@internal */\r\n    static OPAQUETEXTUREPARAMS: number;\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHNORMALSTEXTURE: number;\r\n    /**@internal */\r\n    static DEPTHZBUFFERPARAMS: number;\r\n    /**@internal */\r\n    static CAMERAUNIFORMBLOCK: number;\r\n    /**Camera Define*/\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTH: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTHNORMALS: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_ORTHOGRAPHIC: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_FXAA: ShaderDefine;\r\n    /**@internal */\r\n    static RENDERINGTYPE_SHADERDEFINE_FXAA: string = \"FXAA\";\r\n    /**渲染模式,延迟光照渲染，暂未开放。*/\r\n    static RENDERINGTYPE_DEFERREDLIGHTING: string = \"DEFERREDLIGHTING\";\r\n    /**\r\n     * @en Rendering mode: Forward rendering.\r\n     * @zh 渲染模式：前向渲染。\r\n     */\r\n    static RENDERINGTYPE_FORWARDRENDERING: string = \"FORWARDRENDERING\";\r\n    /**@internal */\r\n    protected static _invertYScaleMatrix: Matrix4x4 = new Matrix4x4(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);//Matrix4x4.createScaling(new Vector3(1, -1, 1), _invertYScaleMatrix);\r\n    /**@internal */\r\n    protected static _invertYProjectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    protected static _invertYProjectionViewMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    static _tempMatrix4x40: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    static CameraUBOData: UnifromBufferData;\r\n    /**\r\n     * @internal\r\n     * @en Initialize shader information\r\n     * @zh 初始化着色器信息\r\n     */\r\n    static shaderValueInit() {\r\n        BaseCamera.SHADERDEFINE_DEPTH = Shader3D.getDefineByName(\"DEPTHMAP\");\r\n        BaseCamera.SHADERDEFINE_DEPTHNORMALS = Shader3D.getDefineByName(\"DEPTHNORMALSMAP\");\r\n        BaseCamera.SHADERDEFINE_ORTHOGRAPHIC = Shader3D.getDefineByName(\"CAMERAORTHOGRAPHIC\");\r\n        BaseCamera.SHADERDEFINE_FXAA = Shader3D.getDefineByName(\"FXAA\");\r\n        let camerauniformMap = BaseCamera.cameraUniformMap = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"BaseCamera\");\r\n\r\n        BaseCamera.CAMERAPOS = Shader3D.propertyNameToID(\"u_CameraPos\");\r\n        BaseCamera.VIEWMATRIX = Shader3D.propertyNameToID(\"u_View\");\r\n        BaseCamera.VIEWPROJECTMATRIX = Shader3D.propertyNameToID(\"u_ViewProjection\");\r\n        BaseCamera.PROJECTMATRIX = Shader3D.propertyNameToID(\"u_Projection\");\r\n        BaseCamera.CAMERADIRECTION = Shader3D.propertyNameToID(\"u_CameraDirection\");\r\n        BaseCamera.CAMERAUP = Shader3D.propertyNameToID(\"u_CameraUp\");\r\n        BaseCamera.VIEWPORT = Shader3D.propertyNameToID(\"u_Viewport\");\r\n        BaseCamera.PROJECTION_PARAMS = Shader3D.propertyNameToID(\"u_ProjectionParams\");\r\n        BaseCamera.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        BaseCamera.DEPTHNORMALSTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalsTexture\");\r\n        BaseCamera.OPAQUETEXTURE = Shader3D.propertyNameToID(\"u_CameraOpaqueTexture\");\r\n        BaseCamera.OPAQUETEXTUREPARAMS = Shader3D.propertyNameToID(\"u_OpaqueTextureParams\");\r\n        BaseCamera.DEPTHZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        BaseCamera.CAMERAUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_CAMERA);\r\n        if (Config3D._uniformBlock) {\r\n            camerauniformMap.addShaderBlockUniform(BaseCamera.CAMERAUNIFORMBLOCK, UniformBufferObject.UBONAME_CAMERA, [\r\n                {\r\n                    id: BaseCamera.VIEWMATRIX,\r\n                    propertyName: \"u_View\",\r\n                    uniformtype: ShaderDataType.Matrix4x4\r\n                },\r\n                {\r\n                    id: BaseCamera.PROJECTMATRIX,\r\n                    propertyName: \"u_Projection\",\r\n                    uniformtype: ShaderDataType.Matrix4x4\r\n                },\r\n                {\r\n                    id: BaseCamera.VIEWPROJECTMATRIX,\r\n                    propertyName: \"u_ViewProjection\",\r\n                    uniformtype: ShaderDataType.Matrix4x4\r\n                },\r\n\r\n                {\r\n                    id: BaseCamera.PROJECTION_PARAMS,\r\n                    propertyName: \"u_ProjectionParams\",\r\n                    uniformtype: ShaderDataType.Vector4\r\n                },\r\n                {\r\n                    id: BaseCamera.VIEWPORT,\r\n                    propertyName: \"u_Viewport\",\r\n                    uniformtype: ShaderDataType.Vector4\r\n                },\r\n                {\r\n                    id: BaseCamera.CAMERADIRECTION,\r\n                    propertyName: \"u_CameraDirection\",\r\n                    uniformtype: ShaderDataType.Vector3\r\n                },\r\n                {\r\n                    id: BaseCamera.CAMERAUP,\r\n                    propertyName: \"u_CameraUp\",\r\n                    uniformtype: ShaderDataType.Vector3\r\n                },\r\n                {\r\n                    id: BaseCamera.CAMERAPOS,\r\n                    propertyName: \"u_CameraPos\",\r\n                    uniformtype: ShaderDataType.Vector3\r\n                }\r\n            ]);\r\n        } else {\r\n            camerauniformMap.addShaderUniform(BaseCamera.CAMERAPOS, \"u_CameraPos\", ShaderDataType.Vector3);\r\n            camerauniformMap.addShaderUniform(BaseCamera.VIEWMATRIX, \"u_View\", ShaderDataType.Matrix4x4);\r\n            camerauniformMap.addShaderUniform(BaseCamera.PROJECTMATRIX, \"u_Projection\", ShaderDataType.Matrix4x4);\r\n            camerauniformMap.addShaderUniform(BaseCamera.VIEWPROJECTMATRIX, \"u_ViewProjection\", ShaderDataType.Matrix4x4);\r\n            camerauniformMap.addShaderUniform(BaseCamera.CAMERADIRECTION, \"u_CameraDirection\", ShaderDataType.Vector3);\r\n            camerauniformMap.addShaderUniform(BaseCamera.CAMERAUP, \"u_CameraUp\", ShaderDataType.Vector3);\r\n            camerauniformMap.addShaderUniform(BaseCamera.VIEWPORT, \"u_Viewport\", ShaderDataType.Vector4);\r\n            camerauniformMap.addShaderUniform(BaseCamera.PROJECTION_PARAMS, \"u_ProjectionParams\", ShaderDataType.Vector4);\r\n        }\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHTEXTURE, \"u_CameraDepthTexture\", ShaderDataType.Texture2D);\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHNORMALSTEXTURE, \"u_CameraDepthNormalsTexture\", ShaderDataType.Texture2D);\r\n        camerauniformMap.addShaderUniform(BaseCamera.OPAQUETEXTURE, \"u_CameraOpaqueTexture\", ShaderDataType.Texture2D);\r\n        camerauniformMap.addShaderUniform(BaseCamera.OPAQUETEXTUREPARAMS, \"u_OpaqueTextureParams\", ShaderDataType.Vector4);\r\n        camerauniformMap.addShaderUniform(BaseCamera.DEPTHZBUFFERPARAMS, \"u_ZBufferParams\", ShaderDataType.Vector4);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Create BaseCamera UniformBuffer\r\n     * @returns {UnifromBufferData} The created UniformBufferData for the camera\r\n     * @zh 创建BaseCamera的UniformBuffer\r\n     * @returns {UnifromBufferData} 为相机创建的UniformBufferData\r\n     */\r\n    static createCameraUniformBlock() {\r\n        if (!BaseCamera.CameraUBOData) {\r\n            let uniformPara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\r\n            uniformPara.set(\"u_View\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_Projection\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_ViewProjection\", UniformBufferParamsType.Matrix4x4);\r\n            uniformPara.set(\"u_ProjectionParams\", UniformBufferParamsType.Vector4);\r\n            uniformPara.set(\"u_Viewport\", UniformBufferParamsType.Vector4);\r\n            uniformPara.set(\"u_CameraDirection\", UniformBufferParamsType.Vector3);\r\n            uniformPara.set(\"u_CameraUp\", UniformBufferParamsType.Vector3);\r\n            uniformPara.set(\"u_CameraPos\", UniformBufferParamsType.Vector3);\r\n\r\n            let uniformMap = new Map<number, UniformBufferParamsType>();\r\n            uniformPara.forEach((value, key) => {\r\n                uniformMap.set(Shader3D.propertyNameToID(key), value);\r\n            })\r\n            BaseCamera.CameraUBOData = new UnifromBufferData(uniformMap);\r\n        }\r\n\r\n        return BaseCamera.CameraUBOData;\r\n    }\r\n    /**\r\n     * @en Initialize the Camera\r\n     * @zh 初始化相机\r\n     */\r\n    static __init__() {\r\n        BaseCamera.shaderValueInit();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Rendering order.\r\n     * @zh 渲染顺序。\r\n     */\r\n    _renderingOrder: number\r\n    /** @internal */\r\n    _cameraUniformData: UnifromBufferData;\r\n    /** @internal */\r\n    _cameraUniformUBO: UniformBufferObject;\r\n    /**\r\n     * @en Near clipping plane.\r\n     * @zh 近裁剪面。\r\n     */\r\n    protected _nearPlane: number;\r\n    /**\r\n     * @en Far clipping plane.\r\n     * @zh 远裁剪面。\r\n     */\r\n    protected _farPlane: number;\r\n    /**\r\n     * @en Render engine.\r\n     * @zh 渲染引擎。\r\n     */\r\n    protected _renderEngine: IRenderEngine;\r\n    /**\r\n     * @internal\r\n     * @en The opening height at the farthest point of the camera.\r\n     * @zh 相机最远处的开合高度。\r\n     */\r\n    private _yrange: number;\r\n    /**\r\n     * @en Field of view.\r\n     * @zh 视野。\r\n     */\r\n    protected _fieldOfView: number;\r\n    /**\r\n     * @en Vertical size of orthographic projection.\r\n     * @zh 正交投影的垂直尺寸。\r\n     */\r\n    private _orthographicVerticalSize: number;\r\n\r\n    private _skyRenderElement: SkyRenderElement;\r\n\r\n    /**\r\n     * @en Forward vector.\r\n     * @zh 前向量。\r\n     */\r\n    _forward: Vector3 = new Vector3();\r\n    /**\r\n     * @en Up vector.\r\n     * @zh 上向量。\r\n     */\r\n    _up: Vector3 = new Vector3();\r\n    /**\r\n     * @en Whether the camera uses orthographic projection.\r\n     * @zh 是否使用正交投影。\r\n     */\r\n    protected _orthographic: boolean;\r\n    /**\r\n     * @internal\r\n     * @en Whether to use a user-defined projection matrix. If a user projection matrix is used, changes to camera projection-related parameters will not affect the projection matrix value. The ResetProjectionMatrix method needs to be called to update it.\r\n     * @zh 是否使用用户自定义投影矩阵。如果使用了用户投影矩阵，摄像机投影矩阵相关的参数改变则不改变投影矩阵的值，需调用ResetProjectionMatrix方法来更新。\r\n     */\r\n    protected _useUserProjectionMatrix: boolean;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Shader data.\r\n     * @zh 着色器数据。\r\n     */\r\n    _shaderValues: ShaderData;\r\n\r\n    /** @internal */\r\n    _linearClearColor: Color;\r\n    /**\r\n     * @en The clear color of the camera. The default color is CornflowerBlue.\r\n     * @zh 摄像机的清除颜色。默认颜色为CornflowerBlue。\r\n     */\r\n    private _clearColor: Color;\r\n    public get clearColor(): Color {\r\n        return this._clearColor;\r\n    }\r\n    public set clearColor(value: Color) {\r\n        this._clearColor = value;\r\n        value.toLinear(this._linearClearColor);\r\n    }\r\n    /**\r\n     * @en The culling mask value for visible layers, supporting mixed values. For example, cullingMask = Math.pow(2,0) | Math.pow(2,1) means layers 0 and 1 are visible.\r\n     * @zh 可视层位标记遮罩值,支持混合 例:cullingMask=Math.pow(2,0)|Math.pow(2,1)为第0层和第1层可见。\r\n     */\r\n    private _cullingMask: number;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Static mask\r\n     * @zh 静态遮罩\r\n     */\r\n    staticMask: number;\r\n\r\n    /**\r\n     * @en Whether to use occlusion culling during rendering.\r\n     * @zh 渲染时是否使用遮挡剔除。\r\n     */\r\n    useOcclusionCulling: boolean;\r\n\r\n    /**\r\n     * @en Sky renderer element.\r\n     * @zh 天空渲染器。\r\n     */\r\n    get skyRenderElement(): SkyRenderElement {\r\n        return this._skyRenderElement;\r\n    }\r\n\r\n    /**\r\n     * @en Field of view.\r\n     * @zh 视野。\r\n     */\r\n    get fieldOfView(): number {\r\n        return this._fieldOfView;\r\n    }\r\n\r\n    set fieldOfView(value: number) {\r\n        this._fieldOfView = value;\r\n        this._calculateProjectionMatrix();\r\n        this._caculateMaxLocalYRange();\r\n    }\r\n\r\n    /**\r\n     * @en Maximum local distance.\r\n     * @zh 最大本地距离。\r\n     */\r\n    get maxlocalYDistance(): number {\r\n        return this._yrange;\r\n    }\r\n\r\n    /**\r\n     * @en Near clipping plane.\r\n     * @zh 近裁剪面。\r\n     */\r\n    get nearPlane(): number {\r\n        return this._nearPlane;\r\n    }\r\n\r\n    set nearPlane(value: number) {\r\n        this._nearPlane = value;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @en Far clipping plane.\r\n     * @zh 远裁剪面。\r\n     */\r\n    get farPlane(): number {\r\n        return this._farPlane;\r\n    }\r\n\r\n    set farPlane(vaule: number) {\r\n        this._farPlane = vaule;\r\n        this._calculateProjectionMatrix();\r\n        this._caculateMaxLocalYRange();\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use orthographic projection matrix.\r\n     * @zh 是否使用正交投影矩阵。\r\n     */\r\n    get orthographic(): boolean {\r\n        return this._orthographic;\r\n    }\r\n\r\n    set orthographic(vaule: boolean) {\r\n        this._orthographic = vaule;\r\n        this._calculateProjectionMatrix();\r\n        if (vaule) {\r\n            this._shaderValues.addDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\r\n        } else\r\n            this._shaderValues.removeDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC);\r\n    }\r\n\r\n    /**\r\n     * @en Vertical size of the orthographic projection.\r\n     * @zh 正交投影的垂直尺寸。\r\n     */\r\n    get orthographicVerticalSize(): number {\r\n        return this._orthographicVerticalSize;\r\n    }\r\n\r\n    set orthographicVerticalSize(vaule: number) {\r\n        this._orthographicVerticalSize = vaule;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @en Culling mask.\r\n     * @zh 剔除遮罩。\r\n     */\r\n    get cullingMask() {\r\n        return this._cullingMask;\r\n    }\r\n\r\n    set cullingMask(value: number) {\r\n        this._cullingMask = value;\r\n    }\r\n\r\n    /**\r\n     * @en Rendering order.\r\n     * @zh 渲染顺序。\r\n     */\r\n    get renderingOrder(): number {\r\n        return this._renderingOrder;\r\n    }\r\n\r\n    set renderingOrder(value: number) {\r\n        this._renderingOrder = value;\r\n        this._sortCamerasByRenderingOrder();\r\n    }\r\n\r\n    /**\r\n     * @en Constructor function.\r\n     * @param nearPlane The near clipping plane. Default value is 0.3.\r\n     * @param farPlane The far clipping plane. Default value is 1000.\r\n     * @zh 构造函数。\r\n     * @param nearPlane 近裁剪面。默认值为 0.3。\r\n     * @param farPlane 远裁剪面。默认值为 1000。\r\n     */\r\n    constructor(nearPlane: number = 0.3, farPlane: number = 1000) {\r\n        super();\r\n        this._shaderValues = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\r\n        this._linearClearColor = new Color();\r\n        this.clearColor = new Color(100 / 255, 149 / 255, 237 / 255, 255 / 255);\r\n\r\n        this._fieldOfView = 60;\r\n        this._useUserProjectionMatrix = false;\r\n\r\n\r\n        this._orthographicVerticalSize = 10;\r\n        this.renderingOrder = 0;\r\n\r\n        this._nearPlane = nearPlane;\r\n        this._farPlane = farPlane;\r\n\r\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n        this.staticMask = 0xffffffff;\r\n        this.useOcclusionCulling = true;\r\n        this._renderEngine = LayaGL.renderEngine;\r\n        this._orthographic = false;\r\n        if (Config3D._uniformBlock) {\r\n            this._cameraUniformUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 0);\r\n            this._cameraUniformData = BaseCamera.createCameraUniformBlock();\r\n            if (!this._cameraUniformUBO) {\r\n                this._cameraUniformUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._cameraUniformData.getbyteLength(), false);\r\n            }\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, this._cameraUniformUBO, this._cameraUniformData);\r\n            this._shaderValues.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, this._cameraUniformUBO);\r\n        }\r\n\r\n        this._skyRenderElement = new SkyRenderElement();\r\n    }\r\n\r\n    private _caculateMaxLocalYRange() {\r\n        let halffield = 3.1416 * this.fieldOfView / 180.0 / 2;\r\n        let dist = this.farPlane;\r\n        this._yrange = Math.tan(halffield) * dist * 2;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _calculateProjectionMatrix(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onScreenSizeChanged(): void {\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new BaseCamera();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Sort cameras by their RenderingOrder property.\r\n     * @zh 通过 RenderingOrder 属性对摄像机进行排序。\r\n     */\r\n    _sortCamerasByRenderingOrder(): void {\r\n        if (this.displayedInStage) {\r\n            var cameraPool: BaseCamera[] = this.scene._cameraPool;//TODO:可优化，从队列中移除再加入\r\n            var n: number = cameraPool.length - 1;\r\n            for (var i: number = 0; i < n; i++) {\r\n                if (cameraPool[i].renderingOrder > cameraPool[n].renderingOrder) {\r\n                    var tempCamera: BaseCamera = cameraPool[i];\r\n                    cameraPool[i] = cameraPool[n];\r\n                    cameraPool[n] = tempCamera;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _prepareCameraToRender(): void {\r\n        //var cameraSV: ShaderData = this._shaderValues;\r\n        this.transform.getForward(this._forward);\r\n        this.transform.getUp(this._up);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERAPOS, this.transform.position);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERADIRECTION, this._forward);\r\n        this._shaderValues.setVector3(BaseCamera.CAMERAUP, this._up);\r\n    }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // _setShaderValue(index: number, value: any) {\r\n    // \tif (this._cameraUniformData && this._cameraUniformData._has(index))\r\n    // \t\tthis._cameraUniformData._setData(index, value);\r\n    // \tthis._shaderValues.setValueData(index, value);\r\n    // }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // _getShaderValue(index: number): any {\r\n    // \treturn this._shaderValues.getValueData(index);\r\n    // }\r\n\r\n\r\n    /**\r\n     * @en Camera rendering.\r\n     * @param scene The scene to render.\r\n     * @zh 相机渲染。\r\n     * @param scene 要渲染的场景。\r\n     */\r\n    render(scene: Scene3D): void {\r\n    }\r\n\r\n    /**\r\n     * @en Add a visible layer, layer value ranges from 0 to 31.\r\n     * @param layer The layer to add.\r\n     * @zh 增加可视图层，layer值为0到31层。\r\n     * @param layer 要添加的图层。\r\n     */\r\n    addLayer(layer: number): void {\r\n        this.cullingMask |= Math.pow(2, layer);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a visible layer, layer value ranges from 0 to 31.\r\n     * @param layer The layer to remove.\r\n     * @zh 移除可视图层，layer值为0到31层。\r\n     * @param layer 要移除的图层。\r\n     */\r\n    removeLayer(layer: number): void {\r\n        this.cullingMask &= ~Math.pow(2, layer);\r\n    }\r\n\r\n    /**\r\n     * @en Add all layers.\r\n     * @zh 增加所有图层。\r\n     */\r\n    addAllLayers(): void {\r\n        this.cullingMask = 2147483647/*int.MAX_VALUE*/;\r\n    }\r\n\r\n    /**\r\n     * @en Remove all layers.\r\n     * @zh 移除所有图层。\r\n     */\r\n    removeAllLayers(): void {\r\n        this.cullingMask = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate the projection matrix.\r\n     * @zh 重新计算投影矩阵。\r\n     */\r\n    resetProjectionMatrix(): void {\r\n        this._useUserProjectionMatrix = false;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onActive(): void {\r\n        ((<Scene3D>this._scene))._addCamera(this);\r\n        super._onActive();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onInActive(): void {\r\n        ((<Scene3D>this._scene))._removeCamera(this);\r\n        super._onInActive();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n\r\n        this.orthographic = data.orthographic;\r\n        (data.orthographicVerticalSize !== undefined) && (this.orthographicVerticalSize = data.orthographicVerticalSize);\r\n        (data.fieldOfView !== undefined) && (this.fieldOfView = data.fieldOfView);\r\n        this.nearPlane = data.nearPlane;\r\n        this.farPlane = data.farPlane;\r\n\r\n        var color: any[] = data.clearColor;\r\n        this.clearColor = new Color(color[0], color[1], color[2], color[3]);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Destroy the camera.\r\n     * @param destroyChild Whether to destroy child nodes.\r\n     * @zh 销毁相机。\r\n     * @param destroyChild 是否销毁子节点。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        //postProcess = null;\r\n        //AmbientLight = null;\r\n        this._skyRenderElement.destroy();\r\n        this._skyRenderElement = null;\r\n\r\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        super.destroy(destroyChild);\r\n    }\r\n}\r\n\r\n","import { Scene3D } from \"../scene/Scene3D\"\r\nimport { Camera } from \"../Camera\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { PipelineMode, IRenderContext3D, IRenderElement3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ShaderData } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { IRenderTarget } from \"../../../RenderDriver/DriverDesign/RenderDevice/IRenderTarget\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\n\r\n/**\r\n * @en Used to implement rendering states.\r\n * @zh 用于实现渲染状态。\r\n */\r\nexport class RenderContext3D {\r\n    /**\r\n     * @en The singleton instance of the RenderContext3D.\r\n     * @zh RenderContext3D的单例实例。\r\n     */\r\n    static _instance: RenderContext3D;\r\n\r\n\r\n    /**\r\n     * @en The width of the rendering area.\r\n     * @zh 渲染区域的宽度。\r\n     */\r\n    static clientWidth: number;\r\n    /**\r\n     * @en The height of the rendering area.\r\n     * @zh 渲染区域的高度。\r\n     */\r\n    static clientHeight: number;\r\n\r\n    /** @internal */\r\n    static GammaCorrect: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static __init__() {\r\n        RenderContext3D._instance = new RenderContext3D();\r\n\r\n        this.GammaCorrect = Shader3D.getDefineByName(\"GAMMACORRECT\");\r\n    }\r\n\r\n    /** @internal */\r\n    viewMatrix: Matrix4x4;\r\n    /**@internal */\r\n    customShader: Shader3D;\r\n    /**@internal */\r\n    replaceTag: string;\r\n\r\n    /** @internal */\r\n    projectionMatrix: Matrix4x4;\r\n    /** @internal */\r\n    projectionViewMatrix: Matrix4x4;\r\n\r\n    camera: Camera;\r\n    /**@internal */\r\n    _scene: Scene3D;\r\n    /**\r\n     * @en The rendering pipeline mode.\r\n     * @zh 渲染管线模式\r\n     */\r\n    configPipeLineMode: PipelineMode = \"Forward\";\r\n    /**@internal contextOBJ*/\r\n    _contextOBJ: IRenderContext3D;\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en The destination render target.\r\n     * @zh 目标渲染目标。\r\n     */\r\n    set destTarget(value: IRenderTarget) {\r\n        this._contextOBJ.setRenderTarget(value ? value._renderTarget : null, RenderClearFlag.Nothing);\r\n    }\r\n    /**\r\n     * @en The viewport for rendering.\r\n     * @zh 渲染视口。\r\n     */\r\n    set viewport(value: Viewport) {\r\n        this._contextOBJ.setViewPort(value);\r\n    }\r\n\r\n    /**\r\n     * @en The scissor rectangle for rendering.\r\n     * @zh 渲染裁剪矩形。\r\n     */\r\n    set scissor(value: Vector4) {\r\n        this._contextOBJ.setScissor(value);\r\n    }\r\n\r\n    /** @internal */\r\n    get invertY(): boolean {\r\n        return this._contextOBJ.invertY;\r\n    }\r\n\r\n    set invertY(value: boolean) {\r\n        this._contextOBJ.invertY = value;\r\n    }\r\n\r\n    /** @internal */\r\n    get pipelineMode(): PipelineMode {\r\n        return this._contextOBJ.pipelineMode;\r\n    }\r\n\r\n    set pipelineMode(value: PipelineMode) {\r\n        this._contextOBJ.pipelineMode = value;\r\n    }\r\n    /**\r\n     * @en The camera shader data.\r\n     * @zh 相机着色器数据。\r\n     */\r\n    get cameraShaderValue(): ShaderData {\r\n        return this._contextOBJ.cameraData;\r\n    }\r\n\r\n    set cameraShaderValue(value: ShaderData) {\r\n        this._contextOBJ.cameraData = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The current scene.\r\n     * @zh 当前场景。\r\n     */\r\n    get scene(): Scene3D {\r\n        return this._scene;\r\n    }\r\n    set scene(value: Scene3D) {\r\n        if (value) {\r\n            //this._contextOBJ.sceneModuleData = value._scenemoduleData; TODO miner\r\n            this._contextOBJ.sceneData = value._shaderValues;\r\n            this._scene = value;\r\n            this._contextOBJ.sceneModuleData = value._sceneModuleData;\r\n        } else {\r\n            this._contextOBJ.sceneModuleData = null;\r\n            this._contextOBJ.sceneData = null;\r\n            this._scene = null;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Changes the viewport.\r\n     * @param x The x-coordinate of the viewport.\r\n     * @param y The y-coordinate of the viewport.\r\n     * @param width The width of the viewport.\r\n     * @param height The height of the viewport.\r\n     * @zh 更改视口。\r\n     * @param x 视口 x 坐标。\r\n     * @param y 视口 y 坐标。\r\n     * @param width 视口的宽度。\r\n     * @param height 视口的高度。\r\n     */\r\n    changeViewport(x: number, y: number, width: number, height: number) {\r\n        Viewport._tempViewport.set(x, y, width, height);\r\n        this.viewport = Viewport._tempViewport;\r\n    }\r\n\r\n    /**\r\n     * @en Changes the scissor rectangle.\r\n     * @param x The x-coordinate of the scissor rectangle.\r\n     * @param y The y-coordinate of the scissor rectangle.\r\n     * @param width The width of the scissor rectangle.\r\n     * @param height The height of the scissor rectangle.\r\n     * @zh 更改裁剪矩形。\r\n     * @param x 裁剪矩形的 x 坐标。\r\n     * @param y 裁剪矩形的 y 坐标。\r\n     * @param width 裁剪矩形的宽度。\r\n     * @param height 裁剪矩形的高度。\r\n     */\r\n    changeScissor(x: number, y: number, width: number, height: number) {\r\n        Vector4.tempVec4.setValue(x, y, width, height);\r\n        this.scissor = Vector4.tempVec4;\r\n    }\r\n\r\n    /**\r\n     * @en Applies the context with the given camera update mark.\r\n     * @param cameraUpdateMark The camera update mark.\r\n     * @zh 应用具有给定相机更新标记的上下文。\r\n     * @param cameraUpdateMark 相机更新标记。\r\n     */\r\n    applyContext(cameraUpdateMark: number) {\r\n        this._contextOBJ.cameraUpdateMask = cameraUpdateMark;\r\n    }\r\n\r\n    /**\r\n     * @en Draws a single render element.\r\n     * @param renderelemt The render element to draw.\r\n     * @zh 渲染单个渲染元素。\r\n     * @param renderelemt 要绘制的渲染元素。\r\n     */\r\n    drawRenderElement(renderelemt: IRenderElement3D): void {\r\n        this._contextOBJ.drawRenderElementOne(renderelemt);\r\n    }\r\n    \r\n    /**@ignore */\r\n    constructor() {\r\n        this._contextOBJ = Laya3DRender.Render3DPassFactory.createRenderContext3D();\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\"\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\r\nimport { LayaGL } from \"../../../layagl/LayaGL\"\r\nimport { VertexElement } from \"../../../renders/VertexElement\"\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\"\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\"\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\"\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\"\r\nimport { GeometryElement } from \"../GeometryElement\"\r\nimport { RenderContext3D } from \"./RenderContext3D\"\r\n\r\n/**\r\n * @en The `ScreenQuad` class is used to create a fullscreen quad.\r\n * @zh `ScreenQuad` 类用于创建全屏四边形。\r\n */\r\nexport class ScreenQuad extends GeometryElement {\r\n\t/** @internal */\r\n\tstatic SCREENQUAD_POSITION_UV: number = 0;\r\n\t/** @internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\t/** @internal */\r\n\tprivate static _vertices: Float32Array = new Float32Array([\r\n\t\t1, 1, 1, 1,\r\n\t\t1, -1, 1, 0,\r\n\t\t-1, 1, 0, 1,\r\n\t\t-1, -1, 0, 0]);//the rule of OpenGL\r\n\t/** @internal */\r\n\tprivate static _verticesInvertUV: Float32Array = new Float32Array([\r\n\t\t1, 1, 1, 0,\r\n\t\t1, -1, 1, 1,\r\n\t\t-1, 1, 0, 0,\r\n\t\t-1, -1, 0, 1]);\r\n\t/**@internal */\r\n\tstatic instance: ScreenQuad;\r\n\tstatic InvertInstance: ScreenQuad;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tScreenQuad._vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, ScreenQuad.SCREENQUAD_POSITION_UV)]);\r\n\t\tScreenQuad.instance = new ScreenQuad();\r\n\t\tScreenQuad.instance.invertY = true;\r\n\t\tScreenQuad.InvertInstance = new ScreenQuad();\r\n\t\tScreenQuad.InvertInstance.invertY = false;\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprotected _bufferState: BufferState = new BufferState();\r\n\t/** @internal */\r\n\tprivate _vertexBufferInvertUV: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _bufferStateInvertUV: BufferState = new BufferState();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Construcutor method, do not use.\r\n\t * @zh 构造方法，禁止使用。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\r\n\t\tthis.setDrawArrayParams(0, 4);\r\n\t\t//顶点buffer\r\n\t\tthis._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBuffer.setData(ScreenQuad._vertices.buffer);\r\n\t\tthis._bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tthis._vertexBufferInvertUV = Laya3DRender.renderOBJCreate.createVertexBuffer3D(16 * 4, BufferUsage.Static, false);\r\n\t\tthis._vertexBufferInvertUV.vertexDeclaration = ScreenQuad._vertexDeclaration;\r\n\t\tthis._vertexBufferInvertUV.setData(ScreenQuad._verticesInvertUV.buffer);\r\n\t\tthis._bufferStateInvertUV.applyState([this._vertexBufferInvertUV], null);\r\n\r\n\t\tthis.invertY = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets whether to invert the Y-axis and selects the corresponding buffer state.\r\n\t * @param value Whether to invert the Y-axis \r\n\t * @zh 设置Y轴是否反转，并选择相应的缓冲状态。\r\n\t * @param value 是否反转Y轴\r\n\t */\r\n\tset invertY(value: boolean) {\r\n\t\tvalue = LayaGL.renderEngine._screenInvertY ? !value : value;\r\n\t\tthis.bufferState = value ? this._bufferStateInvertUV : this._bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * UpdateGeometry Data\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Destroys the ScreenQuad instance.\r\n\t * @zh 销毁ScreenQuad实例。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis._bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferStateInvertUV.destroy();\r\n\t\tthis._vertexBufferInvertUV.destroy();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { IRenderCMD } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\n/**\r\n * @en The `Command` class is used to create commands.\r\n * @zh `Command` 类用于创建指令。\r\n */\r\nexport class Command {\r\n\t/**@internal */\r\n\tstatic _screenShaderData: ShaderData;\r\n\t/** @internal */\r\n\tstatic _screenShader: Shader3D;\r\n\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_NAME: string = \"u_MainTex\";\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_NAME: string = \"u_OffsetScale\";\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_NAME: string = \"u_MainTex_TexelSize\";//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTURE_ID: number;//todo：\r\n\t/** @internal */\r\n\tstatic SCREENTEXTUREOFFSETSCALE_ID: number;//todo：\r\n\t/** @internal */\r\n\tstatic MAINTEXTURE_TEXELSIZE_ID: number;//todo：\r\n\r\n\t/**@internal */\r\n\t_commandBuffer: CommandBuffer = null;\r\n\t/**@internal */\r\n\t_context: RenderContext3D;\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __init__(): void {\r\n\t\tCommand._screenShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\t\tCommand._screenShader = Shader3D.find(\"BlitScreen\");\r\n\t\tCommand.SCREENTEXTURE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTURE_NAME);//todo：\r\n\t\tCommand.SCREENTEXTUREOFFSETSCALE_ID = Shader3D.propertyNameToID(Command.SCREENTEXTUREOFFSETSCALE_NAME);//todo：\r\n\t\tCommand.MAINTEXTURE_TEXELSIZE_ID = Shader3D.propertyNameToID(Command.MAINTEXTURE_TEXELSIZE_NAME);//todo：\r\n\t}\r\n\t/**@ignore */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Organizes rendering commands.\r\n\t * @zh 组织渲染指令。\r\n\t */\r\n\trun?(): void;\r\n\r\n\t/**\r\n\t * @en Recycles the rendering command.\r\n\t * @zh 回收渲染指令。\r\n\t */\r\n\trecover(): void {\r\n\t\tthis._commandBuffer = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * @returns \r\n\t */\r\n\tgetRenderCMD?(): IRenderCMD;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @destroy\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._commandBuffer = null;\r\n\t\tthis._context = null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { ScreenQuad } from \"../ScreenQuad\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { BlitQuadCMDData } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { Viewport } from \"../../../../maths/Viewport\";\r\n\r\n/**\r\n * @en The BlitScreenQuadCMD class is used to create render the source texture to the destination render texture by using the full screen quad command.\r\n * @zh BlitScreenQuadCMD 类用于创建通过全屏四边形将源纹理渲染到目标渲染纹理的指令\r\n */\r\nexport class BlitScreenQuadCMD extends Command {\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_QUAD: number = 0;\r\n\t/**@internal */\r\n\tstatic _SCREENTYPE_TRIANGLE: number = 1;\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\r\n\r\n\t/**\r\n\t * @en Create command stream\r\n\t * @param source  The source texture. If set to null, it will use the default RenderTexture from the Camera process.\r\n\t * @param dest  The destination texture. If set to null, it will use the default rendering target of the camera.\r\n\t * @param offsetScale  Offset scaling.\r\n\t * @param shader  The shader to use for rendering. \r\n\t * @param shaderData  The shader data for rendering. \r\n\t * @param subShader  The subShader index. Default is 0.\r\n\t * @param screenType  The screen type for rendering.\r\n\t * @param commandbuffer  The command buffer to use.\r\n\t * @zh 创建命令流\r\n\t * @param source 原始贴图 如果设置为null  将会使用默认的Camera流程中的原RenderTexture\r\n\t * @param dest 目标贴图 如果设置为null，将会使用默认的camera渲染目标\r\n\t * @param offsetScale 偏移缩放\r\n\t * @param shader 用于渲染的着色器。。\r\n\t * @param shaderData 用于渲染的着色器数据。\r\n\t * @param subShader subshader的节点\r\n\t * @param screenType 渲染的屏幕类型\r\n\t * @param commandbuffer 命令缓冲\r\n\t */\r\n\tstatic create(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0, screenType: number = BlitScreenQuadCMD._SCREENTYPE_QUAD, commandbuffer: CommandBuffer = null): BlitScreenQuadCMD {\r\n\t\tvar cmd: BlitScreenQuadCMD;\r\n\t\tcmd = BlitScreenQuadCMD._pool.length > 0 ? BlitScreenQuadCMD._pool.pop() : new BlitScreenQuadCMD();\r\n\t\tcmd._source = source;\r\n\t\tcmd.dest = dest;\r\n\t\tcmd.offsetScale = offsetScale || BlitScreenQuadCMD._defaultOffsetScale;\r\n\t\tcmd.setshader(shader, subShader, shaderData);\r\n\t\tcmd._commandBuffer = commandbuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _source: BaseTexture = null;\r\n\t/**@internal */\r\n\tprivate _dest: RenderTexture = null;\r\n\t/**@internal */\r\n\tprivate _offsetScale: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal */\r\n\tprivate _subShader: number = 0;\r\n\t/**@internal */\r\n\tprivate _sourceTexelSize: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _renderElement: RenderElement;\r\n\t/**@internal */\r\n\tprivate _transform3D: Transform3D;\r\n\t/**@internal */\r\n\t_blitQuadCMDData: BlitQuadCMDData;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._blitQuadCMDData = Laya3DRender.Render3DPassFactory.createBlitQuadCMDData();\r\n\t\tthis._transform3D = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\r\n\t\tthis._renderElement = new RenderElement();\r\n\t\tthis._renderElement.setTransform(this._transform3D);\r\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\r\n\t\tthis._blitQuadCMDData.element = this._renderElement._renderElementOBJ;\r\n\t\tthis._blitQuadCMDData.element.isRender = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The offset and scale for rendering.\r\n\t * @zh 渲染的偏移和缩放。\r\n\t */\r\n\tget offsetScale(): Vector4 {\r\n\t\treturn this._offsetScale;\r\n\t}\r\n\r\n\tset offsetScale(value: Vector4) {\r\n\t\tvalue.cloneTo(this._offsetScale);\r\n\t\tthis._blitQuadCMDData.offsetScale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The destination render texture.\r\n\t * @zh 目标渲染纹理。\r\n\t */\r\n\tget dest(): RenderTexture {\r\n\t\treturn this._dest;\r\n\t}\r\n\r\n\tset dest(value: RenderTexture) {\r\n\t\tthis._dest = value;\r\n\t\tthis._blitQuadCMDData.dest = value ? value._renderTarget : null;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The shader data for rendering.\r\n\t * @zh 渲染的着色器数据。\r\n\t */\r\n\tset shaderData(value: ShaderData) {\r\n\t\tthis._shaderData = value || Command._screenShaderData;\r\n\t\tthis._renderElement._renderElementOBJ.materialShaderData = this._shaderData;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * @returns \r\n\t */\r\n\tgetRenderCMD(): BlitQuadCMDData {\r\n\t\treturn this._blitQuadCMDData;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @param shader \r\n\t * @param subShader \r\n\t * @param shaderData \r\n\t */\r\n\tsetshader(shader: Shader3D, subShader: number, shaderData: ShaderData) {\r\n\t\tthis._shader = shader || Command._screenShader;\r\n\t\tthis._subShader = subShader || 0;\r\n\t\tthis.shaderData = shaderData;\r\n\t\tthis._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\r\n\t\tthis._renderElement._subShaderIndex = subShader;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Execute the command.\r\n\t * @zh 执行命令。\r\n\t */\r\n\trun(): void {//TODO:相机的UV\r\n\t\tvar source;\r\n\t\tif (!this._source) {\r\n\t\t\tif (!this._commandBuffer._camera._internalRenderTexture)//source null, Bind define FrameBuffer\r\n\t\t\t\tthrow \"camera internalRenderTexture is null,please set camera enableBuiltInRenderTexture\";\r\n\t\t\tsource = this._commandBuffer._camera._internalRenderTexture;\r\n\t\t} else\r\n\t\t\tsource = this._source;\r\n\t\tthis._blitQuadCMDData.source = source._texture;\r\n\t\tvar dest: RenderTexture = this._dest ? this._dest : this._commandBuffer._camera._internalRenderTexture;//set dest\r\n\t\tif (dest != this._dest) this._blitQuadCMDData.dest = dest._renderTarget;\r\n\t\tif (dest) {//set viewport\r\n\t\t\tViewport._tempViewport.set(0, 0, dest.width, dest.height);\r\n\t\t\tVector4.tempVec4.setValue(0, 0, dest.width, dest.height);\r\n\t\t\tthis._blitQuadCMDData.viewport = Viewport._tempViewport;\r\n\t\t\tthis._blitQuadCMDData.scissor = Vector4.tempVec4;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet camera = this._commandBuffer._camera;\r\n\t\t\tlet viewport: Viewport = camera.viewport;\r\n\t\t\tlet vpH = viewport.height;\r\n\t\t\tlet vpY = RenderContext3D.clientHeight - viewport.y - vpH;\r\n\t\t\tViewport._tempViewport.set(viewport.x, vpY, viewport.width, vpH);\r\n\t\t\tVector4.tempVec4.setValue(viewport.x, vpY, viewport.width, vpH);\r\n\t\t\tthis._blitQuadCMDData.viewport = Viewport._tempViewport;\r\n\t\t\tthis._blitQuadCMDData.scissor = Vector4.tempVec4;\r\n\t\t}\r\n\r\n\t\tlet invertY = dest ? true : false;\r\n\t\tthis._renderElement.setGeometry(invertY ? ScreenQuad.InvertInstance : ScreenQuad.instance);\r\n\r\n\t\tStat.blitDrawCall++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Recover the command for reuse.\r\n\t * @zh 回收命令以重复使用。\r\n\t */\r\n\trecover(): void {\r\n\t\tBlitScreenQuadCMD._pool.push(this);\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tBlitScreenQuadCMD._defaultOffsetScale.cloneTo(this._offsetScale);\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tsuper.recover();\r\n\t}\r\n\r\n\t/**\r\n\t * @en Destroy the command and release resources.\r\n\t * @zh 销毁命令并释放资源。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._source = null;\r\n\t\tthis.dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tthis._renderElement.destroy();\r\n\t}\r\n}","import { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { ShaderData, ShaderDataItem, ShaderDataType } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { SetRenderDataCMD, SetShaderDefineCMD } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { ShaderDefine } from \"../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetShaderDataCMD extends Command {\r\n\tstatic ShaderDataType_define: number = -2;\r\n\t/**@internal */\r\n\tprivate static _pool: SetShaderDataCMD[] = [];\r\n\r\n\t/**@internal */\r\n\t_setRenderDataCMD: SetRenderDataCMD;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(shaderData: ShaderData, nameID: number, value: ShaderDataItem, shaderDataType: ShaderDataType, commandBuffer: CommandBuffer): SetShaderDataCMD {\r\n\t\tvar cmd: SetShaderDataCMD;\r\n\t\tcmd = SetShaderDataCMD._pool.length > 0 ? SetShaderDataCMD._pool.pop() : new SetShaderDataCMD();\r\n\t\tcmd._setRenderDataCMD.dest = shaderData;\r\n\t\tcmd._setRenderDataCMD.propertyID = nameID;\r\n\t\tcmd._setRenderDataCMD.dataType = shaderDataType;\r\n\t\tcmd._setRenderDataCMD.value = value;\r\n\t\tcmd._commandBuffer = commandBuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._setRenderDataCMD = Laya3DRender.Render3DPassFactory.createSetRenderDataCMD();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * @returns \r\n\t */\r\n\tgetRenderCMD(): SetRenderDataCMD {\r\n\t\treturn this._setRenderDataCMD;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetShaderDataCMD._pool.push(this);\r\n\t}\r\n}\r\n\r\nexport class SetDefineCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**@internal */\r\n\t_setRenderDefineCMD: SetShaderDefineCMD;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(shaderData: ShaderData, define: ShaderDefine, addDefine: boolean, commandBuffer: CommandBuffer): SetDefineCMD {\r\n\t\tvar cmd: SetDefineCMD;\r\n\t\tcmd = SetDefineCMD._pool.length > 0 ? SetDefineCMD._pool.pop() : new SetDefineCMD();\r\n\t\tcmd._setRenderDefineCMD.dest = shaderData;\r\n\t\tcmd._setRenderDefineCMD.add = addDefine;\r\n\t\tcmd._setRenderDefineCMD.define = define;\r\n\t\tcmd._commandBuffer = commandBuffer;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._setRenderDefineCMD = Laya3DRender.Render3DPassFactory.createSetShaderDefineCMD();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * @returns \r\n\t */\r\n\tgetRenderCMD(): SetShaderDefineCMD {\r\n\t\treturn this._setRenderDefineCMD;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\trecover(): void {\r\n\t\tSetDefineCMD._pool.push(this);\r\n\t}\r\n}\r\n\r\n\r\n","import { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { ShadowCascadesMode } from \"../../../../d3/core/light/ShadowCascadesMode\";\r\nimport { ShadowMode } from \"../../../../d3/core/light/ShadowMode\";\r\nimport { IrradianceMode } from \"../../../../d3/core/render/BaseRender\";\r\nimport { AmbientMode } from \"../../../../d3/core/scene/AmbientMode\";\r\nimport { Bounds } from \"../../../../d3/math/Bounds\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { IRenderElement3D } from \"../../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ShaderData } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { Sprite3D } from \"../../../../d3/core/Sprite3D\";\r\nimport { Mesh } from \"../../../../d3/resource/models/Mesh\";\r\nexport enum BaseRenderType {\r\n    BaseRender = 0,\r\n    MeshRender = 1,\r\n    ParticleRender = 2,\r\n    TrailRender = 3,\r\n    LineRender = 4,\r\n    TerrainRender = 5,\r\n    SkyRender = 7,\r\n    SimpleSkinRender = 8,\r\n    SkinnedMeshRender = 9,\r\n}\r\n//3D Render Node\r\nexport interface IBaseRenderNode {\r\n    renderNodeType: number;//Flag\r\n    transform: Transform3D;\r\n    distanceForSort: number;\r\n    sortingFudge: number;\r\n    castShadow: boolean;\r\n    receiveShadow: boolean;\r\n    enable: boolean;\r\n    renderbitFlag: number;\r\n    layer: number;\r\n    bounds: Bounds;\r\n    baseGeometryBounds: Bounds;\r\n    boundsChange: boolean;\r\n    staticMask: number;\r\n    shaderData: ShaderData;\r\n    lightmapIndex: number;\r\n    lightmap: ILightMapData;\r\n    probeReflection: IReflectionProbeData;\r\n    probeReflectionUpdateMark: number;\r\n    reflectionMode: number;\r\n    volumetricGI: IVolumetricGIData;\r\n    lightProbUpdateMark: number;\r\n    irradientMode: IrradianceMode;\r\n\r\n    set_renderUpdatePreCall(call: any, fun: any): void;\r\n    set_caculateBoundingBox(call: any, fun: any): void;\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @param value \r\n     */\r\n    setRenderelements(value: IRenderElement3D[]): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @param value \r\n     */\r\n    setLightmapScaleOffset(value: Vector4): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @param value \r\n     */\r\n    setCommonUniformMap(value: string[]): void;\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  * @param index \r\n    //  * @param mat \r\n    //  */\r\n    // setOneMaterial(index: number, mat: Material): void;\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     */\r\n    destroy(): void;\r\n\r\n    _applyLightProb(): void;\r\n\r\n    _applyReflection(): void;\r\n}\r\n\r\nexport interface IMeshRenderNode extends IBaseRenderNode {\r\n\r\n}\r\n\r\nexport interface ISkinRenderNode extends IBaseRenderNode {\r\n    computeSkinnedData(): void;\r\n    setRootBoneTransfom(value: Sprite3D): void;\r\n    setOwnerTransform(value: Sprite3D): void;\r\n    setCacheMesh(cacheMesh: Mesh): void;\r\n    setBones(value: Sprite3D[]): void;\r\n    setSkinnedData(value: any[]): void;\r\n}\r\n\r\nexport interface ISimpleSkinRenderNode extends IBaseRenderNode {\r\n    setSimpleAnimatorParams(value: Vector4): void;\r\n}\r\n\r\n//Light\r\nexport interface IDirectLightData {\r\n    transform: Transform3D;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowNearPlane: number;\r\n    shadowCascadesMode: ShadowCascadesMode;\r\n    shadowTwoCascadeSplits: number;\r\n    setShadowFourCascadeSplits(value: Vector3): void;\r\n    setDirection(value: Vector3): void;\r\n}\r\n\r\nexport interface ISpotLightData {\r\n    transform: Transform3D;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowNearPlane: number;\r\n    spotRange: number;\r\n    spotAngle: number;\r\n    setDirection(value: Vector3): void;\r\n}\r\n\r\nexport interface IPointLightData {\r\n    transform: Transform3D;\r\n    range: number;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowNearPlane: number;\r\n}\r\n\r\nexport interface ILightMapData {\r\n    /**@internal */\r\n    lightmapColor: InternalTexture;\r\n    /**@internal */\r\n    lightmapDirection: InternalTexture;\r\n    /**@internal */\r\n    destroy(): void;\r\n}\r\n\r\nexport interface IReflectionProbeData {\r\n    /** @internal */\r\n    _id: number;\r\n    /**@internal */\r\n    boxProjection: boolean;\r\n    /**@internal */\r\n    bound: Bounds;\r\n    /**@internal */\r\n    ambientMode: AmbientMode;\r\n    /**@internal */\r\n    ambientIntensity: number;\r\n    /**@internal */\r\n    reflectionIntensity: number;\r\n    /**@internal */\r\n    reflectionTexture: InternalTexture;//textureCube\r\n    /**@internal */\r\n    iblTex: InternalTexture;//textureCube\r\n    /**@internal */\r\n    updateMark: number;\r\n    /**@internal */\r\n    iblTexRGBD: boolean;\r\n    /**@internal */\r\n    setProbePosition(value: Vector3): void;\r\n    /**@internal */\r\n    setAmbientColor(value: Color): void;\r\n    /**@internal */\r\n    setAmbientSH(value: Float32Array): void;\r\n    /**@internal */\r\n    destroy(): void;\r\n}\r\n\r\nexport interface IVolumetricGIData {\r\n    _id: number;\r\n    irradiance: InternalTexture;\r\n    distance: InternalTexture;\r\n    bound: Bounds;\r\n    intensity: number;\r\n    updateMark: number;\r\n    setProbeCounts(value: Vector3): void;\r\n    setProbeStep(value: Vector3): void;\r\n    setParams(value: Vector4): void;\r\n}\r\n\r\n//global data\r\nexport interface ICameraNodeData {\r\n    transform: Transform3D;\r\n    farplane: number;\r\n    nearplane: number;\r\n    fieldOfView: number;\r\n    aspectRatio: number;\r\n    setProjectionViewMatrix(value: Matrix4x4): void;\r\n}\r\n\r\nexport interface ISceneNodeData {\r\n    lightmapDirtyFlag: number;\r\n}\r\n\r\n\r\n\r\n","/**\r\n * @en Shadow cascade mode.\r\n * @zh 阴影的级联模式。\r\n */\r\nexport enum ShadowCascadesMode {\r\n    /**\r\n     * @en No cascades.\r\n     * @zh 无级联。\r\n     */\r\n    NoCascades,\r\n    /**\r\n     * @en Two-level cascades.\r\n     * @zh 二级级联。\r\n     */\r\n    TwoCascades,\r\n    /**\r\n     * @en Four-level cascades.\r\n     * @zh 四级级联。\r\n     */\r\n    FourCascades,\r\n}","/**\r\n * @en The shadow mode.\r\n * @zh 阴影模式。\r\n */\r\nexport enum ShadowMode {\r\n    /**\r\n     * @en No shadows are produced.\r\n     * @zh 不产生阴影。\r\n     */\r\n    None,\r\n    /**\r\n     * @en Hard shadows with lower performance requirements.\r\n     * @zh 硬阴影，对性能要求较低。\r\n     */\r\n    Hard,\r\n    /**\r\n     * @en Soft shadows with low intensity, moderate performance requirements.\r\n     * @zh 低强度软阴影，对性能要求一般。\r\n     */\r\n    SoftLow,\r\n    /**\r\n     * @en Soft shadows with high intensity, higher performance requirements.\r\n     * @zh 高强度软阴影，对性能要求较高。\r\n     */\r\n    SoftHigh\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IDirectLightData, IPointLightData, ISpotLightData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\n/** \r\n * @en Light type.\r\n * @zh 灯光类型。\r\n */\r\nexport enum LightType {\r\n    Directional,\r\n    Spot,\r\n    Point,\r\n    Area\r\n}\r\n\r\n/** \r\n * @en Light mode.\r\n * @zh 灯光模式。\r\n */\r\nexport enum LightMode {\r\n    mix,\r\n    realTime,//\r\n    bakeOnly\r\n}\r\n\r\n/**\r\n * @en LightSprite is the base class for creating light sources.\r\n * @zh LightSprite 类用于创建灯光的父类。\r\n */\r\nexport class Light extends Component {\r\n    /**@internal 下沉数据集合 */\r\n    protected _dataModule: IDirectLightData | ISpotLightData | IPointLightData;\r\n    /** @internal */\r\n    protected _shadowMode: ShadowMode = ShadowMode.None;\r\n\r\n    /** @internal */\r\n    private _isAlternate: boolean = false;\r\n    /** @internal */\r\n    _intensityColor: Vector3;\r\n    /** @internal */\r\n    _intensity: number;\r\n    /** @internal */\r\n    _lightmapBakedType: LightMode;\r\n    /** @internal */\r\n    _lightType: LightType;\r\n    /** \r\n     * @internal\r\n     * @en The light world matrix,because the scale will affect the clipping of the shadow\r\n     * @zh 因为scale会影响裁剪阴影\r\n     */\r\n    _lightWoldMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /** \r\n     * @en The light color.\r\n     * @zh 灯光颜色。 \r\n     */\r\n    color: Color;\r\n\r\n    /**\r\n     * @en The light intensity.\r\n     * @zh 灯光强度。\r\n     */\r\n    get intensity(): number {\r\n        return this._intensity;\r\n    }\r\n\r\n    set intensity(value: number) {\r\n        this._intensity = value;\r\n    }\r\n\r\n    /**\r\n     * @en Shadow mode.\r\n     * @zh 阴影模式。\r\n     */\r\n    get shadowMode(): ShadowMode {\r\n        return this._dataModule.shadowMode;\r\n    }\r\n\r\n    set shadowMode(value: ShadowMode) {\r\n        this._dataModule.shadowMode = value\r\n    }\r\n\r\n    /**\r\n     * @en The maximum shadow distance.\r\n     * @zh 最大阴影距离。\r\n     */\r\n    get shadowDistance(): number {\r\n        return this._dataModule.shadowDistance;\r\n    }\r\n\r\n    set shadowDistance(value: number) {\r\n        this._dataModule.shadowDistance = value;\r\n    }\r\n\r\n    /**\r\n     * @en The shadow map resolution.\r\n     * @zh 阴影贴图分辨率。\r\n     */\r\n    get shadowResolution(): number {\r\n        return this._dataModule.shadowResolution;\r\n    }\r\n\r\n    set shadowResolution(value: number) {\r\n        this._dataModule.shadowResolution = value;\r\n    }\r\n\r\n    /**\r\n     * @en The shadow depth bias.\r\n     * @zh 阴影深度偏差。\r\n     */\r\n    get shadowDepthBias(): number {\r\n        return this._dataModule.shadowDepthBias;\r\n    }\r\n\r\n    set shadowDepthBias(value: number) {\r\n        this._dataModule.shadowDepthBias = value;\r\n    }\r\n\r\n    /**\r\n     * @en The shadow normal bias.\r\n     * @zh 阴影法线偏差。\r\n     */\r\n    get shadowNormalBias(): number {\r\n        return this._dataModule.shadowNormalBias;\r\n    }\r\n\r\n    set shadowNormalBias(value: number) {\r\n        this._dataModule.shadowNormalBias = value;\r\n    }\r\n\r\n    /**\r\n     * @en The shadow strength.\r\n     * @zh 阴影强度。\r\n     */\r\n    get shadowStrength(): number {\r\n        return this._dataModule.shadowStrength;\r\n    }\r\n\r\n    set shadowStrength(value: number) {\r\n        this._dataModule.shadowStrength = value;\r\n    }\r\n\r\n    /**\r\n     * @en The near cut surface of the shadow cone.\r\n     * @zh 阴影视锥的近裁面。\r\n     */\r\n    get shadowNearPlane(): number {\r\n        return this._dataModule.shadowNearPlane;\r\n    }\r\n\r\n    set shadowNearPlane(value: number) {\r\n        this._dataModule.shadowNearPlane = value;\r\n    }\r\n\r\n    /**\r\n     * @en Light baking type\r\n     * @zh 灯光烘培类型。\r\n     */\r\n    get lightmapBakedType(): LightMode {\r\n        return this._lightmapBakedType;\r\n    }\r\n\r\n    set lightmapBakedType(value: LightMode) {\r\n        let premode = this._lightmapBakedType;\r\n        if (this._lightmapBakedType !== value) {\r\n            this._lightmapBakedType = value;\r\n            if (this._enabled) {\r\n                if (value == LightMode.bakeOnly)\r\n                    this._removeFromScene();\r\n                else\r\n                    if (premode == LightMode.bakeOnly)\r\n                        this._addToScene();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The light world matrix.\r\n     * @zh 灯光世界矩阵\r\n     */\r\n    get lightWorldMatrix(): Matrix4x4 {\r\n        var position = (this.owner as Sprite3D).transform.position;\r\n        var quaterian = (this.owner as Sprite3D).transform.rotation;\r\n        Matrix4x4.createAffineTransformation(position, quaterian, Vector3.ONE, this._lightWoldMatrix);\r\n        return this._lightWoldMatrix;\r\n    }\r\n\r\n    /**\r\n     * @en The light type.\r\n     * @zh 灯光类型\r\n     */\r\n    get lightType() {\r\n        return this._lightType;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of Light.\r\n     * @zh 创建一个 Light 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._creatModuleData();\r\n        this.runInEditor = true;\r\n        this._intensity = 1.0;\r\n        this._intensityColor = new Vector3();\r\n        this.color = new Color(1.0, 1.0, 1.0, 1.0);\r\n        this._lightmapBakedType = LightMode.realTime;\r\n        this.shadowResolution = 2048;\r\n        this.shadowDistance = 50.0;\r\n        this.shadowDepthBias = 1.0;\r\n        this.shadowNormalBias = 1.0;\r\n        this.shadowNearPlane = 0.1;\r\n        this.shadowStrength = 1.0;\r\n        this.shadowMode = ShadowMode.None;\r\n    }\r\n\r\n    protected _creatModuleData() {\r\n        //overrid it\r\n    }\r\n\r\n    /**@internal */\r\n    _setOwner(node: Sprite3D): void {\r\n        super._setOwner(node);\r\n        this._dataModule.transform = (this.owner as Sprite3D).transform;\r\n    }\r\n\r\n    /**@internal */\r\n    _getRenderDataModule() {\r\n        return this._dataModule;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var colorData: any[] = data.color;\r\n        this.color.r = colorData[0];\r\n        this.color.g = colorData[1];\r\n        this.color.b = colorData[2];\r\n        this.intensity = data.intensity;\r\n        this.lightmapBakedType = data.lightmapBakedType;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component) {\r\n        super._cloneTo(dest);\r\n        var light = <Light>dest;\r\n        light.color = this.color.clone();\r\n        light.intensity = this.intensity;\r\n        light.lightmapBakedType = this.lightmapBakedType;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addToScene(): void {\r\n        var scene: Scene3D = <Scene3D>this.owner.scene;\r\n        var maxLightCount: number = Config3D.maxLightCount;\r\n        if (scene._lightCount < maxLightCount) {\r\n            scene._lightCount++;\r\n            this._addToLightQueue();\r\n            this._isAlternate = false;\r\n        }\r\n        else {\r\n            scene._alternateLights.add(this);\r\n            this._isAlternate = true;\r\n            console.warn(\"LightSprite:light count has large than maxLightCount,the latest added light will be ignore.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeFromScene(): void {\r\n        var scene: Scene3D = <Scene3D>this.owner._scene;\r\n        if (!scene)\r\n            return;\r\n        if (this._isAlternate) {\r\n            scene._alternateLights.remove(this);\r\n        }\r\n        else {\r\n            scene._lightCount--;\r\n            this._removeFromLightQueue();\r\n            if (scene._alternateLights._length > 0) {\r\n                var alternateLight = scene._alternateLights.shift();\r\n                alternateLight!._addToLightQueue();\r\n                alternateLight!._isAlternate = false;\r\n                scene._lightCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _addToLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._addToScene());\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDisable(): void {\r\n        (this.lightmapBakedType !== LightMode.bakeOnly) && (this._removeFromScene());\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new Light();\r\n    }\r\n}\r\n\r\n","import { BoundFrustum, FrustumCorner } from \"../../math/BoundFrustum\";\r\nimport { BoundSphere } from \"../../math/BoundSphere\";\r\nimport { Plane } from \"../../math/Plane\";\r\nimport { ShadowSliceData } from \"../../shadowMap/ShadowSliceData\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { SpotLightCom } from \"./SpotLightCom\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { TextureCompareMode } from \"../../../RenderEngine/RenderEnum/TextureCompareMode\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\n\r\n/**\r\n * @internal\r\n */\r\nenum FrustumFace {\r\n    Near = 0,\r\n    Far = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n    Bottom = 4,\r\n    Top = 5,\r\n}\r\n\r\n/**\r\n * @en Enum representing the format of the shadow map.\r\n * @zh 表示阴影贴图格式的枚举。\r\n */\r\nexport enum ShadowMapFormat {\r\n    bit16,\r\n    bit24_8,\r\n    bit32\r\n}\r\n\r\n/**\r\n * @internal\r\n * @en Utility class for shadow-related calculations and operations.\r\n * @zh 用于阴影相关计算和操作的实用工具类。\r\n */\r\nexport class ShadowUtils {\r\n    /** @internal */\r\n    private static _tempMatrix0: Matrix4x4 = new Matrix4x4()\r\n\r\n\r\n    /** @internal */\r\n    private static _shadowMapScaleOffsetMatrix: Matrix4x4 = new Matrix4x4(\r\n        0.5, 0.0, 0.0, 0.0,\r\n        0.0, 0.5, 0.0, 0.0,\r\n        0.0, 0.0, 1.0, 0.0,\r\n        0.5, 0.5, 0.0, 1.0,\r\n    );\r\n\r\n    /** @internal */\r\n    private static _shadowMapInvertScaleOffsetMatrix = new Matrix4x4(\r\n        0.5, 0.0, 0.0, 0.0,\r\n        0.0, -0.5, 0.0, 0.0,\r\n        0.0, 0.0, 1.0, 0.0,\r\n        0.5, 0.5, 0.0, 1.0,\r\n    );\r\n\r\n    /** @internal */\r\n    private static _frustumCorners: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    /** @internal */\r\n    private static _adjustNearPlane: Plane;\r\n    /** @internal */\r\n    private static _adjustFarPlane: Plane;\r\n    /** @internal */\r\n    private static _backPlaneFaces: FrustumFace[] = new Array(5);\r\n    /** @internal */\r\n    private static _edgePlanePoint2: Vector3 = new Vector3();\r\n\r\n    /** @internal */\r\n    private static _frustumPlaneNeighbors: FrustumFace[][] = [\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// near\r\n        [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],// far\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// left\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],// right\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],// bottom\r\n        [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]];// top\r\n\r\n    /** @internal */\r\n    private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft]/* left */, [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight]/* right */, [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft]/* bottom */, [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]/* top */],// near\r\n        [[FrustumCorner.unknown, FrustumCorner.unknown]/* near */, [FrustumCorner.unknown, FrustumCorner.unknown]/* far */, [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft]/* left */, [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight]/* right */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight]/* bottom */, [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]/* top */],// far\r\n        [[FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft]/* near */, [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft]/* bottom */, [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]/* top */],// left\r\n        [[FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight]/* near */, [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight]/* far */, [FrustumCorner.unknown, FrustumCorner.unknown]/* left */, [FrustumCorner.unknown, FrustumCorner.unknown]/* right */, [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight]/* bottom */, [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]/* top */],// right\r\n        [[FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight]/* near */, [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft]/* far */, [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft]/* left */, [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight]/* right */, [FrustumCorner.unknown, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */],// bottom\r\n        [[FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft]/* near */, [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight]/* far */, [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft]/* left */, [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight], [FrustumCorner.unknown/* right */, FrustumCorner.unknown]/* bottom */, [FrustumCorner.unknown, FrustumCorner.unknown]/* top */]// top\r\n    ];\r\n\r\n    /**\r\n     * @internal\r\n     * @en The size of the border for the shadow atlas, which is used to avoid shadow artifacts. Now the maximum shadow sample tent is 5x5, so the atlas border size should be at least 3 (ceiling of 2.5), plus 1 pixel for the global border in no cascade mode.\r\n     * @zh 阴影图集的边框大小，用于避免阴影伪影。当前最大阴影采样罩是5x5，因此图集边框大小至少应为3（2.5的上取整），再加上1像素用于无级联模式下的全局边框。\r\n     */\r\n    static readonly atlasBorderSize: number = 4.0;//now max shadow sample tent is 5x5,atlas borderSize at leate 3=ceil(2.5),and +1 pixle is for global border for no cascade mode.\r\n\r\n    /**\r\n     * @en Initializes the shadow utility with default planes for adjusting the near and far planes.\r\n     * @zh 使用默认平面初始化阴影工具，以调整近平面和远平面。\r\n     */\r\n    static init() {\r\n        ShadowUtils._adjustNearPlane = new Plane(new Vector3(), 0);\r\n        ShadowUtils._adjustFarPlane = new Plane(new Vector3(), 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Checks if shadow rendering is supported by the current rendering engine.\r\n     * @zh 检查当前渲染引擎是否支持阴影渲染。\r\n     */\r\n    static supportShadow(): boolean {\r\n        return LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_Depth);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Creates a temporary shadow texture with the specified dimensions and format.\r\n     * @param width The width of the shadow texture.\r\n     * @param height The height of the shadow texture.\r\n     * @param shadowFormat The format of the shadow map.\r\n     * @zh 创建一个具有指定尺寸和格式的临时阴影纹理。\r\n     * @param width 阴影纹理的宽度。\r\n     * @param height 阴影纹理的高度。\r\n     * @param shadowFormat 阴影贴图的格式。\r\n     */\r\n    static getTemporaryShadowTexture(witdh: number, height: number, shadowFormat: ShadowMapFormat): RenderTexture {\r\n        let depthFormat = RenderTargetFormat.DEPTH_16;\r\n        switch (shadowFormat) {\r\n            case ShadowMapFormat.bit16:\r\n                depthFormat = RenderTargetFormat.DEPTH_16;\r\n                break;\r\n            case ShadowMapFormat.bit24_8:\r\n                depthFormat = RenderTargetFormat.DEPTHSTENCIL_24_8;\r\n                break;\r\n            case ShadowMapFormat.bit32:\r\n                depthFormat = RenderTargetFormat.DEPTH_32;\r\n                break;\r\n        }\r\n\r\n        var shadowMap: RenderTexture = RenderTexture.createFromPool(witdh, height, depthFormat, RenderTargetFormat.None, false, 1);\r\n        shadowMap.compareMode = TextureCompareMode.LESS;\r\n        shadowMap.filterMode = FilterMode.Bilinear;\r\n        shadowMap.wrapModeU = WrapMode.Clamp;\r\n        shadowMap.wrapModeV = WrapMode.Clamp;\r\n        return shadowMap;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the shadow bias for a light based on the shadow projection matrix and shadow resolution.\r\n     * @param light The light source.\r\n     * @param shadowProjectionMatrix The shadow projection matrix.\r\n     * @param shadowResolution The resolution of the shadow map.\r\n     * @param out The output vector to store the calculated depth and normal bias values.\r\n     * @zh 根据阴影投影矩阵和阴影分辨率为光源计算阴影偏差。\r\n     * @param light 光源。\r\n     * @param shadowProjectionMatrix 阴影投影矩阵。\r\n     * @param shadowResolution 阴影贴图的分辨率。\r\n     * @param out 输出向量，用于存储计算出的深度和法线偏差值。\r\n     */\r\n    static getShadowBias(light: Light, shadowProjectionMatrix: Matrix4x4, shadowResolution: number, out: Vector4): void {\r\n        var frustumSize: number;\r\n        if (light._lightType == LightType.Directional) {\r\n            // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\r\n            // elements[0] = 2.0 / (right - left)\r\n            frustumSize = 2.0 / shadowProjectionMatrix.elements[0];\r\n        }\r\n        else if (light._lightType == LightType.Spot) {\r\n            // For perspective projections, shadow texel size varies with depth\r\n            // It will only work well if done in receiver side in the pixel shader. Currently We\r\n            // do bias on caster side in vertex shader. When we add shader quality tiers we can properly\r\n            // handle this. For now, as a poor approximation we do a constant bias and compute the size of\r\n            // the frustum as if it was orthogonal considering the size at mid point between near and far planes.\r\n            // Depending on how big the light range is, it will be good enough with some tweaks in bias\r\n            frustumSize = Math.tan((<SpotLightCom>light).spotAngle * 0.5 * MathUtils3D.Deg2Rad) * (<SpotLightCom>light).range;\r\n        }\r\n        else {\r\n            console.warn(\"ShadowUtils:Only spot and directional shadow casters are supported now.\");\r\n            frustumSize = 0.0;\r\n        }\r\n\r\n        // depth and normal bias scale is in shadowmap texel size in world space\r\n        var texelSize: number = frustumSize / shadowResolution;\r\n        var depthBias: number = -light.shadowDepthBias * texelSize;\r\n        var normalBias: number = -light.shadowNormalBias * texelSize;\r\n\r\n        if (light.shadowMode == ShadowMode.SoftHigh) {\r\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\r\n            // This is not true with PCF. Ideally we need to do either\r\n            // cone base bias (based on distance to center sample)\r\n            // or receiver place bias based on derivatives.\r\n            // For now we scale it by the PCF kernel size (5x5)\r\n            const kernelRadius: number = 2.5;\r\n            depthBias *= kernelRadius;\r\n            normalBias *= kernelRadius;\r\n        }\r\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Retrieves the frustum planes from the camera's view-projection matrix.\r\n     * @param cameraViewProjectMatrix The combined camera view and projection matrix.\r\n     * @param frustumPlanes An array to store the retrieved frustum planes.\r\n     * @zh 从相机的视图投影矩阵中检索透视体的各个平面。\r\n     * @param cameraViewProjectMatrix 相机的视图和投影矩阵。\r\n     * @param frustumPlanes 一个数组，用于存储检索到的透视体平面。\r\n     */\r\n    static getCameraFrustumPlanes(cameraViewProjectMatrix: Matrix4x4, frustumPlanes: Plane[]): void {\r\n        BoundFrustum.getPlanesFromMatrix(cameraViewProjectMatrix, frustumPlanes[FrustumFace.Near], frustumPlanes[FrustumFace.Far], frustumPlanes[FrustumFace.Left], frustumPlanes[FrustumFace.Right], frustumPlanes[FrustumFace.Top], frustumPlanes[FrustumFace.Bottom]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the far distance based on the given radius and denominator.\r\n     * @param radius The radius used for calculation.\r\n     * @param denominator The denominator used in the calculation.\r\n     * @zh 根据给定的半径和分母计算远距离。\r\n     * @param radius 用于计算的半径。\r\n     * @param denominator 计算中使用的分母。\r\n     */\r\n    static getFarWithRadius(radius: number, denominator: number): number {\r\n        // use the frustum side as the radius and get the far distance form camera.\r\n        // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\r\n        // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\r\n        return Math.sqrt(radius * radius / denominator);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the split distances for cascade shadow mapping.\r\n     * @param twoSplitRatio The split ratio for two cascades.\r\n     * @param fourSplitRatio The split ratios for four cascades.\r\n     * @param cameraNear The near plane distance of the camera.\r\n     * @param shadowFar The far plane distance for shadow rendering.\r\n     * @param fov The field of view of the camera.\r\n     * @param aspectRatio The aspect ratio of the camera.\r\n     * @param cascadesMode The cascade mode (NoCascades, TwoCascades, or FourCascades).\r\n     * @param out The output array to store the calculated split distances.\r\n     * @zh 计算级联阴影映射的分割距离。\r\n     * @param twoSplitRatio 两级级联的分割比例。\r\n     * @param fourSplitRatio 四级级联的分割比例。\r\n     * @param cameraNear 相机的近平面距离。\r\n     * @param shadowFar 阴影渲染的远平面距离。\r\n     * @param fov 相机的视野角度。\r\n     * @param aspectRatio 相机的宽高比。\r\n     * @param cascadesMode 级联模式（无级联、两级级联或四级级联）。\r\n     * @param out 用于存储计算得出的分割距离的输出数组。\r\n     */\r\n    static getCascadesSplitDistance(twoSplitRatio: number, fourSplitRatio: Vector3, cameraNear: number, shadowFar: number, fov: number, aspectRatio: number, cascadesMode: ShadowCascadesMode, out: number[]): void {\r\n        out[0] = cameraNear;\r\n        var range: number = shadowFar - cameraNear;\r\n        var tFov: number = Math.tan(fov * 0.5);\r\n        var denominator: number = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\r\n        switch (cascadesMode) {\r\n            case ShadowCascadesMode.NoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.TwoCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * twoSplitRatio, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n            case ShadowCascadesMode.FourCascades:\r\n                out[1] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.x, denominator);\r\n                out[2] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.y, denominator);\r\n                out[3] = ShadowUtils.getFarWithRadius(cameraNear + range * fourSplitRatio.z, denominator);\r\n                out[4] = ShadowUtils.getFarWithRadius(shadowFar, denominator);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Applies transformation to the shadow slice.\r\n     * @param shadowSliceData The data containing the resolution and offset for the shadow slice.\r\n     * @param atlasWidth The width of the shadow map atlas.\r\n     * @param atlasHeight The height of the shadow map atlas.\r\n     * @param cascadeIndex The index of the cascade to apply the transformation to.\r\n     * @param outShadowMatrices The output array to store the transformed shadow matrices.\r\n     * @zh 对阴影切片应用变换。\r\n     * @param shadowSliceData 包含阴影切片的分辨率和偏移量的数据。\r\n     * @param atlasWidth 阴影图集的宽度。\r\n     * @param atlasHeight 阴影图集的高度。\r\n     * @param cascadeIndex 要应用变换的级联索引。\r\n     * @param outShadowMatrices 输出数组，用于存储变换后的阴影矩阵。\r\n     */\r\n    static applySliceTransform(shadowSliceData: ShadowSliceData, atlasWidth: number, atlasHeight: number, cascadeIndex: number, outShadowMatrices: Float32Array): void {\r\n        // Apply shadow slice scale and offset\r\n        var sliceE: Float32Array = ShadowUtils._tempMatrix0.elements;\r\n        var oneOverAtlasWidth: number = 1.0 / atlasWidth;\r\n        var oneOverAtlasHeight: number = 1.0 / atlasHeight;\r\n\r\n        sliceE[0] = shadowSliceData.resolution * oneOverAtlasWidth;//scale\r\n        sliceE[5] = shadowSliceData.resolution * oneOverAtlasHeight;\r\n        sliceE[12] = shadowSliceData.offsetX * oneOverAtlasWidth;//offset\r\n        sliceE[13] = shadowSliceData.offsetY * oneOverAtlasHeight;\r\n        sliceE[1] = sliceE[2] = sliceE[2] = sliceE[4] = sliceE[6] = sliceE[7] = sliceE[8] = sliceE[9] = sliceE[11] = sliceE[14] = 0;\r\n        sliceE[10] = sliceE[15] = 1;\r\n\r\n        var offset: number = cascadeIndex * 16;\r\n        Utils3D._mulMatrixArray(sliceE, outShadowMatrices, offset, outShadowMatrices, offset);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the culling planes for a directional light shadow from the camera frustum planes and the specified cascade index.\r\n     * @param cameraFrustumPlanes Array containing the planes of the camera frustum.\r\n     * @param cascadeIndex The index of the cascade for which to calculate the shadow culling planes.\r\n     * @param splitDistance Array containing the split distances for the shadow cascades.\r\n     * @param cameraNear The near plane distance of the camera.\r\n     * @param direction The direction of the directional light.\r\n     * @param shadowSliceData The data structure to store the calculated culling planes and related information.\r\n     * @zh 根据相机透视体平面和指定的级联索引计算定向光阴影的剔除平面。\r\n     * @param cameraFrustumPlanes 包含相机透视体平面的数组。\r\n     * @param cascadeIndex 要计算阴影剔除平面的级联索引。\r\n     * @param splitDistance 包含阴影级联分割距离的数组。\r\n     * @param cameraNear 相机的近平面距离。\r\n     * @param direction 定向光的方向。\r\n     * @param shadowSliceData 用于存储计算得到的剔除平面和相关信息的数据结构。\r\n     */\r\n    static getDirectionLightShadowCullPlanes(cameraFrustumPlanes: Array<Plane>, cascadeIndex: number, splitDistance: number[], cameraNear: number, direction: Vector3, shadowSliceData: ShadowSliceData): void {\r\n        // http://lspiroengine.com/?p=187\r\n        var frustumCorners: Vector3[] = ShadowUtils._frustumCorners;\r\n        var backPlaneFaces: FrustumFace[] = ShadowUtils._backPlaneFaces;\r\n        var planeNeighbors: FrustumFace[][] = ShadowUtils._frustumPlaneNeighbors;\r\n        var twoPlaneCorners: FrustumCorner[][][] = ShadowUtils._frustumTwoPlaneCorners;\r\n        var edgePlanePoint2: Vector3 = ShadowUtils._edgePlanePoint2;\r\n        var out: Plane[] = shadowSliceData.cullPlanes;\r\n\r\n        // cameraFrustumPlanes is share\r\n        var near: Plane = cameraFrustumPlanes[FrustumFace.Near], far: Plane = cameraFrustumPlanes[FrustumFace.Far];\r\n        var left: Plane = cameraFrustumPlanes[FrustumFace.Left], right: Plane = cameraFrustumPlanes[FrustumFace.Right];\r\n        var bottom: Plane = cameraFrustumPlanes[FrustumFace.Bottom], top: Plane = cameraFrustumPlanes[FrustumFace.Top];\r\n\r\n        // adjustment the near/far plane\r\n        var splitNearDistance: number = splitDistance[cascadeIndex] - cameraNear;\r\n        var splitNear: Plane = ShadowUtils._adjustNearPlane;\r\n        var splitFar: Plane = ShadowUtils._adjustFarPlane;\r\n        splitNear.normal = near.normal;\r\n        splitFar.normal = far.normal;\r\n        splitNear.distance = near.distance - splitNearDistance;\r\n        splitFar.distance = Math.min(-near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius, far.distance);//do a clamp is the sphere is out of range the far plane\r\n\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\r\n        BoundFrustum.get3PlaneInterPoint(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\r\n\r\n        var backIndex: number = 0;\r\n        for (var i: FrustumFace = 0; i < 6; i++) {// meybe 3、4、5(light eye is at far, forward is near, or orth camera is any axis)\r\n            var plane: Plane;\r\n            switch (i) {\r\n                case FrustumFace.Near:\r\n                    plane = splitNear;\r\n                    break;\r\n                case FrustumFace.Far:\r\n                    plane = splitFar;\r\n                    break;\r\n                default:\r\n                    plane = cameraFrustumPlanes[i];\r\n                    break;\r\n            }\r\n            if (Vector3.dot(plane.normal, direction) < 0.0) {\r\n                plane.cloneTo(out[backIndex]);\r\n                backPlaneFaces[backIndex] = i;\r\n                backIndex++;\r\n            }\r\n        }\r\n\r\n        var edgeIndex: number = backIndex;\r\n        for (var i: FrustumFace = 0; i < backIndex; i++) {\r\n            var backFace: FrustumFace = backPlaneFaces[i];\r\n            var neighborFaces: Array<FrustumFace> = planeNeighbors[backFace];\r\n            for (var j: number = 0; j < 4; j++) {\r\n                var neighborFace: FrustumFace = neighborFaces[j];\r\n                var notBackFace: boolean = true;\r\n                for (var k: number = 0; k < backIndex; k++)\r\n                    if (neighborFace == backPlaneFaces[k]) {\r\n                        notBackFace = false;\r\n                        break;\r\n                    }\r\n                if (notBackFace) {\r\n                    var corners: Array<FrustumCorner> = twoPlaneCorners[backFace][neighborFace];\r\n                    var point0: Vector3 = frustumCorners[corners[0]];\r\n                    var point1: Vector3 = frustumCorners[corners[1]];\r\n                    Vector3.add(point0, direction, edgePlanePoint2);\r\n                    Plane.createPlaneBy3P(point0, point1, edgePlanePoint2, out[edgeIndex++]);\r\n                }\r\n            }\r\n        }\r\n        shadowSliceData.cullPlaneCount = edgeIndex;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the minimal bounding sphere of a frustum defined by a camera.\r\n     * @param near The distance to the near plane of the frustum.\r\n     * @param far The distance to the far plane of the frustum.\r\n     * @param fov The field of view angle of the camera.\r\n     * @param aspectRatio The aspect ratio of the camera.\r\n     * @param cameraPos The position of the camera.\r\n     * @param forward The forward direction of the camera.\r\n     * @param outBoundSphere The output bound sphere containing the calculated center and radius.\r\n     * @returns The calculated center Z position of the bounding sphere.\r\n     * @zh 计算由相机定义的透视体的最小边界球。\r\n     * @param near 到透视体近平面的距离。\r\n     * @param far 到透视体远平面的距离。\r\n     * @param fov 相机的视野角度。\r\n     * @param aspectRatio 相机的宽高比。\r\n     * @param cameraPos 相机的位置。\r\n     * @param forward 相机的前方向。\r\n     * @param outBoundSphere 输出边界球，包含计算得到的中心和半径。\r\n     * @returns 计算得到的边界球的中心 Z 位置。\r\n     */\r\n    static getBoundSphereByFrustum(near: number, far: number, fov: number, aspectRatio: number, cameraPos: Vector3, forward: Vector3, outBoundSphere: BoundSphere): number {\r\n        // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\r\n        var centerZ: number;\r\n        var radius: number;\r\n        var k: number = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(fov / 2.0);\r\n        var k2: number = k * k;\r\n        var farSNear: number = far - near;\r\n        var farANear: number = far + near;\r\n        if (k2 > farSNear / farANear) {\r\n            centerZ = far;\r\n            radius = far * k;\r\n        }\r\n        else {\r\n            centerZ = 0.5 * farANear * (1 + k2);\r\n            radius = 0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\r\n        }\r\n\r\n        var center: Vector3 = outBoundSphere.center;\r\n        outBoundSphere.radius = radius;\r\n        Vector3.scale(forward, centerZ, center);\r\n        Vector3.add(cameraPos, center, center);\r\n        outBoundSphere.center = center;\r\n        return centerZ;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the maximum tile resolution that can fit in the given atlas dimensions.\r\n     * @param atlasWidth The width of the atlas.\r\n     * @param atlasHeight The height of the atlas.\r\n     * @param tileCount The number of tiles to fit in the atlas.\r\n     * @zh 计算在给定的图集尺寸内可以容纳的最大瓦片分辨率。\r\n     * @param atlasWidth 图集的宽度。\r\n     * @param atlasHeight 图集的高度。\r\n     * @param tileCount 需要在图集中容纳的瓦片数量。\r\n     */\r\n    static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\r\n        var resolution: number = Math.min(atlasWidth, atlasHeight);\r\n        var currentTileCount: number = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        while (currentTileCount < tileCount) {\r\n            resolution = Math.floor(resolution >> 1);\r\n            currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\r\n        }\r\n        return resolution;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the matrices for directional light shadows.\r\n     * @param lightUp The up vector of the light.\r\n     * @param lightSide The side vector of the light.\r\n     * @param lightForward The forward vector of the light.\r\n     * @param cascadeIndex The index of the current cascade.\r\n     * @param nearPlane The near plane distance.\r\n     * @param shadowResolution The resolution of the shadow map.\r\n     * @param shadowSliceData The data for the shadow slice.\r\n     * @param shadowMatrices The output array for the calculated shadow matrices.\r\n     * @zh 计算定向光阴影的矩阵。\r\n     * @param lightUp 光源的上向量。\r\n     * @param lightSide 光源的侧向量。\r\n     * @param lightForward 光源的前向量。\r\n     * @param cascadeIndex 当前级联的索引。\r\n     * @param nearPlane 近平面距离。\r\n     * @param shadowResolution 阴影贴图的分辨率。\r\n     * @param shadowSliceData 阴影切片的数据。\r\n     * @param shadowMatrices 用于存储计算得出的阴影矩阵的输出数组。\r\n     */\r\n    static getDirectionalLightMatrices(lightUp: Vector3, lightSide: Vector3, lightForward: Vector3, cascadeIndex: number, nearPlane: number, shadowResolution: number, shadowSliceData: ShadowSliceData, shadowMatrices: Float32Array): void {\r\n        var boundSphere: BoundSphere = shadowSliceData.splitBoundSphere;\r\n\r\n        // To solve shdow swimming problem.\r\n        var center: Vector3 = boundSphere.center;\r\n        var radius: number = boundSphere.radius;\r\n        var halfShadowResolution: number = shadowResolution / 2;\r\n        // Add border to prject edge pixel PCF.\r\n        // Improve:the clip planes not conside the border,but I think is OK,because the object can clip is not continuous.\r\n        var borderRadius: number = radius * halfShadowResolution / (halfShadowResolution - ShadowUtils.atlasBorderSize);\r\n        var borderDiam: number = borderRadius * 2.0;\r\n        var sizeUnit: number = shadowResolution / borderDiam;\r\n        var radiusUnit: number = borderDiam / shadowResolution;\r\n        var upLen: number = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\r\n        var sideLen: number = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\r\n        var forwardLen: number = Vector3.dot(center, lightForward);\r\n        center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\r\n        center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\r\n        center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\r\n        boundSphere.center = center;\r\n\r\n        // Direction light use shadow pancaking tech,do special dispose with nearPlane.\r\n        var origin: Vector3 = shadowSliceData.position;\r\n        var viewMatrix: Matrix4x4 = shadowSliceData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSliceData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSliceData.viewProjectMatrix;\r\n\r\n        shadowSliceData.resolution = shadowResolution;\r\n        shadowSliceData.offsetX = (cascadeIndex % 2) * shadowResolution;\r\n        shadowSliceData.offsetY = Math.floor(cascadeIndex / 2) * shadowResolution;\r\n\r\n        Vector3.scale(lightForward, radius + nearPlane, origin);\r\n        Vector3.subtract(center, origin, origin);\r\n        Matrix4x4.createLookAt(origin, center, lightUp, viewMatrix);\r\n        Matrix4x4.createOrthoOffCenter(-borderRadius, borderRadius, -borderRadius, borderRadius, 0.0, radius * 2.0 + nearPlane, projectMatrix);\r\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n        let offsetMat = ShadowUtils._shadowMapScaleOffsetMatrix.elements;\r\n        if (LayaGL.renderEngine._screenInvertY) {\r\n            offsetMat = ShadowUtils._shadowMapInvertScaleOffsetMatrix.elements;\r\n        }\r\n        Utils3D._mulMatrixArray(offsetMat, viewProjectMatrix.elements, 0, shadowMatrices, cascadeIndex * 16);\r\n    }\r\n\r\n    // /** \r\n    // * @internal\r\n    // */\r\n    // static getSpotLightShadowData(shadowSpotData: ShadowSpotData, spotLight: SpotLightCom, resolution: number, shadowParams: Vector4, shadowSpotMatrices: Matrix4x4, shadowMapSize: Vector4) {\r\n    //     var out: Vector3 = shadowSpotData.position = (spotLight.owner as Sprite3D).transform.position;\r\n    //     shadowSpotData.resolution = resolution;\r\n    //     shadowMapSize.setValue(1.0 / resolution, 1.0 / resolution, resolution, resolution);\r\n    //     shadowSpotData.offsetX = 0;\r\n    //     shadowSpotData.offsetY = 0;\r\n\r\n    //     var spotWorldMatrix: Matrix4x4 = spotLight.lightWorldMatrix;\r\n    //     var viewMatrix: Matrix4x4 = shadowSpotData.viewMatrix;\r\n    //     var projectMatrix: Matrix4x4 = shadowSpotData.projectionMatrix;\r\n    //     var viewProjectMatrix: Matrix4x4 = shadowSpotData.viewProjectMatrix;\r\n    //     var BoundFrustum: BoundFrustum = shadowSpotData.cameraCullInfo.boundFrustum;\r\n    //     spotWorldMatrix.invert(viewMatrix);\r\n    //     Matrix4x4.createPerspective(3.1416 * spotLight.spotAngle / 180.0, 1, 0.1, spotLight.range, projectMatrix);\r\n    //     shadowParams.y = spotLight.shadowStrength;\r\n    //     Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n    //     BoundFrustum.matrix = viewProjectMatrix;\r\n    //     viewProjectMatrix.cloneTo(shadowSpotMatrices);\r\n    //     shadowSpotData.cameraCullInfo.position = out;\r\n    // }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Prepares shader values for shadow receivers.\r\n     * @param shadowMapWidth The width of the shadow map.\r\n     * @param shadowMapHeight The height of the shadow map.\r\n     * @param shadowSliceDatas An array of ShadowSliceData objects.\r\n     * @param cascadeCount The number of shadow cascades.\r\n     * @param shadowMapSize A Vector4 to store shadow map size information.\r\n     * @param shadowMatrices A Float32Array to store shadow matrices.\r\n     * @param splitBoundSpheres A Float32Array to store split bound spheres.\r\n     * @zh 为阴影接收者准备着色器值。\r\n     * @param shadowMapWidth 阴影贴图的宽度。\r\n     * @param shadowMapHeight 阴影贴图的高度。\r\n     * @param shadowSliceDatas 阴影切片数据对象的数组。\r\n     * @param cascadeCount 阴影级联的数量。\r\n     * @param shadowMapSize 用于存储阴影贴图大小信息的 Vector4。\r\n     * @param shadowMatrices 用于存储阴影矩阵的 Float32Array。\r\n     * @param splitBoundSpheres 用于存储分割边界球的 Float32Array。\r\n     */\r\n    static prepareShadowReceiverShaderValues(shadowMapWidth: number, shadowMapHeight: number, shadowSliceDatas: ShadowSliceData[], cascadeCount: number, shadowMapSize: Vector4, shadowMatrices: Float32Array, splitBoundSpheres: Float32Array): void {\r\n        shadowMapSize.setValue(1.0 / shadowMapWidth, 1.0 / shadowMapHeight, shadowMapWidth, shadowMapHeight);\r\n        if (cascadeCount > 1) {\r\n            const matrixFloatCount: number = 16;\r\n            for (var i: number = cascadeCount * matrixFloatCount, n: number = 4 * matrixFloatCount; i < n; i++)//the last matrix is always ZERO\r\n                shadowMatrices[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n\r\n            for (var i: number = 0; i < cascadeCount; i++) {\r\n                var boundSphere: BoundSphere = shadowSliceDatas[i].splitBoundSphere;\r\n                var center: Vector3 = boundSphere.center;\r\n                var radius: number = boundSphere.radius;\r\n                var offset: number = i * 4;\r\n                splitBoundSpheres[offset] = center.x;\r\n                splitBoundSpheres[offset + 1] = center.y;\r\n                splitBoundSpheres[offset + 2] = center.z;\r\n                splitBoundSpheres[offset + 3] = radius * radius;\r\n            }\r\n            const sphereFloatCount: number = 4;\r\n            for (var i: number = cascadeCount * sphereFloatCount, n: number = 4 * sphereFloatCount; i < n; i++)\r\n                splitBoundSpheres[i] = 0.0;//set Matrix4x4.ZERO to project the cascade index is 4\r\n        }\r\n    }\r\n}","import { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../core/MeshSprite3DShaderDeclaration\";\r\nimport { Mesh } from \"./Mesh\";\r\n\r\n/**\r\n * @en Utility class for mesh operations\r\n * @zh Mesh操作的实用工具类\r\n */\r\nexport class MeshUtil {\r\n    /**\r\n     * @en Get the shader defines for a mesh\r\n     * @param mesh The mesh to analyze\r\n     * @param out Array to store the resulting shader defines\r\n     * @zh 获取mesh的着色器宏定义\r\n     * @param mesh 输入的Mesh对象\r\n     * @param out 用于存储着色器宏定义的输出数组\r\n     */\r\n    static getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>) {\r\n        out.length = 0;\r\n        let vertexElements = mesh._vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (const element of vertexElements) {\r\n            switch (element.elementUsage) {\r\n                case VertexMesh.MESH_COLOR0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\n\r\n/**\r\n * @en The `MeshFilter` class is used to create mesh filters.\r\n * @zh `MeshFilter` 类用于创建网格过滤器。\r\n */\r\nexport class MeshFilter extends Component {\r\n    /** @internal */\r\n    static _meshVerticeDefine: Array<ShaderDefine> = [];\r\n\r\n    /** @internal */\r\n    private _sharedMesh: Mesh;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\r\n        render && render._enabled && render._onMeshChange(this._sharedMesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        const render = this.owner.getComponent(MeshRenderer) as MeshRenderer;\r\n       // render && render._enabled && render._onMeshChange(null);\r\n    }\r\n\r\n    /**\r\n     * @en The shared mesh of the MeshFilter.\r\n     * @zh 共享网格。\r\n     */\r\n    get sharedMesh(): Mesh {\r\n        return this._sharedMesh;\r\n    }\r\n\r\n    set sharedMesh(value: Mesh) {\r\n        if (this._sharedMesh !== value) {\r\n            //meshReference\r\n            var lastValue: Mesh = this._sharedMesh;\r\n            if (lastValue) {\r\n                lastValue._removeReference();\r\n            }\r\n            if (value) {\r\n                value._addReference();\r\n            }\r\n            this._sharedMesh = value;\r\n\r\n            const render = this.owner.getComponent(MeshRenderer);\r\n            if (!render) {\r\n                return;\r\n            }\r\n            render._onMeshChange(value);\r\n            this._sharedMesh = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n        (this._sharedMesh) && (this._sharedMesh._removeReference(), this._sharedMesh = null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Clone the component to another object.\r\n     * @param dest The destination component.\r\n     * @zh 克隆组件到另一个对象。\r\n     * @param dest 目标组件。\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        let meshfilter = dest as MeshFilter;\r\n        meshfilter.sharedMesh = this.sharedMesh;\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { BlendEquationSeparate } from \"../../../RenderEngine/RenderEnum/BlendEquationSeparate\";\r\nimport { BlendFactor } from \"../../../RenderEngine/RenderEnum/BlendFactor\";\r\nimport { BlendType } from \"../../../RenderEngine/RenderEnum/BlendType\";\r\nimport { CompareFunction } from \"../../../RenderEngine/RenderEnum/CompareFunction\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { StencilOperation } from \"../../../RenderEngine/RenderEnum/StencilOperation\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>RenderState</code> 类用于控制渲染状态。\r\n */\r\nexport class RenderState {\r\n\t/**剔除枚举_不剔除。*/\r\n\tstatic CULL_NONE: number = CullMode.Off;\r\n\t/**剔除枚举_剔除正面。*/\r\n\tstatic CULL_FRONT: number = CullMode.Front;\r\n\t/**剔除枚举_剔除背面。*/\r\n\tstatic CULL_BACK: number = CullMode.Back;\r\n\r\n\t/**混合枚举_禁用。*/\r\n\tstatic BLEND_DISABLE: number = BlendType.BLEND_DISABLE;\r\n\t/**混合枚举_启用_RGB和Alpha统一混合。*/\r\n\tstatic BLEND_ENABLE_ALL: number = BlendType.BLEND_ENABLE_ALL;\r\n\t/**混合枚举_启用_RGB和Alpha单独混合。*/\r\n\tstatic BLEND_ENABLE_SEPERATE: number = BlendType.BLEND_ENABLE_SEPERATE;\r\n\r\n\t/**混合参数枚举_零,例：RGB(0,0,0),Alpha:(1)。*/\r\n\tstatic BLENDPARAM_ZERO: number = BlendFactor.Zero;\r\n\t/**混合参数枚举_一,例：RGB(1,1,1),Alpha:(1)。*/\r\n\tstatic BLENDPARAM_ONE: number = BlendFactor.One;\r\n\t/**混合参数枚举_源颜色,例：RGB(Rs, Gs, Bs)，Alpha(As)。*/\r\n\tstatic BLENDPARAM_SRC_COLOR: number = BlendFactor.SourceColor;\r\n\t/**混合参数枚举_一减源颜色,例：RGB(1-Rs, 1-Gs, 1-Bs)，Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_SRC_COLOR: number = BlendFactor.OneMinusSourceColor;\r\n\t/**混合参数枚举_目标颜色,例：RGB(Rd, Gd, Bd),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_DST_COLOR: number = BlendFactor.DestinationColor;\r\n\t/**混合参数枚举_一减目标颜色,例：RGB(1-Rd, 1-Gd, 1-Bd)，Alpha(1-Ad)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_DST_COLOR: number = BlendFactor.OneMinusDestinationColor;\r\n\t/**混合参数枚举_源透明,例:RGB(As, As, As),Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_SRC_ALPHA: number = BlendFactor.SourceAlpha;\r\n\t/**混合参数枚举_一减源阿尔法,例:RGB(1-As, 1-As, 1-As),Alpha(1-As)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_SRC_ALPHA: number = BlendFactor.OneMinusSourceAlpha;\r\n\t/**混合参数枚举_目标阿尔法，例：RGB(Ad, Ad, Ad),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_DST_ALPHA: number = BlendFactor.DestinationAlpha;\r\n\t/**混合参数枚举_一减目标阿尔法,例：RGB(1-Ad, 1-Ad, 1-Ad),Alpha(Ad)。*/\r\n\tstatic BLENDPARAM_ONE_MINUS_DST_ALPHA: number = BlendFactor.OneMinusDestinationAlpha;\r\n\t/**混合参数枚举_阿尔法饱和，例：RGB(min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad)),Alpha(1)。*/\r\n\tstatic BLENDPARAM_SRC_ALPHA_SATURATE: number = BlendFactor.SourceAlphaSaturate;\r\n\t/**混合参数枚举_混合设置颜色 */\r\n\tstatic BLENDPARAM_BLENDCOLOR: number = BlendFactor.BlendColor;\r\n\t/**很合参数枚举_混合颜色取反 */\r\n\tstatic BLENDPARAM_BLEND_ONEMINUS_COLOR: number = BlendFactor.OneMinusBlendColor;\r\n\r\n\t/**混合方程枚举_加法,例：source + destination*/\r\n\tstatic BLENDEQUATION_ADD: number = BlendEquationSeparate.ADD;\r\n\t/**混合方程枚举_减法，例：source - destination*/\r\n\tstatic BLENDEQUATION_SUBTRACT: number = BlendEquationSeparate.SUBTRACT;\r\n\t/**混合方程枚举_反序减法，例：destination - source*/\r\n\tstatic BLENDEQUATION_REVERSE_SUBTRACT: number = BlendEquationSeparate.REVERSE_SUBTRACT;\r\n\t/**混合方程枚举_取最小 TODO */\r\n\tstatic BLENDEQUATION_MIN: number = BlendEquationSeparate.MIN;\r\n\t/**混合方程枚举_取最大 TODO*/\r\n\tstatic BLENDEQUATION_MAX: number = BlendEquationSeparate.MAX;\r\n\r\n\t/**深度测试函数枚举_关闭深度测试。*/\r\n\tstatic DEPTHTEST_OFF: number = CompareFunction.Off;/*WebGLContext.NEVER*/;//TODO:什么鬼\r\n\t/**深度测试函数枚举_从不通过。*/\r\n\tstatic DEPTHTEST_NEVER: number = CompareFunction.Never/*WebGLContext.NEVER*/;\r\n\t/**深度测试函数枚举_小于时通过。*/\r\n\tstatic DEPTHTEST_LESS: number = CompareFunction.Less/*WebGLContext.LESS*/;\r\n\t/**深度测试函数枚举_等于时通过。*/\r\n\tstatic DEPTHTEST_EQUAL: number = CompareFunction.Equal/*WebGLContext.EQUAL*/;\r\n\t/**深度测试函数枚举_小于等于时通过。*/\r\n\tstatic DEPTHTEST_LEQUAL: number = CompareFunction.LessEqual/*WebGLContext.LEQUAL*/;\r\n\t/**深度测试函数枚举_大于时通过。*/\r\n\tstatic DEPTHTEST_GREATER: number = CompareFunction.Greater/*WebGLContext.GREATER*/;\r\n\t/**深度测试函数枚举_不等于时通过。*/\r\n\tstatic DEPTHTEST_NOTEQUAL: number = CompareFunction.NotEqual/*WebGLContext.NOTEQUAL*/;\r\n\t/**深度测试函数枚举_大于等于时通过。*/\r\n\tstatic DEPTHTEST_GEQUAL: number = CompareFunction.GreaterEqual/*WebGLContext.GEQUAL*/;\r\n\t/**深度测试函数枚举_总是通过。*/\r\n\tstatic DEPTHTEST_ALWAYS: number = CompareFunction.Always/*WebGLContext.ALWAYS*/;\r\n\r\n\r\n\tstatic STENCILTEST_OFF: number = CompareFunction.Off;\r\n\t/**深度测试函数枚举_从不通过。*/\r\n\tstatic STENCILTEST_NEVER: number = CompareFunction.Never/*WebGLContext.NEVER*/;\r\n\t/**深度测试函数枚举_小于时通过。*/\r\n\tstatic STENCILTEST_LESS: number = CompareFunction.Less/*WebGLContext.LESS*/;\r\n\t/**深度测试函数枚举_等于时通过。*/\r\n\tstatic STENCILTEST_EQUAL: number = CompareFunction.Equal/*WebGLContext.EQUAL*/;\r\n\t/**深度测试函数枚举_小于等于时通过。*/\r\n\tstatic STENCILTEST_LEQUAL: number = CompareFunction.LessEqual/*WebGLContext.LEQUAL*/;\r\n\t/**深度测试函数枚举_大于时通过。*/\r\n\tstatic STENCILTEST_GREATER: number = CompareFunction.Greater/*WebGLContext.GREATER*/;\r\n\t/**深度测试函数枚举_不等于时通过。*/\r\n\tstatic STENCILTEST_NOTEQUAL: number = CompareFunction.NotEqual/*WebGLContext.NOTEQUAL*/;\r\n\t/**深度测试函数枚举_大于等于时通过。*/\r\n\tstatic STENCILTEST_GEQUAL: number = CompareFunction.GreaterEqual/*WebGLContext.GEQUAL*/;\r\n\t/**深度测试函数枚举_总是通过。*/\r\n\tstatic STENCILTEST_ALWAYS: number = CompareFunction.Always/*WebGLContext.ALWAYS*/;\r\n\t/**保持当前值*/\r\n\tstatic STENCILOP_KEEP: number = StencilOperation.Keep;\r\n\t/**将模板缓冲区值设置为0*/\r\n\tstatic STENCILOP_ZERO: number = StencilOperation.Zero;\r\n\t/**将模具缓冲区值设置为指定的参考值*/\r\n\tstatic STENCILOP_REPLACE: number = StencilOperation.Replace;\r\n\t/**增加当前模具缓冲区值+1 */\r\n\tstatic STENCILOP_INCR: number = StencilOperation.IncrementSaturate;\r\n\t/**增加当前模具缓冲区值,超过最大值的时候循环*/\r\n\tstatic STENCILOP_INCR_WRAP: number = StencilOperation.IncrementWrap;\r\n\t/**递减当前模板缓冲区的值*/\r\n\tstatic STENCILOP_DECR: number = StencilOperation.DecrementSaturate;\r\n\t/**递减当前模板缓冲去的值，小于0时会循环*/\r\n\tstatic STENCILOP_DECR_WRAP: number = StencilOperation.DecrementWrap;\r\n\t/**按位反转当前的模板缓冲区的值*/\r\n\tstatic STENCILOP_INVERT: number = StencilOperation.Invert;\r\n\r\n\t/** @internal */\r\n\tstatic readonly Default: Readonly<RenderState> = new RenderState();\r\n\r\n\t/**渲染剔除状态。*/\r\n\tprivate _cull: number;\r\n\tpublic get cull(): number {\r\n\t\treturn this._cull;\r\n\t}\r\n\tpublic set cull(value: number) {\r\n\t\tthis._cull = value;\r\n\t}\r\n\t/**透明混合。*/\r\n\tprivate _blend: number;\r\n\tpublic get blend(): number {\r\n\t\treturn this._blend;\r\n\t}\r\n\tpublic set blend(value: number) {\r\n\t\tthis._blend = value;\r\n\t}\r\n\t/**源混合参数,在blend为BLEND_ENABLE_ALL时生效。*/\r\n\tprivate _srcBlend: number;\r\n\tpublic get srcBlend(): number {\r\n\t\treturn this._srcBlend;\r\n\t}\r\n\tpublic set srcBlend(value: number) {\r\n\t\tthis._srcBlend = value;\r\n\t}\r\n\t/**目标混合参数,在blend为BLEND_ENABLE_ALL时生效。*/\r\n\tprivate _dstBlend: number;\r\n\tpublic get dstBlend(): number {\r\n\t\treturn this._dstBlend;\r\n\t}\r\n\tpublic set dstBlend(value: number) {\r\n\t\tthis._dstBlend = value;\r\n\t}\r\n\t/**RGB源混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tprivate _srcBlendRGB: number;\r\n\tpublic get srcBlendRGB(): number {\r\n\t\treturn this._srcBlendRGB;\r\n\t}\r\n\tpublic set srcBlendRGB(value: number) {\r\n\t\tthis._srcBlendRGB = value;\r\n\t}\r\n\t/**RGB目标混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tprivate _dstBlendRGB: number;\r\n\tpublic get dstBlendRGB(): number {\r\n\t\treturn this._dstBlendRGB;\r\n\t}\r\n\tpublic set dstBlendRGB(value: number) {\r\n\t\tthis._dstBlendRGB = value;\r\n\t}\r\n\t/**Alpha源混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tprivate _srcBlendAlpha: number;\r\n\tpublic get srcBlendAlpha(): number {\r\n\t\treturn this._srcBlendAlpha;\r\n\t}\r\n\tpublic set srcBlendAlpha(value: number) {\r\n\t\tthis._srcBlendAlpha = value;\r\n\t}\r\n\t/**Alpha目标混合参数,在blend为BLEND_ENABLE_SEPERATE时生效。*/\r\n\tprivate _dstBlendAlpha: number;\r\n\tpublic get dstBlendAlpha(): number {\r\n\t\treturn this._dstBlendAlpha;\r\n\t}\r\n\tpublic set dstBlendAlpha(value: number) {\r\n\t\tthis._dstBlendAlpha = value;\r\n\t}\r\n\t/**混合方程。*/\r\n\tprivate _blendEquation: number;\r\n\tpublic get blendEquation(): number {\r\n\t\treturn this._blendEquation;\r\n\t}\r\n\tpublic set blendEquation(value: number) {\r\n\t\tthis._blendEquation = value;\r\n\t}\r\n\t/**RGB混合方程。*/\r\n\tprivate _blendEquationRGB: number;\r\n\tpublic get blendEquationRGB(): number {\r\n\t\treturn this._blendEquationRGB;\r\n\t}\r\n\tpublic set blendEquationRGB(value: number) {\r\n\t\tthis._blendEquationRGB = value;\r\n\t}\r\n\t/**Alpha混合方程。*/\r\n\tprivate _blendEquationAlpha: number;\r\n\tpublic get blendEquationAlpha(): number {\r\n\t\treturn this._blendEquationAlpha;\r\n\t}\r\n\tpublic set blendEquationAlpha(value: number) {\r\n\t\tthis._blendEquationAlpha = value;\r\n\t}\r\n\t/**深度测试函数。*/\r\n\tprivate _depthTest: number;\r\n\tpublic get depthTest(): number {\r\n\t\treturn this._depthTest;\r\n\t}\r\n\tpublic set depthTest(value: number) {\r\n\t\tthis._depthTest = value;\r\n\t}\r\n\t/**是否深度测试。*/\r\n\tprivate _depthWrite: boolean;\r\n\tpublic get depthWrite(): boolean {\r\n\t\treturn this._depthWrite;\r\n\t}\r\n\tpublic set depthWrite(value: boolean) {\r\n\t\tthis._depthWrite = value;\r\n\t}\r\n\t/**是否模板写入 */\r\n\tprivate _stencilWrite: boolean;\r\n\tpublic get stencilWrite(): boolean {\r\n\t\treturn this._stencilWrite;\r\n\t}\r\n\tpublic set stencilWrite(value: boolean) {\r\n\t\tthis._stencilWrite = value;\r\n\t}\r\n\t/**是否开启模板测试 */\r\n\tprivate _stencilTest: number;\r\n\tpublic get stencilTest(): number {\r\n\t\treturn this._stencilTest;\r\n\t}\r\n\tpublic set stencilTest(value: number) {\r\n\t\tthis._stencilTest = value;\r\n\t}\r\n\t/**模板值 一般会在0-255*/\r\n\tprivate _stencilRef: number;\r\n\tpublic get stencilRef(): number {\r\n\t\treturn this._stencilRef;\r\n\t}\r\n\tpublic set stencilRef(value: number) {\r\n\t\tthis._stencilRef = value;\r\n\t}\r\n\t/**模板设置值 */\r\n\tprivate _stencilOp: Vector3 = new Vector3();\r\n\tpublic get stencilOp(): Vector3 {\r\n\t\treturn this._stencilOp;\r\n\t}\r\n\tpublic set stencilOp(value: Vector3) {\r\n\t\tthis._stencilOp = value;\r\n\t}\r\n\r\n\tprotected createObj(){\r\n\t\t//native TODO 历史包袱\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>RenderState</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.createObj();\r\n\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\tthis.srcBlend = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlend = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.srcBlendRGB = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlendRGB = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.srcBlendAlpha = RenderState.BLENDPARAM_ONE;\r\n\t\tthis.dstBlendAlpha = RenderState.BLENDPARAM_ZERO;\r\n\t\tthis.blendEquation = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.blendEquationRGB = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.blendEquationAlpha = RenderState.BLENDEQUATION_ADD;\r\n\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\tthis.depthWrite = true;\r\n\t\tthis.stencilRef = 1;\r\n\t\tthis.stencilTest = RenderState.STENCILTEST_OFF;\r\n\t\tthis.stencilWrite = false;\r\n\t\tthis.stencilOp = new Vector3(RenderState.STENCILOP_KEEP, RenderState.STENCILOP_KEEP, RenderState.STENCILOP_REPLACE);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tsetNull() {\r\n\r\n\t\tthis.cull = null;\r\n\t\tthis.blend = null;\r\n\t\tthis.srcBlend = null;\r\n\t\tthis.dstBlend = null;\r\n\t\tthis.srcBlendRGB = null;\r\n\t\tthis.dstBlendRGB = null;\r\n\t\tthis.srcBlendAlpha = null;\r\n\t\tthis.dstBlendAlpha = null;\r\n\t\tthis.blendEquation = null;\r\n\t\tthis.blendEquationRGB = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\t\tthis.depthTest = null;\r\n\t\tthis.depthWrite = null;\r\n\t\tthis.stencilRef = null;\r\n\t\tthis.stencilTest = null;\r\n\t\tthis.stencilWrite = null;\r\n\t\tthis.stencilOp.set(null, null, null);\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @param dest \r\n\t */\r\n\tcloneTo(dest: RenderState) {\r\n\t\tdest.cull = this.cull;\r\n\t\tdest.blend = this.blend;\r\n\t\tdest.srcBlend = this.srcBlend;\r\n\t\tdest.dstBlend = this.dstBlend;\r\n\t\tdest.srcBlendRGB = this.srcBlendRGB;\r\n\t\tdest.dstBlendRGB = this.dstBlendRGB;\r\n\t\tdest.srcBlendAlpha = this.srcBlendAlpha;\r\n\t\tdest.dstBlendAlpha = this.dstBlendAlpha;\r\n\t\tdest.blendEquation = this.blendEquation;\r\n\t\tdest.blendEquationRGB = this.blendEquationRGB;\r\n\t\tdest.blendEquationAlpha = this.blendEquationAlpha;\r\n\t\tdest.depthTest = this.depthTest;\r\n\t\tdest.depthWrite = this.depthWrite;\r\n\t\tdest.stencilRef = this.stencilRef;\r\n\t\tdest.stencilTest = this.stencilTest;\r\n\t\tdest.stencilWrite = this.stencilWrite;\r\n\t\tthis.stencilOp.cloneTo(dest.stencilOp);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return\t 克隆副本。\r\n\t */\r\n\tclone(): RenderState {\r\n\t\tvar dest: RenderState = new RenderState();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\n\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n\r\n/**\r\n * @en The BlinnPhongMaterial class is used to implement Blinn-Phong materials.\r\n * @zh BlinnPhongMaterial 类用于实现Blinn-Phong材质。\r\n */\r\nexport class BlinnPhongMaterial extends Material {\r\n\t/**\r\n\t * @en Specular intensity data source: Alpha channel of the diffuse map.\r\n\t * @zh 高光强度数据源：漫反射贴图的 Alpha 通道。\r\n\t */\r\n\tstatic SPECULARSOURCE_DIFFUSEMAPALPHA: number;\r\n\t/**\r\n\t * @en Specular intensity data source: RGB channels of the specular map.\r\n\t * @zh 高光强度数据源：高光贴图的 RGB 通道。\r\n\t */\r\n\tstatic SPECULARSOURCE_SPECULARMAP: number;\r\n\r\n\t/**\r\n\t * @en Render mode: Opaque.\r\n\t * @zh 渲染状态：不透明。\r\n\t */\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**\r\n\t * @en Render mode: Alpha test.\r\n\t * @zh 渲染状态：Alpha 测试。\r\n\t */\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**\r\n\t * @en Render mode: Transparent blend.\r\n\t * @zh 渲染状态：透明混合。\r\n\t */\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_NORMALMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SPECULARMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ENABLETRANSMISSION: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_THICKNESSMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic ALBEDOTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic NORMALTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic SPECULARTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic ALBEDOCOLOR: number;\r\n\t/**@internal */\r\n\tstatic MATERIALSPECULAR: number;\r\n\t/**@internal */\r\n\tstatic SHININESS: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\t/**@internal */\r\n\tstatic TRANSMISSIONRATE: number;\r\n\t/**@internal */\r\n\tstatic IBACKDIFFUSE: number;\r\n\t/**@internal */\r\n\tstatic IBACKSCALE: number;\r\n\t/**@internal */\r\n\tstatic THINKNESSTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TRANSMISSIONCOLOR: number;\r\n\t/**@internal */\r\n\tstatic AlbedoIntensity: number;\r\n\r\n\t/**\r\n\t * @en The default material, prohibit modification.\r\n\t * @zh 默认材质，禁止修改。\r\n\t */\r\n\tstatic defaultMaterial: BlinnPhongMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_NORMALMAP = Shader3D.getDefineByName(\"NORMALMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_SPECULARMAP = Shader3D.getDefineByName(\"SPECULARMAP\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION = Shader3D.getDefineByName(\"ENABLETRANSMISSION\");\r\n\t\tBlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP = Shader3D.getDefineByName(\"THICKNESSMAP\");\r\n\r\n\t\tBlinnPhongMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DiffuseTexture\");\r\n\t\tBlinnPhongMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n\t\tBlinnPhongMaterial.SPECULARTEXTURE = Shader3D.propertyNameToID(\"u_SpecularTexture\");\r\n\t\tBlinnPhongMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_DiffuseColor\");\r\n\t\tBlinnPhongMaterial.MATERIALSPECULAR = Shader3D.propertyNameToID(\"u_MaterialSpecular\");\r\n\t\tBlinnPhongMaterial.SHININESS = Shader3D.propertyNameToID(\"u_Shininess\");\r\n\t\tBlinnPhongMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t\tBlinnPhongMaterial.TRANSMISSIONRATE = Shader3D.propertyNameToID(\"u_TransmissionRate\");\r\n\t\tBlinnPhongMaterial.IBACKDIFFUSE = Shader3D.propertyNameToID(\"u_BackDiffuse\");\r\n\t\tBlinnPhongMaterial.IBACKSCALE = Shader3D.propertyNameToID(\"u_BackScale\");\r\n\t\tBlinnPhongMaterial.THINKNESSTEXTURE = Shader3D.propertyNameToID(\"u_ThinknessTexture\");\r\n\t\tBlinnPhongMaterial.TRANSMISSIONCOLOR = Shader3D.propertyNameToID(\"u_TransmissionColor\");\r\n\t\tBlinnPhongMaterial.AlbedoIntensity = Shader3D.propertyNameToID(\"u_AlbedoIntensity\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en The render mode.\r\n\t * @zh 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase BlinnPhongMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Material:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether to support vertex color.\r\n\t * @zh 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Texture tiling and offsetting.\r\n\t * @zh 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Albedo color.\r\n\t * @zh 漫反射颜色。\r\n\t */\r\n\tget albedoColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset albedoColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR, value);//修改值后必须调用此接口,否则NATIVE不生效\r\n\t}\r\n\r\n\t/**\r\n\t * @en Albedo intensity\r\n\t * @zh 漫反射强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.AlbedoIntensity);\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.AlbedoIntensity, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Specular color.\r\n\t * @zh 高光颜色。\r\n\t */\r\n\tget specularColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR);\r\n\t}\r\n\r\n\tset specularColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Specular intensity, ranging from 0 to 1.\r\n\t * @zh 高光强度,范围为0到1。\r\n\t */\r\n\tget shininess(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.SHININESS);\r\n\t}\r\n\r\n\tset shininess(value: number) {\r\n\t\tvalue = Math.max(0.0, Math.min(1.0, value));\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.SHININESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Albedo texture.\r\n\t * @zh 漫反射贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Normal texture.\r\n\t * @zh 法线贴图。\r\n\t */\r\n\tget normalTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE);\r\n\t}\r\n\r\n\tset normalTexture(value: BaseTexture) {\r\n\t\tif (value) {\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP);\r\n\t\t}\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Specular texture.\r\n\t * @zh 高光贴图。\r\n\t */\r\n\tget specularTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE);\r\n\t}\r\n\r\n\tset specularTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP);\r\n\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Does it support transparency.\r\n\t * @zh 是否支持透光。\r\n\t */\r\n\tget enableTransmission(): boolean {\r\n\t\treturn this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t}\r\n\r\n\tset enableTransmission(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transmittance, which affects diffuse reflection and transmittance intensity\r\n\t * @zh 透光率，会影响漫反射以及透光强度\r\n\t */\r\n\tget transmissionRata(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\r\n\t}\r\n\r\n\tset transmissionRata(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transmission influence range index\r\n\t * @zh 透射影响范围指数\r\n\t */\r\n\tget backDiffuse(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE);\r\n\t}\r\n\tset backDiffuse(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE, Math.max(value, 1.0));\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transmitted light intensity\r\n\t * @zh 透射光强度\r\n\t */\r\n\tget backScale(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.IBACKSCALE);\r\n\t}\r\n\tset backScale(value: number) {\r\n\t\tthis.setFloatByIndex(BlinnPhongMaterial.IBACKSCALE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Thickness texture, which affects the perspective light. The thicker the material, the weaker the transmitted light.\r\n\t * @zh 厚度贴图，会影响透射光。材质越厚，透射光越弱。\r\n\t */\r\n\tget thinknessTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE);\r\n\t}\r\n\tset thinknessTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\r\n\t\telse\r\n\t\t\tthis.removeDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP);\r\n\r\n\t\tthis.setTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Transmission color. Simulates the internal color absorption rate of translucent materials.\r\n\t * @zh 透光颜色。模拟透光物质内部颜色吸收率。\r\n\t */\r\n\tget transmissionColor(): Color {\r\n\t\treturn this.getColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR);\r\n\t}\r\n\tset transmissionColor(value: Color) {\r\n\t\tthis.setColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 请使用transmissionRata\r\n\t * @deprecated\r\n\t */\r\n\tget transmissionRate(): number {\r\n\t\treturn this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of BlinnPhongMaterial.\r\n\t * @zh 创建一个 BlinnPhongMaterial 的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"BLINNPHONG\");\r\n\t\tthis.renderMode = BlinnPhongMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone Copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆的副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BlinnPhongMaterial = new BlinnPhongMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @inheritDoc\r\n\t * @en Clone the properties of this material to another material.\r\n\t * @param destObject The target material to clone to.\r\n\t * @zh 将此材质的属性克隆到另一个材质。\r\n\t * @param destObject 要克隆到的目标材质。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destMaterial: BlinnPhongMaterial = (<BlinnPhongMaterial>destObject);\r\n\t\tdestMaterial.albedoIntensity = this.albedoIntensity;\r\n\t\tdestMaterial.enableVertexColor = this.enableVertexColor;\r\n\t\tthis.albedoColor.cloneTo(destMaterial.albedoColor);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n","import { Event } from \"../../../events/Event\";\r\nimport { SubMesh } from \"../../resource/models/SubMesh\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { FastSinglelist, SingletonList } from \"../../../utils/SingletonList\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { RenderElement } from \"./RenderElement\";\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SubMeshRenderElement extends RenderElement {\r\n\r\n\t/** @internal */\r\n\tprivate _dynamicWorldPositionNormalNeedUpdate: boolean;\r\n\r\n\t/** @internal */\r\n\tstaticBatchIndexStart: number;\r\n\t/** @internal */\r\n\tstaticBatchIndexEnd: number;\r\n\t/** @internal */\r\n\tstaticBatchElementList: FastSinglelist<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tinstanceSubMesh: SubMesh;\r\n\t/** @internal */\r\n\tinstanceBatchElementList: FastSinglelist<SubMeshRenderElement>;\r\n\r\n\t/** @internal */\r\n\tvertexBatchElementList: FastSinglelist<SubMeshRenderElement>;\r\n\t/** @internal */\r\n\tvertexBatchVertexDeclaration: VertexDeclaration;\r\n\r\n\r\n\t/**\r\n\t * 创建一个 <code>SubMeshRenderElement</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t\tthis._renderElementOBJ.canDynamicBatch = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onWorldMatrixChanged(): void {\r\n\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetTransform(transform: Transform3D): void {\r\n\t\tif (this.transform !== transform) {\r\n\t\t\t(this.transform) && (this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\t(transform) && (transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged));\r\n\t\t\tthis._dynamicWorldPositionNormalNeedUpdate = true;\r\n\t\t\tthis.transform = transform;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tsetGeometry(geometry: GeometryElement): void {\r\n\t\tif (this._geometry !== geometry) {\r\n\t\t\tthis._geometry = geometry;\r\n\t\t\tthis._renderElementOBJ.geometry = geometry._geometryElementOBj;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (!this._renderElementOBJ) return;\r\n\t\t(this.transform) && this.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged);\r\n\t\tsuper.destroy();\r\n\t\t//this.staticBatch = null;\r\n\t\tthis.instanceSubMesh = null;\r\n\t\tthis.staticBatchElementList && this.staticBatchElementList.destroy();\r\n\t\tthis.instanceBatchElementList && this.instanceBatchElementList.destroy();\r\n\t\tthis.vertexBatchElementList && this.vertexBatchElementList.destroy();\r\n\t\tthis.vertexBatchVertexDeclaration = null;\r\n\t}\r\n}\r\n\r\n\r\n","import { Config3D } from \"../../../Config3D\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { BaseRenderType, IMeshRenderNode } from \"../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\"\r\nimport { ShaderData } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\"\r\nimport { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\"\r\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\"\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\"\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { MeshUtil } from \"../resource/models/MeshUtil\"\r\nimport { MorphTargetChannel } from \"../resource/models/MorphTarget\"\r\nimport { MeshFilter } from \"./MeshFilter\"\r\nimport { MeshSprite3DShaderDeclaration } from \"./MeshSprite3DShaderDeclaration\"\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\"\r\nimport { Sprite3D } from \"./Sprite3D\"\r\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\"\r\nimport { BaseRender } from \"./render/BaseRender\"\r\nimport { RenderContext3D } from \"./render/RenderContext3D\"\r\nimport { RenderElement } from \"./render/RenderElement\"\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\"\r\nimport { Stat } from \"../../utils/Stat\"\r\n\r\n\r\n/**\r\n * @en The `MeshRenderer` class is used for mesh rendering.\r\n * @zh `MeshRenderer` 类用于网格渲染器。\r\n */\r\nexport class MeshRenderer extends BaseRender {\r\n    /** @internal */\r\n    protected _revertStaticBatchDefineUV1: boolean = false;\r\n    /** @internal */\r\n    protected _projectionViewWorldMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _mesh: Mesh;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0 = Shader3D.getDefineByName(\"UV\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR = Shader3D.getDefineByName(\"COLOR\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1 = Shader3D.getDefineByName(\"UV1\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT = Shader3D.getDefineByName(\"TANGENT\");\r\n        MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE = Shader3D.getDefineByName(\"GPU_INSTANCE\");\r\n    }\r\n\r\n    private morphTargetActiveCount: number = 0;\r\n    private morphTargetActiveData: Float32Array; // vec4 ,x : index, y: weight\r\n\r\n    /**@internal */\r\n    morphTargetWeight: Float32Array;\r\n    private morphtargetChannels: MorphTargetChannel[];\r\n\r\n    private _morphWeightChange: boolean = true;\r\n\r\n    private _moduleData: IMeshRenderNode;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of MeshRenderer.\r\n     * @zh 创建一个 MeshRenderer 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._projectionViewWorldMatrix = new Matrix4x4();\r\n        this._baseRenderNode.renderNodeType = BaseRenderType.MeshRender;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * override it\r\n     * @returns \r\n     */\r\n    protected _createBaseRenderNode(): IMeshRenderNode {\r\n\r\n        return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _createRenderElement(): RenderElement {\r\n        return new SubMeshRenderElement();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Get the mesh object.\r\n     * @returns The mesh object.\r\n     * @zh 获取网格对象。\r\n     * @returns 网格对象。\r\n     */\r\n    getMesh() {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        const filter = this.owner.getComponent(MeshFilter) as MeshFilter;\r\n        if (filter) filter._enabled && this._onMeshChange(filter.sharedMesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param mesh \r\n     * @param out \r\n     */\r\n    protected _getMeshDefine(mesh: Mesh, out: Array<ShaderDefine>): number {\r\n        let define;\r\n        out.length = 0;\r\n        MeshUtil.getMeshDefine(mesh, out);\r\n        return define;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @param mesh \r\n     */\r\n    protected _changeVertexDefine(mesh: Mesh) {\r\n        var defineDatas: ShaderData = this._baseRenderNode.shaderData;\r\n        var lastValue: Mesh = this._mesh;\r\n        if (lastValue) {\r\n            this._getMeshDefine(lastValue, MeshFilter._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        if (mesh) {\r\n            this._getMeshDefine(mesh, MeshFilter._meshVerticeDefine);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n\r\n    }\r\n\r\n    private _morphTargetValues: Record<string, number> = {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get morphTargetValues(): Record<string, number> {\r\n        return this._morphTargetValues;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public set morphTargetValues(value: Record<string, number>) {\r\n        this._morphTargetValues = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param key \r\n     */\r\n    _changeMorphTargetValue(key: string) {\r\n        this._morphWeightChange = true;\r\n    }\r\n\r\n    /**\r\n     * @en Set the weight of a morph target channel.\r\n     * @param channelName The name of the morph target channel.\r\n     * @param weight The weight value to set for the channel.\r\n     * @zh 设置变形目标通道的权重。\r\n     * @param channelName 变形目标通道的名称。\r\n     * @param weight 要设置的通道权重值。\r\n     */\r\n    setMorphChannelWeight(channelName: string, weight: number) {\r\n        // todo\r\n        let mesh = this._mesh;\r\n        if (mesh && mesh.morphTargetData) {\r\n            let morphData = mesh.morphTargetData;\r\n            let channel = morphData.getMorphChannel(channelName);\r\n            this.morphTargetValues[channel.name] = weight;\r\n            this._morphWeightChange = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @en Update morph target data.\r\n     * @zh 更新变形目标数据。\r\n     */\r\n    protected _applyMorphdata() {\r\n        let mesh = this._mesh;\r\n        let shaderData = this._baseRenderNode.shaderData;\r\n        if (this._morphWeightChange && mesh) {\r\n\r\n            let morphData = mesh.morphTargetData;\r\n            let channelCount = morphData.channelCount;\r\n\r\n            for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\r\n                let channel = morphData.getMorphChannelbyIndex(channelIndex);\r\n                // channel.targetCount;\r\n                let weight = this.morphTargetValues[channel.name];\r\n\r\n                // update target weight\r\n                let lastFullWeight = 0;\r\n                channel.targets.forEach(target => {\r\n                    if (weight <= target.fullWeight) {\r\n                        this.morphTargetWeight[target._index] = (weight - lastFullWeight) / (target.fullWeight - lastFullWeight);\r\n                    }\r\n                    else {\r\n                        this.morphTargetWeight[target._index] = 1;\r\n                    }\r\n                    lastFullWeight = target.fullWeight;\r\n                });\r\n            }\r\n\r\n            let activeIndex = 0;\r\n            // todo top k\r\n            this.morphTargetWeight.forEach((weight, index) => {\r\n                if (weight > 0) {\r\n                    let offset = activeIndex * 4;\r\n                    this.morphTargetActiveData[offset] = index;\r\n                    this.morphTargetActiveData[offset + 1] = weight;\r\n                    activeIndex++;\r\n                }\r\n            });\r\n\r\n            this.morphTargetActiveCount = Math.min(activeIndex, Config3D.maxMorphTargetCount);\r\n\r\n            if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n                shaderData.setInt(RenderableSprite3D.MorphActiveCount, this.morphTargetActiveCount);\r\n\r\n                shaderData.setBuffer(RenderableSprite3D.MorphActiceTargets, this.morphTargetActiveData);\r\n            }\r\n            else {\r\n                // todo\r\n            }\r\n            this._morphWeightChange = false;\r\n            // todo \r\n            // active count == 0 disable morph ?\r\n        }\r\n\r\n    }\r\n\r\n    _setBelongScene(scene: any): void {\r\n        super._setBelongScene(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUnBelongScene() {\r\n        super._setUnBelongScene();\r\n    }\r\n\r\n    protected _statAdd() {\r\n        Stat.renderNode++;\r\n        Stat.meshRenderNode++;\r\n    }\r\n\r\n    protected _statRemove() {\r\n        Stat.renderNode--;\r\n        Stat.meshRenderNode--;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @en Update morph target data (shader define) when updating mesh.\r\n     * @param mesh The mesh to update.\r\n     * @zh 更新网格时更新变形目标数据（着色器定义）。\r\n     * @param mesh 要更新的网格。\r\n     */\r\n    protected _changeMorphData(mesh: Mesh) {\r\n        let shaderData = this._baseRenderNode.shaderData;\r\n        let oldMesh = this._mesh;\r\n\r\n        // todo\r\n        // config max count\r\n        const maxMorphTargetCount = Config3D.maxMorphTargetCount;\r\n        let maxCount = maxMorphTargetCount;\r\n\r\n        this.morphTargetActiveData = new Float32Array(maxCount * 4);\r\n\r\n        if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n            if (oldMesh && oldMesh.morphTargetData) {\r\n                let morphData = oldMesh.morphTargetData;\r\n                shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET);\r\n\r\n                let morphVertexDec = morphData.vertexDec;\r\n\r\n                morphVertexDec._vertexElements.forEach(element => {\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);\r\n                            break;\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (mesh && mesh.morphTargetData) {\r\n\r\n                let morphData = mesh.morphTargetData;\r\n\r\n                shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET);\r\n                let morphVertexDec = morphData.vertexDec;\r\n                morphVertexDec._vertexElements.forEach(element => {\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);\r\n                            break;\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n\r\n                shaderData.setVector(RenderableSprite3D.MorphAttriOffset, mesh.morphTargetData.attributeOffset);\r\n\r\n                shaderData.setTexture(RenderableSprite3D.MorphTex, mesh.morphTargetData.targetTexture);\r\n\r\n                shaderData.setVector(RenderableSprite3D.MorphParams, morphData.params);\r\n\r\n                shaderData.setBuffer(RenderableSprite3D.MorphActiceTargets, this.morphTargetActiveData);\r\n            }\r\n        }\r\n\r\n        if (oldMesh && oldMesh.morphTargetData) {\r\n            this.morphTargetWeight = null;\r\n\r\n            this.morphtargetChannels = null;\r\n            this._morphTargetValues = {};\r\n        }\r\n\r\n        if (mesh && mesh.morphTargetData) {\r\n\r\n            let morphData = mesh.morphTargetData;\r\n\r\n            let channelCount = morphData.channelCount;\r\n\r\n            this.morphTargetWeight = new Float32Array(morphData.targetCount);\r\n\r\n            this.morphtargetChannels = new Array<MorphTargetChannel>(channelCount);\r\n            for (let index = 0; index < channelCount; index++) {\r\n                let channel = morphData.getMorphChannelbyIndex(index);\r\n                this.morphtargetChannels[index] = channel;\r\n                this._morphTargetValues[channel.name] = 0;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    protected _meshChange = false;\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onMeshChange(mesh: Mesh): void {\r\n        if (mesh && this._mesh != mesh) {\r\n            this._changeVertexDefine(mesh);\r\n            this._changeMorphData(mesh);\r\n            this._mesh = mesh;\r\n            if (mesh.morphTargetData)\r\n                this.geometryBounds = mesh.morphTargetData.bounds\r\n            else\r\n                this.geometryBounds = mesh.bounds;\r\n            var count: number = mesh.subMeshCount;\r\n            this._renderElements.length = count;\r\n            let materials = this.sharedMaterials;\r\n            materials.length = count;\r\n            for (var i: number = 0; i < count; i++) {\r\n                var renderElement: RenderElement = this._renderElements[i];\r\n                if (!renderElement) {\r\n                    renderElement = this._renderElements[i] = this._renderElements[i] ? this._renderElements[i] : this._createRenderElement();\r\n                    this.owner && renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                    renderElement.render = this;\r\n                }\r\n                materials[i] = materials[i] || BlinnPhongMaterial.defaultMaterial;\r\n                renderElement.setGeometry(mesh.getSubMesh(i));\r\n            }\r\n            this.sharedMaterials = materials;\r\n            this.boundsChange = true;\r\n        } else if (!mesh) {\r\n            this._renderElements.forEach\r\n            this._renderElements.forEach(element => {\r\n                element._renderElementOBJ.destroy();\r\n                element.destroy();\r\n            });\r\n            this._renderElements.length = 0;\r\n            this._mesh = null;\r\n            this._changeVertexDefine(null);\r\n            this._changeMorphData(null);\r\n            this.boundsChange = false;\r\n        }\r\n\r\n        this._setRenderElements();\r\n        this._meshChange = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * BaseRender motion\r\n     */\r\n    protected _onWorldMatNeedChange(flag: number): void {\r\n        super._onWorldMatNeedChange(flag);\r\n        if (!this._mesh) {\r\n            this.boundsChange = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the rendering state of the mesh renderer.\r\n     * @param context The 3D render context.\r\n     * @zh 更新网格渲染器的渲染状态。\r\n     * @param context 3D渲染上下文。\r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        if (!this._mesh) {\r\n            return;\r\n        }\r\n\r\n        this._mesh.morphTargetData && this._applyMorphdata();\r\n        if (!this._meshChange) {\r\n            return;\r\n        }\r\n        if (this._renderElements.length == 1) {\r\n            this._renderElements[0]._renderElementOBJ.isRender = this._renderElements[0]._geometry._prepareRender(context);\r\n            this._renderElements[0]._geometry._updateRenderParams(context);\r\n            let material = this.sharedMaterial;\r\n            this._renderElements[0].material = material;\r\n        }\r\n        else {\r\n            for (var i = 0, n = this._renderElements.length; i < n; i++) {\r\n                this._renderElements[i]._renderElementOBJ.isRender = this._renderElements[i]._geometry._prepareRender(context);\r\n                this._renderElements[i]._geometry._updateRenderParams(context);\r\n                let material = this.sharedMaterials[i];\r\n                this._renderElements[i].material = material;\r\n            }\r\n        }\r\n        this._meshChange = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n        this._morphTargetValues = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: MeshRenderer): void {\r\n        super._cloneTo(dest);\r\n        // todo clone morphtarget weight\r\n        // onMeshChange in onEnable\r\n        dest._onMeshChange(this._mesh);\r\n        if (this.morphTargetWeight) {\r\n            dest.morphTargetWeight = new Float32Array(this.morphTargetWeight);\r\n        }\r\n        for (const key in this._morphTargetValues) {\r\n            dest._morphTargetValues[key] = this._morphTargetValues[key];\r\n        }\r\n    }\r\n}","import { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { MeshRenderer } from \"../../../core/MeshRenderer\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { DrawElementCMDData, DrawNodeCMDData } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\n\r\n/**\r\n * @internal\r\n * <code>SetShaderDataTextureCMD</code> 类用于创建设置渲染目标指令。\r\n */\r\nexport class DrawMeshCMD extends Command {\r\n\r\n    /**@internal */\r\n    private static _pool: DrawMeshCMD[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static create(mesh: Mesh, matrix: Matrix4x4, material: Material, subMeshIndex: number, subShaderIndex: number, commandBuffer: CommandBuffer): DrawMeshCMD {\r\n        var cmd: DrawMeshCMD;\r\n        cmd = DrawMeshCMD._pool.length > 0 ? DrawMeshCMD._pool.pop() : new DrawMeshCMD();\r\n        cmd._matrix = matrix;\r\n        cmd._transform.worldMatrix = cmd._matrix;\r\n        cmd.material = material;\r\n        cmd.subMeshIndex = subMeshIndex;\r\n        cmd._subShaderIndex = subShaderIndex;\r\n        cmd.mesh = mesh;\r\n        cmd._commandBuffer = commandBuffer;\r\n        return cmd;\r\n    }\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n\r\n    /**@internal */\r\n    private _matrix: Matrix4x4;\r\n\r\n    /**@internal */\r\n    private _subMeshIndex: number;\r\n\r\n    get subMeshIndex(): number {\r\n        return this._subMeshIndex;\r\n    }\r\n\r\n    set subMeshIndex(value: number) {\r\n        this._subMeshIndex = value;\r\n        this._drawRenderCMDDData.subMeshIndex = value;\r\n    }\r\n\r\n    /**@internal */\r\n    private _subShaderIndex: number;\r\n\r\n    /**@internal */\r\n    private _mesh: Mesh;\r\n\r\n    /**@internal */\r\n    _renderElemnts: RenderElement[];\r\n\r\n    /**@internal */\r\n    _meshRender: MeshRenderer;\r\n\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n\r\n    /**@internal */\r\n    _drawRenderCMDDData: DrawNodeCMDData;\r\n\r\n    constructor() {\r\n        super();\r\n        this._drawRenderCMDDData = Laya3DRender.Render3DPassFactory.createDrawNodeCMDData();\r\n        this._transform = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\r\n        this._meshRender = new MeshRenderer();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n        this._material = value;\r\n        this._material && this._material._addReference(1);\r\n    }\r\n\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set mesh(value: Mesh) {\r\n        if (this._mesh == value)\r\n            return;\r\n        this._mesh = value;\r\n        this._meshRender._onMeshChange(this._mesh);\r\n        this._renderElemnts = this._meshRender._renderElements;\r\n        this._renderElemnts.forEach(element => {\r\n            element.material = this._material;\r\n            element.setTransform(this._transform);\r\n            element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n            element._subShaderIndex = this._subShaderIndex;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * @returns \r\n     */\r\n    getRenderCMD(): DrawElementCMDData | DrawNodeCMDData {\r\n        return this._drawRenderCMDDData;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n\r\n    run(): void {\r\n        this._meshRender.sharedMaterial = this.material;\r\n        this._meshRender._baseRenderNode.transform = this._transform;\r\n        this._meshRender.renderUpdate(RenderContext3D._instance);\r\n        // todo scene ibl\r\n        this._meshRender.probReflection = RenderContext3D._instance.scene.sceneReflectionProb;\r\n\r\n        this._drawRenderCMDDData.destSubShader = this.material.shader.getSubShaderAt(this._subShaderIndex);\r\n        this._drawRenderCMDDData.destShaderData = this.material.shaderData;\r\n        this._drawRenderCMDDData.node = this._meshRender._baseRenderNode;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    recover(): void {\r\n        DrawMeshCMD._pool.push(this);\r\n        super.recover();\r\n        this._material && (this.material = null);\r\n        this._mesh && (this.mesh = null);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        this._renderElemnts.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._renderElemnts = null;\r\n        this._transform = null;\r\n        this._material = null;\r\n        this._matrix = null;\r\n    }\r\n}","import { DrawNodeCMDData } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { BaseRender } from \"../BaseRender\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\n\r\n/**\r\n * @en Represents a draw render command.\r\n * @zh 表示一个绘制渲染命令。\r\n */\r\nexport class DrawRenderCMD extends Command {\r\n    /**@internal */\r\n    private static _pool: any[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static create(render: BaseRender, material: Material, subMeshIndex: number, commandBuffer: CommandBuffer): DrawRenderCMD {\r\n        var cmd: DrawRenderCMD;\r\n        cmd = DrawRenderCMD._pool.length > 0 ? DrawRenderCMD._pool.pop() : new DrawRenderCMD();\r\n        cmd.render = render;\r\n        cmd.material = material;\r\n        cmd.subMeshIndex = subMeshIndex;\r\n        cmd._commandBuffer = commandBuffer;\r\n        return cmd;\r\n    }\r\n\r\n    /**@internal */\r\n    private _render: BaseRender;\r\n\r\n    /**\r\n     * @en The render object.\r\n     * @zh 渲染对象。\r\n     */\r\n    get render(): BaseRender {\r\n        return this._render;\r\n    }\r\n\r\n    set render(render: BaseRender) {\r\n        this._drawNodeCMDData.node = render._baseRenderNode;\r\n        this._render = render;\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n\r\n    /**\r\n     * @en The material.\r\n     * @zh 材质。\r\n     */\r\n    get material(): Material {\r\n        return this._material;\r\n    }\r\n\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n\r\n        if (value) {\r\n            value._addReference(1);\r\n            this._drawNodeCMDData.destShaderData = value.shaderData;\r\n            this._drawNodeCMDData.destSubShader = value.shader.getSubShaderAt(0);\r\n        }\r\n        else {\r\n            this._drawNodeCMDData.destShaderData = null;\r\n            this._drawNodeCMDData.destSubShader = null;\r\n        }\r\n\r\n        this._material = value;\r\n    }\r\n\r\n\r\n    private _subMeshIndex: number;\r\n\r\n    /**\r\n     * @en The sub-mesh index.\r\n     * @zh 子网格索引。\r\n     */\r\n    public get subMeshIndex(): number {\r\n        return this._subMeshIndex;\r\n    }\r\n    public set subMeshIndex(value: number) {\r\n        this._subMeshIndex = value;\r\n        this._drawNodeCMDData.subMeshIndex = value;\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    private _prematerial: Material;\r\n\r\n    /**@internal */\r\n    _drawNodeCMDData: DrawNodeCMDData;\r\n\r\n    constructor() {\r\n        super();\r\n        this._drawNodeCMDData = Laya3DRender.Render3DPassFactory.createDrawNodeCMDData();\r\n    }\r\n\r\n    /**\r\n     * @en Gets the render command data.\r\n     * @zh 获取渲染命令数据。\r\n     */\r\n    getRenderCMD(): DrawNodeCMDData {\r\n        return this._drawNodeCMDData;\r\n    }\r\n\r\n    /**\r\n     * @en Runs the  command.\r\n     * @zh 运行命令。\r\n     */\r\n    run(): void {\r\n        if (this.render) {\r\n            this.render.renderUpdate(this._context);\r\n            this._prematerial = this.render.sharedMaterials[this.subMeshIndex];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Recovers the render command for reuse.\r\n     * @zh 回收渲染命令以供重用。\r\n     */\r\n    recover(): void {\r\n        DrawRenderCMD._pool.push(this);\r\n        super.recover();\r\n        this.material = null;\r\n        this.render.sharedMaterials[this.subMeshIndex] = this._prematerial;\r\n        this._render = null;\r\n        this.subMeshIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the render command.\r\n     * @zh 销毁渲染命令。\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        this.material = null;\r\n    }\r\n\r\n}","import { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { ShaderDataType } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { SetRenderDataCMD } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { SetShaderDataCMD } from \"./SetShaderDataCMD\";\r\n\r\n/**\r\n * @internal\r\n * @en SetGlobalShaderDataCMD class is used to create a command for setting global shader data.\r\n * @zh SetGlobalShaderDataCMD 类用于创建设置全局着色器数据的指令。\r\n */\r\nexport class SetGlobalShaderDataCMD extends Command {\r\n\t/**\r\n\t * @internal\r\n\t * @en Creates a SetGlobalShaderDataCMD instance.\r\n\t * @param nameID The ID of the shader property name.\r\n\t * @param value The value to set for the shader property.\r\n\t * @param shaderDataType The type of shader data.\r\n\t * @param commandBuffer The command buffer to which this command will be added.\r\n\t * @returns A new SetGlobalShaderDataCMD instance.\r\n\t * @zh 创建一个 SetGlobalShaderDataCMD 实例。\r\n\t * @param nameID 着色器属性名称的ID。\r\n\t * @param value 要为着色器属性设置的值。\r\n\t * @param shaderDataType 着色器数据的类型。\r\n\t * @param commandBuffer 将添加此命令的命令缓冲区。\r\n\t * @returns 一个新的 SetGlobalShaderDataCMD 实例。\r\n\t */\r\n\tstatic create(nameID: number, value: any, shaderDataType: ShaderDataType, commandBuffer: CommandBuffer): SetGlobalShaderDataCMD {\r\n\r\n\t\tlet context = RenderContext3D._instance;\r\n\t\tlet shaderData = context._contextOBJ.globalShaderData;\r\n\r\n\t\tif (!shaderData)\r\n\t\t\tshaderData = context._contextOBJ.globalShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\t\tvar cmd = SetShaderDataCMD.create(shaderData, nameID, value, shaderDataType, commandBuffer);\r\n\t\treturn cmd;\r\n\t}\r\n}\r\n\r\n\r\n","import { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MeshInstanceGeometry extends GeometryElement {\r\n    private _subMesh: SubMesh;\r\n    constructor(subMesh: SubMesh) {\r\n        super(subMesh ? subMesh._geometryElementOBj.mode : MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n        this._subMesh = subMesh;\r\n        if (subMesh)\r\n            this.indexFormat = subMesh._mesh.indexFormat;\r\n    }\r\n\r\n    set subMesh(value: SubMesh) {\r\n        this._subMesh = value;\r\n        if (value)\r\n            this.indexFormat = value._mesh.indexFormat;\r\n        this.mode = value._geometryElementOBj.mode;\r\n    }\r\n\r\n    get subMesh(): SubMesh {\r\n        return this._subMesh\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * UpdateGeometry Data\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        this.clearRenderParams();\r\n        let byteCount: number;\r\n        switch (this.indexFormat) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tbyteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tbyteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tbyteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.setDrawElemenParams(this._subMesh.indexCount, this._subMesh._indexStart * byteCount);\r\n    }\r\n\r\n}","import { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { Command } from \"./Command\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../MeshSprite3DShaderDeclaration\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { BufferState } from \"../../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { DrawElementCMDData } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { IRenderElement3D } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\n\r\n/**\r\n * @en DrawMeshInstancedCMD class for instanced mesh drawing command.\r\n * @zh DrawMeshInstancedCMD 类，用于实例化网格绘制命令。\r\n */\r\nexport class DrawMeshInstancedCMD extends Command {\r\n    /**@internal */\r\n    private static _pool: DrawMeshInstancedCMD[] = [];\r\n    /**\r\n     * @en Maximum number of draw instances.\r\n     * @zh 设置最大DrawInstance数。\r\n     */\r\n    static maxInstanceCount = 1024;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Create a command stream.\r\n     * @param mesh The mesh to be drawn.\r\n     * @param subMeshIndex The index of the sub-mesh.\r\n     * @param matrixs Array of transformation matrices.\r\n     * @param material The material to be used.\r\n     * @param subShaderIndex The index of the sub-shader.\r\n     * @param instanceProperty Material instance property block.\r\n     * @param drawnums Number of instances to be drawn.\r\n     * @param commandBuffer The command buffer.\r\n     * @returns A new DrawMeshInstancedCMD instance.\r\n     * @zh 创建一个命令流。\r\n     * @param mesh 要绘制的网格。\r\n     * @param subMeshIndex 子网格索引。\r\n     * @param matrixs 变换矩阵数组。\r\n     * @param material 要使用的材质。\r\n     * @param subShaderIndex 子着色器索引。\r\n     * @param instanceProperty 材质实例属性块。\r\n     * @param drawnums 要绘制的实例数量。\r\n     * @param commandBuffer 命令缓冲区。\r\n     * @return 一个新的 DrawMeshInstancedCMD 实例。\r\n     */\r\n    static create(mesh: Mesh, subMeshIndex: number, matrixs: Matrix4x4[], material: Material, subShaderIndex: number, instanceProperty: MaterialInstancePropertyBlock, drawnums: number, commandBuffer: CommandBuffer): DrawMeshInstancedCMD {\r\n        var cmd: DrawMeshInstancedCMD;\r\n        if ((matrixs && matrixs.length > DrawMeshInstancedCMD.maxInstanceCount) || drawnums > DrawMeshInstancedCMD.maxInstanceCount) {\r\n            throw \"the number of renderings exceeds the maximum number of merges\";\r\n        }\r\n        cmd = DrawMeshInstancedCMD._pool.length > 0 ? DrawMeshInstancedCMD._pool.pop() : new DrawMeshInstancedCMD();\r\n        cmd._matrixs = matrixs;\r\n        cmd.material = material;\r\n        cmd._subMeshIndex = subMeshIndex;\r\n        cmd._subShaderIndex = subShaderIndex;\r\n        cmd._commandBuffer = commandBuffer;\r\n        cmd._instanceProperty = instanceProperty;\r\n        cmd._drawnums = drawnums;\r\n        cmd.mesh = mesh;\r\n        matrixs && cmd._updateWorldMatrixBuffer();\r\n        cmd._setInstanceBuffer();\r\n        return cmd;\r\n    }\r\n\r\n    /**@internal */\r\n    private _material: Material;\r\n    /**@internal */\r\n    private _matrixs: Matrix4x4[];\r\n    /**@internal */\r\n    private _subMeshIndex: number;\r\n    /**@internal */\r\n    private _subShaderIndex: number = 0;\r\n    /**@internal */\r\n    private _mesh: Mesh;\r\n    /**@internal */\r\n    private _instanceProperty: MaterialInstancePropertyBlock;\r\n    /** @internal */\r\n    private _instanceBufferState: BufferState;\r\n    /** @internal */\r\n    private _drawnums: number;\r\n    /**@internal 世界矩阵数据*/\r\n    private _instanceWorldMatrixData: Float32Array;\r\n    /**@internal 世界矩阵buffer*/\r\n    private _instanceWorldMatrixBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    private _instanceGeometryArray: MeshInstanceGeometry[];\r\n    /**@internal */\r\n    private _instanceRenderElementArray: RenderElement[];\r\n    /**@internal */\r\n    _byteCount: number;\r\n    /**@internal */\r\n    _transform: Transform3D;\r\n    /**@internal */\r\n    _render: BaseRender;\r\n    /**@internal */\r\n    _drawElementCMDData: DrawElementCMDData;\r\n\r\n    constructor() {\r\n        super();\r\n        this._transform = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\r\n        this._instanceRenderElementArray = [];\r\n        this._instanceGeometryArray = [];\r\n        this._instanceWorldMatrixData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount * 16);\r\n        this._instanceWorldMatrixBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(this._instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\r\n        this._instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n        this._instanceWorldMatrixBuffer.instanceBuffer = true;\r\n        this._render = new BaseRender();\r\n        this._render._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\r\n        this._instanceBufferState = new BufferState();\r\n        this._drawElementCMDData = Laya3DRender.Render3DPassFactory.createDrawElementCMDData();\r\n    }\r\n    /**\r\n     * @en The material for the command.\r\n     * @zh 命令的材质。\r\n     */\r\n    set material(value: Material) {\r\n        this._material && this._material._removeReference(1);\r\n        this._material = value;\r\n        this._material && this._material._addReference(1);\r\n    }\r\n\r\n    /**\r\n     * @en The buffer state.\r\n     * @zh 缓冲状态。\r\n     */\r\n    get bufferState() {\r\n        return this._instanceWorldMatrixBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en The mesh of the command.\r\n     * @zh 命令的网格。\r\n     */\r\n    get mesh(): Mesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh(value: Mesh) {\r\n        if (this._mesh == value)\r\n            return;\r\n        BaseRender.changeVertexDefine(this._mesh, value, this._render._baseRenderNode.shaderData);\r\n        this._mesh = value;\r\n        if (!this._mesh)\r\n            return;\r\n        let submeshs = this._mesh._subMeshes;\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let element = this._instanceRenderElementArray[i] = this._instanceRenderElementArray[i] ? this._instanceRenderElementArray[i] : new RenderElement();\r\n                let geometry = this._instanceGeometryArray[i] = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\r\n                element.setGeometry(geometry);\r\n                element.transform = this._transform;\r\n                element.material = this._material;\r\n                // element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n                element._subShaderIndex = this._subShaderIndex;\r\n                element.render = this._render;\r\n                element._renderElementOBJ.owner = this._render._baseRenderNode;\r\n\r\n                geometry.bufferState = this._instanceBufferState;\r\n                geometry.instanceCount = this._drawnums;\r\n            }\r\n        } else {\r\n            let element = this._instanceRenderElementArray[0] = this._instanceRenderElementArray[0] ? this._instanceRenderElementArray[0] : new RenderElement();\r\n            let geometry = this._instanceGeometryArray[0] = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[this._subMeshIndex]);\r\n            element.setGeometry(geometry);\r\n            element.transform = this._transform;\r\n            element.material = this._material;\r\n            element.render = this._render;\r\n            //element.renderSubShader = this._material._shader.getSubShaderAt(this._subShaderIndex);\r\n            geometry.bufferState = this._instanceBufferState;\r\n            geometry.instanceCount = this._drawnums;\r\n\r\n            element._renderElementOBJ.owner = this._render._baseRenderNode\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setInstanceBuffer(): void {\r\n        let instanceBufferState = this._instanceBufferState;\r\n        let vertexArray: Array<VertexBuffer3D> = [];\r\n        let meshVertexBuffer = this._mesh._bufferState._vertexBuffers as VertexBuffer3D[];\r\n        meshVertexBuffer.forEach(element => {\r\n            vertexArray.push(element);\r\n        });\r\n        vertexArray.push(this._instanceWorldMatrixBuffer);\r\n        let propertyMap = this._instanceProperty._propertyMap;\r\n        for (let i in propertyMap) {\r\n            vertexArray.push(propertyMap[i]._vertexBuffer);\r\n        }\r\n        instanceBufferState.applyState(vertexArray, this._mesh._indexBuffer);\r\n        this._instanceGeometryArray.forEach(element => {\r\n            element.bufferState = instanceBufferState;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新世界矩阵buffer\r\n     * @internal\r\n     */\r\n    private _updateWorldMatrixBuffer() {\r\n        let worldMatrixData: Float32Array = this._instanceWorldMatrixData;\r\n        let count: number = this._drawnums;\r\n        for (let i = 0; i < count; i++) {\r\n            worldMatrixData.set(this._matrixs[i].elements, i * 16);\r\n        }\r\n        let worldBuffer: VertexBuffer3D = this._instanceWorldMatrixBuffer;\r\n        //worldBuffer.setData();\r\n        worldBuffer.setData(worldMatrixData.buffer, 0, 0, count * 64);\r\n    }\r\n\r\n    /**\r\n     * @en Reset the world matrix array for DrawInstance.\r\n     * @param worldMatrixArray Array of world matrices.\r\n     * @zh 重置DrawInstance的世界矩阵数组。\r\n     * @param worldMatrixArray 世界矩阵数组\r\n     */\r\n    setWorldMatrix(worldMatrixArray: Matrix4x4[]): void {\r\n        if (worldMatrixArray.length < this._drawnums)\r\n            throw \"worldMatrixArray length is less then drawnums\";\r\n        this._matrixs = worldMatrixArray;\r\n        this._matrixs && this._updateWorldMatrixBuffer();\r\n    }\r\n\r\n    /**\r\n     * @en Reset the number of instances to draw.\r\n     * @param drawNums Number of instances to draw.\r\n     * @zh 重置渲染个数。\r\n     * @param drawNums 渲染个数。\r\n     */\r\n    setDrawNums(drawNums: number): void {\r\n        if (this._matrixs && this._matrixs.length < drawNums)\r\n            throw \"worldMatrixArray length is less then drawnums\";\r\n        this._drawnums = drawNums;\r\n        let submeshs = this._mesh._subMeshes;\r\n        if (this._subMeshIndex == -1) {\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let geometry = this._instanceGeometryArray[i] ? this._instanceGeometryArray[i] : new MeshInstanceGeometry(submeshs[i]);\r\n                geometry.instanceCount = this._drawnums;\r\n            }\r\n        } else {\r\n            let geometry = this._instanceGeometryArray[0] ? this._instanceGeometryArray[0] : new MeshInstanceGeometry(submeshs[0]);\r\n            geometry.instanceCount = this._drawnums;\r\n        }\r\n        this._matrixs && this._updateWorldMatrixBuffer();\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * @returns \r\n     */\r\n    getRenderCMD(): DrawElementCMDData {\r\n        return this._drawElementCMDData\r\n    }\r\n\r\n    /**\r\n     * @en Update the render element.\r\n     * @param renderElement The render element to update.\r\n     * @param context The render context.\r\n     * @returns The updated IRenderElement3D.\r\n     * @zh 更新渲染元素。\r\n     * @param renderElement 要更新的渲染元素。\r\n     * @param context 渲染上下文。\r\n     * @return 更新后的IRenderElement3D。\r\n     */\r\n    renderUpdateElement(renderElement: RenderElement, context: RenderContext3D): IRenderElement3D {\r\n        let renderObj = renderElement._renderElementOBJ;\r\n        renderObj.isRender = renderElement._geometry._prepareRender(context);\r\n        renderElement._geometry._updateRenderParams(context);\r\n        return renderObj;\r\n    }\r\n\r\n    /**\r\n     * @en Execute the command.\r\n     * @zh 执行命令。\r\n     */\r\n    run(): void {\r\n        //update blockData\r\n        let context = RenderContext3D._instance;\r\n        context._contextOBJ.cameraUpdateMask = Camera._updateMark;\r\n        let propertyMap = this._instanceProperty._propertyMap;\r\n        for (let i in propertyMap) {\r\n            //更新自定义Instancebuffer\r\n            propertyMap[i].updateVertexBufferData(this._drawnums);\r\n        }\r\n        let submeshs = this.mesh._subMeshes;\r\n        if (this._subMeshIndex == -1) {\r\n            let arrayElement: IRenderElement3D[] = [];\r\n            for (let i = 0, n = submeshs.length; i < n; i++) {\r\n                let renderElement = this._instanceRenderElementArray[i];\r\n                let renderObj = this.renderUpdateElement(renderElement, context);\r\n                arrayElement.push(renderObj);\r\n            }\r\n            this._drawElementCMDData.setRenderelements(arrayElement);\r\n        } else {\r\n            let renderElement = this._instanceRenderElementArray[this._subMeshIndex];\r\n            let renderObj = this.renderUpdateElement(renderElement, context);\r\n            this._drawElementCMDData.setRenderelements([renderObj]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Recycle the command.\r\n     * @zh 回收命令。\r\n     */\r\n    recover(): void {\r\n        DrawMeshInstancedCMD._pool.push(this);\r\n        super.recover();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._instanceBufferState.destroy();\r\n        this._instanceBufferState = null;\r\n        delete this._instanceRenderElementArray;\r\n        this._instanceRenderElementArray = [];\r\n        delete this._instanceGeometryArray;\r\n        this._instanceGeometryArray = [];\r\n        this.mesh = null;\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Destroy the command.\r\n     * @zh 销毁命令。\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._material && this._material._removeReference(1);\r\n        this._material = null;\r\n        this._instanceBufferState.destroy();\r\n        this._instanceBufferState = null;\r\n        delete this._instanceRenderElementArray;\r\n        this._instanceRenderElementArray = [];\r\n        delete this._instanceGeometryArray;\r\n        this._instanceGeometryArray = [];\r\n        this.mesh = null;\r\n    }\r\n\r\n}","import { Command } from \"./Command\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { CommandBuffer } from \"./CommandBuffer\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { SetRenderTargetCMD } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { RenderClearFlag } from \"../../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\n\r\n/**\r\n * @internal\r\n * @en SetRTCMD used to create a command to set the render target.\r\n * @zh SetRTCMD 类用于创建设置渲染目标指令。\r\n */\r\nexport class SetRTCMD extends Command {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Creates a SetRTCMD instance.\r\n\t * @param renderTexture The render texture to set.\r\n\t * @param clearColor Whether to clear the color buffer.\r\n\t * @param clearDepth Whether to clear the depth buffer.\r\n\t * @param clearStencil Whether to clear the stencil buffer.\r\n\t * @param backgroundColor The background color to clear with.\r\n\t * @param depth The depth value to clear with. Default is 1.\r\n\t * @param stencil The stencil value to clear with. Default is 0.\r\n\t * @param commandBuffer The command buffer to which this command will be added.\r\n\t * @zh 创建一个 SetRTCMD 实例。\r\n\t * @param renderTexture 要设置的渲染纹理。\r\n\t * @param clearColor 是否清除颜色缓冲区。\r\n\t * @param clearDepth 是否清除深度缓冲区。\r\n\t * @param clearStencil 是否清除模板缓冲区。\r\n\t * @param backgroundColor 用于清除的背景颜色。\r\n\t * @param depth 用于清除的深度值。默认为1。\r\n\t * @param stencil 用于清除的模板值。默认为0。\r\n\t * @param commandBuffer 将添加此命令的命令缓冲区。\r\n\t */\r\n\tstatic create(renderTexture: RenderTexture, clearColor: boolean, clearDepth: boolean, clearStencil: boolean, backgroundColor: Color, depth: number = 1, stencil: number = 0, commandBuffer: CommandBuffer): SetRTCMD {\r\n\t\tvar cmd: SetRTCMD;\r\n\t\tcmd = SetRTCMD._pool.length > 0 ? SetRTCMD._pool.pop() : new SetRTCMD();\r\n\t\tcmd.renderTexture = renderTexture;\r\n\t\tlet clearflag = 0;\r\n\t\tif (clearColor) {\r\n\t\t\tclearflag |= RenderClearFlag.Color;\r\n\t\t\tcmd._setRenderTargetCMD.clearColorValue = backgroundColor;\r\n\t\t}\r\n\t\tif (clearDepth) {\r\n\t\t\tclearflag |= RenderClearFlag.Depth;\r\n\t\t\tcmd._setRenderTargetCMD.clearDepthValue = depth;\r\n\t\t}\r\n\t\tif (clearStencil) {\r\n\t\t\tclearflag |= RenderClearFlag.Stencil;\r\n\t\t\tcmd._setRenderTargetCMD.clearStencilValue = stencil;\r\n\t\t}\r\n\t\tcmd._setRenderTargetCMD.clearFlag = clearflag;\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _renderTexture: RenderTexture = null;\r\n\r\n\t/**@internal */\r\n\t_setRenderTargetCMD: SetRenderTargetCMD;\r\n\r\n\t/**\r\n\t * @en The render texture.\r\n\t * @zh 渲染纹理。\r\n\t */\r\n\tpublic get renderTexture(): RenderTexture {\r\n\t\treturn this._renderTexture;\r\n\t}\r\n\tpublic set renderTexture(value: RenderTexture) {\r\n\t\tthis._renderTexture = value;\r\n\t\tthis._setRenderTargetCMD.rt = value._renderTarget;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._setRenderTargetCMD = Laya3DRender.Render3DPassFactory.createSetRenderTargetCMD();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @internal\r\n\t * @en Retrieves the render command.\r\n\t * @zh 获取渲染命令。\r\n\t */\r\n\tgetRenderCMD(): SetRenderTargetCMD {\r\n\t\treturn this._setRenderTargetCMD;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Recycles the command object for later use.\r\n\t * @zh 回收命令以便复用。\r\n\t */\r\n\trecover(): void {\r\n\t\tSetRTCMD._pool.push(this);\r\n\t\tthis._renderTexture = null;\r\n\t}\r\n}\r\n\r\n\r\n","import { DrawElementCMDData, IRenderCMD } from \"../../../../RenderDriver/DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { Command } from \"./Command\";\r\n\r\n/**\r\n * @en Represents a draw render element command.\r\n * @zh 表示一个绘制渲染元素命令。\r\n */\r\nexport class DrawRenderElementCMD extends Command {\r\n    /**@internal */\r\n    private static _pool: DrawRenderElementCMD[] = [];\r\n    /**\r\n     * @en Creates a new instance of the command or retrieves one from the pool.\r\n     * @param renderElement The render element associated with this command.\r\n     * @returns A new or pooled instance of `DrawRenderElementCMD`.\r\n     * @zh 创建命令的新实例或从池中检索一个实例。\r\n     * @param renderElement 与此命令关联的渲染元素。\r\n     * @return 一个新的或从池中检索到的 `DrawRenderElementCMD` 实例。\r\n     */\r\n    static create(renderElement: RenderElement): DrawRenderElementCMD {\r\n        var cmd: DrawRenderElementCMD;\r\n        cmd = DrawRenderElementCMD._pool.length > 0 ? DrawRenderElementCMD._pool.pop() : new DrawRenderElementCMD();\r\n        cmd.renderElement = renderElement;\r\n        return cmd;\r\n    }\r\n\r\n\r\n    /**@internal */\r\n    _drawElementCMDData: DrawElementCMDData;\r\n    /**@internal */\r\n    private _renderElement: RenderElement;\r\n\r\n    /**\r\n     * @en The render element of this command.\r\n     * @zh 此命令的渲染元素。\r\n     */\r\n    get renderElement(): RenderElement {\r\n        return this._renderElement;\r\n    }\r\n\r\n    set renderElement(value: RenderElement) {\r\n        this._renderElement = value;\r\n        this._drawElementCMDData.setRenderelements([this._renderElement._renderElementOBJ]);\r\n    }\r\n    constructor() {\r\n        super();\r\n        this._drawElementCMDData = Laya3DRender.Render3DPassFactory.createDrawElementCMDData();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Recovers the command for reuse.\r\n     * @zh 回收命令以供重用。\r\n     */\r\n    recover(): void {\r\n        super.recover();\r\n        DrawRenderElementCMD._pool.push(this);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * @en Gets the render command data.\r\n     * @zh 获取渲染命令数据。\r\n     */\r\n    getRenderCMD(): DrawElementCMDData {\r\n        return this._drawElementCMDData;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the command.\r\n     * @zh 销毁命令。\r\n     */\r\n    destroy() {\r\n        this._renderElement = null;\r\n        this._drawElementCMDData = null;\r\n    }\r\n}","\r\nimport { Camera } from \"../../Camera\";\r\nimport { BlitScreenQuadCMD } from \"./BlitScreenQuadCMD\";\r\nimport { Command } from \"./Command\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Mesh } from \"../../../resource/models/Mesh\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { SetDefineCMD, SetShaderDataCMD } from \"./SetShaderDataCMD\";\r\nimport { DrawMeshCMD } from \"./DrawMeshCMD\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { BaseRender } from \"../BaseRender\";\r\nimport { DrawRenderCMD } from \"./DrawRenderCMD\";\r\nimport { SetGlobalShaderDataCMD } from \"./SetGlobalShaderDataCMD\";\r\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\r\nimport { MaterialInstancePropertyBlock } from \"./MaterialInstancePropertyBlock\";\r\nimport { RenderCapable } from \"../../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { SetRTCMD } from \"./SetRenderTargetCMD\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { DrawRenderElementCMD } from \"./DrawRenderElemenetCMD\";\r\n\r\n/**\r\n * @en The `CommandBuffer` Class used to create command buffer\r\n * @zh `CommandBuffer` 类用于创建命令缓冲区。\r\n */\r\nexport class CommandBuffer {\r\n\tstatic instance: CommandBuffer;\r\n\t/**@internal */\r\n\t_name: string\r\n\t/**@internal */\r\n\tprivate _shadow: boolean = false;\r\n\t/**@internal */\r\n\t_camera: Camera = null;\r\n\t/**@internal */\r\n\t_context: RenderContext3D;\r\n\t/**@internal */\r\n\tprivate _commands: Command[] = [];\r\n\t/**@internal */\r\n\t_renderCMDs: any[] = [];\r\n\r\n\t/** @ignore */\r\n\tconstructor(name: string = null, shadowCaster: boolean = false) {\r\n\t\tthis._name = name;\r\n\t\tthis._shadow = shadowCaster;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The name of the command buffer.\r\n\t * @zh 命令缓冲区的名称。\r\n\t */\r\n\tget name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the command buffer casts shadows.\r\n\t * @zh 命令缓冲区是否投射阴影。\r\n\t */\r\n\tget casterShadow() {\r\n\t\treturn this._shadow;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The rendering context for the command buffer.\r\n\t * @zh 命令缓冲区的渲染上下文。\r\n\t */\r\n\tget context() {\r\n\t\treturn this._context;\r\n\t}\r\n\r\n\tset context(value: RenderContext3D) {\r\n\t\tthis._context = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Executes all rendering commands.\r\n\t * @zh 调用所有渲染指令。\r\n\t */\r\n\t_apply(render: boolean = false): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++) {\r\n\t\t\tlet cmd = this._commands[i];\r\n\t\t\tcmd.run && cmd.run();\r\n\t\t\t//render && cmd.getRenderCMD && rendertype.push(cmd.getRenderCMD());\r\n\t\t}\r\n\t\trender && this.context._contextOBJ.runCMDList(this._renderCMDs);\r\n\t\t//draw array\r\n\t\tStat.cmdDrawCall += this._renderCMDs.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Executes a single command from the command buffer.\r\n\t * @zh 从命令缓冲区执行单个命令。\r\n\t */\r\n\t_applyOne(): boolean {\r\n\t\tif (this._commands.length) {\r\n\t\t\tvar cmd = this._commands.shift();\r\n\t\t\tcmd.run && cmd.run();\r\n\t\t\t//render\r\n\t\t\tcmd.getRenderCMD && this.context._contextOBJ.runOneCMD(this._renderCMDs.shift());\r\n\t\t\tcmd.recover();\r\n\t\t}\r\n\t\treturn this._commands.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets the number of commands contained in the command buffer\r\n\t * @zh 获取命令缓冲区包含的命令数量\r\n\t */\r\n\tgetCommandsSize(): number {\r\n\t\treturn this._commands.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the texture data for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The Uniform ID for the texture.\r\n\t * @param source The source of the texture.\r\n\t * @zh 设置着色器的纹理数据。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 纹理的 Uniform ID。\r\n\t * @param source 纹理源。\r\n\t */\r\n\tsetShaderDataTexture(shaderData: ShaderData, nameID: number, source: BaseTexture): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, source, ShaderDataType.Texture2D, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global texture data.\r\n\t * @param nameID The Uniform ID for the texture.\r\n\t * @param source The source of the texture.\r\n\t * @zh 设置全局纹理数据。\r\n\t * @param nameID 纹理的 Uniform ID。\r\n\t * @param source 纹理源。\r\n\t */\r\n\tsetGlobalTexture(nameID: number, source: BaseTexture) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Texture2D, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the color data for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The color value.\r\n\t * @zh 设置着色器的颜色数据。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据 ID。\r\n\t * @param value 颜色值。\r\n\t */\r\n\tsetShaderDataColor(shaderData: ShaderData, nameID: number, value: Color): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Color, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global color.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The color data to be set.\r\n\t * @zh 设置全局颜色。\r\n\t * @param nameID 数据ID。\r\n\t * @param source 要设置的颜色数据。\r\n\t */\r\n\tsetGlobalColor(nameID: number, source: Color) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Color, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Vector4 data for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Vector4 data to be set.\r\n\t * @zh 设置着色器的 Vector4 数据。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID\r\n\t * @param value 要设置的Vector4数据。\r\n\t */\r\n\tsetShaderDataVector(shaderData: ShaderData, nameID: number, value: Vector4): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector4, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global Vector4 data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The Vector4 data to be set.\r\n\t * @zh 设置全局 Vector4 数据。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的Vector4数据。\r\n\t */\r\n\tsetGlobalVector(nameID: number, source: Vector4) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector4, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Vector3 data for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Vector3 data to be set.\r\n\t * @zh 设置着色器的 Vector3 数据。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID\r\n\t * @param value 要设置的Vector3数据。\r\n\t */\r\n\tsetShaderDataVector3(shaderData: ShaderData, nameID: number, value: Vector3): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector3, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global Vector3 data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The Vector3 data to be set.\r\n\t * @zh 设置全局 Vector3 数据。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的Vector3数据。\r\n\t */\r\n\tsetGlobalVector3(nameID: number, source: Vector3) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector3, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Vector2 data for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Vector2 data to be set.\r\n\t * @zh 设置着色器的 Vector2 数据。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID\r\n\t * @param value 要设置的Vector2数据。\r\n\t */\r\n\tsetShaderDataVector2(shaderData: ShaderData, nameID: number, value: Vector2): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Vector2, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global Vector2 data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The Vector2 data to be set.\r\n\t * @zh 设置全局 Vector2 数据。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的Vector2数据。\r\n\t */\r\n\tsetGlobalVector2(nameID: number, source: Vector2) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Vector2, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Number property for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Number data to be set.\r\n\t * @zh 设置着色器的 Number 属性。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID\r\n\t * @param value 要设置的Number数据。\r\n\t */\r\n\tsetShaderDataNumber(shaderData: ShaderData, nameID: number, value: number): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Float, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global Number property.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The Number data to be set.\r\n\t * @zh 设置全局 Number 属性。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的Number数据。\r\n\t */\r\n\tsetGlobalNumber(nameID: number, source: number) {\r\n\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Float, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Int property for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Int data to be set.\r\n\t * @zh 设置着色器的 Int 属性。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID\r\n\t * @param value 要设置的Int数据。\r\n\t */\r\n\tsetShaderDataInt(shaderData: ShaderData, nameID: number, value: number): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Int, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global integer property.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The data to be set.\r\n\t * @zh 设置全局的整型属性。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的数据。\r\n\t */\r\n\tsetGlobalInt(nameID: number, source: number) {\r\n\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Int, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the Matrix property for a shader.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param nameID The ID of the data.\r\n\t * @param value The Matrix data to be set.\r\n\t * @zh 设置着色器的矩阵属性。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param nameID 数据ID。\r\n\t * @param value 要设置的矩阵数据。\r\n\t */\r\n\tsetShaderDataMatrix(shaderData: ShaderData, nameID: number, value: Matrix4x4): void {\r\n\t\tlet cmd = SetShaderDataCMD.create(shaderData, nameID, value, ShaderDataType.Matrix4x4, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets a shader define.\r\n\t * @param shaderData The collection of shader data.\r\n\t * @param define The shader define to be set.\r\n\t * @param value A boolean value indicating whether to add (true) or remove (false) the define.\r\n\t * @zh 设置着色器的定义。\r\n\t * @param shaderData 着色器数据集合。\r\n\t * @param define 要设置的着色器定义。\r\n\t * @param value 布尔值，表示是添加（true）还是移除（false）该定义。\r\n\t */\r\n\tsetShaderDefine(shaderData: ShaderData, define: ShaderDefine, value: boolean): void {\r\n\t\tlet cmd = SetDefineCMD.create(shaderData, define, value, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the global Matrix property.\r\n\t * @param nameID The ID of the data.\r\n\t * @param source The Matrix data to be set.\r\n\t * @zh 设置全局的矩阵属性。\r\n\t * @param nameID 数据ID\r\n\t * @param source 要设置的矩阵数据。\r\n\t */\r\n\tsetGlobalMatrix(nameID: number, source: number) {\r\n\t\tlet cmd = SetGlobalShaderDataCMD.create(nameID, source, ShaderDataType.Matrix4x4, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Adds a fullscreen quad rendering command to the command buffer.\r\n\t * @param source The source texture. If null, the previous render result is used as the original texture.\r\n\t * @param dest The destination texture. If null, it renders directly to the final canvas.\r\n\t * @param offsetScale Offset scaling\r\n\t * @param shader The shader. If null, the internal copy shader is used without any processing.\r\n\t * @param shaderData The shader data. If null, only the sourceTexture is accepted.\r\n\t * @param subShader The subShader index, defaults to 0.\r\n\t * @zh 向命令缓冲区添加一条通过全屏四边形渲染命令。\r\n\t * @param source 源纹理。如果为null，则使用之前的渲染结果作为原纹理。\r\n\t * @param dest 目标纹理。如果为null，直接渲染到最终画布。\r\n\t * @param offsetScale 偏移缩放。\r\n\t * @param shader 着色器。如果为null，则使用内部拷贝着色器，不进行任何处理。\r\n\t * @param shaderData 着色器数据。如果为null，只接受sourceTexture。\r\n\t * @param subShader SubShader索引，默认值为0。\r\n\t */\r\n\tblitScreenQuad(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tlet cmd = BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a command to render the source texture to the target texture through a full screen quadrilateral.\r\n\t * @param source The source texture. If null, the previous render result is used as the original texture.\r\n\t * @param dest The destination texture. If null, it renders directly to the final canvas.\r\n\t * @param offsetScale Offset scaling.\r\n\t * @param material The material.\r\n\t * @param subShader The shader index.\r\n\t * @zh 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param source 源纹理。如果为null，则使用之前的渲染结果作为原纹理。\r\n\t * @param dest 目标纹理。如果为null，直接渲染到最终画布。\r\n\t * @param offsetScale 偏移缩放。\r\n\t * @param material 材质。\r\n\t * @param subShader Shader索引。\r\n\t */\r\n\tblitScreenQuadByMaterial(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, material: Material = null, subShader: number = 0): void {\r\n\t\tvar shader: Shader3D;\r\n\t\tvar shaderData: ShaderData;\r\n\t\tif (material) {\r\n\t\t\tshader = material._shader;\r\n\t\t\tshaderData = material.shaderData\r\n\t\t}\r\n\t\tlet cmd = BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_QUAD, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a command to render the source texture to the target texture through full screen triangles.\r\n\t * @param source The source texture.\r\n\t * @param dest The destination texture.\r\n\t * @param offsetScale Offset scaling.\r\n\t * @param shader The shader. If null, the internal copy shader is used without any processing.\r\n\t * @param shaderData The shader data. If null, only the sourceTexture is accepted.\r\n\t * @param subShader The subShader index, defaults to 0.\r\n\t * @zh 添加一条通过全屏三角形将源纹理渲染到目标渲染纹理指令。\r\n\t * @param source 源纹理。\r\n\t * @param dest 目标纹理。\r\n\t * @param offsetScale 偏移缩放。\r\n\t * @param shader 着色器。如果为null，则使用内部拷贝着色器，不进行任何处理。\r\n\t * @param shaderData 着色器数据。如果为null，只接受sourceTexture。\r\n\t * @param subShader SubShader索引，默认值为0。\r\n\t */\r\n\tblitScreenTriangle(source: BaseTexture, dest: RenderTexture, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0): void {\r\n\t\tlet cmd = BlitScreenQuadCMD.create(source, dest, offsetScale, shader, shaderData, subShader, BlitScreenQuadCMD._SCREENTYPE_TRIANGLE, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the render target for the command buffer.\r\n\t * @param renderTexture The render target texture.\r\n\t * @param clearColor Whether to clear the color buffer.\r\n\t * @param clearDepth Whether to clear the depth buffer.\r\n\t * @param backgroundColor The background color when clearing. Defaults to black.\r\n\t * @param depth The depth value when clearing. Defaults to 1.\r\n\t * @zh 设置命令缓冲区的渲染目标。\r\n\t * @param renderTexture 渲染目标纹理。\r\n\t * @param clearColor 是否清除颜色缓冲区。\r\n\t * @param clearDepth 是否清除深度缓冲区。\r\n\t * @param backgroundColor 清除时的背景颜色，默认为黑色。\r\n\t * @param depth 清除时的深度值，默认为1。\r\n\t */\r\n\tsetRenderTarget(renderTexture: RenderTexture, clearColor: boolean, clearDepth: boolean, backgroundColor: Color = Color.BLACK, depth: number = 1): void {\r\n\t\tlet cmd = SetRTCMD.create(renderTexture, clearColor, clearDepth, false, backgroundColor, depth, 0, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Renders a Mesh.\r\n\t * @param mesh The original mesh information.\r\n\t * @param matrix The world matrix of the mesh.\r\n\t * @param material The material applied to the mesh.\r\n\t * @param submeshIndex The index of the submesh.\r\n\t * @param subShaderIndex The index of the sub-shader, generally 0.\r\n\t * @zh 渲染一个网格。\r\n\t * @param mesh 原始网格信息。\r\n\t * @param matrix 网格的世界矩阵。\r\n\t * @param material 应用到网格的材质。\r\n\t * @param submeshIndex 子网格的索引。\r\n\t * @param subShaderIndex 子着色器的索引，默认为0。\r\n\t */\r\n\tdrawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, subShaderIndex: number): void {\r\n\t\tlet cmd = DrawMeshCMD.create(mesh, matrix, material, submeshIndex, subShaderIndex, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Renders a Render object.\r\n\t * @param render The renderer object to be rendered.\r\n\t * @param material The material applied to the renderer.\r\n\t * @param subMeshIndex The index of the sub-shader, defaults to 0.\r\n\t * @zh 渲染一个渲染对象。\r\n\t * @param render 要渲染的渲染器对象。\r\n\t * @param material 应用到渲染器的材质。\r\n\t * @param subMeshIndex 子着色器的索引，默认为0。\r\n\t */\r\n\tdrawRender(render: BaseRender, material: Material, subMeshIndex: number = 0): void {\r\n\t\tlet cmd = DrawRenderCMD.create(render, material, subMeshIndex, this);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Renders a RenderElement.\r\n\t * @param renderElement The RenderElement to be rendered.\r\n\t * @zh 渲染一个渲染元素。\r\n\t * @param renderElement 要渲染的渲染元素。\r\n\t */\r\n\tdrawRenderElement(renderElement: RenderElement) {\r\n\t\tlet cmd = DrawRenderElementCMD.create(renderElement);\r\n\t\tthis._commands.push(cmd);\r\n\t\tcmd.getRenderCMD && this._renderCMDs.push(cmd.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @en Renders a Mesh using instanced rendering for dynamic batching.\r\n\t * @param mesh The original mesh information.\r\n\t * @param subMeshIndex The index of the mesh.\r\n\t * @param matrixs An array of world matrices for rendering, describing the position of each Mesh to be rendered. If null, no world matrix buffer will be created or updated.\r\n\t * @param material The material used for rendering.\r\n\t * @param subShaderIndex The shader index of the rendering material.\r\n\t * @param instanceProperty Custom properties for the instance.\r\n\t * @param drawnums The number of instances to render.\r\n\t * @zh 使用实例化渲染动态合批方式渲染网格。\r\n\t * @param mesh 原始网格信息。\r\n\t * @param subMeshIndex 网格索引。\r\n\t * @param matrixs 渲染的世界矩阵数组，描述每个网格需要渲染的位置。如果为null，则不会创建或更新世界矩阵缓冲区。\r\n\t * @param material 渲染材质。\r\n\t * @param subShaderIndex 渲染材质的着色器索引。\r\n\t * @param instanceProperty 实例的自定义属性。\r\n\t * @param drawnums 要渲染的实例数量。\r\n\t */\r\n\tdrawMeshInstance(mesh: Mesh, subMeshIndex: number = 0, matrixs: Matrix4x4[], material: Material, subShaderIndex: number = 0, instanceProperty: MaterialInstancePropertyBlock, drawnums: number): any {\r\n\t\tif (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance))\r\n\t\t\treturn null;\r\n\t\tvar drawMeshInstancedCMD = DrawMeshInstancedCMD.create(mesh, subMeshIndex, matrixs, material, subShaderIndex, instanceProperty, drawnums, this);\r\n\t\tthis._commands.push(drawMeshInstancedCMD);\r\n\t\tdrawMeshInstancedCMD.getRenderCMD && this._renderCMDs.push(drawMeshInstancedCMD.getRenderCMD());\r\n\t\treturn drawMeshInstancedCMD;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Adds a custom render command.\r\n\t * @param command The custom command to add.\r\n\t * @zh 添加一个自定义的渲染命令。\r\n\t * @param command 要添加的自定义命令。\r\n\t */\r\n\taddCustomCMD(command: Command) {\r\n\t\tcommand._commandBuffer = this;\r\n\t\tthis._commands.push(command);\r\n\t\tcommand.getRenderCMD && this._renderCMDs.push(command.getRenderCMD());\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Clears the command buffer.\r\n\t * @zh 清除命令缓冲区。\r\n\t */\r\n\tclear(): void {\r\n\t\tfor (var i: number = 0, n: number = this._commands.length; i < n; i++)\r\n\t\t\tthis._commands[i].recover();\r\n\t\tthis._commands.length = 0;\r\n\t\tthis._renderCMDs.length = 0;\r\n\t}\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { LightQueue } from \"../../core/light/LightQueue\";\r\nimport { PointLightCom } from \"../../core/light/PointLightCom\";\r\nimport { SpotLightCom } from \"../../core/light/SpotLightCom\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\n\r\n/**\r\n * @internal\r\n */\r\nclass LightBound {\r\n    xMin: number;\r\n    xMax: number;\r\n    yMin: number;\r\n    yMax: number;\r\n    zMin: number;\r\n    zMax: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass ClusterData {\r\n    updateMark: number = -1;\r\n    pointLightCount: number = 0;\r\n    spotLightCount: number = 0;\r\n    indices: number[] = [];\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Cluster {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    private static _tempVector31: Vector3 = new Vector3();\r\n    private static _tempVector32: Vector3 = new Vector3();\r\n    private static _tempVector33: Vector3 = new Vector3();\r\n    private static _tempVector34: Vector3 = new Vector3();\r\n    private static _tempVector35: Vector3 = new Vector3();\r\n    private static _tempVector36: Vector3 = new Vector3();\r\n    private static _tempVector37: Vector3 = new Vector3();\r\n    private static _tempLightBound: LightBound = new LightBound();\r\n\r\n    static instance: Cluster;\r\n\r\n    private _xSlices: number;\r\n    private _ySlices: number;\r\n    private _zSlices: number;\r\n    private _clusterDatas: ClusterData[][][];\r\n    private _clusterPixels: Float32Array;\r\n    private _updateMark: number = 0;\r\n    private _depthSliceParam: Vector2 = new Vector2();\r\n\r\n    public _clusterTexture: Texture2D;\r\n\r\n    constructor(xSlices: number, ySlices: number, zSlices: number, maxLightsPerClusterAverage: number) {\r\n        this._xSlices = xSlices;\r\n        this._ySlices = ySlices;\r\n        this._zSlices = zSlices;\r\n        var clusterTexWidth: number = xSlices * ySlices;\r\n        var clisterTexHeight: number = zSlices * (1 + Math.ceil(maxLightsPerClusterAverage / 4));\r\n        this._clusterTexture = Utils3D._createFloatTextureBuffer(clusterTexWidth, clisterTexHeight);\r\n        this._clusterTexture.lock = true;\r\n        this._clusterPixels = new Float32Array(clusterTexWidth * clisterTexHeight * 4);\r\n\r\n        //Init for every cluster\r\n        var clusterDatas: ClusterData[][][] = new Array<Array<Array<ClusterData>>>(this._zSlices);\r\n        for (var z = 0; z < this._zSlices; z++) {\r\n            clusterDatas[z] = new Array<Array<ClusterData>>(this._ySlices);\r\n            for (var y = 0; y < this._ySlices; y++) {\r\n                clusterDatas[z][y] = new Array<ClusterData>(this._xSlices);\r\n                for (var x = 0; x < this._xSlices; x++)\r\n                    clusterDatas[z][y][x] = new ClusterData();\r\n            }\r\n        }\r\n        this._clusterDatas = clusterDatas;\r\n\r\n        /*\r\n        Layout of clusterTexture\r\n        |------------------------------------------------------U(XY)\r\n        |               cluster0               cluster1       \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |               cluster2               cluster3      \r\n        |        (PCou|SCou|Off0|Off1) | (PCou|SCou|Off0|Off1) \r\n        |-----------------------------------------------------------\r\n        |                                    _                              \r\n        |        (poi0|poi1|spo0|spo1) |(spo2|poi0|poi1|poi2)\r\n        |             _\r\n        |        (poi3|spo0|....|....) |(....|....|....|....) \r\n        |\r\n        V(Z)\r\n        */\r\n    }\r\n\r\n    // private _insertSpotLightSphere(origin: Vector3, forward: Vector3, size: number, angle: number, testSphere: Vector4): boolean {\r\n    //     //combine cone cull and sphere range cull\r\n    //     var V: Vector3 = Cluster._tempVector35;\r\n    //     V.x = testSphere.x - origin.x;\r\n    //     V.y = testSphere.y - origin.y;\r\n    //     V.z = testSphere.z - origin.z;\r\n\r\n    //     var VlenSq = Vector3.dot(V, V);\r\n    //     var sphereRadius: number = testSphere.w;\r\n\r\n    //     var rangeCull: boolean = VlenSq > sphereRadius * sphereRadius;\r\n    //     if (!rangeCull)\r\n    //         return false;\r\n\r\n    //     var V1len: number = Vector3.dot(V, forward);\r\n    //     var distanceClosestPoint: number = Math.cos(angle) * Math.sqrt(VlenSq - V1len * V1len) - V1len * Math.sin(angle);\r\n\r\n    //     var angleCull: boolean = distanceClosestPoint > sphereRadius;\r\n    //     var frontCull: boolean = V1len > sphereRadius + size;\r\n    //     var backCull: boolean = V1len < -sphereRadius;\r\n    //     return !(angleCull || frontCull || backCull);\r\n    // }\r\n\r\n    private _placePointLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _placeSpotLightToClusters(lightIndex: number, lightBound: LightBound): void {\r\n        var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n        var updateMark: number = this._updateMark;\r\n        for (var z: number = lightBound.zMin, zEnd: number = lightBound.zMax; z < zEnd; z++) {\r\n            for (var y: number = lightBound.yMin, yEnd: number = lightBound.yMax; y < yEnd; y++) {\r\n                for (var x: number = lightBound.xMin, xEnd: number = lightBound.xMax; x < xEnd; x++) {\r\n                    var data: ClusterData = clusterDatas[z][y][x];\r\n                    if (data.updateMark != updateMark) {\r\n                        data.pointLightCount = 0;\r\n                        data.spotLightCount = 0;\r\n                        data.updateMark = updateMark;\r\n                    }\r\n                    var indices: number[] = data.indices;\r\n                    var lightCount: number = data.pointLightCount + data.spotLightCount++;\r\n                    if (lightCount < indices.length)\r\n                        indices[lightCount] = lightIndex;\r\n                    else\r\n                        indices.push(lightIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _insertConePlane(origin: Vector3, forward: Vector3, radius: number, halfAngle: number, pNor: Vector3): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //because distance is always zero so we ease this method\r\n        var V1: Vector3 = Cluster._tempVector36;\r\n        var V2: Vector3 = Cluster._tempVector37;\r\n        Vector3.cross(pNor, forward, V1);\r\n        Vector3.cross(V1, forward, V2);\r\n        Vector3.normalize(V2, V2);\r\n        var tanR: number = radius * Math.tan(halfAngle);\r\n        var capRimX: number = origin.x + radius * forward.x + tanR * V2.x;\r\n        var capRimY: number = origin.y + radius * forward.y + tanR * V2.y;\r\n        var capRimZ: number = origin.z + radius * forward.z + tanR * V2.z;\r\n\r\n        return capRimX * pNor.x + capRimY * pNor.y + capRimZ * pNor.z <= 0 || origin.x * pNor.x + origin.y * pNor.y + origin.z * pNor.z <= 0;\r\n    }\r\n\r\n\r\n    private _shrinkSphereLightZPerspective(near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius;\r\n        var maxZ: number = lvZ + radius;\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightZPerspective(near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSphereLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, lightviewPos: Vector3, radius: number, lightBound: LightBound): boolean {\r\n        var lvZ: number = lightviewPos.z;\r\n        var minZ: number = lvZ - radius, maxZ: number = lvZ + radius;\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var lvX: number = lightviewPos.x;\r\n        var minX: number = lvX - radius, maxX: number = lvX + radius;\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var lvY: number = lightviewPos.y;\r\n        var minY: number = lvY - radius, maxY: number = lvY + radius;\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotLightByBoundOrth(halfX: number, halfY: number, near: number, far: number, viewLightPos: Vector3, viewConeCap: Vector3, radius: number, halfAngle: number, lightBound: LightBound): boolean {\r\n        //https://bartwronski.com/2017/04/13/cull-that-cone/\r\n        //http://www.iquilezles.org/www/articles/diskbbox/diskbbox.htm\r\n        var pbX: number = viewConeCap.x, pbY: number = viewConeCap.y, pbZ: number = viewConeCap.z;\r\n        var rb: number = Math.tan(halfAngle) * radius;\r\n        var paX: number = viewLightPos.x, paY: number = viewLightPos.y, paZ: number = viewLightPos.z;\r\n        var aX: number = pbX - paX, aY: number = pbY - paY, aZ: number = pbZ - paZ;\r\n        var dotA: number = aX * aX + aY * aY + aZ * aZ;\r\n\r\n        //flat-capped cone is not spotLight shape,spoltlight is sphere-capped.so we get the common boundBox of flat-capped cone bounds and sphere bounds.\r\n        var eZ: number = Math.sqrt(1.0 - aZ * aZ / dotA);\r\n        var minZ: number = Math.max(Math.min(paZ, pbZ - eZ * rb), viewLightPos.z - radius);\r\n        var maxZ: number = Math.min(Math.max(paZ, pbZ + eZ * rb), viewLightPos.z + radius);\r\n        if ((minZ > far) || (maxZ <= near))\r\n            return false;\r\n        var eX: number = Math.sqrt(1.0 - aX * aX / dotA);\r\n        var minX: number = Math.max(Math.min(paX, pbX - eX * rb), viewLightPos.x - radius);\r\n        var maxX: number = Math.min(Math.max(paX, pbX + eX * rb), viewLightPos.x + radius);\r\n        if ((minX > halfX) || (maxX <= -halfX))\r\n            return false;\r\n        var eY: number = Math.sqrt(1.0 - aY * aY / dotA);\r\n        var minY: number = Math.max(Math.min(paY, pbY - eY * rb), viewLightPos.y - radius);\r\n        var maxY: number = Math.min(Math.max(paY, pbY + eY * rb), viewLightPos.y + radius);\r\n        if ((minY > halfY) || (maxY <= -halfY))\r\n            return false;\r\n\r\n        // slice = Math.log2(z) * (numSlices / Math.log2(far / near)) - Math.log2(near) * numSlices / Math.log2(far / near)\r\n        // slice start from near plane,near is index:0,z must large than near,or the result will NaN\r\n        var xSlices: number = this._xSlices, ySlices: number = this._ySlices;\r\n        var depthSliceParam: Vector2 = this._depthSliceParam;\r\n        var xStride: number = halfX * 2 / xSlices, yStride: number = halfY * 2 / ySlices;\r\n        lightBound.xMin = Math.max(Math.floor((minX + halfX) / xStride), 0);\r\n        lightBound.xMax = Math.min(Math.ceil((maxX + halfX) / xStride), xSlices);\r\n        lightBound.yMin = Math.max(Math.floor((halfY - maxY) / yStride), 0);//zero is from top\r\n        lightBound.yMax = Math.min(Math.ceil((halfY - minY) / yStride), ySlices);\r\n        lightBound.zMin = Math.floor(Math.log2(Math.max(minZ, near)) * depthSliceParam.x - depthSliceParam.y);\r\n        lightBound.zMax = Math.min(Math.ceil(Math.log2(maxZ) * depthSliceParam.x - depthSliceParam.y), this._zSlices);\r\n        return true;\r\n    }\r\n\r\n\r\n    private _shrinkXYByRadiusPerspective(lightviewPos: Vector3, radius: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): boolean {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n        var lvX: number = lightviewPos.x, lvY: number = lightviewPos.y, lvZ: number = lightviewPos.z;\r\n\r\n        var i: number;\r\n        var n: number = this._ySlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z < radius) {//Dot\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        if (i == n)//fail scan insert\r\n            return false;\r\n        yMax = this._ySlices;\r\n        for (i = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            if (lvY * plane.y + lvZ * plane.z <= -radius) {//Dot\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = this._xSlices + 1;\r\n        for (i = 0; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z < radius) {//Dot\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = this._xSlices;\r\n        for (i = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            if (lvX * plane.x + lvZ * plane.z <= -radius) {//Dot\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        lightBound.xMin = xMin\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n        return true;\r\n    }\r\n\r\n    private _shrinkSpotXYByConePerspective(lightviewPos: Vector3, viewForward: Vector3, radius: number, halfAngle: number, lightBound: LightBound, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var xMin: number, yMin: number;\r\n        var xMax: number, yMax: number;\r\n\r\n        var normal: Vector3 = Cluster._tempVector32;\r\n        var n: number = lightBound.yMax + 1;\r\n        for (var i: number = lightBound.yMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, yPlanes[i])) {\r\n                yMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        yMax = lightBound.yMax;\r\n        for (var i: number = yMin + 1; i < n; i++) {\r\n            var plane: Vector3 = yPlanes[i];\r\n            normal.setValue(0, -plane.y, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                yMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        n = lightBound.xMax + 1;\r\n        for (var i: number = lightBound.xMin + 1; i < n; i++) {\r\n            if (this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, xPlanes[i])) {\r\n                xMin = Math.max(0, i - 1);\r\n                break;\r\n            }\r\n        }\r\n        xMax = lightBound.xMax;\r\n        for (var i: number = xMin + 1; i < n; i++) {\r\n            var plane: Vector3 = xPlanes[i];\r\n            normal.setValue(-plane.x, 0, -plane.z);\r\n            if (!this._insertConePlane(lightviewPos, viewForward, radius, halfAngle, normal)) {\r\n                xMax = Math.max(0, i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        lightBound.xMin = xMin;\r\n        lightBound.xMax = xMax;\r\n        lightBound.yMin = yMin;\r\n        lightBound.yMax = yMax;\r\n    }\r\n\r\n\r\n\r\n    private _updatePointLightPerspective(near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n        if (!this._shrinkSphereLightZPerspective(near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(lightviewPos, pointLight.range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightPerspective(near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number, xPlanes: Vector3[], yPlanes: Vector3[]): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\r\n        var range: number = spotLight.range;\r\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightZPerspective(near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n        if (!this._shrinkXYByRadiusPerspective(viewPos, range, lightBound, xPlanes, yPlanes))\r\n            return;\r\n        var viewFor: Vector3 = Cluster._tempVector33;\r\n        viewFor.x = viewConeCap.x - viewPos.x, viewFor.y = viewConeCap.y - viewPos.y, viewFor.z = viewConeCap.z - viewPos.z;\r\n        Vector3.normalize(viewFor, viewFor);\r\n        this._shrinkSpotXYByConePerspective(viewPos, viewFor, range, halfAngle, lightBound, xPlanes, yPlanes);\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updatePointLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, pointLight: PointLightCom, lightIndex: number): void {\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var lightviewPos: Vector3 = Cluster._tempVector30;\r\n        Vector3.transformV3ToV3((pointLight.owner as Sprite3D)._transform.position, viewMat, lightviewPos);//World to View\r\n        lightviewPos.z *= -1;\r\n\r\n        if (!this._shrinkSphereLightByBoundOrth(halfX, halfY, near, far, lightviewPos, pointLight.range, lightBound))\r\n            return;\r\n\r\n        this._placePointLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    private _updateSpotLightOrth(halfX: number, halfY: number, near: number, far: number, viewMat: Matrix4x4, spotLight: SpotLightCom, lightIndex: number): void {\r\n        // technically could fall outside the bounds we make because the planes themeselves are tilted by some angle\r\n        // the effect is exaggerated the steeper the angle the plane makes is\r\n        var lightBound: LightBound = Cluster._tempLightBound;\r\n        var viewPos: Vector3 = Cluster._tempVector30;\r\n        var forward: Vector3 = Cluster._tempVector31;\r\n        var viewConeCap: Vector3 = Cluster._tempVector34;\r\n        var position: Vector3 = (spotLight.owner as Sprite3D)._transform.position;\r\n        var range: number = spotLight.range;\r\n        (spotLight.owner as Sprite3D)._transform.worldMatrix.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        Vector3.scale(forward, range, viewConeCap);\r\n        Vector3.add(position, viewConeCap, viewConeCap);\r\n\r\n        Vector3.transformV3ToV3(position, viewMat, viewPos);//World to View\r\n        Vector3.transformV3ToV3(viewConeCap, viewMat, viewConeCap);//World to View\r\n        viewPos.z *= -1;\r\n        viewConeCap.z *= -1;\r\n        var halfAngle: number = (spotLight.spotAngle / 2) * Math.PI / 180;\r\n        if (!this._shrinkSpotLightByBoundOrth(halfX, halfY, near, far, viewPos, viewConeCap, range, halfAngle, lightBound))\r\n            return;\r\n\r\n        this._placeSpotLightToClusters(lightIndex, lightBound);\r\n    }\r\n\r\n    update(camera: Camera, scene: Scene3D): void {\r\n        this._updateMark++;\r\n        var camNear: number = camera.nearPlane;\r\n        this._depthSliceParam.x = Config3D.lightClusterCount.z / Math.log2(camera.farPlane / camNear);\r\n        this._depthSliceParam.y = Math.log2(camNear) * this._depthSliceParam.x;\r\n\r\n        var near: number = camera.nearPlane;\r\n        var far: number = camera.farPlane;\r\n        var viewMat: Matrix4x4 = camera.viewMatrix;\r\n        var curCount: number = scene._directionLights._length;\r\n        var pointLights: LightQueue<PointLightCom> = scene._pointLights;\r\n        var poiCount: number = pointLights._length;\r\n        var poiElements: PointLightCom[] = <PointLightCom[]>pointLights._elements;\r\n        var spotLights: LightQueue<SpotLightCom> = scene._spotLights;\r\n        var spoCount: number = spotLights._length;\r\n        var spoElements: SpotLightCom[] = <SpotLightCom[]>spotLights._elements;\r\n        if (camera.orthographic) {\r\n            var halfY: number = camera.orthographicVerticalSize / 2.0;\r\n            var halfX: number = halfY * camera.aspectRatio;\r\n            for (var i = 0; i < poiCount; i++, curCount++)\r\n                this._updatePointLightOrth(halfX, halfY, near, far, viewMat, poiElements[i], curCount);\r\n            for (var i = 0; i < spoCount; i++, curCount++)\r\n                this._updateSpotLightOrth(halfX, halfY, near, far, viewMat, spoElements[i], curCount);\r\n        }\r\n        else {\r\n            camera._updateClusterPlaneXY();\r\n            var xPlanes: Vector3[] = camera._clusterXPlanes;//must after camera._updateClusterPlaneXY()\r\n            var yPlanes: Vector3[] = camera._clusterYPlanes;\r\n            for (var i = 0; i < poiCount; i++, curCount++)\r\n                this._updatePointLightPerspective(near, far, viewMat, poiElements[i], curCount, xPlanes, yPlanes);\r\n            for (var i = 0; i < spoCount; i++, curCount++)\r\n                this._updateSpotLightPerspective(near, far, viewMat, spoElements[i], curCount, xPlanes, yPlanes);\r\n        }\r\n\r\n        if (poiCount + spoCount > 0) {\r\n            var xSlices: number = this._xSlices, ySlices: number = this._ySlices, zSlices: number = this._zSlices;\r\n            var widthFloat: number = xSlices * ySlices * 4;\r\n            var lightOff: number = widthFloat * zSlices;\r\n            var clusterPixels: Float32Array = this._clusterPixels;\r\n            var clusterPixelsCount: number = clusterPixels.length;\r\n            var clusterDatas: ClusterData[][][] = this._clusterDatas;\r\n            var updateMark: number = this._updateMark;\r\n            var freeSpace: boolean = true;\r\n            for (var z = 0; z < zSlices; z++) {\r\n                for (var y = 0; y < ySlices; y++) {\r\n                    for (var x = 0; x < xSlices; x++) {\r\n                        var data: ClusterData = clusterDatas[z][y][x];\r\n                        var clusterOff: number = (x + y * xSlices + z * xSlices * ySlices) * 4;\r\n                        if (data.updateMark !== updateMark) {\r\n                            clusterPixels[clusterOff] = 0;\r\n                            clusterPixels[clusterOff + 1] = 0;\r\n                        }\r\n                        else {\r\n                            if (freeSpace) {\r\n                                var indices: number[] = data.indices;\r\n                                var pCount: number = data.pointLightCount;\r\n                                var sCount: number = data.spotLightCount;\r\n                                var count: number = pCount + sCount;\r\n                                if (lightOff + count < clusterPixelsCount) {\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = sCount;\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                }\r\n                                else {\r\n                                    count = clusterPixelsCount - (lightOff + count);\r\n                                    pCount = Math.min(pCount, count);\r\n                                    clusterPixels[clusterOff] = pCount;\r\n                                    clusterPixels[clusterOff + 1] = Math.min(sCount, count - pCount);\r\n                                    clusterPixels[clusterOff + 2] = Math.floor(lightOff / widthFloat);//solve precision problme, if data is big some GPU int(float) have problem\r\n                                    clusterPixels[clusterOff + 3] = lightOff % widthFloat;\r\n                                    for (var i: number = 0; i < count; i++)\r\n                                        clusterPixels[lightOff++] = indices[i];\r\n                                    freeSpace = false;//remain cluster light will be ignore\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var width: number = this._clusterTexture.width;\r\n            this._clusterTexture.setSubPixelsData(0, 0, width, Math.ceil(lightOff / (4 * width)), clusterPixels, 0, false, false, false);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * @en The PhysicsSettings class is used to create physics configuration information.\r\n * @zh PhysicsSettings 类用于创建物理配置信息。\r\n */\r\nexport class PhysicsSettings {\r\n    /**\r\n     * @en Flags that determine the behavior of the physics engine.\r\n     * @zh 标志位，用于确定物理引擎的行为。\r\n     */\r\n    flags: number = 0;\r\n\r\n    /**\r\n     * @en Used in the physics engine to specify the maximum number of substeps allowed per frame to improve the accuracy and stability of the physics simulation.\r\n     * @zh 最大子步数,在物理引擎中用于指定每一帧允许的最大子步骤数，以提高物理模拟的精度和稳定性。\r\n     */\r\n    maxSubSteps: number = 1;\r\n\r\n    /**\r\n     * @en The time step of the physics simulation.\r\n     * @zh 固定时间步长，物理模拟器帧的间隔时间。\r\n     */\r\n    fixedTimeStep: number = 1.0 / 60.0;\r\n\r\n    /**\r\n     * @en Whether to enable continuous collision detection.\r\n     * @zh 是否开启连续碰撞检测 \r\n     */\r\n    enableCCD: boolean = false;\r\n\r\n    /**\r\n     * @en The threshold for Continuous Collision Detection (CCD).\r\n     * @zh 连续碰撞检测的阈值。\r\n     */\r\n    ccdThreshold: number = 0.0001;\r\n\r\n    /**\r\n     * @en The radius of the sphere used for Continuous Collision Detection.\r\n     * @zh 连续碰撞检测的球体半径。\r\n     */\r\n    ccdSphereRadius: number = 0.0001;\r\n}\r\n\r\n\r\n","import { Light } from \"./Light\";\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n * @en The `LightQueue` class manages a queue of lights.\r\n * @zh `LightQueue` 类管理一个灯光队列\r\n */\r\nexport class LightQueue<T extends Light> {\r\n    _length: number = 0;\r\n    _elements: T[] = [];\r\n\r\n\r\n    /**\r\n     * @en Adds a light to the queue.\r\n     * @zh 向队列中添加一个灯光。\r\n     */\r\n    add(light: T): void {\r\n        let index = this._elements.indexOf(light);\r\n        if (index !=-1 && index < this._length) {\r\n            return;\r\n        }\r\n        if (this._length === this._elements.length)\r\n            this._elements.push(light);\r\n        else\r\n            this._elements[this._length] = light;\r\n        this._length++;\r\n    }\r\n\r\n    /**\r\n     * @en Removes a light from the queue.\r\n     * @zh 从队列中移除一个灯光。\r\n     */\r\n    remove(light: T): void {\r\n        var index: number = this._elements.indexOf(light);\r\n        if(index == -1)\r\n            return;\r\n        this._length--;\r\n        if (index !== this._length) {\r\n            var end: T = this._elements[this._length];\r\n            this._elements[index] = end;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes and returns the first light in the queue.\r\n     * @zh 移除并返回队列中的第一个灯光。\r\n     */\r\n    shift(): T | undefined {\r\n        this._length--;\r\n        return this._elements.shift();\r\n    }\r\n\r\n    /**\r\n     * @en Gets the index of the brightest light in the queue.\r\n     * @zh 获取队列中最亮的灯光的索引。\r\n     */\r\n    getBrightestLight(): number | undefined {\r\n        var maxIntIndex;\r\n        var maxIntensity: number = -1;\r\n        var elements: T[] = this._elements;\r\n        for (var i: number = 0; i < this._length; i++) {\r\n            var intensity: number = elements[i]._intensity;\r\n            if (maxIntensity < intensity) {\r\n                maxIntensity = intensity;\r\n                maxIntIndex = i;\r\n            }\r\n        }\r\n        return maxIntIndex;\r\n    }\r\n    /**\r\n     * @en Rearranges the lights in the queue to ensure the brightest light is first.\r\n     * @zh 重新排列队列中的灯光，确保最亮的灯光在最前面。\r\n     */\r\n    normalLightOrdering(brightestIndex: number) {\r\n        var firstLight: T = this._elements[0];\r\n        this._elements[0] = this._elements[brightestIndex];\r\n        this._elements[brightestIndex] = firstLight;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n * @en The `AlternateLightQueue` class extends the `LightQueue` class, and overrides the remove method.\r\n * @zh `AlternateLightQueue` 类继承自 `LightQueue` 类，重写了移除灯光的方法\r\n */\r\nexport class AlternateLightQueue extends LightQueue<Light>{\r\n\r\n    /**\r\n     * @en Removes a light from the queue.\r\n     * @zh 从队列中移除灯光。\r\n     */\r\n    remove(light: Light): void {\r\n        //sort must base added time\r\n        var index: number = this._elements.indexOf(light);\r\n        this._elements.splice(index, 1);\r\n        this._length--;\r\n    }\r\n}\r\n","import { ILightMapData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\n\r\n/**\r\n * @en Lightmap.\r\n * @zh 光照贴图。\r\n */\r\nexport class Lightmap {\r\n    /**@internal */\r\n    static ApplyLightmapEvent: string = \"ApplyLightmap\";\r\n\r\n    /**@internal */\r\n    _dataModule: ILightMapData;\r\n\r\n    private _lightmapColor: Texture2D;\r\n    /**\r\n     * @en The color of the lightmap.\r\n     * @zh 光照贴图的颜色。\r\n     */\r\n    public get lightmapColor(): Texture2D {\r\n        return this._lightmapColor;\r\n    }\r\n\r\n    public set lightmapColor(value: Texture2D) {\r\n        if (this._lightmapColor == value)\r\n            return\r\n        this._lightmapColor && this._lightmapColor._removeReference();\r\n        this._lightmapColor = value;\r\n        if (value) {\r\n            value._addReference();\r\n            this._dataModule.lightmapColor = value._texture;\r\n        } else {\r\n            this._dataModule.lightmapColor = null;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /** 光照贴图方向。 */\r\n    private _lightmapDirection: Texture2D;\r\n    /**\r\n     * @en The direction of the lightmap.\r\n     * @zh 光照贴图的方向。\r\n     */\r\n    public get lightmapDirection(): Texture2D {\r\n        return this._lightmapDirection;\r\n    }\r\n\r\n    public set lightmapDirection(value: Texture2D) {\r\n        if (this._lightmapDirection == value)\r\n            return\r\n        this._lightmapDirection && this._lightmapDirection._removeReference();\r\n        this._lightmapDirection = value;\r\n        if (value) {\r\n            value._addReference();\r\n            this._dataModule.lightmapDirection = value._texture;\r\n        } else {\r\n            this._dataModule.lightmapDirection = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor() {\r\n        this._dataModule = Laya3DRender.Render3DModuleDataFactory.createLightmapData();\r\n    }\r\n}","import { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n/**\r\n * @internal\r\n * @en The collection of scene shader macros.\r\n * @zh 场景宏集合\r\n */\r\nexport class Scene3DShaderDeclaration {\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_LINEAR: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_EXP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_FOG_EXP2: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIRECTIONLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_POINTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SPOTLIGHT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_CASCADE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH: ShaderDefine;\r\n\r\n}","import { BaseCamera } from \"../core/BaseCamera\";\r\nimport { ShadowCascadesMode } from \"../core/light/ShadowCascadesMode\";\r\nimport { ShadowMapFormat, ShadowUtils } from \"../core/light/ShadowUtils\";\r\nimport { SpotLightCom } from \"../core/light/SpotLightCom\";\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DepthCasterData } from \"../depthMap/DepthCasterData\";\r\nimport { RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { DirectionLightCom } from \"../core/light/DirectionLightCom\";\r\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n/**\r\n * @internal\r\n * @en ShadowCasterPass class used to implement the shadow rendering pipeline.\r\n * @zh ShadowCasterPass 类用于实现阴影渲染管线。\r\n */\r\nexport class ShadowCasterPass {\r\n    /** @internal */\r\n    static SHADOW_BIAS: number;\r\n    /** @internal */\r\n    static SHADOW_LIGHT_DIRECTION: number;\r\n    /** @internal */\r\n    static SHADOW_SPLIT_SPHERES: number;\r\n    /** @internal */\r\n    static SHADOW_MATRICES: number;\r\n    /** @internal */\r\n    static SHADOW_MAP_SIZE: number;\r\n    /** @internal */\r\n    static SHADOW_MAP: number;\r\n    /** @internal */\r\n    static SHADOW_PARAMS: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMAP_SIZE: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMAP: number;\r\n    /** @internal */\r\n    static SHADOW_SPOTMATRICES: number;\r\n\r\n    /**\r\n     * @internal\r\n     * init Scene UniformMap\r\n     */\r\n    static __init__() {\r\n        ShadowCasterPass.SHADOW_BIAS = Shader3D.propertyNameToID(\"u_ShadowBias\");\r\n        ShadowCasterPass.SHADOW_LIGHT_DIRECTION = Shader3D.propertyNameToID(\"u_ShadowLightDirection\");\r\n        ShadowCasterPass.SHADOW_SPLIT_SPHERES = Shader3D.propertyNameToID(\"u_ShadowSplitSpheres\");\r\n        ShadowCasterPass.SHADOW_MATRICES = Shader3D.propertyNameToID(\"u_ShadowMatrices\");\r\n        ShadowCasterPass.SHADOW_MAP_SIZE = Shader3D.propertyNameToID(\"u_ShadowMapSize\");\r\n        ShadowCasterPass.SHADOW_MAP = Shader3D.propertyNameToID(\"u_ShadowMap\");\r\n        ShadowCasterPass.SHADOW_PARAMS = Shader3D.propertyNameToID(\"u_ShadowParams\");\r\n        ShadowCasterPass.SHADOW_SPOTMAP_SIZE = Shader3D.propertyNameToID(\"u_SpotShadowMapSize\");\r\n        ShadowCasterPass.SHADOW_SPOTMAP = Shader3D.propertyNameToID(\"u_SpotShadowMap\");\r\n        ShadowCasterPass.SHADOW_SPOTMATRICES = Shader3D.propertyNameToID(\"u_SpotViewProjectMatrix\");\r\n\r\n        const sceneUniformMap = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Scene3D\");\r\n\r\n        if (Config3D._uniformBlock) {\r\n            sceneUniformMap.addShaderBlockUniform(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), UniformBufferObject.UBONAME_SHADOW, [\r\n                {\r\n                    id: ShadowCasterPass.SHADOW_BIAS,\r\n                    propertyName: \"u_ShadowBias\",\r\n                    uniformtype: ShaderDataType.Vector4\r\n\r\n                },\r\n                {\r\n                    id: ShadowCasterPass.SHADOW_LIGHT_DIRECTION,\r\n                    propertyName: \"u_ShadowLightDirection\",\r\n                    uniformtype: ShaderDataType.Vector3\r\n                }\r\n            ])\r\n        } else {\r\n            sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_BIAS, \"u_ShadowBias\", ShaderDataType.Vector4);\r\n            sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, \"u_ShadowLightDirection\", ShaderDataType.Vector3);\r\n        }\r\n\r\n        //sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPLIT_SPHERES, \"u_ShadowSplitSpheres\", ShaderDataType.Vector4);\r\n        //sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MATRICES, \"u_ShadowMatrices\", ShaderDataType.Matrix4x4);\r\n        //scene和camera的uniformMap必须指明数组长度，因为数组信息不从shader中提取，直接使用map中的信息\r\n        sceneUniformMap.addShaderUniformArray(ShadowCasterPass.SHADOW_SPLIT_SPHERES, \"u_ShadowSplitSpheres\", ShaderDataType.Vector4, 4); //兼容WGSL\r\n        sceneUniformMap.addShaderUniformArray(ShadowCasterPass.SHADOW_MATRICES, \"u_ShadowMatrices\", ShaderDataType.Matrix4x4, 4); //兼容WGSL\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP_SIZE, \"u_ShadowMapSize\", ShaderDataType.Vector4);\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_MAP, \"u_ShadowMap\", ShaderDataType.Texture2D);\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_PARAMS, \"u_ShadowParams\", ShaderDataType.Vector4);\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, \"u_SpotShadowMapSize\", ShaderDataType.Vector4);\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP, \"u_SpotShadowMap\", ShaderDataType.Texture2D);\r\n        sceneUniformMap.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMATRICES, \"u_SpotViewProjectMatrix\", ShaderDataType.Matrix4x4);\r\n        //sceneUniformMap.addShaderUniform(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), UniformBufferObject.UBONAME_SHADOW);\r\n    }\r\n\r\n\r\n    /** @internal */\r\n    _castDepthBufferData: UnifromBufferData;\r\n    _castDepthBufferOBJ: UniformBufferObject;\r\n\r\n    _castDepthCameraBufferData: UnifromBufferData;\r\n    _castDepthCameraBufferOBJ: UniformBufferObject;\r\n\r\n    /** @internal */\r\n    private _shadowDirectLightMap: RenderTexture;\r\n    /** @internal */\r\n    private _shadowSpotLightMap: RenderTexture;\r\n\r\n    /**\r\n     * @en Create a new instance of ShadowCasterPass.\r\n     * @zh 创建  ShadowCasterPass 类的新实例。\r\n     */\r\n    constructor() {\r\n        if (Config3D._uniformBlock) {\r\n            this._castDepthBufferData = DepthCasterData.createDepthCasterUniformBlock();\r\n            this._castDepthBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SHADOW, 0);\r\n            if (!this._castDepthBufferOBJ) {\r\n                this._castDepthBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_SHADOW, BufferUsage.Dynamic, this._castDepthBufferData.getbyteLength(), true);\r\n            }\r\n            BaseCamera.createCameraUniformBlock();\r\n            this._castDepthCameraBufferData = BaseCamera.CameraUBOData.clone();\r\n            this._castDepthCameraBufferOBJ = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 1);\r\n            if (!this._castDepthCameraBufferOBJ) {\r\n                this._castDepthCameraBufferOBJ = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, this._castDepthCameraBufferData.getbyteLength(), false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Retrieve the shadow map for a directional light.\r\n     * @param light The directional light component.\r\n     * @returns The shadow map texture for the directional light.\r\n     * @zh 获取方向光的阴影贴图。\r\n     * @param light 方向光组件。\r\n     * @returns 方向光的阴影贴图纹理。\r\n     */\r\n    getDirectLightShadowMap(light: DirectionLightCom) {\r\n        var shadowMapWidth;\r\n        var shadowMapHeight;\r\n        var atlasResolution: number = light.shadowResolution;\r\n        var cascadesMode: ShadowCascadesMode = light.shadowCascadesMode;\r\n        var cascadesCount: number;\r\n        var shadowTileResolution: number;\r\n        if (cascadesMode == ShadowCascadesMode.NoCascades) {\r\n            shadowTileResolution = atlasResolution;\r\n            shadowMapWidth = atlasResolution;\r\n            shadowMapHeight = atlasResolution;\r\n        }\r\n        else {\r\n            cascadesCount = cascadesMode == ShadowCascadesMode.TwoCascades ? 2 : 4;\r\n            shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(atlasResolution, atlasResolution, cascadesCount);\r\n            shadowMapWidth = shadowTileResolution * 2;\r\n            shadowMapHeight = cascadesMode == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\r\n        }\r\n        this._shadowDirectLightMap && RenderTexture.recoverToPool(this._shadowDirectLightMap);\r\n        this._shadowDirectLightMap = ShadowUtils.getTemporaryShadowTexture(shadowMapWidth, shadowMapHeight, ShadowMapFormat.bit16);\r\n        return this._shadowDirectLightMap;\r\n    }\r\n\r\n    /**\r\n     * @en Retrieve the shadow pass data for a spot light.\r\n     * @param light The spot light component.\r\n     * @returns The shadow map texture for the spot light.\r\n     * @zh 获取聚光灯的阴影通道数据。\r\n     * @param light 聚光灯组件。\r\n     * @returns 聚光灯的阴影贴图纹理。\r\n     */\r\n    getSpotLightShadowPassData(light: SpotLightCom) {\r\n        this._shadowSpotLightMap && RenderTexture.recoverToPool(this._shadowSpotLightMap);\r\n        var shadowResolution: number = light.shadowResolution;\r\n        var shadowMapWidth = shadowResolution;\r\n        var shadowMapHeight = shadowResolution;\r\n        this._shadowSpotLightMap = ShadowUtils.getTemporaryShadowTexture(shadowMapWidth, shadowMapHeight, ShadowMapFormat.bit16);\r\n        return this._shadowSpotLightMap;\r\n    }\r\n\r\n    /**\r\n     * @en Retrieve the shadow pass data for a point light.\r\n     * @zh 获取点光源的阴影通道数据。\r\n     */\r\n    getPointLightShadowPassData() {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Clean up shadow data.\r\n     * @zh 清理阴影数据。\r\n     */\r\n    cleanUp(): void {\r\n        this._shadowDirectLightMap && RenderTexture.recoverToPool(this._shadowDirectLightMap);\r\n        this._shadowSpotLightMap && RenderTexture.recoverToPool(this._shadowSpotLightMap);\r\n        this._shadowDirectLightMap = null;\r\n        this._shadowSpotLightMap = null;\r\n    }\r\n}\r\n\r\n","import { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { RenderContext3D } from \"../RenderContext3D\";\r\nimport { ScreenQuad } from \"../ScreenQuad\";\r\nimport { Command } from \"./Command\";\r\nimport { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { RenderElement } from \"../RenderElement\";\r\nimport { ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { Transform3D } from \"../../Transform3D\";\r\nimport { Viewport } from \"../../../../maths/Viewport\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\n\r\n\r\n\r\n/**\r\n * @en Class used for creating instructions to output from a render source to a render target.\r\n * @zh 类用于创建从渲染源输出到渲染目标的指令。\r\n */\r\nexport class BlitFrameBufferCMD {\r\n\t/**@internal */\r\n\tprivate static _pool: any[] = [];\r\n\t/** @internal */\r\n\tprivate static _defaultOffsetScale: Vector4 = new Vector4(0, 0, 1, 1);\r\n\t/** @internal */\r\n\tstatic shaderdata: ShaderData;\r\n\r\n\t/** @internal */\r\n\tstatic __init__(): void {\r\n\t\tBlitFrameBufferCMD.shaderdata = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a render command set.\r\n\t * @param source The source texture.\r\n\t * @param dest The destination render texture.\r\n\t * @param viewport The viewport for rendering.\r\n\t * @param offsetScale The offset and scale vector. Default is null.\r\n\t * @param shader The shader to use. Default is null.\r\n\t * @param shaderData The shader data to use. Default is null.\r\n\t * @param subShader The sub-shader index. Default is 0.\r\n\t * @returns The created BlitFrameBufferCMD instance.\r\n\t * @zh 创建渲染命令集。\r\n\t * @param source 源纹理。\r\n\t * @param dest 目标渲染纹理。\r\n\t * @param viewport 渲染视口。\r\n\t * @param offsetScale 偏移和缩放向量。默认为 null。\r\n\t * @param shader 要使用的着色器。默认为 null。\r\n\t * @param shaderData 要使用的着色器数据。默认为 null。\r\n\t * @param subShader 子着色器索引。默认为 0。\r\n\t * @returns 创建的 BlitFrameBufferCMD 实例。\r\n\t */\r\n\tstatic create(source: BaseTexture, dest: RenderTexture, viewport: Viewport, offsetScale: Vector4 = null, shader: Shader3D = null, shaderData: ShaderData = null, subShader: number = 0) {\r\n\t\tvar cmd: BlitFrameBufferCMD;\r\n\t\tcmd = BlitFrameBufferCMD._pool.length > 0 ? BlitFrameBufferCMD._pool.pop() : new BlitFrameBufferCMD();\r\n\t\tcmd._source = source;\r\n\t\tcmd._dest = dest;\r\n\t\tcmd._offsetScale = offsetScale;\r\n\t\tcmd.setshader(shader, subShader, shaderData);\r\n\t\tcmd._source && cmd._texture_size.setValue(source.width, source.height, 1.0 / source.width, 1.0 / source.height);\r\n\t\t//cmd._shader = shader;\r\n\t\t//cmd._shaderData = shaderData;\r\n\t\t//cmd._subShader = subShader;\r\n\t\tcmd._viewPort = viewport;\r\n\t\treturn cmd;\r\n\t}\r\n\t/**@internal source 原始贴图*/\r\n\tprivate _source: BaseTexture = null;\r\n\t/**@internal dest 目标 如果为null，将会默认为主画布*/\r\n\tprivate _dest: RenderTexture = null;\r\n\t/**@internal 偏移缩放*/\r\n\tprivate _offsetScale: Vector4 = null;\r\n\t/**@internal */\r\n\t_texture_size: Vector4 = null;\r\n\t/**@internal 渲染shader*/\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal 渲染数据*/\r\n\tprivate _shaderData: ShaderData = null;\r\n\t/**@internal subshader的节点*/\r\n\tprivate _subShader: number = 0;\r\n\t/**@internal 渲染设置*/\r\n\tprivate _viewPort: Viewport = null;\r\n\t// /**@internal */\r\n\t// private _sourceTexelSize: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _renderElement: RenderElement;\r\n\t/**@internal */\r\n\tprivate _transform3D: Transform3D;\r\n\r\n\tconstructor() {\r\n\t\tthis._transform3D = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\r\n\t\tthis._renderElement = new RenderElement();\r\n\t\tthis._renderElement.setTransform(this._transform3D);\r\n\t\tthis._renderElement.setGeometry(ScreenQuad.instance);\r\n\t\tthis._renderElement._renderElementOBJ.isRender = true;\r\n\t\tthis._texture_size = new Vector4();\r\n\t}\r\n\r\n\t/**\r\n\t * @en The shader data for the command.\r\n\t * @zh 命令的着色器数据。\r\n\t */\r\n\tset shaderData(value: ShaderData) {\r\n\t\tthis._shaderData = value || BlitFrameBufferCMD.shaderdata;\r\n\t\tthis._renderElement._renderElementOBJ.materialShaderData = this._shaderData;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Set the shader, sub-shader, and shader data for the command.\r\n\t * @param shader The shader to set. If null, uses the default screen shader.\r\n\t * @param subShader The sub-shader index. Default is 0.\r\n\t * @param shaderData The shader data to set.\r\n\t * @zh 设置命令的着色器、子着色器和着色器数据。\r\n\t * @param shader 要设置的着色器。如果为 null，则使用默认屏幕着色器。\r\n\t * @param subShader 子着色器索引。默认为 0。\r\n\t * @param shaderData 要设置的着色器数据。\r\n\t */\r\n\tsetshader(shader: Shader3D, subShader: number, shaderData: ShaderData) {\r\n\t\tthis._shader = shader || Command._screenShader;\r\n\t\tthis._subShader = subShader || 0;\r\n\t\tthis.shaderData = shaderData;\r\n\t\tthis._renderElement.renderSubShader = this._shader.getSubShaderAt(this._subShader);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Execute the render command.\r\n\t * @zh 执行渲染命令。\r\n\t */\r\n\trun(): void {\r\n\t\tif (!this._source || !this._viewPort)\r\n\t\t\treturn;\r\n\t\tvar source = this._source;\r\n\t\tvar dest = this._dest;\r\n\t\tvar shaderData: ShaderData = this._shaderData;\r\n\t\tlet context = RenderContext3D._instance;\r\n\r\n\t\tvar viewport = this._viewPort;\r\n\t\tlet vph = RenderContext3D.clientHeight - viewport.y - viewport.height;\r\n\t\tif (LayaGL.renderEngine._screenInvertY) {\r\n\t\t\tcontext.changeViewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n\t\t\tcontext.changeScissor(viewport.x, viewport.y, viewport.width, viewport.height);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontext.changeViewport(viewport.x, vph, viewport.width, viewport.height);\r\n\t\t\tcontext.changeScissor(viewport.x, vph, viewport.width, viewport.height);\r\n\t\t}\r\n\t\tshaderData.setTexture(Command.SCREENTEXTURE_ID, source);\r\n\t\tshaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || BlitFrameBufferCMD._defaultOffsetScale);\r\n\t\tsource && (shaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._texture_size));\r\n\r\n\t\tif (dest) {\r\n\t\t\tshaderData.removeDefine(RenderContext3D.GammaCorrect);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tshaderData.addDefine(RenderContext3D.GammaCorrect);\r\n\t\t}\r\n\t\tthis._renderElement.setGeometry(ScreenQuad.InvertInstance);\r\n\t\tcontext.destTarget = dest;\r\n\t\tcontext._contextOBJ.cameraUpdateMask = Camera._updateMark;\r\n\t\tcontext.drawRenderElement(this._renderElement._renderElementOBJ);\r\n\r\n\t\tStat.blitDrawCall++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Recycle the command instance.\r\n\t * @zh 回收命令实例。\r\n\t */\r\n\trecover(): void {\r\n\t\tBlitFrameBufferCMD._pool.push(this);\r\n\t\tthis._source = null;\r\n\t\tthis._dest = null;\r\n\t\tthis._offsetScale = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._shaderData = null;\r\n\t\tthis._viewPort = null;\r\n\t}\r\n}","import { ISceneRenderManager } from \"../../../RenderDriver/DriverDesign/3DRenderPass/ISceneRenderManager\";\r\nimport { IBaseRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\n\r\n/**\r\n * @en The class is used to implement scene rendering node management.\r\n * @zh 该类用于实现场景渲染节点的管理。\r\n */\r\nexport class SceneRenderManager {\r\n    /**@internal */\r\n    protected _sceneManagerOBJ: ISceneRenderManager;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SceneRenderManager.\r\n     * @zh 创建一个 SceneRenderManager 的实例。\r\n     */\r\n    constructor() {\r\n        this._sceneManagerOBJ = Laya3DRender.Render3DPassFactory.createSceneRenderManager();\r\n    }\r\n\r\n    /**\r\n     * @en The render list.\r\n     * @zh 渲染列表。\r\n     */\r\n    get list(): SingletonList<BaseRender> {\r\n        return this._sceneManagerOBJ.list;\r\n    }\r\n\r\n    set list(value: SingletonList<BaseRender>) {\r\n        this._sceneManagerOBJ.list = value;\r\n    }\r\n\r\n    /**\r\n     * @en The base render list.\r\n     * @zh 基础渲染节点列表。\r\n     */\r\n    get renderBaselist(): SingletonList<IBaseRenderNode> {\r\n        return this._sceneManagerOBJ.baseRenderList;\r\n    }\r\n\r\n    /**\r\n     * @en Adds a render node to the manager.\r\n     * @param object The render object to add.\r\n     * @zh 向管理器添加渲染节点。\r\n     * @param object 要添加的渲染对象。\r\n     */\r\n    addRenderObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.addRenderObject(object);\r\n    }\r\n\r\n    /**\r\n     * @en Removes a render node from the manager.\r\n     * @param object The render object to remove.\r\n     * @zh 从管理器移除渲染节点。\r\n     * @param object 要移除的渲染对象。\r\n     */\r\n    removeRenderObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.removeRenderObject(object);\r\n    }\r\n\r\n    /**\r\n     * @en Removes a motion object from the manager.\r\n     * @param object The motion object to remove.\r\n     * @zh 从管理器移除运动对象。\r\n     * @param object 要移除的运动对象。\r\n     */\r\n    removeMotionObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.removeMotionObject(object);\r\n    }\r\n\r\n    /**\r\n     * @en Updates all motion render data.\r\n     * @zh 更新所有运动渲染数据。\r\n     */\r\n    updateMotionObjects(): void {\r\n        this._sceneManagerOBJ.updateMotionObjects();\r\n    }\r\n\r\n    /**\r\n     * @en Updates the scene render.\r\n     * @zh 更新场景渲染。\r\n     */\r\n    renderUpdate(): void {\r\n        var context: RenderContext3D = RenderContext3D._instance;\r\n        let lists = this._sceneManagerOBJ.list.elements;\r\n        for (let i = 0, n = this.list.length; i < n; i++) {\r\n            lists[i].renderUpdate(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Adds motion render data to the manager.\r\n     * @param object The motion render object to add.\r\n     * @zh 向管理器添加运动渲染数据。\r\n     * @param object 要添加的运动渲染对象。\r\n     */\r\n    addMotionObject(object: BaseRender): void {\r\n        this._sceneManagerOBJ.addMotionObject(object);\r\n    }\r\n\r\n    /**\r\n     * @en Destroys and cleans up the manager resources.\r\n     * @zh 销毁并清理管理器资源。\r\n     */\r\n    destroy(): void {\r\n        this._sceneManagerOBJ.destroy();\r\n    }\r\n\r\n}","import { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { UI3D } from \"./UI3D\";\r\n\r\n/**\r\n * @en UI3DManager calss is used to create 3D UI manager, which manages all 3D UI objects.\r\n * @zh UI3DManager 类用于创建3D-UI管理器，管理所有3D-UI对象。\r\n */\r\nexport class UI3DManager {\r\n\r\n    /**\r\n     * @en A list to store 3D UI elements.\r\n     * @zh 存储3D-UI元素的列表。\r\n     */\r\n    _UI3Dlist: FastSinglelist<UI3D> = new FastSinglelist<UI3D>();\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * @en Adds a 3D UI element to the manager.\r\n     * @param value The 3D UI element to add.\r\n     * @zh 向管理器添加一个3D-UI元素。\r\n     * @param value 要添加的3D-UI元素。\r\n     */\r\n    add(value: UI3D) {\r\n        this._UI3Dlist.add(value);\r\n    }\r\n\r\n    /**\r\n     * @en Removes a 3D UI element from the manager.\r\n     * @param value The 3D UI element to remove.\r\n     * @zh 从管理器中移除一个3D-UI元素。\r\n     * @param value 要移除的3D-UI元素。\r\n     */\r\n    remove(value: UI3D) {\r\n        this._UI3Dlist.remove(value);\r\n    }\r\n\r\n    /**\r\n     * @en Updates the 3D UI elements in the scene.\r\n     * @zh 更新场景中的3D-UI元素。\r\n     */\r\n    update() {\r\n        let elements = this._UI3Dlist.elements;\r\n        for (var i = 0, n = this._UI3Dlist.length; i < n; i++) {\r\n            elements[i]._submitRT();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Performs a ray cast to determine if there is a collision with any 3D UI elements.\r\n     * @param ray The ray for the ray casting.\r\n     * @returns The hit result or null if no collision occurs.\r\n     * @zh 执行射线投射以判断是否与任何3D-UI元素发生碰撞。\r\n     * @param ray 射线投射的射线。\r\n     * @returns 返回碰撞结果或如果没有碰撞发生则返回null。\r\n     */\r\n    rayCast(ray: Ray): any {\r\n        let rayOri = ray.origin;\r\n        this._UI3Dlist.clean();\r\n        //sort\r\n        this._UI3Dlist.elements.sort(\r\n            (a: UI3D, b: UI3D) => {\r\n                return a._getCameraDistance(rayOri) - b._getCameraDistance(rayOri);\r\n            }\r\n        );\r\n        let elements = this._UI3Dlist.elements;\r\n        for (var i = 0, n = this._UI3Dlist.length; i < n; i++) {\r\n            let hit = elements[i]._checkUIPos(ray);\r\n            if (hit) {//遮挡\r\n                return hit;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the 3D UI elements managed by the list.\r\n     * @zh 销毁列表中存储的3D-UI元素。\r\n     */\r\n    destory() {\r\n        this._UI3Dlist.destroy();\r\n    }\r\n}","import { Camera } from \"../Camera\"\r\nimport { CommandBuffer } from \"./command/CommandBuffer\"\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { ShaderData } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n/**\r\n * @en The `PostProcessRenderContext` class is used to create a post-processing rendering context.\r\n * @zh `PostProcessRenderContext` 类用于创建后期处理渲染上下文。\r\n */\r\nexport class PostProcessRenderContext {\r\n\t/**\r\n\t * @en The original RenderTexture that is rendered to initially. Do not modify this RT.\r\n\t * @zh 原始渲染 RenderTexture (RT)，禁止改变此 RT。\r\n\t */\r\n\tsource: RenderTexture | null = null;\r\n\t/** \r\n\t * @en forward effect target \r\n\t * @zh 上个后期处理的结果\r\n\t */\r\n\tindirectTarget:RenderTexture|null = null;\r\n\t/**\r\n\t * @en The RenderTexture where the processed result should be drawn to.\r\n\t * @zh 需要将处理后的结果画入此 RenderTexture。\r\n\t */\r\n\tdestination: RenderTexture | null = null;\r\n\t/**\r\n\t * @en The rendering camera.\r\n\t * @zh 渲染相机。\r\n\t */\r\n\tcamera: Camera | null = null;\r\n\t/**\r\n\t * @en The composite shader data.\r\n\t * @zh 合成着色器数据。\r\n\t */\r\n\tcompositeShaderData: ShaderData | null = null;\r\n\t/**\r\n\t * @en The post-processing command buffer.\r\n\t * @zh 后期处理指令流。\r\n\t */\r\n\tcommand: CommandBuffer | null = null;\r\n\t/**\r\n\t * @en Temporary texture array. You can put created textures here or select an RT to use from here to save memory.\r\n\t * @zh 临时纹理数组。可以将创建的纹理放入此数组，也可以从这里选取要用的 RT 来节省显存。\r\n\t */\r\n\tdeferredReleaseTextures: RenderTexture[] = [];\r\n\r\n\t/**\r\n\t * @en Selects an RT from recycled RTs to save memory.\r\n\t * @param width The width of the RenderTexture.\r\n\t * @param height The height of the RenderTexture.\r\n\t * @param colorFormat The color format of the RenderTexture.\r\n\t * @param depthFormat The depth format of the RenderTexture.\r\n\t * @param mipmap Whether to generate mipmaps.\r\n\t * @param multiSamples The number of multisamples.\r\n\t * @param depthTexture Whether to generate a depth texture.\r\n\t * @param sRGB Whether the RenderTexture is in sRGB color space.\r\n\t * @returns The selected RenderTexture or null if no match is found.\r\n\t * @zh 从回收的 RT 中选择一个 RT 用来节省内存。\r\n\t * @param width 纹理的宽度。\t\r\n\t * @param height 纹理的高度。\r\n\t * @param colorFormat 纹理的颜色格式。\r\n\t * @param depthFormat 纹理的深度格式。\r\n\t * @param mipmap 是否生成 mipmap。\r\n\t * @param multiSamples 多重采样数。\r\n\t * @param depthTexture 是否生成深度纹理。\r\n\t * @param sRGB 纹理是否在 sRGB 色彩空间。\r\n\t * @returns 选择到的 RenderTexture，如果没有匹配的，则返回 null。\r\n\t */\r\n\tcreateRTByContextReleaseTexture(width: number, height: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, mipmap: boolean = false, multiSamples: number = 1, depthTexture: boolean = false, sRGB: boolean = false){\r\n\t\tlet n =this.deferredReleaseTextures.length\r\n\t\tfor (let index = 0; index <n ; index++) {\r\n\t\t\tlet rt = this.deferredReleaseTextures[index];\r\n\t\t\tif (rt.width == width && rt.height == height && rt.colorFormat == colorFormat && rt.depthStencilFormat == depthFormat && rt._generateMipmap == mipmap && rt.multiSamples == multiSamples && rt.generateDepthTexture == depthTexture && rt._gammaSpace == sRGB) {\r\n\t\t\t\trt._inPool = false;\r\n\t\t\t\tlet end = this.deferredReleaseTextures[n - 1];\r\n\t\t\t\tthis.deferredReleaseTextures[index] = end;\r\n\t\t\t\tthis.deferredReleaseTextures.length -= 1;\r\n\t\t\t\treturn rt;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PostProcess } from \"../../component/PostProcess\";\r\nimport { PostProcessRenderContext } from \"./PostProcessRenderContext\";\r\n/**\r\n * @en Used to create post-processing rendering effects.\r\n * @zh 后期处理渲染效果的基类。\r\n */\r\nexport class PostProcessEffect {\r\n\r\n\t/**@internal */\r\n\tprotected _active: boolean;\r\n\t/**@internal */\r\n\tprotected _singleton: boolean;\r\n\r\n\t/**\r\n\t * @ignore \r\n\t * @en constructor, initialize instance.\r\n\t * @zh 构造函数, 初始化实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._active = true;\r\n\t\tthis._singleton = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Whether only one instance of the effect can be added.\r\n\t * @zh 是否只能添加一个效果实例。\r\n\t */\r\n\tget singleton() {\r\n\t\treturn this._singleton;\r\n\t}\r\n\tset singleton(value: boolean) {\r\n\t\tthis._singleton = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the effect is enabled.\r\n\t * @zh 效果是否开启。\r\n\t */\r\n\tget active() {\r\n\t\treturn this._active;\r\n\t}\r\n\r\n\tset active(value: boolean) {\r\n\t\tthis._active = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Gets the camera depth texture mode flag based on post-processing settings.\r\n\t * @zh 根据后期处理设置获取摄像机深度纹理模式标志。\r\n\t */\r\n\tgetCameraDepthTextureModeFlag?() {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Called when added to the post-processing stack.\r\n\t * @param postprocess The post-processing component.\r\n\t * @zh 在添加到后期处理栈时调用。\r\n\t * @param postprocess 后期处理组件。\r\n\t */\r\n\teffectInit?(postprocess: PostProcess) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Releases the effect.\r\n\t * @param postprocess The post-processing component.\r\n\t * @zh 释放效果。\r\n\t * @param postprocess 后期处理组件。\r\n\t */\r\n\trelease?(postprocess: PostProcess) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Renders the effect.\r\n\t * @param context The post-processing rendering context.\r\n\t * @zh 渲染效果。\r\n\t * @param context 后期处理渲染上下文。\r\n\t */\r\n\trender?(context: PostProcessRenderContext): void {\r\n\r\n\t}\r\n}\r\n\r\n\r\n","#define SHADER_NAME BlitVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\r\n\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n}","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport BlitVS from \"../../../../d3/shader/postprocess/BlitScreen.vs\";\r\nimport BlitLUTShader from \"../../../../d3/shader/postprocess/BlitLUTScreen.fs\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { PostProcess } from \"../../../component/PostProcess\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { ShaderDefine } from \"../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { ShaderData, ShaderDataType } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { RenderState } from \"../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\nexport enum ToneMappingType {\r\n\tNone,\r\n\tACES\r\n}\r\n\r\n/**\r\n * @en Class of ColorGradEffect used to create tone mapping effect.\r\n * @zh ColorGradEffect 类用于创建调色效果\r\n */\r\nexport class ColorGradEffect extends PostProcessEffect {\r\n\t/**\r\n\t * @internal\r\n\t * @en ACES macro\r\n\t * @zh ACES宏\r\n\t */\r\n\tstatic SHADERDEFINE_ACES: ShaderDefine;\r\n\t/**\r\n\t * @internal\r\n\t * @en Custom LUT macro\r\n\t * @zh 自定义LUT宏\r\n\t */\r\n\tstatic SHADERDEFINE_CUSTOMLUT: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_LUT: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_LUTPARAMS: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_CUSTOMLUT: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_CUSTOMLUTPARAMS: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Initialize shader configurations and rendering state settings.\r\n\t * @zh 初始化着色器配置和渲染状态设置。\r\n\t */\r\n\tstatic init() {\r\n\t\tColorGradEffect.__initDefine__();\r\n\t\tlet attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n\t\t\t\"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n\t\t};\r\n\r\n\t\tlet uniformMap = {\r\n\t\t\t\"u_OffsetScale\": ShaderDataType.Vector4,\r\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n\t\t};\r\n\t\tlet shader = Shader3D.add(\"blitLUTShader\");\r\n\t\tshader.shaderType = ShaderFeatureType.PostProcess;\r\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tlet pass = subShader.addShaderPass(BlitVS, BlitLUTShader);\r\n\t\tpass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\tpass.renderState.depthWrite = false;\r\n\t\tpass.renderState.cull = RenderState.CULL_NONE;\r\n\t\tpass.renderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Initialize shader definitions.\r\n\t * @zh 初始化着色器定义。\r\n\t */\r\n\tstatic __initDefine__() {\r\n\t\tColorGradEffect.SHADERDEFINE_ACES = Shader3D.getDefineByName(\"ACES\");\r\n\t\tColorGradEffect.SHADERDEFINE_CUSTOMLUT = Shader3D.getDefineByName(\"CUSTOMLUT\");\r\n\r\n\r\n\t\tColorGradEffect.SHADERVALUE_LUT = Shader3D.propertyNameToID(\"u_Lut\");\r\n\t\tColorGradEffect.SHADERVALUE_LUTPARAMS = Shader3D.propertyNameToID(\"u_LutParams\");\r\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUT = Shader3D.propertyNameToID(\"u_CustomLut\");\r\n\t\tColorGradEffect.SHADERVALUE_CUSTOMLUTPARAMS = Shader3D.propertyNameToID(\"u_CustomLutParams\");\r\n\t}\r\n\r\n\tprivate _needBuildLUT: boolean = false;\r\n\r\n\t/**@internal */\r\n\t_lutTex: RenderTexture;\r\n\tprivate _lutBuilderMat = new Material();\r\n\r\n\r\n\tprivate _LUTShader: Shader3D;\r\n\tprivate _lutShaderData: ShaderData;\r\n\tprivate _blitlutParams: Vector4;\r\n\r\n\t/**color Tone */\r\n\t/**@internal */\r\n\tprivate _toneMapping: ToneMappingType;\r\n\t/**@internal lut height size */\r\n\tprivate _lutSize = 32;\r\n\r\n\t// split toning\r\n\t/**@internal */\r\n\tprivate _enableSplitTone: boolean = false;\r\n\tprivate _splitShadow: Vector3 = new Vector3(0.5, 0.5, 0.5);\r\n\tprivate _splitBalance: number = 0;//-1-1\r\n\tprivate _splithighlights: Vector3 = new Vector3(0.5, 0.5, 0.5);\r\n\tprivate _u_SplitShadow: Vector4 = new Vector4(0, 0, 0);\r\n\r\n\t// shadows, midtones, highlights\r\n\tprivate _enableSMH: boolean = false;\r\n\t/**@internal */\r\n\tprivate _shadows: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _midtones: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _highlights: Vector3 = new Vector3(1, 1, 1);//0-5\r\n\t/**@internal */\r\n\tprivate _limits: Vector4 = new Vector4(0, 0.33, 0.55, 1);\r\n\r\n\t//lift gamma gain\r\n\tprivate _enableLiftGammaGain: boolean = false;\r\n\t/**@internal */\r\n\tprivate _lift: Vector3 = new Vector3(0, 0, 0);//-1-1\r\n\t/**@internal */\r\n\tprivate _gamma: Vector3 = new Vector3(1, 1, 1);//999-0.5\r\n\t/**@internal */\r\n\tprivate _gain: Vector3 = new Vector3(1, 1, 1);//0-2\r\n\r\n\t//white balance\r\n\tprivate _enableBalance: boolean = false;\r\n\t/**@internal tint,temperature */\r\n\tprivate _balance: Vector3 = new Vector3();\r\n\tprivate _tint: number = 0;//-100-100\r\n\tprivate _temperature: number = 0;//-100-1\r\n\r\n\t//Color Adjustments\r\n\t/**@internal */\r\n\tprivate _enableColorAdjust: boolean = false;\r\n\t/**@internal 自动曝光,默认值是1 */\r\n\tprivate _postExposure = 1;\r\n\t/**@internal */\r\n\tprivate _contrast = 1;//range 0-2//对比度HueSatCon.z\r\n\t/**@internal */\r\n\tprivate _colorFilter = new Color(1, 1, 1);//正片叠底\r\n\t/**@internal */\r\n\tprivate _HueShift = 0;//-0.5-0.5 色相HueSatCon.x\r\n\r\n\t/**@internal */\r\n\tprivate _saturation = 1;//0-2饱和度HueSatCon.y\r\n\r\n\t/**@internal _HueShift,_saturation,_contrast*/\r\n\tprivate _HueSatCon: Vector4 = new Vector4(0, 1, 1, 0);\r\n\r\n\t/**\r\n\t * @en the tone mapping type.\r\n\t * @zh 色调映射类型\r\n\t */\r\n\tpublic get toneMapping(): ToneMappingType {\r\n\t\treturn this._toneMapping;\r\n\t}\r\n\r\n\tpublic set toneMapping(value: ToneMappingType) {\r\n\t\tif (value == this._toneMapping)\r\n\t\t\treturn\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._toneMapping = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether split tone effect is enabled.\r\n\t * @zh 是否启用分离色调效果。\r\n\t */\r\n\tpublic get enableSplitTone() {\r\n\t\treturn this._enableSplitTone;\r\n\t}\r\n\r\n\tpublic set enableSplitTone(value: boolean) {\r\n\t\tthis._enableSplitTone = value;\r\n\t\tthis._needBuildLUT = true;\r\n\t}\r\n\r\n\t/**\r\n   * @en The color of shadows in split tone effect.\r\n   * @zh 分离色调效果中阴影的颜色。\r\n   */\r\n\tpublic get splitShadow(): Vector3 {\r\n\t\treturn this._splitShadow;\r\n\t}\r\n\r\n\tpublic set splitShadow(value: Vector3) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._splitShadow);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The color of highlights in split tone effect.\r\n\t * @zh 分离色调效果中高光的颜色。\r\n\t */\r\n\tpublic get splithighlights(): Vector3 {\r\n\t\treturn this._splithighlights;\r\n\t}\r\n\tpublic set splithighlights(value: Vector3) {\r\n\t\tif (this._splithighlights.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._splithighlights);\r\n\t}\r\n\r\n\t/**\r\n\t* @en The balance between shadow and highlight coloring in split tone effect.\r\n\t* @zh 分离色调效果中阴影和高光着色的平衡。\r\n\t*/\r\n\tpublic get splitBalance(): number {\r\n\t\treturn this._splitBalance;\r\n\t}\r\n\r\n\tpublic set splitBalance(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._splitBalance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en wheather to enable shadows, midtones, highlights \r\n\t * @zh 是否启用阴影，中亮，高亮调节\r\n\t */\r\n\tpublic get enableSMH(): boolean {\r\n\t\treturn this._enableSMH;\r\n\t}\r\n\r\n\tpublic set enableSMH(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableSMH = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Shadows value, range 0-5.\r\n\t * @zh 阴影值，取值范围0-5\r\n\t */\r\n\tpublic get shadows(): Vector3 {\r\n\t\treturn this._shadows;\r\n\t}\r\n\r\n\tpublic set shadows(value: Vector3) {\r\n\t\tif (this._shadows.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._shadows);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Midtones value, range 0-5.\r\n\t * @zh 中亮值，取值范围0-5\r\n\t */\r\n\tpublic get midtones(): Vector3 {\r\n\t\treturn this._midtones;\r\n\t}\r\n\tpublic set midtones(value: Vector3) {\r\n\t\tif (this._midtones.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._midtones);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Highlights value, range 0-5.\r\n\t * @zh 高亮值，取值范围0-5\r\n\t */\r\n\tpublic get highlights(): Vector3 {\r\n\t\treturn this._highlights;\r\n\t}\r\n\tpublic set highlights(value: Vector3) {\r\n\t\tif (this._highlights.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._highlights);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Shadow limit start 0-1\r\n\t * @zh 阴影限界起点，取值范围0-1\r\n\t */\r\n\tpublic get shadowLimitStart(): number {\r\n\t\treturn this._limits.x;\r\n\t}\r\n\r\n\tpublic set shadowLimitStart(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.x = Math.min(value, this.shadowLimitEnd);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Shadow limit end 0-1\r\n\t * @zh 阴影限界终点，取值范围0-1\r\n\t */\r\n\tpublic get shadowLimitEnd(): number {\r\n\t\treturn this._limits.y;\r\n\t}\r\n\r\n\tpublic set shadowLimitEnd(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.y = Math.max(value, this.shadowLimitStart);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en HighLight limit start 0-1\r\n\t * @zh 高光限界起点，取值范围0-1\r\n\t */\r\n\tpublic get highLightLimitStart(): number {\r\n\t\treturn this._limits.z;\r\n\t}\r\n\r\n\tpublic set highLightLimitStart(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.z = Math.min(value, this.highLightLimitEnd);\r\n\t}\r\n\r\n\t/**\r\n\t * @en HighLight limit end 0-1\r\n\t * @zh 高光限界终点，取值范围0-1\r\n\t */\r\n\tpublic get highLightLimitEnd(): number {\r\n\t\treturn this._limits.w;\r\n\t}\r\n\r\n\tpublic set highLightLimitEnd(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._limits.w = Math.max(this.highLightLimitStart, value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Whether lift, gamma, gain adjustments are enabled.\r\n\t * @zh 是否启用暗部、中间调、亮部调整。\r\n\t */\r\n\tpublic get enableLiftGammaGain() {\r\n\t\treturn this._enableLiftGammaGain;\r\n\t}\r\n\r\n\tpublic set enableLiftGammaGain(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableLiftGammaGain = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The lift adjustment value. Primarily affects the shadow areas of the image, with a range of -1-1.\r\n\t * @zh 暗部调整值。主要影响图像的阴影区域，范围 -1-1\r\n\t */\r\n\tpublic get lift(): Vector3 {\r\n\t\treturn this._lift;\r\n\t}\r\n\r\n\tpublic set lift(value: Vector3) {\r\n\t\tif (this.lift.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._lift);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en The gamma adjustment value. Affects the midtones of the image, but also influences shadows and highlights. with a range of 999-0.5.\r\n\t * @zh 中间调调整值。影响图像的中间调，范围 999-0.5\r\n\t */\r\n\tpublic get gamma(): Vector3 {\r\n\t\treturn this._gamma;\r\n\t}\r\n\r\n\tpublic set gamma(value: Vector3) {\r\n\t\tif (this._gamma.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._gamma);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gain adjustment value. Primarily affects the highlight areas of the image, with a range of 0-2.\r\n\t * @zh 亮部调整值。主要影响图像的高光区域，范围 0-2\r\n\t */\r\n\tpublic get gain(): Vector3 {\r\n\t\treturn this._gain;\r\n\t}\r\n\r\n\tpublic set gain(value: Vector3) {\r\n\t\tif (this._gain.equal(value))\r\n\t\t\treturn;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._gain);\r\n\t}\r\n\r\n\tprivate _StandardIlluminantY(x: number) {\r\n\t\treturn 2.87 * x - 3 * x * x - 0.27509507;\r\n\t};\r\n\r\n\tprivate _CIExyToLMS(x: number, y: number) {\r\n\t\tlet Y = 1;\r\n\t\tlet X = Y * x / y;\r\n\t\tlet Z = Y * (1 - x - y) / y;\r\n\r\n\t\tlet L = 0.7328 * X + 0.4296 * Y - 0.1624 * Z;\r\n\t\tlet M = -0.7036 * X + 1.6975 * Y + 0.0061 * Z;\r\n\t\tlet S = 0.0030 * X + 0.0136 * Y + 0.9834 * Z;\r\n\r\n\t\treturn new Vector3(L, M, S);\r\n\t}\r\n\r\n\t// Converts white balancing parameter to LMS coefficients.\r\n\tprivate _ColorBalanceToLMSCoeffs(temperature: number, tint: number) {\r\n\r\n\t\t// Range ~[-1.5;1.5] works best\r\n\t\tlet t1 = temperature / 65.0;\r\n\t\tlet t2 = tint / 65.0;\r\n\r\n\t\t// Get the CIE xy chromaticity of the reference white point.\r\n\t\t// Note: 0.31271 = x value on the D65 white point\r\n\t\tlet x = 0.31271 - t1 * (t1 < 0 ? 0.1 : 0.05);\r\n\t\tlet y = this._StandardIlluminantY(x) + t2 * 0.05;\r\n\r\n\t\t// Calculate the coefficients in the LMS space.\r\n\t\tlet w1 = new Vector3(0.949237, 1.03542, 1.08728);\r\n\t\tlet w2 = this._CIExyToLMS(x, y);\r\n\r\n\t\tthis._balance.set(w1.x / w2.x, w1.y / w2.y, w1.z / w2.z);\r\n\t}\r\n\r\n\t/**\r\n\t * @zh Wheather to enable white balance.\r\n\t * @zh 白平衡是否开启\r\n\t */\r\n\tpublic get enableBalance() {\r\n\t\treturn this._enableBalance;\r\n\t}\r\n\r\n\tpublic set enableBalance(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableBalance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Controls the white balance color to compensate for a green or magenta tint. Range -100-100.\r\n\t * @zh 白平衡颜色，用于补偿绿色或品红色。范围 -100-100。\r\n\t */\r\n\tpublic get tint(): number {\r\n\t\treturn this._tint;\r\n\t}\r\n\r\n\r\n\tpublic set tint(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._tint = value;\r\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\r\n\t}\r\n\r\n\t/**\r\n\t * @en White Balance Temperature. Range -100-100.\r\n\t * @zh 白平衡色温。范围 -100-100.\r\n\t */\r\n\tpublic get temperature(): number {\r\n\t\treturn this._temperature;\r\n\t}\r\n\r\n\tpublic set temperature(value: number) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._temperature = value;\r\n\t\tthis._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether color adjust is enabled.\r\n\t * @zh 是否开启颜色调整\r\n\t */\r\n\tpublic get enableColorAdjust() {\r\n\t\treturn this._enableColorAdjust;\r\n\t}\r\n\r\n\tpublic set enableColorAdjust(value: boolean) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._enableColorAdjust = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The overall exposure of the scene.\r\n\t * @zh 场景的整体曝光\r\n\t */\r\n\tpublic get postExposure() {\r\n\t\treturn this._postExposure;\r\n\t}\r\n\r\n\tpublic set postExposure(value) {\r\n\t\tthis._postExposure = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Color Contrast. Range 0-2.\r\n\t * @zh 颜色对比度，范围 0-2\r\n\t */\r\n\tpublic get contrast() {\r\n\t\treturn this._contrast;\r\n\t}\r\n\r\n\tpublic set contrast(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._contrast = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The color filter.\r\n\t * @zh 颜色过滤器\r\n\t */\r\n\tpublic get colorFilter() {\r\n\t\treturn this._colorFilter;\r\n\t}\r\n\r\n\tpublic set colorFilter(value: Color) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tvalue.cloneTo(this._colorFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The Hue Shift. Range -0.5-0.5.\r\n\t * @zh 色相偏移，范围 -0.5-0.5\r\n\t */\r\n\tpublic get HueShift() {\r\n\t\treturn this._HueShift;\r\n\t}\r\n\tpublic set HueShift(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._HueShift = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Saturation. \r\n\t * @zh 饱和度\r\n\t */\r\n\tpublic get saturation() {\r\n\t\treturn this._saturation;\r\n\t}\r\n\tpublic set saturation(value) {\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._saturation = value;\r\n\t}\r\n\r\n\r\n\t/** \r\n\t * @en initialize the color grad effect instance.\r\n\t * @zh 初始化调色效果实例\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.singleton = true;\r\n\t\tthis.active = true;\r\n\t\tthis._needBuildLUT = true;\r\n\t\tthis._toneMapping = ToneMappingType.None;\r\n\t\tthis._blitlutParams = new Vector4();\r\n\t\tthis._lutShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\t\tthis.lutSize = 32;\r\n\t\tthis._lutBuilderMat = new Material();\r\n\t}\r\n\r\n\r\n\r\n\tprivate get lutSize() {\r\n\t\treturn this._lutSize;\r\n\t}\r\n\tprivate set lutSize(value) {\r\n\t\tif (value > 32)//64*6 = 4096\r\n\t\t\treturn\r\n\t\tthis._lutSize = value;\r\n\t\tif (this._lutTex)\r\n\t\t\tthis._lutTex.destroy();\r\n\t\tthis._lutTex = new RenderTexture(this._lutSize * this._lutSize, this._lutSize, RenderTargetFormat.R16G16B16A16, null, false, 1, false, false);\r\n\t\tthis._lutTex.anisoLevel = 1;\r\n\t\tthis._lutTex.wrapModeU = WrapMode.Clamp;\r\n\t\tthis._lutTex.wrapModeV = WrapMode.Clamp;\r\n\t\tthis._lutTex.filterMode = FilterMode.Bilinear;\r\n\t}\r\n\r\n\r\n\r\n\tprivate default_balance = new Vector3(1, 1, 1);\r\n\tprivate default_splitShadow = new Vector4(0.5, 0.5, 0.5, 0.0);\r\n\tprivate default_splithighlights = new Vector3(0.5, 0.5, 0.5);\r\n\tprivate default_shadow = new Vector3(1, 1, 1);\r\n\tprivate default_midtones = new Vector3(1, 1, 1);\r\n\tprivate default_highlight = new Vector3(1, 1, 1);\r\n\tprivate default_limint = new Vector4(0.0, 0.3, 0.55, 1.0);\r\n\tprivate default_lift = new Vector3(0, 0, 0);\r\n\tprivate default_gamma = new Vector3(1, 1, 1);\r\n\tprivate default_gain = new Vector3(1, 1, 1);\r\n\tprivate default_ColorFilter = new Color(1, 1, 1, 1);\r\n\tprivate default_HueSatCon = new Vector4(0, 1, 1, 0);\r\n\t/**\r\n\t * @internal\r\n\t * 生成LUT纹理\r\n\t */\r\n\t_buildLUT() {\r\n\t\tif (!this._needBuildLUT)\r\n\t\t\treturn;\r\n\t\tlet lutHeight = this.lutSize;\r\n\t\tlet lutWidth = this.lutSize * this.lutSize;\r\n\t\tlet lutParams = new Vector4(lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeight / (lutHeight - 1));\r\n\t\tthis._lutBuilderMat.setVector4(\"u_LutParams\", lutParams);\r\n\r\n\t\tif (this.enableBalance) {\r\n\t\t\tthis._ColorBalanceToLMSCoeffs(this.temperature, this.tint);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this._balance);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_ColorBalance\", this.default_balance);\r\n\t\t}\r\n\r\n\t\tif (this.enableSplitTone) {\r\n\t\t\tthis._u_SplitShadow.setValue(this._splitShadow.x, this._splitShadow.y, this._splitShadow.z, this.splitBalance);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this._u_SplitShadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this._splithighlights);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_SplitShadows\", this.default_splitShadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Splithighlights\", this.default_splithighlights);\r\n\t\t}\r\n\r\n\t\tif (this.enableSMH) {\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this._shadows);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this._midtones);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this._highlights);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this._limits);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Shadows\", this.default_shadow);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Midtones\", this.default_midtones);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Highlights\", this.default_highlight);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_Limits\", this.default_limint);\r\n\t\t}\r\n\t\tif (this._enableLiftGammaGain) {\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this._lift);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this._gamma);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this._gain);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Lift\", this.default_lift);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gamma\", this.default_gamma);\r\n\t\t\tthis._lutBuilderMat.setVector3(\"u_Gain\", this.default_gain);\r\n\t\t}\r\n\t\tif (this.enableColorAdjust) {\r\n\t\t\t//_HueShift,_saturation,_contrast\r\n\t\t\tthis._HueSatCon.setValue(this._HueShift, this.saturation, this._contrast, 0.0);\r\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\", this._colorFilter);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\", this._HueSatCon);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.setColor(\"u_ColorFilter\", this.default_ColorFilter);\r\n\t\t\tthis._lutBuilderMat.setVector4(\"u_HueSatCon\", this.default_HueSatCon);\r\n\t\t}\r\n\r\n\r\n\r\n\t\tif (this._toneMapping == ToneMappingType.ACES) {\r\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_ACES);\r\n\t\t} else {\r\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_ACES);\r\n\t\t}\r\n\t\tthis._postProcess._context.command.blitScreenQuadByMaterial(Texture2D.whiteTexture, this._lutTex, null, this._lutBuilderMat);\r\n\t}\r\n\tprivate _postProcess: PostProcess\r\n\r\n\t/**\r\n\t * @en Called when added to the post-processing stack.\r\n\t * @param postprocess The post-processing node.\r\n\t * @zh 在添加到后期处理栈时调用。\r\n\t * @param postprocess 后期处理节点。\r\n\t */\r\n\teffectInit(postprocess: PostProcess) {\r\n\t\tsuper.effectInit(postprocess);\r\n\t\tthis._lutBuilderMat.setShaderName(\"LUTBuilder\");\r\n\t\tthis._LUTShader = Shader3D.find(\"blitLUTShader\");\r\n\t\tpostprocess._enableColorGrad = true;\r\n\t\tpostprocess._ColorGradEffect = this;\r\n\t\tthis._postProcess = postprocess;\r\n\t\t// this._shader = Shader3D.find(\"PostProcessBloom\");\r\n\t\t// this._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Release the Effect.\r\n\t * @param postprocess The post-processing node.\r\n\t * @zh 释放Effect。\r\n\t * @param postprocess 后期处理节点。\r\n\t */\r\n\trelease(postprocess: PostProcess) {\r\n\t\tsuper.release(postprocess);\r\n\t\tpostprocess._enableColorGrad = false;\r\n\t\tpostprocess._ColorGradEffect = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t * @en Render the effect.\r\n\t * @param context The post-processing rendering context.\r\n\t * @zh 渲染效果。\r\n\t * @param context 后期处理渲染上下文。\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\t\tlet cmd: CommandBuffer = context.command;\r\n\t\tlet source: RenderTexture = context.indirectTarget;\r\n\t\tif (true) {\r\n\t\t\tthis._blitlutParams.setValue(1 / this._lutTex.width, 1 / this._lutTex.height, this._lutTex.height - 1, this.enableColorAdjust ? this._postExposure : 1);\r\n\t\t\tthis._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\r\n\t\t\tthis._lutShaderData.setTexture(ColorGradEffect.SHADERVALUE_LUT, this._lutTex);\r\n\t\t\tthis._lutShaderData.setVector(ColorGradEffect.SHADERVALUE_LUTPARAMS, this._blitlutParams);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//TODO:CustomLUT\r\n\t\t\tthis._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\r\n\r\n\t\t}\r\n\t\tcmd.blitScreenTriangle(source, context.destination, null, this._LUTShader, this._lutShaderData);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","/**\r\n * @en PBR material rendering quality.\r\n * @zh PBR材质渲染质量。\r\n */\r\nexport enum PBRRenderQuality {\r\n    /**\r\n     * @en High quality.\r\n     * @zh 高质量。\r\n     */\r\n    High,\r\n    /**\r\n     * @en Low quality.\r\n     * @zh 低质量\r\n     */\r\n    Low\r\n}","#define SHADER_NAME BlitLUTFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"ColorGrading.glsl\";\r\n#include \"LUT.glsl\";\r\n\r\nuniform sampler2D u_Lut;\r\nuniform vec4 u_LutParams; // w postExposure\r\n\r\n#ifdef CUSTOMLUT\r\nuniform sampler2D u_CustomLut;\r\nuniform vec4 u_CustomLutParams;\r\n#endif // CUSTOMLUT\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    gl_FragColor = gammaToLinear(gl_FragColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec3 color = gl_FragColor.rgb;\r\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\r\n    color *= u_LutParams.w;\r\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\r\n\r\n#ifdef CUSTOMLUT\r\n\r\n    float contrib = u_CustomLutParams.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\r\n    gamma = mix(gamma, userLut, contrib);\r\n    color = gammaToLinear(gamma);\r\n\r\n#endif // CUSTOMLUT\r\n\r\n    gl_FragColor.rgb = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Texture2D } from \"../../resource/Texture2D\"\r\nimport { Camera } from \"../core/Camera\"\r\nimport { CommandBuffer } from \"../core/render/command/CommandBuffer\"\r\nimport { PostProcessEffect } from \"../core/render/PostProcessEffect\"\r\nimport { PostProcessRenderContext } from \"../core/render/PostProcessRenderContext\"\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\"\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\"\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\"\r\nimport { DepthTextureMode, RenderTexture } from \"../../resource/RenderTexture\"\r\nimport { ColorGradEffect } from \"../core/render/PostEffect/ColorGradEffect\"\r\nimport { LayaGL } from \"../../layagl/LayaGL\"\r\nimport { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\"\r\nimport { ShaderData } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\"\r\nimport { Vector4 } from \"../../maths/Vector4\"\r\nimport { Viewport } from \"../../maths/Viewport\"\r\n\r\n/**\r\n * @en The `PostProcess` class is used to create post-processing components.\r\n * @zh `PostProcess` 类用于创建后期处理组件。\r\n */\r\nexport class PostProcess {\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_BLOOM_LOW: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_BLOOM: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_FINALPASS: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_MAINTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOMTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_AUTOEXPOSURETEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_DIRTTEX: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOMTEX_TEXELSIZE: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_DIRTTILEOFFSET: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_SETTINGS: number;\r\n\r\n    /**@internal */\r\n    static SHADERVALUE_BLOOM_COLOR: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        PostProcess.SHADERDEFINE_BLOOM_LOW = Shader3D.getDefineByName(\"BLOOM_LOW\");\r\n        PostProcess.SHADERDEFINE_BLOOM = Shader3D.getDefineByName(\"BLOOM\");\r\n        PostProcess.SHADERDEFINE_FINALPASS = Shader3D.getDefineByName(\"FINALPASS\");\r\n        PostProcess.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\r\n        PostProcess.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n        PostProcess.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n        PostProcess.SHADERVALUE_BLOOM_DIRTTEX = Shader3D.propertyNameToID(\"u_Bloom_DirtTex\");\r\n        PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE = Shader3D.propertyNameToID(\"u_BloomTex_TexelSize\");\r\n        PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET = Shader3D.propertyNameToID(\"u_Bloom_DirtTileOffset\");\r\n        PostProcess.SHADERVALUE_BLOOM_SETTINGS = Shader3D.propertyNameToID(\"u_Bloom_Settings\");\r\n        PostProcess.SHADERVALUE_BLOOM_COLOR = Shader3D.propertyNameToID(\"u_Bloom_Color\");\r\n    }\r\n\r\n    /**@internal */\r\n    private _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\r\n\r\n    /**@internal */\r\n    private _compositeShaderData: ShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\r\n    /**@internal */\r\n    private _effects: PostProcessEffect[] = [];\r\n\r\n    /**@internal */\r\n    private _enable: boolean = true;\r\n\r\n    /**@internal */\r\n    private _depthtextureFlag: DepthTextureMode;\r\n    /**\r\n     * @internal \r\n     * @en Color Effect\r\n     * @zh 调色Effect\r\n     */\r\n    _ColorGradEffect: ColorGradEffect;\r\n    /**\r\n     * @internal\r\n     * @en Whether to enable the color effect.\r\n     * @zh 是否开启调色Effect\r\n     */\r\n    _enableColorGrad: boolean = false;\r\n\r\n    /**@internal */\r\n    _context: PostProcessRenderContext;\r\n\r\n    /**\r\n     * 重新计算CameraFlag\r\n     */\r\n    private recaculateCameraFlag() {\r\n        this._depthtextureFlag = DepthTextureMode.None;\r\n        let n = this.effects.length;\r\n        for (let i = 0; i < n; i++) {\r\n            this._depthtextureFlag |= this.effects[i].getCameraDepthTextureModeFlag();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a post-process effect.\r\n     * @zh 构造方法，添加后期处理效果。\r\n     */\r\n    constructor() {\r\n        this._context = new PostProcessRenderContext();\r\n        this._context.compositeShaderData = this._compositeShaderData;\r\n        this._context.command = new CommandBuffer();\r\n        this._depthtextureFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * @en The enable property of the post-process.\r\n     * @zh 启用后期处理。\r\n     */\r\n    get enable(): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    set enable(value: boolean) {\r\n        this._enable = value;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染状态\r\n     * @internal\r\n     */\r\n    set commandContext(oriContext: RenderContext3D) {\r\n        this._context.command._context = oriContext;\r\n    }\r\n\r\n    /**\r\n     * @en Set the array of post-process effects.IDE main\r\n     * @zh 设置后期处理效果数组。\r\n     */\r\n    get effects(): PostProcessEffect[] {\r\n        return this._effects;\r\n    }\r\n\r\n    set effects(value: PostProcessEffect[]) {\r\n        this.clearEffect();\r\n        for (var i = 0, n = value.length; i < n; i++) {\r\n            if (value[i])\r\n                this.addEffect(value[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The camera depth texture mode required for post-processing.\r\n     * @zh 后期处理所需的相机深度纹理模式。\r\n     */\r\n    get cameraDepthTextureMode() {\r\n        return this._depthtextureFlag;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    _init(camera: Camera): void {\r\n        this._context.camera = camera;\r\n        this._context.command!._camera = camera;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _render(camera: Camera): void {\r\n        this._init(camera);\r\n\r\n        let context = this._context;\r\n\r\n        var camera = context.camera;\r\n        var viewport: Viewport = camera.viewport;\r\n        var internalRT = camera._needInternalRenderTexture();\r\n        var cameraTarget: RenderTexture = !internalRT ? RenderTexture.createFromPool(camera._offScreenRenderTexture.width, camera._offScreenRenderTexture.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true) : camera._internalRenderTexture;\r\n        var screenTexture: RenderTexture = RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true);\r\n        var Indirect: RenderTexture[] = [RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true), RenderTexture.createFromPool(cameraTarget.width, cameraTarget.height, camera._getRenderTextureFormat(), RenderTargetFormat.None, false, 1, false, true)];\r\n        //var screenTexture: RenderTexture = cameraTarget;\r\n        context.command!.clear();\r\n        context.source = screenTexture;\r\n        context.indirectTarget = screenTexture;\r\n        context.destination = this._effects.length == 2 ? Indirect[0] : cameraTarget;\r\n        context.compositeShaderData!.clearDefine();\r\n\r\n        if (internalRT) {\r\n            context.command.blitScreenTriangle(camera._internalRenderTexture, screenTexture);\r\n        }\r\n        else {\r\n            context.command.blitScreenTriangle(camera._offScreenRenderTexture, screenTexture);\r\n        }\r\n\r\n        context.compositeShaderData!.setTexture(PostProcess.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);//TODO:\r\n        if (this._enableColorGrad) {\r\n            this._ColorGradEffect._buildLUT();\r\n        }\r\n        for (var i: number = 0, n: number = this._effects.length; i < n; i++) {\r\n            if (this._effects[i].active) {\r\n                this._effects[i].render(context);\r\n                if (i == n - 2) {//last effect:destination RenderTexture is CameraTarget\r\n                    context.indirectTarget = context.destination;\r\n                    context.destination = cameraTarget;\r\n                } else {\r\n                    context.indirectTarget = context.destination;\r\n                    context.destination = Indirect[(i + 1) % 2];\r\n                }\r\n            } else if (i == n - 1) {//兼容最后一个Effect Active为false\r\n                context.command.blitScreenTriangle(context.indirectTarget, cameraTarget);\r\n            }\r\n        }\r\n\r\n        this._compositeShaderData.addDefine(PostProcess.SHADERDEFINE_FINALPASS);\r\n\r\n        if (camera._offScreenRenderTexture) {\r\n            if (internalRT) {\r\n                context.destination = camera._offScreenRenderTexture;\r\n                var canvasWidth: number = camera._getCanvasWidth(), canvasHeight: number = camera._getCanvasHeight();\r\n                if (LayaGL.renderEngine._screenInvertY) {\r\n                    camera._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n                }\r\n                else {\r\n                    camera._screenOffsetScale.setValue(viewport.x / canvasWidth, 1.0 - viewport.y / canvasHeight, viewport.width / canvasWidth, -viewport.height / canvasHeight);\r\n                }\r\n                context.command!.blitScreenTriangle(cameraTarget, camera._offScreenRenderTexture, camera._screenOffsetScale, null, this._compositeShaderData, 0);\r\n            }\r\n        }\r\n\r\n        //释放临时纹理\r\n        if (internalRT) RenderTexture.recoverToPool(cameraTarget);\r\n        RenderTexture.recoverToPool(screenTexture);\r\n        RenderTexture.recoverToPool(Indirect[0]);\r\n        RenderTexture.recoverToPool(Indirect[1]);\r\n        var tempRenderTextures: RenderTexture[] = context.deferredReleaseTextures;\r\n        for (i = 0, n = tempRenderTextures.length; i < n; i++)\r\n            RenderTexture.recoverToPool(tempRenderTextures[i]);\r\n        tempRenderTextures.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Add a post-processing effect.\r\n     * @param effect The post-processing effect to add.\r\n     * @zh 添加后期处理效果。\r\n     * @param effect 后期处理效果\r\n     */\r\n    addEffect(effect: PostProcessEffect): void {\r\n        if (effect.singleton && this.getEffect((effect as any).constructor)) {\r\n            console.error(\"无法增加已经存在的Effect\");\r\n            return;\r\n        }\r\n        if (!this._enableColorGrad || effect instanceof ColorGradEffect) {\r\n            this._effects.push(effect);\r\n        } else {\r\n            this._effects.splice(this._effects.length - 1, 0, effect);\r\n        }\r\n\r\n        this.recaculateCameraFlag();\r\n        effect.effectInit(this);\r\n    }\r\n\r\n    /**\r\n     * @en Get a post-processing instance based on its type.\r\n     * @param classReg The registered post-processing class type.\r\n     * @returns The post-processing effect instance, or null if not found.\r\n     * @zh 根据类型获取后期处理实例。\r\n     * @param classReg 注册的后期处理类型\r\n     * @returns 后期处理效果实例，如果没有找到则返回null\r\n     */\r\n    getEffect(classReg: any): any {\r\n        let size: number = this._effects.length;\r\n        for (let i = 0; i < size; i++) {\r\n            let element = this._effects[i];\r\n            if (element instanceof classReg) {\r\n                return element;\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * @en Remove a post-processing effect.\r\n     * @param effect The post-processing effect to remove.\r\n     * @zh 移除后期处理效果。\r\n     * @param effect 后期处理效果\r\n     */\r\n    removeEffect(effect: PostProcessEffect): void {\r\n        var index: number = this._effects.indexOf(effect);\r\n        if (index !== -1) {\r\n            this._effects.splice(index, 1);\r\n            effect.release(this);\r\n            this.recaculateCameraFlag();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clear all post-processing effects.\r\n     * @zh 清理所有后期处理效果。\r\n     */\r\n    clearEffect(): void {\r\n        let i = this.effects.length - 1;\r\n        for (; i >= 0; i--) {\r\n            this.removeEffect(this.effects[i]);\r\n        }\r\n        this._effects.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Call the instruction set.\r\n     * @zh 调用指令集。\r\n     */\r\n    _applyPostProcessCommandBuffers(): void {\r\n        this._context.command!._apply();\r\n    }\r\n}\r\n\r\n\r\n","import { HDRTextureInfo } from \"../../../RenderEngine/HDRTextureInfo\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { WrapMode } from \"../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Base64Tool } from \"../../../utils/Base64Tool\";\r\n\r\n\r\nconst dfg_128 = \"\"\r\n\r\nconst RGBDMaxRange = 255;\r\n/**\r\n * @internal\r\n */\r\nexport class PBRDefaultDFG {\r\n\r\n    // todo 销毁\r\n    private static _defaultDFG: Texture2D;\r\n    public static get defaultDFG(): Texture2D {\r\n        return PBRDefaultDFG._defaultDFG;\r\n    }\r\n    public static set defaultDFG(value: Texture2D) {\r\n        PBRDefaultDFG._defaultDFG = value;\r\n    }\r\n\r\n    static DefaultDfgTexture() {\r\n        let hdrBuffer = Base64Tool.decode(dfg_128);\r\n        let hdrInfo = HDRTextureInfo.getHDRInfo(hdrBuffer);\r\n\r\n        let supportFloatTex = LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        let supportFloatLinearFiltering = LayaGL.renderEngine.getCapable(RenderCapable.Texture_FloatLinearFiltering);\r\n\r\n        let tex: Texture2D;\r\n\r\n        if (supportFloatTex && supportFloatLinearFiltering) {\r\n            tex = new Texture2D(hdrInfo.width, hdrInfo.height, hdrInfo.format, false, false, false);\r\n            tex.setHDRData(hdrInfo);\r\n        }\r\n        else {\r\n            tex = new Texture2D(hdrInfo.width, hdrInfo.height, TextureFormat.R8G8B8A8, false, false, false);\r\n\r\n            let pixelCount = hdrInfo.width * hdrInfo.height;\r\n            let hdrPixelData = <Float32Array>hdrInfo.readScanLine();\r\n            let rgbdPixelData = new Uint8Array(pixelCount * 4);\r\n\r\n            for (let index = 0; index < pixelCount; index++) {\r\n\r\n                let r = hdrPixelData[index * 4];\r\n                let g = hdrPixelData[index * 4 + 1];\r\n                let b = hdrPixelData[index * 4 + 2];\r\n\r\n                let maxRGB = Math.max(r, g, b, 1e-5);\r\n                let d = Math.max(1.0, RGBDMaxRange / maxRGB);\r\n                d = Math.min(1, Math.max(0, (d / 255)));\r\n\r\n                rgbdPixelData[index * 4] = Math.min(1, Math.max(0, (r * d))) * 255;\r\n                rgbdPixelData[index * 4 + 1] = Math.min(1, Math.max(0, (g * d))) * 255;\r\n                rgbdPixelData[index * 4 + 2] = Math.min(1, Math.max(0, (b * d))) * 255;\r\n                rgbdPixelData[index * 4 + 3] = d * 255;\r\n            }\r\n\r\n            tex.setPixelsData(rgbdPixelData, false, false);\r\n        }\r\n\r\n        tex.lock = true;\r\n        tex.wrapModeU = WrapMode.Clamp;\r\n        tex.wrapModeV = WrapMode.Clamp;\r\n        tex.anisoLevel = 1;\r\n\r\n        this._defaultDFG = tex;\r\n    }\r\n\r\n}","import { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport BRDFGLSL from \"./BRDF.glsl\";\r\nimport PBRGIGLSL from \"./pbrGI.glsl\";\r\n\r\nimport PBRCommonGLSL from \"./pbrCommon.glsl\";\r\nimport PBRVertexGLSL from \"./pbrVertex.glsl\";\r\nimport PBRFragGLSL from \"./pbrFrag.glsl\";\r\nimport PBRMetallicGLSL from \"./pbrMetallicFrag.glsl\";\r\nimport { PBRDefaultDFG } from \"./PBRDefaultDFG\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\nexport class PBRShaderLib {\r\n\r\n    /**\r\n     * emission\r\n     */\r\n    static DEFINE_EMISSION: ShaderDefine;\r\n\r\n    /**\r\n     * clear coat\r\n     */\r\n    static DEFINE_CLEARCOAT: ShaderDefine;\r\n    static DEFINE_CLEARCOAT_NORMAL: ShaderDefine;\r\n\r\n    /**\r\n     * anisotropy\r\n     */\r\n    static DEFINE_ANISOTROPY: ShaderDefine;\r\n\r\n    /**\r\n     * ior\r\n     */\r\n    static DEFINE_IOR: ShaderDefine;\r\n\r\n    /**\r\n     * iridescence\r\n     */\r\n    static DEFINE_IRIDESCENCE: ShaderDefine;\r\n\r\n    /**\r\n     * sheen\r\n     */\r\n    static DEFINE_SHEEN: ShaderDefine;\r\n\r\n    /**\r\n     * transmission\r\n     */\r\n    static DEFINE_TRANSMISSION: ShaderDefine;\r\n\r\n    /**\r\n     * thick / volume\r\n     */\r\n    static DEFINE_THICKNESS: ShaderDefine;\r\n\r\n    static init() {\r\n\r\n        PBRShaderLib.DEFINE_EMISSION = Shader3D.getDefineByName(\"EMISSION\");\r\n\r\n        PBRShaderLib.DEFINE_CLEARCOAT = Shader3D.getDefineByName(\"CLEARCOAT\");\r\n        PBRShaderLib.DEFINE_CLEARCOAT_NORMAL = Shader3D.getDefineByName(\"CLEARCOAT_NORMAL\");\r\n\r\n        PBRShaderLib.DEFINE_ANISOTROPY = Shader3D.getDefineByName(\"ANISOTROPIC\");\r\n\r\n        PBRShaderLib.DEFINE_IOR = Shader3D.getDefineByName(\"IOR\");\r\n\r\n        PBRShaderLib.DEFINE_IRIDESCENCE = Shader3D.getDefineByName(\"IRIDESCENCE\");\r\n\r\n        PBRShaderLib.DEFINE_SHEEN = Shader3D.getDefineByName(\"SHEEN\");\r\n\r\n        PBRShaderLib.DEFINE_TRANSMISSION = Shader3D.getDefineByName(\"TRANSMISSION\");\r\n\r\n        PBRShaderLib.DEFINE_THICKNESS = Shader3D.getDefineByName(\"THICKNESS\");\r\n\r\n        // pbr lib\r\n        Shader3D.addInclude(\"BRDF.glsl\", BRDFGLSL);\r\n        Shader3D.addInclude(\"PBRGI.glsl\", PBRGIGLSL);\r\n\r\n        Shader3D.addInclude(\"PBRCommon.glsl\", PBRCommonGLSL);\r\n        Shader3D.addInclude(\"PBRVertex.glsl\", PBRVertexGLSL);\r\n        Shader3D.addInclude(\"PBRFrag.glsl\", PBRFragGLSL);\r\n\r\n        PBRDefaultDFG.DefaultDfgTexture();\r\n        SubShader.regIncludeBindUnifrom(\"PBRGI.glsl\", { \"u_IBLDFG\": ShaderDataType.Texture2D }, { \"u_IBLDFG\": PBRDefaultDFG.defaultDFG });\r\n\r\n        Shader3D.addInclude(\"PBRMetallicFrag.glsl\", PBRMetallicGLSL);\r\n    }\r\n}","#if !defined(BRDF)\r\n    #define BRDF\r\n\r\n// Specular implementations\r\nfloat D_GGX(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    // todo 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n    vec3 NxH = cross(n, h);\r\n    float oneMinusNoHSquared = dot(NxH, NxH);\r\n    #else\r\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\r\n    #endif\r\n\r\n    float a = NoH * roughness;\r\n    float k = roughness / (oneMinusNoHSquared + a * a);\r\n    float d = k * k * INVERT_PI;\r\n\r\n    return saturateMediump(d);\r\n}\r\n\r\nfloat D_GGX_Anisotropic(float NoH, const vec3 h, const vec3 t, const vec3 b, float at, float ab)\r\n{\r\n    float ToH = dot(t, h);\r\n    float BoH = dot(b, h);\r\n    float a2 = at * ab;\r\n    highp vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\r\n    highp float v2 = dot(v, v);\r\n    float w2 = a2 / v2;\r\n    return a2 * w2 * w2 * INVERT_PI;\r\n}\r\n\r\nfloat D_Charlie(float roughness, float NoH)\r\n{\r\n    float invR = 1.0 / roughness;\r\n    float cos2h = NoH * NoH;\r\n    float sin2h = max(1.0 - cos2h, 0.0078125);\r\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) * 0.5 * INVERT_PI;\r\n}\r\n\r\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL)\r\n{\r\n    float a2 = roughness * roughness;\r\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\r\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n\r\n    return saturateMediump(v);\r\n}\r\n\r\nfloat V_SmithGGXCorrelated_Fast(float roughness, float NoV, float NoL)\r\n{\r\n    float v = 0.5 / mix(2.0 * NoL * NoV, NoL + NoV, roughness);\r\n    return saturateMediump(v);\r\n}\r\n\r\n// Kelemen 2001, \"A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling\"\r\nfloat V_kelemen(float LoH)\r\n{\r\n    return saturateMediump(0.25 / (LoH * LoH));\r\n}\r\n\r\nfloat lCharlieNumericHelper(float x, float alphaG)\r\n{\r\n    float oneMinusAlphaSq = (1.0 - alphaG) * (1.0 - alphaG);\r\n    float a = mix(21.5473, 25.3245, oneMinusAlphaSq);\r\n    float b = mix(3.82987, 3.32435, oneMinusAlphaSq);\r\n    float c = mix(0.19823, 0.16801, oneMinusAlphaSq);\r\n    float d = mix(-1.97760, -1.27393, oneMinusAlphaSq);\r\n    float e = mix(-4.32054, -4.85967, oneMinusAlphaSq);\r\n    return a / (1.0 + b * pow(x, c)) + d * x + e;\r\n}\r\n\r\nfloat lCharlie(float cosTheta, float alphaG)\r\n{\r\n    if (abs(cosTheta) < 0.5)\r\n\t{\r\n\t    return exp(lCharlieNumericHelper(cosTheta, alphaG));\r\n\t}\r\n    else\r\n\t{\r\n\t    return exp(2.0 * lCharlieNumericHelper(0.5, alphaG) - lCharlieNumericHelper(1.0 - cosTheta, alphaG));\r\n\t}\r\n}\r\n\r\nfloat V_Charlie(float NoL, float NoV, float roughness)\r\n{\r\n    float alphaG = roughness * roughness;\r\n    return clamp(1.0 / ((1.0 + lCharlie(NoV, alphaG) + lCharlie(NoL, alphaG)) * (4.0 * NoV * NoL)), 0.0, 1.0);\r\n}\r\n\r\n// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\r\nfloat V_Neubelt(float NoV, float NoL)\r\n{\r\n    return saturateMediump(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\r\n}\r\n\r\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)\r\n{\r\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\r\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n    return saturateMediump(v);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float VoH)\r\n{\r\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nfloat F_Schlick(float f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nfloat F_Schlick(float f0, float VoH)\r\n{\r\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, vec3 f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\n\r\n// CIE XYZ to REC.709\r\nconst mat3 XYZ_to_REC709_MAT = mat3(\r\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\r\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\r\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\r\n\r\nfloat IorToFresnel0(float iorT, float iorI)\r\n{\r\n    return pow2((iorT - iorI) / (iorT + iorI));\r\n}\r\n\r\nvec3 IorToFresnel0(vec3 iorT, float iorI)\r\n{\r\n    return pow2((iorT - vec3(iorI)) / (iorT + vec3(iorI)));\r\n}\r\n\r\n// air to surfaceR0 ior\r\nvec3 Fresnel0ToIor(vec3 f0)\r\n{\r\n    vec3 sqrtF0 = sqrt(f0);\r\n    return (1.0 + sqrtF0) / (1.0 - sqrtF0);\r\n}\r\n\r\nvec3 evalSensitivity(float OPD, vec3 shift)\r\n{\r\n    float phase = 2.0 * PI * OPD * 1.0e-9;\r\n    vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\r\n    vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\r\n    vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\r\n    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow2(phase) * var);\r\n    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow2(phase));\r\n    xyz /= 1.0685e-7;\r\n    vec3 srgb = XYZ_to_REC709_MAT * xyz;\r\n    return srgb;\r\n}\r\n\r\n// https://belcour.github.io/blog/research/publication/2017/05/01/brdf-thin-film.html\r\nvec3 evalIridescence(float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0)\r\n{\r\n    vec3 I;\r\n    float iridescenceIor = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\r\n\r\n    float sinTheta2Sq = pow2(outsideIOR / iridescenceIor) * (1.0 - pow2(cosTheta1));\r\n\r\n    float cosTheta2Sq = 1.0 - sinTheta2Sq;\r\n    if (cosTheta2Sq < 0.0)\r\n\t{\r\n\t    return vec3(1.0);\r\n\t}\r\n    float cosTheta2 = sqrt(cosTheta2Sq);\r\n\r\n    float R0 = IorToFresnel0(iridescenceIor, outsideIOR);\r\n    float R12 = F_Schlick(R0, cosTheta1);\r\n    float R21 = R12;\r\n    float T121 = 1.0 - R12;\r\n    float phi12 = 0.0;\r\n    if (iridescenceIor < outsideIOR)\r\n\tphi12 = PI;\r\n    float phi21 = PI - phi12;\r\n\r\n    vec3 baseIOR = Fresnel0ToIor(clamp(baseF0, 0.0, 0.9999));\r\n\r\n    vec3 R1 = IorToFresnel0(baseIOR, iridescenceIor);\r\n    vec3 R23 = F_Schlick(R1, cosTheta2);\r\n    vec3 phi23 = vec3(0.0);\r\n\r\n    if (baseIOR[0] < iridescenceIor)\r\n\tphi23[0] = PI;\r\n    if (baseIOR[1] < iridescenceIor)\r\n\tphi23[1] = PI;\r\n    if (baseIOR[2] < iridescenceIor)\r\n\tphi23[2] = PI;\r\n\r\n    float OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\r\n    vec3 phi = vec3(phi21) + phi23;\r\n\r\n    vec3 R123 = clamp(R12 * R23, 1e-5, 0.9999);\r\n    vec3 r123 = sqrt(R123);\r\n    vec3 Rs = pow2(T121) * R23 / (vec3(1.0) - R123);\r\n\r\n    vec3 C0 = R12 + Rs;\r\n    I = C0;\r\n\r\n    vec3 Cm = Rs - T121;\r\n    for (int m = 1; m <= 2; ++m)\r\n\t{\r\n\t    Cm *= r123;\r\n\t    vec3 Sm = 2.0 * evalSensitivity(float(m) * OPD, float(m) * phi);\r\n\t    I += Cm * Sm;\r\n\t}\r\n\r\n    return max(I, vec3(0.0));\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n// Specular dispatch\r\n\r\n// D\r\nfloat distribution(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    return D_GGX(roughness, NoH, h, n);\r\n}\r\n\r\n// V\r\nfloat visibility(float roughness, float NoV, float NoL)\r\n{\r\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\r\n}\r\n\r\n// F\r\nvec3 fresnel(vec3 f0, float LoH)\r\n{\r\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\r\n    return F_Schlick(f0, f90, LoH);\r\n\r\n    // return F_Schlick(f0, LoH);\r\n}\r\n\r\nvec3 fresnel(vec3 f0, vec3 f90, float LoH)\r\n{\r\n    return F_Schlick(f0, f90, LoH);\r\n}\r\n\r\n// diffuse BRDF implementations\r\n\r\nfloat Fd_Lambert()\r\n{\r\n    // https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\r\n    // return INVERT_PI;\r\n    return 1.0;\r\n}\r\n\r\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH)\r\n{\r\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\r\n    float lightScatter = F_Schlick(1.0, f90, NoL);\r\n    float veiwScatter = F_Schlick(1.0, f90, NoV);\r\n    return lightScatter * veiwScatter * INVERT_PI;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvec3 Fd_IridescenceLambert(vec3 f0, vec3 f90, vec3 iridescenceFresnel, float iridescenceFactor, float VoH)\r\n{\r\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\r\n    vec3 schlickFresnel = F_Schlick(f0, f90, VoH);\r\n\r\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\r\n\r\n    return (1.0 - F) * Fd_Lambert();\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n#endif // BRDF","#if !defined(pbrGI_lib)\r\n    #define pbrGI_lib\r\n\r\n    #include \"globalIllumination.glsl\";\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyBentNormal(const in Surface surface, const in PixelInfo info)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    vec3 anisotropyDirection = info.anisotropicB;\r\n\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    // float tangentRoughness = mix(roughness, 1.0, anisotropy * anisotropy);\r\n    float roughness = surface.perceptualRoughness;\r\n    vec3 anisotropicTangent = cross(anisotropyDirection, v);\r\n    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropyDirection);\r\n    float bendFactor = 1.0 - anisotropy * (1.0 - roughness);\r\n    float bendFactorPow4 = pow2(bendFactor) * pow2(bendFactor);\r\n    vec3 bentNormal = normalize(mix(anisotropicNormal, n, bendFactorPow4));\r\n\r\n    return bentNormal;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\n// 获取反射向量\r\nvec3 getReflectedVector(const in vec3 n, const in vec3 v, const in vec3 positionWS)\r\n{\r\n    vec3 r;\r\n    r = reflect(-v, n);\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n    r = getBoxProjectionReflectedVector(r, positionWS);\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n    return r;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvoid iridescenceIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n    vec3 positionWS = info.positionWS;\r\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float roughness = surface.perceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n    float iridescenceFactor = surface.iridescence;\r\n\r\n    // diffuse\r\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\r\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\r\n\r\n    // specular\r\n    vec3 iridescenceF0 = mix(surface.f0, iridescenceFresnel, vec3(iridescenceFactor));\r\n    vec3 Er = mix(dfg.xxx, dfg.yyy, iridescenceF0);\r\n\r\n\t#ifdef ANISOTROPIC\r\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\r\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\r\n\t#else // ANISOTROPIC\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n\t#endif // ANISOTROPIC\r\n\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n    Fr += Er * indirectSpecular * occlusion * (1.0 + Er * (1.0 / dfg.y - 1.0));\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\nvoid sheenIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 v = info.viewDir;\r\n    vec3 n = info.normalWS;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    float occlusion = surface.occlusion;\r\n    float roughness = surface.sheenPerceptualRoughness;\r\n\r\n    Fd *= info.sheenScaling;\r\n    Fr *= info.sheenScaling;\r\n\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += indirectSpecular * info.sheenDfg * surface.sheenColor * occlusion;\r\n}\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\nvoid clearCoatIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 v = info.viewDir;\r\n    vec3 n = info.clearCoatNormal;\r\n    float NoV = info.clearCoatNoV;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    float clearCoat = surface.clearCoat;\r\n    float roughness = surface.clearCoatPerceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n\r\n    float Fc = F_Schlick(0.04, 1.0, NoV) * clearCoat;\r\n    float attenuation = 1.0 - Fc;\r\n    Fd *= attenuation;\r\n    Fr *= attenuation;\r\n\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += indirectSpecular * Fc * occlusion;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef TRANSMISSION\r\nvec3 getRefraction(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 position = info.positionWS;\r\n\r\n\t#ifdef THICKNESS\r\n\r\n    vec3 n = info.normalWS;\r\n    vec3 r = -info.viewDir;\r\n    float airIOR = 1.0;\r\n    float etaIR = airIOR / surface.ior;\r\n\r\n    vec3 refractionV = normalize(refract(r, n, etaIR)) * surface.thickness * info.worldScale.xyz;\r\n\r\n    position += refractionV;\r\n\r\n\t#endif // THICKNESS\r\n\r\n    vec4 p = u_ViewProjection * vec4(position, 1.0);\r\n    vec2 refractionUV = (p.xy / p.w) * 0.5 + 0.5;\r\n\r\n    float refractionLOD = u_OpaqueTextureParams.z * surface.perceptualRoughness * saturate(surface.ior * 2.0 - 2.0);\r\n    vec3 refraction = texture2DLodEXT(u_CameraOpaqueTexture, refractionUV, refractionLOD).xyz;\r\n\r\n    return refraction;\r\n}\r\n\r\nvec3 transmissionIBL(const in Surface surface, const in PixelInfo info, in vec3 E)\r\n{\r\n    // refraction\r\n    vec3 refraction = getRefraction(surface, info);\r\n\r\n\t#ifndef THICKNESS\r\n    E *= 1.0 + surface.transmission * (1.0 - E.g) / (1.0 + E.g);\r\n\t#endif // THICKNESS\r\n\r\n\t#ifdef THICKNESS\r\n\r\n    // ABSORPTION\r\n    vec3 attenuationColor = surface.attenuationColor;\r\n    float attenuationDistance = surface.attenuationDistance;\r\n    vec3 absorption = -log(attenuationColor) / (attenuationDistance);\r\n    vec3 T = exp(-absorption * info.worldScale.xyz * surface.thickness);\r\n\r\n\t#endif // THICKNESS\r\n\r\n    vec3 Ft = refraction;\r\n\r\n    Ft *= surface.diffuseColor;\r\n\r\n    Ft *= 1.0 - E;\r\n\r\n\t#ifdef THICKNESS\r\n    Ft *= T;\r\n\t#endif // THICKNESS\r\n\r\n    return Ft * surface.transmission;\r\n}\r\n\r\n    #endif // TRANSMISSION\r\n\r\nvoid baseIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float roughness = surface.perceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\r\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\r\n    #else // ANISOTROPIC\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    #endif // ANISOTROPIC\r\n\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    // todo\r\n    float specularAO = occlusion;\r\n    Fr += E * indirectSpecular * specularAO * info.energyCompensation;\r\n\r\n    #if defined(USELIGHTMAP)\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedlight = getBakedLightmapColor(lightmapUV, n);\r\n    Fd += bakedlight * diffuseColor;\r\n\r\n    #else // USELIGHTMAP\r\n\r\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\r\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\r\n\r\n    #endif // USELIGHTMAP\r\n}\r\n\r\nvec3 getE(const in Surface surface, const in PixelInfo info)\r\n{\r\n    #ifdef IRIDESCENCE\r\n\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\r\n    vec3 f0 = surface.f0;\r\n    float iridescenceFactor = surface.iridescence;\r\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\r\n    vec3 schlickFresnel = F_Schlick(f0, vec3(1.0), NoV);\r\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\r\n    vec3 E = mix(dfg.xxx, dfg.yyy, F);\r\n\r\n    #else // IRIDESCENCE\r\n\r\n    vec3 dfg = info.dfg;\r\n    vec3 f0 = surface.f0;\r\n    vec3 f90 = surface.f90;\r\n    // vec3 E = mix(dfg.xxx, dfg.yyy, f0);\r\n    vec3 E = (f90 - f0) * dfg.x + f0 * dfg.y;\r\n\r\n    #endif // IRIDESCENCE\r\n    return E;\r\n}\r\n\r\nvec3 PBRGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 Fd = vec3(0.0);\r\n    vec3 Fr = vec3(0.0);\r\n\r\n    vec3 E = getE(surface, info);\r\n\r\n    #ifdef IRIDESCENCE\r\n    iridescenceIBL(surface, info, E, Fd, Fr);\r\n    #else // IRIDESCENCE\r\n    baseIBL(surface, info, E, Fd, Fr);\r\n    #endif // IRIDESCENCE\r\n\r\n    // sheen\r\n    #ifdef SHEEN\r\n    sheenIBL(surface, info, Fd, Fr);\r\n    #endif // SHEEN\r\n\r\n    // clear coat\r\n    #ifdef CLEARCOAT\r\n    clearCoatIBL(surface, info, Fd, Fr);\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef TRANSMISSION\r\n    Fd *= (1.0 - surface.transmission);\r\n    vec3 Ft = transmissionIBL(surface, info, E);\r\n    #endif // TRANSMISSION\r\n\r\n    vec3 gi = Fd + Fr;\r\n\r\n    #ifdef TRANSMISSION\r\n    gi += Ft;\r\n    #endif // TRANSMISSION\r\n\r\n    return gi;\r\n}\r\n\r\n#endif // pbrGI_lib","#if !defined(pbrCommon_lib)\r\n    #define pbrCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // pbrCommon_lib","#if !defined(pbrVertex_lib)\r\n    #define pbrVertex_lib\r\n\r\n    #include \"ShadingVertex.glsl\";\r\n\r\n    #ifdef THICKNESS\r\n// xyz: world scale, w: length(xyz)\r\nvarying vec4 v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n\r\n    #ifdef THICKNESS\r\n    mat4 worldMat = getWorldMatrix();\r\n    v_WorldScale.x = length(vec3(worldMat[0].xyz));\r\n    v_WorldScale.y = length(vec3(worldMat[1].xyz));\r\n    v_WorldScale.z = length(vec3(worldMat[2].xyz));\r\n    v_WorldScale.w = length(v_WorldScale.xyz);\r\n    #endif // THICKNESS\r\n}\r\n\r\n#endif // pbrVertex_lib","//兼容WGSL\r\n#if !defined(pbrFrag_lib)\r\n    #define pbrFrag_lib\r\n\r\n    #include \"PBRLighting.glsl\";\r\n\r\n    #ifdef THICKNESS\r\n// xyz: world scale, w: length(xyz)\r\nvarying vec4 v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.tangentWS = pixel.tangentWS;\r\n    info.biNormalWS = pixel.biNormalWS;\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n    info.NoV = min(max(dot(info.normalWS, info.viewDir), MIN_N_DOT_V), 1.0);\r\n\r\n    info.dfg = prefilteredDFG_LUT(surface.perceptualRoughness, info.NoV);\r\n\r\n    #ifdef SHEEN\r\n    info.energyCompensation = vec3(1.0);\r\n    #else // SHEEN\r\n    info.energyCompensation = (1.0 + surface.f0 * (1.0 / info.dfg.y - 1.0));\r\n    #endif // SHEEN\r\n\r\n    #ifdef IRIDESCENCE\r\n    info.iridescenceFresnel = evalIridescence(1.0, surface.iridescenceIor, info.NoV, surface.iridescenceThickness, surface.f0);\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\n    info.sheenDfg = prefilteredDFG_LUT(surface.sheenPerceptualRoughness, info.NoV).z;\r\n    info.sheenScaling = 1.0 - vecmax(surface.sheenColor) * info.sheenDfg;\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = normalize(pixel.TBN * surface.clearCoatNormalTS);\r\n\t#else // CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = info.vertexNormalWS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    info.clearCoatNoV = min(max(dot(info.clearCoatNormal, info.viewDir), MIN_N_DOT_V), 1.0);\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    mat3 anisotropyTBN = mat3(info.tangentWS, info.biNormalWS * -1.0, info.normalWS);\r\n    info.anisotropicT = anisotropyTBN * normalize(vec3(surface.anisotropyDirection, 0.0));\r\n    info.anisotropicB = cross(info.vertexNormalWS, info.anisotropicT);\r\n    info.ToV = dot(info.anisotropicT, info.viewDir);\r\n    info.BoV = dot(info.anisotropicB, info.viewDir);\r\n    info.at = mix(surface.roughness, 1.0, pow2(surface.anisotropy));\r\n    info.ab = surface.roughness;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef THICKNESS\r\n    info.worldScale = v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 lightColor = vec3(0.0);\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount) break;\r\n\t    DirectionLight directionLight = getDirectionLight(i, info.positionWS);\r\n\t    // if (directionLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (directionLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(directionLight);\r\n\t        lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, info.positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\r\n        #endif\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, info.positionWS);\r\n\t    // if (pointLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (pointLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(pointLight, info.normalWS, info.positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.x)\r\n            #endif\r\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\r\n        #endif\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, info.positionWS);\r\n\t    // if (spotLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (spotLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(spotLight, info.normalWS, info.positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.y)\r\n            #endif\r\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = PBRGI(surface, info);\r\n\r\n    vec3 color = lightColor + giColor;\r\n\r\n    #ifdef EMISSION\r\n    color += surface.emissionColor;\r\n    #endif //  EMISSION\r\n    return color;\r\n}\r\n\r\n#endif // pbrFrag_lib","#if !defined(PBRMetallic_lib)\r\n    #define PBRMetallic_lib\r\n\r\n    #include \"ShadingFrag.glsl\";\r\n\r\n    #include \"PBRFrag.glsl\";\r\n\r\nstruct SurfaceInputs {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    float alphaTest;\r\n    float metallic;\r\n    float smoothness;\r\n    float occlusion;\r\n    vec3 emissionColor;\r\n    vec3 normalTS;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n    surface.alpha = inputs.alpha;\r\n\r\n    surface.normalTS = inputs.normalTS;\r\n\r\n    vec3 baseColor = inputs.diffuseColor;\r\n    float metallic = inputs.metallic;\r\n    float perceptualRoughness = 1.0 - inputs.smoothness;\r\n\r\n    // default ior 1.5\r\n    float ior = 1.5;\r\n    surface.ior = 1.5;\r\n    vec3 f0 = vec3(0.04, 0.04, 0.04);\r\n\r\n    surface.perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\r\n    surface.diffuseColor = computeDiffuse(baseColor, metallic);\r\n    surface.f0 = computeF0(f0, baseColor, metallic);\r\n    surface.f90 = computeF90(surface.f0);\r\n\r\n    surface.occlusion = inputs.occlusion;\r\n\r\n    #ifdef EMISSION\r\n    surface.emissionColor = inputs.emissionColor;\r\n    #endif // EMISSION\r\n\r\n    #ifdef CLEARCOAT\r\n    surface.clearCoat = inputs.clearCoat;\r\n    surface.clearCoatPerceptualRoughness = clamp(inputs.clearCoatRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.clearCoatRoughness = surface.clearCoatPerceptualRoughness * surface.clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    surface.clearCoatNormalTS = inputs.clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    surface.anisotropy = inputs.anisotropy;\r\n    surface.anisotropyDirection = inputs.anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec4 PBR_Metallic_Flow(const in SurfaceInputs inputs, in PixelParams pixel)\r\n{\r\n    #ifdef ALPHATEST\r\n    if (inputs.alpha < inputs.alphaTest)\r\n\t{\r\n\t    discard;\r\n\t}\r\n    #endif // ALPHATEST\r\n\r\n    Surface surface;\r\n    initSurface(surface, inputs, pixel);\r\n\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n    surfaceColor += PBRLighting(surface, info);\r\n\r\n    return vec4(surfaceColor, surface.alpha);\r\n}\r\n\r\n#endif // PBRMetallic_lib\r\n","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { PBRRenderQuality } from \"./PBRRenderQuality\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { PBRShaderLib } from \"../../shader/pbr/PBRShaderLib\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\n/**\r\n * @en Enum representing the different render modes used in PBR (Physically Based Rendering) materials.\r\n * @zh 表示 PBR（基于物理的渲染）材质中使用的不同渲染模式的枚举。\r\n */\r\nexport enum PBRRenderMode {\r\n    /**\r\n     * @en Opaque render mode.\r\n     * @zh 不透明渲染模式。\r\n     */\r\n    Opaque,\r\n    /**\r\n     * @en Cutout render mode.\r\n     * @zh 裁剪透明渲染模式。\r\n     */\r\n    Cutout,\r\n    /**\r\n     * @en Transparent Mixing: Transparent commonly used in games\r\n     * @zh 透明混合_游戏中经常使用的透明。\r\n     */\r\n    Fade,\r\n    /**\r\n     * @en Transparent Mixing: Physically Seemingly Reasonable Transparency\r\n     * @zh 透明混合_物理上看似合理的透明。\r\n     */\r\n    Transparent\r\n}\r\n\r\n/**\r\n * @en The parent class of PBR material, which is an abstract class.\r\n * @zh PBR材质的父类,该类为抽象类。\r\n */\r\nexport class PBRMaterial extends Material {\r\n    /** @internal */\r\n    static SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_NORMALTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_OCCLUSIONTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_PARALLAXTEXTURE: ShaderDefine;\r\n    /** @internal */\r\n    static SHADERDEFINE_EMISSIONTEXTURE: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_DETAILALBEDO: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_DETAILNORMAL: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_ANISOTROPYTEXTURE: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static SHADERDEFINE_TRANSPARENTBLEND: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_HIGH: ShaderDefine;\r\n    /**@internal */\r\n    static SHADERDEFINE_LAYA_PBR_BRDF_LOW: ShaderDefine;\r\n\r\n    /** @internal */\r\n    static ALBEDOTEXTURE: number;\r\n    /** @internal */\r\n    static ALBEDOCOLOR: number;\r\n    /** @internal */\r\n    static TILINGOFFSET: number;\r\n    /** @internal */\r\n    static NORMALTEXTURE: number;\r\n    /** @internal */\r\n    static NORMALSCALE: number;\r\n    /** @internal */\r\n    static SMOOTHNESS: number;\r\n    /** @internal */\r\n    static SMOOTHNESSSCALE: number;\r\n    /** @internal */\r\n    static OCCLUSIONTEXTURE: number;\r\n    /** @internal */\r\n    static OCCLUSIONSTRENGTH: number;\r\n    /** @internal */\r\n    static PARALLAXTEXTURE: number;\r\n    /** @internal */\r\n    static PARALLAXSCALE: number;\r\n    /** @internal */\r\n    static EMISSIONTEXTURE: number;\r\n    /** @internal */\r\n    static EMISSIONCOLOR: number;\r\n    /**@internal */\r\n    static EMISSIONIntensity: number\r\n\r\n    //Detail\r\n    /** @internal */\r\n    static DETAILALBEDOTEXTURE: number;\r\n    /**@internal */\r\n    static DETAILNORMALTEXTURE: number;\r\n    /**@internal */\r\n    static DETAILTILLINGOFFSET: number;\r\n    /**@internal */\r\n    static DETAILNORMALSCALE: number;\r\n\r\n    // clear coat\r\n    /**@internal */\r\n    static CLEARCOAT: number;\r\n    /**@internal */\r\n    static SHADERDEFINE_CLEARCOATTEXTURE: ShaderDefine;\r\n    /**@internal */\r\n    static CLEARCOATTEXTURE: number;\r\n    /**@internal */\r\n    static CLEARCOATROUGHNESS: number;\r\n    /**@internal */\r\n    static SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE: ShaderDefine;\r\n    /**@internal */\r\n    static CLEARCOATROUGHNESSTEXTURE: number;\r\n    /** @internal */\r\n    static CLEARCOATNORMALTEXTURE: number;\r\n\r\n    // anisotropy\r\n    /** @internal */\r\n    static ANISOTROPY: number;\r\n    /** @internal */\r\n    static ANISOTROPYTEXTURE: number;\r\n    /** @internal */\r\n    static ANISOTROPYROTATION: number;\r\n\r\n    /** \r\n     * @en render quality\r\n     * @zh 渲染质量。\r\n     * */\r\n    static renderQuality: PBRRenderQuality = PBRRenderQuality.High;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    static __init__(): void {\r\n        PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_NORMALTEXTURE = Shader3D.getDefineByName(\"NORMALTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE = Shader3D.getDefineByName(\"PARALLAXTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE = Shader3D.getDefineByName(\"OCCLUSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE = Shader3D.getDefineByName(\"EMISSIONTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND = Shader3D.getDefineByName(\"TRANSPARENTBLEND\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_HIGH\");\r\n        PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW = Shader3D.getDefineByName(\"LAYA_PBR_BRDF_LOW\");\r\n        //Detail\r\n        PBRMaterial.SHADERDEFINE_DETAILALBEDO = Shader3D.getDefineByName(\"DETAILTEXTURE\");\r\n        PBRMaterial.SHADERDEFINE_DETAILNORMAL = Shader3D.getDefineByName(\"DETAILNORMAL\");\r\n\r\n        PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\r\n\r\n\r\n        PBRMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n        PBRMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n        PBRMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n        PBRMaterial.NORMALTEXTURE = Shader3D.propertyNameToID(\"u_NormalTexture\");\r\n        PBRMaterial.NORMALSCALE = Shader3D.propertyNameToID(\"u_NormalScale\");\r\n        PBRMaterial.SMOOTHNESS = Shader3D.propertyNameToID(\"u_Smoothness\");\r\n        PBRMaterial.OCCLUSIONTEXTURE = Shader3D.propertyNameToID(\"u_OcclusionTexture\");\r\n        PBRMaterial.OCCLUSIONSTRENGTH = Shader3D.propertyNameToID(\"u_OcclusionStrength\");\r\n        PBRMaterial.PARALLAXTEXTURE = Shader3D.propertyNameToID(\"u_ParallaxTexture\");\r\n        PBRMaterial.PARALLAXSCALE = Shader3D.propertyNameToID(\"u_ParallaxScale\");\r\n        PBRMaterial.EMISSIONTEXTURE = Shader3D.propertyNameToID(\"u_EmissionTexture\");\r\n        PBRMaterial.EMISSIONCOLOR = Shader3D.propertyNameToID(\"u_EmissionColor\");\r\n        PBRMaterial.EMISSIONIntensity = Shader3D.propertyNameToID(\"u_EmissionIntensity\");\r\n\r\n        //Detail\r\n        PBRMaterial.DETAILALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_DetailAlbedoTexture\");\r\n        PBRMaterial.DETAILNORMALTEXTURE = Shader3D.propertyNameToID(\"u_DetailNormalTexture\");\r\n        PBRMaterial.DETAILTILLINGOFFSET = Shader3D.propertyNameToID(\"u_DetailTillingOffset\");\r\n        PBRMaterial.DETAILNORMALSCALE = Shader3D.propertyNameToID(\"u_DetailNormalScale\");\r\n\r\n        // clear coat\r\n        PBRMaterial.CLEARCOAT = Shader3D.propertyNameToID(\"u_ClearCoatFactor\");\r\n        PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE = Shader3D.getDefineByName(\"CLEARCOATMAP\");\r\n        PBRMaterial.CLEARCOATTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatTexture\");\r\n\r\n        PBRMaterial.CLEARCOATROUGHNESS = Shader3D.propertyNameToID(\"u_ClearCoatRoughness\");\r\n        PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE = Shader3D.getDefineByName(\"CLEARCOAT_ROUGHNESSMAP\");\r\n        PBRMaterial.CLEARCOATROUGHNESSTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatRoughnessTexture\");\r\n        PBRMaterial.CLEARCOATNORMALTEXTURE = Shader3D.propertyNameToID(\"u_ClearCoatNormalTexture\");\r\n\r\n        // anisotropy\r\n        PBRMaterial.ANISOTROPY = Shader3D.propertyNameToID(\"u_AnisotropyStrength\");\r\n        PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE = Shader3D.getDefineByName(\"ANISOTROPYMAP\");\r\n        PBRMaterial.ANISOTROPYTEXTURE = Shader3D.propertyNameToID(\"u_AnisotropyTexture\");\r\n        PBRMaterial.ANISOTROPYROTATION = Shader3D.propertyNameToID(\"u_AnisotropyRotation\");\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Albedo color\r\n     * @zh 漫反射颜色。\r\n     */\r\n    get albedoColor(): Color {\r\n        return this._shaderValues.getColor(PBRMaterial.ALBEDOCOLOR);\r\n    }\r\n\r\n    set albedoColor(value: Color) {\r\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * @en Albedo texture\r\n     * @zh 漫反射贴图。\r\n     */\r\n    get albedoTexture(): BaseTexture {\r\n        if (this.hasDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE)) {\r\n            return this._shaderValues.getTexture(PBRMaterial.ALBEDOTEXTURE);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set albedoTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\r\n        this.setTextureByIndex(PBRMaterial.ALBEDOTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Normal texture\r\n     * @zh 法线贴图。\r\n     */\r\n    get normalTexture(): BaseTexture {\r\n        if (this.hasDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE)) {\r\n            return this._shaderValues.getTexture(PBRMaterial.NORMALTEXTURE);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set normalTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        } else {\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE);\r\n        }\r\n        this.setTextureByIndex(PBRMaterial.NORMALTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Normal texture scaling factor.\r\n     * @zh 法线贴图缩放系数。\r\n     */\r\n    get normalTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.NORMALSCALE);\r\n    }\r\n\r\n    set normalTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Parallax texture\r\n     * @zh 视差贴图。\r\n     */\r\n    get parallaxTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.PARALLAXTEXTURE);\r\n    }\r\n\r\n    set parallaxTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE);\r\n        this.setTextureByIndex(PBRMaterial.PARALLAXTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Parallax texture scaling factor.\r\n     * @zh 视差贴图缩放系数。\r\n     */\r\n    get parallaxTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.PARALLAXSCALE);\r\n    }\r\n\r\n    set parallaxTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, Math.max(0.005, Math.min(0.08, value)));\r\n    }\r\n\r\n    /**\r\n     * @en Occlusion texture\r\n     * @zh 遮挡贴图。\r\n     */\r\n    get occlusionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.OCCLUSIONTEXTURE);\r\n    }\r\n\r\n    set occlusionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE);\r\n\r\n        this.setTextureByIndex(PBRMaterial.OCCLUSIONTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Occlusion texture strength, the range is from 0 to 1.\r\n     * @zh 遮挡贴图强度，范围为0到1。\r\n     */\r\n    get occlusionTextureStrength(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.OCCLUSIONSTRENGTH);\r\n    }\r\n\r\n    set occlusionTextureStrength(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n     * @en The smoothness of the material, the range is from 0 to 1.\r\n     * @zh 材质的光滑度，范围为0到1。\r\n     */\r\n    get smoothness(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\r\n    }\r\n\r\n    set smoothness(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n\r\n    /**\r\n     * @en Whether to support vertex color.\r\n     * @zh 是否支持顶点色。\r\n     */\r\n    get enableVertexColor(): boolean {\r\n        return this.hasDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n    }\r\n\r\n    set enableVertexColor(value: boolean) {\r\n        if (value)\r\n            this.addDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n        else\r\n            this.removeDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable emission.\r\n     * @zh 是否开启自发光。\r\n     */\r\n    get enableEmission(): boolean {\r\n        return this._shaderValues.hasDefine(PBRShaderLib.DEFINE_EMISSION);\r\n    }\r\n\r\n    set enableEmission(value: boolean) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRShaderLib.DEFINE_EMISSION);\r\n        else\r\n            this._shaderValues.removeDefine(PBRShaderLib.DEFINE_EMISSION);\r\n    }\r\n\r\n    /**\r\n     * @en Emission color.\r\n     * @zh 自发光颜色。\r\n     */\r\n    get emissionColor(): Color {\r\n        return this._shaderValues.getColor(PBRMaterial.EMISSIONCOLOR);\r\n    }\r\n\r\n    set emissionColor(value: Color) {\r\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * @en Emission intensity\r\n     * @zh 自发光强度\r\n     */\r\n    get emissionIntensity() {\r\n        return this._shaderValues.getNumber(PBRMaterial.EMISSIONIntensity);\r\n    }\r\n\r\n    set emissionIntensity(value: number) {\r\n        //u_EmissionIntensity\r\n        this._shaderValues.setNumber(PBRMaterial.EMISSIONIntensity, value);\r\n    }\r\n\r\n    /**\r\n     * @en Emission texture.\r\n     * @zh 自发光贴图。\r\n     */\r\n    get emissionTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.EMISSIONTEXTURE);\r\n    }\r\n\r\n    set emissionTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE);\r\n\r\n        this.setTextureByIndex(PBRMaterial.EMISSIONTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Texture tiling and offsetting.\r\n     * @zh 纹理平铺和偏移。\r\n     */\r\n    get tilingOffset(): Vector4 {\r\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.TILINGOFFSET));\r\n    }\r\n\r\n    set tilingOffset(value: Vector4) {\r\n        if (value) {\r\n            this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, value);\r\n        }\r\n        else {\r\n            this._shaderValues.getVector(PBRMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Detail texture.\r\n     * @zh 细节贴图。\r\n     */\r\n    get detailAlbedoTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.DETAILALBEDOTEXTURE);\r\n    }\r\n\r\n    set detailAlbedoTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO);\r\n\r\n        this.setTextureByIndex(PBRMaterial.DETAILALBEDOTEXTURE, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Detail normal texture.\r\n     * @zh 细节法线贴图。\r\n     */\r\n    get detailNormalTexture(): BaseTexture {\r\n        return this._shaderValues.getTexture(PBRMaterial.DETAILNORMALTEXTURE);\r\n    }\r\n\r\n    set detailNormalTexture(value: BaseTexture) {\r\n        if (value)\r\n            this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\r\n        else\r\n            this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL);\r\n        this.setTextureByIndex(PBRMaterial.DETAILNORMALTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en The tiling and offset values for the detail textures. \r\n     * @zh 细节图纹理平铺和偏移。\r\n     */\r\n    get detailTilingOffset(): Vector4 {\r\n        return (<Vector4>this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET));\r\n    }\r\n\r\n    set detailTilingOffset(value: Vector4) {\r\n        if (value) {\r\n            this._shaderValues.setVector(PBRMaterial.DETAILTILLINGOFFSET, value);\r\n        }\r\n        else {\r\n            this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The scale factor for the detail normal textures.\r\n     * @zh 细节法线贴图缩放系数。\r\n     */\r\n    get detailNormalScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.DETAILNORMALSCALE);\r\n    }\r\n\r\n    set detailNormalScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.DETAILNORMALSCALE, value);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @en Render mode.\r\n     * @zh 渲染模式。\r\n     */\r\n    set renderMode(value: number) {\r\n        switch (value) {\r\n            case PBRRenderMode.Opaque:\r\n                this.alphaTest = false;\r\n                this.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Cutout:\r\n                this.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n                this.alphaTest = true;\r\n                this.depthWrite = true;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_DISABLE;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Fade:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            case PBRRenderMode.Transparent:\r\n                this.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n                this.alphaTest = false;\r\n                this.depthWrite = false;\r\n                this.cull = RenderState.CULL_BACK;\r\n                this.blend = RenderState.BLEND_ENABLE_ALL;\r\n                this.blendSrc = RenderState.BLENDPARAM_ONE;\r\n                this.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n                this.depthTest = RenderState.DEPTHTEST_LESS;\r\n                this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);\r\n                break;\r\n            default:\r\n                throw new Error(\"PBRMaterial:unknown renderMode value.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable anisotropy\r\n     * @zh 是否开启各向异性\r\n     */\r\n    public get anisotropyEnable(): boolean {\r\n        return this.shaderData.hasDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n    }\r\n    public set anisotropyEnable(value: boolean) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_ANISOTROPY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The strength of the anisotropy effect.\r\n     * @zh 各向异性强度\r\n     */\r\n    public get anisotropy(): number {\r\n        return this.getFloatByIndex(PBRMaterial.ANISOTROPY);\r\n    }\r\n    public set anisotropy(value: number) {\r\n        this.setFloatByIndex(PBRMaterial.ANISOTROPY, Math.min(1, Math.max(-1, value)));\r\n    }\r\n\r\n    /**\r\n     * @en Anisotropy strength texture.\r\n     * @zh 各向异性强度贴图。\r\n     */\r\n    public get anisotropyTexture(): Texture2D {\r\n        return <Texture2D>this.getTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE);\r\n    }\r\n\r\n    public set anisotropyTexture(value: Texture2D) {\r\n        this.setTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE, value);\r\n        if (value) {\r\n            this.addDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE);\r\n        }\r\n        else {\r\n            this.removeDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Anisotropy rotation in tangent space.\r\n     * @zh 各向异性在切线空间中的旋转。\r\n     */\r\n    public get anisotropyRotation(): number {\r\n        return this.getFloatByIndex(PBRMaterial.ANISOTROPYROTATION);\r\n    }\r\n    public set anisotropyRotation(value: number) {\r\n        value = Math.max(Math.min(value, 1.0), 0.0);\r\n        this.setFloatByIndex(PBRMaterial.ANISOTROPYROTATION, value);\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable clear coat\r\n     * @zh 是否开启透明涂层\r\n     */\r\n    public get clearCoatEnable(): boolean {\r\n        return this.shaderData.hasDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n    }\r\n    public set clearCoatEnable(value: boolean) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The strength of the clear coat effect.\r\n     * @zh 透明涂层强度\r\n     */\r\n    public get clearCoat(): number {\r\n        return this.shaderData.getNumber(PBRMaterial.CLEARCOAT);\r\n    }\r\n    public set clearCoat(value: number) {\r\n        this.shaderData.setNumber(PBRMaterial.CLEARCOAT, value);\r\n    }\r\n\r\n    /**\r\n     * @en Clear coat strength texture.\r\n     * @zh 透明涂层强度贴图\r\n     */\r\n    public get clearCoatTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATTEXTURE);\r\n    }\r\n    public set clearCoatTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE);\r\n        }\r\n        this.setTextureByIndex(PBRMaterial.CLEARCOATTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Clear coat roughness.\r\n     * @zh 透明涂层粗糙度。\r\n     */\r\n    public get clearCoatRoughness(): number {\r\n        return this.shaderData.getNumber(PBRMaterial.CLEARCOATROUGHNESS);\r\n    }\r\n    public set clearCoatRoughness(value: number) {\r\n        this.shaderData.setNumber(PBRMaterial.CLEARCOATROUGHNESS, value);\r\n    }\r\n\r\n    /**\r\n     * @en Clear coat roughness texture.\r\n     * @zh 透明涂层粗糙度贴图。\r\n     */\r\n    public get clearCoatRoughnessTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATROUGHNESSTEXTURE);\r\n    }\r\n    public set clearCoatRoughnessTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE);\r\n        }\r\n        this.setTextureByIndex(PBRMaterial.CLEARCOATROUGHNESSTEXTURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Clear coat normal texture.\r\n     * @zh 透明涂层法线贴图。\r\n     */\r\n    public get clearCoatNormalTexture(): BaseTexture {\r\n        return this.shaderData.getTexture(PBRMaterial.CLEARCOATNORMALTEXTURE);\r\n    }\r\n    public set clearCoatNormalTexture(value: BaseTexture) {\r\n        if (value) {\r\n            this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL);\r\n        }\r\n        else {\r\n            this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL);\r\n        }\r\n        this.setTextureByIndex(PBRMaterial.CLEARCOATNORMALTEXTURE, value);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n        this._shaderValues.setVector(PBRMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, 0.5);\r\n        this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.NORMALSCALE, 1.0);\r\n        this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE, 0.001);\r\n        this._shaderValues.setNumber(Material.ALPHATESTVALUE, 0.5);\r\n        this.renderMode = PBRRenderMode.Opaque;\r\n    }\r\n    \r\n    /**\r\n     * @deprecated\r\n     * 光滑度缩放系数,范围为0到1。\r\n     */\r\n    get smoothnessTextureScale(): number {\r\n        return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS);\r\n    }\r\n\r\n    set smoothnessTextureScale(value: number) {\r\n        this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS, Math.max(0.0, Math.min(1.0, value)));\r\n    }\r\n}","import { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { PBRMaterial } from \"./PBRMaterial\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n/**\r\n * @en Metallic PBR material smoothness data source.\r\n * @zh 金属度PBR材质光滑度数据源。\r\n */\r\nexport enum PBRMetallicSmoothnessSource {\r\n\t/**\r\n\t * @en Alpha channel for metallicity mapping.\r\n\t * @zh 金属度贴图的Alpha通道。\r\n\t */\r\n\tMetallicGlossTextureAlpha,\r\n\t/**\r\n\t * @en Alpha channel of albedo texture.\r\n\t * @zh 漫反射贴图的Alpha通道。\r\n\t */\r\n\tAlbedoTextureAlpha\r\n}\r\n\r\n/**\r\n * @en The PBRStandardMaterial class is used to implement PBR materials.\r\n * @zh PBRStandardMaterial 类用于实现PBR材质。\r\n */\r\nexport class PBRStandardMaterial extends PBRMaterial {\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic SHADERDEFINE_METALLICGLOSSTEXTURE: ShaderDefine;\r\n\t/** @internal */\r\n\tstatic METALLICGLOSSTEXTURE: number;\r\n\t/** @internal */\r\n\tstatic METALLIC: number;\r\n\t/** \r\n\t * @en Default material, no modification allowed\r\n\t * @zh 默认材质，禁止修改\r\n\t */\r\n\tstatic defaultMaterial: PBRStandardMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE = Shader3D.getDefineByName(\"METALLICGLOSSTEXTURE\");\r\n\t\tPBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = Shader3D.getDefineByName(\"SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\");\r\n\t\tPBRStandardMaterial.METALLICGLOSSTEXTURE = Shader3D.propertyNameToID(\"u_MetallicGlossTexture\");\r\n\t\tPBRStandardMaterial.METALLIC = Shader3D.propertyNameToID(\"u_Metallic\");\r\n\t\t// var shader: Shader3D = Shader3D.add(\"PBR\", true, true);\r\n\t\t// var subShader: SubShader = new SubShader();\r\n\t\t// shader.addSubShader(subShader);\r\n\t\t// subShader.addShaderPass(PBRVS, PBRPS, \"Forward\");\r\n\t\t// subShader.addShaderPass(PBRShadowCasterVS, PBRShadowCasterPS, \"ShadowCaster\");\r\n\t\t// subShader.addShaderPass(DepthNormalsTextureVS, DepthNormalsTextureFS, \"DepthNormal\");\r\n\t}\r\n\r\n\t/** @internal */\r\n\tprivate _smoothnessSource: PBRMetallicSmoothnessSource = 0;\r\n\r\n\t/**\r\n\t * @en Metallic gloss texture.\r\n\t * @zh 金属光滑度贴图。\r\n\t */\r\n\tget metallicGlossTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE);\r\n\t}\r\n\r\n\tset metallicGlossTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE);\r\n\r\n\t\tthis._shaderValues.setTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The metallic value, ranging from 0 to 1.\r\n\t * @zh 金属度，范围为0到1。\r\n\t */\r\n\tget metallic(): number {\r\n\t\treturn this._shaderValues.getNumber(PBRStandardMaterial.METALLIC);\r\n\t}\r\n\r\n\tset metallic(value: number) {\r\n\t\tthis._shaderValues.setNumber(PBRStandardMaterial.METALLIC, Math.max(0.0, Math.min(1.0, value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @en The smoothness data source, 0 or 1.\r\n\t * @zh 光滑度数据源，0或1。\r\n\t */\r\n\tget smoothnessSource(): PBRMetallicSmoothnessSource {\r\n\t\treturn this._smoothnessSource;\r\n\t}\r\n\r\n\tset smoothnessSource(value: PBRMetallicSmoothnessSource) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA);\r\n\t\tthis._smoothnessSource = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of PBRStandardMaterial.\r\n\t * @zh 创建一个 PBRStandardMaterial 的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PBR\");\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PBRStandardMaterial = new PBRStandardMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n","import { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\nimport { IClone } from \"../../../../../utils/IClone\"\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\n\r\n/**\r\n * @en Enumeration of particle system shape types.\r\n * @zh 粒子系统形状类型枚举。\r\n */\r\nexport enum ParticleSystemShapeType {\r\n\t/**\r\n\t * @en Box shape.\r\n\t * @zh 盒子形状。\r\n\t */\r\n\tBox = 0,\r\n\t/**\r\n\t * @en Circle shape.\r\n\t * @zh 环形形状。\r\n\t */\r\n\tCircle = 1,\r\n\t/**\r\n\t * @en Cone shape.\r\n\t * @zh 锥体形状。\r\n\t */\r\n\tCone = 2,\r\n\t/**\r\n\t * @en Hemisphere shape.\r\n\t * @zh 半球体形状。\r\n\t */\r\n\tHemisphere = 3,\r\n\t/**\r\n\t * @en Sphere shape.\r\n\t * @zh 球体形状。\r\n\t */\r\n\tSphere = 4\r\n}\r\n\r\n\r\n/**\r\n * @en BaseShape class for particle shapes.\r\n * @zh BaseShape类用于粒子形状。\r\n */\r\nexport class BaseShape implements IClone {\r\n\t/**\r\n\t * @en Whether the shape is enabled.\r\n\t * @zh 是否启用。\r\n\t */\r\n\tenable: boolean = true;\r\n\t/**\r\n\t * @en Random direction.\r\n\t * @zh 随机方向，默认0为不随机。\r\n\t */\r\n\trandomDirection: number = 0;\r\n\r\n\t/**\r\n\t * @en Particle shape type.\r\n\t * @zh 粒子形状类型。\r\n\t */\r\n\tshapeType: ParticleSystemShapeType;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the BaseShape class.\r\n\t * @zh 创建一个BaseShape实例。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tthrow new Error(\"BaseShape: must override it.\");\r\n\t}\r\n\r\n\t/** \r\n\t * @internal \r\n\t */\r\n\t_calculateProceduralBounds(boundBox: BoundBox, emitterPosScale: Vector3, minMaxBounds: Vector2): void {\r\n\t\tthis._getShapeBoundBox(boundBox);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tVector3.multiply(min, emitterPosScale, min);\r\n\t\tVector3.multiply(max, emitterPosScale, max);\r\n\r\n\t\tvar speedBounds: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tif (this.randomDirection/* && (m_Type != kCone) && (m_Type != kConeShell)*/)//TODO:randomDirection应换成0到1\r\n\t\t{\r\n\t\t\tspeedBounds.min = new Vector3(-1, -1, -1);\r\n\t\t\tspeedBounds.max = new Vector3(1, 1, 1);\r\n\t\t\t//minMaxBounds = Abs(minMaxBounds);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._getSpeedBoundBox(speedBounds);\r\n\t\t}\r\n\r\n\r\n\t\tvar maxSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar maxSpeedMin: Vector3 = maxSpeedBound.min;\r\n\t\tvar maxSpeedMax: Vector3 = maxSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.y, maxSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.y, maxSpeedMax);\r\n\t\tVector3.add(boundBox.min, maxSpeedMin, maxSpeedMin);\r\n\t\tVector3.add(boundBox.max, maxSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\r\n\r\n\t\tvar minSpeedBound: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tvar minSpeedMin: Vector3 = minSpeedBound.min;\r\n\t\tvar minSpeedMax: Vector3 = minSpeedBound.max;\r\n\t\tVector3.scale(speedBounds.min, minMaxBounds.x, minSpeedMin);\r\n\t\tVector3.scale(speedBounds.max, minMaxBounds.x, minSpeedMax);\r\n\r\n\t\tVector3.min(minSpeedBound.min, minSpeedMax, maxSpeedMin);\r\n\t\tVector3.max(minSpeedBound.min, minSpeedMax, maxSpeedMax);\r\n\r\n\t\tVector3.min(boundBox.min, maxSpeedMin, boundBox.min);\r\n\t\tVector3.max(boundBox.max, maxSpeedMin, boundBox.max);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destShape: BaseShape = (<BaseShape>destObject);\r\n\t\tdestShape.enable = this.enable;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BaseShape = new BaseShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","export enum EPhysicsCapable {\r\n    /**\r\n     * @en Gravity in the physics system.\r\n     * @zh 物理系统中的重力。\r\n     */\r\n    Physics_Gravity,   \r\n    /**\r\n     * @en Support for static collider mode.\r\n     * @zh 是否支持静态碰撞体模式。\r\n     */\r\n    Physics_StaticCollider,  \r\n    /**\r\n     * @en Support for dynamic collider mode.\r\n     * @zh 是否支持动态碰撞体模式。\r\n     */\r\n    Physics_DynamicCollider, \r\n    /**\r\n     * @en Support for character collider mode.\r\n     * @zh 是否支持角色碰撞体模式。\r\n     */\r\n    Physics_CharacterCollider,   \r\n    /**\r\n     * @en Box-shaped collider shape.\r\n     * @zh 盒状碰撞形状。\r\n     */\r\n    Physics_BoxColliderShape,   \r\n    /**\r\n     * @en Sphere-shaped collider shape.\r\n     * @zh 球状碰撞形状。\r\n     */\r\n    Physics_SphereColliderShape,    \r\n    /**\r\n     * @en Capsule-shaped collider shape.\r\n     * @zh 胶囊碰撞形状。\r\n     */\r\n    Physics_CapsuleColliderShape,   \r\n    /**\r\n     * @en Cylinder-shaped collider shape.\r\n     * @zh 圆柱碰撞形状。\r\n     */\r\n    Physics_CylinderColliderShape,  \r\n    /**\r\n     * @en Cone-shaped collider shape.\r\n     * @zh 圆锥碰撞形状。\r\n     */\r\n    Physics_ConeColliderShape,  \r\n    /**\r\n     * @en Mesh collider shape. \r\n     * @zh 网格碰撞形状。\r\n     */\r\n    Physics_MeshColliderShape,  // _bt TODO暂不支持\r\n    /**\r\n     * @en Compound collider shape. \r\n     * @zh 组合碰撞形状。\r\n     */\r\n    Physics_CompoundColliderShape,   // _bt TODO暂不支持\r\n    /**\r\n     * @en Support for creating curve mesh. \r\n     * @zh 支持创建曲线网格。\r\n     */\r\n    Physics_CreateCorveMesh,   // _bt TODO暂不支持\r\n    /**\r\n     * @en Height field collider shape.\r\n     * @zh 高度场碰撞形状。\r\n     */\r\n    physics_heightFieldColliderShape,\r\n    /**\r\n     * @en General joint capability.\r\n     * @zh 常规关节能力。\r\n     */\r\n    Physics_Joint,\r\n    /**\r\n     * @en Fixed joint capability.\r\n     * @zh 固定关节能力。\r\n     */\r\n    Physics_FixedJoint,\r\n    /**\r\n     * @en Spring joint capability.\r\n     * @zh 弹簧关节能力。\r\n     */\r\n    Physics_SpringJoint,\r\n    /**\r\n     * @en Hinge joint capability.\r\n     * @zh 铰链关节能力。\r\n     */\r\n    Physics_HingeJoint,\r\n    /**\r\n     * @en 6 Degrees of Freedom (D6) joint capability.\r\n     * @zh 6自由度（D6）关节能力。\r\n     */\r\n    Physics_D6Joint,\r\n}","import { Color } from \"../../../maths/Color\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @en The SkyBoxMaterial class is used to implement the SkyBoxMaterial material.\r\n * @zh SkyBoxMaterial 类用于实现天空盒材质。\r\n */\r\nexport class SkyBoxMaterial extends Material {\r\n\tstatic TINTCOLOR: number;\r\n\tstatic EXPOSURE: number;\r\n\tstatic ROTATION: number;\r\n\tstatic TEXTURECUBE: number;\r\n\r\n\t/** \r\n\t * @en Default material, no modification allowed\r\n\t * @zh 默认材质，禁止修改\r\n\t */\r\n\tstatic defaultMaterial: SkyBoxMaterial;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\t\tSkyBoxMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\r\n\t\tSkyBoxMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\t\tSkyBoxMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\r\n\t\tSkyBoxMaterial.TEXTURECUBE = Shader3D.propertyNameToID(\"u_CubeTexture\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en Tint color of the skybox.\r\n\t * @zh 天空盒的颜色。\r\n\t */\r\n\tget tintColor(): Color {\r\n\t\treturn this._shaderValues.getColor(SkyBoxMaterial.TINTCOLOR);\r\n\t}\r\n\r\n\tset tintColor(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyBoxMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Exposure intensity of the skybox.\r\n\t * @zh 天空盒的曝光强度。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Rotation angle of the skybox.\r\n\t * @zh 天空盒的旋转角度。\r\n\t */\r\n\tget rotation(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyBoxMaterial.ROTATION);\r\n\t}\r\n\r\n\tset rotation(value: number) {\r\n\t\tthis._shaderValues.setNumber(SkyBoxMaterial.ROTATION, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Texture of the skybox.\r\n\t * @zh 天空盒的纹理。\r\n\t */\r\n\tget textureCube(): TextureCube {\r\n\t\treturn (<TextureCube>this._shaderValues.getTexture(SkyBoxMaterial.TEXTURECUBE));\r\n\t}\r\n\r\n\tset textureCube(value: TextureCube) {\r\n\t\tthis._shaderValues.setTexture(SkyBoxMaterial.TEXTURECUBE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyBoxMaterial = new SkyBoxMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of SkyBoxMaterial.\r\n\t * @zh 创建一个 SkyBoxMaterial 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyBox\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @en The SkyProceduralMaterial class is used to implement the SkyProceduralMaterial material.\r\n * @zh SkyProceduralMaterial 类用于实现程序化天空材质。\r\n */\r\nexport class SkyProceduralMaterial extends Material {\r\n\t/**\r\n\t * @en Sun: None\r\n\t * @zh 太阳：无\r\n\t */\r\n\tstatic SUN_NODE: number = 0;\r\n\t/**\r\n\t * @en Sun: Simple\r\n\t * @zh 太阳：简单\r\n\t */\r\n\tstatic SUN_SIMPLE: number = 1;\r\n\t/**\r\n\t * @en Sun: High quality\r\n\t * @zh 太阳：高质量\r\n\t */\r\n\tstatic SUN_HIGH_QUALITY: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SUNSIZE: number;\r\n\t/**@internal */\r\n\tstatic SUNSIZECONVERGENCE: number;\r\n\t/**@internal */\r\n\tstatic ATMOSPHERETHICKNESS: number;\r\n\t/**@internal */\r\n\tstatic SKYTINT: number;\r\n\t/**@internal */\r\n\tstatic GROUNDTINT: number;\r\n\t/**@internal */\r\n\tstatic EXPOSURE: number;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_HIGH_QUALITY: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SUN_SIMPLE: ShaderDefine;\r\n\r\n\t/** 默认材质，禁止修改*/\r\n\tstatic defaultMaterial: SkyProceduralMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY = Shader3D.getDefineByName(\"SUN_HIGH_QUALITY\");\r\n\t\tSkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE = Shader3D.getDefineByName(\"SUN_SIMPLE\");\r\n\t\tSkyProceduralMaterial.SUNSIZE = Shader3D.propertyNameToID(\"u_SunSize\");\r\n\t\tSkyProceduralMaterial.SUNSIZECONVERGENCE = Shader3D.propertyNameToID(\"u_SunSizeConvergence\");\r\n\t\tSkyProceduralMaterial.ATMOSPHERETHICKNESS = Shader3D.propertyNameToID(\"u_AtmosphereThickness\");\r\n\t\tSkyProceduralMaterial.SKYTINT = Shader3D.propertyNameToID(\"u_SkyTint\");\r\n\t\tSkyProceduralMaterial.GROUNDTINT = Shader3D.propertyNameToID(\"u_GroundTint\");\r\n\t\tSkyProceduralMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _sunDisk: number;\r\n\r\n\t/**\r\n\t * @en Sun state.\r\n\t * @zh 太阳状态。\r\n\t */\r\n\tget sunDisk(): number {\r\n\t\treturn this._sunDisk;\r\n\t}\r\n\r\n\tset sunDisk(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase SkyProceduralMaterial.SUN_HIGH_QUALITY:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_SIMPLE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SkyProceduralMaterial.SUN_NODE:\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);\r\n\t\t\t\tthis._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"SkyBoxProceduralMaterial: unknown sun value.\";\r\n\t\t}\r\n\t\tthis._sunDisk = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sun size, range is 0 to 1.\r\n\t * @zh 太阳尺寸，范围是0到1。\r\n\t */\r\n\tget sunSize(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZE);\r\n\t}\r\n\r\n\tset sunSize(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 1.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sun size convergence, range is 0 to 20.\r\n\t * @zh 太阳尺寸收缩，范围是0到20。\r\n\t */\r\n\tget sunSizeConvergence(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE);\r\n\t}\r\n\r\n\tset sunSizeConvergence(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 20.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Atmosphere thickness, range is 0 to 5.\r\n\t * @zh 大气厚度，范围是0到5。\r\n\t */\r\n\tget atmosphereThickness(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS);\r\n\t}\r\n\r\n\tset atmosphereThickness(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 5.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sky color.\r\n\t * @zh 天空颜色。\r\n\t */\r\n\tget skyTint(): Color {\r\n\t\treturn (<Color>this._shaderValues.getColor(SkyProceduralMaterial.SKYTINT));\r\n\t}\r\n\r\n\tset skyTint(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.SKYTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Ground color.\r\n\t * @zh 地面颜色。\r\n\t */\r\n\tget groundTint(): Color {\r\n\t\treturn this._shaderValues.getColor(SkyProceduralMaterial.GROUNDTINT);\r\n\t}\r\n\r\n\tset groundTint(value: Color) {\r\n\t\tthis._shaderValues.setColor(SkyProceduralMaterial.GROUNDTINT, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Exposure intensity, range is 0 to 8.\r\n\t * @zh 曝光强度，范围是0到8。\r\n\t */\r\n\tget exposure(): number {\r\n\t\treturn this._shaderValues.getNumber(SkyProceduralMaterial.EXPOSURE);\r\n\t}\r\n\r\n\tset exposure(value: number) {\r\n\t\tvalue = Math.min(Math.max(0.0, value), 8.0);\r\n\t\tthis._shaderValues.setNumber(SkyProceduralMaterial.EXPOSURE, value);\r\n\t}\r\n\r\n\t/** \r\n\t * @ignore\r\n\t * @en Creates an instance of SkyProceduralMaterial.\r\n\t * @zh 创建一个 SkyProceduralMaterial 的实例。\r\n     */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"SkyProcedural\");\r\n\t\tthis.sunDisk = SkyProceduralMaterial.SUN_HIGH_QUALITY;\r\n\t\tthis.sunSize = 0.04;\r\n\t\tthis.sunSizeConvergence = 5;\r\n\t\tthis.atmosphereThickness = 1.0;\r\n\t\tthis.skyTint = new Color(0.5, 0.5, 0.5, 1.0);\r\n\t\tthis.groundTint = new Color(0.369, 0.349, 0.341, 1.0);\r\n\t\tthis.exposure = 1.3;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SkyProceduralMaterial = new SkyProceduralMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @en The UnlitMaterial class is used to implement materials that are not affected by lighting.\r\n * @zh UnlitMaterial 类用于实现不受光照影响的材质。\r\n */\r\nexport class UnlitMaterial extends Material {\r\n\r\n\tstatic SHADERDEFINE_ALBEDOTEXTURE: ShaderDefine;\r\n\r\n\tstatic SHADERDEFINE_ENABLEVERTEXCOLOR: ShaderDefine;\r\n\r\n\tstatic ALBEDOTEXTURE: number;\r\n\r\n\tstatic ALBEDOCOLOR: number;\r\n\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\tstatic defaultMaterial: UnlitMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tUnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = Shader3D.getDefineByName(\"ALBEDOTEXTURE\");\r\n\t\tUnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = Shader3D.getDefineByName(\"ENABLEVERTEXCOLOR\");\r\n\r\n\t\tUnlitMaterial.ALBEDOTEXTURE = Shader3D.propertyNameToID(\"u_AlbedoTexture\");\r\n\t\tUnlitMaterial.ALBEDOCOLOR = Shader3D.propertyNameToID(\"u_AlbedoColor\");\r\n\t\tUnlitMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\tprivate _albedoIntensity: number;\r\n\r\n\t/**\r\n\t * @en Albedo color\r\n\t * @zh 漫反射颜色。\r\n\t */\r\n\tget albedoColor(): Color {\r\n\t\treturn this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR);\r\n\t}\r\n\r\n\tset albedoColor(value: Color) {\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value.scale(this._albedoIntensity));\r\n\t}\r\n\r\n\t/**\r\n\t * @en Albedo intensity\r\n\t * @zh 漫反射强度。\r\n\t */\r\n\tget albedoIntensity(): number {\r\n\t\treturn this._albedoIntensity;\r\n\t}\r\n\r\n\tset albedoIntensity(value: number) {\r\n\t\tthis._albedoIntensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Albedo texture\r\n\t * @zh 漫反射贴图。\r\n\t */\r\n\tget albedoTexture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset albedoTexture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Texture tiling and offsetting.\r\n\t * @zh 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether to support vertex color.\r\n\t * @zh 是否支持顶点色。\r\n\t */\r\n\tget enableVertexColor(): boolean {\r\n\t\treturn this.hasDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\tset enableVertexColor(value: boolean) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of UnlitMaterial.\r\n\t * @zh 创建一个 UnlitMaterial 的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Unlit\");\r\n\t\tthis.renderMode = UnlitMaterial.RENDERMODE_OPAQUE;\r\n\t\tthis.albedoIntensity = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: UnlitMaterial = new UnlitMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_不透明。\r\n\t */\r\n\tstatic RENDERMODE_OPAQUE: number = 0;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_阿尔法测试。\r\n\t*/\r\n\tstatic RENDERMODE_CUTOUT: number = 1;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态__透明混合。 \r\n\t */\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态__加色法混合。 \r\n\t */\r\n\tstatic RENDERMODE_ADDTIVE: number = 3;\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase UnlitMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_CUTOUT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_ALPHATEST;\r\n\t\t\t\tthis.alphaTest = true;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase UnlitMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"UnlitMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { Material } from \"../../resource/Material\";\r\nimport { Mesh } from \"../resource/models/Mesh\"\r\nimport { Node } from \"../../display/Node\"\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n/**\r\n * @deprecated\r\n * <code>MeshSprite3D</code> 类用于创建网格。\r\n */\r\nexport class MeshSprite3D extends RenderableSprite3D {\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return (<MeshFilter>this._meshFilter);\r\n    }\r\n\r\n    /**\r\n     * 网格渲染器。\r\n     */\r\n    get meshRenderer(): MeshRenderer {\r\n        return (<MeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>MeshSprite3D</code> 实例。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(MeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: MeshRenderer = this.meshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.meshPath != undefined) && (this.meshFilter.sharedMesh = Loader.getRes(data.meshPath));\r\n        (data.enableRender != undefined) && (render._enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            var sharedMaterials: Material[] = render.sharedMaterials;\r\n            var materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (var i: number = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, rootSprite: Node, dstSprite: Node): void {\r\n        super._cloneTo(destObject, rootSprite, dstSprite);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","\r\n/**\r\n * @en The gradient mode.\r\n * @zh  渐变模式\r\n */\r\nexport class GradientMode {\r\n    /**\r\n     * @en Finds the two keys adjacent to the requested evaluation time and linearly interpolates between them to obtain a blended color.\r\n     * @zh 找到与请求的评估时间相邻的两个键,并线性插值在他们之间,以获得一种混合的颜色。\r\n     */\r\n\tstatic Blend: number = 0;\r\n\r\n    /**\r\n     * @en Returns a fixed color by finding the first key with a time value greater than the requested evaluation time.\r\n     * @zh 返回一个固定的颜色，通过查找第一个键的时间值大于所请求的评估时间。\r\n     */\r\n\tstatic Fixed: number = 1;\r\n}\r\n\r\n","import { GradientMode } from \"./GradientMode\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\n\r\n\r\n/**\r\n * @en The `Gradient` class is used to create color gradients.\r\n * @zh `Gradient` 类用于创建颜色渐变。\r\n */\r\nexport class Gradient implements IClone {\r\n\tprivate _mode: number = 0;\r\n\tprivate _maxColorRGBKeysCount: number = 0;\r\n\tprivate _maxColorAlphaKeysCount: number = 0;\r\n\tprivate _colorRGBKeysCount: number = 0;\r\n\tprivate _colorAlphaKeysCount: number = 0;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en element key range\r\n\t * x: colorkey min\r\n\t * y: colorkey max\r\n\t * z: alphakey min\r\n\t * w: alphakey max\r\n\t * @zh 元素键值范围\r\n\t * x: 颜色最小值\r\n\t * y: 颜色最大值\r\n\t * z: 透明度最小值\r\n\t * w: 透明度最大值\r\n\t */\r\n\t_keyRanges: Vector4 = new Vector4(1, 0, 1, 0);\r\n\r\n\t/**@internal */\r\n\t_alphaElementDatas: Float32Array;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * alpha 保存设置值\r\n\t */\r\n\tget _alphaElements(): Float32Array {\r\n\t\treturn this._alphaElementDatas;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * alpha 保存设置值\r\n\t */\r\n\tset _alphaElements(value: Float32Array) {\r\n\t\tthis._alphaElementDatas = value;\r\n\r\n\t\tlet keyCount = value.length / 2;\r\n\t\tif (this.colorAlphaKeysCount < keyCount) {\r\n\t\t\tlet maxKeyCount = keyCount > 4 ? 8 : 4;\r\n\t\t\tthis._colorAlphaKeysCount = Math.ceil(Math.min(keyCount, 8));\r\n\t\t\tthis._maxAlphaKeysCount = maxKeyCount;\r\n\t\t}\r\n\r\n\t\tif (this.colorAlphaKeysCount < 2) {\r\n\t\t\t// 只有一帧数据， 补全成首尾两帧\r\n\t\t\tlet alpha = value[1];\r\n\r\n\t\t\tthis._alphaDataBuffer[0] = 0;\r\n\t\t\tthis._alphaDataBuffer[1] = alpha;\r\n\t\t\tthis._alphaDataBuffer[2] = 1;\r\n\t\t\tthis._alphaDataBuffer[3] = alpha;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._alphaDataBuffer.set(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**@internal */\r\n\t_rgbElementDatas: Float32Array;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * rgb 数据 保存设置值\r\n\t */\r\n\tget _rgbElements(): Float32Array {\r\n\t\treturn this._rgbElementDatas;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * rgb 数据 保存设置值\r\n\t */\r\n\tset _rgbElements(value: Float32Array) {\r\n\t\tthis._rgbElementDatas = value;\r\n\r\n\t\tlet keyCount = value.length / 4;\r\n\t\tif (this.colorRGBKeysCount < keyCount) {\r\n\t\t\tlet maxRGBCount = keyCount > 4 ? 8 : 4;\r\n\t\t\tthis._colorRGBKeysCount = Math.ceil(Math.min(keyCount, 8));\r\n\t\t\tthis._maxRGBKeysCount = maxRGBCount;\r\n\t\t}\r\n\r\n\t\tif (this.colorRGBKeysCount < 2) {\r\n\t\t\t// 只有一帧数据， 补全成首尾两帧\r\n\t\t\tlet r = value[1];\r\n\t\t\tlet g = value[2];\r\n\t\t\tlet b = value[3];\r\n\r\n\t\t\tthis._rgbDataBuffer[0] = 0;\r\n\t\t\tthis._rgbDataBuffer[1] = r;\r\n\t\t\tthis._rgbDataBuffer[2] = g;\r\n\t\t\tthis._rgbDataBuffer[3] = b;\r\n\r\n\t\t\tthis._rgbDataBuffer[4] = 1;\r\n\t\t\tthis._rgbDataBuffer[5] = r;\r\n\t\t\tthis._rgbDataBuffer[6] = g;\r\n\t\t\tthis._rgbDataBuffer[7] = b;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._rgbDataBuffer.set(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * alpha 数据 uniform buffer value\r\n\t */\r\n\t_alphaDataBuffer: Float32Array = null;\r\n\t/**\r\n\t * @internal\r\n\t * rgb 数据 uniform buffer value\r\n\t */\r\n\t_rgbDataBuffer: Float32Array = null;\r\n\r\n\t/**\r\n\t * 获取颜色数据。\r\n\t * @return  颜色数据。\r\n\t */\r\n\tget rgbElements(): Float32Array {\r\n\t\treturn this._rgbDataBuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取 alpha数据。\r\n\t * @return  alpha数据。\r\n\t */\r\n\tget alphaElements(): Float32Array {\r\n\t\treturn this._alphaDataBuffer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Get the gradient mode.\r\n\t * @returns The gradient mode.\r\n\t * @zh 获取梯度模式。\r\n\t * @returns 梯度模式。\r\n\t */\r\n\tget mode(): number {\r\n\t\treturn this._mode;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Set the gradient mode.\r\n\t * @param value The gradient mode.\r\n\t * @zh 设置梯度模式。\r\n\t * @param value 梯度模式。\r\n\t */\r\n\tset mode(value: number) {\r\n\t\tthis._mode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the count of color RGB keys.\r\n\t * @returns The count of color RGB keys.\r\n\t * @zh 获取颜色 RGB 数量。\r\n\t * @returns 颜色 RGB 数量。\r\n\t */\r\n\tget colorRGBKeysCount(): number {\r\n\t\treturn this._colorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 设置最大颜色Alpha帧数量。\r\n\t */\r\n\tset _maxAlphaKeysCount(value: number) {\r\n\t\tthis._maxColorAlphaKeysCount = value;\r\n\r\n\t\tvalue = Math.max(value, 2);\r\n\t\tthis._alphaDataBuffer = new Float32Array(Math.ceil(value / 2) * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 设置最大颜色RGB帧数量。\r\n\t */\r\n\tset _maxRGBKeysCount(value: number) {\r\n\t\tthis._maxColorRGBKeysCount = value;\r\n\r\n\t\tvalue = Math.max(value, 2);\r\n\t\tthis._rgbDataBuffer = new Float32Array(value * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取颜色Alpha数量。\r\n\t * @return 颜色Alpha数量。\r\n\t */\r\n\tget colorAlphaKeysCount(): number {\r\n\t\treturn this._colorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the maximum count of color RGB keys.\r\n\t * @returns The maximum count of RGB keys.\r\n\t * @zh 获取最大颜色 RGB 帧数量。\r\n\t * @returns 最大 RGB 帧数量。\r\n\t */\r\n\tget maxColorRGBKeysCount(): number {\r\n\t\treturn this._maxColorRGBKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the maximum count of color Alpha keys.\r\n\t * @returns The maximum count of Alpha keys.\r\n\t * @zh 获取最大颜色 Alpha 帧数量。\r\n\t * @returns 最大 Alpha 帧数量。\r\n\t */\r\n\tget maxColorAlphaKeysCount(): number {\r\n\t\treturn this._maxColorAlphaKeysCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Constructor function.\r\n\t * @param maxColorRGBKeyCount The maximum count of RGB keys.\r\n\t * @param maxColorAlphaKeyCount The maximum count of Alpha keys.\r\n\t * @zh 构造函数。\r\n\t * @param maxColorRGBKeyCount 最大 RGB 帧个数。\r\n\t * @param maxColorAlphaKeyCount 最大 Alpha 帧个数。\r\n\t */\r\n\tconstructor() {\r\n\t\t// 加载 decodeObj 赋值 _rgbElements/ _alphaElements, 初始化buffer\r\n\t\t// 手动创建对象，调用 setMaxKeyCount 初始化buffer\r\n\t}\r\n\r\n\tsetMaxKeyCount(maxRGBCount: number, maxAlphaCount: number) {\r\n\t\tthis._maxAlphaKeysCount = maxAlphaCount;\r\n\t\tthis._maxRGBKeysCount = maxRGBCount;\r\n\r\n\t\tthis._rgbElements = new Float32Array(maxRGBCount * 4);\r\n\t\tthis._alphaElements = new Float32Array(maxAlphaCount * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a color RGB key.\r\n\t * @param key The lifetime, ranging from 0 to 1.\r\n\t * @param value The RGB value.\r\n\t * @zh 增加颜色 RGB 帧。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value RGB 值。\r\n\t */\r\n\taddColorRGB(key: number, value: Color): void {\r\n\t\tif (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {\r\n\t\t\tvar offset: number = this._colorRGBKeysCount * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\t\t\tthis._colorRGBKeysCount++;\r\n\r\n\t\t\tthis._rgbElements = this._rgbElements;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a color Alpha key.\r\n\t * @param key The lifetime, ranging from 0 to 1.\r\n\t * @param value The Alpha value.\r\n\t * @zh 增加颜色 Alpha 帧。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value Alpha 值。\r\n\t */\r\n\taddColorAlpha(key: number, value: number): void {\r\n\t\tif (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {\r\n\t\t\tvar offset: number = this._colorAlphaKeysCount * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\t\t\tthis._colorAlphaKeysCount++;\r\n\r\n\t\t\tthis._alphaElements = this._alphaElements;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:data count must lessEqual than \" + this._maxColorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Update a color RGB key.\r\n\t * @param index The index.\r\n\t * @param key The lifetime, ranging from 0 to 1.\r\n\t * @param value The RGB value.\r\n\t * @zh 更新颜色 RGB 帧。\r\n\t * @param index 索引。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value RGB 值。\r\n\t */\r\n\tupdateColorRGB(index: number, key: number, value: Color): void {//TODO:以key为键自动排序\r\n\t\tif (index < this._colorRGBKeysCount) {\r\n\t\t\tvar offset: number = index * 4;\r\n\t\t\tthis._rgbElements[offset] = key;\r\n\t\t\tthis._rgbElements[offset + 1] = value.r;\r\n\t\t\tthis._rgbElements[offset + 2] = value.g;\r\n\t\t\tthis._rgbElements[offset + 3] = value.b;\r\n\r\n\t\t\tthis._rgbElements = this._rgbElements;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorRGBKeysCount:\" + this._colorRGBKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Update a color Alpha key.\r\n\t * @param index The index.\r\n\t * @param key The lifetime, ranging from 0 to 1.\r\n\t * @param value The Alpha value.\r\n\t * @zh 更新颜色 Alpha 帧。\r\n\t * @param index 索引。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value Alpha 值。\r\n\t */\r\n\tupdateColorAlpha(index: number, key: number, value: number): void {\r\n\t\tif (index < this._colorAlphaKeysCount) {\r\n\t\t\tvar offset: number = index * 2;\r\n\t\t\tthis._alphaElements[offset] = key;\r\n\t\t\tthis._alphaElements[offset + 1] = value;\r\n\r\n\t\t\tthis._alphaElements = this._alphaElements;\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Gradient:warning:index must lessEqual than colorAlphaKeysCount:\" + this._colorAlphaKeysCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get RGB color through interpolation.\r\n\t * @param lerpFactor Interpolation factor, clamped between 0 and 1.\r\n\t * @param out The resulting color.\r\n\t * @param startSearchIndex The starting search index. Default is 0.\r\n\t * @param reverseSearch Whether to perform reverse interpolation. Default is false.\r\n\t * @returns The current index after interpolation.\r\n\t * @zh 通过插值获取RGB颜色。\r\n\t * @param lerpFactor 插值因子，取值范围在0到1之间。\r\n\t * @param out 颜色结果。\r\n\t * @param startSearchIndex 开始查找索引。默认为0。\r\n\t * @param reverseSearch 是否进行反向插值。默认为false。\r\n\t * @returns 插值后的当前索引。\r\n\t */\r\n\tevaluateColorRGB(lerpFactor: number, out: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\r\n\t\tvar rgbElements: Float32Array = this._rgbElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 4;\r\n\t\t\t\tvar left: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\t\t\t\tvar right: number = rgbElements[offset + 4];\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left && right) {\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset + 1] + y2 * rgbElements[offset + 5]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset + 2] + y2 * rgbElements[offset + 6]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset + 3] + y2 * rgbElements[offset + 7]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > rgbElements[offset + 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 5];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 6];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 7];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = 0, n: number = this._rgbElements.length; i < n; i++) {\r\n\t\t\t\toffset = i * 4;\r\n\t\t\t\tvar right: number = rgbElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = rgbElements[offset - 4];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar y1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar y2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\tout.r = (y1 * rgbElements[offset - 3] + y2 * rgbElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\tout.g = (y1 * rgbElements[offset - 2] + y2 * rgbElements[offset + 2]) / diff;\r\n\t\t\t\t\t\t\tout.b = (y1 * rgbElements[offset - 1] + y2 * rgbElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < rgbElements[offset - 4])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tout.r = rgbElements[offset + 1];\r\n\t\t\t\t\t\t\tout.g = rgbElements[offset + 2];\r\n\t\t\t\t\t\t\tout.b = rgbElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the alpha value through interpolation.\r\n\t * @param lerpFactor The interpolation factor.\r\n\t * @param outColor The resulting color.\r\n\t * @param startSearchIndex The starting search index. Default is 0.\r\n\t * @param reverseSearch Whether to perform reverse interpolation. Default is false.\r\n\t * @returns The resulting index.\r\n\t * @zh 通过插值获取透明值。\r\n\t * @param lerpFactor 插值因子。\r\n\t * @param outColor 颜色结果。\r\n\t * @param startSearchIndex 开始查找索引。默认为0。\r\n\t * @param reverseSearch 是否反向插值。默认为false。\r\n\t * @returns 结果索引。\r\n\t */\r\n\tevaluateColorAlpha(lerpFactor: number, outColor: Color, startSearchIndex: number = 0, reverseSearch: boolean = false): number {\r\n\t\tlerpFactor = Math.min(Math.max(lerpFactor, 0.0), 1.0);\r\n\t\tvar alphaElements: Float32Array = this._alphaElements;\r\n\t\tvar curIndex: number = startSearchIndex;\r\n\r\n\t\tif (reverseSearch) {\r\n\t\t\tfor (var i: number = curIndex; i >= 0; i--) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar left: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === left) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\t\t\t\tvar right: number = alphaElements[offset + 2];\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor > left && right) {\r\n\t\t\t\t\t\t\tif (lerpFactor > right)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset + 1] + x2 * alphaElements[offset + 3]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor > left) {\r\n\t\t\t\t\t\t\tif (lerpFactor > alphaElements[offset + 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 3];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i: number = curIndex, n: number = this._alphaElements.length; i < n; i++) {\r\n\t\t\t\tvar offset: number = i * 2;\r\n\t\t\t\tvar right: number = alphaElements[offset];\r\n\t\t\t\tif (lerpFactor === right) {\r\n\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\treturn curIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (this._mode) {\r\n\t\t\t\t\tcase GradientMode.Blend:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tvar left: number = alphaElements[offset - 2];\r\n\t\t\t\t\t\t\tif (lerpFactor < left)\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\tvar diff: number = right - left;\r\n\t\t\t\t\t\t\tvar x1: number = right - lerpFactor;\r\n\t\t\t\t\t\t\tvar x2: number = lerpFactor - left;\r\n\t\t\t\t\t\t\toutColor.a = (x1 * alphaElements[offset - 1] + x2 * alphaElements[offset + 1]) / diff;\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase GradientMode.Fixed:\r\n\t\t\t\t\t\tif (lerpFactor < right) {\r\n\t\t\t\t\t\t\tif (lerpFactor < alphaElements[offset - 2])\r\n\t\t\t\t\t\t\t\tthrow \"Gradient:wrong startSearchIndex.\";\r\n\t\t\t\t\t\t\toutColor.a = alphaElements[offset + 1];\r\n\t\t\t\t\t\t\treturn curIndex;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurIndex++;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"Gradient:unknown mode.\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn curIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @param destObject The destination object to clone to.\r\n\t * @zh 克隆。\r\n\t * @param destObject 克隆的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataColor: Gradient = (<Gradient>destObject);\r\n\t\tvar i: number, n: number;\r\n\t\tdestGradientDataColor._colorAlphaKeysCount = this._colorAlphaKeysCount;\r\n\t\tlet destAlphaElements = destGradientDataColor._alphaElements = new Float32Array(this._alphaElements.length);\r\n\r\n\t\tfor (i = 0, n = this._alphaElements.length; i < n; i++)\r\n\t\t\tdestAlphaElements[i] = this._alphaElements[i];\r\n\r\n\t\tdestGradientDataColor._colorRGBKeysCount = this._colorRGBKeysCount;\r\n\t\tvar destRGBElements: Float32Array = destGradientDataColor._rgbElements = new Float32Array(this._rgbElements.length);\r\n\t\tfor (i = 0, n = this._rgbElements.length; i < n; i++)\r\n\t\t\tdestRGBElements[i] = this._rgbElements[i];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone the gradient.\r\n\t * @returns A clone of the gradient.\r\n\t * @zh 克隆渐变。\r\n\t * @returns 克隆的副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataColor: Gradient = new Gradient();\r\n\t\tdestGradientDataColor.setMaxKeyCount(this.maxColorRGBKeysCount, this.maxColorAlphaKeysCount);\r\n\t\tthis.cloneTo(destGradientDataColor);\r\n\t\treturn destGradientDataColor;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The Burst class is used to describe the burst of particles.\r\n * @zh Burst 类用于粒子的爆发描述。\r\n */\r\nexport class Burst implements IClone {\r\n\t/** 爆发时间,单位为秒。*/\r\n\tprivate _time: number;\r\n\t/** 爆发的最小数量。*/\r\n\tprivate _minCount: number;\r\n\t/** 爆发的最大数量。*/\r\n\tprivate _maxCount: number;\r\n\r\n\t/**\r\n\t * @en The burst time in seconds.\r\n\t * @zh 爆发时间，单位为秒。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum count of particles in a burst.\r\n\t * @zh 爆发的最小粒子数量。\r\n\t */\r\n\tget minCount(): number {\r\n\t\treturn this._minCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum count of particles in a burst.\r\n\t * @zh 爆发的最大粒子数量。\r\n\t */\r\n\tget maxCount(): number {\r\n\t\treturn this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates an instance of the Burst class.\r\n\t * @param time Burst time in seconds. Default is 0.\r\n\t * @param minCount Minimum count of particles in a burst. Default is 0.\r\n\t * @param maxCount Maximum count of particles in a burst. Default is 0.\r\n\t * @zh 创建Burst类的实例。\r\n\t * @param time 爆发时间,单位为秒。\r\n\t * @param minCount 爆发的最小数量。\r\n\t * @param time 爆发的最大数量。\r\n\t */\r\n\tconstructor(time: number = 0, minCount: number = 0, maxCount: number = 0) {\r\n\t\tthis._time = time;\r\n\t\tthis._minCount = minCount;\r\n\t\tthis._maxCount = maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destBurst: Burst = (<Burst>destObject);\r\n\t\tdestBurst._time = this._time;\r\n\t\tdestBurst._minCount = this._minCount;\r\n\t\tdestBurst._maxCount = this._maxCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destBurst: Burst = new Burst(this._time, this._minCount, this._maxCount);\r\n\t\tthis.cloneTo(destBurst);\r\n\t\treturn destBurst;\r\n\t}\r\n}","import { Gradient } from \"../../Gradient\"\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\n\r\n/**\r\n * @en The GradientColor class is used to create gradient colors.\r\n * @zh GradientColor 类用于创建渐变颜色。\r\n */\r\nexport class GradientColor implements IClone {\r\n\t/**\r\n\t * @en Create a GradientColor instance with a constant color.\r\n\t * @param constant The constant color.\r\n\t * @returns A new GradientColor instance.\r\n\t * @zh 通过固定颜色创建一个 GradientColor 实例。\r\n\t * @param constant 固定颜色。\r\n\t * @returns 一个新的 GradientColor 实例。\r\n\t */\r\n\tstatic createByConstant(constant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 0;\r\n\t\tgradientColor._constant = constant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a GradientColor instance with a gradient color.\r\n\t * @param gradient The gradient color.\r\n\t * @returns A new GradientColor instance.\r\n\t * @zh 通过渐变颜色创建一个 GradientColor 实例。\r\n\t * @param gradient 渐变色。\r\n\t * @returns 一个新的 GradientColor 实例。\r\n\t */\r\n\tstatic createByGradient(gradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 1;\r\n\t\tgradientColor._gradient = gradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a GradientColor instance with two random constant colors.\r\n\t * @param minConstant The minimum constant color.\r\n\t * @param maxConstant The maximum constant color.\r\n\t * @returns A new GradientColor instance.\r\n\t * @zh 通过随机双固定颜色创建一个 GradientColor 实例。\r\n\t * @param minConstant 最小固定颜色。\r\n\t * @param maxConstant 最大固定颜色。\r\n\t * @returns 一个新的 GradientColor 实例。\r\n\t */\r\n\tstatic createByRandomTwoConstant(minConstant: Vector4, maxConstant: Vector4): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 2;\r\n\t\tgradientColor._constantMin = minConstant;\r\n\t\tgradientColor._constantMax = maxConstant;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a GradientColor instance with two random gradient colors.\r\n\t * @param minGradient The minimum gradient color.\r\n\t * @param maxGradient The maximum gradient color.\r\n\t * @returns A new GradientColor instance.\r\n\t * @zh 通过随机双渐变颜色创建一个 GradientColor 实例。\r\n\t * @param minGradient 最小渐变颜色。\r\n\t * @param maxGradient 最大渐变颜色。\r\n\t * @returns 一个新的 GradientColor 实例。\r\n\t */\r\n\tstatic createByRandomTwoGradient(minGradient: Gradient, maxGradient: Gradient): GradientColor {\r\n\t\tvar gradientColor: GradientColor = new GradientColor();\r\n\t\tgradientColor._type = 3;\r\n\t\tgradientColor._gradientMin = minGradient;\r\n\t\tgradientColor._gradientMax = maxGradient;\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: Vector4 = null;\r\n\tprivate _constantMin: Vector4 = null;\r\n\tprivate _constantMax: Vector4 = null;\r\n\tprivate _gradient: Gradient = null;\r\n\tprivate _gradientMin: Gradient = null;\r\n\tprivate _gradientMax: Gradient = null;\r\n\r\n\t/**\r\n\t * @en The type of lifetime color. 0 for constant color mode, 1 for gradient mode, 2 for random two constant colors mode, 3 for random two gradients mode.\r\n\t * @zh 生命周期颜色类型。0为固定颜色模式，1为渐变模式，2为随机双固定颜色模式，3为随机双渐变模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The constant color.\r\n\t * @zh 固定颜色。\r\n\t */\r\n\tget constant(): Vector4 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum constant color.\r\n\t * @zh 最小固定颜色。\r\n\t */\r\n\tget constantMin(): Vector4 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant color.\r\n\t * @zh 最大固定颜色。\r\n\t */\r\n\tget constantMax(): Vector4 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient color.\r\n\t * @zh 渐变颜色。\r\n\t */\r\n\tget gradient(): Gradient {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient color.\r\n\t * @zh 最小渐变颜色。\r\n\t */\r\n\tget gradientMin(): Gradient {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient color.\r\n\t * @zh 最大渐变颜色。\r\n\t */\r\n\tget gradientMax(): Gradient {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creating an instance via `new` is not allowed; please use the static creation function.\r\n\t * @zh 不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientColor: GradientColor = (<GradientColor>destObject);\r\n\t\tdestGradientColor._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientColor._constant);\r\n\t\tthis._constantMin.cloneTo(destGradientColor._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientColor._constantMax);\r\n\t\tthis._gradient.cloneTo(destGradientColor._gradient);\r\n\t\tthis._gradientMin.cloneTo(destGradientColor._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientColor._gradientMax);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientColor: GradientColor = new GradientColor();\r\n\t\tthis.cloneTo(destGradientColor);\r\n\t\treturn destGradientColor;\r\n\t}\r\n\r\n}","import { GradientColor } from \"./GradientColor\";\r\n/**\r\n * @en The ColorOverLifetime class is used for the lifecycle color of particles.\r\n * @zh ColorOverLifetime 类用于粒子的生命周期颜色。\r\n */\r\nexport class ColorOverLifetime {\r\n\tprivate _color: GradientColor;\r\n\r\n\t/**\r\n\t * @en Whether to enable.\r\n\t * @zh 是否启用。\r\n\t */\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t * @en The color.\r\n\t * @zh 颜色。\r\n\t */\r\n\tget color(): GradientColor {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates an instance of the ColorOverLifetime class.\r\n\t * @param color gradient color.\r\n\t * @zh 创建ColorOverLifetime类的实例。\r\n\t * @param color 渐变颜色。\r\n\t */\r\n\tconstructor(color: GradientColor) {\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = (<ColorOverLifetime>destObject);\r\n\t\tthis._color.cloneTo(destColorOverLifetime._color);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destColor: GradientColor;\r\n\t\tswitch (this._color.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestColor = GradientColor.createByConstant(this._color.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestColor = GradientColor.createByGradient(this._color.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestColor = GradientColor.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destColorOverLifetime: ColorOverLifetime = new ColorOverLifetime(destColor);\r\n\t\tdestColorOverLifetime.enable = this.enable;\r\n\t\treturn destColorOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataInt } from \"./GradientDataInt\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n\r\n/**\r\n * @en The FrameOverTime class is used to create time frames.\r\n * @zh FrameOverTime 类用于创建时间帧。\r\n */\r\nexport class FrameOverTime implements IClone {\r\n    /**\r\n     * @en Create a FrameOverTime instance with a constant frame.\r\n\t * @param constant The constant frame.\r\n\t * @returns The time frame.\r\n     * @zh 通过固定帧创建一个 FrameOverTime 实例。\r\n\t * @param constant 固定帧。\r\n\t * @return 时间帧。\r\n     */\r\n\tstatic createByConstant(constant: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n    /**\r\n     * @en Create a FrameOverTime instance with a time frame.\r\n\t * @param overTime The time frame.\r\n\t * @returns The time frame.\r\n     * @zh 通过时间帧创建一个 FrameOverTime 实例。\r\n\t * @param\toverTime 时间帧。\r\n\t * @return 时间帧。\r\n     */\r\n\tstatic createByOverTime(overTime: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._overTime = overTime;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n    /**\r\n     * @en Create a FrameOverTime instance with random two constant frames.\r\n     * @param constantMin The minimum constant frame.\r\n     * @param constantMax The maximum constant frame.\r\n     * @returns The time frame.\r\n\t * @zh 通过随机双固定帧创建一个 FrameOverTime 实例。\r\n\t * @param\tconstantMin 最小固定帧。\r\n\t * @param\tconstantMax 最大固定帧。\r\n\t * @return 时间帧。\r\n     */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 2;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n    /**\r\n     * @en Create a FrameOverTime instance with random two time frames.\r\n     * @param gradientFrameMin The minimum time frame.\r\n     * @param gradientFrameMax The maximum time frame.\r\n     * @returns The time frame.\r\n\t * @zh 通过随机双时间帧创建一个 FrameOverTime 实例。\r\n\t * @param\tgradientFrameMin 最小时间帧。\r\n\t * @param\tgradientFrameMax 最大时间帧。\r\n\t * @return 时间帧。\r\n     */\r\n\tstatic createByRandomTwoOverTime(gradientFrameMin: GradientDataInt, gradientFrameMax: GradientDataInt): FrameOverTime {\r\n\t\tvar rotationOverLifetime: FrameOverTime = new FrameOverTime();\r\n\t\trotationOverLifetime._type = 3;\r\n\t\trotationOverLifetime._overTimeMin = gradientFrameMin;\r\n\t\trotationOverLifetime._overTimeMax = gradientFrameMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate _constant: number = 0;\r\n\r\n\tprivate _overTime: GradientDataInt = null;\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\tprivate _overTimeMin: GradientDataInt = null;\r\n\tprivate _overTimeMax: GradientDataInt = null;\r\n\r\n    /**\r\n     * @en Lifecycle rotation type, 0: constant mode, 1: curve mode, 2: random double constant mode, 3: random double curve mode.\r\n     * @zh 生命周期旋转类型，0：常量模式，1：曲线模式，2：随机双常量模式，3：随机双曲线模式。\r\n     */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n    /**\r\n     * @en Constant frame.\r\n     * @zh 固定帧。\r\n     */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n    /**\r\n     * @en Time frame.\r\n     * @zh 时间帧。\r\n     */\r\n\tget frameOverTimeData(): GradientDataInt {\r\n\t\treturn this._overTime;\r\n\t}\r\n\r\n    /**\r\n     * @en Minimum constant frame.\r\n     * @zh 最小固定帧。\r\n     */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n    /**\r\n     * @en Maximum constant frame.\r\n     * @zh 最大固定帧。\r\n     */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n    /**\r\n     * @en Minimum time frame.\r\n     * @zh 最小时间帧。\r\n     */\r\n\tget frameOverTimeDataMin(): GradientDataInt {\r\n\t\treturn this._overTimeMin;\r\n\t}\r\n\r\n    /**\r\n     * @en Maximum time frame.\r\n     * @zh 最大时间帧。\r\n     */\r\n\tget frameOverTimeDataMax(): GradientDataInt {\r\n\t\treturn this._overTimeMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creation via `new` is not allowed; please use the static creation function.\r\n\t * @zh 不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destFrameOverTime: FrameOverTime = (<FrameOverTime>destObject);\r\n\t\tdestFrameOverTime._type = this._type;\r\n\t\tdestFrameOverTime._constant = this._constant;\r\n\t\t(this._overTime) && (this._overTime.cloneTo(destFrameOverTime._overTime));\r\n\t\tdestFrameOverTime._constantMin = this._constantMin;\r\n\t\tdestFrameOverTime._constantMax = this._constantMax;\r\n\t\t(this._overTimeMin) && (this._overTimeMin.cloneTo(destFrameOverTime._overTimeMin));\r\n\t\t(this._overTimeMax) && (this._overTimeMax.cloneTo(destFrameOverTime._overTimeMax));\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrameOverTime: FrameOverTime = new FrameOverTime();\r\n\t\tthis.cloneTo(destFrameOverTime);\r\n\t\treturn destFrameOverTime;\r\n\t}\r\n\r\n}","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The `GradientDataNumber` class is used to create floating-point gradients.\r\n * @zh `GradientDataNumber` 类用于创建浮点渐变。\r\n */\r\nexport class GradientDataNumber implements IClone {\r\n\t/**\r\n\t * @internal\r\n\t * @en Create a constant gradient curve data.\r\n\t * @param constantValue The constant value for the gradient.\r\n\t * @returns A new GradientDataNumber instance with constant value.\r\n\t * @zh 创建一个常数渐变曲线数据。\r\n\t * @param constantValue 常数值。\r\n\t * @returns 包含常数值的 GradientDataNumber 实例。\r\n\t */\r\n\tstatic createConstantData(constantValue: number) {\r\n\t\tlet gradientData = new GradientDataNumber();\r\n\t\tgradientData.add(0, constantValue);\r\n\t\tgradientData.add(1, constantValue);\r\n\t\treturn gradientData;\r\n\t}\r\n\r\n\tprivate _currentLength: number = 0;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_dataBuffer: Float32Array;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _elements(): Float32Array {\r\n\t\treturn this._dataBuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _elements(value: Float32Array) {\r\n\t\tlet currentLength = value.length;\r\n\t\tcurrentLength = currentLength > 8 ? 8 : currentLength;\r\n\t\tthis._currentLength = currentLength;\r\n\t\tthis._dataBuffer.set(value);\r\n\t\tthis._formatData();\r\n\t}\r\n\r\n\t/**@internal 曲线编辑范围*/\r\n\t_curveMin: number;\r\n\t/**@internal 曲线编辑范围*/\r\n\t_curveMax: number;\r\n\t/**\r\n\t * @en The number of gradient floats.\r\n\t * @zh 渐变浮点数量。\r\n\t */\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates an instance of the GradientDataNumber class.\r\n\t * @zh 创建一个 GradientDataNumber 类的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\t// this._elements = new Float32Array(8);\r\n\t\tthis._dataBuffer = new Float32Array(8);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Format data, ensure the maximum value is 1.\r\n\t * @zh 格式化数据，确保数据的最大值为 1。\r\n\t */\r\n\t_formatData() {\r\n\t\tif (this._currentLength == 8) return;\r\n\t\tif (this._elements[this._currentLength - 2] !== 1) {\r\n\t\t\tthis._elements[this._currentLength] = 1;\r\n\t\t\tthis._elements[this._currentLength + 1] = this._elements[this._currentLength - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a floating-point gradient.\r\n\t * @param key Lifecycle, ranging from 0 to 1.\r\n\t * @param value The float value.\r\n\t * @zh 增加浮点渐变。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value 浮点值。\r\n\t */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataNumber warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataNumber warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the key by index.\r\n\t * @param index The index.\r\n\t * @returns The key.\r\n\t * @zh 通过索引获取键。\r\n\t * @param index 索引。\r\n\t * @returns 键。\r\n\t */\r\n\tgetKeyByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the value by index.\r\n\t * @param index The index.\r\n\t * @returns The value.\r\n\t * @zh 通过索引获取值。\r\n\t * @param index 索引。\r\n\t * @returns 值。\r\n\t */\r\n\tgetValueByIndex(index: number): number {\r\n\t\treturn this._elements[index * 2 + 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the average value.\r\n\t * @returns The average value of the gradient.\r\n\t * @zh 获取平均值。\r\n\t * @returns 渐变的平均值。\r\n\t */\r\n\tgetAverageValue(): number {\r\n\t\tvar total: number = 0;\r\n\t\tvar count: number = 0;\r\n\t\tfor (var i: number = 0, n: number = this._currentLength - 2; i < n; i += 2) {\r\n\t\t\tvar subValue: number = this._elements[i + 1];\r\n\t\t\tsubValue += this._elements[i + 3];\r\n\t\t\tsubValue = subValue * (this._elements[i + 2] - this._elements[i]);\r\n\t\t\ttotal += subValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\treturn total / count;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = <GradientDataNumber>destObject;\r\n\t\tdestGradientDataNumber._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataNumber._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++)\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataNumber: GradientDataNumber = new GradientDataNumber();\r\n\t\tthis.cloneTo(destGradientDataNumber);\r\n\t\treturn destGradientDataNumber;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * @en The GradientAngularVelocity class is used to create gradient angular velocities.\r\n * @zh GradientAngularVelocity 类用于创建渐变角速度。\r\n */\r\nexport class GradientAngularVelocity implements IClone {\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with a constant angular velocity.\r\n\t * @param constant The constant angular velocity.\r\n\t * @return The gradient angular velocity.\r\n\t * @zh 通过固定角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param\tconstant 固定角速度。\r\n\t * @return 渐变角速度。\r\n\t */\r\n\tstatic createByConstant(constant: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constant = constant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with separate constant angular velocities for each axis.\r\n\t * @param separateConstant The separate constant angular velocities for each axis.\r\n\t * @return The gradient angular velocity instance.\r\n\t * @zh 通过分轴固定角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param separateConstant  分轴固定角速度。\r\n\t * @return 渐变角速度实例。\r\n\t */\r\n\tstatic createByConstantSeparate(separateConstant: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 0;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantSeparate = separateConstant;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with a gradient angular velocity.\r\n\t * @param gradient The gradient angular velocity.\r\n\t * @return The gradient angular velocity instance.\r\n\t * @zh 通过渐变角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param gradient 渐变角速度。\r\n\t * @return 渐变角速度实例。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradient = gradient;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with separate gradient angular velocities for each axis.\r\n\t * @param gradientX The gradient angular velocity for the X-axis.\r\n\t * @param gradientY The gradient angular velocity for the Y-axis.\r\n\t * @param gradientZ The gradient angular velocity for the Z-axis.\r\n\t * @returns The gradient angular velocity instance.\r\n\t * @zh 通过分轴渐变角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param gradientX X轴渐变角速度。\r\n\t * @param gradientY Y轴渐变角速度。\r\n\t * @param gradientZ Z轴渐变角速度。\r\n\t * @returns 渐变角速度实例。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 1;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientX = gradientX;\r\n\t\tgradientAngularVelocity._gradientY = gradientY;\r\n\t\tgradientAngularVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with random constant angular velocities between two values.\r\n\t * @param constantMin The minimum constant angular velocity.\r\n\t * @param constantMax The maximum constant angular velocity.\r\n\t * @returns The gradient angular velocity instance.\r\n\t * @zh 通过随机双固定角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param constantMin 最小固定角速度。\r\n\t * @param constantMax 最大固定角速度。\r\n\t * @returns 渐变角速度实例。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._constantMin = constantMin;\r\n\t\tgradientAngularVelocity._constantMax = constantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with random separate constant angular velocities between two values for each axis.\r\n\t * @param separateConstantMin The minimum separate constant angular velocities for each axis.\r\n\t * @param separateConstantMax The maximum separate constant angular velocities for each axis.\r\n\t * @returns The gradient angular velocity instance.\r\n\t * @zh 通过随机分轴双固定角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param separateConstantMin 最小分轴固定角速度。\r\n\t * @param separateConstantMax 最大分轴固定角速度。\r\n\t * @returns 渐变角速度实例。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(separateConstantMin: Vector3, separateConstantMax: Vector3): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 2;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._constantMinSeparate = separateConstantMin;\r\n\t\tgradientAngularVelocity._constantMaxSeparate = separateConstantMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with random gradient angular velocities between two gradients.\r\n\t * @param gradientMin The minimum gradient angular velocity.\r\n\t * @param gradientMax The maximum gradient angular velocity.\r\n\t * @returns The gradient angular velocity instance.\r\n\t * @zh 通过随机双渐变角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param gradientMin 最小渐变角速度。\r\n\t * @param gradientMax 最大渐变角速度。\r\n\t * @returns 渐变角速度实例。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = false;\r\n\t\tgradientAngularVelocity._gradientMin = gradientMin;\r\n\t\tgradientAngularVelocity._gradientMax = gradientMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientAngularVelocity` instance with random separate gradient angular velocities between two gradients for each axis.\r\n\t * @param gradientXMin The minimum gradient angular velocity for the X-axis.\r\n\t * @param gradientXMax The maximum gradient angular velocity for the X-axis.\r\n\t * @param gradientYMin The minimum gradient angular velocity for the Y-axis.\r\n\t * @param gradientYMax The maximum gradient angular velocity for the Y-axis.\r\n\t * @param gradientZMin The minimum gradient angular velocity for the Z-axis.\r\n\t * @param gradientZMax The maximum gradient angular velocity for the Z-axis.\r\n\t * @param gradientWMin Reserved data.\r\n\t * @param gradientWMax Reserved data.\r\n\t * @returns The gradient angular velocity instance.\r\n\t * @zh 通过分轴随机双渐变角速度创建一个 `GradientAngularVelocity` 实例。\r\n\t * @param gradientXMin 最小X轴渐变角速度。\r\n\t * @param gradientXMax 最大X轴渐变角速度。\r\n\t * @param gradientYMin 最小Y轴渐变角速度。\r\n\t * @param gradientYMax 最大Y轴渐变角速度。\r\n\t * @param gradientZMin 最小Z轴渐变角速度。\r\n\t * @param gradientZMax 最大Z轴渐变角速度。\r\n\t * @param gradientWMin 预留数据。\r\n\t * @param gradientWMax 预留数据。\r\n\t * @returns 渐变角速度实例。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber, gradientWMin: GradientDataNumber, gradientWMax: GradientDataNumber): GradientAngularVelocity {\r\n\t\tvar gradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tgradientAngularVelocity._type = 3;\r\n\t\tgradientAngularVelocity._separateAxes = true;\r\n\t\tgradientAngularVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientAngularVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientAngularVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientAngularVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientAngularVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientAngularVelocity._gradientZMax = gradientZMax;\r\n\t\tgradientAngularVelocity._gradientWMin = gradientWMin;\r\n\t\tgradientAngularVelocity._gradientWMax = gradientWMax;\r\n\t\treturn gradientAngularVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\r\n\r\n\r\n\tprivate __constantSeparate: Vector3 = null;\r\n\t/**\r\n\t * @en The separate constant angular velocities for each axis.\r\n\t * @zh 分轴固定角速度。\r\n\t */\r\n\tpublic get _constantSeparate(): Vector3 {\r\n\t\treturn this.__constantSeparate;\r\n\t}\r\n\tpublic set _constantSeparate(value: Vector3) {\r\n\t\tthis.__constantSeparate = value.clone();\r\n\t\tthis._constantXGradientDdata = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._constantYGradientDdata = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._constantZGradientDdata = GradientDataNumber.createConstantData(value.z);\r\n\r\n\t}\r\n\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\tprivate _gradientW: GradientDataNumber = null;\r\n\r\n\r\n\t/**@internal */\r\n\t_constantGradientDdata: GradientDataNumber = null;\r\n\t/**@internal */\r\n\t_constantMinGradientDdata: GradientDataNumber = null;\r\n\t/**@internal */\r\n\t_constantMaxGradientDdata: GradientDataNumber = null;\r\n\r\n\tprivate __constant: number = 0;\r\n\tprivate __constantMin: number = 0;\r\n\tprivate __constantMax: number = 0;\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tpublic get _constant(): number {\r\n\t\treturn this.__constant;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tpublic set _constant(value: number) {\r\n\t\tthis.__constant = value;\r\n\t\tthis._constantGradientDdata = GradientDataNumber.createConstantData(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _constantMin() {\r\n\t\treturn this.__constantMin;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _constantMin(value: number) {\r\n\t\tthis.__constantMin = value;\r\n\t\tthis._constantMinGradientDdata = GradientDataNumber.createConstantData(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget _constantMax() {\r\n\t\treturn this.__constantMax;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset _constantMax(value: number) {\r\n\t\tthis.__constantMax = value;\r\n\t\tthis._constantMaxGradientDdata = GradientDataNumber.createConstantData(value);\r\n\t}\r\n\r\n\tprivate __constantMinSeparate: Vector3 = null;\r\n\tprivate __constantMaxSeparate: Vector3 = null;\r\n\t//@internal\r\n\t_constantXGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantYGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantZGradientDdata: GradientDataNumber = null;\r\n\r\n\t//@internal\r\n\t_constantXMinGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantYMinGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantZMinGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantXMaxGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantYMaxGradientDdata: GradientDataNumber = null;\r\n\t//@internal\r\n\t_constantZMaxGradientDdata: GradientDataNumber = null;\r\n\t/**\r\n\t * @en The minimum constant separate vector.\r\n\t * @zh 最小常量分离向量。\r\n\t */\r\n\tpublic get _constantMinSeparate(): Vector3 {\r\n\t\treturn this.__constantMinSeparate;\r\n\t}\r\n\tpublic set _constantMinSeparate(value: Vector3) {\r\n\t\tthis.__constantMinSeparate = value.clone();\r\n\t\tthis._constantXMinGradientDdata = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._constantYMinGradientDdata = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._constantZMinGradientDdata = GradientDataNumber.createConstantData(value.z);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant separate vector.\r\n\t * @zh 最大常量分离向量。\r\n\t */\r\n\tpublic get _constantMaxSeparate(): Vector3 {\r\n\t\treturn this.__constantMaxSeparate;\r\n\t}\r\n\tpublic set _constantMaxSeparate(value: Vector3) {\r\n\t\tthis.__constantMaxSeparate = value;\r\n\t\tthis._constantXMaxGradientDdata = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._constantYMaxGradientDdata = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._constantZMaxGradientDdata = GradientDataNumber.createConstantData(value.z);\r\n\t}\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\tprivate _gradientWMin: GradientDataNumber = null;\r\n\tprivate _gradientWMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t * @en The type of lifetime angular velocity. 0: Constant mode, 1: Curve mode, 2: Random between two constants mode, 3: Random between two curves mode.\r\n\t * @zh 生命周期角速度类型。0：常量模式，1：曲线模式，2：随机双常量模式，3：随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the axes are separated.\r\n\t * @zh 是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The constant angular velocity.\r\n\t * @zh 固定角速度。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The constant angular velocity for separate axes.\r\n\t * @zh 分轴固定角速度。\r\n\t */\r\n\tget constantSeparate(): Vector3 {\r\n\t\treturn this._constantSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient angular velocity.\r\n\t * @zh 渐变角速度。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient angular velocity for X axis.\r\n\t * @zh X轴渐变角速度。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient angular velocity for Y axis.\r\n\t * @zh Y轴渐变角速度。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient angular velocity for Z axis.\r\n\t * @zh Z轴渐变角速度。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient angular velocity for W component.\r\n\t * @zh W分量渐变角速度。\r\n\t */\r\n\tget gradientW(): GradientDataNumber {\r\n\t\treturn this._gradientW;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum constant angular velocity for random between two constants mode.\r\n\t * @zh 随机双固定角速度的最小值。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant angular velocity for random between two constants mode.\r\n\t * @zh 随机双固定角速度的最大值。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum constant angular velocity for separate axes in random between two constants mode.\r\n\t * @zh 分轴随机双固定角速度的最小值。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant angular velocity for separate axes in random between two constants mode.\r\n\t * @zh 分轴随机双固定角速度的最大值。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient angular velocity.\r\n\t * @zh 最小渐变角速度。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient angular velocity.\r\n\t * @zh 最大渐变角速度。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient angular velocity for X axis.\r\n\t * @zh X轴最小渐变角速度。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient angular velocity for X axis.\r\n\t * @zh X轴最大渐变角速度。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient angular velocity for Y axis.\r\n\t * @zh Y轴最小渐变角速度。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient angular velocity for Y axis.\r\n\t * @zh Y轴最大渐变角速度。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient angular velocity for Z axis.\r\n\t * @zh Z轴最小渐变角速度。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient angular velocity for Z axis.\r\n\t * @zh Z轴最大渐变角速度。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient angular velocity for W axis.\r\n\t * @zh W轴最小渐变角速度。\r\n\t */\r\n\tget gradientWMin(): GradientDataNumber {\r\n\t\treturn this._gradientWMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient angular velocity for W axis.\r\n\t * @zh W轴最大渐变角速度。\r\n\t */\r\n\tget gradientWMax(): GradientDataNumber {\r\n\t\treturn this._gradientWMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creating an instance via `new` is not allowed; please use the static creation function.\r\n\t * @zh 不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = (<GradientAngularVelocity>destObject);\r\n\t\tdestGradientAngularVelocity._type = this._type;\r\n\t\tdestGradientAngularVelocity._separateAxes = this._separateAxes;\r\n\t\tdestGradientAngularVelocity._constant = this._constant;\r\n\t\tthis._constantSeparate.cloneTo(destGradientAngularVelocity._constantSeparate);\r\n\t\tthis._gradient.cloneTo(destGradientAngularVelocity._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientAngularVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientAngularVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientAngularVelocity._gradientZ);\r\n\t\tdestGradientAngularVelocity._constantMin = this._constantMin;\r\n\t\tdestGradientAngularVelocity._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientAngularVelocity._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientAngularVelocity._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientAngularVelocity._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientAngularVelocity._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientAngularVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientAngularVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientAngularVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientAngularVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientAngularVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientAngularVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientAngularVelocity: GradientAngularVelocity = new GradientAngularVelocity();\r\n\t\tthis.cloneTo(destGradientAngularVelocity);\r\n\t\treturn destGradientAngularVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The GradientDataInt class is used to create integer gradients.\r\n * @zh GradientDataInt 类用于创建整形渐变。\r\n */\r\nexport class GradientDataInt implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n    /**\r\n     * @internal\r\n     * @en Developers are prohibited from modifying this.\r\n     * @zh 开发者禁止修改。\r\n     */\r\n\t_elements: Float32Array;//TODO:是否用int\r\n\r\n    /**\r\n     * @internal\r\n     * @en Curve editing range (minimum).\r\n     * @zh 曲线编辑范围（最小值）。\r\n     */\r\n\t_curveMin: number = 0;\r\n    /**\r\n     * @internal\r\n     * @en Curve editing range (maximum).\r\n     * @zh 曲线编辑范围（最大值）。\r\n     */\r\n\t_curveMax: number = 1;\r\n\r\n    /**\r\n     * @en The number of integer gradients.\r\n     * @zh 整形渐变数量。\r\n     */\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates an instance of the GradientDataInt class.\r\n\t * @zh 创建一个 GradientDataInt 类的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(8);\r\n\t}\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en Format the data to ensure the maximum value is 1.\r\n     * @zh 格式化数据；保证数据的最大值为1。\r\n     */\r\n\t_formatData() {\r\n\t\tif (this._currentLength == 8) return;\r\n\t\tif (this._elements[this._currentLength - 2] !== 1) {\r\n\t\t\tthis._elements[this._currentLength] = 1;\r\n\t\t\tthis._elements[this._currentLength + 1] = this._elements[this._currentLength - 1];\r\n\t\t}\r\n\t}\r\n\r\n    /**\r\n     * @en Add an integer gradient.\r\n     * @param key - The lifecycle key, ranging from 0 to 1.\r\n     * @param value - The integer value.\r\n\t * @zh 增加整形渐变。\r\n     * @param key - 生命周期，范围为0到1。\r\n     * @param value - 整形值。\r\n     */\r\n\tadd(key: number, value: number): void {\r\n\t\tif (this._currentLength < 8) {\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"Warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"Warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataInt: GradientDataInt = <GradientDataInt>destObject;\r\n\t\tdestGradientDataInt._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataInt._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataInt: GradientDataInt = new GradientDataInt();\r\n\t\tthis.cloneTo(destGradientDataInt);\r\n\t\treturn destGradientDataInt;\r\n\t}\r\n\r\n}","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en The `GradientSize` class is used to create gradient sizes.\r\n * @zh `GradientSize` 类用于创建渐变尺寸。\r\n */\r\nexport class GradientSize implements IClone {\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by gradient size.\r\n\t * @param gradient  The gradient size.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过渐变尺寸创建一个 `GradientSize` 实例。\r\n\t * @param gradient 渐变尺寸。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByGradient(gradient: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradient = gradient;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by separate axis gradient sizes.\r\n\t * @param gradientX The gradient size for X axis.\r\n\t * @param gradientY The gradient size for Y axis.\r\n\t * @param gradientZ The gradient size for Z axis.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过分轴渐变尺寸创建一个 `GradientSize` 实例。\r\n\t * @param gradientX 渐变尺寸X。\r\n\t * @param gradientY 渐变尺寸Y。\r\n\t * @param gradientZ 渐变尺寸Z。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 0;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientX = gradientX;\r\n\t\tgradientSize._gradientY = gradientY;\r\n\t\tgradientSize._gradientZ = gradientZ;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by random two constant sizes.\r\n\t * @param constantMin The minimum constant size.\r\n\t * @param constantMax The maximum constant size.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过随机双固定尺寸创建一个 `GradientSize` 实例。\r\n\t * @param constantMin 最小固定尺寸。\r\n\t * @param constantMax 最大固定尺寸。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number, constantMax: number): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._constantMin = constantMin;\r\n\t\tgradientSize._constantMax = constantMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by separate axis random two constant sizes.\r\n\t * @param constantMinSeparate The minimum constant size for separate axes.\r\n\t * @param constantMaxSeparate The maximum constant size for separate axes.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过分轴随机双固定尺寸创建一个 `GradientSize` 实例。\r\n\t * @param constantMinSeparate 分轴最小固定尺寸。\r\n\t * @param constantMaxSeparate 分轴最大固定尺寸。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByRandomTwoConstantSeparate(constantMinSeparate: Vector3, constantMaxSeparate: Vector3): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 1;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._constantMinSeparate = constantMinSeparate;\r\n\t\tgradientSize._constantMaxSeparate = constantMaxSeparate;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by random two gradient sizes.\r\n\t * @param gradientMin The minimum gradient size.\r\n\t * @param gradientMax The maximum gradient size.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过随机双渐变尺寸创建一个 `GradientSize` 实例。\r\n\t * @param gradientMin 最小渐变尺寸。\r\n\t * @param gradientMax 最大渐变尺寸。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = false;\r\n\t\tgradientSize._gradientMin = gradientMin;\r\n\t\tgradientSize._gradientMax = gradientMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientSize` instance by separate axis random two gradient sizes.\r\n\t * @param gradientXMin The minimum gradient size for X axis.\r\n\t * @param gradientXMax The maximum gradient size for X axis.\r\n\t * @param gradientYMin The minimum gradient size for Y axis.\r\n\t * @param gradientYMax The maximum gradient size for Y axis.\r\n\t * @param gradientZMin The minimum gradient size for Z axis.\r\n\t * @param gradientZMax The maximum gradient size for Z axis.\r\n\t * @returns The gradient size instance.\r\n\t * @zh 通过分轴随机双渐变尺寸创建一个 `GradientSize` 实例。\r\n\t * @param gradientXMin X轴最小渐变尺寸。\r\n\t * @param gradientXMax X轴最大渐变尺寸。\r\n\t * @param gradientYMin Y轴最小渐变尺寸。\r\n\t * @param gradientYMax Y轴最大渐变尺寸。\r\n\t * @param gradientZMin Z轴最小渐变尺寸。\r\n\t * @param gradientZMax Z轴最大渐变尺寸。\r\n\t * @returns 渐变尺寸实例。\r\n\t */\r\n\tstatic createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientSize {\r\n\t\tvar gradientSize: GradientSize = new GradientSize();\r\n\t\tgradientSize._type = 2;\r\n\t\tgradientSize._separateAxes = true;\r\n\t\tgradientSize._gradientXMin = gradientXMin;\r\n\t\tgradientSize._gradientXMax = gradientXMax;\r\n\t\tgradientSize._gradientYMin = gradientYMin;\r\n\t\tgradientSize._gradientYMax = gradientYMax;\r\n\t\tgradientSize._gradientZMin = gradientZMin;\r\n\t\tgradientSize._gradientZMax = gradientZMax;\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _separateAxes: boolean = false;\r\n\r\n\tprivate _gradient: GradientDataNumber = null;\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\tprivate _constantMinSeparate: Vector3 = null;\r\n\tprivate _constantMaxSeparate: Vector3 = null;\r\n\r\n\r\n\tprivate _gradientMin: GradientDataNumber = null;\r\n\tprivate _gradientMax: GradientDataNumber = null;\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t * @en The type of lifecycle size. 0: Curve mode, 1: Random double constant mode, 2: Random double curve mode.\r\n\t * @zh 生命周期尺寸类型，0：曲线模式，1：随机双常量模式，2：随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether to separate axes.\r\n\t * @zh 是否分轴。\r\n\t */\r\n\tget separateAxes(): boolean {\r\n\t\treturn this._separateAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient size.\r\n\t * @zh 渐变尺寸。\r\n\t */\r\n\tget gradient(): GradientDataNumber {\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient size for X axis.\r\n\t * @zh 渐变尺寸X。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient size for Y axis.\r\n\t * @zh 渐变尺寸Y。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient size for Z axis.\r\n\t * @zh 渐变尺寸Z。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum random double constant size.\r\n\t * @zh 最小随机双固定尺寸。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum random double constant size.\r\n\t * @zh 最大随机双固定尺寸。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum separate axis random double constant size.\r\n\t * @zh 最小分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMinSeparate(): Vector3 {\r\n\t\treturn this._constantMinSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum separate axis random double constant size.\r\n\t * @zh 最大分轴随机双固定尺寸。\r\n\t */\r\n\tget constantMaxSeparate(): Vector3 {\r\n\t\treturn this._constantMaxSeparate;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient size.\r\n\t * @zh 渐变最小尺寸。\r\n\t */\r\n\tget gradientMin(): GradientDataNumber {\r\n\t\treturn this._gradientMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient size.\r\n\t * @zh 渐变最大尺寸。\r\n\t */\r\n\tget gradientMax(): GradientDataNumber {\r\n\t\treturn this._gradientMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient size for X axis.\r\n\t * @zh 渐变最小尺寸X。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient size for X axis.\r\n\t * @zh 渐变最大尺寸X。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient size for Y axis.\r\n\t * @zh 渐变最小尺寸Y。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient size for Y axis.\r\n\t * @zh 渐变最大尺寸Y。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient size for Z axis.\r\n\t * @zh 渐变最小尺寸Z。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient size for Z axis.\r\n\t * @zh 渐变最大尺寸Z。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Constructor, not allowed to use \"new\", please use the static creation function.\r\n\t * @zh 构造方法。不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @en Retrieves the maximum size within a gradient, based on the specified parameters and mode.\r\n\t * @param meshMode Indicates whether the calculation is for mesh mode.\r\n\t * @returns The maximum size found in the gradient.\r\n\t * @zh 获取渐变中的最大尺寸。\r\n\t * @param\tmeshMode 是否是网格模式\r\n\t * @returns 返回渐变中找到的最大尺寸。\r\n\t */\r\n\tgetMaxSizeInGradient(meshMode: boolean = false): number {\r\n\t\tvar i: number, n: number;\r\n\t\tvar maxSize: number = -Number.MAX_VALUE;\r\n\t\tswitch (this._type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientX.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientX.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientY.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientY.getValueByIndex(i));\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZ.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZ.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradient.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradient.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x);\r\n\t\t\t\t\tmaxSize = Math.max(maxSize, this._constantMinSeparate.y);\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tmaxSize = maxSize = Math.max(maxSize, this._constantMaxSeparate.z);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmaxSize = Math.max(this._constantMin, this._constantMax);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._separateAxes) {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientXMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientXMax.getValueByIndex(i));\r\n\r\n\t\t\t\t\tfor (i = 0, n = this._gradientYMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientYMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\r\n\t\t\t\t\tif (meshMode) {\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMin.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMin.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (i = 0, n = this._gradientZMax.gradientCount; i < n; i++) {\r\n\t\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientZMax.getValueByIndex(i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMin.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMin.getValueByIndex(i));\r\n\t\t\t\t\tfor (i = 0, n = this._gradientMax.gradientCount; i < n; i++)\r\n\t\t\t\t\t\tmaxSize = Math.max(maxSize, this._gradientMax.getValueByIndex(i));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientSize: GradientSize = (<GradientSize>destObject);\r\n\t\tdestGradientSize._type = this._type;\r\n\t\tdestGradientSize._separateAxes = this._separateAxes;\r\n\t\tthis._gradient.cloneTo(destGradientSize._gradient);\r\n\t\tthis._gradientX.cloneTo(destGradientSize._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientSize._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientSize._gradientZ);\r\n\t\tdestGradientSize._constantMin = this._constantMin;\r\n\t\tdestGradientSize._constantMax = this._constantMax;\r\n\t\tthis._constantMinSeparate.cloneTo(destGradientSize._constantMinSeparate);\r\n\t\tthis._constantMaxSeparate.cloneTo(destGradientSize._constantMaxSeparate);\r\n\t\tthis._gradientMin.cloneTo(destGradientSize._gradientMin);\r\n\t\tthis._gradientMax.cloneTo(destGradientSize._gradientMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientSize._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientSize._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientSize._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientSize._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientSize._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientSize._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientSize: GradientSize = new GradientSize();\r\n\t\tthis.cloneTo(destGradientSize);\r\n\t\treturn destGradientSize;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientDataNumber } from \"./GradientDataNumber\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en The `GradientVelocity` class is used to create gradient velocities.\r\n * @zh `GradientVelocity` 类用于创建渐变速度。\r\n */\r\nexport class GradientVelocity implements IClone {\r\n\t/**\r\n\t * @en Create a `GradientVelocity` instance with constant velocity.\r\n\t * @param constant The constant velocity.\r\n\t * @returns The gradient velocity instance.\r\n\t * @zh 通过固定速度创建一个 `GradientVelocity` 实例。\r\n\t * @param constant 固定速度。\r\n\t * @returns 渐变速度实例。\r\n\t */\r\n\tstatic createByConstant(constant: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 0;\r\n\t\tgradientVelocity._constant = constant;\r\n\t\tgradientVelocity._gradientConstantXMin = GradientDataNumber.createConstantData(constant.x);\r\n\t\tgradientVelocity._gradientConstantYMin = GradientDataNumber.createConstantData(constant.y);\r\n\t\tgradientVelocity._gradientConstantZMin = GradientDataNumber.createConstantData(constant.z);\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientVelocity` instance with gradient velocities.\r\n\t * @param gradientX Gradient velocity for X axis.\r\n\t * @param gradientY Gradient velocity for Y axis.\r\n\t * @param gradientZ Gradient velocity for Z axis.\r\n\t * @returns The gradient velocity instance.\r\n\t * @zh 通过渐变速度创建一个 `GradientVelocity` 实例。\r\n\t * @param gradientX 渐变速度X。\r\n\t * @param gradientY 渐变速度Y。\r\n\t * @param gradientZ 渐变速度Z。\r\n\t * @returns 渐变速度实例。\r\n\t */\r\n\tstatic createByGradient(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 1;\r\n\t\tgradientVelocity._gradientX = gradientX;\r\n\t\tgradientVelocity._gradientY = gradientY;\r\n\t\tgradientVelocity._gradientZ = gradientZ;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientVelocity` instance with random two constant velocities.\r\n\t * @param constantMin The minimum constant velocity.\r\n\t * @param constantMax The maximum constant velocity.\r\n\t * @returns The gradient velocity instance.\r\n\t * @zh 通过随机双固定速度创建一个 `GradientVelocity` 实例。\r\n\t * @param constantMin 最小固定速度。\r\n\t * @param constantMax 最大固定速度。\r\n\t * @returns 渐变速度实例。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: Vector3, constantMax: Vector3): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 2;\r\n\t\tgradientVelocity._constantMin = constantMin;\r\n\t\tgradientVelocity._constantMax = constantMax;\r\n\r\n\r\n\t\tgradientVelocity._gradientConstantXMin = GradientDataNumber.createConstantData(constantMin.x);\r\n\t\tgradientVelocity._gradientConstantXMax = GradientDataNumber.createConstantData(constantMax.x);\r\n\t\tgradientVelocity._gradientConstantYMin = GradientDataNumber.createConstantData(constantMin.y);\r\n\t\tgradientVelocity._gradientConstantYMax = GradientDataNumber.createConstantData(constantMax.y);\r\n\t\tgradientVelocity._gradientConstantZMin = GradientDataNumber.createConstantData(constantMin.z);\r\n\t\tgradientVelocity._gradientConstantZMax = GradientDataNumber.createConstantData(constantMax.z);\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `GradientVelocity` instance with random two gradient velocities.\r\n\t * @param gradientXMin Minimum gradient velocity for X axis.\r\n\t * @param gradientXMax Maximum gradient velocity for X axis.\r\n\t * @param gradientYMin Minimum gradient velocity for Y axis.\r\n\t * @param gradientYMax Maximum gradient velocity for Y axis.\r\n\t * @param gradientZMin Minimum gradient velocity for Z axis.\r\n\t * @param gradientZMax Maximum gradient velocity for Z axis.\r\n\t * @returns The gradient velocity instance.\r\n\t * @zh 通过随机双渐变速度创建一个 `GradientVelocity` 实例。\r\n\t * @param gradientXMin X轴最小渐变速度。\r\n\t * @param gradientXMax X轴最大渐变速度。\r\n\t * @param gradientYMin Y轴最小渐变速度。\r\n\t * @param gradientYMax Y轴最大渐变速度。\r\n\t * @param gradientZMin Z轴最小渐变速度。\r\n\t * @param gradientZMax Z轴最大渐变速度。\r\n\t * @returns 渐变速度实例。\r\n\t */\r\n\tstatic createByRandomTwoGradient(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientVelocity {\r\n\t\tvar gradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tgradientVelocity._type = 3;\r\n\t\tgradientVelocity._gradientXMin = gradientXMin;\r\n\t\tgradientVelocity._gradientXMax = gradientXMax;\r\n\t\tgradientVelocity._gradientYMin = gradientYMin;\r\n\t\tgradientVelocity._gradientYMax = gradientYMax;\r\n\t\tgradientVelocity._gradientZMin = gradientZMin;\r\n\t\tgradientVelocity._gradientZMax = gradientZMax;\r\n\t\treturn gradientVelocity;\r\n\t}\r\n\r\n\tprivate _type: number = 0;\r\n\r\n\tprivate __constant: Vector3 = null;\r\n\t/**\r\n\t * @en The constant velocity.\r\n\t * @zh 固定速度。\r\n\t */\r\n\tpublic get _constant(): Vector3 {\r\n\t\treturn this.__constant;\r\n\t}\r\n\tpublic set _constant(value: Vector3) {\r\n\t\tthis.__constant = value;\r\n\t\tthis._gradientConstantX = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._gradientConstantY = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._gradientConstantZ = GradientDataNumber.createConstantData(value.z);\r\n\t}\r\n\r\n\r\n\tprivate __constantMin: Vector3 = null;\r\n\t/**\r\n\t * @en The minimum constant velocity.\r\n\t * @zh 最小固定速度。\r\n\t */\r\n\tpublic get _constantMin(): Vector3 {\r\n\t\treturn this.__constantMin;\r\n\t}\r\n\r\n\tpublic set _constantMin(value: Vector3) {\r\n\t\tthis.__constantMin = value;\r\n\t\tthis._gradientConstantXMin = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._gradientConstantYMin = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._gradientConstantZMin = GradientDataNumber.createConstantData(value.z);\r\n\t}\r\n\r\n\tprivate __constantMax: Vector3 = null;\r\n\t/**\r\n\t * @en The maximum constant velocity.\r\n\t * @zh 最大固定速度。\r\n\t */\r\n\tpublic get _constantMax(): Vector3 {\r\n\t\treturn this.__constantMax;\r\n\t}\r\n\tpublic set _constantMax(value: Vector3) {\r\n\t\tthis.__constantMax = value;\r\n\t\tthis._gradientConstantXMax = GradientDataNumber.createConstantData(value.x);\r\n\t\tthis._gradientConstantYMax = GradientDataNumber.createConstantData(value.y);\r\n\t\tthis._gradientConstantZMax = GradientDataNumber.createConstantData(value.z);\r\n\t}\r\n\r\n\tprivate _gradientConstantX: GradientDataNumber = null;\r\n\tprivate _gradientConstantY: GradientDataNumber = null;\r\n\tprivate _gradientConstantZ: GradientDataNumber = null;\r\n\r\n\tprivate _gradientConstantXMin: GradientDataNumber = null;\r\n\tprivate _gradientConstantXMax: GradientDataNumber = null;\r\n\tprivate _gradientConstantYMin: GradientDataNumber = null;\r\n\tprivate _gradientConstantYMax: GradientDataNumber = null;\r\n\tprivate _gradientConstantZMin: GradientDataNumber = null;\r\n\tprivate _gradientConstantZMax: GradientDataNumber = null;\r\n\r\n\r\n\r\n\tprivate _gradientX: GradientDataNumber = null;\r\n\tprivate _gradientY: GradientDataNumber = null;\r\n\tprivate _gradientZ: GradientDataNumber = null;\r\n\r\n\r\n\tprivate _gradientXMin: GradientDataNumber = null;\r\n\tprivate _gradientXMax: GradientDataNumber = null;\r\n\tprivate _gradientYMin: GradientDataNumber = null;\r\n\tprivate _gradientYMax: GradientDataNumber = null;\r\n\tprivate _gradientZMin: GradientDataNumber = null;\r\n\tprivate _gradientZMax: GradientDataNumber = null;\r\n\r\n\t/**\r\n\t * @en The lifecycle velocity type. 0: constant mode, 1: curve mode, 2: random double constant mode, 3: random double curve mode.\r\n\t * @zh 生命周期速度类型。0：常量模式，1：曲线模式，2：随机双常量模式，3：随机双曲线模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The constant velocity.\r\n\t * @zh 固定速度。\r\n\t */\r\n\tget constant(): Vector3 {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient velocity for X axis.\r\n\t * @zh X轴渐变速度。\r\n\t */\r\n\tget gradientX(): GradientDataNumber {\r\n\t\treturn this._gradientX;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient velocity for Y axis.\r\n\t * @zh Y轴渐变速度。\r\n\t */\r\n\tget gradientY(): GradientDataNumber {\r\n\t\treturn this._gradientY;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The gradient velocity for Z axis.\r\n\t * @zh Z轴渐变速度。\r\n\t */\r\n\tget gradientZ(): GradientDataNumber {\r\n\t\treturn this._gradientZ;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum constant velocity.\r\n\t * @zh 最小固定速度。\r\n\t */\r\n\tget constantMin(): Vector3 {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant velocity.\r\n\t * @zh 最大固定速度。\r\n\t */\r\n\tget constantMax(): Vector3 {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tget gradientConstantX(): GradientDataNumber {\r\n\t\treturn this._gradientConstantX;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantY(): GradientDataNumber {\r\n\t\treturn this._gradientConstantY;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantZ(): GradientDataNumber {\r\n\t\treturn this._gradientConstantZ;\r\n\t}\r\n\r\n\t/**\r\n\t *@internal\r\n\t */\r\n\tget gradientConstantXMin(): GradientDataNumber {\r\n\t\treturn this._gradientConstantXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantXMax(): GradientDataNumber {\r\n\t\treturn this._gradientConstantXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantYMin(): GradientDataNumber {\r\n\t\treturn this._gradientConstantYMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantYMax(): GradientDataNumber {\r\n\t\treturn this._gradientConstantYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantZMin(): GradientDataNumber {\r\n\t\treturn this._gradientConstantZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget gradientConstantZMax(): GradientDataNumber {\r\n\t\treturn this._gradientConstantZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient velocity for X axis.\r\n\t * @zh X轴最小渐变速度。\r\n\t */\r\n\tget gradientXMin(): GradientDataNumber {\r\n\t\treturn this._gradientXMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient velocity for X axis.\r\n\t * @zh X轴最大渐变速度。\r\n\t */\r\n\tget gradientXMax(): GradientDataNumber {\r\n\t\treturn this._gradientXMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient velocity for Y axis.\r\n\t * @zh Y轴最小渐变速度。\r\n\t */\r\n\tget gradientYMin(): GradientDataNumber {\r\n\t\treturn this._gradientYMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient velocity for Y axis.\r\n\t * @zh Y轴最大渐变速度。\r\n\t */\r\n\tget gradientYMax(): GradientDataNumber {\r\n\t\treturn this._gradientYMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum gradient velocity for Z axis.\r\n\t * @zh Z轴最小渐变速度。\r\n\t */\r\n\tget gradientZMin(): GradientDataNumber {\r\n\t\treturn this._gradientZMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum gradient velocity for Z axis.\r\n\t * @zh Z轴最大渐变速度。\r\n\t */\r\n\tget gradientZMax(): GradientDataNumber {\r\n\t\treturn this._gradientZMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Constructor, not allowed to use \"new\", please use the static creation function.\r\n\t * @zh 构造方法。不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientVelocity: GradientVelocity = (<GradientVelocity>destObject);\r\n\t\tdestGradientVelocity._type = this._type;\r\n\t\tthis._constant.cloneTo(destGradientVelocity._constant);\r\n\t\tthis._gradientX.cloneTo(destGradientVelocity._gradientX);\r\n\t\tthis._gradientY.cloneTo(destGradientVelocity._gradientY);\r\n\t\tthis._gradientZ.cloneTo(destGradientVelocity._gradientZ);\r\n\t\tthis._constantMin.cloneTo(destGradientVelocity._constantMin);\r\n\t\tthis._constantMax.cloneTo(destGradientVelocity._constantMax);\r\n\t\tthis._gradientXMin.cloneTo(destGradientVelocity._gradientXMin);\r\n\t\tthis._gradientXMax.cloneTo(destGradientVelocity._gradientXMax);\r\n\t\tthis._gradientYMin.cloneTo(destGradientVelocity._gradientYMin);\r\n\t\tthis._gradientYMax.cloneTo(destGradientVelocity._gradientYMax);\r\n\t\tthis._gradientZMin.cloneTo(destGradientVelocity._gradientZMin);\r\n\t\tthis._gradientZMax.cloneTo(destGradientVelocity._gradientZMax);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientVelocity: GradientVelocity = new GradientVelocity();\r\n\t\tthis.cloneTo(destGradientVelocity);\r\n\t\treturn destGradientVelocity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { GradientAngularVelocity } from \"./GradientAngularVelocity\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The `RotationOverLifetime` class is used for particle rotation over its lifecycle.\r\n * @zh `RotationOverLifetime` 类用于控制粒子在其生命周期内的旋转。\r\n */\r\nexport class RotationOverLifetime implements IClone {\r\n\tprivate _angularVelocity: GradientAngularVelocity;\r\n\r\n    /**\r\n     * @en Indicates whether the rotation over lifetime is enabled.\r\n     * @zh 是否启用生命周期旋转。\r\n     */\r\n\tenable: boolean;\r\n\r\n    /**\r\n     * @en The angular velocity of the particle.\r\n     * @zh 粒子的角速度。\r\n     */\r\n\tget angularVelocity(): GradientAngularVelocity {\r\n\t\treturn this._angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Constructor, not allowed to use \"new\", please use the static creation function.\r\n\t * @zh 构造方法。不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor(angularVelocity: GradientAngularVelocity) {\r\n\t\tthis._angularVelocity = angularVelocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = (<RotationOverLifetime>destObject);\r\n\t\tthis._angularVelocity.cloneTo(destRotationOverLifetime._angularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destAngularVelocity: GradientAngularVelocity;\r\n\t\tswitch (this._angularVelocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstantSeparate(this._angularVelocity.constantSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByConstant(this._angularVelocity.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByGradient(this._angularVelocity.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (this._angularVelocity.separateAxes)\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradientSeparate(\r\n\t\t\t\t\t\tthis._angularVelocity.gradientXMin.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientXMax.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientYMin.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientYMax.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientZMin.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientZMax.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientWMin.clone(),\r\n\t\t\t\t\t\tthis._angularVelocity.gradientWMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestAngularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destRotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(destAngularVelocity);\r\n\t\tdestRotationOverLifetime.enable = this.enable;\r\n\t\treturn destRotationOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\"\r\n\r\n/**\r\n * @en The `BoundBox` class is used for creating a bounding box.\r\n * @zh `BoundBox` 类用于创建包围盒。\r\n */\r\nexport class BoundBox implements IClone {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en The minimum vertex of the bounding box.\r\n\t * @zh 包围盒的最小顶点。\r\n\t */\r\n\tmin: Vector3;\r\n\t/**\r\n\t * @en The maximum vertex of the bounding box.\r\n\t * @zh 包围盒的最大顶点。\r\n\t */\r\n\tmax: Vector3;\r\n\r\n\t/**\r\n\t * @en Constructor method of the bounding box.\r\n\t * @param\tmin The minimum vertex of the bounding box.\r\n\t * @param\tmax The maximum vertex of the bounding box.\r\n\t * @zh 包围盒的构造方法。\r\n\t * @param\tmin 包围盒的最小顶点。\r\n\t * @param\tmax 包围盒的最大顶点。\r\n\t */\r\n\tconstructor(min: Vector3, max: Vector3) {\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n\t\tvar extentsX: number = extents.x;\r\n\t\tvar extentsY: number = extents.y;\r\n\t\tvar extentsZ: number = extents.z;\r\n\t\tvar matElements: Float32Array = rotation.elements;\r\n\t\tout.x = Math.abs(matElements[0] * extentsX) + Math.abs(matElements[4] * extentsY) + Math.abs(matElements[8] * extentsZ);\r\n\t\tout.y = Math.abs(matElements[1] * extentsX) + Math.abs(matElements[5] * extentsY) + Math.abs(matElements[9] * extentsZ);\r\n\t\tout.z = Math.abs(matElements[2] * extentsX) + Math.abs(matElements[6] * extentsY) + Math.abs(matElements[10] * extentsZ);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Retrieves the 8 corner vertices of the bounding box.\r\n\t * @param corners The array to store the corner vertices.\r\n\t * @zh 获取包围盒的8个角顶点。\r\n\t * @param corners 角顶点的输出数组。\r\n\t */\r\n\tgetCorners(corners: Vector3[]): void {\r\n\t\tcorners.length = 8;\r\n\t\tvar minX: number = this.min.x;\r\n\t\tvar minY: number = this.min.y;\r\n\t\tvar minZ: number = this.min.z;\r\n\t\tvar maxX: number = this.max.x;\r\n\t\tvar maxY: number = this.max.y;\r\n\t\tvar maxZ: number = this.max.z;\r\n\t\tcorners[0] = new Vector3(minX, maxY, maxZ);\r\n\t\tcorners[1] = new Vector3(maxX, maxY, maxZ);\r\n\t\tcorners[2] = new Vector3(maxX, minY, maxZ);\r\n\t\tcorners[3] = new Vector3(minX, minY, maxZ);\r\n\t\tcorners[4] = new Vector3(minX, maxY, minZ);\r\n\t\tcorners[5] = new Vector3(maxX, maxY, minZ);\r\n\t\tcorners[6] = new Vector3(maxX, minY, minZ);\r\n\t\tcorners[7] = new Vector3(minX, minY, minZ);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Retrieves the center point of the bounding box.。\r\n\t * @param out The vector to store the center point.\r\n\t * @zh 获取包围盒的中心点。\r\n\t * @param out 存储中心点的向量。\r\n\t */\r\n\tgetCenter(out: Vector3): void {\r\n\t\tVector3.add(this.min, this.max, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Retrieves the extents of the bounding box.\r\n\t * @param out The vector to store the extents.\r\n\t * @zh 获取包围盒的范围。\r\n\t * @param out 存储轴半径的向量。\r\n\t */\r\n\tgetExtent(out: Vector3): void {\r\n\t\tVector3.subtract(this.max, this.min, out);\r\n\t\tVector3.scale(out, 0.5, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the center and extents of the bounding box.\r\n\t * @param center The center point of the bounding box.\r\n\t * @param extent The axis radius of the bounding box.\r\n\t * @zh 设置包围盒的中心点和范围\r\n\t * @param center 包围盒的中心点。\r\n\t * @param extent 包围盒的轴半径\r\n\t */\r\n\tsetCenterAndExtent(center: Vector3, extent: Vector3): void {\r\n\t\tVector3.subtract(center, extent, this.min);\r\n\t\tVector3.add(center, extent, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Transforms the bounding box using the given matrix.\r\n\t * @param matrix The transformation matrix.\r\n\t * @param out The bounding box to store the result.\r\n\t * @zh 使用给定的矩阵变换包围盒。\r\n\t * @param matrix 变换矩阵。\r\n\t * @param out 存储结果的包围盒。\r\n\t */\r\n\ttranform(matrix: Matrix4x4, out: BoundBox): void {\r\n\t\tvar center: Vector3 = BoundBox._tempVector30;\r\n\t\tvar extent: Vector3 = BoundBox._tempVector31;\r\n\t\tthis.getCenter(center);\r\n\t\tthis.getExtent(extent);\r\n\t\tVector3.transformCoordinate(center, matrix, center);\r\n\t\tthis._rotateExtents(extent, matrix, extent);\r\n\t\tout.setCenterAndExtent(center, extent);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Resets the bounding box to its default values.\r\n\t * @zh 将包围盒重置为其默认值。\r\n\t */\r\n\ttoDefault(): void {\r\n\t\tthis.min.toDefault();\r\n\t\tthis.max.toDefault();\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a bounding box from a set of points.\r\n\t * @param points The set of points.\r\n\t * @param out The resulting bounding box.\r\n\t * @zh 从一组顶点生成包围盒。\r\n\t * @param points 所需顶点队列。\r\n\t * @param out 生成的包围盒。\r\n\t */\r\n\tstatic createfromPoints(points: Vector3[], out: BoundBox): void {\r\n\t\tif (points == null)\r\n\t\t\tthrow new Error(\"points\");\r\n\r\n\t\tvar min: Vector3 = out.min;\r\n\t\tvar max: Vector3 = out.max;\r\n\t\tmin.x = Number.MAX_VALUE;\r\n\t\tmin.y = Number.MAX_VALUE;\r\n\t\tmin.z = Number.MAX_VALUE;\r\n\t\tmax.x = -Number.MAX_VALUE;\r\n\t\tmax.y = -Number.MAX_VALUE;\r\n\t\tmax.z = -Number.MAX_VALUE;\r\n\r\n\t\tfor (var i: number = 0, n: number = points.length; i < n; ++i) {\r\n\t\t\tVector3.min(min, points[i], min);\r\n\t\t\tVector3.max(max, points[i], max);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Merges two bounding boxes into one.\r\n\t * @param box1 The first bounding box.\r\n\t * @param box2 The second bounding box.\r\n\t * @param out The merged bounding box\r\n\t * @zh 合并两个包围盒为一个。\r\n\t * @param box1 第一个包围盒。\r\n\t * @param box2 第二个包围盒。\r\n\t * @param out 合并后的包围盒。\r\n\t */\r\n\tstatic merge(box1: BoundBox, box2: BoundBox, out: BoundBox): void {\r\n\t\tVector3.min(box1.min, box2.min, out.min);\r\n\t\tVector3.max(box1.max, box2.max, out.max);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones this bounding box to another object.\r\n\t * @param destObject The object to receive the clone.\r\n\t * @zh 克隆这个包围盒到另一个对象。\r\n\t * @param destObject 接收克隆的对象。\r\n\t */\r\n\tcloneTo(destObject: BoundBox): void {\r\n\t\tvar dest: BoundBox = (<BoundBox>destObject);\r\n\t\tthis.min.cloneTo(dest.min);\r\n\t\tthis.max.cloneTo(dest.max);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a clone of this bounding box.\r\n\t * @return The cloned bounding box.\r\n\t * @zh 创建这个包围盒的克隆。\r\n\t * @return 克隆的包围盒。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","import { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\nimport { Rand } from \"../../../../math/Rand\"\r\n\r\n/**\r\n * @internal\r\n * @en Utility class for generating random points in various shapes.\r\n * @zh 用于在各种形状中生成随机点的实用工具类。\r\n */\r\nexport class ShapeUtils {\r\n\t/**\r\n\t * @en Generates a random point on the arc of a unit circle.\r\n\t * @param arc The arc angle in radians.\r\n\t * @param out The output Vector2 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位圆弧上生成一个随机点。\r\n\t * @param arc 弧度角度。\r\n\t * @param out 输出 Vector2 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * arc;\r\n\t\telse\r\n\t\t\tangle = Math.random() * arc;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point inside the arc of a unit circle.\r\n\t * @param arc The arc angle in radians.\r\n\t * @param out The output Vector2 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位圆弧内生成一个随机点。\r\n\t * @param arc 弧度角度。\r\n\t * @param out 输出 Vector2 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointInsideUnitArcCircle(arc: number, out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitArcCircle(arc, out, rand);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point on the circumference of a unit circle.\r\n\t * @param out The output Vector2 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位圆周上生成一个随机点。\r\n\t * @param out 输出 Vector2 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tvar angle: number;\r\n\t\tif (rand)\r\n\t\t\tangle = rand.getFloat() * Math.PI * 2;\r\n\t\telse\r\n\t\t\tangle = Math.random() * Math.PI * 2;\r\n\t\tout.x = Math.cos(angle);\r\n\t\tout.y = Math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point inside a unit circle.\r\n\t * @param out The output Vector2 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位圆内生成一个随机点。\r\n\t * @param out 输出 Vector2 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointInsideUnitCircle(out: Vector2, rand: Rand = null): void {\r\n\t\tShapeUtils._randomPointUnitCircle(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 2.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 2.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point on the surface of a unit sphere.\r\n\t * @param out The output Vector3 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位球面上生成一个随机点。\r\n\t * @param out 输出 Vector3 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\tvar z: number;\r\n\t\tvar a: number;\r\n\t\tif (rand) {\r\n\t\t\tz = out.z = rand.getFloat() * 2 - 1.0;\r\n\t\t\ta = rand.getFloat() * Math.PI * 2;\r\n\t\t} else {\r\n\t\t\tz = out.z = Math.random() * 2 - 1.0;\r\n\t\t\ta = Math.random() * Math.PI * 2;\r\n\t\t}\r\n\r\n\t\tvar r: number = Math.sqrt(1.0 - z * z);\r\n\r\n\t\tout.x = r * Math.cos(a);\r\n\t\tout.y = r * Math.sin(a);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point inside a unit sphere.\r\n\t * @param out The output Vector3 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在单位球体内生成一个随机点。\r\n\t * @param out 输出 Vector3 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointInsideUnitSphere(out: Vector3, rand: Rand = null): void {\r\n\t\t;\r\n\t\tShapeUtils._randomPointUnitSphere(out);\r\n\t\tvar range: number;\r\n\t\tif (rand)\r\n\t\t\trange = Math.pow(rand.getFloat(), 1.0 / 3.0);\r\n\t\telse\r\n\t\t\trange = Math.pow(Math.random(), 1.0 / 3.0);\r\n\t\tout.x = out.x * range;\r\n\t\tout.y = out.y * range;\r\n\t\tout.z = out.z * range;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a random point inside half of a unit box (cube).\r\n\t * @param out The output Vector3 to store the result.\r\n\t * @param rand Optional random number generator. If not provided, Math.random() will be used.\r\n\t * @zh 在半单位立方体内生成一个随机点。\r\n\t * @param out 输出 Vector3 用于存储结果。\r\n\t * @param rand 可选的随机数生成器。如果不提供，则使用 Math.random()。\r\n\t */\r\n\tstatic _randomPointInsideHalfUnitBox(out: Vector3, rand: Rand = null): void {\r\n\t\tif (rand) {\r\n\t\t\tout.x = (rand.getFloat() - 0.5);\r\n\t\t\tout.y = (rand.getFloat() - 0.5);\r\n\t\t\tout.z = (rand.getFloat() - 0.5);\r\n\t\t} else {\r\n\t\t\tout.x = (Math.random() - 0.5);\r\n\t\t\tout.y = (Math.random() - 0.5);\r\n\t\t\tout.z = (Math.random() - 0.5);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en BoxShape class for creating box-shaped particle emitters.\r\n * @zh BoxShape 类用于创建盒形粒子发射器。\r\n */\r\nexport class BoxShape extends BaseShape {\r\n\t/**\r\n\t * @en Length of the emitter along the X-axis.\r\n\t * @zh 发射器X轴长度。\r\n\t */\r\n\tx: number;\r\n\t/**\r\n\t * @en Length of the emitter along the Y-axis.\r\n\t * @zh 发射器Y轴长度。\r\n\t */\r\n\ty: number;\r\n\t/**\r\n\t * @en Length of the emitter along the Z-axis.\r\n\t * @zh 发射器Z轴长度。\r\n\t */\r\n\tz: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the BoxShape class.\r\n\t * @zh 创建一个BoxShape实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Box;\r\n\t\tthis.x = 1.0;\r\n\t\tthis.y = 1.0;\r\n\t\tthis.z = 1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = -this.x * 0.5;\r\n\t\tmin.y = -this.y * 0.5;\r\n\t\tmin.z = -this.z * 0.5;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = this.x * 0.5;\r\n\t\tmax.y = this.y * 0.5;\r\n\t\tmax.z = this.z * 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = 0.0;\r\n\t\tmin.y = 0.0;\r\n\t\tmin.z = 0.0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = 0.0;\r\n\t\tmax.y = 1.0;\r\n\t\tmax.z = 0.0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Array of random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子数组。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tShapeUtils._randomPointInsideHalfUnitBox(position);\r\n\t\t}\r\n\t\tposition.x = this.x * position.x;\r\n\t\tposition.y = this.y * position.y;\r\n\t\tposition.z = this.z * position.z;\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdirection.x = 0.0;\r\n\t\t\tdirection.y = 0.0;\r\n\t\t\tdirection.z = 1.0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: BoxShape = (<BoxShape>destObject);\r\n\t\tdestShape.x = this.x;\r\n\t\tdestShape.y = this.y;\r\n\t\tdestShape.z = this.z;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: BoxShape = new BoxShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en CircleShape class for creating circular particle emitters.\r\n * @zh CircleShape 类用于创建环形粒子发射器。\r\n */\r\nexport class CircleShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\r\n\t/**\r\n\t * @en Emitter radius.\r\n\t * @zh 发射器半径。\r\n\t */\r\n\tradius: number;\r\n\t/**\r\n\t * @en Arc angle.\r\n\t * @zh 环形弧度。\r\n\t */\r\n\tarc: number;\r\n\t/**\r\n\t * @en Whether to emit from the edge.\r\n\t * @zh 是否从边缘发射。\r\n\t */\r\n\temitFromEdge: boolean;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the CircleShape class.\r\n\t * @zh 创建一个CircleShape实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Circle;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.arc = 360.0 / 180.0 * Math.PI;\r\n\t\tthis.emitFromEdge = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Emission angle 0-360\r\n\t * @zh 发射角度 0-360\r\n\t */\r\n\tget arcDEG() {\r\n\t\treturn this.arc * 180 / Math.PI;\r\n\t}\r\n\r\n\tset arcDEG(deg: number) {\r\n\t\tthis.arc = deg / 180 * Math.PI;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.z = -this.radius;\r\n\t\tmin.y = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.z = this.radius;\r\n\t\tmax.y = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = 1;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Array of random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子数组。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPoint: Vector2 = CircleShape._tempPositionPoint;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromEdge)\r\n\t\t\t\tShapeUtils._randomPointUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitArcCircle(this.arc, CircleShape._tempPositionPoint);\r\n\t\t}\r\n\r\n\t\tposition.x = -positionPoint.x;\r\n\t\tposition.y = positionPoint.y;\r\n\t\tposition.z = 0;\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: CircleShape = (<CircleShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.arc = this.arc;\r\n\t\tdestShape.emitFromEdge = this.emitFromEdge;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: CircleShape = new CircleShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en ConeShape class is used to create cone-shaped particle emitters.\r\n * @zh ConeShape类用于创建锥形粒子发射器。\r\n */\r\nexport class ConeShape extends BaseShape {\r\n\t/** @internal */\r\n\tprotected static _tempPositionPoint: Vector2 = new Vector2();\r\n\t/** @internal */\r\n\tprotected static _tempDirectionPoint: Vector2 = new Vector2();\r\n\r\n    /**\r\n     * @en The emission angle in radians.\r\n     * @zh 发射角度，单位为弧度。\r\n     */\r\n\tangle: number;\r\n    /**\r\n     * @en The radius of the emitter.\r\n     * @zh 发射器的半径。\r\n     */\r\n\tradius: number;\r\n    /**\r\n     * @en The length of the cone.\r\n     * @zh 锥体的长度。\r\n     */\r\n\tlength: number;\r\n    /**\r\n     * @en The emission type. 0 for Base, 1 for BaseShell, 2 for Volume, 3 for VolumeShell.\r\n     * @zh 发射类型：0 表示基础发射，1 表示基础外壳发射，2 表示体积发射，3 表示体积外壳发射。\r\n     */\r\n\temitType: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the ConeShape class.\r\n\t * @zh 创建一个ConeShape实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Cone;\r\n\t\tthis.angle = 25.0 / 180.0 * Math.PI;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.length = 5.0;\r\n\t\tthis.emitType = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Emission angle 0-360\r\n\t * @zh 发射角度0-360\r\n\t */\r\n\tget angleDEG() {\r\n\t\treturn this.angle * 180 / Math.PI;\r\n\t}\r\n\r\n\tset angleDEG(deg: number) {\r\n\t\tthis.angle = deg / 180 * Math.PI;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tconst coneRadius2: number = this.radius + this.length * Math.sin(this.angle);\r\n\t\tconst coneLength: number = this.length * Math.cos(this.angle);\r\n\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -coneRadius2;\r\n\t\tmin.z = 0;\r\n\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = coneRadius2;\r\n\t\tmax.z = coneLength;//TODO:是否为负\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tconst sinA: number = Math.sin(this.angle);\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -sinA;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = sinA;\r\n\t\tmax.z = 1;\r\n\t}\r\n\r\n\t/** \r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Array of random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子数组。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tvar positionPointE: Vector2 = ConeShape._tempPositionPoint;\r\n\t\tvar positionX: number;\r\n\t\tvar positionY: number;\r\n\t\tvar directionPointE: Vector2;\r\n\r\n\t\tvar dirCosA: number = Math.cos(this.angle);\r\n\t\tvar dirSinA: number = Math.sin(this.angle);\r\n\t\tswitch (this.emitType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdirectionPointE = ConeShape._tempDirectionPoint;\r\n\t\t\t\t\tdirection.x = directionPointE.x * dirSinA;\r\n\t\t\t\t\tdirection.y = directionPointE.y * dirSinA;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\t}\r\n\t\t\t\tdirection.z = dirCosA;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\trand.seed = randomSeeds[16];\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint, rand);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpositionX = positionPointE.x;\r\n\t\t\t\tpositionY = positionPointE.y;\r\n\t\t\t\tposition.x = positionX * this.radius;\r\n\t\t\t\tposition.y = positionY * this.radius;\r\n\t\t\t\tposition.z = 0;\r\n\r\n\t\t\t\tdirection.x = positionX * dirSinA;\r\n\t\t\t\tdirection.y = positionY * dirSinA;\r\n\t\t\t\tdirection.z = dirCosA;\r\n\r\n\t\t\t\tVector3.normalize(direction, direction);\r\n\t\t\t\tif (rand) {\r\n\t\t\t\t\tVector3.scale(direction, this.length * rand.getFloat(), direction);\r\n\t\t\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tVector3.scale(direction, this.length * Math.random(), direction);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tVector3.add(position, direction, position);\r\n\r\n\t\t\t\tif (this.randomDirection) {\r\n\t\t\t\t\tif (rand) {\r\n\t\t\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ConeShape:emitType is invalid.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: ConeShape = (<ConeShape>destObject);\r\n\t\tdestShape.angle = this.angle;\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.length = this.length;\r\n\t\tdestShape.emitType = this.emitType;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: ConeShape = new ConeShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n\r\n/**\r\n * @en The HemisphereShape class is used to create hemispherical particle shapes emitters.\r\n * @zh HemisphereShape 类用于创建半球形粒子形状发射器。\r\n */\r\nexport class HemisphereShape extends BaseShape {\r\n\t/**\r\n\t * @en The radius of the hemisphere.\r\n\t * @zh 发射器半径。\r\n\t */\r\n\tradius: number;\r\n\t/**\r\n\t * @en Whether to emit from the shell.\r\n\t * @zh 是否从外壳发射。\r\n\t */\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creats an instance of the HemisphereShape class.\r\n\t * @zh 创建一个HemisphereShape实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Hemisphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = this.radius;\r\n\t\tmax.z = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = -1;\r\n\t\tmin.z = 0;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/** \r\n\t * @override\r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Array of random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子数组。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tvar z: number = position.z;\r\n\t\t(z < 0.0) && (position.z = z * -1.0);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: HemisphereShape = (<HemisphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: HemisphereShape = new HemisphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n\r\n}","import { BaseShape, ParticleSystemShapeType } from \"./BaseShape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BoundBox } from \"../../../../math/BoundBox\"\r\nimport { Rand } from \"../../../../math/Rand\"\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\n\r\n/**\r\n * @en SphereShape class is used to create spherical particle shapes.\r\n * @zh SphereShape 类用于创建球形粒子发射器。\r\n */\r\nexport class SphereShape extends BaseShape {\r\n\t/**\r\n\t * @en Emitter radius.\r\n\t * @zh 发射器半径。\r\n\t */\r\n\tradius: number;\r\n\t/**\r\n\t * @en Whether to emit from the shell.\r\n\t * @zh 是否从外壳发射。\r\n\t */\r\n\temitFromShell: boolean;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the SphereShape class.\r\n\t * @zh 创建一个 SphereShape 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shapeType = ParticleSystemShapeType.Sphere;\r\n\t\tthis.radius = 1.0;\r\n\t\tthis.emitFromShell = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getShapeBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -this.radius;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = this.radius;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\tprotected _getSpeedBoundBox(boundBox: BoundBox): void {\r\n\t\tvar min: Vector3 = boundBox.min;\r\n\t\tmin.x = min.y = min.z = -1;\r\n\t\tvar max: Vector3 = boundBox.max;\r\n\t\tmax.x = max.y = max.z = 1;\r\n\t}\r\n\r\n\t/** \r\n\t * @en Generates initial position and direction for particles.\r\n\t * @param position The particle position.\r\n\t * @param direction The particle direction.\r\n\t * @param rand Random number.\r\n\t * @param randomSeeds Array of random seeds.\r\n\t * @zh 用于生成粒子初始位置和方向。\r\n\t * @param position 粒子位置。\r\n\t * @param direction 粒子方向。\r\n\t * @param rand 随机数。\r\n\t * @param randomSeeds 随机种子数组。\r\n\t */\r\n\tgeneratePositionAndDirection(position: Vector3, direction: Vector3, rand: Rand = null, randomSeeds: Uint32Array = null): void {\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[16];\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position, rand);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position, rand);\r\n\t\t\trandomSeeds[16] = rand.seed;\r\n\t\t} else {\r\n\t\t\tif (this.emitFromShell)\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(position);\r\n\t\t\telse\r\n\t\t\t\tShapeUtils._randomPointInsideUnitSphere(position);\r\n\t\t}\r\n\r\n\t\tVector3.scale(position, this.radius, position);\r\n\r\n\t\tif (this.randomDirection) {\r\n\t\t\tif (rand) {\r\n\t\t\t\trand.seed = randomSeeds[17];\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction, rand);\r\n\t\t\t\trandomSeeds[17] = rand.seed;\r\n\t\t\t} else {\r\n\t\t\t\tShapeUtils._randomPointUnitSphere(direction);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tposition.cloneTo(direction);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tvar destShape: SphereShape = (<SphereShape>destObject);\r\n\t\tdestShape.radius = this.radius;\r\n\t\tdestShape.emitFromShell = this.emitFromShell;\r\n\t\tdestShape.randomDirection = this.randomDirection;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destShape: SphereShape = new SphereShape();\r\n\t\tthis.cloneTo(destShape);\r\n\t\treturn destShape;\r\n\t}\r\n}","import { GradientSize } from \"./GradientSize\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The `SizeOverLifetime` class is used to control the size of particles over their lifetime.\r\n * @zh `SizeOverLifetime` 类用于控制粒子在其生命周期内的尺寸变化。\r\n */\r\nexport class SizeOverLifetime implements IClone {\r\n\tprivate _size: GradientSize;\r\n\r\n\t/**\r\n     * @en Whether to enable.\r\n     * @zh 是否启用\r\n     */\r\n\tenable: boolean;\r\n\r\n    /**\r\n     * @en The size.\r\n     * @zh 尺寸。\r\n     */\r\n\tget size(): GradientSize {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the `SizeOverLifetime` class.\r\n\t * @param size gradient size.\r\n\t * @zh 创建一个 `SizeOverLifetime` 实例。\r\n\t * @param size 渐变尺寸\r\n\t */\r\n\tconstructor(size: GradientSize) {\r\n\t\tthis._size = size;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = (<SizeOverLifetime>destObject);\r\n\t\tthis._size.cloneTo(destSizeOverLifetime._size);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destSize: GradientSize;\r\n\t\tswitch (this._size.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByGradient(this._size.gradient.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this._size.separateAxes)\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone());\r\n\t\t\t\telse\r\n\t\t\t\t\tdestSize = GradientSize.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destSizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(destSize);\r\n\t\tdestSizeOverLifetime.enable = this.enable;\r\n\t\treturn destSizeOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The `StartFrame` class is used to create start frames.\r\n * @zh `StartFrame` 类用于创建起始帧。\r\n */\r\nexport class StartFrame implements IClone {\r\n\t/**\r\n\t * @en Create a `StartFrame` instance with a constant frame value.\r\n\t * @param constant The fixed frame value. Default is 0.\r\n\t * @returns A new StartFrame instance.\r\n\t * @zh 通过固定帧值创建一个 `StartFrame` 实例。\r\n\t * @param constant 固定帧值。默认为0。\r\n\t * @returns 新的 StartFrame 实例。\r\n\t */\r\n\tstatic createByConstant(constant: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 0;\r\n\t\trotationOverLifetime._constant = constant;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Create a `StartFrame` instance with a random range between two constant frame values.\r\n\t * @param constantMin The minimum fixed frame value. Default is 0.\r\n\t * @param constantMax The maximum fixed frame value. Default is 0.\r\n\t * @returns A new StartFrame instance.\r\n\t * @zh 通过随机范围在两个固定帧值之间创建一个 `StartFrame` 实例。\r\n\t * @param constantMin 最小固定帧值。默认为0。\r\n\t * @param constantMax 最大固定帧值。默认为0。\r\n\t * @returns 新的 StartFrame 实例。\r\n\t */\r\n\tstatic createByRandomTwoConstant(constantMin: number = 0, constantMax: number = 0): StartFrame {\r\n\t\tvar rotationOverLifetime: StartFrame = new StartFrame();\r\n\t\trotationOverLifetime._type = 1;\r\n\t\trotationOverLifetime._constantMin = constantMin;\r\n\t\trotationOverLifetime._constantMax = constantMax;\r\n\t\treturn rotationOverLifetime;\r\n\t}\r\n\r\n\r\n\tprivate _type: number = 0;\r\n\tprivate _constant: number = 0;\r\n\tprivate _constantMin: number = 0;\r\n\tprivate _constantMax: number = 0;\r\n\r\n\t/**\r\n\t * @en The start frame type. 0 for constant mode, 1 for random between two constants mode.\r\n\t * @zh 起始帧类型。0表示常量模式，1表示随机双常量模式。\r\n\t */\r\n\tget type(): number {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The constant frame value.\r\n\t * @zh 固定帧值。\r\n\t */\r\n\tget constant(): number {\r\n\t\treturn this._constant;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The minimum constant frame value.\r\n\t * @zh 最小固定帧值。\r\n\t */\r\n\tget constantMin(): number {\r\n\t\treturn this._constantMin;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The maximum constant frame value.\r\n\t * @zh 最大固定帧值。\r\n\t */\r\n\tget constantMax(): number {\r\n\t\treturn this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Constructor, not allowed to use \"new\", please use the static creation function.\r\n\t * @zh 构造方法。不允许new，请使用静态创建函数。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destStartFrame: StartFrame = (<StartFrame>destObject);\r\n\t\tdestStartFrame._type = this._type;\r\n\t\tdestStartFrame._constant = this._constant;\r\n\t\tdestStartFrame._constantMin = this._constantMin;\r\n\t\tdestStartFrame._constantMax = this._constantMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destStartFrame: StartFrame = new StartFrame();\r\n\t\tthis.cloneTo(destStartFrame);\r\n\t\treturn destStartFrame;\r\n\t}\r\n}","import { FrameOverTime } from \"./FrameOverTime\";\r\nimport { StartFrame } from \"./StartFrame\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\n\r\n/**\r\n * @en The `TextureSheetAnimation` class is used to create particle frame animations.\r\n * @zh `TextureSheetAnimation` 类用于创建粒子帧动画。\r\n */\r\nexport class TextureSheetAnimation implements IClone {\r\n\t/**@internal */\r\n\tprivate _frame: FrameOverTime;\r\n\t/**@internal */\r\n\tprivate _startFrame: StartFrame;\r\n\r\n\t/**\r\n\t * @en Texture tiling.\r\n\t * @zh 纹理平铺。\r\n\t */\r\n\ttiles: Vector2;\r\n\t/**\r\n\t * @en Type, 0 for whole sheet, 1 for single row.\r\n\t * @zh 类型，0 表示整个纹理表，1 表示纹理表中的某一行。\r\n\t */\r\n\ttype: number = 0;\r\n\t/**\r\n\t * @en Whether to use random row, effective when type is 1.\r\n\t * @zh 是否随机行，type属性 为 1 时，该属性才会生效。\r\n\t */\r\n\trandomRow: boolean = false;\r\n\t/**\r\n\t * @en Row index, effective when type is 1.\r\n\t * @zh 行索引，type属性 为 1 时，该属性才会生效。\r\n\t */\r\n\trowIndex: number = 0;\r\n\t/**\r\n\t * @en Number of cycles.\r\n\t * @zh 循环次数。\r\n\t */\r\n\tcycles: number = 0;\r\n\t/**\r\n\t * @en UV channel type, 0 for Nothing, 1 for Everything. \r\n\t * @zh UV 通道类型，0 表示 Nothing，1 表示 Everything。\r\n\t */\r\n\tenableUVChannels: number = 0;\r\n\t/**\r\n\t * @en Whether enabled.\r\n\t * @zh 是否启用。\r\n\t */\r\n\tenable: boolean = false;\r\n\r\n\t/**\r\n\t * @en The time frame rate.\r\n\t * @zh 时间帧率。\r\n\t */\r\n\tget frame(): FrameOverTime {\r\n\t\treturn this._frame;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The start frame rate.\r\n\t * @zh 开始帧率。\r\n\t */\r\n\tget startFrame(): StartFrame {\r\n\t\treturn this._startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates an instance of the `TextureSheetAnimation` class.\r\n\t * @param frame Animation frames.\r\n\t * @param  startFrame Start frame.\r\n\t * @zh 创建一个 `TextureSheetAnimation` 类的实例。\r\n\t * @param frame 动画帧。\r\n\t * @param  startFrame 开始帧。\r\n\t */\r\n\tconstructor(frame: FrameOverTime, startFrame: StartFrame) {\r\n\t\tthis.tiles = new Vector2(1, 1);\r\n\t\tthis.type = 0;\r\n\t\tthis.randomRow = true;\r\n\t\tthis.rowIndex = 0;\r\n\t\tthis.cycles = 1;\r\n\t\tthis.enableUVChannels = 1;//TODO:待补充\r\n\t\tthis._frame = frame;\r\n\t\tthis._startFrame = startFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = (<TextureSheetAnimation>destObject);\r\n\t\tthis.tiles.cloneTo(destTextureSheetAnimation.tiles);\r\n\t\tdestTextureSheetAnimation.type = this.type;\r\n\t\tdestTextureSheetAnimation.randomRow = this.randomRow;\r\n\t\tdestTextureSheetAnimation.rowIndex = this.rowIndex;\r\n\t\tdestTextureSheetAnimation.cycles = this.cycles;\r\n\t\tdestTextureSheetAnimation.enableUVChannels = this.enableUVChannels;\r\n\t\tdestTextureSheetAnimation.enable = this.enable;\r\n\t\tthis._frame.cloneTo(destTextureSheetAnimation._frame);\r\n\t\tthis._startFrame.cloneTo(destTextureSheetAnimation._startFrame);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destFrame: FrameOverTime;\r\n\t\tswitch (this._frame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestFrame = FrameOverTime.createByConstant(this._frame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestFrame = FrameOverTime.createByOverTime(this._frame.frameOverTimeData.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestFrame = FrameOverTime.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destStartFrame: StartFrame;\r\n\t\tswitch (this._startFrame.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestStartFrame = StartFrame.createByConstant(this._startFrame.constant);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestStartFrame = StartFrame.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar destTextureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(destFrame, destStartFrame);\r\n\t\tthis.cloneTo(destTextureSheetAnimation);\r\n\t\treturn destTextureSheetAnimation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../../utils/IClone\";\r\nimport { GradientVelocity } from \"./GradientVelocity\";\r\n\r\n/**\r\n * @en The `VelocityOverLifetime` class is used for particle velocity over its lifetime.\r\n * @zh `VelocityOverLifetime` 类用于控制粒子在生命周期内的速度变化。\r\n */\r\nexport class VelocityOverLifetime implements IClone {\r\n\t/**@internal */\r\n\tprivate _velocity: GradientVelocity;\r\n\r\n\t/**\r\n\t * @en Whether to enable.\r\n\t * @zh 是否启用*/\r\n\tenable: boolean = false;\r\n\t/**\r\n\t * @en Velocity space, 0 for local, 1 for world.\r\n\t * @zh 速度空间，0 表示局部空间，1 表示世界空间。\r\n\t */\r\n\tspace: number = 0;\r\n\r\n\t/**\r\n\t * @en The gradient velocity.\r\n\t * @zh 渐变速度。\r\n\t */\r\n\tget velocity(): GradientVelocity {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of `VelocityOverLifetime` class.\r\n\t * @param velocity gradient velocity.\r\n\t * @zh 创建一个 `VelocityOverLifetime` 类的实例。\r\n\t * @param velocity 渐变速度。\r\n\t */\r\n\tconstructor(velocity: GradientVelocity) {\r\n\t\tthis._velocity = velocity;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = (<VelocityOverLifetime>destObject);\r\n\t\tthis._velocity.cloneTo(destVelocityOverLifetime._velocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destVelocity: GradientVelocity;\r\n\t\tswitch (this._velocity.type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByConstant(this._velocity.constant.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdestVelocity = GradientVelocity.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientZMax.clone());\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar destVelocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(destVelocity);\r\n\t\tdestVelocityOverLifetime.enable = this.enable;\r\n\t\tdestVelocityOverLifetime.space = this.space;\r\n\t\treturn destVelocityOverLifetime;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class VertexShuriKenParticle {\r\n\t//TODO Attribute\r\n\tstatic PARTICLE_DIRECTIONTIME: number = 0;\r\n\tstatic PARTICLE_POSITION0: number = 1;\r\n\tstatic PARTICLE_COLOR0: number = 2;\r\n\tstatic PARTICLE_TEXTURECOORDINATE0: number = 3;\r\n\tstatic PARTICLE_SHAPEPOSITIONSTARTLIFETIME: number = 4;\r\n\tstatic PARTICLE_CORNERTEXTURECOORDINATE0: number = 5;\r\n\tstatic PARTICLE_STARTCOLOR0: number = 6;\r\n\tstatic PARTICLE_ENDCOLOR0: number = 7;\r\n\tstatic PARTICLE_STARTSIZE: number = 8;\r\n\tstatic PARTICLE_STARTROTATION: number = 9;\r\n\tstatic PARTICLE_STARTSPEED: number = 10;\r\n\tstatic PARTICLE_RANDOM0: number = 11;\r\n\tstatic PARTICLE_RANDOM1: number = 12;\r\n\tstatic PARTICLE_SIMULATIONWORLDPOSTION: number = 13;\r\n\tstatic PARTICLE_SIMULATIONWORLDROTATION: number = 14;\r\n\tstatic PARTICLE_SIMULATIONUV:number = 15;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n */\r\nexport class VertexShurikenParticleBillboard extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceMeshDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleBillboard._vertexInstanceParticleDeclaration;\r\n\t}\r\n\r\n\tprivate static _billboardVertexArray: Float32Array;\r\n\tstatic get billboardVertexArray(): Float32Array {\r\n\t\treturn VertexShurikenParticleBillboard._billboardVertexArray;\r\n\t}\r\n\r\n\tprivate static _billboardIndexArray: Uint16Array;\r\n\tstatic get billboardIndexArray(): Uint16Array {\r\n\t\treturn VertexShurikenParticleBillboard._billboardIndexArray;\r\n\t}\r\n\tstatic set billboardIndexArray(value: Uint16Array) {\r\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = value;\r\n\t}\r\n\r\n\t/**\r\n\t  * @internal\r\n\t  */\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleBillboard._vertexDeclaration = new VertexDeclaration(168, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(64, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(88, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(124, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(152, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t]);\r\n\r\n\r\n\t\tVertexShurikenParticleBillboard._vertexInstanceMeshDeclaration = new VertexDeclaration(16, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0)\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleBillboard._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(136, VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t])\r\n\r\n\t\tVertexShurikenParticleBillboard._billboardIndexArray = new Uint16Array([\r\n\t\t\t0, 2, 1, 0, 3, 2\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleBillboard._billboardVertexArray = new Float32Array([\r\n\t\t\t-0.5, -0.5, 0, 1,\r\n\t\t\t0.5, -0.5, 1, 1,\r\n\t\t\t0.5, 0.5, 1, 0,\r\n\t\t\t-0.5, 0.5, 0, 0\r\n\t\t]);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget positionStartLifeTime(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = randoms0;\r\n\t\tthis._randoms1 = randoms1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexShuriKenParticle } from \"./VertexShuriKenParticle\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexShurikenParticle</code> 类用于创建粒子顶点结构。\r\n */\r\nexport class VertexShurikenParticleMesh extends VertexShuriKenParticle {\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n  * @internal\r\n  */\r\n\tstatic __init__(): void {\r\n\t\tVertexShurikenParticleMesh._vertexDeclaration = new VertexDeclaration(188, [new VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\r\n\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(36, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\tnew VertexElement(52, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\tnew VertexElement(68, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\tnew VertexElement(84, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\tnew VertexElement(96, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\tnew VertexElement(108, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\tnew VertexElement(112, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\tnew VertexElement(128, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\tnew VertexElement(144, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\tnew VertexElement(156, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\tnew VertexElement(172,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]);\r\n\t\t\r\n\t\t\r\n\t\tVertexShurikenParticleMesh._vertexInstanceMeshDeclaration = new VertexDeclaration(36, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_COLOR0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Vector2, VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0)\r\n\t\t]);\r\n\r\n\t\tVertexShurikenParticleMesh._vertexInstanceParticleDeclaration = new VertexDeclaration(152, [\r\n\t\t\tnew VertexElement(0, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),\r\n\t\t\tnew VertexElement(16, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),\r\n\t\t\tnew VertexElement(32, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_STARTCOLOR0),\r\n\t\t\tnew VertexElement(48, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTSIZE),\r\n\t\t\tnew VertexElement(60, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_STARTROTATION),\r\n\t\t\tnew VertexElement(72, VertexElementFormat.Single, VertexShuriKenParticle.PARTICLE_STARTSPEED),\r\n\t\t\tnew VertexElement(76, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM0),\r\n\t\t\tnew VertexElement(92, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_RANDOM1),\r\n\t\t\tnew VertexElement(108, VertexElementFormat.Vector3, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),//TODO:local模式下可省去内存\r\n\t\t\tnew VertexElement(120, VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),\r\n\t\t\tnew VertexElement(136,VertexElementFormat.Vector4, VertexShuriKenParticle.PARTICLE_SIMULATIONUV)\r\n\t\t]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceMeshDeclaration: VertexDeclaration;\r\n\tstatic get vertexInstanceMeshDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexInstanceMeshDeclaration;\r\n\t}\r\n\r\n\tprivate static _vertexInstanceParticleDeclaration: VertexDeclaration;\r\n\tstatic get vertexInstanceParticleDeclaration(): VertexDeclaration {\r\n\t\treturn VertexShurikenParticleMesh._vertexInstanceParticleDeclaration;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _cornerTextureCoordinate: Vector4;\r\n\t/**@internal */\r\n\tprivate _positionStartLifeTime: Vector4;\r\n\t/**@internal */\r\n\tprivate _velocity: Vector3;\r\n\t/**@internal */\r\n\tprivate _startColor: Vector4;\r\n\t/**@internal */\r\n\tprivate _startSize: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation0: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation1: Vector3;\r\n\t/**@internal */\r\n\tprivate _startRotation2: Vector3;\r\n\t/**@internal */\r\n\tprivate _startLifeTime: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _startSpeed: number;\r\n\t/**@internal */\r\n\tprivate _randoms0: Vector4;\r\n\t/**@internal */\r\n\tprivate _randoms1: Vector4;\r\n\t/**@internal */\r\n\tprivate _simulationWorldPostion: Vector3;\r\n\r\n\tget cornerTextureCoordinate(): Vector4 {\r\n\t\treturn this._cornerTextureCoordinate;\r\n\t}\r\n\r\n\tget position(): Vector4 {\r\n\t\treturn this._positionStartLifeTime;\r\n\t}\r\n\r\n\tget velocity(): Vector3 {\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tget startColor(): Vector4 {\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tget startSize(): Vector3 {\r\n\t\treturn this._startSize;\r\n\t}\r\n\r\n\tget startRotation0(): Vector3 {\r\n\t\treturn this._startRotation0;\r\n\t}\r\n\r\n\tget startRotation1(): Vector3 {\r\n\t\treturn this._startRotation1;\r\n\t}\r\n\r\n\tget startRotation2(): Vector3 {\r\n\t\treturn this._startRotation2;\r\n\t}\r\n\r\n\tget startLifeTime(): number {\r\n\t\treturn this._startLifeTime;\r\n\t}\r\n\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tget startSpeed(): number {\r\n\t\treturn this._startSpeed;\r\n\t}\r\n\r\n\tget random0(): Vector4 {\r\n\t\treturn this._randoms0;\r\n\t}\r\n\r\n\tget random1(): Vector4 {\r\n\t\treturn this._randoms1;\r\n\t}\r\n\r\n\tget simulationWorldPostion(): Vector3 {\r\n\t\treturn this._simulationWorldPostion;\r\n\t}\r\n\r\n\tconstructor(cornerTextureCoordinate: Vector4, positionStartLifeTime: Vector4, velocity: Vector3, startColor: Vector4, startSize: Vector3, startRotation0: Vector3, startRotation1: Vector3, startRotation2: Vector3, ageAddScale: number, time: number, startSpeed: number, randoms0: Vector4, randoms1: Vector4, simulationWorldPostion: Vector3) {\r\n\t\tsuper();\r\n\t\tthis._cornerTextureCoordinate = cornerTextureCoordinate;\r\n\t\tthis._positionStartLifeTime = positionStartLifeTime;\r\n\t\tthis._velocity = velocity;\r\n\t\tthis._startColor = startColor;\r\n\t\tthis._startSize = startSize;\r\n\t\tthis._startRotation0 = startRotation0;\r\n\t\tthis._startRotation1 = startRotation1;\r\n\t\tthis._startRotation2 = startRotation2;\r\n\t\tthis._startLifeTime = ageAddScale;\r\n\t\tthis._time = time;\r\n\t\tthis._startSpeed = startSpeed;\r\n\t\tthis._randoms0 = randoms0;\r\n\t\tthis._randoms1 = randoms1;\r\n\t\tthis._simulationWorldPostion = simulationWorldPostion;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @en The Rand class is used to create random numbers using a 32-bit unsigned integer seed.\r\n * @zh Rand 类用于通过32位无符号整型随机种子创建随机数。\r\n */\r\nexport class Rand {\r\n\t/**\r\n\t * @en Obtain unsigned 32-bit floating-point random numbers through unsigned 32-bit shaping\r\n\t * @param v The unsigned 32-bit integer random number.\r\n\t * @returns The 32-bit floating-point random number.\r\n\t * @zh 通过无符号32位整形，获取32位浮点随机数。\r\n\t * @param v 无符号32位整数随机数。\r\n\t * @returns 32位浮点随机数。\r\n\t */\r\n\tstatic getFloatFromInt(v: number): number {\r\n\t\t// take 23 bits of integer, and divide by 2^23-1\r\n\t\treturn (v & 0x007FFFFF) * (1.0 / 8388607.0)\r\n\t}\r\n\r\n\t/**\r\n\t * @en Obtain an unsigned 8-bit byte random number through unsigned 32-bit shaping.\r\n\t * @param v The unsigned 32-bit integer random number.\r\n\t * @returns The unsigned 8-bit byte random number.\r\n\t * @zh 通过无符号32位整形，获取无符号8位字节随机数。\r\n\t * @param v 无符号32位整数随机数。\r\n\t * @returns 无符号8位字节随机数。\r\n\t */\r\n\tstatic getByteFromInt(v: number): number {//TODO：待验证函数\r\n\t\t// take the most significant byte from the 23-bit value\r\n\t\treturn (v & 0x007FFFFF) >>> 15/*(23-8)*/;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _temp: Uint32Array = new Uint32Array(1);\r\n\r\n\t/**\r\n\t * @en Obtain random seeds\r\n\t * @zh 获取随机种子。\r\n\t */\r\n\tseeds: Uint32Array = new Uint32Array(4);\r\n\r\n\t/**\r\n\t * @en The random seed.\r\n\t * @zh 随机种子。\r\n\t */\r\n\tget seed(): number {\r\n\t\treturn this.seeds[0];\r\n\t}\r\n\r\n\tset seed(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Constructor method.\r\n\t * @param\tseed  32bit unsigned integer random seed.\r\n\t * @zh 构造方法。\r\n\t * @param\tseed  32位无符号整型随机种子。\r\n\t */\r\n\tconstructor(seed: number) {\r\n\t\tthis.seeds[0] = seed;\r\n\t\tthis.seeds[1] = this.seeds[0] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[2] = this.seeds[1] * 0x6C078965/*1812433253U*/ + 1;\r\n\t\tthis.seeds[3] = this.seeds[2] * 0x6C078965/*1812433253U*/ + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets an unsigned 32-bit integer random number.\r\n\t * @returns The unsigned 32-bit integer random number.\r\n\t * @zh 获取无符号32位整数随机数\r\n\t * @returns 无符号32位整数随机数。\r\n\t */\r\n\tgetUint(): number {\r\n\t\tthis._temp[0] = this.seeds[0] ^ (this.seeds[0] << 11);\r\n\t\tthis.seeds[0] = this.seeds[1];\r\n\t\tthis.seeds[1] = this.seeds[2];\r\n\t\tthis.seeds[2] = this.seeds[3];\r\n\t\tthis.seeds[3] = (this.seeds[3] ^ (this.seeds[3] >>> 19)) ^ (this._temp[0] ^ (this._temp[0] >>> 8));\r\n\t\treturn this.seeds[3];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets a floating-point random number between 0 and 1.\r\n\t * @returns The floating-point random number between 0 and 1.\r\n\t * @zh 获取0到1之间的浮点随机数。\r\n\t * @returns 0到1之间的浮点随机数。\r\n\t */\r\n\tgetFloat(): number {\r\n\t\tthis.getUint();\r\n\t\treturn (this.seeds[3] & 0x007FFFFF) * (1.0 / 8388607.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets a floating-point random number between -1 and 1.\r\n\t * @returns The floating-point random number between -1 and 1.\r\n\t * @zh 获取-1到1之间的浮点随机数。\r\n\t * @returns -1到1之间的浮点随机数。\r\n\t */\r\n\tgetSignedFloat(): number {\r\n\t\treturn this.getFloat() * 2.0 - 1.0;\r\n\t}\r\n\r\n}\r\n\r\n","import { IClone } from \"../../../../utils/IClone\";\r\nimport { Burst } from \"./Burst\";\r\n\r\n/**\r\n * @en The Emission class is used for particle emitters.\r\n * @zh Emission 类用于粒子发射器。\r\n */\r\nexport class Emission implements IClone {\r\n\t/** @internal */\r\n\tprivate _destroyed: boolean;\r\n\t/** @internal */\r\n\tprivate _emissionRate: number = 10;\r\n\r\n\tprivate _emissionRateOverDistance: number = 0;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Particle bursts, not allowed to modify.\r\n\t * @zh 粒子的爆发，不允许修改。\r\n\t */\r\n\t_bursts: Burst[];\r\n\r\n\t/**\r\n\t * @en Whether the emission is enabled.\r\n\t * @zh 是否启用。\r\n\t */\r\n\tenable: boolean;\r\n\r\n\t/**\r\n\t * @en The particle emission rate.\r\n\t * @zh 粒子发射速率。\r\n\t */\r\n\tget emissionRate(): number {\r\n\t\treturn this._emissionRate;\r\n\t}\r\n\r\n\tset emissionRate(value: number) {\r\n\t\tif (value < 0)\r\n\t\t\tthrow new Error(\"ParticleBaseShape:emissionRate value must large or equal than 0.\");\r\n\t\tthis._emissionRate = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Particle emission rate based on distance (particles/meter).\r\n\t * @zh 粒子基于距离的发射速率（个/米）。\r\n\t */\r\n\tget emissionRateOverDistance(): number {\r\n\t\treturn this._emissionRateOverDistance;\r\n\t}\r\n\r\n\tset emissionRateOverDistance(value: number) {\r\n\t\tvalue = Math.max(0, value);\r\n\t\tthis._emissionRateOverDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the object has been destroyed.\r\n\t * @zh 是否已销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of the Emission class.\r\n\t * @zh 创建Emission类的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._destroyed = false;\r\n\t\tthis._bursts = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @en Destroy the object.\r\n\t * @zh 销毁对象。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._bursts = null;\r\n\t\tthis._destroyed = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get the number of particle bursts.\r\n\t * @zh 获取粒子爆发个数。\r\n\t */\r\n\tgetBurstsCount(): number {\r\n\t\treturn this._bursts.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Get a particle burst by index.\r\n\t * @param index The burst index.\r\n\t * @returns The particle burst.\r\n\t * @zh 通过索引获取粒子爆发。\r\n\t * @param index 粒子爆发索引。\r\n\t * @return 粒子爆发。\r\n\t */\r\n\tgetBurstByIndex(index: number): Burst {\r\n\t\treturn this._bursts[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a particle burst.\r\n\t * @param burst The burst to add.\r\n\t * @zh 增加粒子爆发。\r\n\t * @param burst 要添加的爆发。\r\n\t */\r\n\taddBurst(burst: Burst): void {\r\n\t\tvar burstsCount: number = this._bursts.length;\r\n\t\tif (burstsCount > 0)\r\n\t\t\tfor (var i: number = 0; i < burstsCount; i++) {\r\n\t\t\t\tif (this._bursts[i].time > burst.time)\r\n\t\t\t\t\tthis._bursts.splice(i, 0, burst);\r\n\t\t\t}\r\n\t\tthis._bursts.push(burst);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Remove a particle burst.\r\n\t * @param burst The burst to remove.\r\n\t * @zh 移除粒子爆发。\r\n\t * @param burst 要移除的爆发。\r\n\t */\r\n\tremoveBurst(burst: Burst): void {\r\n\t\tvar index: number = this._bursts.indexOf(burst);\r\n\t\tif (index !== -1) {\r\n\t\t\tthis._bursts.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Remove a particle burst by index.\r\n\t * @param index The burst index to remove.\r\n\t * @zh 通过索引移除粒子爆发。\r\n\t * @param index 爆发索引。\r\n\t */\r\n\tremoveBurstByIndex(index: number): void {\r\n\t\tthis._bursts.splice(index, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clear all particle bursts.\r\n\t * @zh 清空粒子爆发。\r\n\t */\r\n\tclearBurst(): void {\r\n\t\tthis._bursts.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destEmission: Emission = (<Emission>destObject);\r\n\r\n\t\tvar destBursts: Burst[] = destEmission._bursts;\r\n\t\tdestBursts.length = this._bursts.length;\r\n\t\tfor (var i: number = 0, n: number = this._bursts.length; i < n; i++) {\r\n\t\t\tvar destBurst: Burst = destBursts[i];\r\n\t\t\tif (destBurst)\r\n\t\t\t\tthis._bursts[i].cloneTo(destBurst);\r\n\t\t\telse\r\n\t\t\t\tdestBursts[i] = this._bursts[i].clone();\r\n\t\t}\r\n\r\n\t\tdestEmission._emissionRate = this._emissionRate;\r\n\t\tdestEmission._emissionRateOverDistance = this._emissionRateOverDistance;\r\n\t\tdestEmission.enable = this.enable;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destEmission: Emission = new Emission();\r\n\t\tthis.cloneTo(destEmission);\r\n\t\treturn destEmission;\r\n\t}\r\n}","import { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ShuriKenParticle3DShaderDeclaration {\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_BILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_COLORKEYCOUNT_8: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RANDOMCOLOROVERLIFETIME: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIME: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_RENDERMODE_MESH: ShaderDefine;\r\n\r\n\r\n\t//Base\r\n\t/**@internal */\r\n\tstatic WORLDPOSITION: number;\r\n\t/**@internal */\r\n\tstatic WORLDROTATION: number;\r\n\t/**@internal */\r\n\tstatic POSITIONSCALE: number;\r\n\t/**@internal */\r\n\tstatic SIZESCALE: number;\r\n\t/**@internal */\r\n\tstatic SCALINGMODE: number;\r\n\t/**@internal */\r\n\tstatic GRAVITY: number;\r\n\t/**@internal */\r\n\tstatic THREEDSTARTROTATION: number;\r\n\t/**@internal */\r\n\tstatic SHAPE: number;\r\n\t/**@internal */\r\n\tstatic STRETCHEDBILLBOARDLENGTHSCALE: number;\r\n\t/**@internal */\r\n\tstatic STRETCHEDBILLBOARDSPEEDSCALE: number;\r\n\t/**@internal */\r\n\tstatic SIMULATIONSPACE: number;\r\n\t/**@internal */\r\n\tstatic CURRENTTIME: number;\r\n\t/**@internal */\r\n\tstatic DRAG: number;\r\n\r\n\t//VelocityOverLifetime\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTZ: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLVELOCITYGRADIENTZMAX: number;\r\n\t/**@internal */\r\n\tstatic VOLSPACETYPE: number;\r\n\r\n\t//ColorOverLifetime\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTALPHAS: number;\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTCOLORS: number;\r\n\t/**@internal */\r\n\tstatic COLOROVERLIFEGRADIENTRANGES: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTALPHAS: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTCOLORS: number;\r\n\t/**@internal */\r\n\tstatic MAXCOLOROVERLIFEGRADIENTRANGES: number;\r\n\r\n\t//SizeOverLifetime\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENT: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientZ: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientMax: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic SOLSIZEGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic SOLSizeGradientZMAX: number;\r\n\r\n\t//RotationOverLifetime\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENT: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTY: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTZ: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTXMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTYMAX: number;\r\n\t/**@internal */\r\n\tstatic ROLANGULARVELOCITYGRADIENTZMAX: number;\r\n\r\n\t//TextureSheetAnimation\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONCYCLES: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONSUBUVLENGTH: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTUVS: number;\r\n\t/**@internal */\r\n\tstatic TEXTURESHEETANIMATIONGRADIENTMAXUVS: number;\r\n\r\n\r\n\t/**\r\n\t * init\r\n\t */\r\n\tstatic __init__() {\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD = Shader3D.getDefineByName(\"SPHERHBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = Shader3D.getDefineByName(\"STRETCHEDBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = Shader3D.getDefineByName(\"HORIZONTALBILLBOARD\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = Shader3D.getDefineByName(\"VERTICALBILLBOARD\");\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8 = Shader3D.getDefineByName(\"COLORKEYCOUNT_8\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = Shader3D.getDefineByName(\"RANDOMCOLOROVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = Shader3D.getDefineByName(\"VELOCITYOVERLIFETIMERANDOMCURVE\");\r\n\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = Shader3D.getDefineByName(\"TEXTURESHEETANIMATIONRANDOMCURVE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIME\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = Shader3D.getDefineByName(\"ROTATIONOVERLIFETIMESEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVES\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = Shader3D.getDefineByName(\"SIZEOVERLIFETIMERANDOMCURVESSEPERATE\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH = Shader3D.getDefineByName(\"RENDERMODE_MESH\");\r\n\r\n\t\t//Base\r\n\t\tShuriKenParticle3DShaderDeclaration.WORLDPOSITION = Shader3D.propertyNameToID(\"u_WorldPosition\");\r\n\t\tShuriKenParticle3DShaderDeclaration.WORLDROTATION = Shader3D.propertyNameToID(\"u_WorldRotation\");\r\n\t\tShuriKenParticle3DShaderDeclaration.POSITIONSCALE = Shader3D.propertyNameToID(\"u_PositionScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SIZESCALE = Shader3D.propertyNameToID(\"u_SizeScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SCALINGMODE = Shader3D.propertyNameToID(\"u_ScalingMode\");\r\n\t\tShuriKenParticle3DShaderDeclaration.GRAVITY = Shader3D.propertyNameToID(\"u_Gravity\");\r\n\t\tShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION = Shader3D.propertyNameToID(\"u_ThreeDStartRotation\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SHAPE = Shader3D.propertyNameToID(\"u_Shape\");\r\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardLengthScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE = Shader3D.propertyNameToID(\"u_StretchedBillboardSpeedScale\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE = Shader3D.propertyNameToID(\"u_SimulationSpace\");\r\n\t\tShuriKenParticle3DShaderDeclaration.CURRENTTIME = Shader3D.propertyNameToID(\"u_CurrentTime\");\r\n\t\tShuriKenParticle3DShaderDeclaration.DRAG = Shader3D.propertyNameToID(\"u_DragConstanct\");\r\n\r\n\t\t//VelocityOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_VOLVelocityGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_VOLVelocityGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_VOLVelocityGradientMaxZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.VOLSPACETYPE = Shader3D.propertyNameToID(\"u_VOLSpaceType\");\r\n\r\n\t\t//ColorOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientAlphas\");\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientColors\");\r\n\t\tShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_ColorOverLifeGradientRanges\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientAlphas\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientColors\");\r\n\t\tShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES = Shader3D.propertyNameToID(\"u_MaxColorOverLifeGradientRanges\");\r\n\r\n\t\t//SizeOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT = Shader3D.propertyNameToID(\"u_SOLSizeGradient\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX = Shader3D.propertyNameToID(\"u_SOLSizeGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY = Shader3D.propertyNameToID(\"u_SOLSizeGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ = Shader3D.propertyNameToID(\"u_SOLSizeGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax = Shader3D.propertyNameToID(\"u_SOLSizeGradientMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX = Shader3D.propertyNameToID(\"u_SOLSizeGradientMaxZ\");\r\n\r\n\t\t//RotationOverLifetime\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradient\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientZ\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMax\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxX\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxY\");\r\n\t\tShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX = Shader3D.propertyNameToID(\"u_ROLAngularVelocityGradientMaxZ\");\r\n\r\n\t\t//TextureSheetAnimation\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES = Shader3D.propertyNameToID(\"u_TSACycles\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH = Shader3D.propertyNameToID(\"u_TSASubUVLength\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS = Shader3D.propertyNameToID(\"u_TSAGradientUVs\");\r\n\t\tShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS = Shader3D.propertyNameToID(\"u_TSAMaxGradientUVs\");\r\n\r\n\r\n\r\n\r\n\t\tlet uniformMap = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"ShurikenSprite3D\");\r\n\t\t//TODO\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, 'u_WorldPosition',ShaderDataType.Vector3),\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, 'u_WorldRotation',ShaderDataType.Vector4);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, 'u_PositionScale',ShaderDataType.Vector3);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIZESCALE, 'u_SizeScale',ShaderDataType.Vector3);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, 'u_ScalingMode',ShaderDataType.Int);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.GRAVITY, 'u_Gravity',ShaderDataType.Vector3);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, 'u_ThreeDStartRotation',ShaderDataType.Int);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, 'u_StretchedBillboardLengthScale',ShaderDataType.Float);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, 'u_StretchedBillboardSpeedScale',ShaderDataType.Float);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, 'u_SimulationSpace',ShaderDataType.Int);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, 'u_CurrentTime',ShaderDataType.Vector2);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SHAPE, 'u_Shape',ShaderDataType.Float);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, 'u_ColorOverLifeGradientAlphas',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, 'u_ColorOverLifeGradientColors',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, 'u_ColorOverLifeGradientRanges',ShaderDataType.Vector4);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, 'u_MaxColorOverLifeGradientAlphas',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, 'u_MaxColorOverLifeGradientColors',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, 'u_MaxColorOverLifeGradientRanges',ShaderDataType.Vector4);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, 'u_VOLVelocityGradientX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, 'u_VOLVelocityGradientY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, 'u_VOLVelocityGradientZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, 'u_VOLVelocityGradientMaxX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, 'u_VOLVelocityGradientMaxY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, 'u_VOLVelocityGradientMaxZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, 'u_VOLSpaceType',ShaderDataType.Int);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, 'u_SOLSizeGradient',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, 'u_SOLSizeGradientX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, 'u_SOLSizeGradientY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, 'u_SOLSizeGradientZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, 'u_SOLSizeGradientMax',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, 'u_SOLSizeGradientMaxX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, 'u_SOLSizeGradientMaxY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, 'u_SOLSizeGradientMaxZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, 'u_ROLAngularVelocityGradient',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, 'u_ROLAngularVelocityGradientX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, 'u_ROLAngularVelocityGradientY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, 'u_ROLAngularVelocityGradientZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, 'u_ROLAngularVelocityGradientMax',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, 'u_ROLAngularVelocityGradientMaxX',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, 'u_ROLAngularVelocityGradientMaxY',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, 'u_ROLAngularVelocityGradientMaxZ',ShaderDataType.Buffer);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, 'u_TSACycles',ShaderDataType.Float);\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, 'u_TSASubUVLength',ShaderDataType.Vector2);\r\n        uniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, 'u_TSAGradientUVs',ShaderDataType.Buffer); //兼容WGSL\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, 'u_TSAMaxGradientUVs',ShaderDataType.Buffer); //兼容WGSL\r\n\t\tuniformMap.addShaderUniform(ShuriKenParticle3DShaderDeclaration.DRAG, 'u_DragConstanct',ShaderDataType.Vector2);\r\n\t}\r\n}","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n *  @internal\r\n */\r\nexport class ShurikenParticleData {\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\r\n\tstatic startLifeTime: number;\r\n\tstatic startColor: Vector4 = new Vector4();\r\n\tstatic startSize: Float32Array = new Float32Array(3);\r\n\tstatic startRotation: Float32Array = new Float32Array(3);\r\n\tstatic startUVInfo: Float32Array = new Float32Array(4);\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _getStartLifetimeFromGradient(startLifeTimeGradient: GradientDataNumber, emissionTime: number): number {\r\n\t\tfor (var i: number = 1, n: number = startLifeTimeGradient.gradientCount; i < n; i++) {\r\n\t\t\tvar key: number = startLifeTimeGradient.getKeyByIndex(i);\r\n\t\t\tif (key >= emissionTime) {\r\n\t\t\t\tvar lastKey: number = startLifeTimeGradient.getKeyByIndex(i - 1);\r\n\t\t\t\tvar age: number = (emissionTime - lastKey) / (key - lastKey);\r\n\t\t\t\treturn MathUtil.lerp(startLifeTimeGradient.getValueByIndex(i - 1), startLifeTimeGradient.getValueByIndex(i), age)\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"ShurikenParticleData: can't get value foam startLifeTimeGradient.\");\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoationArray(rotatonE: Vector3, outE: Vector3, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): void {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection) {\r\n\t\t\toutE.x = -rotatonE.x;\r\n\t\t\toutE.y = -rotatonE.y;\r\n\t\t\toutE.z = -rotatonE.z;\r\n\t\t} else {\r\n\t\t\toutE.x = rotatonE.x;\r\n\t\t\toutE.y = rotatonE.y;\r\n\t\t\toutE.z = rotatonE.z;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _randomInvertRoation(rotaton: number, randomizeRotationDirection: number, rand: Rand, randomSeeds: Uint32Array): number {\r\n\t\tvar randDic: number;\r\n\t\tif (rand) {\r\n\t\t\trand.seed = randomSeeds[6];\r\n\t\t\trandDic = rand.getFloat();\r\n\t\t\trandomSeeds[6] = rand.seed;\r\n\t\t} else {\r\n\t\t\trandDic = Math.random();\r\n\t\t}\r\n\t\tif (randDic < randomizeRotationDirection)\r\n\t\t\trotaton = -rotaton;\r\n\t\treturn rotaton;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic create(particleSystem: ShurikenParticleSystem, particleRender: ShurikenParticleRenderer): void {\r\n\t\tvar autoRandomSeed: boolean = particleSystem.autoRandomSeed;\r\n\t\tvar rand: Rand = particleSystem._rand;\r\n\t\tvar randomSeeds: Uint32Array = particleSystem._randomSeeds;\r\n\r\n\t\t//StartColor\r\n\t\tswitch (particleSystem.startColorType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tvar constantStartColor: Vector4 = particleSystem.startColorConstant;\r\n\t\t\t\tShurikenParticleData.startColor.x = constantStartColor.x;\r\n\t\t\t\tShurikenParticleData.startColor.y = constantStartColor.y;\r\n\t\t\t\tShurikenParticleData.startColor.z = constantStartColor.z;\r\n\t\t\t\tShurikenParticleData.startColor.w = constantStartColor.w;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, Math.random(), ShurikenParticleData.startColor);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[3];\r\n\t\t\t\t\tVector4.lerp(particleSystem.startColorConstantMin, particleSystem.startColorConstantMax, rand.getFloat(), ShurikenParticleData.startColor);\r\n\t\t\t\t\trandomSeeds[3] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar colorOverLifetime: ColorOverLifetime = particleSystem.colorOverLifetime;\r\n\t\tif (colorOverLifetime && colorOverLifetime.enable) {\r\n\t\t\tvar color: GradientColor = colorOverLifetime.color;\r\n\t\t\tswitch (color.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * color.constant.x;\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * color.constant.y;\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * color.constant.z;\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * color.constant.w;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar colorRandom: number;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tcolorRandom = Math.random();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[10];\r\n\t\t\t\t\t\tcolorRandom = rand.getFloat();\r\n\t\t\t\t\t\trandomSeeds[10] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar minConstantColor: Vector4 = color.constantMin;\r\n\t\t\t\t\tvar maxConstantColor: Vector4 = color.constantMax;\r\n\t\t\t\t\tShurikenParticleData.startColor.x = ShurikenParticleData.startColor.x * MathUtil.lerp(minConstantColor.x, maxConstantColor.x, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.y = ShurikenParticleData.startColor.y * MathUtil.lerp(minConstantColor.y, maxConstantColor.y, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.z = ShurikenParticleData.startColor.z * MathUtil.lerp(minConstantColor.z, maxConstantColor.z, colorRandom);\r\n\t\t\t\t\tShurikenParticleData.startColor.w = ShurikenParticleData.startColor.w * MathUtil.lerp(minConstantColor.w, maxConstantColor.w, colorRandom);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartSize\r\n\t\tvar particleSize: Float32Array = ShurikenParticleData.startSize;\r\n\t\tswitch (particleSystem.startSizeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantSeparate: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\t\t\t\tparticleSize[0] = startSizeConstantSeparate.x;\r\n\t\t\t\t\tparticleSize[1] = startSizeConstantSeparate.y;\r\n\t\t\t\t\tparticleSize[2] = startSizeConstantSeparate.z;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = particleSystem.startSizeConstant;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (particleSystem.threeDStartSize) {\r\n\t\t\t\t\tvar startSizeConstantMinSeparate: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\t\t\t\tvar startSizeConstantMaxSeparate: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = MathUtil.lerp(startSizeConstantMinSeparate.x, startSizeConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[1] = MathUtil.lerp(startSizeConstantMinSeparate.y, startSizeConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\tparticleSize[2] = MathUtil.lerp(startSizeConstantMinSeparate.z, startSizeConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[4];\r\n\t\t\t\t\t\tparticleSize[0] = particleSize[1] = particleSize[2] = MathUtil.lerp(particleSystem.startSizeConstantMin, particleSystem.startSizeConstantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[4] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar sizeOverLifetime: SizeOverLifetime = particleSystem.sizeOverLifetime;\r\n\t\tif (sizeOverLifetime && sizeOverLifetime.enable && sizeOverLifetime.size.type === 1) {\r\n\t\t\tvar size: GradientSize = sizeOverLifetime.size;\r\n\t\t\tif (size.separateAxes) {\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, Math.random());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, Math.random());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\tparticleSize[0] = particleSize[0] * MathUtil.lerp(size.constantMinSeparate.x, size.constantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\tparticleSize[1] = particleSize[1] * MathUtil.lerp(size.constantMinSeparate.y, size.constantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\tparticleSize[2] = particleSize[2] * MathUtil.lerp(size.constantMinSeparate.z, size.constantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar randomSize: number;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[11];\r\n\t\t\t\t\trandomSize = MathUtil.lerp(size.constantMin, size.constantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[11] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tparticleSize[0] = particleSize[0] * randomSize;\r\n\t\t\t\tparticleSize[1] = particleSize[1] * randomSize;\r\n\t\t\t\tparticleSize[2] = particleSize[2] * randomSize;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartRotation//TODO:renderMode2、3模式都不需要旋转，是否移除。\r\n\t\tvar renderMode: number = particleRender.renderMode;\r\n\t\tif (renderMode !== 1) {\r\n\t\t\tswitch (particleSystem.startRotationType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantSeparate: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\t\t\t\t\tvar randomRotationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(startRotationConstantSeparate, randomRotationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = randomRotationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = randomRotationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -randomRotationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = randomRotationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(particleSystem.startRotationConstant, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = 0;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[2] = 0;//需要置0,否则上次缓存影响数据。TODO:mesh模式下使用Z,但是这里为什么是X\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (particleSystem.threeDStartRotation) {\r\n\t\t\t\t\t\tvar startRotationConstantMinSeparate: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\t\t\t\t\tvar startRotationConstantMaxSeparate: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\t\t\t\t\tvar lerpRoationE: Vector3 = ShurikenParticleData._tempVector30;\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, Math.random());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, Math.random());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tlerpRoationE.x = MathUtil.lerp(startRotationConstantMinSeparate.x, startRotationConstantMaxSeparate.x, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.y = MathUtil.lerp(startRotationConstantMinSeparate.y, startRotationConstantMaxSeparate.y, rand.getFloat());\r\n\t\t\t\t\t\t\tlerpRoationE.z = MathUtil.lerp(startRotationConstantMinSeparate.z, startRotationConstantMaxSeparate.z, rand.getFloat());\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tShurikenParticleData._randomInvertRoationArray(lerpRoationE, lerpRoationE, particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[0] = lerpRoationE.x;\r\n\t\t\t\t\t\tShurikenParticleData.startRotation[1] = lerpRoationE.y;\r\n\t\t\t\t\t\tif (renderMode !== 4)\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = -lerpRoationE.z;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[2] = lerpRoationE.z;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, Math.random()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[5];\r\n\t\t\t\t\t\t\tShurikenParticleData.startRotation[0] = ShurikenParticleData._randomInvertRoation(MathUtil.lerp(particleSystem.startRotationConstantMin, particleSystem.startRotationConstantMax, rand.getFloat()), particleSystem.randomizeRotationDirection, autoRandomSeed ? null : rand, randomSeeds);\r\n\t\t\t\t\t\t\trandomSeeds[5] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//StartLifetime\r\n\t\tswitch (particleSystem.startLifetimeType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tShurikenParticleData.startLifeTime = particleSystem.startLifetimeConstant;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tShurikenParticleData.startLifeTime = ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradient, particleSystem.emissionTime);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(particleSystem.startLifetimeConstantMin, particleSystem.startLifetimeConstantMax, rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tvar emissionTime: number = particleSystem.emissionTime;\r\n\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), Math.random());\r\n\t\t\t\t} else {\r\n\t\t\t\t\trand.seed = randomSeeds[7];\r\n\t\t\t\t\tShurikenParticleData.startLifeTime = MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMin, emissionTime), ShurikenParticleData._getStartLifetimeFromGradient(particleSystem.startLifeTimeGradientMax, emissionTime), rand.getFloat());\r\n\t\t\t\t\trandomSeeds[7] = rand.seed;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\r\n\t\t//StartUV\r\n\t\tvar textureSheetAnimation: TextureSheetAnimation = particleSystem.textureSheetAnimation;\r\n\t\tvar enableSheetAnimation: boolean = textureSheetAnimation && textureSheetAnimation.enable;\r\n\t\tif (enableSheetAnimation) {\r\n\t\t\tvar title: Vector2 = textureSheetAnimation.tiles;\r\n\t\t\tvar titleX: number = title.x, titleY: number = title.y;\r\n\t\t\tvar subU: number = 1.0 / titleX, subV: number = 1.0 / titleY;\r\n\r\n\t\t\tvar startFrameCount: number;\r\n\t\t\tvar startFrame: StartFrame = textureSheetAnimation.startFrame;\r\n\t\t\tswitch (startFrame.type) {\r\n\t\t\t\tcase 0://常量模式\r\n\t\t\t\t\tstartFrameCount = startFrame.constant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://随机双常量模式\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, Math.random());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[14];\r\n\t\t\t\t\t\tstartFrameCount = MathUtil.lerp(startFrame.constantMin, startFrame.constantMax, rand.getFloat());\r\n\t\t\t\t\t\trandomSeeds[14] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar frame: FrameOverTime = textureSheetAnimation.frame;\r\n\t\t\tvar cycles: number = textureSheetAnimation.cycles;\r\n\t\t\tswitch (frame.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrameCount += frame.constant * cycles;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, Math.random()) * cycles;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trand.seed = randomSeeds[15];\r\n\t\t\t\t\t\tstartFrameCount += MathUtil.lerp(frame.constantMin, frame.constantMax, rand.getFloat()) * cycles;\r\n\t\t\t\t\t\trandomSeeds[15] = rand.seed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startRow: number = 0;//TODO:case 2 没处理\r\n\t\t\tswitch (textureSheetAnimation.type) {\r\n\t\t\t\tcase 0://Whole Sheet\r\n\t\t\t\t\tstartRow = Math.floor(startFrameCount / titleX);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://Singal Row\r\n\t\t\t\t\tif (textureSheetAnimation.randomRow) {\r\n\t\t\t\t\t\tif (autoRandomSeed) {\r\n\t\t\t\t\t\t\tstartRow = Math.floor(Math.random() * titleY);\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trand.seed = randomSeeds[13];\r\n\t\t\t\t\t\t\tstartRow = Math.floor(rand.getFloat() * titleY);\r\n\t\t\t\t\t\t\trandomSeeds[13] = rand.seed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstartRow = textureSheetAnimation.rowIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tvar startCol: number = Math.floor(startFrameCount % titleX);\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = subU;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = subV;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = startCol * subU;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = startRow * subV;\r\n\t\t} else {\r\n\t\t\tShurikenParticleData.startUVInfo = ShurikenParticleData.startUVInfo;\r\n\t\t\tShurikenParticleData.startUVInfo[0] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[1] = 1.0;\r\n\t\t\tShurikenParticleData.startUVInfo[2] = 0.0;\r\n\t\t\tShurikenParticleData.startUVInfo[3] = 0.0;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Rand } from \"../../math/Rand\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape, ParticleSystemShapeType } from \"./module/shape/BaseShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { ShaderData } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { SerializeUtil } from \"../../../loaders/SerializeUtil\";\r\n\r\n\r\n/**\r\n * @en The ShurikenParticleSystem class is used to create 3D particle data templates.\r\n * @zh ShurikenParticleSystem 类用于创建3D粒子数据模板。\r\n */\r\nexport class ShurikenParticleSystem extends GeometryElement implements IClone {\r\n    /** @internal 0:Burst,1:预留,2:StartDelay,3:StartColor,4:StartSize,5:StartRotation,6:randomizeRotationDirection,7:StartLifetime,8:StartSpeed,9:VelocityOverLifetime,10:ColorOverLifetime,11:SizeOverLifetime,12:RotationOverLifetime,13-15:TextureSheetAnimation,16-17:Shape*/\r\n    static _RANDOMOFFSET: Uint32Array = new Uint32Array([0x23571a3e, 0xc34f56fe, 0x13371337, 0x12460f3b, 0x6aed452e, 0xdec4aea1, 0x96aa4de3, 0x8d2c8431, 0xf3857f6f, 0xe0fbd834, 0x13740583, 0x591bc05c, 0x40eb95e4, 0xbc524e5f, 0xaf502044, 0xa614b381, 0x1034e524, 0xfc524e5f]);\r\n\r\n    /** @internal */\r\n    protected static halfKSqrtOf2: number = 1.42 * 0.5;\r\n\r\n    /** @internal */\r\n    protected static g: number = 9.8;\r\n\r\n    /** @internal */\r\n    static _maxElapsedTime: number = 1.0 / 3.0;\r\n\r\n    /**@internal */\r\n    protected static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector31: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector32: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector33: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector34: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector35: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector36: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected static _tempVector37: Vector3 = new Vector3();\r\n    /** @internal */\r\n    protected static _tempPosition: Vector3 = new Vector3();\r\n    /** @internal */\r\n    protected static _tempDirection: Vector3 = new Vector3();\r\n\r\n    /**@internal */\r\n    protected static _type: number = GeometryElement._typeCounter++;\r\n    /** @internal */\r\n    _bounds: Bounds = null;\r\n    /** \r\n     * @internal \r\n     * @en Gravity effect offset, used to calculate the world bounding box\r\n     * @zh 重力影响偏移, 用于计算世界包围盒 \r\n     */\r\n    _gravityOffset: Vector2 = new Vector2();\r\n\r\n    /** @internal */\r\n    _customBounds: Bounds = null;\r\n\r\n    /** @internal */\r\n    _useCustomBounds: boolean = false;\r\n\r\n    /** @internal */\r\n    protected _owner: Sprite3D = null;\r\n    /** @internal */\r\n    protected _ownerRender: ShurikenParticleRenderer = null;\r\n    /**@internal */\r\n    protected _vertices: Float32Array = null;\r\n    /**@internal */\r\n    protected _floatCountPerVertex: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeIndex: number = 0;\r\n    /**@internal */\r\n    protected _timeIndex: number = 0;\r\n    /**@internal */\r\n    protected _simulationUV_Index: number = 0\r\n    /**@internal */\r\n    protected _simulateUpdate: boolean = false;\r\n\r\n\r\n    /**@internal */\r\n    protected _firstActiveElement: number = 0;\r\n    /**@internal */\r\n    protected _firstNewElement: number = 0;\r\n    /**@internal */\r\n    protected _firstFreeElement: number = 0;\r\n    /**@internal */\r\n    protected _firstRetiredElement: number = 0;\r\n    /**@internal */\r\n    protected _drawCounter: number = 0;\r\n    /**@internal 最大粒子数量*/\r\n    protected _bufferMaxParticles: number = 0;\r\n    /**@internal */\r\n    protected _emission: Emission = null;\r\n    /**@internal */\r\n    protected _shape: BaseShape = null;\r\n\r\n    /**@internal */\r\n    protected _isEmitting: boolean = false;\r\n    /**@internal */\r\n    protected _isPlaying: boolean = false;\r\n    /**@internal */\r\n    protected _isPaused: boolean = false;\r\n    /**@internal */\r\n    protected _playStartDelay: number = 0;\r\n    /**@internal 发射的累计时间。*/\r\n    protected _frameRateTime: number = 0;\r\n    /**@internal 一次循环内的累计时间。*/\r\n    protected _emissionTime: number = 0;\r\n    /**@internal 用来计算时间是否超过发射延迟时间*/\r\n    protected _totalDelayTime: number = 0;\r\n    /** @internal 上次发射到当前的移动总距离，每次根据距离发射粒子后清空 */\r\n    protected _emissionDistance: number = 0;\r\n    protected _emissionLastPosition: Vector3 = new Vector3();\r\n    /**@internal */\r\n    protected _burstsIndex: number = 0;\r\n    ///**@internal 发射粒子最小时间间隔。*/\r\n    //protected var _minEmissionTime:Number;\r\n    /**@internal */\r\n    protected _velocityOverLifetime: VelocityOverLifetime = null;\r\n    /**@internal */\r\n    protected _colorOverLifetime: ColorOverLifetime = null;\r\n    /**@internal */\r\n    protected _sizeOverLifetime: SizeOverLifetime = null;\r\n    /**@internal */\r\n    protected _rotationOverLifetime: RotationOverLifetime = null;\r\n    /**@internal */\r\n    protected _textureSheetAnimation: TextureSheetAnimation = null;\r\n    /**@internal */\r\n    protected _startLifetimeType: number = 0;\r\n    /**@internal */\r\n    protected _startLifetimeConstant: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeGradient: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _startLifetimeConstantMin: number = 0;\r\n    /**@internal */\r\n    protected _startLifetimeConstantMax: number = 0;\r\n    /**@internal */\r\n    protected _startLifeTimeGradientMin: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _startLifeTimeGradientMax: GradientDataNumber = null;\r\n    /**@internal */\r\n    protected _maxStartLifetime: number = 0;\r\n\r\n    /** @internal */\r\n    protected _uvLength: Vector2 = new Vector2();//TODO:\r\n    /** @internal */\r\n    protected _vertexStride: number = 0;\r\n    /** @internal */\r\n    protected _indexStride: number = 0;\r\n    /**@internal */\r\n    protected _vertexBuffer: VertexBuffer3D = null;\r\n    /**@internal */\r\n    protected _indexBuffer: IndexBuffer3D = null;\r\n    /** @internal */\r\n    protected _bufferState: BufferState = new BufferState();\r\n\r\n    /**@internal */\r\n    protected _updateMask: number = 0;\r\n\r\n    /**@internal */\r\n    _currentTime: number = 0;\r\n    /**@internal */\r\n    _startUpdateLoopCount: number = 0;\r\n    /**@internal */\r\n    _rand: Rand = null;\r\n    /**@internal */\r\n    _randomSeeds: Uint32Array = null;\r\n\r\n    /**\r\n     * @en Total duration of particle system runtime, in seconds.\r\n     * @zh 粒子运行的总时长，单位为秒。\r\n     */\r\n    duration: number = 0;\r\n    /**\r\n     * @en Whether the particle system is looping.\r\n     * @zh 是否循环。\r\n     */\r\n    looping: boolean = false;\r\n    /**\r\n     * @en Whether to prewarm the particle system. Currently not supported.\r\n     * @zh 是否预热。暂不支持。\r\n     */\r\n    prewarm: boolean = false;\r\n    /**\r\n     * @en Start delay type. 0 for constant mode, 1 for random between two constants. Cannot be used with prewarm.\r\n     * @zh 开始延迟类型，0为常量模式，1为随机双常量模式。不能和prewarm一起使用。\r\n     */\r\n    startDelayType: number = 0;\r\n    /**\r\n     * @en Start play delay. Cannot be used with prewarm.\r\n     * @zh 开始播放延迟。不能和prewarm一起使用。\r\n     */\r\n    startDelay: number = 0;\r\n    /**\r\n     * @en Minimum start play delay. Cannot be used with prewarm.\r\n     * @zh 开始播放最小延迟。不能和prewarm一起使用。\r\n     */\r\n    startDelayMin: number = 0;\r\n    /**\r\n     * @en Maximum start play delay. Cannot be used with prewarm.\r\n     * @zh 开始播放最大延迟。不能和prewarm一起使用。\r\n     */\r\n    startDelayMax: number = 0;\r\n\r\n    /**\r\n     * @en Start speed mode. 0 for constant speed, 2 for random between two constants. Modes 1 and 3 are missing.\r\n     * @zh 开始速度模式。0为恒定速度，2为两个恒定速度的随机插值。缺少1、3模式。\r\n     */\r\n    startSpeedType: number = 0;\r\n    /**\r\n     * @en Start speed for mode 0.\r\n     * @zh 开始速度，0模式。\r\n     */\r\n    startSpeedConstant: number = 0;\r\n    /**\r\n     * @en Minimum start speed for mode 1.\r\n     * @zh 最小开始速度，1模式。\r\n     */\r\n    startSpeedConstantMin: number = 0;\r\n    /**\r\n     * @en Maximum start speed for mode 1.\r\n     * @zh 最大开始速度，1模式。\r\n     */\r\n    startSpeedConstantMax: number = 0;\r\n\r\n    /**\r\n     * @en Drag type. 0 for constant speed, 2 for random between two constants.\r\n     * @zh 阻力模式。0为恒定速度，2为两个恒定速度的随机插值。\r\n     */\r\n    dragType: number = 0;\r\n    /**\r\n     * @en Constant drag for mode 0.\r\n     * @zh 恒定阻力，0模式。\r\n     */\r\n    dragConstant: number = 0;\r\n    /**\r\n     * @en Minimum drag speed for mode 1.\r\n     * @zh 最小阻力速度，1模式。\r\n     */\r\n    dragSpeedConstantMin: number = 0;\r\n    /**\r\n     * @en Maximum drag speed for mode 1.\r\n     * @zh 最大阻力速度，1模式。\r\n     */\r\n    dragSpeedConstantMax: number = 0;\r\n\r\n    /**\r\n     * @en Whether the start size is in 3D mode.\r\n     * @zh 开始尺寸是否为3D模式。\r\n     */\r\n    threeDStartSize: boolean = false;\r\n    /**\r\n     * @en Start size mode. 0 for constant size, 2 for random between two constants. Modes 1 and 3 and corresponding 3D modes are missing.\r\n     * @zh 开始尺寸模式。0为恒定尺寸，2为两个恒定尺寸的随机插值。缺少1、3模式和对应的两种3D模式。\r\n     */\r\n    startSizeType: number = 0;\r\n    /**\r\n     * @en Start size for mode 0.\r\n     * @zh 开始尺寸，0模式。\r\n     */\r\n    startSizeConstant: number = 0;\r\n    /**\r\n     * @en Start 3D size for mode 0.\r\n     * @zh 开始三维尺寸，0模式。\r\n     */\r\n    startSizeConstantSeparate: Vector3 = null;\r\n    /**\r\n     * @en Minimum start size for mode 2.\r\n     * @zh 最小开始尺寸，2模式。\r\n     */\r\n    startSizeConstantMin: number = 0;\r\n    /**\r\n     * @en Maximum start size for mode 2.\r\n     * @zh 最大开始尺寸，2模式。\r\n     */\r\n    startSizeConstantMax: number = 0;\r\n    /**\r\n     * @en Minimum 3D start size for mode 2.\r\n     * @zh 最小三维开始尺寸，2模式。\r\n     */\r\n    startSizeConstantMinSeparate: Vector3 = null;\r\n    /**\r\n     * @en Maximum 3D start size for mode 2.\r\n     * @zh 最大三维开始尺寸，2模式。\r\n     */\r\n    startSizeConstantMaxSeparate: Vector3 = null;\r\n\r\n    /**\r\n     * @en Whether to use 3D start rotation.\r\n     * @zh 是否使用3D开始旋转。\r\n     */\r\n    threeDStartRotation: boolean = false;\r\n    /**\r\n     * @en Start rotation mode. 0 for constant rotation, 2 for random between two constants. Two modes and corresponding four 3D modes are missing.\r\n     * @zh 开始旋转模式。0为恒定旋转，2为两个恒定旋转的随机插值。缺少2种模式和对应的四种3D模式。\r\n     */\r\n    startRotationType: number = 0;\r\n    /**\r\n     * @en Start rotation for mode 0.\r\n     * @zh 开始旋转，0模式。\r\n     */\r\n    startRotationConstant: number = 0;\r\n    /**\r\n     * @en Start 3D rotation for mode 0.\r\n     * @zh 开始三维旋转，0模式。\r\n     */\r\n    startRotationConstantSeparate: Vector3 = null;\r\n    /**\r\n     * @en Minimum start rotation for mode 1.\r\n     * @zh 最小开始旋转，1模式。\r\n     */\r\n    startRotationConstantMin: number = 0;\r\n    /**\r\n     * @en Maximum start rotation for mode 1.\r\n     * @zh 最大开始旋转，1模式。\r\n     */\r\n    startRotationConstantMax: number = 0;\r\n    /**\r\n     * @en Minimum start 3D rotation for mode 1.\r\n     * @zh 最小开始三维旋转，1模式。\r\n     */\r\n    startRotationConstantMinSeparate: Vector3 = null;\r\n    /**\r\n     * @en Maximum start 3D rotation for mode 1.\r\n     * @zh 最大开始三维旋转，1模式。\r\n     */\r\n    startRotationConstantMaxSeparate: Vector3 = null;\r\n\r\n    /**\r\n     * @en Random rotation direction, range from 0.0 to 1.0.\r\n     * @zh 随机旋转方向，范围为0.0到1.0。\r\n     */\r\n    randomizeRotationDirection: number = 0;\r\n\r\n    /**\r\n     * @en Start color mode. 0 for constant color, 2 for random between two constant colors. Two modes are missing.\r\n     * @zh 开始颜色模式。0为恒定颜色，2为两个恒定颜色的随机插值。缺少2种模式。\r\n     */\r\n    startColorType: number = 0;\r\n    /**\r\n     * @en Start color for mode 0.\r\n     * @zh 开始颜色，0模式。\r\n     */\r\n    startColorConstant: Vector4 = new Vector4(1, 1, 1, 1);\r\n    /**\r\n     * @en Minimum start color for mode 1.\r\n     * @zh 最小开始颜色，1模式。\r\n     */\r\n    startColorConstantMin: Vector4 = new Vector4(0, 0, 0, 0);\r\n    /**\r\n     * @en Maximum start color for mode 1.\r\n     * @zh 最大开始颜色，1模式。\r\n     */\r\n    startColorConstantMax: Vector4 = new Vector4(1, 1, 1, 1);\r\n\r\n    /**\r\n     * @en Gravity modifier.\r\n     * @zh 重力敏感度。\r\n     */\r\n    gravityModifier: number = 0;\r\n    /**\r\n     * @en Simulation space. 0 for World, 1 for Local. Custom is currently not supported.\r\n     * @zh 模拟器空间。0为World，1为Local。暂不支持Custom。\r\n     */\r\n    simulationSpace: number = 0;\r\n    /**\r\n     * @en Playback speed of particles.\r\n     * @zh 粒子的播放速度。\r\n     */\r\n    simulationSpeed: number = 1.0;\r\n    /**\r\n     * @en Scale mode. 0 for Hierarchy (world), 1 for Local, 2 for World.\r\n     * @zh 缩放模式。0为Hierarchy (world)，1为Local，2为World。\r\n     */\r\n    scaleMode: number = 1;\r\n    /**\r\n     * @en Whether to play automatically when activated.\r\n     * @zh 激活时是否自动播放。\r\n     */\r\n    playOnAwake: boolean = false;\r\n\r\n    /**\r\n     * @en Random seed. Note: Effective when set before play().\r\n     * @zh 随机种子。注：在play()之前设置有效。\r\n     */\r\n    randomSeed: Uint32Array = null;\r\n    /**\r\n     * @en Whether to use a random seed.\r\n     * @zh 是否使用随机种子。\r\n     */\r\n    autoRandomSeed: boolean = false;\r\n\r\n    /**\r\n     * @en Whether it's in performance mode. In performance mode, particle release will be delayed.\r\n     * @zh 是否为性能模式。性能模式下会延迟粒子释放。\r\n     */\r\n    isPerformanceMode: boolean = false;\r\n\r\n    /**\r\n     * @en Maximum number of particles\r\n     * @zh 最大粒子数。\r\n     */\r\n    get maxParticles(): number {\r\n        return this._bufferMaxParticles - 1;\r\n    }\r\n\r\n    set maxParticles(value: number) {//TODO:是否要重置其它参数\r\n        var newMaxParticles: number = value + 1;\r\n        if (newMaxParticles !== this._bufferMaxParticles) {\r\n            this._bufferMaxParticles = newMaxParticles;\r\n            this._initBufferDatas();\r\n        }\r\n\r\n        if (!SerializeUtil.isDeserializing)\r\n            this._updateParticlesSimulationRestart(0);\r\n    }\r\n\r\n    /**\r\n     * @en Emission.\r\n     * @zh 发射器。\r\n     */\r\n    get emission(): Emission {\r\n        return this._emission;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Number of alive particles\r\n     * @zh 粒子存活个数。\r\n     */\r\n    get aliveParticleCount(): number {\r\n        if (this._firstNewElement >= this._firstRetiredElement)\r\n            return this._firstNewElement - this._firstRetiredElement;\r\n        else\r\n            return this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;\r\n    }\r\n\r\n    /**\r\n     * @en Accumulated time within one cycle.\r\n     * @zh 一次循环内的累计时间。\r\n     */\r\n    get emissionTime(): number {\r\n        return this._emissionTime > this.duration ? this.duration : this._emissionTime;\r\n    }\r\n\r\n    /**\r\n     * @en Particle shape\r\n     * @zh 粒子形状。\r\n     */\r\n    get shape(): BaseShape {\r\n        return this._shape;\r\n    }\r\n\r\n    set shape(value: BaseShape) {\r\n        if (this._shape !== value) {\r\n            this._shape = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en If the particle system is still alive.\r\n     * @zh 粒子系统是否仍然存活。\r\n     */\r\n    get isAlive(): boolean {\r\n        if (this._isPlaying || this.aliveParticleCount > 0)//TODO:暂时忽略retired\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en If the particle system is currently emitting particles.\r\n     * @zh 粒子系统是否正在发射粒子。\r\n     */\r\n    get isEmitting(): boolean {\r\n        return this._isEmitting;\r\n    }\r\n\r\n    /**\r\n     * @en If the particle system is currently playing.\r\n     * @zh 粒子系统是否正在播放。\r\n     */\r\n    get isPlaying(): boolean {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    /**\r\n     * @en If the particle system is currently paused.\r\n     * @zh 粒子系统是否已暂停。\r\n     */\r\n    get isPaused(): boolean {\r\n        return this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * @en The lifectime mode of particles. 0: Constant, 1: Gradient, 2: Random Between Two Constants, 3: Random Between Two Gradients.\r\n     * @zh 粒子的生命周期模式。0: 固定时间, 1: 渐变时间, 2: 两个固定值之间的随机插值, 3: 两个渐变时间的随机插值。\r\n     */\r\n    get startLifetimeType(): number {\r\n        return this._startLifetimeType;\r\n    }\r\n\r\n    set startLifetimeType(value: number) {\r\n        //if (value !== _startLifetimeType){\r\n        var i: number, n: number;\r\n        switch (this.startLifetimeType) {\r\n            case 0:\r\n                this._maxStartLifetime = this.startLifetimeConstant;\r\n                break;\r\n            case 1:\r\n                this._maxStartLifetime = -Number.MAX_VALUE;\r\n                var startLifeTimeGradient: GradientDataNumber = startLifeTimeGradient;\r\n                for (i = 0, n = startLifeTimeGradient.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradient.getValueByIndex(i));\r\n                break;\r\n            case 2:\r\n                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);\r\n                break;\r\n            case 3:\r\n                this._maxStartLifetime = -Number.MAX_VALUE;\r\n                var startLifeTimeGradientMin: GradientDataNumber = startLifeTimeGradientMin;\r\n                for (i = 0, n = startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMin.getValueByIndex(i));\r\n                var startLifeTimeGradientMax: GradientDataNumber = startLifeTimeGradientMax;\r\n                for (i = 0, n = startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n                    this._maxStartLifetime = Math.max(this._maxStartLifetime, startLifeTimeGradientMax.getValueByIndex(i));\r\n                break;\r\n        }\r\n        this._startLifetimeType = value;\r\n        //}\r\n    }\r\n\r\n    /**\r\n     * @en The lifecycle mode of particles: Constant(0), unit is seconds.\r\n     * @zh 粒子生命周期模式：固定时间(模式0)，单位为秒。\r\n     */\r\n    get startLifetimeConstant(): number {\r\n        return this._startLifetimeConstant;\r\n    }\r\n\r\n    set startLifetimeConstant(value: number) {\r\n        if (this._startLifetimeType === 0)\r\n            this._maxStartLifetime = value;\r\n        this._startLifetimeConstant = value;\r\n    }\r\n\r\n    /**\r\n     * @en The lifecycle mode of particles: Gradient(1), unit is seconds.\r\n     * @zh 粒子生命周期模式：渐变时间(模式1)，单位为秒。\r\n     */\r\n    get startLifeTimeGradient(): GradientDataNumber {\r\n        return this._startLifeTimeGradient;\r\n    }\r\n\r\n    set startLifeTimeGradient(value: GradientDataNumber) {//无法使用if (_startLifeTimeGradient !== value)过滤，同一个GradientDataNumber可能修改了值,因此所有startLifeTime属性都统一处理\r\n        if (this._startLifetimeType === 1) {\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (var i: number = 0, n: number = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradient = value;\r\n    }\r\n\r\n    /**\r\n     * @en The minimum particle lifecycle, the lifecycle mode of particles: Random Between Two Constants（2）, unit is seconds.\r\n     * @zh 最小粒子生命周期，粒子生命周期模式: 两个固定值之间的随机插值(模式2)，单位为秒。\r\n     */\r\n    get startLifetimeConstantMin(): number {\r\n        return this._startLifetimeConstantMin;\r\n    }\r\n\r\n    set startLifetimeConstantMin(value: number) {\r\n        if (this._startLifetimeType === 2)\r\n            this._maxStartLifetime = Math.max(value, this._startLifetimeConstantMax);\r\n        this._startLifetimeConstantMin = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The maximum particle lifecycle, the lifecycle mode of particles: Random Between Two Constants（2）, unit is seconds.\r\n     * @zh 最大粒子生命周期，粒子生命周期模式: 两个固定值之间的随机插值(模式2)，单位为秒。\r\n     */\r\n    get startLifetimeConstantMax(): number {\r\n        return this._startLifetimeConstantMax;\r\n    }\r\n\r\n    set startLifetimeConstantMax(value: number) {\r\n        if (this._startLifetimeType === 2)\r\n            this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, value);\r\n        this._startLifetimeConstantMax = value;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @en Minimum value of gradient time, the lifecycle mode of particles: Random Between Two Gradients（3）, unit is seconds.\r\n     * @zh 渐变时间的最小值，粒子生命周期模式: 两个渐变时间的随机插值(模式3)，单位为秒。\r\n     */\r\n    get startLifeTimeGradientMin(): GradientDataNumber {\r\n        return this._startLifeTimeGradientMin;\r\n    }\r\n\r\n    set startLifeTimeGradientMin(value: GradientDataNumber) {\r\n        if (this._startLifetimeType === 3) {\r\n            var i: number, n: number;\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (i = 0, n = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n            for (i = 0, n = this._startLifeTimeGradientMax.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradientMin = value;\r\n    }\r\n\r\n    /**\r\n     * @en Maximum value of gradient time, the lifecycle mode of particles: Random Between Two Gradients（3）, unit is seconds.\r\n     * @zh 渐变时间的最大值，粒子生命周期模式: 两个渐变时间的随机插值(模式3)，单位为秒。\r\n     */\r\n    get startLifeTimeGradientMax(): GradientDataNumber {\r\n        return this._startLifeTimeGradientMax;\r\n    }\r\n\r\n    set startLifeTimeGradientMax(value: GradientDataNumber) {\r\n        if (this._startLifetimeType === 3) {\r\n            var i: number, n: number;\r\n            this._maxStartLifetime = -Number.MAX_VALUE;\r\n            for (i = 0, n = this._startLifeTimeGradientMin.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(i));\r\n            for (i = 0, n = value.gradientCount; i < n; i++)\r\n                this._maxStartLifetime = Math.max(this._maxStartLifetime, value.getValueByIndex(i));\r\n        }\r\n        this._startLifeTimeGradientMax = value;\r\n    }\r\n\r\n    /**\r\n     * @en The velocity over lifetime. Note: If you modify certain properties of this value, you need to reassign this property for it to take effect.\r\n     * @zh 生命周期速度。注意：如修改该值的某些属性，需重新赋值此属性才可生效。\r\n     */\r\n    get velocityOverLifetime(): VelocityOverLifetime {\r\n        return this._velocityOverLifetime;\r\n    }\r\n\r\n    set velocityOverLifetime(value: VelocityOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._baseRenderNode.shaderData;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n\r\n        this._velocityOverLifetime = value;\r\n\r\n        if (value) {\r\n            var velocity: GradientVelocity = value.velocity;\r\n            var velocityType: number = velocity.type;\r\n\r\n            if (value.enable) {\r\n                shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);\r\n                switch (velocityType) {\r\n                    case 0:\r\n                        velocity.gradientConstantX._formatData();\r\n                        velocity.gradientConstantY._formatData();\r\n                        velocity.gradientConstantZ._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientConstantX._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientConstantY._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientConstantZ._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientConstantX._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientConstantY._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientConstantZ._elements);\r\n                        break;\r\n                    case 1:\r\n                        velocity.gradientX._formatData();\r\n                        velocity.gradientY._formatData();\r\n                        velocity.gradientZ._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientX._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientY._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZ._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientX._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientZ._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientY._elements);\r\n                        break;\r\n                    case 2:\r\n                        velocity.gradientConstantXMin._formatData();\r\n                        velocity.gradientConstantYMin._formatData();\r\n                        velocity.gradientConstantZMin._formatData();\r\n                        velocity.gradientConstantXMax._formatData();\r\n                        velocity.gradientConstantYMax._formatData();\r\n                        velocity.gradientConstantZMax._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientConstantXMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientConstantYMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientConstantZMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientConstantXMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientConstantYMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientConstantZMax._elements);\r\n                        break;\r\n                    case 3:\r\n                        velocity.gradientXMin._formatData();\r\n                        velocity.gradientYMin._formatData();\r\n                        velocity.gradientZMin._formatData();\r\n                        velocity.gradientXMax._formatData();\r\n                        velocity.gradientYMax._formatData();\r\n                        velocity.gradientZMax._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX, velocity.gradientXMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY, velocity.gradientYMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ, velocity.gradientZMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX, velocity.gradientXMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX, velocity.gradientZMax._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX, velocity.gradientYMax._elements);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            shaDat.setInt(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE, value.space);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The color over lifetime. Note: If you modify certain properties of this value, you need to reassign this property for it to take effect.\r\n     * @zh 生命周期颜色。注意：如修改该值的某些属性，需重新赋值此属性才可生效。\r\n     */\r\n    get colorOverLifetime(): ColorOverLifetime {\r\n        return this._colorOverLifetime;\r\n    }\r\n\r\n    set colorOverLifetime(value: ColorOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._baseRenderNode.shaderData;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n\r\n        this._colorOverLifetime = value;\r\n\r\n        if (value) {\r\n            var color: GradientColor = value.color;\r\n            if (value.enable) {\r\n\r\n                switch (color.type) {\r\n                    case 1:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n                        let gradientColor: Gradient = color.gradient;\r\n                        let alphaElements: Float32Array = gradientColor.alphaElements;\r\n                        let rgbElements: Float32Array = gradientColor.rgbElements;\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, alphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, rgbElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, alphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, rgbElements);\r\n                        let ranges = gradientColor._keyRanges;\r\n                        ranges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0, n = Math.max(2, gradientColor.colorRGBKeysCount); index < n; index++) {\r\n                            let colorKey = rgbElements[index * 4];\r\n                            ranges.x = Math.min(ranges.x, colorKey);\r\n                            ranges.y = Math.max(ranges.y, colorKey);\r\n                        }\r\n                        for (let index = 0, n = Math.max(2, gradientColor.colorAlphaKeysCount); index < n; index++) {\r\n                            let alphaKey = alphaElements[index * 2];\r\n                            ranges.z = Math.min(ranges.z, alphaKey);\r\n                            ranges.w = Math.max(ranges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, ranges);\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, ranges);\r\n                        if (gradientColor.maxColorAlphaKeysCount == 8) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        else {\r\n                            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);\r\n                        let minGradientColor: Gradient = color.gradientMin;\r\n                        let maxGradientColor: Gradient = color.gradientMax;\r\n\r\n                        let minalphaElements: Float32Array = minGradientColor.alphaElements;\r\n                        let minrgbElements: Float32Array = minGradientColor.rgbElements;\r\n\r\n                        let maxalphaElements: Float32Array = maxGradientColor.alphaElements;\r\n                        let maxrgbElements: Float32Array = maxGradientColor.rgbElements;\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS, minalphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS, minrgbElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS, maxalphaElements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS, maxrgbElements);\r\n\r\n                        let minRanges = minGradientColor._keyRanges;\r\n                        minRanges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0, n = Math.max(2, minGradientColor.colorRGBKeysCount); index < n; index++) {\r\n                            let colorKey = minrgbElements[index * 4];\r\n                            minRanges.x = Math.min(minRanges.x, colorKey);\r\n                            minRanges.y = Math.max(minRanges.y, colorKey);\r\n                        }\r\n                        for (let index = 0, n = Math.max(2, minGradientColor.colorAlphaKeysCount); index < n; index++) {\r\n                            let alphaKey = minalphaElements[index * 2];\r\n                            minRanges.z = Math.min(minRanges.z, alphaKey);\r\n                            minRanges.w = Math.max(minRanges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES, minRanges);\r\n                        let maxRanges = maxGradientColor._keyRanges;\r\n                        maxRanges.setValue(1, 0, 1, 0);\r\n                        for (let index = 0, n = Math.max(2, maxGradientColor.colorRGBKeysCount); index < n; index++) {\r\n                            let colorKey = maxrgbElements[index * 4];\r\n                            maxRanges.x = Math.min(maxRanges.x, colorKey);\r\n                            maxRanges.y = Math.max(maxRanges.y, colorKey);\r\n                        }\r\n                        for (let index = 0, n = Math.max(2, maxGradientColor.colorAlphaKeysCount); index < n; index++) {\r\n                            let alphaKey = maxalphaElements[index * 2];\r\n                            maxRanges.z = Math.min(maxRanges.z, alphaKey);\r\n                            maxRanges.w = Math.max(maxRanges.w, alphaKey);\r\n                        }\r\n                        shaDat.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES, maxRanges);\r\n\r\n                        let maxkeyCount = Math.max(minGradientColor.maxColorAlphaKeysCount, maxGradientColor.maxColorAlphaKeysCount);\r\n                        if (maxkeyCount == 8) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        else {\r\n                            shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The size over lifetime. Note: If you modify certain properties of this value, you need to reassign this property for it to take effect.\r\n     * @zh 生命周期尺寸。注意：如修改该值的某些属性，需重新赋值此属性才可生效。\r\n     */\r\n    get sizeOverLifetime(): SizeOverLifetime {\r\n        return this._sizeOverLifetime;\r\n    }\r\n\r\n    set sizeOverLifetime(value: SizeOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._baseRenderNode.shaderData;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n\r\n        this._sizeOverLifetime = value;\r\n\r\n        if (value) {\r\n            var size: GradientSize = value.size;\r\n            var sizeSeparate: boolean = size.separateAxes;\r\n            var sizeType: number = size.type;\r\n            if (value.enable) {\r\n                switch (sizeType) {\r\n                    case 0:\r\n                        if (sizeSeparate) {\r\n                            size.gradientX._formatData();\r\n                            size.gradientY._formatData();\r\n                            size.gradientZ._formatData();\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZ._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, size.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, size.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, size.gradientZ._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n                            size.gradient._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradient._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, size.gradient._elements);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (sizeSeparate) {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);\r\n                            size.gradientXMin._formatData();\r\n                            size.gradientXMax._formatData();\r\n                            size.gradientYMin._formatData();\r\n                            size.gradientYMax._formatData();\r\n                            size.gradientZMin._formatData();\r\n                            size.gradientZMax._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX, size.gradientXMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX, size.gradientXMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY, size.gradientYMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX, size.gradientYMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ, size.gradientZMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX, size.gradientZMax._elements);\r\n                        }\r\n                        else {\r\n                            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);\r\n                            size.gradientMin._formatData();\r\n                            size.gradientMax._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT, size.gradientMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax, size.gradientMax._elements);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The rotation over lifetime. Note: If you modify certain properties of this value, you need to reassign this property for it to take effect.\r\n     * @zh 生命周期旋转。注意：如修改该值的某些属性，需重新赋值此属性才可生效。\r\n     */\r\n    get rotationOverLifetime(): RotationOverLifetime {\r\n        return this._rotationOverLifetime;\r\n    }\r\n\r\n    set rotationOverLifetime(value: RotationOverLifetime) {\r\n        var shaDat: ShaderData = this._ownerRender._baseRenderNode.shaderData;\r\n\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n\r\n        this._rotationOverLifetime = value;\r\n\r\n        if (value) {\r\n            var rotation: GradientAngularVelocity = value.angularVelocity;\r\n\r\n            if (!rotation)//TODO:兼容代码，RotationOverLifetime未支持全可能为空\r\n                return\r\n\r\n            var rotationSeparate: boolean = rotation.separateAxes;\r\n            var rotationType: number = rotation.type;\r\n            if (value.enable) {\r\n                if (rotationSeparate) {\r\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE);\r\n                }\r\n                else {\r\n                    shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME);\r\n                }\r\n                switch (rotationType) {\r\n                    case 0:\r\n                        if (rotationSeparate) {\r\n                            rotation._constantXGradientDdata._formatData();\r\n                            rotation._constantYGradientDdata._formatData();\r\n                            rotation._constantZGradientDdata._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation._constantXGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation._constantXGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation._constantYGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation._constantYGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation._constantZGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation._constantZGradientDdata._elements);\r\n                        }\r\n                        else {\r\n                            rotation._constantGradientDdata._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation._constantGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation._constantGradientDdata._elements);\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        if (rotationSeparate) {\r\n                            rotation.gradientX._formatData();\r\n                            rotation.gradientY._formatData();\r\n                            rotation.gradientZ._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation.gradientX._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation.gradientY._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZ._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation.gradientZ._elements);\r\n                        }\r\n                        else {\r\n                            rotation.gradient._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradient._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation.gradient._elements);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (rotationSeparate) {\r\n                            rotation._constantXMinGradientDdata._formatData();\r\n                            rotation._constantXMaxGradientDdata._formatData();\r\n                            rotation._constantYMinGradientDdata._formatData();\r\n                            rotation._constantYMaxGradientDdata._formatData();\r\n                            rotation._constantZMinGradientDdata._formatData();\r\n                            rotation._constantZMaxGradientDdata._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation._constantXMinGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation._constantXMaxGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation._constantYMinGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation._constantYMaxGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation._constantZMinGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation._constantZMaxGradientDdata._elements);\r\n                        }\r\n                        else {\r\n                            rotation._constantMinGradientDdata._formatData();\r\n                            rotation._constantMaxGradientDdata._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation._constantMinGradientDdata._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation._constantMaxGradientDdata._elements);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n\r\n                        if (rotationSeparate) {\r\n                            rotation.gradientXMin._formatData();\r\n                            rotation.gradientXMax._formatData();\r\n                            rotation.gradientYMin._formatData();\r\n                            rotation.gradientYMax._formatData();\r\n                            rotation.gradientZMin._formatData();\r\n                            rotation.gradientZMax._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX, rotation.gradientXMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX, rotation.gradientXMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY, rotation.gradientYMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX, rotation.gradientYMax._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ, rotation.gradientZMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX, rotation.gradientZMax._elements);\r\n\r\n                        }\r\n                        else {\r\n                            rotation.gradientMin._formatData();\r\n                            rotation.gradientMax._formatData();\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT, rotation.gradientMin._elements);\r\n                            shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX, rotation.gradientMax._elements);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The texture sheet animation over lifetime. Note: If you modify certain properties of this value, you need to reassign this property for it to take effect.\r\n     * @zh 生命周期纹理动画。注意：如修改该值的某些属性，需重新赋值此属性才可生效。\r\n     */\r\n    get textureSheetAnimation(): TextureSheetAnimation {\r\n        return this._textureSheetAnimation;\r\n    }\r\n\r\n    set textureSheetAnimation(value: TextureSheetAnimation) {\r\n        var shaDat: ShaderData = this._ownerRender._baseRenderNode.shaderData;\r\n\r\n        this._textureSheetAnimation = value;\r\n\r\n        if (value) {\r\n            var frameOverTime: FrameOverTime = value.frame;\r\n            var textureAniType: number = frameOverTime.type;\r\n            shaDat.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n            shaDat.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES, value.cycles);\r\n            var title: Vector2 = value.tiles;\r\n            var _uvLengthE: Vector2 = this._uvLength;\r\n            _uvLengthE.x = 1.0 / title.x;\r\n            _uvLengthE.y = 1.0 / title.y;\r\n            shaDat.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);\r\n            if (value.enable) {\r\n                switch (textureAniType) {\r\n                    case 1:\r\n                        frameOverTime.frameOverTimeData._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeData._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, frameOverTime.frameOverTimeData._elements);\r\n                        break;\r\n                    case 3:\r\n                        frameOverTime.frameOverTimeDataMin._formatData();\r\n                        frameOverTime.frameOverTimeDataMax._formatData();\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS, frameOverTime.frameOverTimeDataMin._elements);\r\n                        shaDat.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS, frameOverTime.frameOverTimeDataMax._elements);\r\n                        break;\r\n                    default:\r\n                        shaDat.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Creates a new instance of the ParticleSystem class.\r\n     * @param render The ShurikenParticleRenderer associated with this particle system.\r\n     * @param meshTopology The topology used by the mesh, default is MeshTopology.Triangles.\r\n     * @param drawType The draw type used for rendering, default is DrawType.DrawElement.\r\n     * @zh 创建ShuriknParticleSystem类的新实例。\r\n     * @param render 与该粒子系统关联的 ShurikenParticleRenderer。\r\n     * @param meshTopology 网格使用的拓扑结构，默认为 MeshTopology.Triangles。\r\n     * @param drawType 用于渲染的绘制类型，默认为 DrawType.DrawElement。\r\n     */\r\n    constructor(render: ShurikenParticleRenderer, meshTopology: MeshTopology = MeshTopology.Triangles, drawType: DrawType = DrawType.DrawElement) {\r\n        super(meshTopology, drawType);\r\n        this.indexFormat = IndexFormat.UInt16;\r\n\r\n        this._firstActiveElement = 0;\r\n        this._firstNewElement = 0;\r\n        this._firstFreeElement = 0;\r\n        this._firstRetiredElement = 0;\r\n\r\n        this._owner = render.owner as Sprite3D;\r\n        this._ownerRender = render;\r\n        this._useCustomBounds = false;\r\n\r\n        this._currentTime = 0;\r\n        this._bounds = new Bounds(new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE));\r\n        this.bufferState = this._bufferState = new BufferState();\r\n        this._isEmitting = false;\r\n        this._isPlaying = false;\r\n        this._isPaused = false;\r\n        this._burstsIndex = 0;\r\n        this._frameRateTime = 0;\r\n        this._emissionTime = 0;\r\n        this._totalDelayTime = 0;\r\n        this._simulateUpdate = false;\r\n\r\n        this._bufferMaxParticles = 1;\r\n        this.duration = 5.0;\r\n        this.looping = true;\r\n        this.prewarm = false;\r\n        this.startDelayType = 0;\r\n        this.startDelay = 0.0;\r\n        this.startDelayMin = 0.0;\r\n        this.startDelayMax = 0.0;\r\n\r\n        this._startLifetimeType = 0;\r\n        this._startLifetimeConstant = 5.0;\r\n        this._startLifeTimeGradient = new GradientDataNumber();\r\n        this._startLifetimeConstantMin = 0.0;\r\n        this._startLifetimeConstantMax = 5.0;\r\n        this._startLifeTimeGradientMin = new GradientDataNumber();\r\n        this._startLifeTimeGradientMax = new GradientDataNumber();\r\n        this._maxStartLifetime = 5.0;//_startLifetimeType默认为0，_startLifetimeConstant为5.0,因此该值为5.0\r\n\r\n        this.startSpeedType = 0;\r\n        this.startSpeedConstant = 5.0;\r\n        this.startSpeedConstantMin = 0.0;\r\n        this.startSpeedConstantMax = 5.0;\r\n\r\n        //drag\r\n        this.dragType = 0;\r\n        this.dragConstant = 0;\r\n        this.dragSpeedConstantMin = 0;\r\n        this.dragSpeedConstantMax = 0;\r\n\r\n        this.threeDStartSize = false;\r\n        this.startSizeType = 0;\r\n        this.startSizeConstant = 1;\r\n        this.startSizeConstantSeparate = new Vector3(1, 1, 1);\r\n        this.startSizeConstantMin = 0;\r\n        this.startSizeConstantMax = 1;\r\n        this.startSizeConstantMinSeparate = new Vector3(0, 0, 0);\r\n        this.startSizeConstantMaxSeparate = new Vector3(1, 1, 1);\r\n\r\n        this.threeDStartRotation = false;\r\n        this.startRotationType = 0;\r\n        this.startRotationConstant = 0;\r\n        this.startRotationConstantSeparate = new Vector3(0, 0, 0);\r\n        this.startRotationConstantMin = 0.0;\r\n        this.startRotationConstantMax = 0.0;\r\n        this.startRotationConstantMinSeparate = new Vector3(0, 0, 0);\r\n        this.startRotationConstantMaxSeparate = new Vector3(0, 0, 0);\r\n\r\n        this.gravityModifier = 0.0;\r\n        this.simulationSpace = 1;\r\n        this.scaleMode = 1;\r\n        this.playOnAwake = true;\r\n        this._rand = new Rand(0);\r\n        this.autoRandomSeed = true;\r\n        this.randomSeed = new Uint32Array(1);\r\n        this._randomSeeds = new Uint32Array(ShurikenParticleSystem._RANDOMOFFSET.length);\r\n        this.isPerformanceMode = true;\r\n\r\n        this._emission = new Emission();\r\n        this._emission.enable = true;\r\n        //set GeometryElement\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getVertexBuffer(index: number = 0): VertexBuffer3D {\r\n        if (index === 0)\r\n            return this._vertexBuffer;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getIndexBuffer(): IndexBuffer3D {\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _generateBounds(): void {\r\n        var particleRender: ShurikenParticleRenderer = this._ownerRender;\r\n        var boundsMin: Vector3 = this._bounds.getMin();\r\n        var boundsMax: Vector3 = this._bounds.getMax();\r\n\r\n        // lifeTime\r\n        var time: number = 0;\r\n        switch (this.startLifetimeType) {\r\n            case 0: // 固定时间\r\n                time = this._startLifetimeConstant;\r\n                break;\r\n            case 2: // 两个固定时间随机值\r\n                time = this._startLifetimeConstantMax;\r\n                break;\r\n            case 1: // 渐变时间\r\n            case 3: // 两个渐变时间随机值\r\n            default:\r\n                // todo 不支持模式\r\n                break;\r\n        }\r\n\r\n        // speed\r\n        var speedOrigan: number = 0;\r\n        switch (this.startSpeedType) {\r\n            case 0: // 恒定速度\r\n                speedOrigan = this.startSpeedConstant;\r\n                break;\r\n            case 2: // 两个固定值间\r\n                speedOrigan = this.startSpeedConstantMax;\r\n                break;\r\n            case 1:\r\n            case 3:\r\n            default:\r\n                // todo 不支持模式\r\n                break;\r\n        }\r\n\r\n        // size\r\n        var maxSizeScale = 0;\r\n        if (this.threeDStartSize) {\r\n            switch (this.startSizeType) {\r\n                case 0: // 恒定尺寸\r\n                    maxSizeScale = Math.max(this.startSizeConstantSeparate.x, this.startSizeConstantSeparate.y, this.startSizeConstantSeparate.z);\r\n                    break;\r\n                case 2: // 两个固定尺寸之间\r\n                    maxSizeScale = Math.max(this.startSizeConstantMaxSeparate.x, this.startSizeConstantMaxSeparate.y, this.startSizeConstantMaxSeparate.z);\r\n                    break;\r\n                case 1:\r\n                case 3:\r\n                default:\r\n                    // todo 不支持模式\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (this.startSizeType) {\r\n                case 0: // 恒定尺寸\r\n                    maxSizeScale = this.startSizeConstant;\r\n                    break;\r\n                case 2: // 两个固定尺寸之间\r\n                    maxSizeScale = this.startSizeConstantMax;\r\n                    break;\r\n                case 1:\r\n                case 3:\r\n                default:\r\n                    // todo 不支持模式\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // shape\r\n        var zDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector30;\r\n        var fDirectionSpeed: Vector3 = ShurikenParticleSystem._tempVector31;\r\n        var zEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector32;\r\n        var fEmisionOffsetXYZ: Vector3 = ShurikenParticleSystem._tempVector33;\r\n\r\n        zDirectionSpeed.setValue(0, 0, 1);\r\n        fDirectionSpeed.setValue(0, 0, 0);\r\n        zEmisionOffsetXYZ.setValue(0, 0, 0);\r\n        fEmisionOffsetXYZ.setValue(0, 0, 0);\r\n\r\n        if (this.shape && this.shape.enable) {\r\n            switch (this.shape.shapeType) {\r\n                case ParticleSystemShapeType.Sphere:\r\n                    var sphere: SphereShape = <SphereShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n                    fEmisionOffsetXYZ.setValue(sphere.radius, sphere.radius, sphere.radius);\r\n                    break;\r\n                case ParticleSystemShapeType.Hemisphere:\r\n                    var hemiShpere: HemisphereShape = <HemisphereShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, hemiShpere.radius);\r\n                    fEmisionOffsetXYZ.setValue(hemiShpere.radius, hemiShpere.radius, 0.0);\r\n                    break;\r\n                case ParticleSystemShapeType.Cone:\r\n                    var cone: ConeShape = <ConeShape>this.shape;\r\n                    // Base || BaseShell\r\n                    if (cone.emitType == 0 || cone.emitType == 1) {\r\n                        // todo angle define\r\n                        // var angle: number = cone.angle * Math.PI / 180;\r\n                        var angle: number = cone.angle;\r\n                        var sinAngle: number = Math.sin(angle);\r\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n                        zEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n                        fEmisionOffsetXYZ.setValue(cone.radius, cone.radius, 0.0);\r\n                        break;\r\n                    }\r\n                    // Volume || VolumeShell\r\n                    else if (cone.emitType == 2 || cone.emitType == 3) {\r\n                        // var angle: number = cone.angle * Math.PI / 180;\r\n                        var angle: number = cone.angle;\r\n                        var sinAngle: number = Math.sin(angle);\r\n                        var coneLength: number = cone.length;\r\n                        zDirectionSpeed.setValue(sinAngle, sinAngle, 1.0);\r\n                        fDirectionSpeed.setValue(sinAngle, sinAngle, 0.0);\r\n                        var tanAngle: number = Math.tan(angle);\r\n                        var rPLCT: number = cone.radius + coneLength * tanAngle;\r\n                        zEmisionOffsetXYZ.setValue(rPLCT, rPLCT, coneLength);\r\n                        fEmisionOffsetXYZ.setValue(rPLCT, rPLCT, 0.0);\r\n                    }\r\n                    break;\r\n                case ParticleSystemShapeType.Box:\r\n                    var box: BoxShape = <BoxShape>this.shape;\r\n                    if (this.shape.randomDirection != 0) {\r\n                        zDirectionSpeed.setValue(1, 1, 1);\r\n                        fDirectionSpeed.setValue(1, 1, 1);\r\n                    }\r\n                    zEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n                    fEmisionOffsetXYZ.setValue(box.x / 2, box.y / 2, box.z / 2);\r\n                    break;\r\n                case ParticleSystemShapeType.Circle:\r\n                    var circle: CircleShape = <CircleShape>this.shape;\r\n                    zDirectionSpeed.setValue(1, 1, 1);\r\n                    fDirectionSpeed.setValue(1, 1, 1);\r\n                    zEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n                    fEmisionOffsetXYZ.setValue(circle.radius, circle.radius, 0);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // size\r\n        var meshSize: number = 0;\r\n        // 是否是 mesh 模式\r\n        var meshMode: boolean = particleRender.renderMode == 4;\r\n        switch (particleRender.renderMode) {\r\n            case 0: // billboard\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n                meshSize = ShurikenParticleSystem.halfKSqrtOf2;// Math.sqrt(2) / 2.0;\r\n                break;\r\n            case 4: // mesh\r\n                if (particleRender.mesh) {\r\n                    var meshBounds: Bounds = particleRender.mesh.bounds;\r\n                    meshSize = Math.sqrt(Math.pow(meshBounds.getExtent().x, 2.0) + Math.pow(meshBounds.getExtent().y, 2.0) + Math.pow(meshBounds.getExtent().z, 2.0));\r\n                } else {\r\n                    meshSize = ShurikenParticleSystem.halfKSqrtOf2;// Math.sqrt(2) / 2.0;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        var endSizeOffset: Vector3 = ShurikenParticleSystem._tempVector36;\r\n        endSizeOffset.setValue(1, 1, 1);\r\n        if (this.sizeOverLifetime && this.sizeOverLifetime.enable) {\r\n            var gradientSize: GradientSize = this.sizeOverLifetime.size;\r\n            var maxSize: number = gradientSize.getMaxSizeInGradient(meshMode);\r\n\r\n            endSizeOffset.setValue(maxSize, maxSize, maxSize);\r\n        }\r\n\r\n        var offsetSize: number = meshSize * maxSizeScale;\r\n        Vector3.scale(endSizeOffset, offsetSize, endSizeOffset);\r\n\r\n        // var distance: number = speedOrigan * time;\r\n        var speedZOffset: Vector3 = ShurikenParticleSystem._tempVector34;\r\n        var speedFOffset: Vector3 = ShurikenParticleSystem._tempVector35;\r\n\r\n        if (speedOrigan > 0) {\r\n            Vector3.scale(zDirectionSpeed, speedOrigan, speedZOffset);\r\n            Vector3.scale(fDirectionSpeed, speedOrigan, speedFOffset);\r\n        }\r\n        else {\r\n            Vector3.scale(zDirectionSpeed, -speedOrigan, speedFOffset);\r\n            Vector3.scale(fDirectionSpeed, -speedOrigan, speedZOffset);\r\n        }\r\n\r\n        if (this.velocityOverLifetime && this.velocityOverLifetime.enable) {\r\n            var gradientVelocity: GradientVelocity = this.velocityOverLifetime.velocity;\r\n            var velocitySpeedOffset: Vector3 = ShurikenParticleSystem._tempVector37;\r\n            velocitySpeedOffset.setValue(0, 0, 0);\r\n            switch (gradientVelocity.type) {\r\n                case 0: // 常量模式\r\n                    gradientVelocity.constant.cloneTo(velocitySpeedOffset);\r\n                    break;\r\n                case 2: // 随机双常量模式\r\n                    gradientVelocity.constantMax.cloneTo(velocitySpeedOffset);\r\n                    break;\r\n                case 1: // 曲线模式\r\n                    // todo 获取 曲线最大值\r\n                    var curveX: number = gradientVelocity.gradientX.getAverageValue();\r\n                    var curveY: number = gradientVelocity.gradientY.getAverageValue();\r\n                    var curveZ: number = gradientVelocity.gradientZ.getAverageValue();\r\n                    velocitySpeedOffset.setValue(curveX, curveY, curveZ);\r\n                    break;\r\n                case 3: // 随机双曲线模式\r\n                    var xMax: number = gradientVelocity.gradientXMax.getAverageValue();\r\n                    var yMax: number = gradientVelocity.gradientYMax.getAverageValue();\r\n                    var zMax: number = gradientVelocity.gradientZMax.getAverageValue();\r\n                    velocitySpeedOffset.setValue(xMax, yMax, zMax);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            // 速度空间 world\r\n            if (this.velocityOverLifetime.space == 1) {\r\n                Vector3.transformV3ToV3(velocitySpeedOffset, this._owner.transform.worldMatrix, velocitySpeedOffset);\r\n            }\r\n\r\n            Vector3.add(speedZOffset, velocitySpeedOffset, speedZOffset);\r\n            Vector3.subtract(speedFOffset, velocitySpeedOffset, speedFOffset);\r\n\r\n            Vector3.max(speedZOffset, Vector3.ZERO, speedZOffset);\r\n            Vector3.max(speedFOffset, Vector3.ZERO, speedFOffset);\r\n        }\r\n\r\n        Vector3.scale(speedZOffset, time, speedZOffset);\r\n        Vector3.scale(speedFOffset, time, speedFOffset);\r\n\r\n        //gravity重力值\r\n        var gravity: number = this.gravityModifier;\r\n        if (gravity != 0) {\r\n            // 记录重力影响偏移\r\n            var gravityOffset: number = 0.5 * ShurikenParticleSystem.g * gravity * time * time;\r\n\r\n            var speedZOffsetY = speedZOffset.y - gravityOffset;\r\n            var speedFOffsetY = speedFOffset.y + gravityOffset;\r\n\r\n            speedZOffsetY = speedZOffsetY > 0 ? speedZOffsetY : 0;\r\n            speedFOffsetY = speedFOffsetY > 0 ? speedFOffsetY : 0;\r\n\r\n            this._gravityOffset.setValue(speedZOffset.y - speedZOffsetY, speedFOffsetY - speedFOffset.y);\r\n        }\r\n\r\n        // speedOrigan * directionSpeed * time + directionoffset + size * maxsizeScale\r\n        Vector3.add(speedZOffset, endSizeOffset, boundsMax);\r\n        Vector3.add(boundsMax, zEmisionOffsetXYZ, boundsMax);\r\n\r\n        Vector3.add(speedFOffset, endSizeOffset, boundsMin);\r\n        Vector3.add(boundsMin, fEmisionOffsetXYZ, boundsMin);\r\n        Vector3.scale(boundsMin, -1, boundsMin);\r\n\r\n        this._bounds.setMin(boundsMin);\r\n        this._bounds.setMax(boundsMax);\r\n    }\r\n\r\n    /**\r\n     * @en Custom bounds\r\n     * @zh 自定义 包围盒\r\n     */\r\n    get customBounds(): Bounds {\r\n        return this._customBounds;\r\n    }\r\n\r\n    set customBounds(value: Bounds) {\r\n        if (value) {\r\n            this._useCustomBounds = true;\r\n            if (!this._customBounds) {\r\n                this._customBounds = new Bounds(new Vector3(), new Vector3());\r\n                this._ownerRender.geometryBounds = this._customBounds;\r\n            }\r\n            this._customBounds = value;\r\n\r\n        }\r\n        else {\r\n            this._useCustomBounds = false;\r\n            this._customBounds = null;\r\n            this._ownerRender.geometryBounds = null;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _simulationSupported(): boolean {\r\n\r\n        if (this.simulationSpace == 0 && this.emission.emissionRateOverDistance > 0) {\r\n            return false;\r\n        }\r\n\r\n        // todo other propertys break procedural \r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 计算粒子更新时间\r\n     */\r\n    protected _updateEmission(): void {\r\n        if (!this.isAlive)\r\n            return;\r\n        if (this._simulateUpdate) {\r\n            this._simulateUpdate = false;\r\n        }\r\n        else {\r\n            var elapsedTime: number = ((this._startUpdateLoopCount !== Stat.loopCount && !this._isPaused) && (<Scene3D>this._owner._scene)) ? ((<Scene3D>this._owner._scene)).timer._delta / 1000.0 : 0;\r\n            elapsedTime = Math.min(ShurikenParticleSystem._maxElapsedTime, elapsedTime * this.simulationSpeed);\r\n            this._updateParticles(elapsedTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 传入粒子间隔时间，更新粒子状态\r\n     */\r\n    protected _updateParticles(elapsedTime: number): void {\r\n        if (this._ownerRender.renderMode === 4 && !this._ownerRender.mesh)//renderMode=4且mesh为空时不更新\r\n            return;\r\n\r\n        this._currentTime += elapsedTime;//计算目前粒子播放时间啊\r\n        this._retireActiveParticles();\r\n        this._freeRetiredParticles();\r\n\r\n        //if (_firstActiveElement === _firstFreeElement){\r\n        //_frameRateTime = 0//TODO:是否一起置零\r\n        //_currentTime = 0;\r\n        //}\r\n        //if (_firstRetiredElement === _firstActiveElement)\r\n        //_drawCounter = 0;\r\n\r\n        this._totalDelayTime += elapsedTime;\r\n        if (this._totalDelayTime < this._playStartDelay) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this._emission.enable && this._isEmitting && !this._isPaused) {\r\n            this._advanceTime(elapsedTime, this._currentTime);\r\n            if (this.emission.emissionRateOverDistance > 0) {\r\n                this._advanceDistance(this._currentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateParticlesSimulationRestart(time: number): void {\r\n        this._firstActiveElement = 0;\r\n        this._firstNewElement = 0;\r\n        this._firstFreeElement = 0;\r\n        this._firstRetiredElement = 0;\r\n\r\n        this._burstsIndex = 0;\r\n        this._frameRateTime = time;//TOD0:零还是time待 验证\r\n        this._emissionTime = 0;\r\n        this._emissionDistance = 0;\r\n        this._totalDelayTime = 0;\r\n        this._currentTime = time;\r\n\r\n\r\n        var delayTime: number = time;\r\n        if (delayTime < this._playStartDelay) {\r\n            this._totalDelayTime = delayTime;\r\n            return;\r\n        }\r\n\r\n        if (this._emission.enable) {\r\n            this._advanceTime(time, time);//TODO:如果time，time均为零brust无效\r\n            if (this.emission.emissionRateOverDistance > 0) {\r\n                this._advanceDistance(this._currentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _retireActiveParticles(): void {\r\n        const epsilon: number = 0.0001;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            var index: number = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride;\r\n            var timeIndex: number = index + this._timeIndex;//11为Time\r\n\r\n            var particleAge: number = this._currentTime - this._vertices[timeIndex];\r\n            if (particleAge + epsilon < this._vertices[index + this._startLifeTimeIndex]/*_maxLifeTime*/)//7为真实lifeTime,particleAge>0为生命周期为负时\r\n                break;\r\n\r\n            this._vertices[timeIndex] = this._drawCounter;\r\n            this._firstActiveElement++;\r\n            if (this._firstActiveElement >= this._bufferMaxParticles)\r\n                this._firstActiveElement = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            var age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];//11为Time\r\n            //TODO这里会有什么bug\r\n            if (false)\r\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n                    break;\r\n\r\n            this._firstRetiredElement++;\r\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal5\r\n     * 增加爆炸粒子数量\r\n     */\r\n    protected _burst(fromTime: number, toTime: number): number {\r\n        var totalEmitCount: number = 0;\r\n        var bursts: Burst[] = this._emission._bursts;\r\n        for (var n: number = bursts.length; this._burstsIndex < n; this._burstsIndex++) {//TODO:_burstsIndex问题\r\n            var burst: Burst = bursts[this._burstsIndex];\r\n            var burstTime: number = burst.time;\r\n            if (fromTime <= burstTime && burstTime < toTime) {\r\n                var emitCount: number;\r\n                if (this.autoRandomSeed) {\r\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[0];\r\n                    emitCount = MathUtil.lerp(burst.minCount, burst.maxCount, this._rand.getFloat());\r\n                    this._randomSeeds[0] = this._rand.seed;\r\n                }\r\n                totalEmitCount += emitCount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return totalEmitCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _advanceTime(elapsedTime: number, emitTime: number): void {\r\n        var i: number;\r\n        var lastEmissionTime: number = this._emissionTime;\r\n        this._emissionTime += elapsedTime;\r\n        var totalEmitCount: number = 0;\r\n        if (this._emissionTime > this.duration) {\r\n            if (this.looping) {//TODO:有while\r\n                totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);//使用_emissionTime代替duration，否则无法触发time等于duration的burst //爆裂剩余未触发的//TODO:是否可以用_playbackTime代替计算，不必结束再爆裂一次。//TODO:待确认是否累计爆裂\r\n                this._emissionTime -= this.duration;\r\n                this._burstsIndex = 0;\r\n                totalEmitCount += this._burst(0, this._emissionTime);\r\n            } else {\r\n                totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n                for (i = 0; i < totalEmitCount; i++)\r\n                    this.emit(emitTime);\r\n\r\n                this._isPlaying = false;\r\n                this.stop();\r\n                return;\r\n            }\r\n        } else {\r\n            totalEmitCount += this._burst(lastEmissionTime, this._emissionTime);\r\n        }\r\n        //粒子的增加数量，不能超过maxParticles\r\n        totalEmitCount = Math.min(this.maxParticles - this.aliveParticleCount, totalEmitCount);\r\n        for (i = 0; i < totalEmitCount; i++)\r\n            this.emit(emitTime);\r\n        //粒子发射速率\r\n        var emissionRate: number = this.emission.emissionRate;\r\n        if (emissionRate > 0) {\r\n            //每多少秒发射一个粒子\r\n            var minEmissionTime: number = 1 / emissionRate;\r\n            this._frameRateTime += minEmissionTime;\r\n            this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime;//大于最大声明周期的粒子一定会死亡，所以直接略过,TODO:是否更换机制\r\n            while (this._frameRateTime <= emitTime) {\r\n                if (this.emit(this._frameRateTime))\r\n                    this._frameRateTime += minEmissionTime;\r\n                else\r\n                    break;\r\n            }\r\n            this._frameRateTime = Math.floor(emitTime / minEmissionTime) * minEmissionTime;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _advanceDistance(emitTime: number): void {\r\n        let position = this._owner.transform.position;\r\n        let offsetDistance: number = Vector3.distance(position, this._emissionLastPosition);\r\n\r\n        let rateOverDistance = this.emission.emissionRateOverDistance;\r\n\r\n        let distance = this._emissionDistance + offsetDistance;\r\n\r\n        let ed = 1.0 / rateOverDistance;\r\n        if (distance > ed) {\r\n            let emitCount = distance * rateOverDistance;\r\n            emitCount = Math.floor(emitCount);\r\n            emitCount = Math.min(this.maxParticles - this.aliveParticleCount, emitCount);\r\n            for (let index = 0; index < emitCount; index++) {\r\n                this.emit(emitTime);\r\n            }\r\n            // console.log(\"emission distance: \", distance, \", count: \", emitCount);\r\n\r\n            this._emissionDistance = 0;\r\n        }\r\n        else {\r\n            this._emissionDistance = distance;\r\n        }\r\n\r\n        position.cloneTo(this._emissionLastPosition);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _initBufferDatas(): void {\r\n        if (this._vertexBuffer && this._vertexBuffer._buffer) {//修改了maxCount以及renderMode以及Mesh等需要清空\r\n            var memorySize: number = this._vertexBuffer._byteLength + this._indexBuffer.indexCount * 2;\r\n            this._vertexBuffer.destroy();\r\n            this._indexBuffer.destroy();\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            //TODO:some time use clone will cause this call twice(from 'maxParticleCount' and 'renderMode'),this should optimization rewrite with special clone fun.\r\n        }\r\n        var render: ShurikenParticleRenderer = this._ownerRender;\r\n        var renderMode: number = render.renderMode;\r\n\r\n        if (renderMode !== -1 && this.maxParticles > 0) {\r\n            var indices: Uint16Array, i: number, j: number, m: number, indexOffset: number, perPartOffset: number, vertexDeclaration: VertexDeclaration;\r\n            var vbMemorySize: number = 0, memorySize: number = 0;\r\n            var mesh: Mesh = render.mesh;\r\n            if (renderMode === 4) {\r\n                if (mesh) {\r\n                    // var vertexBufferCount: number = mesh._vertexBuffers.length;\r\n                    // if (vertexBufferCount > 1) {\r\n                    // \tthrow new Error(\"ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.\");\r\n                    // } else {\r\n                    vertexDeclaration = VertexShurikenParticleMesh.vertexDeclaration;\r\n                    this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n                    this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                    this._startLifeTimeIndex = 12;\r\n                    this._timeIndex = 16;\r\n                    this._vertexStride = mesh._vertexCount;\r\n                    var totalVertexCount: number = this._bufferMaxParticles * this._vertexStride;\r\n                    var vbCount: number = Math.floor(totalVertexCount / 65535) + 1;\r\n                    var lastVBVertexCount: number = totalVertexCount % 65535;\r\n                    if (vbCount > 1) {//TODO:随后支持\r\n                        throw new Error(\"ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.\");\r\n                    }\r\n\r\n                    vbMemorySize = vertexDeclaration.vertexStride * lastVBVertexCount;\r\n                    this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\r\n                    this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n                    this._vertices = new Float32Array(this._floatCountPerVertex * lastVBVertexCount);\r\n\r\n                    // if (render.renderMode == 4) {\r\n                    // \tthis.initVertexWithMesh(this._vertices, mesh);\r\n                    // }\r\n\r\n                    this._indexStride = mesh._indexBuffer.indexCount;\r\n                    var indexDatas: Uint16Array = mesh._indexBuffer.getData() as Uint16Array;\r\n                    var indexCount: number = this._bufferMaxParticles * this._indexStride;\r\n                    this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static, false);\r\n                    indices = new Uint16Array(indexCount);\r\n\r\n                    memorySize = vbMemorySize + indexCount * 2;\r\n\r\n                    indexOffset = 0;\r\n                    for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                        var indexValueOffset: number = i * this._vertexStride;\r\n                        for (j = 0, m = indexDatas.length; j < m; j++)\r\n                            indices[indexOffset++] = indexValueOffset + indexDatas[j];\r\n                    }\r\n                    this._indexBuffer.setData(indices);\r\n                    this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n                    this.bufferState = this._bufferState;\r\n                }\r\n            } else {\r\n                vertexDeclaration = VertexShurikenParticleBillboard.vertexDeclaration;\r\n                this._floatCountPerVertex = vertexDeclaration.vertexStride / 4;\r\n                this._startLifeTimeIndex = 7;\r\n                this._simulationUV_Index = vertexDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                this._timeIndex = 11;\r\n                this._vertexStride = 4;\r\n                vbMemorySize = vertexDeclaration.vertexStride * this._bufferMaxParticles * this._vertexStride;\r\n                this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vbMemorySize, BufferUsage.Dynamic, false);\r\n                this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n                this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride);\r\n\r\n\r\n                for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                    perPartOffset = i * this._floatCountPerVertex * this._vertexStride;\r\n                    this._vertices[perPartOffset] = -0.5;\r\n                    this._vertices[perPartOffset + 1] = -0.5;\r\n                    this._vertices[perPartOffset + 2] = 0;\r\n                    this._vertices[perPartOffset + 3] = 1;\r\n\r\n                    perPartOffset += this._floatCountPerVertex;\r\n                    this._vertices[perPartOffset] = 0.5;\r\n                    this._vertices[perPartOffset + 1] = -0.5;\r\n                    this._vertices[perPartOffset + 2] = 1;\r\n                    this._vertices[perPartOffset + 3] = 1;\r\n\r\n                    perPartOffset += this._floatCountPerVertex\r\n                    this._vertices[perPartOffset] = 0.5;\r\n                    this._vertices[perPartOffset + 1] = 0.5;\r\n                    this._vertices[perPartOffset + 2] = 1;\r\n                    this._vertices[perPartOffset + 3] = 0;\r\n\r\n                    perPartOffset += this._floatCountPerVertex\r\n                    this._vertices[perPartOffset] = -0.5;\r\n                    this._vertices[perPartOffset + 1] = 0.5;\r\n                    this._vertices[perPartOffset + 2] = 0;\r\n                    this._vertices[perPartOffset + 3] = 0;\r\n                }\r\n\r\n                this._indexStride = 6;\r\n                this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._bufferMaxParticles * 6, BufferUsage.Static, false);\r\n                indices = new Uint16Array(this._bufferMaxParticles * 6);\r\n                for (i = 0; i < this._bufferMaxParticles; i++) {\r\n                    indexOffset = i * 6;\r\n                    var firstVertex: number = i * this._vertexStride, secondVertex: number = firstVertex + 2;\r\n                    indices[indexOffset++] = firstVertex;\r\n                    indices[indexOffset++] = secondVertex;\r\n                    indices[indexOffset++] = firstVertex + 1;\r\n                    indices[indexOffset++] = firstVertex;\r\n                    indices[indexOffset++] = firstVertex + 3;\r\n                    indices[indexOffset++] = secondVertex;\r\n                }\r\n                this._indexBuffer.setData(indices);\r\n\r\n                memorySize = vbMemorySize + this._bufferMaxParticles * 6 * 2;\r\n                this._bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n                this.bufferState = this._bufferState;\r\n            }\r\n\r\n            Resource._addMemory(memorySize, memorySize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        if (this._vertexBuffer) {\r\n            var memorySize: number = this._vertexBuffer._byteLength;\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            this._vertexBuffer.destroy();\r\n            this._vertexBuffer = null;\r\n        }\r\n        if (this._indexBuffer) {\r\n            var memorySize: number = this._indexBuffer._byteLength;\r\n            Resource._addMemory(-memorySize, -memorySize);\r\n            this._indexBuffer.destroy();\r\n            this._indexBuffer = null;\r\n        }\r\n        this._emission.destroy();\r\n        this._bounds = null;\r\n        this._customBounds = null;\r\n        this._bufferState = null;\r\n        this._owner = null;\r\n        this._vertices = null;\r\n        this._indexBuffer = null;\r\n        this._emission = null;\r\n        this._shape = null;\r\n        this.startLifeTimeGradient = null;\r\n        this.startLifeTimeGradientMin = null;\r\n        this.startLifeTimeGradientMax = null;\r\n        this.startSizeConstantSeparate = null;\r\n        this.startSizeConstantMinSeparate = null;\r\n        this.startSizeConstantMaxSeparate = null;\r\n        this.startRotationConstantSeparate = null;\r\n        this.startRotationConstantMinSeparate = null;\r\n        this.startRotationConstantMaxSeparate = null;\r\n        this.startColorConstant = null;\r\n        this.startColorConstantMin = null;\r\n        this.startColorConstantMax = null;\r\n        this._velocityOverLifetime = null;\r\n        this._colorOverLifetime = null;\r\n        this._sizeOverLifetime = null;\r\n        this._rotationOverLifetime = null;\r\n        this._textureSheetAnimation = null;\r\n    }\r\n\r\n    /**\r\n     * @en Emits a particle.\r\n     * @zh 发射一个粒子。\r\n     */\r\n    emit(time: number): boolean {\r\n        var position: Vector3 = ShurikenParticleSystem._tempPosition;\r\n        var direction: Vector3 = ShurikenParticleSystem._tempDirection;\r\n        if (this._shape && this._shape.enable) {\r\n            if (this.autoRandomSeed)\r\n                this._shape.generatePositionAndDirection(position, direction);\r\n            else\r\n                this._shape.generatePositionAndDirection(position, direction, this._rand, this._randomSeeds);\r\n        } else {\r\n            position.x = position.y = position.z = 0;\r\n            direction.x = direction.y = 0;\r\n            direction.z = 1;\r\n        }\r\n\r\n        return this.addParticle(position, direction, time);//TODO:提前判断优化\r\n    }\r\n\r\n    /**\r\n     * @en Add a new particle to the particle system.\r\n     * @param position The initial position of the particle.\r\n     * @param direction The initial direction of the particle.\r\n     * @param time The current simulation time.\r\n     * @returns Whether the particle was successfully added.\r\n     * @zh 向粒子系统添加一个新粒子。\r\n     * @param position 粒子的初始位置。\r\n     * @param direction 粒子的初始方向。\r\n     * @param time 当前的模拟时间。\r\n     * @returns 粒子是否成功添加。\r\n     */\r\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {//TODO:还需优化\r\n        Vector3.normalize(direction, direction);\r\n        //下一个粒子\r\n        var nextFreeParticle: number = this._firstFreeElement + 1;\r\n        if (nextFreeParticle >= this._bufferMaxParticles)\r\n            nextFreeParticle = 0;\r\n\r\n        if (nextFreeParticle === this._firstRetiredElement)\r\n            return false;\r\n\r\n        var transform: Transform3D = this._owner.transform;\r\n        ShurikenParticleData.create(this, this._ownerRender);\r\n\r\n        var particleAge: number = this._currentTime - time;\r\n        if (particleAge >= ShurikenParticleData.startLifeTime)//如果时间已大于声明周期，则直接跳过,TODO:提前优化\r\n            return true;\r\n\r\n        var pos: Vector3, rot: Quaternion;\r\n        if (this.simulationSpace == 0) {\r\n            pos = transform.position;\r\n            rot = transform.rotation;\r\n        }\r\n\r\n        //StartSpeed\r\n        var startSpeed: number;\r\n        switch (this.startSpeedType) {\r\n            case 0:\r\n                startSpeed = this.startSpeedConstant;\r\n                break;\r\n            case 2:\r\n                if (this.autoRandomSeed) {\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[8];\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\r\n                    this._randomSeeds[8] = this._rand.seed;\r\n                }\r\n                break;\r\n        }\r\n\r\n\r\n        var randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number, randomColor: number, randomSize: number, randomRotation: number, randomTextureAnimation: number;\r\n        var needRandomVelocity: boolean = this._velocityOverLifetime && this._velocityOverLifetime.enable;\r\n        if (needRandomVelocity) {\r\n            var velocityType: number = this._velocityOverLifetime.velocity.type;\r\n            if (velocityType === 2 || velocityType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomVelocityX = Math.random();\r\n                    randomVelocityY = Math.random();\r\n                    randomVelocityZ = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[9];\r\n                    randomVelocityX = this._rand.getFloat();\r\n                    randomVelocityY = this._rand.getFloat();\r\n                    randomVelocityZ = this._rand.getFloat();\r\n                    this._randomSeeds[9] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomVelocity = false;\r\n            }\r\n        } else {\r\n            needRandomVelocity = false;\r\n        }\r\n        var needRandomColor: boolean = this._colorOverLifetime && this._colorOverLifetime.enable;\r\n        if (needRandomColor) {\r\n            var colorType: number = this._colorOverLifetime.color.type;\r\n            if (colorType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomColor = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[10];\r\n                    randomColor = this._rand.getFloat();\r\n                    this._randomSeeds[10] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomColor = false;\r\n            }\r\n        } else {\r\n            needRandomColor = false;\r\n        }\r\n        var needRandomSize: boolean = this._sizeOverLifetime && this._sizeOverLifetime.enable;\r\n        if (needRandomSize) {\r\n            var sizeType: number = this._sizeOverLifetime.size.type;\r\n            if (sizeType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomSize = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[11];\r\n                    randomSize = this._rand.getFloat();\r\n                    this._randomSeeds[11] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomSize = false;\r\n            }\r\n        } else {\r\n            needRandomSize = false;\r\n        }\r\n        var needRandomRotation: boolean = this._rotationOverLifetime && this._rotationOverLifetime.enable;\r\n        if (needRandomRotation) {\r\n            var rotationType: number = this._rotationOverLifetime.angularVelocity.type;\r\n            if (rotationType === 2 || rotationType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomRotation = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[12];\r\n                    randomRotation = this._rand.getFloat();\r\n                    this._randomSeeds[12] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomRotation = false;\r\n            }\r\n        } else {\r\n            needRandomRotation = false;\r\n        }\r\n        var needRandomTextureAnimation: boolean = this._textureSheetAnimation && this._textureSheetAnimation.enable;\r\n        if (needRandomTextureAnimation) {\r\n            var textureAnimationType: number = this._textureSheetAnimation.frame.type;\r\n            if (textureAnimationType === 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomTextureAnimation = Math.random();\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[15];\r\n                    randomTextureAnimation = this._rand.getFloat();\r\n                    this._randomSeeds[15] = this._rand.seed;\r\n                }\r\n            } else {\r\n                needRandomTextureAnimation = false;\r\n            }\r\n        } else {\r\n            needRandomTextureAnimation = false;\r\n        }\r\n\r\n        var startIndex: number = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride;\r\n        var subU: number = ShurikenParticleData.startUVInfo[0];\r\n        var subV: number = ShurikenParticleData.startUVInfo[1];\r\n        var startU: number = ShurikenParticleData.startUVInfo[2];\r\n        var startV: number = ShurikenParticleData.startUVInfo[3];\r\n\r\n        var meshVertices: Float32Array, meshVertexStride: number, meshPosOffset: number, meshCorOffset: number, meshUVOffset: number, meshVertexIndex: number;\r\n        var render: ShurikenParticleRenderer = this._ownerRender;\r\n        if (render.renderMode === 4) {\r\n            var meshVB: VertexBuffer3D = render.mesh._vertexBuffer;\r\n            meshVertices = meshVB.getFloat32Data();\r\n            var meshVertexDeclaration: VertexDeclaration = meshVB.vertexDeclaration;\r\n            meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n            var colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n            meshCorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n            var uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n            meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\r\n            meshVertexStride = meshVertexDeclaration.vertexStride / 4;\r\n            meshVertexIndex = 0;\r\n        }\r\n\r\n        for (var i: number = startIndex, n: number = startIndex + this._floatCountPerVertex * this._vertexStride; i < n; i += this._floatCountPerVertex) {\r\n            var offset: number;\r\n            if (render.renderMode === 4) {\r\n                offset = i;\r\n                var vertexOffset: number = meshVertexStride * (meshVertexIndex++);\r\n                var meshOffset: number = vertexOffset + meshPosOffset;\r\n                this._vertices[offset++] = meshVertices[meshOffset++];\r\n                this._vertices[offset++] = meshVertices[meshOffset++];\r\n                this._vertices[offset++] = meshVertices[meshOffset];\r\n                if (meshCorOffset === -1) {\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                    this._vertices[offset++] = 1.0;\r\n                }\r\n                else {\r\n                    meshOffset = vertexOffset + meshCorOffset;\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset];\r\n                }\r\n                if (meshUVOffset === -1) {\r\n                    this._vertices[offset++] = 0.0;\r\n                    this._vertices[offset++] = 0.0;\r\n                }\r\n                else {\r\n                    meshOffset = vertexOffset + meshUVOffset;\r\n                    this._vertices[offset++] = meshVertices[meshOffset++];\r\n                    this._vertices[offset++] = meshVertices[meshOffset];\r\n                }\r\n            } else {\r\n                offset = i + 4;\r\n            }\r\n\r\n            this._vertices[offset++] = position.x;\r\n            this._vertices[offset++] = position.y;\r\n            this._vertices[offset++] = position.z;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startLifeTime;\r\n\r\n            this._vertices[offset++] = direction.x;\r\n            this._vertices[offset++] = direction.y;\r\n            this._vertices[offset++] = direction.z;\r\n            this._vertices[offset++] = time;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.x;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.y;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.z;\r\n            this._vertices[offset++] = ShurikenParticleData.startColor.w;\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[0];\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[1];\r\n            this._vertices[offset++] = ShurikenParticleData.startSize[2];\r\n\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[0];\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[1];\r\n            this._vertices[offset++] = ShurikenParticleData.startRotation[2];\r\n\r\n            //StartSpeed\r\n            this._vertices[offset++] = startSpeed;\r\n\r\n            //this._vertices[offset] = Math.random();\r\n\r\n\r\n            needRandomColor && (this._vertices[offset + 1] = randomColor);\r\n            needRandomSize && (this._vertices[offset + 2] = randomSize);\r\n            needRandomRotation && (this._vertices[offset + 3] = randomRotation);\r\n            needRandomTextureAnimation && (this._vertices[offset + 4] = randomTextureAnimation);\r\n            if (needRandomVelocity) {\r\n                this._vertices[offset + 5] = randomVelocityX;\r\n                this._vertices[offset + 6] = randomVelocityY;\r\n                this._vertices[offset + 7] = randomVelocityZ;\r\n            }\r\n\r\n            switch (this.simulationSpace) {\r\n                case 0:\r\n                    offset += 8;\r\n                    this._vertices[offset++] = pos.x;\r\n                    this._vertices[offset++] = pos.y;\r\n                    this._vertices[offset++] = pos.z;\r\n                    this._vertices[offset++] = rot.x;\r\n                    this._vertices[offset++] = rot.y;\r\n                    this._vertices[offset++] = rot.z;\r\n                    this._vertices[offset++] = rot.w;\r\n                    break;\r\n                case 1:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n            }\r\n            offset = i + this._simulationUV_Index;\r\n            this._vertices[offset++] = startU;\r\n            this._vertices[offset++] = startV;\r\n            this._vertices[offset++] = subU;\r\n            this._vertices[offset] = subV;\r\n        }\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Add new particles to the vertex buffer.\r\n     * @zh 将新粒子添加到顶点缓冲区。\r\n     */\r\n    addNewParticlesToVertexBuffer(): void {\r\n        var start: number;\r\n        var byteStride: number = this._vertexStride * this._floatCountPerVertex * 4;\r\n        if (this._firstNewElement < this._firstFreeElement) {\r\n            start = this._firstNewElement * byteStride;\r\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._firstFreeElement - this._firstNewElement) * byteStride);\r\n\r\n        } else {\r\n            start = this._firstNewElement * byteStride;\r\n            this._vertexBuffer.setData(this._vertices.buffer, start, start, (this._bufferMaxParticles - this._firstNewElement) * byteStride);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                this._vertexBuffer.setData(this._vertices.buffer, 0, 0, this._firstFreeElement * byteStride);\r\n\r\n            }\r\n        }\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    _getType(): number {\r\n        return ShurikenParticleSystem._type;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        if (this._updateMask != Stat.loopCount) {\r\n            this._updateMask = Stat.loopCount;\r\n            this._updateEmission();\r\n            //设备丢失时, setData  here\r\n            if (this._firstNewElement != this._firstFreeElement)\r\n                this.addNewParticlesToVertexBuffer();\r\n            this._drawCounter++;\r\n        }\r\n\r\n\r\n        if (this._firstActiveElement != this._firstFreeElement)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        //this._bufferState.bind();\r\n        var indexCount: number;\r\n        this.clearRenderParams();\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            indexCount = (this._firstFreeElement - this._firstActiveElement) * this._indexStride;\r\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\r\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\r\n            // Stat.trianglesFaces += indexCount / 3;\r\n            // Stat.renderBatches++;\r\n        } else {\r\n            indexCount = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride;\r\n            this.setDrawElemenParams(indexCount, 2 * this._firstActiveElement * this._indexStride);\r\n            // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 2 * this._firstActiveElement * this._indexStride);\r\n            // Stat.trianglesFaces += indexCount / 3;\r\n            // Stat.renderBatches++;\r\n            if (this._firstFreeElement > 0) {\r\n                indexCount = this._firstFreeElement * this._indexStride;\r\n                this.setDrawElemenParams(indexCount, 0);\r\n                // LayaGL.renderDrawConatext.drawElements(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, 0);\r\n                // Stat.trianglesFaces += indexCount / 3;\r\n                // Stat.renderBatches++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Start emitting particles\r\n     * @zh 开始发射粒子。\r\n     */\r\n    play(): void {\r\n        this._burstsIndex = 0;\r\n        this._isEmitting = true;\r\n        this._isPlaying = true;\r\n        this._isPaused = false;\r\n        this._emissionTime = 0;\r\n        this._emissionDistance = 0;\r\n        this._owner.transform.position.cloneTo(this._emissionLastPosition);\r\n        this._totalDelayTime = 0;\r\n\r\n        if (!this.autoRandomSeed) {\r\n            for (var i: number = 0, n: number = this._randomSeeds.length; i < n; i++)\r\n                this._randomSeeds[i] = this.randomSeed[0] + ShurikenParticleSystem._RANDOMOFFSET[i];\r\n        }\r\n\r\n        switch (this.startDelayType) {\r\n            case 0:\r\n                this._playStartDelay = this.startDelay;\r\n                break;\r\n            case 1:\r\n                if (this.autoRandomSeed) {\r\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[2];\r\n                    this._playStartDelay = MathUtil.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat());\r\n                    this._randomSeeds[2] = this._rand.seed;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Utils3D: startDelayType is invalid.\");\r\n        }\r\n        this._frameRateTime = this._currentTime + this._playStartDelay;//同步频率模式发射时间,更新函数中小于延迟时间不会更新此时间。\r\n\r\n        this._startUpdateLoopCount = Stat.loopCount;\r\n    }\r\n\r\n    /**\r\n     * @en Pause emitting particles\r\n     * @zh 暂停发射粒子。\r\n     */\r\n    pause(): void {\r\n        this._isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * @en Advance the particle simulation by a specified time and pause playback.\r\n     * @param time The time to advance the simulation. If restart is true, the particle playback time will be reset to zero before updating progress.\r\n     * @param restart Whether to reset the playback state. Default is true.\r\n     * @zh 通过指定时间增加粒子播放进度，并暂停播放。\r\n     * @param time 进度时间。如果restart为true，粒子播放时间会归零后再更新进度。\r\n     * @param restart 是否重置播放状态。默认为true。\r\n     */\r\n    simulate(time: number, restart: boolean = true): void {\r\n        this._simulateUpdate = true;\r\n\r\n        if (restart) {\r\n            this._updateParticlesSimulationRestart(time);\r\n        }\r\n        else {\r\n            this._isPaused = false;//如果当前状态为暂停则无法发射粒子\r\n            this._updateParticles(time);\r\n        }\r\n\r\n        this.pause();\r\n    }\r\n\r\n    /**\r\n     * @en Stop emitting particles.\r\n     * @zh 停止发射粒子。\r\n     */\r\n    stop(): void {\r\n        this._burstsIndex = 0;\r\n        this._isEmitting = false;\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Clones to a target object.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆到目标对象。\r\n     * @param destObject 要克隆到的目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: ShurikenParticleSystem = (<ShurikenParticleSystem>destObject);\r\n\r\n        dest._useCustomBounds = this._useCustomBounds;\r\n        (this._customBounds) && (this._customBounds.cloneTo(dest._customBounds));\r\n\r\n        dest.duration = this.duration;\r\n        dest.looping = this.looping;\r\n        dest.prewarm = this.prewarm;\r\n        dest.startDelayType = this.startDelayType;\r\n        dest.startDelay = this.startDelay;\r\n        dest.startDelayMin = this.startDelayMin;\r\n        dest.startDelayMax = this.startDelayMax;\r\n\r\n        dest._maxStartLifetime = this._maxStartLifetime;\r\n        dest.startLifetimeType = this.startLifetimeType;\r\n        dest.startLifetimeConstant = this.startLifetimeConstant;\r\n        this.startLifeTimeGradient.cloneTo(dest.startLifeTimeGradient);\r\n        dest.startLifetimeConstantMin = this.startLifetimeConstantMin;\r\n        dest.startLifetimeConstantMax = this.startLifetimeConstantMax;\r\n        this.startLifeTimeGradientMin.cloneTo(dest.startLifeTimeGradientMin);\r\n        this.startLifeTimeGradientMax.cloneTo(dest.startLifeTimeGradientMax);\r\n\r\n        dest.startSpeedType = this.startSpeedType;\r\n        dest.startSpeedConstant = this.startSpeedConstant;\r\n        dest.startSpeedConstantMin = this.startSpeedConstantMin;\r\n        dest.startSpeedConstantMax = this.startSpeedConstantMax;\r\n\r\n        dest.dragType = this.dragType;\r\n        dest.dragConstant = this.dragConstant;\r\n        dest.dragSpeedConstantMax = this.dragSpeedConstantMax;\r\n        dest.dragSpeedConstantMin = this.dragSpeedConstantMin;\r\n\r\n        dest.threeDStartSize = this.threeDStartSize;\r\n        dest.startSizeType = this.startSizeType;\r\n        dest.startSizeConstant = this.startSizeConstant;\r\n        this.startSizeConstantSeparate.cloneTo(dest.startSizeConstantSeparate);\r\n        dest.startSizeConstantMin = this.startSizeConstantMin;\r\n        dest.startSizeConstantMax = this.startSizeConstantMax;\r\n        this.startSizeConstantMinSeparate.cloneTo(dest.startSizeConstantMinSeparate);\r\n        this.startSizeConstantMaxSeparate.cloneTo(dest.startSizeConstantMaxSeparate);\r\n\r\n        dest.threeDStartRotation = this.threeDStartRotation;\r\n        dest.startRotationType = this.startRotationType;\r\n        dest.startRotationConstant = this.startRotationConstant;\r\n        this.startRotationConstantSeparate.cloneTo(dest.startRotationConstantSeparate);\r\n        dest.startRotationConstantMin = this.startRotationConstantMin;\r\n        dest.startRotationConstantMax = this.startRotationConstantMax;\r\n        this.startRotationConstantMinSeparate.cloneTo(dest.startRotationConstantMinSeparate);\r\n        this.startRotationConstantMaxSeparate.cloneTo(dest.startRotationConstantMaxSeparate);\r\n\r\n        dest.randomizeRotationDirection = this.randomizeRotationDirection;\r\n\r\n        dest.startColorType = this.startColorType;\r\n        this.startColorConstant.cloneTo(dest.startColorConstant);\r\n        this.startColorConstantMin.cloneTo(dest.startColorConstantMin);\r\n        this.startColorConstantMax.cloneTo(dest.startColorConstantMax);\r\n\r\n        dest.gravityModifier = this.gravityModifier;\r\n        dest.simulationSpace = this.simulationSpace;\r\n        dest.simulationSpeed = this.simulationSpeed;\r\n        dest.scaleMode = this.scaleMode;\r\n        dest.playOnAwake = this.playOnAwake;\r\n        dest.autoRandomSeed = this.autoRandomSeed;\r\n        dest.randomSeed[0] = this.randomSeed[0];\r\n\r\n        dest.maxParticles = this.maxParticles;\r\n\r\n        //TODO:可做更优判断\r\n        (this._emission) && (dest._emission = this._emission.clone());\r\n        (this.shape) && (dest.shape = this.shape.clone());\r\n        (this.velocityOverLifetime) && (dest.velocityOverLifetime = this.velocityOverLifetime.clone());\r\n        (this.colorOverLifetime) && (dest.colorOverLifetime = this.colorOverLifetime.clone());\r\n        (this.sizeOverLifetime) && (dest.sizeOverLifetime = this.sizeOverLifetime.clone());\r\n        (this.rotationOverLifetime) && (dest.rotationOverLifetime = this.rotationOverLifetime.clone());\r\n        (this.textureSheetAnimation) && (dest.textureSheetAnimation = this.textureSheetAnimation.clone());\r\n        //\r\n\r\n        dest.isPerformanceMode = this.isPerformanceMode;\r\n\r\n        dest._isEmitting = this._isEmitting;\r\n        dest._isPlaying = this._isPlaying;\r\n        dest._isPaused = this._isPaused;\r\n        dest._playStartDelay = this._playStartDelay;\r\n        dest._frameRateTime = this._frameRateTime;\r\n        dest._emissionTime = this._emissionTime;\r\n        dest._totalDelayTime = this._totalDelayTime;\r\n        dest._burstsIndex = this._burstsIndex;\r\n    }\r\n\r\n    /**\r\n     * @en Clone.\r\n     * @returns Clone copy.\r\n     * @zh 克隆。\r\n     * @returns 克隆副本。\r\n     */\r\n    clone(): any {\r\n        var dest: ShurikenParticleSystem = new ShurikenParticleSystem(null);\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n}\r\n\r\n\r\n","import { MathUtil } from \"../../../maths/MathUtil\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport { VertexShurikenParticleBillboard } from \"../../graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"../../graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { ShurikenParticleData } from \"./ShurikenParticleData\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n * @en ShurikenParticleInstanceSystem class is used to implement instanced particle rendering.\r\n * @zh ShurikenParticleInstanceSystem 类用于实现实例化粒子渲染。\r\n */\r\nexport class ShurikenParticleInstanceSystem extends ShurikenParticleSystem {\r\n\r\n    private _instanceParticleVertexBuffer: VertexBuffer3D = null;\r\n    private _instanceVertex: Float32Array = null;\r\n\r\n\r\n    private _meshIndexCount: number;\r\n    private _meshFloatCountPreVertex: number;\r\n\r\n    /**\r\n     * 每个粒子数据 float 个数\r\n     */\r\n    private _floatCountPerParticleData: number;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en creates an instance of ShurikenParticleInstanceSystem class.\r\n     * @param render The ShurikenParticleRenderer associated with this particle system.\r\n     * @zh 创建 ShurikenParticleInstanceSystem 类的实例。\r\n     * @param render 与该粒子系统关联的 ShurikenParticleRenderer。\r\n     */\r\n    constructor(render: ShurikenParticleRenderer) {\r\n        super(render, MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n    }\r\n\r\n    /***\r\n     * 重排 mesh vb\r\n     */\r\n    private _initMeshVertex(vertex: Float32Array, mesh: Mesh) {\r\n        let meshVertexBuffer = mesh._vertexBuffer;\r\n        let meshVertices = meshVertexBuffer.getFloat32Data();\r\n        let meshVertexDeclaration = meshVertexBuffer.vertexDeclaration;\r\n\r\n        let meshPosOffset = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_POSITION0)._offset / 4;\r\n\r\n        let colorElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_COLOR0);\r\n        let meshColorOffset = colorElement ? colorElement._offset / 4 : -1;\r\n\r\n        let uvElement: VertexElement = meshVertexDeclaration.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE0);\r\n        let meshUVOffset = uvElement ? uvElement._offset / 4 : -1;\r\n\r\n        let meshVertexStride = meshVertexDeclaration.vertexStride / 4;\r\n        let meshVertexIndex = 0;\r\n\r\n        let vertexCount = mesh.vertexCount;\r\n\r\n        let perParticleDataCount = this._vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n        for (let index = 0; index < vertexCount; index++) {\r\n            let startIndex = index * perParticleDataCount;\r\n            let indexOffset = startIndex;\r\n            let vertexOffset = meshVertexStride * meshVertexIndex++;\r\n\r\n            // position\r\n            let positionOffset = vertexOffset + meshPosOffset;\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n            vertex[indexOffset++] = meshVertices[positionOffset++];\r\n\r\n            // color\r\n            if (meshColorOffset == -1) {\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n                vertex[indexOffset++] = 1;\r\n            }\r\n            else {\r\n                let colorOffset = vertexOffset + meshColorOffset;\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n                vertex[indexOffset++] = meshVertices[colorOffset++];\r\n            }\r\n\r\n            // uv\r\n            if (meshUVOffset == -1) {\r\n                vertex[indexOffset++] = 0;\r\n                vertex[indexOffset++] = 0;\r\n            }\r\n            else {\r\n                let uvOffset = vertexOffset + meshUVOffset;\r\n                vertex[indexOffset++] = meshVertices[uvOffset++];\r\n                vertex[indexOffset++] = meshVertices[uvOffset++];\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Initialize buffer\r\n     * @zh 初始化 buffer\r\n     */\r\n    _initBufferDatas(): void {\r\n        // todo  Resource._addMemory\r\n        if (this._vertexBuffer) {\r\n            // this._instanceBufferState.destroy();\r\n            this._vertexBuffer.destroy();\r\n            this._instanceParticleVertexBuffer.destroy();\r\n            this._indexBuffer.destroy();\r\n            this._vertexBuffer = null;\r\n            this._instanceParticleVertexBuffer = null;\r\n            this._indexBuffer = null;\r\n        }\r\n        let render: ShurikenParticleRenderer = this._ownerRender;\r\n        let renderMode: number = render.renderMode;\r\n\r\n        if (renderMode == -1 || this.maxParticles <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (renderMode == 4) {\r\n            let mesh = render.mesh;\r\n            if (mesh) {\r\n                let meshDeclaration = VertexShurikenParticleMesh.vertexInstanceMeshDeclaration;\r\n                let particleDeclaration = VertexShurikenParticleMesh.vertexInstanceParticleDeclaration;\r\n\r\n                this._meshIndexCount = mesh.indexCount;\r\n                this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n                this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\r\n                this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\r\n                this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\r\n\r\n                let indexCount = mesh.indexCount;\r\n                this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, indexCount, BufferUsage.Static, false);\r\n                this._indexBuffer.setData(mesh._indexBuffer.getData());\r\n\r\n                let meshVertexCount = mesh.vertexCount;\r\n                let vbSize = meshDeclaration.vertexStride * meshVertexCount;\r\n                this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vbSize, BufferUsage.Static, false);\r\n                this._vertexBuffer.vertexDeclaration = meshDeclaration;\r\n                // 重排 mesh 顶点数据 ?\r\n                // 固定 vertexElement 类型。。。 \r\n                let meshVertex = new Float32Array(vbSize / 4);\r\n                this._initMeshVertex(meshVertex, mesh);\r\n\r\n                this._vertexBuffer.setData(meshVertex.buffer);\r\n\r\n                let particleCount = this._bufferMaxParticles;\r\n                let particleVbSize = particleCount * particleDeclaration.vertexStride;\r\n                this._instanceVertex = new Float32Array(particleVbSize / 4);\r\n                this._instanceParticleVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic, false);\r\n                this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\r\n                this._instanceParticleVertexBuffer.instanceBuffer = true;\r\n                this._bufferState.applyState([this._vertexBuffer, this._instanceParticleVertexBuffer], this._indexBuffer)\r\n            }\r\n\r\n        }\r\n        else {\r\n            let billboardDeclaration = VertexShurikenParticleBillboard.vertexInstanceMeshDeclaration;\r\n            let particleDeclaration = VertexShurikenParticleBillboard.vertexInstanceParticleDeclaration;\r\n\r\n            this._meshIndexCount = 6;\r\n            this._simulationUV_Index = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset / 4;\r\n            this._floatCountPerParticleData = particleDeclaration.vertexStride / 4;\r\n            this._startLifeTimeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset / 4 + 3;\r\n            this._timeIndex = particleDeclaration.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset / 4 + 3;\r\n\r\n            let indexArray = VertexShurikenParticleBillboard.billboardIndexArray;\r\n            let indexCount = indexArray.length;\r\n            this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indexCount, BufferUsage.Static, false);\r\n            this._indexBuffer.setData(indexArray);\r\n\r\n            let meshVBSize = this._meshIndexCount * billboardDeclaration.vertexStride;\r\n            this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(meshVBSize, BufferUsage.Static, false);\r\n            this._vertexBuffer.vertexDeclaration = billboardDeclaration;\r\n            this._vertexBuffer.setData(VertexShurikenParticleBillboard.billboardVertexArray.buffer);\r\n            let particleCount = this._bufferMaxParticles;\r\n            let particleVbSize = particleCount * particleDeclaration.vertexStride;\r\n            this._instanceVertex = new Float32Array(particleVbSize / 4);\r\n            this._instanceParticleVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(particleVbSize, BufferUsage.Dynamic, false);\r\n            this._instanceParticleVertexBuffer.vertexDeclaration = particleDeclaration;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer);\r\n            this._instanceParticleVertexBuffer.instanceBuffer = true;\r\n            // this._instanceBufferState.bind();\r\n            // this._instanceBufferState.applyIndexBuffer(this._indexBuffer);\r\n            // this._instanceBufferState.applyVertexBuffer(this._vertexBuffer);\r\n            // this._instanceBufferState.applyInstanceVertexBuffer(this._instanceParticleVertexBuffer);\r\n            // this._instanceBufferState.unBind();\r\n            this._bufferState.applyState([this._vertexBuffer, this._instanceParticleVertexBuffer], this._indexBuffer);\r\n        }\r\n\r\n        // let memorySize = this._instanceParticleVertexBuffer._byteLength + this._indexBuffer._byteLength + this._vertexBuffer._byteLength;\r\n\r\n        // Resource._addMemory(memorySize, memorySize);\r\n    }\r\n\r\n    protected _retireActiveParticles(): void {\r\n        if (this._instanceParticleVertexBuffer == null) return;\r\n        const epsilon: number = 0.0001;\r\n        let firstActive = this._firstActiveElement;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            let index = this._firstActiveElement * this._floatCountPerParticleData;\r\n            let timeIndex = index + this._timeIndex;\r\n\r\n            let particleAge = this._currentTime - this._instanceVertex[timeIndex];\r\n            if (particleAge + epsilon < this._instanceVertex[index + this._startLifeTimeIndex]) {\r\n                break;\r\n            }\r\n\r\n            this._instanceVertex[timeIndex] = this._drawCounter;\r\n            this._firstActiveElement++;\r\n            if (this._firstActiveElement >= this._bufferMaxParticles) {\r\n                this._firstActiveElement = 0;\r\n            }\r\n        }\r\n\r\n        if (this._firstActiveElement != firstActive) {\r\n            let byteStride = this._floatCountPerParticleData * 4;\r\n            if (this._firstActiveElement < this._firstFreeElement) {\r\n                let activeStart = this._firstActiveElement * byteStride;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, activeStart, (this._firstFreeElement - this._firstActiveElement) * byteStride);\r\n            }\r\n            else {\r\n                let start = this._firstActiveElement * byteStride;\r\n                let a = this._bufferMaxParticles - this._firstActiveElement;\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\r\n\r\n                if (this._firstFreeElement > 0) {\r\n                    this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            let age = this._drawCounter - this._instanceVertex[this._firstRetiredElement * this._floatCountPerParticleData + this._timeIndex];\r\n\r\n            //TODO这里会有什么bug\r\n            if (false)\r\n                if (age < 3)//GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n                    break;\r\n            this._firstRetiredElement++;\r\n            if (this._firstRetiredElement >= this._bufferMaxParticles)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a new particle to the particle system.\r\n     * @param position The initial position of the particle.\r\n     * @param direction The initial direction of the particle.\r\n     * @param time The current simulation time.\r\n     * @returns Whether the particle was successfully added.\r\n     * @zh 向粒子系统添加一个新粒子。\r\n     * @param position 粒子的初始位置。\r\n     * @param direction 粒子的初始方向。\r\n     * @param time 当前的模拟时间。\r\n     * @returns 粒子是否成功添加。\r\n     */\r\n    addParticle(position: Vector3, direction: Vector3, time: number): boolean {\r\n        Vector3.normalize(direction, direction);\r\n\r\n        //下一个粒子\r\n        let nextFreeParticle = this._firstFreeElement + 1;\r\n        if (nextFreeParticle >= this._bufferMaxParticles) {\r\n            nextFreeParticle = 0;\r\n        }\r\n\r\n        if (nextFreeParticle == this._firstRetiredElement) {\r\n            return false;\r\n        }\r\n\r\n        let transform = this._owner.transform;\r\n        ShurikenParticleData.create(this, this._ownerRender);\r\n\r\n        let particleAge = this._currentTime - time;\r\n\r\n        if (particleAge >= ShurikenParticleData.startLifeTime) {\r\n            return true;\r\n        }\r\n\r\n        let pos: Vector3, rot: Quaternion;\r\n        if (this.simulationSpace == 0) {\r\n            pos = transform.position;\r\n            rot = transform.rotation;\r\n        }\r\n\r\n        //StartSpeed\r\n        let startSpeed = 0;\r\n        switch (this.startSpeedType) {\r\n            case 0:\r\n                startSpeed = this.startSpeedConstant;\r\n                break;\r\n            case 2:\r\n                if (this.autoRandomSeed) {\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random());\r\n                } else {\r\n                    this._rand.seed = this._randomSeeds[8];\r\n                    startSpeed = MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat());\r\n                    this._randomSeeds[8] = this._rand.seed;\r\n                }\r\n                break;\r\n        }\r\n\r\n        let randomVelocityX: number, randomVelocityY: number, randomVelocityZ: number;\r\n        let needRandomVelocity = this._velocityOverLifetime && this._velocityOverLifetime.enable;\r\n        if (needRandomVelocity) {\r\n            let velocityType = this._velocityOverLifetime.velocity.type;\r\n            if (velocityType == 2 || velocityType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomVelocityX = Math.random();\r\n                    randomVelocityY = Math.random();\r\n                    randomVelocityZ = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[9];\r\n                    randomVelocityX = this._rand.getFloat();\r\n                    randomVelocityY = this._rand.getFloat();\r\n                    randomVelocityZ = this._rand.getFloat();\r\n                    this._randomSeeds[9] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomVelocity = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomVelocity = false;\r\n        }\r\n\r\n        let randomColor: number;\r\n        let needRandomColor = this._colorOverLifetime && this._colorOverLifetime.enable;\r\n        if (needRandomColor) {\r\n            let colorType = this._colorOverLifetime.color.type;\r\n            if (colorType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomColor = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[10];\r\n                    randomColor = this._rand.getFloat();\r\n                    this._randomSeeds[10] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomColor = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomColor = false;\r\n        }\r\n\r\n        let randomSize: number;\r\n        let needRandomSize = this._sizeOverLifetime && this._sizeOverLifetime.enable;\r\n        if (needRandomSize) {\r\n            let sizeType = this._sizeOverLifetime.size.type;\r\n            if (sizeType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomSize = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[11];\r\n                    randomSize = this._rand.getFloat();\r\n                    this.randomSeed[11] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomSize = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomSize = false;\r\n        }\r\n\r\n        let randomRotation: number;\r\n        let needRandomRotation = this._rotationOverLifetime && this._rotationOverLifetime.enable;\r\n        if (needRandomRotation) {\r\n            let rotationType = this._rotationOverLifetime.angularVelocity.type;\r\n            if (rotationType == 2 || rotationType == 3) {\r\n                if (this.autoRandomSeed) {\r\n\r\n                    randomRotation = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[12];\r\n                    randomRotation = this._rand.getFloat();\r\n                    this._randomSeeds[12] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomRotation = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomRotation = false;\r\n        }\r\n\r\n        let randomTextureAnimation: number;\r\n        let needRandomTextureAnimation = this._textureSheetAnimation && this._textureSheetAnimation.enable;\r\n        if (needRandomTextureAnimation) {\r\n            let textureAnimationType = this._textureSheetAnimation.frame.type;\r\n            if (textureAnimationType == 3) {\r\n                if (this.autoRandomSeed) {\r\n                    randomTextureAnimation = Math.random();\r\n                }\r\n                else {\r\n                    this._rand.seed = this._randomSeeds[15];\r\n                    randomTextureAnimation = this._rand.getFloat();\r\n                    this._randomSeeds[15] = this._rand.seed;\r\n                }\r\n            }\r\n            else {\r\n                needRandomTextureAnimation = false;\r\n            }\r\n        }\r\n        else {\r\n            needRandomTextureAnimation = false;\r\n        }\r\n\r\n        // todo uv 动画\r\n        let subU: number = ShurikenParticleData.startUVInfo[0];\r\n        let subV: number = ShurikenParticleData.startUVInfo[1];\r\n        let startU: number = ShurikenParticleData.startUVInfo[2];\r\n        let startV: number = ShurikenParticleData.startUVInfo[3];\r\n\r\n        let render: ShurikenParticleRenderer = this._ownerRender;\r\n        if (render.renderMode == 4) {\r\n\r\n        }\r\n        else {\r\n            // todo, quad 动态添加 uv ?\r\n        }\r\n\r\n        // 每个粒子 就一个数据, 不用循环\r\n        let startIndex = this._firstFreeElement * this._floatCountPerParticleData;\r\n\r\n        let offset = startIndex;\r\n        this._instanceVertex[offset++] = position.x;\r\n        this._instanceVertex[offset++] = position.y;\r\n        this._instanceVertex[offset++] = position.z;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startLifeTime;\r\n\r\n        this._instanceVertex[offset++] = direction.x;\r\n        this._instanceVertex[offset++] = direction.y;\r\n        this._instanceVertex[offset++] = direction.z;\r\n        this._instanceVertex[offset++] = time;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.x;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.y;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.z;\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startColor.w;\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[0];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[1];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startSize[2];\r\n\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[0];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[1];\r\n        this._instanceVertex[offset++] = ShurikenParticleData.startRotation[2];\r\n\r\n        //StartSpeed\r\n        this._instanceVertex[offset++] = startSpeed;\r\n        needRandomColor && (this._instanceVertex[offset + 1] = randomColor);\r\n        needRandomSize && (this._instanceVertex[offset + 2] = randomSize);\r\n        needRandomRotation && (this._instanceVertex[offset + 3] = randomRotation);\r\n        needRandomTextureAnimation && (this._instanceVertex[offset + 4] = randomTextureAnimation);\r\n        if (needRandomVelocity) {\r\n            this._instanceVertex[offset + 5] = randomVelocityX;\r\n            this._instanceVertex[offset + 6] = randomVelocityY;\r\n            this._instanceVertex[offset + 7] = randomVelocityZ;\r\n        }\r\n\r\n        switch (this.simulationSpace) {\r\n            case 0:\r\n                offset += 8;\r\n                this._instanceVertex[offset++] = pos.x;\r\n                this._instanceVertex[offset++] = pos.y;\r\n                this._instanceVertex[offset++] = pos.z;\r\n                this._instanceVertex[offset++] = rot.x;\r\n                this._instanceVertex[offset++] = rot.y;\r\n                this._instanceVertex[offset++] = rot.z;\r\n                this._instanceVertex[offset++] = rot.w;\r\n                break;\r\n            case 1:\r\n                break;\r\n            default:\r\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n        }\r\n        offset = startIndex + this._simulationUV_Index;\r\n        this._instanceVertex[offset++] = startU;\r\n        this._instanceVertex[offset++] = startV;\r\n        this._instanceVertex[offset++] = subU;\r\n        this._instanceVertex[offset++] = subV;\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Add new particles to the vertex buffer.\r\n     * @zh 将新粒子添加到顶点缓冲区。\r\n     */\r\n    addNewParticlesToVertexBuffer(): void {\r\n        let byteStride = this._floatCountPerParticleData * 4;\r\n        // instance buffer 绘制不能偏移, 每次 从 0 更新整个 buffer\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            let start = this._firstActiveElement * byteStride;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, (this._firstFreeElement - this._firstActiveElement) * byteStride);\r\n        }\r\n        else {\r\n            let start = this._firstActiveElement * byteStride;\r\n            let a = this._bufferMaxParticles - this._firstActiveElement;\r\n            this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, 0, start, a * byteStride);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer, a * byteStride, 0, this._firstFreeElement * byteStride);\r\n            }\r\n        }\r\n\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n    /**\r\n     * @en Update the render parameters for the particle system.\r\n     * @param stage The current render context.\r\n     * @zh 更新粒子系统的渲染参数。\r\n     * @param stage 当前渲染上下文。\r\n     */\r\n    _updateRenderParams(stage: RenderContext3D) {\r\n        //this._instanceBufferState.bind();\r\n        // instance buffer 每次从 0 更新\r\n        this.clearRenderParams();\r\n        if (this._firstActiveElement < this._firstFreeElement) {\r\n            let indexCount = this._firstFreeElement - this._firstActiveElement;\r\n            this.setDrawElemenParams(this._meshIndexCount, 0);\r\n            this.instanceCount = indexCount;\r\n            //  LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\r\n            //  Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\r\n            //  Stat.renderBatches++;\r\n        }\r\n        else {\r\n            let indexCount = this._bufferMaxParticles - this._firstActiveElement;\r\n            if (this._firstFreeElement > 0) {\r\n                indexCount += this._firstFreeElement;\r\n            }\r\n            this.setDrawElemenParams(this._meshIndexCount, 0);\r\n            this.instanceCount = indexCount;\r\n            //LayaGL.renderEngine.getDrawContext().drawElementsInstanced(MeshTopology.Triangles, this._meshIndexCount, IndexFormat.UInt16, 0, indexCount);\r\n            //Stat.trianglesFaces += this._meshIndexCount / 3 * indexCount;\r\n            //Stat.renderBatches++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the particle system and release resources.\r\n     * @zh 销毁粒子系统并释放资源。\r\n     */\r\n    destroy(): void {\r\n        // todo\r\n        super.destroy();\r\n\r\n        if (this._indexBuffer) {\r\n            this._indexBuffer.destroy();\r\n        }\r\n        if (this._vertexBuffer) {\r\n            this._vertexBuffer.destroy();\r\n        }\r\n        if (this._instanceParticleVertexBuffer) {\r\n            this._instanceParticleVertexBuffer.destroy();\r\n        }\r\n\r\n        this._instanceVertex = null;\r\n        this._meshIndexCount = null;\r\n        this._meshFloatCountPreVertex = null;\r\n    }\r\n}\r\n","import { Material } from \"../../../resource/Material\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\"\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n\r\n/**\r\n * @en ShurikenParticleMaterial class is used to implement particle materials.\r\n * @zh ShurikenParticleMaterial 类用于实现粒子材质。\r\n */\r\nexport class ShurikenParticleMaterial extends Material {\r\n\t/**\r\n\t * @en Render mode for transparent blending.\r\n\t * @zh 渲染状态_透明混合。\r\n\t */\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\t/**\r\n\t * @en Render mode for additive blending.\r\n\t * @zh 渲染状态_加色法混合。\r\n\t */\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DIFFUSEMAP: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_TINTCOLOR: ShaderDefine;\r\n\t/**@interanl */\r\n\tstatic SHADERDEFINE_ADDTIVEFOG: ShaderDefine;\r\n\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TINTCOLOR: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\t/**\r\n\t * @en Default material, modification prohibited.\r\n\t * @zh 默认材质，禁止修改。\r\n\t */\r\n\tstatic defaultMaterial: ShurikenParticleMaterial;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP = Shader3D.getDefineByName(\"DIFFUSEMAP\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR = Shader3D.getDefineByName(\"TINTCOLOR\");\r\n\t\tShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG = Shader3D.getDefineByName(\"ADDTIVEFOG\");\r\n\t\tShurikenParticleMaterial.DIFFUSETEXTURE = Shader3D.propertyNameToID(\"u_texture\");\r\n\t\tShurikenParticleMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_Tintcolor\");\r\n\t\tShurikenParticleMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en Color of the particle material.\r\n\t * @zh 粒子材质的颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._shaderValues.getColor(ShurikenParticleMaterial.TINTCOLOR);\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR);\r\n\r\n\t\tthis._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @en Texture tiling and offset.\r\n\t * @zh 纹理平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Diffuse texture.\r\n\t * @zh 漫反射贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ShurikenParticleMaterial.DIFFUSETEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP);\r\n\r\n\t\tthis._shaderValues.setTexture(ShurikenParticleMaterial.DIFFUSETEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates a new instance of the ShurikenParticleMaterial class.\r\n\t * @zh 创建ShurikenParticleMaterial类的新实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"PARTICLESHURIKEN\");\r\n\t\t// this._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\r\n\t\t// this._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\tthis.renderMode = ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED;//默认加色法会自动加上雾化宏定义，导致非加色法从材质读取完后未移除宏定义。\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ShurikenParticleMaterial = new ShurikenParticleMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移X分量。\r\n\t */\r\n\tget tilingOffsetX(): number {\r\n\t\treturn this._MainTex_STX;\r\n\t}\r\n\r\n\tset tilingOffsetX(x: number) {\r\n\t\tthis._MainTex_STX = x;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移Y分量。\r\n\t */\r\n\tget tilingOffsetY(): number {\r\n\t\treturn this._MainTex_STY;\r\n\t}\r\n\r\n\tset tilingOffsetY(y: number) {\r\n\t\tthis._MainTex_STY = y;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移Z分量。\r\n\t */\r\n\tget tilingOffsetZ(): number {\r\n\t\treturn this._MainTex_STZ;\r\n\t}\r\n\r\n\tset tilingOffsetZ(z: number) {\r\n\t\tthis._MainTex_STZ = z;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 纹理平铺和偏移W分量。\r\n\t */\r\n\tget tilingOffsetW(): number {\r\n\t\treturn this._MainTex_STW;\r\n\t}\r\n\r\n\tset tilingOffsetW(w: number) {\r\n\t\tthis._MainTex_STW = w;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColor(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColor(value: Color) {\r\n\t\tthis.color = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorR(): number {\r\n\t\treturn this.color.r;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorR(value: number) {\r\n\t\tthis.color.r = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorG(): number {\r\n\t\treturn this.color.g;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorG(value: number) {\r\n\t\tthis.color.g = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _TintColorB(): number {\r\n\t\treturn this.color.b;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorB(value: number) {\r\n\t\tthis.color.b = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal \r\n\t */\r\n\tget _TintColorA(): number {\r\n\t\treturn this.color.a;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _TintColorA(value: number) {\r\n\t\tthis.color.a = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_ST(): Vector4 {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_ST(value: Vector4) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.setValue(value.x, value.y, value.z, value.w);\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STX(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).x;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STX(x: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.x = x;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STY(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).y;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STY(y: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.y = y;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STZ(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).z;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STZ(z: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.z = z;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tget _MainTex_STW(): number {\r\n\t\treturn this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).w;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tset _MainTex_STW(w: number) {\r\n\t\tvar tilOff: Vector4 = (<Vector4>this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET));\r\n\t\ttilOff.w = w;\r\n\t\tthis.tilingOffset = tilOff;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色R分量。\r\n\t */\r\n\tget colorR(): number {\r\n\t\treturn this._TintColorR;\r\n\t}\r\n\r\n\tset colorR(value: number) {\r\n\t\tthis._TintColorR = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色G分量。\r\n\t */\r\n\tget colorG(): number {\r\n\t\treturn this._TintColorG;\r\n\t}\r\n\r\n\tset colorG(value: number) {\r\n\t\tthis._TintColorG = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色B分量。\r\n\t */\r\n\tget colorB(): number {\r\n\t\treturn this._TintColorB;\r\n\t}\r\n\r\n\tset colorB(value: number) {\r\n\t\tthis._TintColorB = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 颜色Z分量。\r\n\t */\r\n\tget colorA(): number {\r\n\t\treturn this._TintColorA;\r\n\t}\r\n\r\n\tset colorA(value: number) {\r\n\t\tthis._TintColorA = value;\r\n\t}\r\n}\r\n\r\n\r\n","import { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./ShuriKenParticle3DShaderDeclaration\";\r\nimport { ShurikenParticleInstanceSystem } from \"./ShurikenParticleInstanceSystem\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { ShaderData, ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { IRenderContext3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { Transform3D } from \"../Transform3D\";\r\nimport { BaseRenderType } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\n\r\n\r\n/**\r\n * @en The `ShurikenParticleRenderer` class is used to create 3D particle renderers.\r\n * @zh `ShurikenParticleRenderer` 类用于创建3D粒子渲染器。\r\n */\r\nexport class ShurikenParticleRenderer extends BaseRender {\r\n    /**\r\n     * @en Gravity value.\r\n     * @zh 重力值。\r\n     */\r\n    static gravity: Vector3 = new Vector3(0, -9.81, 0);\r\n    /** @internal */\r\n    private _finalGravity: Vector3 = new Vector3();\r\n    private _dragConstant: Vector2 = new Vector2();\r\n\r\n\r\n    /**@internal */\r\n    private _renderMode: number;\r\n    /**@internal */\r\n    private _mesh: Mesh = null;\r\n\r\n    /**@interanl */\r\n    _particleSystem: ShurikenParticleSystem;\r\n    /**\r\n     * @en Scale of camera speed in stretched billboard mode (currently not supported).\r\n     * @zh 拉伸广告牌模式摄像机速度缩放（暂不支持）。\r\n     */\r\n    stretchedBillboardCameraSpeedScale: number = 0;\r\n    /**\r\n     * @en Speed scale in stretched billboard mode.\r\n     * @zh 拉伸广告牌模式速度缩放。\r\n     */\r\n    stretchedBillboardSpeedScale: number = 0;\r\n    /**\r\n     * @en Length scale in stretched billboard mode.\r\n     * @zh 拉伸广告牌模式长度缩放。\r\n     */\r\n    stretchedBillboardLengthScale: number = 2;\r\n\r\n    /**\r\n     * @en The particle management system.\r\n     * @zh 粒子管理系统。\r\n     */\r\n    get particleSystem(): ShurikenParticleSystem {\r\n        return this._particleSystem;\r\n    }\r\n\r\n    ///**排序模式。*/\r\n    //public var sortingMode:int;\r\n\r\n    /**\r\n     * @en The render mode. 0: BILLBOARD, 1: STRETCHEDBILLBOARD, 2: HORIZONTALBILLBOARD, 3: VERTICALBILLBOARD, 4: MESH.\r\n     * @zh 渲染模式。0：粒子始终面向摄像机。、1：粒子面向摄像机，但会应用各种缩放、2：粒子平面与 XZ“地板”平面平行、3：粒子在世界 Y 轴上直立，但转向面向摄像机、4：从 3D 网格而非从纹理渲染粒子。。\r\n     */\r\n    get renderMode(): number {\r\n        return this._renderMode;\r\n    }\r\n\r\n    set renderMode(value: number) {\r\n        if (this._renderMode !== value) {\r\n            var defineDatas: ShaderData = this._baseRenderNode.shaderData;\r\n            switch (this._renderMode) {\r\n                case 0:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n                    break;\r\n                case 1:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n                    break;\r\n                case 2:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n                    break;\r\n                case 3:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n                    break;\r\n                case 4:\r\n                    defineDatas.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n                    break;\r\n            }\r\n            this._renderMode = value;\r\n            switch (value) {\r\n                case 0:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);\r\n                    break;\r\n                case 1:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);\r\n                    break;\r\n                case 2:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);\r\n                    break;\r\n                case 3:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);\r\n                    break;\r\n                case 4:\r\n                    defineDatas.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"ShurikenParticleRender: unknown renderMode Value.\");\r\n            }\r\n            var parSys: ShurikenParticleSystem = this._particleSystem;\r\n            (parSys) && (parSys._initBufferDatas());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The Mesh used in mesh render mode. Effective when renderMode is 4.\r\n     * @zh 网格渲染模式所使用的Mesh。renderMode为4时生效。\r\n     */\r\n    get mesh(): Mesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh(value: Mesh) {\r\n        if (this._mesh !== value) {\r\n            (this._mesh) && (this._mesh._removeReference());\r\n            this._mesh = value;\r\n            (value) && (value._addReference());\r\n            this._particleSystem._initBufferDatas();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates a new instance of ShurikenParticleRender class.\r\n     * @zh 创建ShurikenParticleRender类的新实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.renderMode = 0;\r\n        this._baseRenderNode.renderNodeType = BaseRenderType.ParticleRender\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _getcommonUniformMap(): Array<string> {\r\n        return [\"Sprite3D\", \"ShurikenSprite3D\"];\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        if (!LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance)) {\r\n            this._particleSystem = new ShurikenParticleSystem(this);\r\n        } else\r\n            this._particleSystem = new ShurikenParticleInstanceSystem(this);\r\n\r\n        var elements: RenderElement[] = this._renderElements;\r\n        var element: RenderElement = elements[0] = new RenderElement();\r\n        element.setTransform((this.owner as Sprite3D)._transform);\r\n        element.render = this;\r\n        element.setGeometry(this._particleSystem);\r\n        element.material = ShurikenParticleMaterial.defaultMaterial;\r\n\r\n        this._setRenderElements();\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n\r\n        Stat.particleRenderNode++;\r\n        (this._particleSystem.playOnAwake && LayaEnv.isPlaying) && (this._particleSystem.play());\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        Stat.particleRenderNode--;\r\n        (this._particleSystem.isAlive) && (this._particleSystem.simulate(0, true));\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _calculateBoundingBox(): void {\r\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\r\n        var bounds: Bounds;\r\n        if (particleSystem._useCustomBounds) {\r\n            bounds = particleSystem.customBounds;\r\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n        }\r\n        else if (particleSystem._simulationSupported()) {\r\n            // todo need update Bounds\r\n            particleSystem._generateBounds();\r\n            bounds = particleSystem._bounds;\r\n            bounds._tranform((this.owner as Sprite3D).transform.worldMatrix, this._bounds);\r\n            // 在世界坐标下考虑重力影响\r\n            if (particleSystem.gravityModifier != 0) {\r\n                var max: Vector3 = this._bounds.getMax();\r\n                var min: Vector3 = this._bounds.getMin();\r\n                var gravityOffset: Vector2 = particleSystem._gravityOffset;\r\n                max.y -= gravityOffset.x;\r\n                min.y -= gravityOffset.y;\r\n                this._bounds.setMax(max);\r\n                this._bounds.setMin(min);\r\n            }\r\n        }\r\n        else {\r\n            var min: Vector3 = this._bounds.getMin();\r\n            min.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n            this._bounds.setMin(min);\r\n            var max: Vector3 = this._bounds.getMax();\r\n            max.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            this._bounds.setMax(max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (!Stat.enableParticle)\r\n            return false;\r\n        if (boundFrustum) {\r\n            if (boundFrustum.intersects(this.bounds)) {\r\n                if (this._particleSystem.isAlive)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _renderUpdate(context: IRenderContext3D): void {\r\n        var particleSystem: ShurikenParticleSystem = this._particleSystem;\r\n        var sv: ShaderData = this._baseRenderNode.shaderData;\r\n        var transform: Transform3D = (this.owner as Sprite3D).transform;\r\n        switch (particleSystem.simulationSpace) {\r\n            case 0: //World\r\n                break;\r\n            case 1: //Local\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION, transform.position);\r\n                sv.setShaderData(ShuriKenParticle3DShaderDeclaration.WORLDROTATION, ShaderDataType.Vector4, transform.rotation);\r\n                break;\r\n            default:\r\n                throw new Error(\"ShurikenParticleMaterial: SimulationSpace value is invalid.\");\r\n        }\r\n\r\n        if (particleSystem.shape && particleSystem.shape.enable) {\r\n            sv.setBool(ShuriKenParticle3DShaderDeclaration.SHAPE, true)\r\n        } else {\r\n            sv.setBool(ShuriKenParticle3DShaderDeclaration.SHAPE, false)\r\n        }\r\n\r\n        switch (particleSystem.scaleMode) {\r\n            case 0:\r\n                var scale: Vector3 = transform.getWorldLossyScale();\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, scale);\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, scale);\r\n                break;\r\n            case 1:\r\n                var localScale: Vector3 = transform.localScale;\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, localScale);\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, localScale);\r\n                break;\r\n            case 2:\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE, transform.getWorldLossyScale());\r\n                sv.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE, Vector3.ONE);\r\n                break;\r\n        }\r\n\r\n        switch (particleSystem.dragType) {\r\n            case 0:\r\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMin);\r\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\r\n                break;\r\n            case 2:\r\n                this._dragConstant.setValue(particleSystem.dragSpeedConstantMin, particleSystem.dragSpeedConstantMax);\r\n                sv.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG, this._dragConstant);\r\n                break;\r\n            default:\r\n                this._dragConstant.setValue(0, 0);\r\n                break;\r\n        }\r\n\r\n        Vector3.scale(ShurikenParticleRenderer.gravity, particleSystem.gravityModifier, this._finalGravity);\r\n        sv.setVector3(ShuriKenParticle3DShaderDeclaration.GRAVITY, this._finalGravity);\r\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE, particleSystem.simulationSpace);\r\n        sv.setBool(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION, particleSystem.threeDStartRotation);\r\n        sv.setInt(ShuriKenParticle3DShaderDeclaration.SCALINGMODE, particleSystem.scaleMode);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale);\r\n        sv.setNumber(ShuriKenParticle3DShaderDeclaration.CURRENTTIME, particleSystem._currentTime);\r\n    }\r\n\r\n    /**\r\n     * @perfTag PerformanceDefine.T_ShurikenUpdate\r\n     * @en Update the render state.\r\n     * @param context The render context.\r\n     * @zh 更新渲染状态。\r\n     * @param context 渲染上下文。\r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        this._renderElements.forEach(element => {\r\n            element._renderElementOBJ.isRender = element._geometry._prepareRender(context);\r\n            element._geometry._prepareRender(context);\r\n            element._geometry._updateRenderParams(context);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @en The bounding box. Read-only, not allowed to modify its value.\r\n     * @zh 包围盒。只读，不允许修改其值。\r\n     */\r\n    get bounds(): Bounds {\r\n        if (this.boundsChange) {\r\n            this._calculateBoundingBox();\r\n            this.boundsChange = false;\r\n        }\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        let parRender = dest as ShurikenParticleRenderer;\r\n        this._particleSystem.cloneTo(parRender._particleSystem);\r\n        parRender.sharedMaterial = this.sharedMaterial;\r\n        parRender.renderMode = this.renderMode;\r\n        parRender.mesh = this.mesh;\r\n        parRender.stretchedBillboardCameraSpeedScale = this.stretchedBillboardCameraSpeedScale;\r\n        parRender.stretchedBillboardSpeedScale = this.stretchedBillboardSpeedScale;\r\n        parRender.stretchedBillboardLengthScale = this.stretchedBillboardLengthScale;\r\n        parRender.sortingFudge = this.sortingFudge;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        (this._mesh) && (this._mesh._removeReference(), this._mesh = null);\r\n        this._particleSystem.destroy();\r\n        this._particleSystem = null;\r\n        super._onDestroy();\r\n    }\r\n\r\n    protected _statAdd() {\r\n        Stat.renderNode++;\r\n        Stat.particleRenderNode++;\r\n    }\r\n\r\n    protected _statRemove() {\r\n        Stat.renderNode--;\r\n        Stat.particleRenderNode--;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"../../../display/Node\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Texture } from \"../../../resource/Texture\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Burst } from \"./module/Burst\";\r\nimport { ColorOverLifetime } from \"./module/ColorOverLifetime\";\r\nimport { Emission } from \"./module/Emission\";\r\nimport { FrameOverTime } from \"./module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./module/GradientColor\";\r\nimport { GradientDataInt } from \"./module/GradientDataInt\";\r\nimport { GradientDataNumber } from \"./module/GradientDataNumber\";\r\nimport { GradientSize } from \"./module/GradientSize\";\r\nimport { GradientVelocity } from \"./module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./module/RotationOverLifetime\";\r\nimport { BaseShape } from \"./module/shape/BaseShape\";\r\nimport { BoxShape } from \"./module/shape/BoxShape\";\r\nimport { CircleShape } from \"./module/shape/CircleShape\";\r\nimport { ConeShape } from \"./module/shape/ConeShape\";\r\nimport { HemisphereShape } from \"./module/shape/HemisphereShape\";\r\nimport { SphereShape } from \"./module/shape/SphereShape\";\r\nimport { SizeOverLifetime } from \"./module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./module/VelocityOverLifetime\";\r\nimport { ShurikenParticleMaterial } from \"./ShurikenParticleMaterial\";\r\nimport { ShurikenParticleRenderer } from \"./ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./ShurikenParticleSystem\";\r\n\r\n/**\r\n * @en ShuriKenParticle3D is a class of 3D particle system.\r\n * @zh ShuriKenParticle3D 是3D粒子系统的类。\r\n */\r\nexport class ShuriKenParticle3D extends RenderableSprite3D {\r\n\r\n\t/** @internal */\r\n\tprivate _particleSystem: ShurikenParticleSystem;\r\n\r\n\t/**\r\n     * @en The particle system.\r\n     * @zh 粒子系统。\r\n\t */\r\n\tget particleSystem(): ShurikenParticleSystem {\r\n\t\treturn this._particleSystem;\r\n\t}\r\n\r\n\t/**\r\n     * @en The particle renderer.\r\n     * @zh 粒子渲染器。\r\n\t */\r\n\tget particleRenderer(): ShurikenParticleRenderer {\r\n\t\treturn <ShurikenParticleRenderer>this._render;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates an instance of the ShuriKenParticle3D class.\r\n\t * @zh 创建Particle3D类的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(null);\r\n\t\tthis._render = this.addComponent(ShurikenParticleRenderer) as ShurikenParticleRenderer;\r\n\t\tthis._particleSystem = (this._render as ShurikenParticleRenderer)._particleSystem;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_parseModule(module: any, moduleData: any): void {\r\n\t\tfor (var t in moduleData) {\r\n\t\t\tswitch (t) {\r\n\t\t\t\tcase \"bases\":\r\n\t\t\t\t\tvar bases = moduleData.bases;\r\n\t\t\t\t\tfor (var k in bases)\r\n\t\t\t\t\t\tmodule[k] = bases[k];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector2s\":\r\n\t\t\t\t\tvar vector2s = moduleData.vector2s;\r\n\t\t\t\t\tfor (var k in vector2s) {\r\n\t\t\t\t\t\tvar vec2: Vector2 = module[k];\r\n\t\t\t\t\t\tvar vec2Data: number[] = vector2s[k];\r\n\t\t\t\t\t\tvec2.setValue(vec2Data[0], vec2Data[1]);\r\n\t\t\t\t\t\tmodule[k] = vec2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector3s\":\r\n\t\t\t\t\tvar vector3s = moduleData.vector3s;\r\n\t\t\t\t\tfor (var k in vector3s) {\r\n\t\t\t\t\t\tvar vec3: Vector3 = module[k];\r\n\t\t\t\t\t\tvar vec3Data: number[] = vector3s[k];\r\n\t\t\t\t\t\tvec3.setValue(vec3Data[0], vec3Data[1], vec3Data[2]);\r\n\t\t\t\t\t\tmodule[k] = vec3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"vector4s\":\r\n\t\t\t\t\tvar vector4s = moduleData.vector4s;\r\n\t\t\t\t\tfor (var k in vector4s) {\r\n\t\t\t\t\t\tvar vec4: Vector4 = module[k];\r\n\t\t\t\t\t\tvar vec4Data: number[] = vector4s[k];\r\n\t\t\t\t\t\tvec4.setValue(vec4Data[0], vec4Data[1], vec4Data[2], vec4Data[3]);\r\n\t\t\t\t\t\tmodule[k] = vec4;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"gradientDataNumbers\":\r\n\t\t\t\t\tvar gradientDataNumbers: object = moduleData.gradientDataNumbers;\r\n\t\t\t\t\tfor (var k in gradientDataNumbers) {\r\n\t\t\t\t\t\tvar gradientNumber: GradientDataNumber = module[k];\r\n\t\t\t\t\t\tvar gradientNumberData: any[] = moduleData[k];\r\n\t\t\t\t\t\tfor (var i: number = 0, n: number = gradientNumberData.length; i < n; i++) {\r\n\t\t\t\t\t\t\tvar valueData: any = gradientNumberData[i];\r\n\t\t\t\t\t\t\tgradientNumber.add(valueData.key, valueData.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodule[k] = gradientNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"resources\":\r\n\t\t\t\t\tvar resources: any = moduleData.resources;\r\n\t\t\t\t\tfor (var k in resources) {\r\n\t\t\t\t\t\tlet res = Loader.getRes(resources[k]);\r\n\t\t\t\t\t\tif (res && (res instanceof Texture)) {\r\n\t\t\t\t\t\t\tres = res.bitmap;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodule[k] = res;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bursts\":\r\n\t\t\t\t\tvar burstsData: any[] = moduleData.bursts;\r\n\t\t\t\t\tfor (var i: number = 0, n: number = burstsData.length; i < n; i++) {\r\n\t\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\t\tmodule.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"randomSeed\":\r\n\t\t\t\t\tmodule.randomSeed[0] = moduleData.randomSeed;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"shapeType\"://TODO:remove in the fulther\r\n\t\t\t\tcase \"type\":\r\n\t\t\t\tcase \"color\":\r\n\t\t\t\tcase \"size\":\r\n\t\t\t\tcase \"frame\":\r\n\t\t\t\tcase \"startFrame\":\r\n\t\t\t\tcase \"angularVelocity\":\r\n\t\t\t\tcase \"velocity\":\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow \"ShurikenParticle3D:unknown type.\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tif (data.main) {\r\n\t\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\t\tthis._parseModule(particleRender, data.renderer);//Renderer\r\n\t\t\tthis._parseModule(particleSystem, data.main);//particleSystem\r\n\t\t\tthis._parseModule(particleSystem.emission, data.emission);//Emission\r\n\r\n\t\t\t//Shape\r\n\t\t\tvar shapeData: any = data.shape;\r\n\t\t\tif (shapeData) {\r\n\t\t\t\tvar shape: BaseShape;\r\n\t\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tshape = new SphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tshape = new HemisphereShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tshape = new ConeShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tshape = new BoxShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\tshape = new CircleShape();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow \"ShuriKenParticle3D:unknown shape type.\";\r\n\t\t\t\t}\r\n\t\t\t\tthis._parseModule(shape, shapeData);\r\n\t\t\t\tparticleSystem.shape = shape;\r\n\t\t\t}\r\n\r\n\t\t\t//VelocityOverLifetime\r\n\t\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\t\tif (velocityOverLifetimeData) {\r\n\t\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\t\tvar velocity: GradientVelocity;\r\n\t\t\t\tswitch (velocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByConstant(constantData ? new Vector3(constantData[0], constantData[1], constantData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(constantMinData ? new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]) : new Vector3(0, 0, 0), constantMaxData ? new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\t\tthis._parseModule(velocityOverLifetime, velocityOverLifetimeData);\r\n\t\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//ColorOverLifetime\r\n\t\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\r\n\t\t\tif (colorOverLifetimeData) {\r\n\t\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\t\tlet maxKeyCount = colorData.maxKeyCount;\r\n\t\t\t\tvar color: GradientColor;\r\n\t\t\t\tswitch (colorData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\t\tcolor = GradientColor.createByConstant(constColorData ? new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient, maxKeyCount));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(minConstColorData ? new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]) : new Vector4(0, 0, 0, 0), minConstColorData ? new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]) : new Vector4(0, 0, 0, 0));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin, maxKeyCount), this._initParticleColor(colorData.gradientMax, maxKeyCount));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\t\tthis._parseModule(colorOverLifetime, colorOverLifetimeData);\r\n\t\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//SizeOverLifetime\r\n\t\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\t\tif (sizeOverLifetimeData) {\r\n\t\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\t\tvar size: GradientSize;\r\n\t\t\t\tswitch (sizeData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(constantMinSeparateData ? new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]) : new Vector3(0, 0, 0), constantMaxSeparateData ? new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]) : new Vector3(0, 0, 0));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin || 0, sizeData.constantMax || 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\t\tthis._parseModule(sizeOverLifetime, sizeOverLifetimeData);\r\n\t\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//RotationOverLifetime\r\n\t\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\t\tif (rotationOverLifetimeData) {\r\n\t\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(conSep ? new Vector3(conSep[0], conSep[1], conSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(minSep ? new Vector3(minSep[0], minSep[1], minSep[2]) : new Vector3(0, 0, 0), maxSep ? new Vector3(maxSep[0], maxSep[1], maxSep[2]) : new Vector3(0, 0, Math.PI / 4));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin || 0, angularVelocityData.constantMax || Math.PI / 4);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\t\tthis._parseModule(rotationOverLifetime, rotationOverLifetimeData);\r\n\t\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t\t}\r\n\r\n\t\t\t//TextureSheetAnimation\r\n\t\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\t\tif (textureSheetAnimationData) {\r\n\t\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\t\tswitch (frameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\t\tvar startFrame: StartFrame;\r\n\t\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\t\tthis._parseModule(textureSheetAnimation, textureSheetAnimationData);\r\n\t\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {//legacy\r\n\t\t\tthis._parseOld(data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Destroy this object.\r\n\t * @param\tdestroyChild Whether to destroy the child node. If true, the child node will be destroyed, otherwise it will not be destroyed.\r\n\t * @zh 销毁此对象。\r\n\t * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n\t */\r\n\tdestroy(destroyChild: boolean = true): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy(destroyChild);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _parseOld(data: any): void {\r\n\t\tconst anglelToRad: number = Math.PI / 180.0;\r\n\t\tvar i: number, n: number;\r\n\r\n\t\t//Render\r\n\t\tvar particleRender: ShurikenParticleRenderer = this.particleRenderer;\r\n\t\tvar material: ShurikenParticleMaterial;\r\n\r\n\t\tvar materialData: any = data.material;\r\n\t\t(materialData) && (material = Loader.getRes(materialData.path));\r\n\r\n\t\tparticleRender.sharedMaterial = material;\r\n\t\tvar meshPath: string = data.meshPath;\r\n\t\t(meshPath) && (particleRender.mesh = Loader.getRes(meshPath));\r\n\r\n\t\tparticleRender.renderMode = data.renderMode;\r\n\t\tparticleRender.stretchedBillboardCameraSpeedScale = data.stretchedBillboardCameraSpeedScale;\r\n\t\tparticleRender.stretchedBillboardSpeedScale = data.stretchedBillboardSpeedScale;\r\n\t\tparticleRender.stretchedBillboardLengthScale = data.stretchedBillboardLengthScale;\r\n\t\tparticleRender.sortingFudge = data.sortingFudge ? data.sortingFudge : 0.0;\r\n\r\n\t\t//particleSystem\r\n\t\tvar particleSystem: ShurikenParticleSystem = this.particleSystem;\r\n\t\tparticleSystem.isPerformanceMode = data.isPerformanceMode;\r\n\r\n\t\tparticleSystem.duration = data.duration;\r\n\t\tparticleSystem.looping = data.looping;\r\n\t\tparticleSystem.prewarm = data.prewarm;\r\n\r\n\t\tparticleSystem.startDelayType = data.startDelayType;\r\n\t\tparticleSystem.startDelay = data.startDelay;\r\n\t\tparticleSystem.startDelayMin = data.startDelayMin;\r\n\t\tparticleSystem.startDelayMax = data.startDelayMax;\r\n\r\n\t\tparticleSystem.startLifetimeType = data.startLifetimeType;\r\n\t\tparticleSystem.startLifetimeConstant = data.startLifetimeConstant;\r\n\t\tparticleSystem.startLifeTimeGradient = ShuriKenParticle3D._initStartLife(data.startLifetimeGradient);\r\n\t\tparticleSystem.startLifetimeConstantMin = data.startLifetimeConstantMin;\r\n\t\tparticleSystem.startLifetimeConstantMax = data.startLifetimeConstantMax;\r\n\t\tparticleSystem.startLifeTimeGradientMin = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMin);\r\n\t\tparticleSystem.startLifeTimeGradientMax = ShuriKenParticle3D._initStartLife(data.startLifetimeGradientMax);\r\n\r\n\t\tparticleSystem.startSpeedType = data.startSpeedType;\r\n\t\tparticleSystem.startSpeedConstant = data.startSpeedConstant;\r\n\t\tparticleSystem.startSpeedConstantMin = data.startSpeedConstantMin;\r\n\t\tparticleSystem.startSpeedConstantMax = data.startSpeedConstantMax;\r\n\r\n\t\t//parse Drag TODO:\r\n\r\n\t\tparticleSystem.threeDStartSize = data.threeDStartSize;\r\n\t\tparticleSystem.startSizeType = data.startSizeType;\r\n\t\tparticleSystem.startSizeConstant = data.startSizeConstant;\r\n\t\tvar startSizeConstantSeparateArray: any[] = data.startSizeConstantSeparate;\r\n\t\tvar startSizeConstantSeparateElement: Vector3 = particleSystem.startSizeConstantSeparate;\r\n\t\tstartSizeConstantSeparateElement.x = startSizeConstantSeparateArray[0];\r\n\t\tstartSizeConstantSeparateElement.y = startSizeConstantSeparateArray[1];\r\n\t\tstartSizeConstantSeparateElement.z = startSizeConstantSeparateArray[2];\r\n\t\tparticleSystem.startSizeConstantMin = data.startSizeConstantMin;\r\n\t\tparticleSystem.startSizeConstantMax = data.startSizeConstantMax;\r\n\t\tvar startSizeConstantMinSeparateArray: any[] = data.startSizeConstantMinSeparate;\r\n\t\tvar startSizeConstantMinSeparateElement: Vector3 = particleSystem.startSizeConstantMinSeparate;\r\n\t\tstartSizeConstantMinSeparateElement.x = startSizeConstantMinSeparateArray[0];\r\n\t\tstartSizeConstantMinSeparateElement.y = startSizeConstantMinSeparateArray[1];\r\n\t\tstartSizeConstantMinSeparateElement.z = startSizeConstantMinSeparateArray[2];\r\n\t\tvar startSizeConstantMaxSeparateArray: any[] = data.startSizeConstantMaxSeparate;\r\n\t\tvar startSizeConstantMaxSeparateElement: Vector3 = particleSystem.startSizeConstantMaxSeparate;\r\n\t\tstartSizeConstantMaxSeparateElement.x = startSizeConstantMaxSeparateArray[0];\r\n\t\tstartSizeConstantMaxSeparateElement.y = startSizeConstantMaxSeparateArray[1];\r\n\t\tstartSizeConstantMaxSeparateElement.z = startSizeConstantMaxSeparateArray[2];\r\n\r\n\t\tparticleSystem.threeDStartRotation = data.threeDStartRotation;\r\n\t\tparticleSystem.startRotationType = data.startRotationType;\r\n\t\tparticleSystem.startRotationConstant = data.startRotationConstant * anglelToRad;\r\n\t\tvar startRotationConstantSeparateArray: any[] = data.startRotationConstantSeparate;\r\n\t\tvar startRotationConstantSeparateElement: Vector3 = particleSystem.startRotationConstantSeparate;\r\n\t\tstartRotationConstantSeparateElement.x = startRotationConstantSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.y = startRotationConstantSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantSeparateElement.z = startRotationConstantSeparateArray[2] * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMin = data.startRotationConstantMin * anglelToRad;\r\n\t\tparticleSystem.startRotationConstantMax = data.startRotationConstantMax * anglelToRad;\r\n\t\tvar startRotationConstantMinSeparateArray: any[] = data.startRotationConstantMinSeparate;\r\n\t\tvar startRotationConstantMinSeparateElement: Vector3 = particleSystem.startRotationConstantMinSeparate;\r\n\t\tstartRotationConstantMinSeparateElement.x = startRotationConstantMinSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.y = startRotationConstantMinSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMinSeparateElement.z = startRotationConstantMinSeparateArray[2] * anglelToRad;\r\n\t\tvar startRotationConstantMaxSeparateArray: any[] = data.startRotationConstantMaxSeparate;\r\n\t\tvar startRotationConstantMaxSeparateElement: Vector3 = particleSystem.startRotationConstantMaxSeparate;\r\n\t\tstartRotationConstantMaxSeparateElement.x = startRotationConstantMaxSeparateArray[0] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.y = startRotationConstantMaxSeparateArray[1] * anglelToRad;\r\n\t\tstartRotationConstantMaxSeparateElement.z = startRotationConstantMaxSeparateArray[2] * anglelToRad;\r\n\r\n\t\tparticleSystem.randomizeRotationDirection = data.randomizeRotationDirection;\r\n\r\n\t\tparticleSystem.startColorType = data.startColorType;\r\n\t\tvar startColorConstantArray: any[] = data.startColorConstant;\r\n\t\tvar startColorConstantElement: Vector4 = particleSystem.startColorConstant;\r\n\t\tstartColorConstantElement.x = startColorConstantArray[0];\r\n\t\tstartColorConstantElement.y = startColorConstantArray[1];\r\n\t\tstartColorConstantElement.z = startColorConstantArray[2];\r\n\t\tstartColorConstantElement.w = startColorConstantArray[3];\r\n\t\tvar startColorConstantMinArray: any[] = data.startColorConstantMin;\r\n\t\tvar startColorConstantMinElement: Vector4 = particleSystem.startColorConstantMin;\r\n\t\tstartColorConstantMinElement.x = startColorConstantMinArray[0];\r\n\t\tstartColorConstantMinElement.y = startColorConstantMinArray[1];\r\n\t\tstartColorConstantMinElement.z = startColorConstantMinArray[2];\r\n\t\tstartColorConstantMinElement.w = startColorConstantMinArray[3];\r\n\t\tvar startColorConstantMaxArray: any[] = data.startColorConstantMax;\r\n\t\tvar startColorConstantMaxElement: Vector4 = particleSystem.startColorConstantMax;\r\n\t\tstartColorConstantMaxElement.x = startColorConstantMaxArray[0];\r\n\t\tstartColorConstantMaxElement.y = startColorConstantMaxArray[1];\r\n\t\tstartColorConstantMaxElement.z = startColorConstantMaxArray[2];\r\n\t\tstartColorConstantMaxElement.w = startColorConstantMaxArray[3];\r\n\r\n\t\tparticleSystem.gravityModifier = data.gravityModifier;\r\n\r\n\t\tparticleSystem.simulationSpace = data.simulationSpace;\r\n\t\t(data.simulationSpeed !== undefined) && (particleSystem.simulationSpeed = data.simulationSpeed);\r\n\r\n\t\tparticleSystem.scaleMode = data.scaleMode;\r\n\r\n\t\tparticleSystem.playOnAwake = data.playOnAwake;\r\n\t\tparticleSystem.maxParticles = data.maxParticles;\r\n\r\n\t\tvar autoRandomSeed: any = data.autoRandomSeed;\r\n\t\t(autoRandomSeed != null) && (particleSystem.autoRandomSeed = autoRandomSeed);\r\n\t\tvar randomSeed: any = data.randomSeed;\r\n\t\t(randomSeed != null) && (particleSystem.randomSeed[0] = randomSeed);\r\n\r\n\t\t//Emission\r\n\t\tvar emissionData: any = data.emission;\r\n\t\tvar emission: Emission = particleSystem.emission;\r\n\t\tif (emissionData) {\r\n\t\t\temission.emissionRate = emissionData.emissionRate;\r\n\t\t\tvar burstsData: any[] = emissionData.bursts;\r\n\t\t\tif (burstsData)\r\n\t\t\t\tfor (i = 0, n = burstsData.length; i < n; i++) {\r\n\t\t\t\t\tvar brust: any = burstsData[i];\r\n\t\t\t\t\temission.addBurst(new Burst(brust.time, brust.min, brust.max));\r\n\t\t\t\t}\r\n\t\t\temission.enable = emissionData.enable;\r\n\t\t} else {\r\n\t\t\temission.enable = false;\r\n\t\t}\r\n\r\n\t\t//Shape\r\n\t\tvar shapeData: any = data.shape;\r\n\t\tif (shapeData) {\r\n\t\t\tvar shape: BaseShape;\r\n\t\t\tswitch (shapeData.shapeType) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar sphereShape: SphereShape;\r\n\t\t\t\t\tshape = sphereShape = new SphereShape();\r\n\t\t\t\t\tsphereShape.radius = shapeData.sphereRadius;\r\n\t\t\t\t\tsphereShape.emitFromShell = shapeData.sphereEmitFromShell;\r\n\t\t\t\t\tsphereShape.randomDirection = shapeData.sphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvar hemiSphereShape: HemisphereShape;\r\n\t\t\t\t\tshape = hemiSphereShape = new HemisphereShape();\r\n\t\t\t\t\themiSphereShape.radius = shapeData.hemiSphereRadius;\r\n\t\t\t\t\themiSphereShape.emitFromShell = shapeData.hemiSphereEmitFromShell;\r\n\t\t\t\t\themiSphereShape.randomDirection = shapeData.hemiSphereRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar coneShape: ConeShape;\r\n\t\t\t\t\tshape = coneShape = new ConeShape();\r\n\t\t\t\t\tconeShape.angle = shapeData.coneAngle * anglelToRad;\r\n\t\t\t\t\tconeShape.radius = shapeData.coneRadius;\r\n\t\t\t\t\tconeShape.length = shapeData.coneLength;\r\n\t\t\t\t\tconeShape.emitType = shapeData.coneEmitType;\r\n\t\t\t\t\tconeShape.randomDirection = shapeData.coneRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvar boxShape: BoxShape;\r\n\t\t\t\t\tshape = boxShape = new BoxShape();\r\n\t\t\t\t\tboxShape.x = shapeData.boxX;\r\n\t\t\t\t\tboxShape.y = shapeData.boxY;\r\n\t\t\t\t\tboxShape.z = shapeData.boxZ;\r\n\t\t\t\t\tboxShape.randomDirection = shapeData.boxRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tvar circleShape: CircleShape;\r\n\t\t\t\t\tshape = circleShape = new CircleShape();\r\n\t\t\t\t\tcircleShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\tcircleShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\tcircleShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\tcircleShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t/**\r\n\t\t\t\t * ------------------------临时调整，待日后完善-------------------------------------\r\n\t\t\t\t */\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tvar tempShape: CircleShape;\r\n\t\t\t\t\tshape = tempShape = new CircleShape();\r\n\t\t\t\t\ttempShape.radius = shapeData.circleRadius;\r\n\t\t\t\t\ttempShape.arc = shapeData.circleArc * anglelToRad;\r\n\t\t\t\t\ttempShape.emitFromEdge = shapeData.circleEmitFromEdge;\r\n\t\t\t\t\ttempShape.randomDirection = shapeData.circleRandomDirection;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tshape.enable = shapeData.enable;\r\n\t\t\tparticleSystem.shape = shape;\r\n\t\t}\r\n\r\n\t\t//VelocityOverLifetime\r\n\t\tvar velocityOverLifetimeData: any = data.velocityOverLifetime;\r\n\t\tif (velocityOverLifetimeData) {\r\n\t\t\tvar velocityData: any = velocityOverLifetimeData.velocity;\r\n\t\t\tvar velocity: GradientVelocity;\r\n\t\t\tswitch (velocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constantData: any[] = velocityData.constant;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByConstant(new Vector3(constantData[0], constantData[1], constantData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByGradient(this._initParticleVelocity(velocityData.gradientX), this._initParticleVelocity(velocityData.gradientY), this._initParticleVelocity(velocityData.gradientZ));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar constantMinData: any[] = velocityData.constantMin;\r\n\t\t\t\t\tvar constantMaxData: any[] = velocityData.constantMax;\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoConstant(new Vector3(constantMinData[0], constantMinData[1], constantMinData[2]), new Vector3(constantMaxData[0], constantMaxData[1], constantMaxData[2]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tvelocity = GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(velocityData.gradientXMin), this._initParticleVelocity(velocityData.gradientXMax), this._initParticleVelocity(velocityData.gradientYMin), this._initParticleVelocity(velocityData.gradientYMax), this._initParticleVelocity(velocityData.gradientZMin), this._initParticleVelocity(velocityData.gradientZMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar velocityOverLifetime: VelocityOverLifetime = new VelocityOverLifetime(velocity);\r\n\t\t\tvelocityOverLifetime.space = velocityOverLifetimeData.space;\r\n\t\t\tvelocityOverLifetime.enable = velocityOverLifetimeData.enable;\r\n\t\t\tparticleSystem.velocityOverLifetime = velocityOverLifetime;\r\n\t\t}\r\n\r\n\t\t//ColorOverLifetime\r\n\t\tvar colorOverLifetimeData: any = data.colorOverLifetime;\r\n\t\tif (colorOverLifetimeData) {\r\n\t\t\tvar colorData: any = colorOverLifetimeData.color;\r\n\t\t\tvar color: GradientColor;\r\n\t\t\tswitch (colorData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar constColorData: any[] = colorData.constant;\r\n\t\t\t\t\tcolor = GradientColor.createByConstant(new Vector4(constColorData[0], constColorData[1], constColorData[2], constColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tcolor = GradientColor.createByGradient(this._initParticleColor(colorData.gradient));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tvar minConstColorData: any[] = colorData.constantMin;\r\n\t\t\t\t\tvar maxConstColorData: any[] = colorData.constantMax;\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoConstant(new Vector4(minConstColorData[0], minConstColorData[1], minConstColorData[2], minConstColorData[3]), new Vector4(maxConstColorData[0], maxConstColorData[1], maxConstColorData[2], maxConstColorData[3]));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcolor = GradientColor.createByRandomTwoGradient(this._initParticleColor(colorData.gradientMin), this._initParticleColor(colorData.gradientMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar colorOverLifetime: ColorOverLifetime = new ColorOverLifetime(color);\r\n\t\t\tcolorOverLifetime.enable = colorOverLifetimeData.enable;\r\n\t\t\tparticleSystem.colorOverLifetime = colorOverLifetime;\r\n\t\t}\r\n\r\n\t\t//SizeOverLifetime\r\n\t\tvar sizeOverLifetimeData: any = data.sizeOverLifetime;\r\n\t\tif (sizeOverLifetimeData) {\r\n\t\t\tvar sizeData: any = sizeOverLifetimeData.size;\r\n\t\t\tvar size: GradientSize;\r\n\t\t\tswitch (sizeData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradientSeparate(this._initParticleSize(sizeData.gradientX), this._initParticleSize(sizeData.gradientY), this._initParticleSize(sizeData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByGradient(this._initParticleSize(sizeData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tvar constantMinSeparateData: any[] = sizeData.constantMinSeparate;\r\n\t\t\t\t\t\tvar constantMaxSeparateData: any[] = sizeData.constantMaxSeparate;\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstantSeparate(new Vector3(constantMinSeparateData[0], constantMinSeparateData[1], constantMinSeparateData[2]), new Vector3(constantMaxSeparateData[0], constantMaxSeparateData[1], constantMaxSeparateData[2]));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoConstant(sizeData.constantMin, sizeData.constantMax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (sizeData.separateAxes) {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(sizeData.gradientXMin), this._initParticleSize(sizeData.gradientYMin), this._initParticleSize(sizeData.gradientZMin), this._initParticleSize(sizeData.gradientXMax), this._initParticleSize(sizeData.gradientYMax), this._initParticleSize(sizeData.gradientZMax));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsize = GradientSize.createByRandomTwoGradient(this._initParticleSize(sizeData.gradientMin), this._initParticleSize(sizeData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar sizeOverLifetime: SizeOverLifetime = new SizeOverLifetime(size);\r\n\t\t\tsizeOverLifetime.enable = sizeOverLifetimeData.enable;\r\n\t\t\tparticleSystem.sizeOverLifetime = sizeOverLifetime;\r\n\t\t}\r\n\r\n\t\t//RotationOverLifetime\r\n\t\tvar rotationOverLifetimeData: any = data.rotationOverLifetime;\r\n\t\tif (rotationOverLifetimeData) {\r\n\t\t\tvar angularVelocityData: any = rotationOverLifetimeData.angularVelocity;\r\n\t\t\tvar angularVelocity: GradientAngularVelocity;\r\n\t\t\tswitch (angularVelocityData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar conSep: any[] = angularVelocityData.constantSeparate;\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstantSeparate(new Vector3(conSep[0] * anglelToRad, conSep[1] * anglelToRad, conSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByConstant(angularVelocityData.constant * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(angularVelocityData.gradientX), this._initParticleRotation(angularVelocityData.gradientY), this._initParticleRotation(angularVelocityData.gradientZ));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByGradient(this._initParticleRotation(angularVelocityData.gradient));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\tvar minSep: any[] = angularVelocityData.constantMinSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tvar maxSep: any[] = angularVelocityData.constantMaxSeparate;//TODO:Y是否要取负数\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstantSeparate(new Vector3(minSep[0] * anglelToRad, minSep[1] * anglelToRad, minSep[2] * anglelToRad), new Vector3(maxSep[0] * anglelToRad, maxSep[1] * anglelToRad, maxSep[2] * anglelToRad));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoConstant(angularVelocityData.constantMin * anglelToRad, angularVelocityData.constantMax * anglelToRad);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif (angularVelocityData.separateAxes) {\r\n\t\t\t\t\t\t//TODO:待补充\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tangularVelocity = GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(angularVelocityData.gradientMin), this._initParticleRotation(angularVelocityData.gradientMax));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar rotationOverLifetime: RotationOverLifetime = new RotationOverLifetime(angularVelocity);\r\n\t\t\trotationOverLifetime.enable = rotationOverLifetimeData.enable;\r\n\t\t\tparticleSystem.rotationOverLifetime = rotationOverLifetime;\r\n\t\t}\r\n\r\n\t\t//TextureSheetAnimation\r\n\t\tvar textureSheetAnimationData: any = data.textureSheetAnimation;\r\n\t\tif (textureSheetAnimationData) {\r\n\t\t\tvar frameData: any = textureSheetAnimationData.frame;\r\n\t\t\tvar frameOverTime: FrameOverTime;\r\n\t\t\tswitch (frameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByConstant(frameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByOverTime(this._initParticleFrame(frameData.overTime));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoConstant(frameData.constantMin, frameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tframeOverTime = FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(frameData.overTimeMin), this._initParticleFrame(frameData.overTimeMax));\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar startFrameData: any = textureSheetAnimationData.startFrame;\r\n\t\t\tvar startFrame: StartFrame;\r\n\t\t\tswitch (startFrameData.type) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tstartFrame = StartFrame.createByConstant(startFrameData.constant);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tstartFrame = StartFrame.createByRandomTwoConstant(startFrameData.constantMin, startFrameData.constantMax);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar textureSheetAnimation: TextureSheetAnimation = new TextureSheetAnimation(frameOverTime, startFrame);\r\n\t\t\ttextureSheetAnimation.enable = textureSheetAnimationData.enable;\r\n\t\t\tvar tilesData: any[] = textureSheetAnimationData.tiles;\r\n\t\t\ttextureSheetAnimation.tiles = new Vector2(tilesData[0], tilesData[1]);\r\n\t\t\ttextureSheetAnimation.type = textureSheetAnimationData.type;\r\n\t\t\ttextureSheetAnimation.randomRow = textureSheetAnimationData.randomRow;\r\n\t\t\tvar rowIndex: any = textureSheetAnimationData.rowIndex;\r\n\t\t\t(rowIndex !== undefined) && (textureSheetAnimation.rowIndex = rowIndex);\r\n\t\t\ttextureSheetAnimation.cycles = textureSheetAnimationData.cycles;\r\n\t\t\tparticleSystem.textureSheetAnimation = textureSheetAnimation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleColor(gradientColorData: any, maxkeyCount: number = 4): Gradient {\r\n\t\tvar gradientColor: Gradient = new Gradient();\r\n\t\tgradientColor.setMaxKeyCount(maxkeyCount, maxkeyCount);\r\n\t\tif (!gradientColorData) {\r\n\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar alphasData: any[] = gradientColorData.alphas;\r\n\t\t\tvar i: number, n: number;\r\n\t\t\tif (!alphasData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorAlpha(0, 1);\r\n\t\t\t\tgradientColor.addColorAlpha(1, 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = alphasData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:alpha data length is large than ${maxkeyCount}, will ignore the middle data.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar alphaData: any = alphasData[i];\r\n\t\t\t\t\tgradientColor.addColorAlpha(alphaData.key, alphaData.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar rgbsData: any[] = gradientColorData.rgbs;\r\n\t\t\tif (!rgbsData) {//兼容默认值\r\n\t\t\t\tgradientColor.addColorRGB(0, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t\tgradientColor.addColorRGB(1, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (i = 0, n = rgbsData.length; i < n; i++) {\r\n\t\t\t\t\tif (i == maxkeyCount - 1 && n > maxkeyCount) {\r\n\t\t\t\t\t\ti = n - 1;\r\n\t\t\t\t\t\tconsole.warn(`GradientDataColor warning:rgb data length is large than ${maxkeyCount}, will ignore the middle data.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar rgbData: any = rgbsData[i];\r\n\t\t\t\t\tvar rgbValue: any[] = rgbData.value;\r\n\t\t\t\t\tgradientColor.addColorRGB(rgbData.key, new Color(rgbValue[0], rgbValue[1], rgbValue[2], 1.0));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn gradientColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleFrame(overTimeFramesData: any): GradientDataInt {\r\n\t\tvar overTimeFrame: GradientDataInt = new GradientDataInt();\r\n\t\tif (overTimeFramesData) {\r\n\t\t\tvar framesData: any[] = overTimeFramesData.frames;\r\n\t\t\tfor (var i: number = 0, n: number = framesData.length; i < n; i++) {\r\n\t\t\t\tvar frameData: any = framesData[i];\r\n\t\t\t\toverTimeFrame.add(frameData.key, frameData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\toverTimeFrame.add(0, 0);\r\n\t\t\toverTimeFrame.add(1, 1);\r\n\t\t}\r\n\r\n\t\treturn overTimeFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate static _initStartLife(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar startLifetimesData: any[] = gradientData.startLifetimes;\r\n\t\tfor (var i: number = 0, n: number = startLifetimesData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = startLifetimesData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleVelocity(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar velocitysData: any[] = gradientData.velocitys;\r\n\t\tfor (var i: number = 0, n: number = velocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = velocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleSize(gradientSizeData: any): GradientDataNumber {\r\n\t\tvar gradientSize: GradientDataNumber = new GradientDataNumber();\r\n\t\tif (gradientSizeData) {\r\n\t\t\tvar sizesData: any[] = gradientSizeData.sizes;\r\n\t\t\tfor (var i: number = 0, n: number = sizesData.length; i < n; i++) {\r\n\t\t\t\tvar valueData: any = sizesData[i];\r\n\t\t\t\tgradientSize.add(valueData.key, valueData.value);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tgradientSize.add(0, 0);\r\n\t\t\tgradientSize.add(1, 1);\r\n\t\t}\r\n\t\treturn gradientSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * @internal\r\n\t */\r\n\tprivate _initParticleRotation(gradientData: any): GradientDataNumber {\r\n\t\tvar gradient: GradientDataNumber = new GradientDataNumber();\r\n\t\tvar angularVelocitysData: any[] = gradientData.angularVelocitys;\r\n\t\tfor (var i: number = 0, n: number = angularVelocitysData.length; i < n; i++) {\r\n\t\t\tvar valueData: any = angularVelocitysData[i];\r\n\t\t\tgradient.add(valueData.key, valueData.value / 180.0 * Math.PI);\r\n\t\t}\r\n\t\treturn gradient;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\n/**\r\n * @internal\r\n */\r\nexport class PixelLineVertex {\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tPixelLineVertex._vertexDeclaration = new VertexDeclaration(40,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexMesh.MESH_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector4, VertexMesh.MESH_COLOR0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Vector3, VertexMesh.MESH_NORMAL0)\r\n\t\t\t]);\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn PixelLineVertex._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ShaderDefine } from \"../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\n\r\n/**\r\n * @en Class for Skinned Mesh Sprite3D Shader Declarations\r\n * @zh 蒙皮网格3D精灵着色器声明类\r\n */\r\nexport class SkinnedMeshSprite3DShaderDeclaration {\r\n    /**\r\n     * @en Sprite-level shader macro definition for skinned animation.\r\n     * @zh 精灵级着色器宏定义，用于蒙皮动画。\r\n     */\r\n\tstatic SHADERDEFINE_BONE: ShaderDefine;\r\n    /**\r\n     * @en Sprite-level shader macro definition for simple bone animation.\r\n     * @zh 精灵级着色器宏定义，用于简单骨骼动画。\r\n     */\r\n\tstatic SHADERDEFINE_SIMPLEBONE:ShaderDefine;\r\n}","import { IRenderContext3D, IRenderElement3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { WebGLSkinRenderElement3D } from \"../../../RenderDriver/WebGLDriver/3DRenderPass/WebGLSkinRenderElement3D\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { RenderElement } from \"./RenderElement\"\r\n/**\r\n * @internal\r\n */\r\nexport class SkinRenderElement extends RenderElement{\r\n\t/**\r\n\t * 可提交底层的渲染节点\r\n\t */\r\n\t_renderElementOBJ:WebGLSkinRenderElement3D;\r\n\r\n    setSkinData(value:Float32Array[]){\r\n        this._renderElementOBJ.skinnedData = value;\r\n    }\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    protected _createRenderElementOBJ(){\r\n\t\tthis._renderElementOBJ = Laya3DRender.Render3DPassFactory.createSkinRenderElement() as WebGLSkinRenderElement3D;\r\n\t}\r\n\r\n    _render(context:IRenderContext3D): void {\r\n\t\t//this._renderElementOBJ._render(context);\r\n    }\r\n}","import { Event } from \"../../events/Event\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { MeshRenderer } from \"./MeshRenderer\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { SkinRenderElement } from \"./render/SkinRenderElement\";\r\nimport { Material } from \"../../resource/Material\";\r\nimport { BlinnPhongMaterial } from \"./material/BlinnPhongMaterial\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { BaseRenderType, IBaseRenderNode, ISkinRenderNode } from \"../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { RenderElement } from \"./render/RenderElement\";\r\n/**\r\n * @en The `SkinnedMeshRenderer` class is used for skinned mesh rendering.\r\n * @zh `SkinnedMeshRenderer` 类用于蒙皮网格渲染。\r\n */\r\nexport class SkinnedMeshRenderer extends MeshRenderer {\r\n\r\n    declare owner: Sprite3D;\r\n\r\n    /**@internal */\r\n    protected _cacheMesh: Mesh;\r\n\r\n    /**@internal */\r\n    protected __bones: Sprite3D[] = [];\r\n\r\n    /**@internal 不可删  IDE数据在这里*/\r\n    public get _bones(): Sprite3D[] {\r\n        return this.__bones;\r\n    }\r\n    /**@internal */\r\n    public set _bones(value: Sprite3D[]) {\r\n        this.__bones = value;\r\n        this._isISkinRenderNode() && this._ownerSkinRenderNode.setBones(value);\r\n    }\r\n\r\n    /**@internal */\r\n    _renderElements: RenderElement[];\r\n    /** @internal */\r\n    _skinnedData: any[];\r\n    /** @internal */\r\n    private _skinnedDataLoopMarks: Uint32Array;\r\n    /**@internal */\r\n    protected _localBounds: Bounds;\r\n    /**@internal */\r\n    protected _cacheRootBone: Sprite3D;\r\n\r\n    /**@internal */\r\n    protected _worldParams = new Vector4();\r\n\r\n    /**@internal */\r\n    _baseRenderNode: IBaseRenderNode;\r\n    //解决编译bug TODO\r\n    private _ownerSkinRenderNode: ISkinRenderNode;\r\n\r\n    /**\r\n     * @en Local bounds.\r\n     * @zh 局部边界。\r\n     */\r\n    get localBounds(): Bounds {\r\n        return this._localBounds;\r\n    }\r\n\r\n    set localBounds(value: Bounds) {\r\n        this._localBounds = value;\r\n        this.geometryBounds = this._localBounds;\r\n    }\r\n\r\n    /**\r\n     * @en Root node.\r\n     * @zh 根节点。\r\n     */\r\n    get rootBone(): Sprite3D {\r\n        return this._cacheRootBone;\r\n    }\r\n\r\n    set rootBone(value: Sprite3D) {\r\n        if (this._cacheRootBone != value) {\r\n            if (this._cacheRootBone)\r\n                this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n            else\r\n                (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n\r\n            if (value) {\r\n                value.transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n                this._baseRenderNode.transform = value.transform;\r\n            }\r\n            else {\r\n                (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);\r\n                this._baseRenderNode.transform = this.owner.transform;\r\n            }\r\n\r\n            this._cacheRootBone = value;\r\n\r\n\r\n            this._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE);\r\n\r\n            let count = this._renderElements.length;\r\n            for (var i: number = 0; i < count; i++) {\r\n                var renderElement = this._renderElements[i] as SkinRenderElement;\r\n                renderElement.setTransform(value.transform);\r\n            }\r\n            this._isISkinRenderNode() && this._ownerSkinRenderNode.setRootBoneTransfom(this._cacheRootBone);\r\n        }\r\n        this._baseRenderNode.transform = this.rootBone ? this.rootBone.transform : this.owner.transform;\r\n    }\r\n\r\n    /**\r\n     * @en The bones used for skinning.\r\n     * @zh 用于蒙皮的骨骼。\r\n     */\r\n    get bones(): Sprite3D[] {\r\n        return this._bones;\r\n    }\r\n\r\n    set bones(value: Sprite3D[]) {\r\n        this._bones = value;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SkinnedMeshRenderer.\r\n     * @zh 创建一个 SkinnedMeshRenderer 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.localBounds = new Bounds(Vector3.ZERO, Vector3.ZERO);\r\n        this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n        this._baseRenderNode.renderNodeType = BaseRenderType.SkinnedMeshRender;\r\n    }\r\n\r\n    /**\r\n     * override it\r\n     * @returns \r\n     */\r\n    protected _createBaseRenderNode(): IBaseRenderNode {\r\n        this._ownerSkinRenderNode = Laya3DRender.Render3DModuleDataFactory.createSkinRenderNode();\r\n        return this._ownerSkinRenderNode;\r\n    }\r\n\r\n    /**\r\n    * @inheritDoc\r\n    * @internal\r\n    * @override\r\n    */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (!Stat.enableSkin)\r\n            return false;\r\n        return super._needRender(boundFrustum, context);\r\n    }\r\n\r\n    /**\r\n     *@inheritDoc\r\n     *@override\r\n     *@internal\r\n     */\r\n    _createRenderElement(): RenderElement {\r\n        let renderelement = new SkinRenderElement();\r\n        return renderelement;\r\n    }\r\n\r\n    protected _isISkinRenderNode(): any {\r\n        return this._ownerSkinRenderNode.setCacheMesh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onSkinMeshChange(mesh: Mesh): void {\r\n        if (mesh && this._mesh != mesh) {\r\n            this._changeVertexDefine(mesh);\r\n            this._changeMorphData(mesh);\r\n            this._mesh = mesh;\r\n            this._isISkinRenderNode() && this._ownerSkinRenderNode.setCacheMesh(mesh);\r\n            var count: number = mesh.subMeshCount;\r\n            this._renderElements.length = count;\r\n            let materials = this.sharedMaterials;\r\n            materials.length = count;\r\n            for (var i: number = 0; i < count; i++) {\r\n                let renderElement: RenderElement = this._renderElements[i];\r\n                if (!renderElement) {\r\n                    renderElement = this._renderElements[i] = <SkinRenderElement>this._createRenderElement();\r\n                    if (this._cacheRootBone) {\r\n                        renderElement.setTransform(this._cacheRootBone.transform);\r\n                    } else {\r\n                        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n                    }\r\n                    renderElement.render = this;\r\n                }\r\n                materials[i] = materials[i] || BlinnPhongMaterial.defaultMaterial;\r\n                renderElement.setGeometry(mesh.getSubMesh(i));\r\n            }\r\n            this.sharedMaterials = materials;\r\n            this.boundsChange = true;\r\n        } else if (!mesh) {\r\n            this._renderElements.length = 0;\r\n            this._mesh = null;\r\n            this._changeVertexDefine(null);\r\n            this._changeMorphData(null);\r\n            this.boundsChange = false;\r\n        }\r\n        this._meshChange = true;\r\n    }\r\n    /**\r\n    *@inheritDoc\r\n    *@override\r\n    *@internal\r\n    */\r\n    _onMeshChange(value: Mesh): void {\r\n        this._onSkinMeshChange(value);\r\n        if (!value)\r\n            return;\r\n        this._cacheMesh = (<Mesh>value);\r\n\r\n        var subMeshCount: number = value.subMeshCount;\r\n        this._skinnedData = [];\r\n\r\n        for (var i: number = 0; i < subMeshCount; i++) {\r\n            var subBoneIndices: Uint16Array[] = ((<SubMesh>value.getSubMesh(i)))._boneIndicesList;\r\n            var subCount: number = subBoneIndices.length;\r\n            var subData: Float32Array[] = this._skinnedData[i] = [];\r\n            for (var j: number = 0; j < subCount; j++)\r\n                subData[j] = new Float32Array(subBoneIndices[j].length * 16);\r\n            (this._renderElements[i] as SkinRenderElement).setSkinData(subData);\r\n        }\r\n        this._isISkinRenderNode() && this._ownerSkinRenderNode.setSkinnedData(this._skinnedData);\r\n        this._setRenderElements();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param scene 场景类\r\n     */\r\n    _setBelongScene(scene: Scene3D): void {\r\n        super._setBelongScene(scene);\r\n        this._isISkinRenderNode() && this._ownerSkinRenderNode.setOwnerTransform(this.owner);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUnBelongScene() {\r\n        super._setUnBelongScene();\r\n    }\r\n\r\n    protected _statAdd() {\r\n        Stat.renderNode++;\r\n        Stat.skinRenderNode++;\r\n    }\r\n\r\n    protected _statRemove() {\r\n        Stat.renderNode--;\r\n        Stat.skinRenderNode--;\r\n    }\r\n\r\n\r\n    /**\r\n     * @perfTag PerformanceDefine.T_SkinBoneUpdate\r\n     * @en Updates the render state of the skinned mesh renderer.\r\n     * @param context The 3D render context.\r\n     * @zh 更新蒙皮网格渲染器的渲染状态。\r\n     * @param context 3D渲染上下文。\r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        super.renderUpdate(context);\r\n        this._isISkinRenderNode() && this._ownerSkinRenderNode.computeSkinnedData();\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: SkinnedMeshRenderer): void {\r\n        //get common parent\r\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\r\n            let nodeArray: Sprite3D[] = [];\r\n            let node = rootNode;\r\n            while (!!node) {\r\n                if (node instanceof Sprite3D)\r\n                    nodeArray.push(node);\r\n                node = node.parent as Sprite3D;\r\n            }\r\n            let checkNode: Sprite3D = rootCheckNode;\r\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\r\n                checkNode = checkNode.parent as Sprite3D;\r\n            }\r\n            return checkNode;\r\n        }\r\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\r\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\r\n            if (!rootparent)\r\n                return null;\r\n            let path: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\r\n            let pathcheck: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\r\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\r\n            if (!destParent)\r\n                return null;\r\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\r\n        }\r\n        //rootBone Clone\r\n        var rootBone: Sprite3D = this.rootBone;\r\n        if (rootBone) {\r\n            let node = cloneHierachFun(this.owner as Sprite3D, this.rootBone as Sprite3D, dest.owner as Sprite3D);\r\n            if (node)\r\n                dest.rootBone = node;\r\n            else\r\n                dest.rootBone = rootBone;\r\n        }\r\n        //BonesClone\r\n        var bones: Sprite3D[] = this.bones;\r\n        var destBone: Sprite3D[] = dest.bones;\r\n        let n = destBone.length = bones.length;\r\n        for (var i = 0; i < n; i++) {\r\n            let ceckNode = bones[i];\r\n            destBone[i] = cloneHierachFun(this.owner as Sprite3D, ceckNode, dest.owner as Sprite3D);\r\n        }\r\n        dest.bones = dest.bones;\r\n        //bounds\r\n        var lbb: Bounds = this.localBounds;\r\n        (lbb) && (lbb.cloneTo(dest.localBounds));\r\n        (dest.localBounds) && (dest.localBounds = dest.localBounds);\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n        if (this._cacheRootBone)\r\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        else\r\n            (this.owner && !this.owner._destroyed) && ((this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        super._onDestroy();\r\n    }\r\n}\r\n\r\n","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"../../resource/Material\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n/**\r\n * @en The `SkinnedMeshSprite3D` class is used for sprite with skinned mesh and bone nodes.\r\n * @zh `SkinnedMeshSprite3D` 类用于绑点骨骼节点精灵。\r\n */\r\nexport class SkinnedMeshSprite3D extends RenderableSprite3D {\r\n    /**@internal */\r\n    static _tempArray0: any[] = [];\r\n\r\n    /**\r\n     * @en Shader variable name for skinned animation.\r\n     * @zh 着色器变量名，用于蒙皮动画。\r\n     */\r\n    static BONES: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE = Shader3D.getDefineByName(\"BONE\");\r\n        SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE = Shader3D.getDefineByName(\"SIMPLEBONE\");\r\n        const commandUniform = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Custom\");\r\n        SkinnedMeshSprite3D.BONES = Shader3D.propertyNameToID(\"u_Bones\");\r\n        commandUniform.addShaderUniform(SkinnedMeshSprite3D.BONES, \"u_Bones\", ShaderDataType.Buffer);\r\n    }\r\n\r\n    /** @internal */\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * @en Mesh filter component.\r\n     * @zh 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return this._meshFilter;\r\n    }\r\n\r\n    /**\r\n     * @en Skinned mesh renderer component.\r\n     * @zh 网格渲染器。\r\n     */\r\n    get skinnedMeshRenderer(): SkinnedMeshRenderer {\r\n        return (<SkinnedMeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SkinnedMeshSprite3D.\r\n     * @param mesh The mesh to be used. The default material for the mesh will also be loaded.\r\n     * @param name The name of the sprite.\r\n     * @zh 创建一个 SkinnedMeshSprite3D 的实例。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(SkinnedMeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: SkinnedMeshRenderer = this.skinnedMeshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        var meshPath: string;\r\n        meshPath = data.meshPath;\r\n        if (meshPath) {\r\n            var mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\r\n        }\r\n\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            var sharedMaterials: Material[] = render.sharedMaterials;\r\n            var materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (var i: number = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n\r\n        var boundBox: any = data.boundBox;\r\n        var min: any[] = boundBox.min;\r\n        var max: any[] = boundBox.max;\r\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n        render.localBounds = render.localBounds;\r\n        if (spriteMap) {\r\n            var rootBoneData: number = data.rootBone;\r\n            render.rootBone = spriteMap[rootBoneData];\r\n            var bonesData: any[] = data.bones;\r\n            var n: number;\r\n            for (i = 0, n = bonesData.length; i < n; i++)\r\n                (render as SkinnedMeshRenderer).bones.push(spriteMap[bonesData[i]]);\r\n            \r\n            render.bones = render.bones;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Destroy the SkinnedMeshSprite3D instance.\r\n     * @param destroyChild Whether to destroy child nodes.\r\n     * @zh 销毁 SkinnedMeshSprite3D 实例。\r\n     * @param destroyChild 是否销毁子节点。\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._meshFilter.destroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material, MaterialRenderMode } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @en The `TrailMaterial` class is used to implement trail materials.\r\n * @zh `TrailMaterial` 类用于实现拖尾材质。\r\n */\r\nexport class TrailMaterial extends Material {\r\n\r\n\r\n\t/**\r\n\t * @en The default material, do not modify.\r\n\t * @zh 默认材质，禁止修改。\r\n\t */\r\n\tstatic defaultMaterial: TrailMaterial;\r\n\t/**@internal */\r\n\tstatic MAINTEXTURE: number;\r\n\t/**@internal */\r\n\tstatic TINTCOLOR: number;\r\n\t/**@internal */\r\n\tstatic TILINGOFFSET: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tTrailMaterial.MAINTEXTURE = Shader3D.propertyNameToID(\"u_MainTexture\");\r\n\t\tTrailMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_MainColor\");\r\n\t\tTrailMaterial.TILINGOFFSET = Shader3D.propertyNameToID(\"u_TilingOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en The color of the material.\r\n\t * @zh 材质的颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn (<Color>this._shaderValues.getColor(TrailMaterial.TINTCOLOR));\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis._shaderValues.setColor(TrailMaterial.TINTCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The texture of the material.\r\n\t * @zh 材质贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(TrailMaterial.MAINTEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\telse\r\n\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE);\r\n\t\tthis._shaderValues.setTexture(TrailMaterial.MAINTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The tiling and offset of the texture.\r\n\t * @zh 纹理的平铺和偏移。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(TrailMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis._shaderValues.setVector(TrailMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._shaderValues.getVector(TrailMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**@ignore */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Trail\");\r\n\t\tthis.materialRenderMode = MaterialRenderMode.RENDERMODE_ALPHABLENDED;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t * @override\r\n\t * @en Clones the material.\r\n\t * @returns A cloned instance of the material.\r\n\t * @zh 克隆材质。\r\n\t * @returns 材质的一个克隆实例。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: TrailMaterial = new TrailMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//----------------deprecated----------------\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_透明混合。\r\n\t */\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 0;\r\n\r\n\t/**\r\n\t* @deprecated\r\n\t* 渲染状态_加色法混合。\r\n\t*/\r\n\tstatic RENDERMODE_ADDTIVE: number = 1;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染模式。现在可以直接使用materialRenderMode\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase TrailMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ShurikenParticleMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { IVertex } from \"../../graphics/IVertex\"\r\n/**\r\n * @internal\r\n * @en The `VertexTrail` class is used to create the vertex structure for a trail.\r\n * @zh `VertexTrail` 类用于创建拖尾的顶点结构。\r\n */\r\nexport class VertexTrail implements IVertex {\r\n\t/**@internal */\r\n\tstatic TRAIL_POSITION0: number = 0;\r\n\t/**@internal */\r\n\tstatic TRAIL_OFFSETVECTOR: number = 1;\r\n\t/**@internal */\r\n\tstatic TRAIL_TIME0: number = 2;\r\n\t/**@internal */\r\n\tstatic TRAIL_TEXTURECOORDINATE0Y: number = 3;\r\n\t/**@internal */\r\n\tstatic TRAIL_TEXTURECOORDINATE0X: number = 4;\r\n\t/**@internal */\r\n\tstatic TRAIL_COLOR: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration1: VertexDeclaration;\r\n\t/**@internal */\r\n\tprivate static _vertexDeclaration2: VertexDeclaration;\r\n\r\n    /**\r\n\t * @internal\r\n     * @en The vertex declaration for the first set of vertex elements.\r\n     * @zh 第一组顶点元素的顶点声明。\r\n     */\r\n\tstatic get vertexDeclaration1(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n    /**\r\n\t * @internal\r\n     * @en The vertex declaration for the second set of vertex elements.\r\n     * @zh 第二组顶点元素的顶点声明。\r\n     */\r\n\tstatic get vertexDeclaration2(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration2;\r\n\t}\r\n\r\n    /**\r\n     * @en The vertex declaration for this vertex structure.\r\n     * @zh 此顶点结构的顶点声明。\r\n     */\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexTrail._vertexDeclaration1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexTrail._vertexDeclaration1 = new VertexDeclaration(32,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Vector3, VertexTrail.TRAIL_POSITION0),\r\n\t\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexTrail.TRAIL_OFFSETVECTOR),\r\n\t\t\tnew VertexElement(24, VertexElementFormat.Single, VertexTrail.TRAIL_TIME0),\r\n\t\t\tnew VertexElement(28, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0Y)]);\r\n\t\tVertexTrail._vertexDeclaration2 = new VertexDeclaration(20,\r\n\t\t\t[new VertexElement(0, VertexElementFormat.Single, VertexTrail.TRAIL_TEXTURECOORDINATE0X),\r\n\t\t\tnew VertexElement(4, VertexElementFormat.Color, VertexTrail.TRAIL_COLOR)]);\r\n\t}\r\n}\r\n\r\n","import { GeometryElement } from \"../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../core/render/RenderContext3D\";\r\nimport { SubMeshRenderElement } from \"../core/render/SubMeshRenderElement\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { VertexBuffer3D } from \"./VertexBuffer3D\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\n\r\n/**\r\n * 是否要删除\r\n * @internal\r\n */\r\nexport class SubMeshInstanceBatch extends GeometryElement {\r\n\t/** @internal */\r\n\tstatic instance: SubMeshInstanceBatch;\r\n\t/** @internal */\r\n\tstatic maxInstanceCount: number = 1024;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tSubMeshInstanceBatch.instance = new SubMeshInstanceBatch();\r\n\t}\r\n\r\n\t/** @internal */\r\n\tinstanceWorldMatrixData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 16);\r\n\t/** @internal */\r\n\tinstanceWorldMatrixBuffer: VertexBuffer3D;\r\n\t/**SimpleAnimator */\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorData: Float32Array = new Float32Array(SubMeshInstanceBatch.maxInstanceCount * 4);\r\n\t/** @internal */\r\n\tinstanceSimpleAnimatorBuffer: VertexBuffer3D;\r\n\r\n\t/**\r\n\t * 创建一个 <code>InstanceSubMesh</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n\t\tthis.indexFormat = IndexFormat.UInt16;\r\n\t\tthis.instanceWorldMatrixBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(this.instanceWorldMatrixData.length * 4, BufferUsage.Dynamic, false);\r\n\t\tthis.instanceWorldMatrixBuffer.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n\t\tthis.instanceWorldMatrixBuffer.instanceBuffer = true;\r\n\t\t//SImpleAnimator\r\n\t\tthis.instanceSimpleAnimatorBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(this.instanceSimpleAnimatorData.length * 4, BufferUsage.Dynamic, false);\r\n\t\tthis.instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n\t\tthis.instanceSimpleAnimatorBuffer.instanceBuffer = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\t// var element: SubMeshRenderElement = (<SubMeshRenderElement>state.renderElement);\r\n\t\t// var subMesh: SubMesh = element.instanceSubMesh;\r\n\t\t// var count: number = element.instanceBatchElementList.length;\r\n\t\t// var indexCount: number = subMesh._indexCount;\r\n\t\t// //subMesh._mesh._instanceBufferState.bind();\r\n\t\t// this.clearRenderParams();\r\n\t\t// this.bufferState = subMesh._mesh._instanceBufferState;\r\n\t\t// this.instanceCount = count;\r\n\t\t// this.setDrawElemenParams(indexCount, subMesh._indexStart * 2);\r\n\t\t//LayaGL.renderDrawConatext.drawElementsInstanced(MeshTopology.Triangles, indexCount, IndexFormat.UInt16, subMesh._indexStart * 2, count);\r\n\t\t//Stat.renderBatches++;\r\n\t\t//Stat.savedRenderBatches += count - 1;\r\n\t\t//Stat.trianglesFaces += indexCount * count / 3;\r\n\t}\r\n\r\n\r\n}\r\n\r\n","import { IVertex } from \"../IVertex\"\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\"\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\n\r\n/**\r\n * @internal\r\n * <code>VertexPositionTerrain</code> 类用于创建位置、法线、纹理1、纹理2顶点结构。\r\n */\r\nexport class VertexPositionTerrain implements IVertex {\r\n\tstatic TERRAIN_POSITION0: number = 0;\r\n\tstatic TERRAIN_NORMAL0: number = 1;\r\n\tstatic TERRAIN_TEXTURECOORDINATE0: number = 2;\r\n\tstatic TERRAIN_TEXTURECOORDINATE1: number = 3;\r\n\r\n\tprivate static _vertexDeclaration: VertexDeclaration;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\tVertexPositionTerrain._vertexDeclaration = new VertexDeclaration(40, [new VertexElement(0, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_POSITION0),\r\n\t\tnew VertexElement(12, VertexElementFormat.Vector3, VertexPositionTerrain.TERRAIN_NORMAL0),\r\n\t\tnew VertexElement(24, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0),\r\n\t\tnew VertexElement(32, VertexElementFormat.Vector2, VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1)]);\r\n\t}\r\n\r\n\tstatic get vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tprivate _position: Vector3;\r\n\tprivate _normal: Vector3;\r\n\tprivate _textureCoord0: Vector2;\r\n\tprivate _textureCoord1: Vector2;\r\n\r\n\tget position(): Vector3 {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tget normal(): Vector3 {\r\n\t\treturn this._normal;\r\n\t}\r\n\r\n\tget textureCoord0(): Vector2 {\r\n\t\treturn this._textureCoord0;\r\n\t}\r\n\r\n\tget textureCoord1(): Vector2 {\r\n\t\treturn this._textureCoord1;\r\n\t}\r\n\r\n\tget vertexDeclaration(): VertexDeclaration {\r\n\t\treturn VertexPositionTerrain._vertexDeclaration;\r\n\t}\r\n\r\n\tconstructor(position: Vector3, normal: Vector3, textureCoord0: Vector2, textureCoord1: Vector2) {\r\n\t\tthis._position = position;\r\n\t\tthis._normal = normal;\r\n\t\tthis._textureCoord0 = textureCoord0;\r\n\t\tthis._textureCoord1 = textureCoord1;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { IRenderContext3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { MeshInstanceGeometry } from \"../../graphics/MeshInstanceGeometry\";\r\n\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { RenderContext3D } from \"./RenderContext3D\";\r\nimport { RenderElement } from \"./RenderElement\";\r\n\r\n/**\r\n * @en The `InstanceRenderElement` is used for instanced rendering.\r\n * @zh `InstanceRenderElement` 类用于实例化渲染。\r\n */\r\nexport class InstanceRenderElement extends RenderElement {\r\n    /** @internal */\r\n    static maxInstanceCount: number = 1024;\r\n    /**@internal */\r\n    private static _pool: InstanceRenderElement[] = [];\r\n\r\n    /**\r\n     * @en Creates an instance of `InstanceRenderElement`, reusing from the pool if available.\r\n     * @zh 创建 `InstanceRenderElement` 的实例，如果池中有可用的实例则重用。\r\n     */\r\n    static create(): InstanceRenderElement {\r\n        let elemet = InstanceRenderElement._pool.length > 0 ? InstanceRenderElement._pool.pop() : new InstanceRenderElement();\r\n        elemet._isInPool = false;\r\n        elemet.clear();\r\n        return elemet;\r\n    }\r\n    /**@internal */\r\n    _instanceBatchElementList: FastSinglelist<RenderElement>\r\n    /**@internal */\r\n    _isInPool: boolean;\r\n    /**\r\n     * @internal\r\n     * 判断是否需要更新数据 \r\n     * */\r\n    _isUpdataData: boolean;\r\n    /** @internal */\r\n    _invertFrontFace: boolean;\r\n    /**@internal recover renderData*/\r\n    private oriRendertype: number;\r\n    /**@internal */\r\n    private _InvertFront: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.setGeometry(new MeshInstanceGeometry(null));\r\n        this._instanceBatchElementList = new FastSinglelist();\r\n        this._isUpdataData = true;\r\n        this._invertFrontFace = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    getInvertFront(): boolean {\r\n        return this._invertFrontFace;\r\n    }\r\n\r\n    set InvertFront(value: boolean) {\r\n        this._InvertFront = value;\r\n\r\n    }\r\n\r\n    protected _createRenderElementOBJ() {\r\n    }\r\n    /** @ignore */\r\n    compileShader(context: IRenderContext3D) {\r\n        var passes: ShaderPass[] = this._subShader._passes;\r\n    }\r\n    /**@ignore */\r\n    _renderUpdatePre(context: RenderContext3D) {\r\n    }\r\n    /**@ignore */\r\n    updateInstanceData(mesh: Mesh) {\r\n    }\r\n\r\n    /**\r\n     * @en Clears the instance render element.\r\n     * @zh 清除实例渲染元素。\r\n     */\r\n    clear() {\r\n        this._instanceBatchElementList.length = 0;\r\n    }\r\n    /**\r\n     * @en Recovers the render element to its original state.\r\n     * @zh 恢复渲染元素到原始状态。\r\n     */\r\n    recover(): void {\r\n    }\r\n}","import { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\n\r\n\r\n/**\r\n * @en SubMesh class used to create submesh data template.\r\n * @zh SubMesh 类用于创建子网格数据模板。\r\n */\r\nexport class SubMesh extends GeometryElement {\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\t_mesh: Mesh;\r\n\r\n\t/** @internal */\r\n\t_boneIndicesList: Uint16Array[];\r\n\t/** @internal */\r\n\t_subIndexBufferStart: number[];\r\n\t/** @internal */\r\n\t_subIndexBufferCount: number[];\r\n\r\n\t/** @internal */\r\n\t_indexInMesh: number;\r\n\t/** @internal */\r\n\t_indexStart: number;\r\n\t/** @internal */\r\n\t_indexCount: number;\r\n\t/** @internal */\r\n\t_indices: Uint16Array | Uint32Array;\r\n\t/**@internal [只读]*/\r\n\t_vertexBuffer: VertexBuffer3D;\r\n\t/**@internal [只读]*/\r\n\t_indexBuffer: IndexBuffer3D;\r\n\r\n\t/**\r\n\t * @en The number of indices.\r\n\t * @zh 索引的数量。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates an instance of SubMesh.\r\n\t * @param mesh  The mesh data template.\r\n\t * @zh 创建 SubMesh 实例。\r\n\t * @param mesh  网格数据模板。\r\n\t */\r\n\tconstructor(mesh: Mesh) {\r\n\t\tsuper(MeshTopology.Triangles, DrawType.DrawElement);\r\n\t\tthis.indexFormat = mesh.indexFormat;\r\n\t\tif (mesh.indexFormat === IndexFormat.UInt32 && !LayaGL.renderEngine.getCapable(RenderCapable.Element_Index_Uint32)) {\r\n\t\t\tconsole.warn(\"SubMesh:this device do not support IndexFormat.UInt32.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boneIndicesList = [];\r\n\t\tthis._subIndexBufferStart = [];\r\n\t\tthis._subIndexBufferCount = [];\r\n\t\tthis.bufferState = mesh._bufferState;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_setIndexRange(indexStart: number, indexCount: number, indexFormat: IndexFormat = IndexFormat.UInt16): void {\r\n\t\tthis._indexStart = indexStart;\r\n\t\tthis._indexCount = indexCount;\r\n\t\tif (this._indexBuffer.canRead) {\r\n\t\t\tif (indexFormat == IndexFormat.UInt16) {\r\n\t\t\t\tthis._indices = new Uint16Array(this._indexBuffer.getData().buffer, indexStart * 2, indexCount);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._indices = new Uint32Array(this._indexBuffer.getData().buffer, indexStart * 4, indexCount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn SubMesh._type;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\tthis._mesh._uploadVerticesData();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tvar mesh: Mesh = this._mesh;\r\n\t\tvar byteCount: number;\r\n\t\tswitch (mesh._indexFormat) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tbyteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tbyteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tbyteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.clearRenderParams();\r\n\r\n\t\tif (this._boneIndicesList && this._boneIndicesList.length > 1) {\r\n\t\t\tfor (var i: number = 0, n: number = this._boneIndicesList.length; i < n; i++) {\r\n\t\t\t\tthis.setDrawElemenParams(this._subIndexBufferCount[i], this._subIndexBufferStart[i] * byteCount);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.setDrawElemenParams(this._indexCount, this._indexStart * byteCount);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Copies and gets a copy of the submesh index data.\r\n\t * @returns A copy of the indices.\r\n\t * @zh 拷贝并获取子网格索引数据的副本。\r\n\t * @returns 索引的副本。\r\n\t */\r\n\tgetIndices(): Uint16Array | Uint32Array {\r\n\t\tif (this._mesh._isReadable)\r\n\t\t\treturn this._indices.slice();\r\n\t\telse\r\n\t\t\tthrow \"SubMesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the indices for the submesh.\r\n\t * @param indices The indices to set.\r\n\t * @zh 设置子网格的索引。\r\n\t * @param indices 要设置的索引。\r\n\t */\r\n\tsetIndices(indices: Uint16Array): void {\r\n\t\tthis._indexBuffer.setData(indices, this._indexStart, 0, this._indexCount);\r\n\t}\r\n\r\n\t/**\r\n\t * {@inheritDoc GeometryElement.destroy}\r\n\t * @override\r\n\t * @en Destroys the submesh and releases resources.\r\n\t * @zh 销毁子网格并释放资源。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis._indexBuffer = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._mesh = null;\r\n\t\tthis._boneIndicesList = null;\r\n\t\tthis._subIndexBufferStart = null;\r\n\t\tthis._subIndexBufferCount = null;\r\n\t}\r\n}\r\n\r\n","import { ILaya } from \"../../../../ILaya\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { InstanceRenderElement } from \"../../core/render/InstanceRenderElement\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { SubMesh } from \"./SubMesh\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\r\nimport { VertexElement } from \"../../../renders/VertexElement\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MorphTargetData } from \"./MorphTargetData\";\r\nimport { Config } from \"../../../../Config\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\n/**\r\n * @internal\r\n */\r\nexport class skinnedMatrixCache {\r\n    readonly subMeshIndex: number;\r\n    readonly batchIndex: number;\r\n    readonly batchBoneIndex: number;\r\n    constructor(subMeshIndex: number, batchIndex: number, batchBoneIndex: number) {\r\n        this.subMeshIndex = subMeshIndex;\r\n        this.batchIndex = batchIndex;\r\n        this.batchBoneIndex = batchBoneIndex;\r\n    }\r\n}\r\n\r\n/**\r\n * @en Mesh class is used to create a template for file mesh data.\r\n * @zh Mesh 类用于创建文件网格数据模板。\r\n */\r\nexport class Mesh extends Resource implements IClone {\r\n    /**@internal */\r\n    static MESH_INSTANCEBUFFER_TYPE_NORMAL: number = 0;\r\n    /**@internal */\r\n    static MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR: number = 1;\r\n\r\n    /** @internal */\r\n    private _tempVector30: Vector3 = new Vector3()\r\n    /** @internal */\r\n    private _tempVector31: Vector3 = new Vector3();\r\n    /**@internal */\r\n    _convexMesh: any;\r\n    /**@interanl */\r\n    _triangleMesh: any;\r\n    /**@internal */\r\n    __convexMesh: Mesh;\r\n    /**\r\n      * @internal\r\n      */\r\n    static __init__(): void {\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Loads a mesh template from the specified URL and calls the complete callback upon completion.\r\n     * @param url The URL of the mesh template.\r\n     * @param complete The callback function to call when the mesh is loaded.\r\n     * @zh 从指定的URL加载网格模板，并在加载完成后执行完成回调。\r\n     * @param url 网格模板的URL。\r\n     * @param complete 加载完成后的回调函数。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url, complete, null, Loader.MESH);\r\n    }\r\n\r\n    /** @internal */\r\n    private _btTriangleMesh: number;\r\n    /** @internal */\r\n    private _minVerticesUpdate: number = -1;\r\n    /** @internal */\r\n    private _maxVerticesUpdate: number = -1;\r\n    /** @internal */\r\n    private _needUpdateBounds: boolean = true;\r\n    /** @internal */\r\n    private _bounds: Bounds;\r\n\r\n    /** @internal */\r\n    _isReadable: boolean;\r\n    /** @internal */\r\n    _bufferState: BufferState = new BufferState();\r\n    /** @internal */\r\n    _instanceBufferState: BufferState;\r\n    /** @internal */\r\n    _instanceBufferStateType: number = 0;\r\n    /**@internal */\r\n    _instanceWorldVertexBuffer: VertexBuffer3D\r\n    /**@internal */\r\n    _instanceSimpleAniVertexBuffer: VertexBuffer3D\r\n    /**@internal */\r\n    _instanceLightMapVertexBuffer: VertexBuffer3D\r\n    /** @internal */\r\n    _subMeshes: SubMesh[];\r\n    /** @internal */\r\n    _vertexBuffer: VertexBuffer3D = null;\r\n    /** @internal */\r\n    _indexBuffer: IndexBuffer3D = null;\r\n\r\n    /** @internal */\r\n    _boneNames: string[];\r\n    /** @internal */\r\n    _inverseBindPoses: Matrix4x4[];\r\n    /** @internal */\r\n    _skinnedMatrixCaches: skinnedMatrixCache[] = [];\r\n    /** @internal */\r\n    _vertexCount: number = 0;\r\n    /** @internal */\r\n    _indexFormat: IndexFormat = IndexFormat.UInt16;\r\n\r\n    /** @internal */\r\n    instanceLightMapScaleOffsetData: Float32Array;\r\n\r\n    /**\r\n     * @en Morph target data for the mesh.\r\n     * @zh 网格的变形目标数据。\r\n     */\r\n    morphTargetData: MorphTargetData;\r\n\r\n    /** @internal */\r\n    _width: number;\r\n\r\n    /** @internal */\r\n    _height: number;\r\n\r\n    /**\r\n     * @en The array of inverse absolute bind poses for the mesh.\r\n     * @zh 网格的全局默认绑定动作逆矩阵数组。\r\n     */\r\n    get inverseAbsoluteBindPoses(): Matrix4x4[] {\r\n        return this._inverseBindPoses;\r\n    }\r\n\r\n    /**\r\n     * @en The number of vertices in the mesh.\r\n     * @zh 网格中的顶点数。\r\n     */\r\n    get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * @en The number of indices in the mesh.\r\n     * @zh 网格中的索引个数。\r\n     */\r\n    get indexCount(): number {\r\n        return this._indexBuffer.indexCount;\r\n    }\r\n\r\n    /**\r\n     * @en The number of SubMeshes in the mesh.\r\n     * @zh 子网格的个数。\r\n     */\r\n    get subMeshCount(): number {\r\n        return this._subMeshes.length;\r\n    }\r\n\r\n    /**\r\n     * @en The bounds of the mesh.\r\n     * @zh 网格的边界\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    set bounds(value: Bounds) {\r\n        if (this._bounds !== value)\r\n            value.cloneTo(this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @en The index format of the mesh.\r\n     * @zh 网格的索引格式。\r\n     */\r\n    get indexFormat(): IndexFormat {\r\n        return this._indexFormat;\r\n    }\r\n\r\n    set indexFormat(value: IndexFormat) {\r\n        this._indexFormat = value\r\n        this._subMeshes.forEach(element => {\r\n            element.indexFormat = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method, do not use.\r\n     * @param isReadable 是否可读。\r\n     * @zh 构造方法，禁止使用。\r\n     * @param isReadable 是否可读。\r\n     */\r\n    constructor(isReadable: boolean = true) {\r\n        super();\r\n        this._bounds = new Bounds(new Vector3(), new Vector3());\r\n        this._isReadable = isReadable;\r\n        this._subMeshes = [];\r\n        this.destroyedImmediately = Config.destroyResourceImmediatelyDefault;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getPositionElement(vertexBuffer: VertexBuffer3D): VertexElement {\r\n        var vertexElements: any[] = vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (var i: number = 0, n: number = vertexElements.length; i < n; i++) {\r\n            var vertexElement: VertexElement = vertexElements[i];\r\n            if (vertexElement._elementFormat === VertexElementFormat.Vector3 && vertexElement._elementUsage === VertexMesh.MESH_POSITION0)\r\n                return vertexElement;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _getVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n        data.length = this._vertexCount;\r\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n        if (element) {\r\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n            var uint8VerStr: number = verDec.vertexStride;\r\n            var floatVerStr: number = uint8VerStr / 4;\r\n            var uint8EleOffset: number = element._offset;\r\n            var floatEleOffset: number = uint8EleOffset / 4;\r\n\r\n            switch (elementUsage) {\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector2(floatVertices[offset], floatVertices[offset + 1]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_POSITION0:\r\n                case VertexMesh.MESH_NORMAL0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector3(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                case VertexMesh.MESH_BLENDWEIGHT0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Vector4(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_COLOR0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = floatVerStr * i + floatEleOffset;\r\n                        data[i] = new Color(floatVertices[offset], floatVertices[offset + 1], floatVertices[offset + 2], floatVertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_BLENDINDICES0:\r\n                    for (var i: number = 0; i < this._vertexCount; i++) {\r\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\r\n                        data[i] = new Vector4(uint8Vertices[offset], uint8Vertices[offset + 1], uint8Vertices[offset + 2], uint8Vertices[offset + 3]);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Unknown elementUsage.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setVerticeElementData(data: Array<Vector2 | Vector3 | Vector4 | Color>, elementUsage: number): void {\r\n        var verDec: VertexDeclaration = this._vertexBuffer.vertexDeclaration;\r\n        var element: VertexElement = verDec.getVertexElementByUsage(elementUsage);\r\n        if (element) {\r\n            var uint8Vertices: Uint8Array = this._vertexBuffer.getUint8Data();\r\n            var floatVertices: Float32Array = this._vertexBuffer.getFloat32Data();\r\n            var uint8VerStr: number = verDec.vertexStride;\r\n            var float8VerStr: number = uint8VerStr / 4;\r\n            var uint8EleOffset: number = element._offset;\r\n            var floatEleOffset: number = uint8EleOffset / 4;\r\n            switch (elementUsage) {\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec2: Vector2 = <Vector2>data[i];\r\n                        floatVertices[offset] = vec2.x;\r\n                        floatVertices[offset + 1] = vec2.y;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_POSITION0:\r\n                case VertexMesh.MESH_NORMAL0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec3: Vector3 = <Vector3>data[i];\r\n                        floatVertices[offset] = vec3.x;\r\n                        floatVertices[offset + 1] = vec3.y;\r\n                        floatVertices[offset + 2] = vec3.z;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                case VertexMesh.MESH_BLENDWEIGHT0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var vec4: Vector4 = <Vector4>data[i];\r\n                        floatVertices[offset] = vec4.x;\r\n                        floatVertices[offset + 1] = vec4.y;\r\n                        floatVertices[offset + 2] = vec4.z;\r\n                        floatVertices[offset + 3] = vec4.w;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_COLOR0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = float8VerStr * i + floatEleOffset;\r\n                        var cor: Color = <Color>data[i];\r\n                        floatVertices[offset] = cor.r;\r\n                        floatVertices[offset + 1] = cor.g;\r\n                        floatVertices[offset + 2] = cor.b;\r\n                        floatVertices[offset + 3] = cor.a;\r\n                    }\r\n                    break;\r\n                case VertexMesh.MESH_BLENDINDICES0:\r\n                    for (var i: number = 0, n: number = data.length; i < n; i++) {\r\n                        var offset: number = uint8VerStr * i + uint8EleOffset;\r\n                        var vec4: Vector4 = <Vector4>data[i];\r\n                        uint8Vertices[offset] = vec4.x;\r\n                        uint8Vertices[offset + 1] = vec4.y;\r\n                        uint8Vertices[offset + 2] = vec4.z;\r\n                        uint8Vertices[offset + 3] = vec4.w;\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Unknown elementUsage.\";\r\n            }\r\n            this._minVerticesUpdate = 0;\r\n            this._maxVerticesUpdate = Number.MAX_SAFE_INTEGER;\r\n        }\r\n        else {\r\n            console.warn(\"Mesh: the mesh don't have  this VertexElement.\");\r\n            //TODO:vertexBuffer结构发生变化\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁资源\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _disposeResource(): void {\r\n        for (var i: number = 0, n: number = this._subMeshes.length; i < n; i++)\r\n            this._subMeshes[i].destroy();\r\n        //this._btTriangleMesh && Physics3D._bullet.btStridingMeshInterface_destroy(this._btTriangleMesh);\r\n        this._vertexBuffer && this._vertexBuffer.destroy();\r\n        this._indexBuffer && this._indexBuffer.destroy();\r\n        this._bufferState.destroy();\r\n        this._instanceBufferState && this._instanceBufferState.destroy();\r\n        this._instanceWorldVertexBuffer && this._instanceWorldVertexBuffer.destroy();\r\n        this._instanceSimpleAniVertexBuffer && this._instanceSimpleAniVertexBuffer.destroy();\r\n        this._instanceLightMapVertexBuffer && this._instanceLightMapVertexBuffer.destroy();\r\n        this.instanceLightMapScaleOffsetData && (this.instanceLightMapScaleOffsetData = null);\r\n        this._setCPUMemory(0);\r\n        this._setGPUMemory(0);\r\n        this._bufferState = null;\r\n        this._instanceBufferState = null;\r\n        this._vertexBuffer = null;\r\n        this._indexBuffer = null;\r\n        this._subMeshes = null;\r\n        this._btTriangleMesh = null;\r\n        this._indexBuffer = null;\r\n        this._boneNames = null;\r\n        this._inverseBindPoses = null;\r\n        this.morphTargetData && (this.morphTargetData.destroy());\r\n        this.__convexMesh && this.__convexMesh.destroy();\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    _setSubMeshes(subMeshes: SubMesh[]): void {\r\n        this._subMeshes = subMeshes\r\n        for (var i: number = 0, n: number = subMeshes.length; i < n; i++)\r\n            subMeshes[i]._indexInMesh = i;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setBuffer(vertexBuffer: VertexBuffer3D, indexBuffer: IndexBuffer3D): void {\r\n        var bufferState: BufferState = this._bufferState;\r\n        bufferState.applyState([vertexBuffer], indexBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setInstanceBuffer() {\r\n        if (this._instanceBufferState)\r\n            return;\r\n        var instanceBufferState: BufferState = this._instanceBufferState = new BufferState();\r\n        var instanceBufferStateType = this._instanceBufferStateType;\r\n        let vertexArray = [];\r\n        vertexArray.push(this._vertexBuffer);\r\n        //new Instance VertexBuffer3D\r\n        let instanceBuffer3D: VertexBuffer3D = this._instanceWorldVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 16 * 4, BufferUsage.Dynamic, false);;\r\n        instanceBuffer3D.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n        instanceBuffer3D.instanceBuffer = true;\r\n        vertexArray.push(instanceBuffer3D);\r\n        switch (instanceBufferStateType) {\r\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:\r\n                //new SimpleVertexBuffer3D\r\n                let instanceSimpleAnimatorBuffer = this._instanceSimpleAniVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 4 * 4, BufferUsage.Dynamic, false);\r\n                instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n                instanceSimpleAnimatorBuffer.instanceBuffer = true;\r\n                vertexArray.push(instanceSimpleAnimatorBuffer);\r\n                break;\r\n            case Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL:\r\n                //have uv1\r\n                if (this.getVertexDeclaration().getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1)) {\r\n                    let instanceLightMapVertexBuffer = this._instanceLightMapVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(InstanceRenderElement.maxInstanceCount * 4 * 4, BufferUsage.Dynamic, false);\r\n                    instanceLightMapVertexBuffer.vertexDeclaration = VertexMesh.instanceLightMapScaleOffsetDeclaration;\r\n                    instanceLightMapVertexBuffer.instanceBuffer = true;\r\n                    this.instanceLightMapScaleOffsetData = new Float32Array(InstanceRenderElement.maxInstanceCount * 4);\r\n                    vertexArray.push(instanceLightMapVertexBuffer);\r\n                }\r\n                break;\r\n        }\r\n        instanceBufferState.applyState(vertexArray, this._indexBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _uploadVerticesData(): void {\r\n        var min: number = this._minVerticesUpdate;\r\n        var max: number = this._maxVerticesUpdate;\r\n        if (min !== -1 && max !== -1) {\r\n            var offset: number = min;\r\n            this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer, offset, offset, max - min);\r\n            this._minVerticesUpdate = -1;\r\n            this._maxVerticesUpdate = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves a sub-mesh based on the index.\r\n     * @param index The index of the sub-mesh.\r\n     * @returns The sub-mesh at the specified index.\r\n     * @zh 根据索引获取子网格。\r\n     * @param index 子网格的索引。\r\n     * @returns 索引处的子网格。\r\n     */\r\n    getSubMesh(index: number): SubMesh {\r\n        return this._subMeshes[index];\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills position data into an array.\r\n     * @param positions The array to fill with position data.\r\n     * @remark This method is a copy operation, which may be time-consuming.\r\n     * @zh 拷贝并填充位置数据至数组。\r\n     * @param positions 用于填充位置数据的数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getPositions(positions: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n        else\r\n            throw \"Mesh:can't get positions on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the position data.\r\n     * @param positions The new position data to set.\r\n     * @zh 设置位置数据。\r\n     * @param positions 要设置的新位置数据。\r\n     */\r\n    setPositions(positions: Vector3[]): void {\r\n        if (this._isReadable) {\r\n            this._setVerticeElementData(positions, VertexMesh.MESH_POSITION0);\r\n            this._needUpdateBounds = true;\r\n        }\r\n        else {\r\n            throw \"Mesh:setPosition() need isReadable must be true or use setVertices().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills color data into an array.\r\n     * @param colors The array to fill with color data.\r\n     * @remark This method is a copy operation, which may be time-consuming.\r\n     * @zh 拷贝并填充颜色数据至数组。\r\n     * @param colors 用于填充颜色数据的数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性\r\n     */\r\n    getColors(colors: Color[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the color data.\r\n     * @param colors The new color data to set.\r\n     * @zh 设置颜色数据。\r\n     * @param colors 要设置的新颜色数据。\r\n     */\r\n    setColors(colors: Color[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(colors, VertexMesh.MESH_COLOR0);\r\n        else\r\n            throw \"Mesh:setColors() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills texture coordinate data into an array.\r\n     * @param uvs The array to fill with texture coordinate data.\r\n     * @param channel The texture coordinate channel.\r\n     * @remark This method is a copy operation, which may be time-consuming.\r\n     * @zh 拷贝并填充纹理坐标数据至数组。\r\n     * @param uvs 纹理坐标数组。\r\n     * @param channel 纹理坐标通道。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getUVs(uvs: Vector2[], channel: number = 0): void {\r\n        if (this._isReadable) {\r\n            switch (channel) {\r\n                case 0:\r\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n                    break;\r\n                case 1:\r\n                    this._getVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Invalid channel.\";\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:can't get uvs on mesh,isReadable must be true.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the texture coordinate data.\r\n     * @param uvs The new texture coordinate data to set.\r\n     * @param channel The texture coordinate channel.\r\n     * @zh 设置纹理坐标数据。\r\n     * @param uvs 要设置的新纹理坐标数据。\r\n     * @param channel 纹理坐标通道。\r\n     */\r\n    setUVs(uvs: Vector2[], channel: number = 0): void {\r\n        if (this._isReadable) {\r\n            switch (channel) {\r\n                case 0:\r\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE0);\r\n                    break;\r\n                case 1:\r\n                    this._setVerticeElementData(uvs, VertexMesh.MESH_TEXTURECOORDINATE1);\r\n                    break;\r\n                default:\r\n                    throw \"Mesh:Invalid channel.\";\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:setUVs() need isReadable must be true or use setVertices().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills normal data into an array.\r\n     * @param normals The array to fill with normal data.\r\n     * @remark This method is a copy operation, which may be time-consuming.\r\n     * @zh 拷贝并填充法线数据至数组。\r\n     * @param normals 用于填充法线数据的数组。\r\n     * @remark 该方法为拷贝操作，比较耗费性能。\r\n     */\r\n    getNormals(normals: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the normal data.\r\n     * @param normals The new normal data to set.\r\n     * @zh 设置法线数据。\r\n     * @param normals 要设置的新法线数据。\r\n     */\r\n    setNormals(normals: Vector3[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(normals, VertexMesh.MESH_NORMAL0);\r\n        else\r\n            throw \"Mesh:setNormals() need must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills tangent data into an array.\r\n     * @param tangents The array to fill with tangent data.\r\n     * @zh 拷贝并填充切线数据至数组。\r\n     * @param tangents 用于填充切线数据的数组。\r\n     */\r\n    getTangents(tangents: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n        else\r\n            throw \"Mesh:can't get colors on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the tangent data.\r\n     * @param tangents The new tangent data to set.\r\n     * @zh 设置切线数据。\r\n     * @param tangents 要设置的新切线数据。\r\n     */\r\n    setTangents(tangents: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(tangents, VertexMesh.MESH_TANGENT0);\r\n        else\r\n            throw \"Mesh:setTangents() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * @en Copies and fills bone weight data into an array.\r\n     * @param boneWeights The array to fill with bone weight data.\r\n     * @zh 拷贝并填充骨骼权重数据至数组。\r\n     * @param boneWeights 用于填充骨骼权重数据的数组。\r\n     */\r\n    getBoneWeights(boneWeights: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n        else\r\n            throw \"Mesh:can't get boneWeights on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Copy and fill the bone weight data into the array.\r\n     * @param boneWeights Bone weight data.\r\n     * @zh 拷贝并填充骨骼权重数据至数组。\r\n     * @param boneWeights 骨骼权重。\r\n     */\r\n    setBoneWeights(boneWeights: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(boneWeights, VertexMesh.MESH_BLENDWEIGHT0);\r\n        else\r\n            throw \"Mesh:setBoneWeights() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n    /**\r\n     * @en Gets the bone indices.\r\n     * @param boneIndices The bone indices\r\n     * @zh 获取骨骼索引。\r\n     * @param boneIndices 骨骼索引。\r\n     */\r\n    getBoneIndices(boneIndices: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._getVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n        else\r\n            throw \"Mesh:can't get boneIndices on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the bone index data.\r\n     * @param boneIndices The new bone index data to set.\r\n     * @zh 设置骨骼索引数据。\r\n     * @param boneIndices 要设置的新骨骼索引数据。\r\n     */\r\n    setBoneIndices(boneIndices: Vector4[]): void {\r\n        if (this._isReadable)\r\n            this._setVerticeElementData(boneIndices, VertexMesh.MESH_BLENDINDICES0);\r\n        else\r\n            throw \"Mesh:setBoneIndices() need isReadable must be true or use setVertices().\";\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Marks the Mesh as non-readable, which can reduce memory usage. Once marked, no read methods can be called.\r\n     * @zh 将Mesh标记为不可读，可以减少内存使用。标记后，不能再调用任何读取方法。\r\n     */\r\n    markAsUnreadbale(): void {\r\n        this._uploadVerticesData();\r\n        this._vertexBuffer.markAsUnreadbale();\r\n        this._isReadable = false;\r\n    }\r\n\r\n    /**\r\n     * @en Gets the vertex declaration.\r\n     * @zh 获取顶点声明。\r\n     */\r\n    getVertexDeclaration(): VertexDeclaration {\r\n        return this._vertexBuffer.vertexDeclaration;\r\n    }\r\n\r\n    /**\r\n     * @en Copies and retrieves a copy of the vertex data.\r\n     * @returns A copy of the vertex data.\r\n     * @zh 拷贝并获取顶点数据的副本。\r\n     * @returns 顶点数据副本。\r\n     */\r\n    getVertices(): ArrayBuffer {\r\n        if (this._isReadable)\r\n            return this._vertexBuffer.getUint8Data().buffer.slice(0);\r\n        else\r\n            throw \"Mesh:can't get vertices on mesh,isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the vertex data.\r\n     * @param vertices The vertex data to set.\r\n     * @zh 设置顶点数据。\r\n     * @param vertices 要设置的顶点数据。\r\n     */\r\n    setVertices(vertices: ArrayBuffer): void {\r\n        this._vertexBuffer.setData(vertices);\r\n        this._needUpdateBounds = true;\r\n    }\r\n\r\n    /**\r\n     * @en Copies and retrieves a copy of the mesh indices.\r\n     * @returns A copy of the mesh indices.\r\n     * @zh 拷贝并获取网格索引的副本。\r\n     * @returns 网格索引的副本。\r\n     */\r\n    getIndices(): Uint8Array | Uint16Array | Uint32Array {\r\n        if (this._isReadable)\r\n            return this._indexBuffer.getData().slice();\r\n        else\r\n            throw \"Mesh:can't get indices on subMesh,mesh's isReadable must be true.\";\r\n    }\r\n\r\n    /**\r\n     * @en Sets the mesh indices.\r\n     * @param indices The mesh indices to set.\r\n     * @zh 设置网格索引。\r\n     * @param indices 要设置的网格索引。\r\n     */\r\n    setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\r\n        var format: IndexFormat;\r\n        if (indices instanceof Uint32Array)\r\n            format = IndexFormat.UInt32;\r\n        else if (indices instanceof Uint16Array)\r\n            format = IndexFormat.UInt16;\r\n        else if (indices instanceof Uint8Array)\r\n            format = IndexFormat.UInt8;\r\n\r\n        var indexBuffer: IndexBuffer3D = this._indexBuffer;\r\n        if (this._indexFormat !== format || indexBuffer.indexCount !== indices.length) {//format chang and length chang will recreate the indexBuffer\r\n            indexBuffer.destroy();\r\n            this._indexBuffer = indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(format, indices.length, BufferUsage.Static, this._isReadable);\r\n        }\r\n        indexBuffer.setData(indices);\r\n        this.indexFormat = format;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Generates a bounding box from the model's position data.\r\n     * @zh 从模型位置数据生成包围盒。\r\n     */\r\n    calculateBounds(): void {\r\n        if (this._isReadable) {\r\n            if (this._needUpdateBounds) {\r\n                var min: Vector3 = this._tempVector30;\r\n                var max: Vector3 = this._tempVector31;\r\n                min.x = min.y = min.z = Number.MAX_VALUE;\r\n                max.x = max.y = max.z = -Number.MAX_VALUE;\r\n\r\n                var vertexBuffer: VertexBuffer3D = this._vertexBuffer;\r\n                var positionElement: VertexElement = this._getPositionElement(vertexBuffer);\r\n                var verticesData: Float32Array = vertexBuffer.getFloat32Data();\r\n                var floatCount: number = vertexBuffer.vertexDeclaration.vertexStride / 4;\r\n                var posOffset: number = positionElement._offset / 4;\r\n                for (var j: number = 0, m: number = verticesData.length; j < m; j += floatCount) {\r\n                    var ofset: number = j + posOffset;\r\n                    var pX: number = verticesData[ofset];\r\n                    var pY: number = verticesData[ofset + 1];\r\n                    var pZ: number = verticesData[ofset + 2];\r\n                    min.x = Math.min(min.x, pX);\r\n                    min.y = Math.min(min.y, pY);\r\n                    min.z = Math.min(min.z, pZ);\r\n                    max.x = Math.max(max.x, pX);\r\n                    max.y = Math.max(max.y, pY);\r\n                    max.z = Math.max(max.z, pZ);\r\n                }\r\n                this._bounds.setMin(min);\r\n                this._bounds.setMax(max);\r\n                this._needUpdateBounds = false;\r\n            }\r\n        }\r\n        else {\r\n            throw \"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Gets the convex model.\r\n     * @returns The convex mesh.\r\n     * @zh 获取凸包模型。\r\n     * @returns 凸包网格。\r\n     */\r\n    getCorveMesh(): Mesh {\r\n        if (this._convexMesh == null) {\r\n            return null;\r\n        }\r\n        if (this.__convexMesh == null && Laya3D._PhysicsCreateUtil && Laya3D._PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_CreateCorveMesh)) {\r\n            this.__convexMesh = Laya3D._PhysicsCreateUtil.createCorveMesh(this);\r\n        }\r\n        return this.__convexMesh;\r\n    }\r\n\r\n    /**\r\n     * @en Clones this mesh to the destination object.\r\n     * @param destObject The destination object to clone to.\r\n     * @zh 克隆当前网格到目标对象。\r\n     * @param destObject 克隆的目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {//[实现IClone接口]\r\n        var destMesh: Mesh = <Mesh>destObject;\r\n        var vb: VertexBuffer3D = this._vertexBuffer;\r\n        var destVB: VertexBuffer3D = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vb._byteLength, vb.bufferUsage, vb.canRead);\r\n        destVB.vertexDeclaration = vb.vertexDeclaration;\r\n        destVB.setData(vb.getUint8Data().slice().buffer);\r\n        destMesh._vertexBuffer = destVB;\r\n        destMesh._vertexCount = this._vertexCount;\r\n        var ib: IndexBuffer3D = this._indexBuffer;\r\n        var destIB: IndexBuffer3D = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ib.indexCount, ib.bufferUsage, ib.canRead);\r\n        destIB.setData(ib.getData().slice());\r\n        destMesh._indexBuffer = destIB;\r\n\r\n        destMesh._setBuffer(destMesh._vertexBuffer, destIB);\r\n        destMesh._instanceBufferStateType = this._instanceBufferStateType;\r\n\r\n        destMesh._setCPUMemory(this.cpuMemory);\r\n        destMesh._setGPUMemory(this.gpuMemory);\r\n\r\n        var i: number;\r\n        var boneNames: string[] = this._boneNames;\r\n        if (boneNames) {\r\n            var destBoneNames: string[] = destMesh._boneNames = [];\r\n            for (i = 0; i < boneNames.length; i++)\r\n                destBoneNames[i] = boneNames[i];\r\n        }\r\n\r\n        var inverseBindPoses: Matrix4x4[] = this._inverseBindPoses;\r\n        if (inverseBindPoses) {\r\n            var destInverseBindPoses: Matrix4x4[] = destMesh._inverseBindPoses = [];\r\n            for (i = 0; i < inverseBindPoses.length; i++)\r\n                destInverseBindPoses[i] = inverseBindPoses[i];\r\n        }\r\n        if (this._inverseBindPosesBuffer) {\r\n            let length = this._inverseBindPosesBuffer.byteLength;\r\n            destMesh._inverseBindPosesBuffer = new ArrayBuffer(length);\r\n            new Uint8Array(destMesh._inverseBindPosesBuffer).set(new Uint8Array(this._inverseBindPosesBuffer));\r\n        }\r\n\r\n        var cacheLength: number = this._skinnedMatrixCaches.length;\r\n        destMesh._skinnedMatrixCaches.length = cacheLength;\r\n        for (i = 0; i < cacheLength; i++) {\r\n            var skinnedCache: skinnedMatrixCache = this._skinnedMatrixCaches[i];\r\n            if (skinnedCache)\r\n                destMesh._skinnedMatrixCaches[i] = new skinnedMatrixCache(skinnedCache.subMeshIndex, skinnedCache.batchIndex, skinnedCache.batchBoneIndex);\r\n        }\r\n\r\n        for (i = 0; i < this.subMeshCount; i++) {\r\n            var subMesh: SubMesh = this._subMeshes[i];\r\n            var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n            var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n            var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n            var destSubmesh: SubMesh = new SubMesh(destMesh);\r\n\r\n            destSubmesh._subIndexBufferStart.length = subIndexBufferStart.length;\r\n            destSubmesh._subIndexBufferCount.length = subIndexBufferCount.length;\r\n            destSubmesh._boneIndicesList.length = boneIndicesList.length;\r\n\r\n            for (var j: number = 0; j < subIndexBufferStart.length; j++)\r\n                destSubmesh._subIndexBufferStart[j] = subIndexBufferStart[j];\r\n            for (j = 0; j < subIndexBufferCount.length; j++)\r\n                destSubmesh._subIndexBufferCount[j] = subIndexBufferCount[j];\r\n            for (j = 0; j < boneIndicesList.length; j++)\r\n                destSubmesh._boneIndicesList[j] = new Uint16Array(boneIndicesList[j]);\r\n\r\n            destSubmesh._indexBuffer = destIB;\r\n            destSubmesh._indexStart = subMesh._indexStart;\r\n            destSubmesh._indexCount = subMesh._indexCount;\r\n            destSubmesh._indices = new Uint16Array(destIB.getData().buffer, subMesh._indexStart * 2, subMesh._indexCount);\r\n            var vertexBuffer: VertexBuffer3D = destMesh._vertexBuffer;\r\n            destSubmesh._vertexBuffer = vertexBuffer;\r\n            destMesh._subMeshes.push(destSubmesh);\r\n        }\r\n        destMesh._setSubMeshes(destMesh._subMeshes);\r\n\r\n        if (this.morphTargetData) {\r\n            destMesh.morphTargetData = this.morphTargetData.clone();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clones this mesh.\r\n     * @returns A clone of the current mesh.\r\n     * @zh 克隆当前网格。\r\n     * @return 当前网格的克隆副本。\r\n     */\r\n    clone(): any {//[实现IClone接口]\r\n        var dest: Mesh = new Mesh();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n\r\n\r\n    //------------------------------------------NATIVE----------------------------------------------------\r\n    /** @internal */\r\n    _inverseBindPosesBuffer: ArrayBuffer;\r\n}","import { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { SubMesh } from \"./SubMesh\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\n\r\n/**\r\n * @en The `PrimitiveMesh` class is used to create simple meshes.\r\n * @zh `PrimitiveMesh` 类用于创建简单的网格。\r\n */\r\nexport class PrimitiveMesh {\r\n\r\n\tstatic __init__(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic _createMesh(vertexDeclaration: VertexDeclaration, vertices: Float32Array, indices: Uint16Array): Mesh {\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tvar subMesh: SubMesh = new SubMesh(mesh);\r\n\t\tvar vertexBuffer: VertexBuffer3D = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertices.length * 4, BufferUsage.Static, true);\r\n\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\tvertexBuffer.setData(vertices.buffer);\r\n\t\tmesh._vertexBuffer = vertexBuffer;\r\n\t\tmesh._vertexCount = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\tvar indexBuffer: IndexBuffer3D = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, indices.length, BufferUsage.Static, true);\r\n\t\tindexBuffer.setData(indices);\r\n\t\tmesh._indexBuffer = indexBuffer;\r\n\r\n\t\tmesh._setBuffer(vertexBuffer, indexBuffer);\r\n\t\t//mesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(0, indexBuffer.indexCount);\r\n\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tsubIndexBufferStart.length = 1;\r\n\t\tsubIndexBufferCount.length = 1;\r\n\t\tboneIndicesList.length = 1;\r\n\t\tsubIndexBufferStart[0] = 0;\r\n\t\tsubIndexBufferCount[0] = indexBuffer.indexCount;\r\n\r\n\t\tvar subMeshes: SubMesh[] = [];\r\n\t\tsubMeshes.push(subMesh);\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tmesh.calculateBounds();\r\n\t\tvar memorySize: number = vertexBuffer._byteLength + indexBuffer._byteLength;\r\n\t\tmesh._setCPUMemory(memorySize);\r\n\t\tmesh._setGPUMemory(memorySize);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a box mesh.\r\n\t * @param long The length of the box. Default is 1.\r\n\t * @param height The height of the box. Default is 1.\r\n\t * @param width The width of the box. Default is 1.\r\n\t * @return The created Mesh instance.\r\n\t * @zh 创建一个立方体网格。\r\n\t * @param long 立方体的长度，默认值为1。\r\n\t * @param height 立方体的高度，默认值为1。\r\n\t * @param width 立方体的宽度，默认值为1。\r\n\t * @return 创建的网格实例。\r\n\t */\r\n\tstatic createBox(long: number = 1, height: number = 1, width: number = 1): Mesh {\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([\r\n\t\t\t//上\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 1, 0, 0, 0, halfLong, halfHeight, -halfWidth, 0, 1, 0, 1, 0, halfLong, halfHeight, halfWidth, 0, 1, 0, 1, 1, -halfLong, halfHeight, halfWidth, 0, 1, 0, 0, 1,\r\n\t\t\t//下\r\n\t\t\t-halfLong, -halfHeight, -halfWidth, 0, -1, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 0, -1, 0, 1, 1, halfLong, -halfHeight, halfWidth, 0, -1, 0, 1, 0, -halfLong, -halfHeight, halfWidth, 0, -1, 0, 0, 0,\r\n\t\t\t//左\r\n\t\t\t-halfLong, halfHeight, -halfWidth, -1, 0, 0, 0, 0, -halfLong, halfHeight, halfWidth, -1, 0, 0, 1, 0, -halfLong, -halfHeight, halfWidth, -1, 0, 0, 1, 1, -halfLong, -halfHeight, -halfWidth, -1, 0, 0, 0, 1,\r\n\t\t\t//右\r\n\t\t\thalfLong, halfHeight, -halfWidth, 1, 0, 0, 1, 0, halfLong, halfHeight, halfWidth, 1, 0, 0, 0, 0, halfLong, -halfHeight, halfWidth, 1, 0, 0, 0, 1, halfLong, -halfHeight, -halfWidth, 1, 0, 0, 1, 1,\r\n\t\t\t//前\r\n\t\t\t-halfLong, halfHeight, halfWidth, 0, 0, 1, 0, 0, halfLong, halfHeight, halfWidth, 0, 0, 1, 1, 0, halfLong, -halfHeight, halfWidth, 0, 0, 1, 1, 1, -halfLong, -halfHeight, halfWidth, 0, 0, 1, 0, 1,\r\n\t\t\t//后\r\n\t\t\t-halfLong, halfHeight, -halfWidth, 0, 0, -1, 1, 0, halfLong, halfHeight, -halfWidth, 0, 0, -1, 0, 0, halfLong, -halfHeight, -halfWidth, 0, 0, -1, 0, 1, -halfLong, -halfHeight, -halfWidth, 0, 0, -1, 1, 1]);\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array([\r\n\t\t\t//上\r\n\t\t\t0, 1, 2, 2, 3, 0,\r\n\t\t\t//下\r\n\t\t\t4, 7, 6, 6, 5, 4,\r\n\t\t\t//左\r\n\t\t\t8, 9, 10, 10, 11, 8,\r\n\t\t\t//右\r\n\t\t\t12, 15, 14, 14, 13, 12,\r\n\t\t\t//前\r\n\t\t\t16, 17, 18, 18, 19, 16,\r\n\t\t\t//后\r\n\t\t\t20, 23, 22, 22, 21, 20]);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a capsule mesh.\r\n\t * @param radius The radius of the capsule. Default is 0.5.\r\n\t * @param height The height of the capsule. Default is 2.\r\n\t * @param stacks The number of stacks, typically half the number of vertical slices. Default is 16.\r\n\t * @param slices The number of vertical slices. Default is 32.\r\n\t * @zh 创建一个胶囊体网格。\r\n\t * @param radius 胶囊的半径，默认值为0.5。\r\n\t * @param height 胶囊的高度，默认值为2。\r\n\t * @param stacks 水平层数，默认为16，一般设为垂直层数的一半。\r\n\t * @param slices 垂直层数，默认为32。\r\n\t */\r\n\tstatic createCapsule(radius: number = 0.5, height: number = 2, stacks: number = 16, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1) * 2 + (slices + 1) * 2;\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2 * 2 + 2 * slices * 3;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar stackAngle: number = (Math.PI / 2.0) / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t//圆柱体高度的一半\r\n\t\tvar hcHeight: number = height / 2 - radius;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar stack: number, slice: number;\r\n\r\n\t\t//顶部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY + hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = (1 - stack / stacks) * ((Math.PI * radius / 2) / (height + Math.PI * radius));\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//底部半球\r\n\t\tfor (stack = 0; stack <= stacks; stack++) {\r\n\r\n\t\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\r\n\t\t\t\tposX = radius * Math.cos(stack * stackAngle) * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\t\tposY = radius * Math.sin(-stack * stackAngle);\r\n\t\t\t\tposZ = radius * Math.cos(stack * stackAngle) * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY - hcHeight;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = posX;\r\n\t\t\t\tvertices[vc++] = posY;\r\n\t\t\t\tvertices[vc++] = posZ;\r\n\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 1 - slice / slices;\r\n\t\t\t\tvertices[vc++] = ((stack / stacks) * (Math.PI * radius / 2) + (height + Math.PI * radius / 2)) / (height + Math.PI * radius);\r\n\r\n\t\t\t\tif (stack < stacks) {\r\n\r\n\t\t\t\t\t// First\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + 1;\r\n\t\t\t\t\t// Second\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice;\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices);\r\n\t\t\t\t\tindices[ic++] = verticeCount + (stack * (slices + 1)) + slice + (slices + 1);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tverticeCount += (stacks + 1) * (slices + 1);\r\n\r\n\t\t//侧壁\r\n\t\tfor (slice = 0; slice <= slices; slice++) {\r\n\t\t\tposX = radius * Math.cos(slice * sliceAngle + Math.PI);\r\n\t\t\tposY = hcHeight;\r\n\t\t\tposZ = radius * Math.sin(slice * sliceAngle + Math.PI);\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - slice * 1 / slices;\r\n\t\t\tvertices[vc++] = (Math.PI * radius / 2) / (height + Math.PI * radius);\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = (Math.PI * radius / 2 + height) / (height + Math.PI * radius);\r\n\t\t}\r\n\r\n\t\tfor (slice = 0; slice < slices; slice++) {\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount;\r\n\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = slice + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = slice + verticeCount + 1;\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a cone mesh.\r\n\t * @param radius The radius of the base of the cone. Default is 0.5.\r\n\t * @param height The height of the cone. Default is 1.\r\n\t * @param slices The number of segments around the base of the cone. Default is 32.\r\n\t * @return The created Mesh instance.\r\n\t * @zh 创建一个圆锥体网格。\r\n\t * @param radius 圆锥底面的半径，默认值为0.5。\r\n\t * @param height 圆锥的高度，默认值为1。\r\n\t * @param slices 圆锥底面圆周的分段数，默认为32。\r\n\t * @return 创建的网格实例。\r\n\t */\r\n\tstatic createCone(radius: number = 0.5, height: number = 1, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2;\r\n\t\tvar indexCount: number = 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar normal: Vector3 = new Vector3();\r\n\t\tvar downV3: Vector3 = new Vector3(0, -1, 0);\r\n\t\tvar upPoint: Vector3 = new Vector3(0, halfHeight, 0);\r\n\t\tvar downPoint: Vector3 = new Vector3();\r\n\t\tvar v3: Vector3 = new Vector3();\r\n\t\tvar q4: Quaternion = new Quaternion();\r\n\t\tvar rotateAxis: Vector3 = new Vector3();\r\n\t\tvar rotateRadius: number;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\r\n\t\t\tnormal.x = posX;\r\n\t\t\tnormal.y = 0;\r\n\t\t\tnormal.z = posZ;\r\n\t\t\tdownPoint.x = posX;\r\n\t\t\tdownPoint.y = -posY;\r\n\t\t\tdownPoint.z = posZ;\r\n\t\t\tVector3.subtract(downPoint, upPoint, v3);\r\n\t\t\tVector3.normalize(v3, v3);\r\n\t\t\trotateRadius = Math.acos(Vector3.dot(downV3, v3));\r\n\t\t\tVector3.cross(downV3, v3, rotateAxis);\r\n\t\t\tVector3.normalize(rotateAxis, rotateAxis);\r\n\t\t\tQuaternion.createFromAxisAngle(rotateAxis, rotateRadius, q4);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\tVector3.transformQuat(normal, q4, normal);\r\n\t\t\tVector3.normalize(normal, normal);\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = normal.x;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.x;\r\n\t\t\tvertices[vc++] = normal.y;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.y;\r\n\t\t\tvertices[vc++] = normal.z;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = normal.z;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a cylinder mesh.\r\n\t * @param radius The radius of the cylinder. Default is 0.5.\r\n\t * @param height The height of the cylinder. Default is 2.\r\n\t * @param slices The number of vertical segments of the cylinder. Default is 32.\r\n\t * @return The created Mesh instance.\r\n\t * @zh 创建一个圆柱体网格。\r\n\t * @param radius 圆柱的半径，默认值为0.5。\r\n\t * @param height 圆柱的高度，默认值为2。\r\n\t * @param slices 圆柱的垂直层数，默认为32。\r\n\t * @return 创建的网格实例。\r\n\t */\r\n\tstatic createCylinder(radius: number = 0.5, height: number = 2, slices: number = 32): Mesh {\r\n\t\t//(this._released) || (dispose());//如果已存在，则释放资源\r\n\t\tvar vertexCount: number = (slices + 1 + 1) + (slices + 1) * 2 + (slices + 1 + 1);\r\n\t\tvar indexCount: number = 3 * slices + 6 * slices + 3 * slices;\r\n\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\t\t//顶点索引\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\tvar halfHeight: number = height / 2;\r\n\t\tvar curAngle: number = 0;\r\n\t\tvar verticeCount: number = 0;\r\n\t\tvar posX: number = 0;\r\n\t\tvar posY: number = 0;\r\n\t\tvar posZ: number = 0;\r\n\r\n\t\tvar vc: number = 0;\r\n\t\tvar ic: number = 0;\r\n\r\n\t\t//顶\r\n\t\tfor (var tv: number = 0; tv <= slices; tv++) {\r\n\r\n\t\t\tif (tv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = 1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = tv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = 1;\r\n\t\t\tvertices[vc++] = 0;\r\n\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\t\t}\r\n\r\n\t\tfor (var ti: number = 0; ti < slices; ti++) {\r\n\t\t\tindices[ic++] = 0;\r\n\t\t\tindices[ic++] = ti + 1;\r\n\t\t\tindices[ic++] = ti + 2;\r\n\t\t}\r\n\t\tverticeCount += slices + 1 + 1;\r\n\r\n\t\t//壁\r\n\t\tfor (var rv: number = 0; rv <= slices; rv++) {\r\n\t\t\tcurAngle = rv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = -posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posX;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 0;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = posZ;\r\n\t\t\t//uv    \r\n\t\t\tvertices[vc++] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1 - rv * 1 / slices;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc + (slices + 1) * 8 - 1] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvc += (slices + 1) * 8;\r\n\r\n\t\tfor (var ri: number = 0; ri < slices; ri++) {\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount;\r\n\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1);\r\n\t\t\tindices[ic++] = ri + verticeCount + (slices + 1) + 1;\r\n\t\t\tindices[ic++] = ri + verticeCount + 1;\r\n\r\n\t\t}\r\n\r\n\t\tverticeCount += 2 * (slices + 1);\r\n\r\n\t\t//底\r\n\t\tfor (var bv: number = 0; bv <= slices; bv++) {\r\n\t\t\tif (bv === 0) {\r\n\t\t\t\t//pos\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -halfHeight;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//normal\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\tvertices[vc++] = -1;\r\n\t\t\t\tvertices[vc++] = 0;\r\n\t\t\t\t//uv\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\t\t\t\tvertices[vc++] = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurAngle = bv * sliceAngle;\r\n\t\t\tposX = Math.cos(curAngle + Math.PI) * radius;\r\n\t\t\tposY = -halfHeight;\r\n\t\t\tposZ = Math.sin(curAngle + Math.PI) * radius;\r\n\r\n\t\t\t//pos\r\n\t\t\tvertices[vc++] = posX;\r\n\t\t\tvertices[vc++] = posY;\r\n\t\t\tvertices[vc++] = posZ;\r\n\t\t\t//normal\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\tvertices[vc++] = -1;\r\n\t\t\tvertices[vc++] = 0;\r\n\t\t\t//uv\r\n\t\t\tvertices[vc++] = 0.5 + Math.cos(curAngle) * 0.5;\r\n\t\t\tvertices[vc++] = 0.5 + Math.sin(curAngle) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\tfor (var bi: number = 0; bi < slices; bi++) {\r\n\t\t\tindices[ic++] = 0 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 2 + verticeCount;\r\n\t\t\tindices[ic++] = bi + 1 + verticeCount;\r\n\t\t}\r\n\r\n\t\tverticeCount += slices + 1 + 1;\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a plane mesh.\r\n\t * @param long The length of the plane. Default is 10.\r\n\t * @param width The width of the plane. Default is 10.\r\n\t * @param stacks The number of longitudinal subdivisions. Default is 10.\r\n\t * @param slices The number of latitudinal subdivisions. Default is 10.\r\n\t * @return The created Mesh instance.\r\n\t * @zh 创建一个平面网格。\r\n\t * @param long 平面的长。默认值为10。\r\n\t * @param width 平面的宽。默认值为10。\r\n\t * @param stacks 纵向细分的数量。默认为10。\r\n\t * @param slices 横向细分的数量。默认为10。\r\n\t * @return 创建的网格实例。\r\n\t */\r\n\tstatic createPlane(long: number = 10, width: number = 10, stacks: number = 10, slices: number = 10): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = stacks * slices * 2 * 3;\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\t//单个顶点数据个数,总共字节数/单个字节数\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\t//顶点数组长度\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\t\tvar stacksLong: number = long / stacks;\r\n\t\tvar slicesWidth: number = width / slices;\r\n\r\n\t\tvar verticeCount: number = 0;\r\n\r\n\t\tfor (var i: number = 0; i <= slices; i++) {\r\n\r\n\t\t\tfor (var j: number = 0; j <= stacks; j++) {\r\n\r\n\t\t\t\tvertices[verticeCount++] = j * stacksLong - halfLong;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = i * slicesWidth - halfWidth;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = 1;\r\n\t\t\t\tvertices[verticeCount++] = 0;\r\n\t\t\t\tvertices[verticeCount++] = j * 1 / stacks;\r\n\t\t\t\tvertices[verticeCount++] = i * 1 / slices;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar indiceIndex: number = 0;\r\n\r\n\t\tfor (i = 0; i < slices; i++) {\r\n\r\n\t\t\tfor (j = 0; j < stacks; j++) {\r\n\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j;\r\n\t\t\t\tindices[indiceIndex++] = i * (stacks + 1) + j + 1;\r\n\t\t\t\tindices[indiceIndex++] = (i + 1) * (stacks + 1) + j + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a quad mesh.\r\n\t * @param long The length of the quad. Default is 1.\r\n\t * @param width The width of the quad. Default is 1.\r\n\t * @return The created Mesh instance.\r\n\t * @zh 创建一个四边形网格。\r\n\t * @param long 四边形的长度。默认是1。\r\n\t * @param width 四边形的宽度。默认是1。\r\n\t * @return 创建的网格实例。\r\n\t */\r\n\tstatic createQuad(long: number = 1, width: number = 1): Mesh {\r\n\t\t//定义顶点数据结构\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar halfLong: number = long / 2;\r\n\t\tvar halfWidth: number = width / 2;\r\n\r\n\t\tvar vertices: Float32Array = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0, halfLong, halfWidth, 0, 0, 0, 1, 1, 0, -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1, halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\r\n\t\tvar indices: Uint16Array = new Uint16Array([0, 1, 2, 3, 2, 1]);\r\n\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n\r\n    /**\r\n     * @en Creates a sphere mesh.\r\n     * @param radius The radius of the sphere. Default is 0.5.\r\n     * @param stacks The number of stacks, typically used for the vertical slices. Default is 32.\r\n     * @param slices The number of slices, typically used for the horizontal circles. Default is 32.\r\n     * @return The created Mesh instance.\r\n     * @zh 创建一个球体网格。\r\n     * @param radius 球体的半径。默认是0.5。\r\n     * @param stacks 水平层数，通常用作垂直切分。默认是32。\r\n     * @param slices 垂直层数，通常用作水平圆周切分。默认是32。\r\n     * @return 创建的网格实例。\r\n     */\r\n\tstatic createSphere(radius: number = 0.5, stacks: number = 32, slices: number = 32): Mesh {\r\n\t\tvar vertexCount: number = (stacks + 1) * (slices + 1);\r\n\t\tvar indexCount: number = (3 * stacks * (slices + 1)) * 2;\r\n\r\n\t\tvar indices: Uint16Array = new Uint16Array(indexCount);\r\n\t\tvar vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n\t\tvar vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n\t\tvar vertices: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n\r\n\t\tvar stackAngle: number = Math.PI / stacks;\r\n\t\tvar sliceAngle: number = (Math.PI * 2.0) / slices;\r\n\r\n\t\t// Generate the group of Stacks for the sphere  \r\n\t\tvar vertexIndex: number = 0;\r\n\t\tvertexCount = 0;\r\n\t\tindexCount = 0;\r\n\r\n\t\tfor (var stack: number = 0; stack < (stacks + 1); stack++) {\r\n\t\t\tvar r: number = Math.sin(stack * stackAngle);\r\n\t\t\tvar y: number = Math.cos(stack * stackAngle);\r\n\r\n\t\t\t// Generate the group of segments for the current Stack  \r\n\t\t\tfor (var slice: number = 0; slice < (slices + 1); slice++) {\r\n\t\t\t\tvar x: number = r * Math.sin(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvar z: number = r * Math.cos(slice * sliceAngle + Math.PI * 1 / 2);\r\n\t\t\t\tvertices[vertexCount + 0] = x * radius;\r\n\t\t\t\tvertices[vertexCount + 1] = y * radius;\r\n\t\t\t\tvertices[vertexCount + 2] = z * radius;\r\n\r\n\t\t\t\tvertices[vertexCount + 3] = x;\r\n\t\t\t\tvertices[vertexCount + 4] = y;\r\n\t\t\t\tvertices[vertexCount + 5] = z;\r\n\r\n\t\t\t\tvertices[vertexCount + 6] = slice / slices;\r\n\t\t\t\tvertices[vertexCount + 7] = stack / stacks;\r\n\t\t\t\tvertexCount += vertexFloatStride;\r\n\t\t\t\tif (stack != (stacks - 1)) {\r\n\t\t\t\t\t// First Face\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + 1;\r\n\t\t\t\t\t// Second \r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices);\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex;\r\n\t\t\t\t\tindices[indexCount++] = vertexIndex + (slices + 1);\r\n\t\t\t\t\tvertexIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn PrimitiveMesh._createMesh(vertexDeclaration, vertices, indices);\r\n\t}\r\n}\r\n\r\n","#if !defined(Utils_lib)\r\n    #define Utils_lib\r\n\r\n#endif // Utils_lib","#define SHADER_NAME BlitFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"FastApproximateAntiAliasing.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n#ifdef FXAA\r\n    gl_FragColor = FXAAMain(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.zw);\r\n#else\r\n    vec4 mainColor = texture2D(u_MainTex, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTex\r\n    mainColor = gammaToLinear(mainColor);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    gl_FragColor = mainColor;\r\n#endif\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport BlitVS from \"./BlitScreen.vs\";\r\nimport BlitFS from \"./BlitScreen.fs\";\r\nimport FXAA from \"./FastApproximateAntiAliasing.glsl\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\n\r\nimport ColorGradingGLSL from \"./ColorGrading.glsl\";\r\nimport TonemappingGLSL from \"./Tonemapping.glsl\";\r\nimport LUTGLSL from \"./LUT.glsl\";\r\n\r\nimport LUTBuilderFS from \"./LUTBuilder.fs\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\nexport class BlitScreenShaderInit {\r\n\r\n    static init() {\r\n        Shader3D.addInclude(\"FastApproximateAntiAliasing.glsl\", FXAA);\r\n\r\n        Shader3D.addInclude(\"ColorGrading.glsl\", ColorGradingGLSL);\r\n        Shader3D.addInclude(\"Tonemapping.glsl\", TonemappingGLSL);\r\n        Shader3D.addInclude(\"LUT.glsl\", LUTGLSL);\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n        };\r\n\r\n        let shader = Shader3D.add(\"BlitScreen\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        let subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let blitPass = subShader.addShaderPass(BlitVS, BlitFS);\r\n        blitPass.statefirst = true;\r\n        let blitState = blitPass.renderState;\r\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        blitState.depthWrite = false;\r\n        blitState.cull = RenderState.CULL_NONE;\r\n        blitState.blend = RenderState.BLEND_DISABLE;\r\n\r\n        let transparentShader = Shader3D.add(\"BlitScreen_Transparnet\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        let transparentSubShader = new SubShader(attributeMap, uniformMap);\r\n        transparentShader.addSubShader(transparentSubShader);\r\n        let blitPassTrans = transparentSubShader.addShaderPass(BlitVS, BlitFS);\r\n        blitPass.statefirst = true;\r\n        blitState = blitPassTrans.renderState;\r\n        blitState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        blitState.depthWrite = false;\r\n        blitState.cull = RenderState.CULL_NONE;\r\n        blitState.blend = RenderState.BLEND_ENABLE_ALL;\r\n        blitState.srcBlend = RenderState.BLENDPARAM_SRC_ALPHA;\r\n        blitState.dstBlend = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\r\n        this.lutBuilderInit();\r\n    }\r\n\r\n    private static lutBuilderInit() {\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4, //x:width,y:height,z:1/width,w:1/height\r\n            \"u_LutParams\": ShaderDataType.Vector4\r\n        };\r\n\r\n        let shader = Shader3D.add(\"LUTBuilder\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        let subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(BlitVS, LUTBuilderFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        pass.renderState.depthWrite = false;\r\n        pass.renderState.cull = RenderState.CULL_NONE;\r\n        pass.renderState.blend = RenderState.BLEND_DISABLE;\r\n        pass.statefirst = true;\r\n    }\r\n\r\n}","#if !defined(FXAA_lib)\r\n    #define FXAA_lib\r\n#ifdef FXAA\r\n    #define EDGE_THRESHOLD_MIN 0.0312\r\n    #define EDGE_THRESHOLD_MAX 0.125\r\n    #define QUALITY(q)\t       ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\r\n    #define ITERATIONS\t       12\r\n    #define SUBPIXEL_QUALITY   0.75\r\n\r\nfloat rgb2luma(in vec3 rgb)\r\n{\r\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\r\n}\r\n\r\nvec3 textureOffsetbyScreenSize(in sampler2D mainTex, in vec2 uv, in vec2 offset, in vec2 inverseScreenSize)\r\n{\r\n    vec2 sampleruv = uv + inverseScreenSize * offset; // u_texturesize表示每个像素的偏移量\r\n    return texture2D(mainTex, sampleruv).rgb;\r\n}\r\n\r\nvec4 FXAAMain(in sampler2D mainTex, in vec2 texuv, in vec2 inverseScreenSize)\r\n{\r\n\r\n    vec4 mainColor = texture2D(mainTex, texuv);\r\n    vec3 colorCenter = mainColor.rgb;\r\n    // Luma at the current fragment\r\n    float lumaCenter = rgb2luma(colorCenter);\r\n\r\n    // Luma at the four direct neighbours of the current fragment.\r\n    float lumaDown = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, -1), inverseScreenSize));\r\n    float lumaUp = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, 1), inverseScreenSize));\r\n    float lumaLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 0), inverseScreenSize));\r\n    float lumaRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 0), inverseScreenSize));\r\n\r\n    // Find the maximum and minimum luma around the current fragment.\r\n    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\r\n    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\r\n\r\n    // Compute the delta.\r\n    float lumaRange = lumaMax - lumaMin;\r\n\r\n    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.\r\n    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))\r\n\t{\r\n\t    return mainColor;\r\n\t}\r\n\r\n    // Query the 4 remaining corners lumas.\r\n    float lumaDownLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, -1), inverseScreenSize));\r\n    float lumaUpRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 1), inverseScreenSize));\r\n    float lumaUpLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 1), inverseScreenSize));\r\n    float lumaDownRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, -1), inverseScreenSize));\r\n\r\n    // Combine the four edges lumas (using intermediary variables for future computations with the same values).\r\n    float lumaDownUp = lumaDown + lumaUp;\r\n    float lumaLeftRight = lumaLeft + lumaRight;\r\n\r\n    // Same for corners\r\n    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\r\n    float lumaDownCorners = lumaDownLeft + lumaDownRight;\r\n    float lumaRightCorners = lumaDownRight + lumaUpRight;\r\n    float lumaUpCorners = lumaUpRight + lumaUpLeft;\r\n\r\n    // Compute an estimation of the gradient along the horizontal and vertical axis.\r\n    float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorners) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorners);\r\n    float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorners) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorners);\r\n\r\n    // Is the local edge horizontal or vertical ?\r\n    bool isHorizontal = (edgeHorizontal >= edgeVertical);\r\n\r\n    // Choose the step size (one pixel) accordingly.\r\n    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;\r\n\r\n    // Select the two neighboring texels lumas in the opposite direction to the local edge.\r\n    float luma1 = isHorizontal ? lumaDown : lumaLeft;\r\n    float luma2 = isHorizontal ? lumaUp : lumaRight;\r\n    // Compute gradients in this direction.\r\n    float gradient1 = luma1 - lumaCenter;\r\n    float gradient2 = luma2 - lumaCenter;\r\n\r\n    // Which direction is the steepest ?\r\n    bool is1Steepest = abs(gradient1) >= abs(gradient2);\r\n\r\n    // Gradient in the corresponding direction, normalized.\r\n    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));\r\n\r\n    // Average luma in the correct direction.\r\n    float lumaLocalAverage = 0.0;\r\n    if (is1Steepest)\r\n\t{\r\n\t    // Switch the direction\r\n\t    stepLength = -stepLength;\r\n\t    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\r\n\t}\r\n    else\r\n\t{\r\n\t    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\r\n\t}\r\n\r\n    // Shift UV in the correct direction by half a pixel.\r\n    vec2 currentUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    currentUv.y += stepLength * 0.5;\r\n\t}\r\n    else\r\n\t{\r\n\t    currentUv.x += stepLength * 0.5;\r\n\t}\r\n\r\n    // Compute offset (for each iteration step) in the right direction.\r\n    vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);\r\n    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.\r\n    vec2 uv1 = currentUv - offset * QUALITY(0);\r\n    vec2 uv2 = currentUv + offset * QUALITY(0);\r\n\r\n    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.\r\n    float lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n    float lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n    lumaEnd1 -= lumaLocalAverage;\r\n    lumaEnd2 -= lumaLocalAverage;\r\n\r\n    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n    bool reached1 = abs(lumaEnd1) >= gradientScaled;\r\n    bool reached2 = abs(lumaEnd2) >= gradientScaled;\r\n    bool reachedBoth = reached1 && reached2;\r\n\r\n    // If the side is not reached, we continue to explore in this direction.\r\n    if (!reached1)\r\n\t{\r\n\t    uv1 -= offset * QUALITY(1);\r\n\t}\r\n    if (!reached2)\r\n\t{\r\n\t    uv2 += offset * QUALITY(1);\r\n\t}\r\n\r\n    // If both sides have not been reached, continue to explore.\r\n    if (!reachedBoth)\r\n\t{\r\n\r\n\t    for (int i = 2; i < ITERATIONS; i++)\r\n\t\t{\r\n\t\t    // If needed, read luma in 1st direction, compute delta.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd1 = lumaEnd1 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If needed, read luma in opposite direction, compute delta.\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd2 = lumaEnd2 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n\t\t    reached1 = abs(lumaEnd1) >= gradientScaled;\r\n\t\t    reached2 = abs(lumaEnd2) >= gradientScaled;\r\n\t\t    reachedBoth = reached1 && reached2;\r\n\r\n\t\t    // If the side is not reached, we continue to explore in this direction, with a variable quality.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    uv1 -= offset * QUALITY(i);\r\n\t\t\t}\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    uv2 += offset * QUALITY(i);\r\n\t\t\t}\r\n\r\n\t\t    // If both sides have been reached, stop the exploration.\r\n\t\t    if (reachedBoth)\r\n\t\t\t{\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // Compute the distances to each side edge of the edge (!).\r\n    float distance1 = isHorizontal ? (texuv.x - uv1.x) : (texuv.y - uv1.y);\r\n    float distance2 = isHorizontal ? (uv2.x - texuv.x) : (uv2.y - texuv.y);\r\n\r\n    // In which direction is the side of the edge closer ?\r\n    bool isDirection1 = distance1 < distance2;\r\n    float distanceFinal = min(distance1, distance2);\r\n\r\n    // Thickness of the edge.\r\n    float edgeThickness = (distance1 + distance2);\r\n\r\n    // Is the luma at center smaller than the local average ?\r\n    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\r\n\r\n    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).\r\n    bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\r\n    bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\r\n\r\n    // Only keep the result in the direction of the closer side of the edge.\r\n    bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\r\n\r\n    // UV offset: read in the direction of the closest side of the edge.\r\n    float pixelOffset = -distanceFinal / edgeThickness + 0.5;\r\n\r\n    // If the luma variation is incorrect, do not offset.\r\n    float finalOffset = correctVariation ? pixelOffset : 0.0;\r\n\r\n    // Sub-pixel shifting\r\n    // Full weighted average of the luma over the 3x3 neighborhood.\r\n    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\r\n    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.\r\n    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\r\n    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\r\n    // Compute a sub-pixel offset based on this delta.\r\n    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\r\n\r\n    // Pick the biggest of the two offsets.\r\n    finalOffset = max(finalOffset, subPixelOffsetFinal);\r\n\r\n    // Compute the final UV coordinates.\r\n    vec2 finalUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    finalUv.y += finalOffset * stepLength;\r\n\t}\r\n    else\r\n\t{\r\n\t    finalUv.x += finalOffset * stepLength;\r\n\t}\r\n\r\n    // Read the color at the new UV coordinates, and use it.\r\n    return texture2D(mainTex, finalUv);\r\n}\r\n#endif//FXAA\r\n#endif // Color_lib\r\n","#if !defined(ColorGrading_lib)\r\n    #define ColorGrading_lib\r\n\r\nconst float ACEScc_MAX = 1.4679964;\r\nconst float ACEScc_MIDGRAY = 0.4135884;\r\n\r\nconst float LogC_cut = 0.011361;\r\nconst float LogC_a = 5.555556;\r\nconst float LogC_b = 0.047996;\r\nconst float LogC_c = 0.244161;\r\nconst float LogC_d = 0.386036;\r\nconst float LogC_e = 5.301883;\r\nconst float LogC_f = 0.092819;\r\n\r\nfloat linearToLogC(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_cut)\r\n\t{\r\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\r\n\t}\r\n    else\r\n\t{\r\n\t    o = LogC_e * x + LogC_f;\r\n\t}\r\n    return o;\r\n}\r\n\r\nvec3 linearToLogC(vec3 x)\r\n{\r\n    vec3 logc;\r\n    logc.x = linearToLogC(x.x);\r\n    logc.y = linearToLogC(x.y);\r\n    logc.z = linearToLogC(x.z);\r\n    return logc;\r\n}\r\n\r\nfloat logCToLinear(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_e * LogC_cut + LogC_f)\r\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\r\n    else\r\n\to = (x - LogC_f) / LogC_e;\r\n    return o;\r\n}\r\n\r\nvec3 logCToLinear(vec3 x)\r\n{\r\n    vec3 linear;\r\n    linear.x = logCToLinear(x.x);\r\n    linear.y = logCToLinear(x.y);\r\n    linear.z = logCToLinear(x.z);\r\n    return linear;\r\n}\r\n\r\n// Hue, Saturation, Value\r\n// Ranges:\r\n//  Hue [0.0, 1.0]\r\n//  Sat [0.0, 1.0]\r\n//  Lum [0.0, HALF_MAX]\r\nvec3 RgbToHsv(vec3 c)\r\n{\r\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n    float d = q.x - min(q.w, q.y);\r\n    const float e = 1.0e-4;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 HsvToRgb(vec3 c)\r\n{\r\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\r\n}\r\n\r\nfloat RotateHue(float value, float low, float hi)\r\n{\r\n    return (value < low)\r\n            ? value + hi\r\n            : (value > hi)\r\n                ? value - hi\r\n                : value;\r\n}\r\n\r\n\r\nconst mat3 Linear_to_LMS_MAT = mat3(\r\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\r\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\r\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\r\n\r\nconst mat3 LMS_to_Linear_MAT = mat3(\r\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\r\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\r\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\r\n\r\n// white balance\r\nuniform vec3 u_ColorBalance;\r\n\r\n// split toning\r\nuniform vec4 u_SplitShadows;\r\nuniform vec3 u_Splithighlights;\r\n\r\n// shadows, midtones, highlights\r\nuniform vec3 u_Shadows;\r\nuniform vec3 u_Midtones;\r\nuniform vec3 u_Highlights;\r\nuniform vec4 u_Limits;\r\n\r\n// lift, gamma, gain\r\nuniform vec3 u_Lift;\r\nuniform vec3 u_Gamma;\r\nuniform vec3 u_Gain;\r\n\r\n//color adjusted\r\nuniform vec4 u_ColorFilter;\r\nuniform vec4 u_HueSatCon;\r\n\r\nfloat luminance(in vec3 color)\r\n{\r\n    #ifdef ACES\r\n    float luma = dot(color, AP1_RGB2Y);\r\n    #else\r\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\r\n    #endif // ACES\r\n    return luma;\r\n}\r\n\r\nvec3 softlight(vec3 base, vec3 blend)\r\n{\r\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\r\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\r\n    vec3 t = step(0.5, blend);\r\n    return r2 * t + (1.0 - t) * r1;\r\n}\r\n\r\n// input linear sRGB\r\n// if ACES tonemap, calculate in ACEScg, return ACEScg\r\n// else calculate in logC, return linear sRGB\r\nvec3 colorGrade(in vec3 color)\r\n{\r\n    // White balance in LMS space\r\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\r\n    colorLMS *= u_ColorBalance.xyz;\r\n    color = LMS_to_Linear_MAT * colorLMS;\r\n\r\n    // Do contrast in log after white balance\r\n    #ifdef ACES\r\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\r\n    #else\r\n        vec3 colorLog = linearToLogC(color);\r\n    #endif\r\n    \r\n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\r\n\r\n\r\n    #ifdef ACES\r\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\r\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\r\n    #else\r\n        color = logCToLinear(colorLog);\r\n    #endif // ACES\r\n\r\n    // Color filter is just an unclipped multiplier\r\n    color = color * u_ColorFilter.rgb;\r\n\r\n    color = max(vec3(0.0), color);\r\n\r\n    // split toning\r\n    float balance = u_SplitShadows.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    float splitLuma = saturate(luminance(color)) + balance;\r\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\r\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\r\n    gamma = softlight(gamma, splitShadows);\r\n    gamma = softlight(gamma, splitHeighlights);\r\n    color = gammaToLinear(gamma);\r\n\r\n    // shadows, midtones, highlights\r\n    float luma = luminance(color);\r\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\r\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\r\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\r\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\r\n\r\n    // Lift, gamma, gain\r\n    color = color * u_Gain.xyz + u_Lift.xyz;\r\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\r\n    \r\n    // HSV operations\r\n    vec3 hsv = RgbToHsv(color);\r\n    // Hue Shift & Hue Vs Hue\r\n    float hue = hsv.x + u_HueSatCon.x;\r\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\r\n    color = HsvToRgb(hsv);\r\n\r\n    // Global saturation\r\n    luma = luminance(color);\r\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\r\n    \r\n    return color;\r\n}\r\n\r\n#endif // ColorGrading_lib","#if !defined(Tonemapping_lib)\r\n    #define Tonemapping_lib\r\n\r\n// ACES Tonemapping color grading in ACEScg space\r\nvec3 tonemap(in vec3 ap1)\r\n{\r\n    vec3 color = ap1;\r\n\r\n    #ifdef ACES\r\n    vec3 aces = AP1_to_AP0_MAT * color;\r\n    vec3 oces = RRT(aces);\r\n    color = ODT_sRGB_100nits(oces);\r\n    #endif // ACES\r\n\r\n    // todo other tonemap\r\n\r\n    return color;\r\n}\r\n\r\n#endif // Tonemapping_lib","#if !defined(LUT_lib)\r\n    #define LUT_lib\r\n\r\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\r\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\r\n{\r\n    uvw.z *= scaleOffset.z;\r\n\r\n    float shift = floor(uvw.z);\r\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\r\n    uvw.x += shift * scaleOffset.y;\r\n\r\n    uvw.xyz = mix(\r\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\r\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\r\n\tuvw.z - shift);\r\n    return uvw;\r\n}\r\n\r\n#endif // LUT_lib","#define SHADER_NAME LutBuilder\r\n\r\n#include \"Color.glsl\";\r\n\r\n#ifdef ACES\r\n    #include \"ACES.glsl\";\r\n#endif // ACES\r\n\r\n#include \"ColorGrading.glsl\";\r\n\r\n#include \"Tonemapping.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\r\nvec3 lutValue(vec2 uv, vec4 params)\r\n{\r\n    vec3 color;\r\n    uv -= params.yz;\r\n    color.r = fract(uv.x * params.x);\r\n    color.b = uv.x - color.r / params.x;\r\n    color.g = uv.y;\r\n    return color * params.w;\r\n}\r\n\r\n// internal lut logC space\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec3 color = lutValue(uv, u_LutParams);\r\n    color = logCToLinear(color);\r\n    vec3 grade = colorGrade(color);\r\n    vec3 tone = tonemap(grade);\r\n\r\n    gl_FragColor = vec4(tone, 1.0);\r\n}","\r\n#define SHADER_NAME UnlitVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n#ifdef UV\r\n    v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\n    v_VertexColor = vertex.vertexColor;\r\n#endif // COLOR\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    gl_Position = getPositionCS(positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n","#define SHADER_NAME DepthVS\r\n\r\n#include \"DepthVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    mat4 normalMat = transpose(inverse(worldMat));\r\n    vec3 normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\r\n\r\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\r\n    gl_Position = remapPositionZ(positionCS);\r\n}","#define SHADER_NAME DepthFS\r\n\r\n#include \"DepthFrag.glsl\";\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = getDepthColor();\r\n}","import UnlitVS from \"./Unlit.vs\";\r\nimport UnlitFS from \"./Unlit.fs\";\r\nimport DepthVS from \"../depth/Depth.vs\";\r\nimport DepthFS from \"../depth/Depth.fs\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n\r\nexport class UnlitShaderInit {\r\n\r\n    static init() {\r\n\r\n        let uniformMap = {\r\n            \"UnlitBlock\": {\r\n                \"u_AlbedoColor\": ShaderDataType.Color,\r\n                \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            },\r\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_AlphaTestValue\": 0.5\r\n        }\r\n\r\n        let shader = Shader3D.add(\"Unlit\", true, false);\r\n        shader.shaderType = ShaderFeatureType.D3;\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let forwardPass = subShader.addShaderPass(UnlitVS, UnlitFS);\r\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\r\n    }\r\n}","\r\n#define SHADER_NAME UNLITFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    vec3 color = u_AlbedoColor.rgb;\r\n    float alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    vec4 vertexColor = v_VertexColor;\r\n    color *= vertexColor.rgb;\r\n    alpha *= vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef UV\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    #ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n\r\n\t#ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n\t#endif // Gamma_u_AlbedoTexture\r\n\r\n    color *= albedoSampler.rgb;\r\n    alpha *= albedoSampler.a;\r\n    #endif // ALBEDOTEXTURE\r\n#endif // UV\r\n\r\n#ifdef ALPHATEST\r\n    if (alpha < u_AlphaTestValue)\r\n\tdiscard;\r\n#endif // ALPHATEST\r\n\r\n#ifdef FOG\r\n    color = scenUnlitFog(color);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(color, alpha);\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport BlinnPhongCommonGLSL from \"./BlinnPhongCommon.glsl\";\r\nimport BlinnPhongVertexGLSL from \"./BlinnPhongVertex.glsl\";\r\nimport BlinnPhongFragGLSL from \"./BlinnPhongFrag.glsl\";\r\nimport BlinnPhongVS from \"./BlinnPhong.vs\";\r\nimport BlinnPhongFS from \"./BlinnPhong.fs\";\r\nimport DepthVS from \"../depth/Depth.vs\";\r\nimport DepthFS from \"../depth/Depth.fs\";\r\nimport DepthNormalVS from \"./BlinnPhongDepthNormal.vs\";\r\nimport DepthNormalFS from \"./BlinnPhongDepthNormal.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\nexport class BlinnPhongShaderInit {\r\n\r\n    static init() {\r\n\r\n        Shader3D.addInclude(\"BlinnPhongCommon.glsl\", BlinnPhongCommonGLSL);\r\n        Shader3D.addInclude(\"BlinnPhongVertex.glsl\", BlinnPhongVertexGLSL);\r\n        Shader3D.addInclude(\"BlinnPhongFrag.glsl\", BlinnPhongFragGLSL);\r\n\r\n        let uniformMap = {\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n\r\n            \"u_DiffuseColor\": ShaderDataType.Color,\r\n            \"u_DiffuseTexture\": ShaderDataType.Texture2D,\r\n            \"u_AlbedoIntensity\": ShaderDataType.Float,\r\n\r\n            \"u_MaterialSpecular\": ShaderDataType.Color,\r\n            \"u_SpecularTexture\": ShaderDataType.Texture2D,\r\n\r\n            \"u_Shininess\": ShaderDataType.Float,\r\n\r\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoIntensity\": 1.0,\r\n            \"u_DiffuseColor\": Color.WHITE,\r\n            \"u_MaterialSpecular\": Color.WHITE,\r\n            \"u_Shininess\": 0.078125,\r\n            \"u_AlphaTestValue\": 0.5,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n        };\r\n\r\n        let shader = Shader3D.add(\"BLINNPHONG\", true, true);\r\n        shader.shaderType = ShaderFeatureType.D3;\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let shadingPass = subShader.addShaderPass(BlinnPhongVS, BlinnPhongFS);\r\n        let shadowPass = subShader.addShaderPass(DepthVS, DepthFS, \"ShadowCaster\");\r\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\r\n    }\r\n\r\n}","#if !defined(BlinnPhongCommon_lib)\r\n    #define BlinnPhongCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // BlinnPhongCommon_lib","#if !defined(BlinnPhongVertex_lib)\r\n    #define BlinnPhongVertex_lib\r\n\r\n    #include \"ShadingVertex.glsl\";\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n}\r\n\r\n#endif // BlinnPhongVertex_lib","#if !defined(BlinnPhongFrag_lib)\r\n    #define BlinnPhongFrag_lib\r\n\r\n    #include \"BlinnPhongLighting.glsl\";\r\n\r\n    #include \"ShadingFrag.glsl\";\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 BlinnPhongLighting(const in Surface surface, const in PixelParams pixel)\r\n{\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 positionWS = info.positionWS;\r\n    vec3 normalWS = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    vec3 lightColor = vec3(0.0, 0.0, 0.0);\r\n\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount) break;\r\n\t    DirectionLight directionLight = getDirectionLight(i, positionWS);\r\n\t    // if (directionLight.lightMode == LightMode_Mix) //兼容WGSL\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (directionLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(directionLight);\r\n\t        lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\r\n        #endif\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, positionWS);\r\n\t    // if (pointLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (pointLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(pointLight, normalWS, positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.x)\r\n            #endif\r\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\r\n        #endif\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, positionWS);\r\n\t    // if (spotLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (spotLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(spotLight, normalWS, positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.y)\r\n            #endif\r\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = BlinnPhongGI(surface, info);\r\n\r\n    return lightColor + giColor;\r\n}\r\n\r\n#endif // BlinnPhongFrag_lib","#define SHADER_NAME BlinnPhongVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"BlinnPhongVertex.glsl\";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n","#define SHADER_NAME BlinnPhongFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"BlinnPhongFrag.glsl\";\r\n\r\nvoid getBinnPhongSurfaceParams(inout Surface surface, in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    surface.diffuseColor = u_DiffuseColor.rgb;\r\n    surface.alpha = u_DiffuseColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    surface.diffuseColor *= pixel.vertexColor.xyz;\r\n    surface.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 diffuseSampler = texture2D(u_DiffuseTexture, uv);\r\n    #ifdef Gamma_u_DiffuseTexture\r\n    diffuseSampler = gammaToLinear(diffuseSampler);\r\n    #endif // Gamma_u_DiffuseTexture\r\n    surface.diffuseColor *= u_DiffuseColor.rgb * diffuseSampler.rgb * u_AlbedoIntensity;\r\n    surface.alpha *= diffuseSampler.a;\r\n#endif // DIFFUSEMAP\r\n\r\n    surface.diffuseColor *= u_AlbedoIntensity;\r\n\r\n    surface.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALMAP\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    surface.normalTS = normalSampler;\r\n#endif // NORMALMAP\r\n\r\n#ifdef SPECULARMAP\r\n    vec4 specularSampler = texture2D(u_SpecularTexture, uv);\r\n    #ifdef Gamma_u_SpecularTexture\r\n    specularSampler = gammaToLinear(specularSampler);\r\n    #endif // Gamma_u_SpecularTexture\r\n    surface.gloss = specularSampler.rgb;\r\n#else // SPECULARMAP\r\n    #ifdef DIFFUSEMAP\r\n    surface.gloss = vec3(diffuseSampler.a);\r\n    #else // DIFFUSEMAP\r\n    surface.gloss = vec3(1.0, 1.0, 1.0);\r\n    #endif // DIFFUSEMAP\r\n#endif // SPECULARMAP\r\n    surface.specularColor = u_MaterialSpecular.rgb;\r\n    surface.shininess = u_Shininess;\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    Surface surface;\r\n    getBinnPhongSurfaceParams(surface, pixel);\r\n\r\n#ifdef ALPHATEST\r\n    if (surface.alpha < u_AlphaTestValue)\r\n\t{\r\n\t    discard;\r\n\t}\r\n#endif // ALPHATEST\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n\r\n    surfaceColor = BlinnPhongLighting(surface, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor = sceneLitFog(surfaceColor);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(surfaceColor, surface.alpha);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","#define SHADER_NAME BlinnPhongDephtNormalVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"BlinnPhongVertex.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME BlinnPhongDephtNormalFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"ShadingFrag.glsl\";\r\n\r\n#include \"DepthNormalFrag.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALMAP\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalSampler;\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALMAP\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\"\r\nimport { VertexTrail } from \"../../core/trail/VertexTrail\";\r\nimport TrailVS from \"./Trail.vs\";\r\nimport TrailFS from \"./Trail.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nexport class TrailShaderInit {\r\n    static init() {\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_Position': [VertexTrail.TRAIL_POSITION0, ShaderDataType.Vector4],\r\n            'a_OffsetVector': [VertexTrail.TRAIL_OFFSETVECTOR, ShaderDataType.Vector3],\r\n            'a_Texcoord0X': [VertexTrail.TRAIL_TEXTURECOORDINATE0X, ShaderDataType.Float],\r\n            'a_Texcoord0Y': [VertexTrail.TRAIL_TEXTURECOORDINATE0Y, ShaderDataType.Float],\r\n            'a_BirthTime': [VertexTrail.TRAIL_TIME0, ShaderDataType.Float],\r\n            'a_Color': [VertexTrail.TRAIL_COLOR, ShaderDataType.Vector4],\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            \"u_MainTexture\": ShaderDataType.Texture2D,\r\n            \"u_MainColor\": ShaderDataType.Color,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_MainColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n        };\r\n\r\n        let shader = Shader3D.add(\"Trail\", false, false);\r\n        shader.shaderType = ShaderFeatureType.Effect;\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let forwardPass = subShader.addShaderPass(TrailVS, TrailFS);\r\n    }\r\n}","#define SHADER_NAME TrailVS\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Scene.glsl\"\r\n#include \"SceneFogInput.glsl\"\r\n\r\n// Sprite uniform\r\nuniform float u_CurTime;\r\nuniform float u_LifeTime;\r\nuniform vec4 u_WidthCurve[10];\r\nuniform int u_WidthCurveKeyLength;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\r\n{\r\n    float t2 = t * t;\r\n    float t3 = t2 * t;\r\n    float a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n    float b = t3 - 2.0 * t2 + t;\r\n    float c = t3 - t2;\r\n    float d = -2.0 * t3 + 3.0 * t2;\r\n    return a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\r\n}\r\n\r\nfloat getCurWidth(in float normalizeTime)\r\n{\r\n    float width;\r\n    if (normalizeTime == 0.0)\r\n\t{\r\n\t    width = u_WidthCurve[0].w;\r\n\t}\r\n    else if (normalizeTime >= 1.0)\r\n\t{\r\n\t    width = u_WidthCurve[u_WidthCurveKeyLength - 1].w;\r\n\t}\r\n    else\r\n\t{\r\n\t    for (int i = 0; i < 10; i++)\r\n\t\t{\r\n\t\t    if (normalizeTime == u_WidthCurve[i].x)\r\n\t\t\t{\r\n\t\t\t    width = u_WidthCurve[i].w;\r\n\t\t\t    break;\r\n\t\t\t}\r\n\r\n\t\t    vec4 lastFrame = u_WidthCurve[i];\r\n\t\t    vec4 nextFrame = u_WidthCurve[i + 1];\r\n\t\t    if (normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\r\n\t\t\t{\r\n\t\t\t    float duration = nextFrame.x - lastFrame.x;\r\n\t\t\t    float t = (normalizeTime - lastFrame.x) / duration;\r\n\t\t\t    float outTangent = lastFrame.z;\r\n\t\t\t    float inTangent = nextFrame.y;\r\n\t\t\t    float value1 = lastFrame.w;\r\n\t\t\t    float value2 = nextFrame.w;\r\n\t\t\t    width = hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    return width;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\r\n\r\n    v_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\r\n\r\n    v_Color = a_Color;\r\n\r\n    vec3 cameraPos = (u_View * a_Position).rgb;\r\n    gl_Position = u_Projection * vec4(cameraPos + a_OffsetVector * getCurWidth(normalizeTime), 1.0);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}","#define SHADER_NAME TrailFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nvoid main()\r\n{\r\n    vec4 color = 2.0 * u_MainColor * v_Color;\r\n#ifdef MAINTEXTURE\r\n    vec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTexture\r\n    mainTextureColor = gammaToLinear(mainTextureColor);\r\n    #endif // Gamma_u_MainTexture\r\n\r\n    color *= mainTextureColor;\r\n#endif\r\n\r\n#ifdef FOG\r\n    color.xyz = scenUnlitFog(color.xyz);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport PBRStandardVS from \"./pbrStandard.vs\";\r\nimport PBRStandardFS from \"./pbrStandard.fs\";\r\n\r\nimport PBRDepthVS from \"../depth/Depth.vs\";\r\nimport PBRDepthFS from \"../depth/Depth.fs\";\r\n\r\nimport DepthNormalVS from \"./PBRStandardDepthNormal.vs\";\r\nimport DepthNormalFS from \"./PBRStandardDepthNormal.fs\";\r\n\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n\r\nexport class PBRStandardShaderInit {\r\n\r\n    static init() {\r\n\r\n        let uniformMap = {\r\n            \"u_AlbedoColor\": ShaderDataType.Color,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            \"u_NormalScale\": ShaderDataType.Float,\r\n            \"u_Metallic\": ShaderDataType.Float,\r\n            \"u_Smoothness\": ShaderDataType.Float,\r\n            \"u_OcclusionStrength\": ShaderDataType.Float,\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n            \"u_EmissionColor\": ShaderDataType.Color,\r\n            \"u_EmissionIntensity\": ShaderDataType.Float,\r\n            \"u_AlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\r\n            \"u_OcclusionTexture\": ShaderDataType.Texture2D,\r\n            \"u_EmissionTexture\": ShaderDataType.Texture2D,\r\n            \"u_MetallicGlossTexture\": ShaderDataType.Texture2D,\r\n            // anisotrioy\r\n            \"u_AnisotropyStrength\": ShaderDataType.Float,\r\n            \"u_AnisotropyTexture\": ShaderDataType.Texture2D,\r\n            \"u_AnisotropyRotation\": ShaderDataType.Float,\r\n            // clear coat\r\n            \"u_ClearCoatFactor\": ShaderDataType.Float,\r\n            \"u_ClearCoatTexture\": ShaderDataType.Texture2D,\r\n            \"u_ClearCoatRoughness\": ShaderDataType.Float,\r\n            \"u_ClearCoatRoughnessTexture\": ShaderDataType.Texture2D,\r\n            \"u_ClearCoatNormalTexture\": ShaderDataType.Texture2D,\r\n            //detail \r\n            \"u_DetailAlbedoTexture\": ShaderDataType.Texture2D,\r\n            \"u_DetailNormalTexture\": ShaderDataType.Texture2D,\r\n            \"u_DetailNormalScale\": ShaderDataType.Float,\r\n            \"u_DetailTillingOffset\": ShaderDataType.Vector4\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_AlbedoColor\": Color.WHITE,\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_DetailTillingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_NormalScale\": 1,\r\n            \"u_DetailNormalScale\": 1,\r\n            \"u_Metallic\": 0,\r\n            \"u_Smoothness\": 0.5,\r\n            \"u_OcclusionStrength\": 1,\r\n            \"u_EmissionColor\": Color.WHITE,\r\n            \"u_EmissionIntensity\": 1,\r\n            \"u_AlphaTestValue\": 0.5,\r\n            // anisotrioy\r\n            \"u_AnisotropyStrength\": 0,\r\n            \"u_AnisotropyRotation\": 0,\r\n            // clear coat\r\n            \"u_ClearCoatFactor\": 0,\r\n            \"u_ClearCoatRoughness\": 0,\r\n        };\r\n\r\n        let shader = Shader3D.add(\"PBR\", true, true);\r\n        shader.shaderType = ShaderFeatureType.D3;\r\n        shader._surportVolumetricGI = true;\r\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let shadingPass = subShader.addShaderPass(PBRStandardVS, PBRStandardFS);\r\n        let shadowPass = subShader.addShaderPass(PBRDepthVS, PBRDepthFS, \"ShadowCaster\");\r\n        let depthNormal = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\r\n    }\r\n\r\n}","#define SHADER_NAME PBRStandardVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFogInput.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"PBRVertex.glsl\";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\n    #ifdef UV\r\n    v_DetailUV = transformUV(vertex.texCoord0, u_DetailTillingOffset);\r\n    #else // UV\r\n    v_DetailUV = vec2(0.0);\r\n    #endif\r\n#endif\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}","#define SHADER_NAME PBRStandardFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"PBRMetallicFrag.glsl\";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n    #define ColorSpaceDouble vec3(4.59479380, 4.59479380, 4.59479380);\r\nvec3 BlendNormals(vec3 n1, vec3 n2)\r\n{\r\n    return normalize(vec3(n1.xy + n2.xy, n1.z * n2.z));\r\n}\r\n#endif // DETAILTEXTURE || DETAILNORMAL\r\n\r\nvoid initSurfaceInputs(inout SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    inputs.diffuseColor = u_AlbedoColor.rgb;\r\n    inputs.alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\r\n    inputs.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n    inputs.alphaTest = u_AlphaTestValue;\r\n\r\n#ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n    #ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    inputs.diffuseColor *= albedoSampler.rgb;\r\n    inputs.alpha *= albedoSampler.a;\r\n#endif // ALBEDOTEXTURE\r\n\r\n// Detail Albedo\r\n#ifdef DETAILTEXTURE\r\n    vec3 detailSampler = texture2D(u_DetailAlbedoTexture, v_DetailUV).rgb;\r\n    #ifdef Gamma_u_DetailAlbedoTexture\r\n    detailSampler = gammaToLinear(detailSampler);\r\n    #endif // Gamma_u_DetailAlbedoTexture\r\n    detailSampler *= ColorSpaceDouble;\r\n    inputs.diffuseColor *= detailSampler;\r\n#endif\r\n\r\n    inputs.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALTEXTURE\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    inputs.normalTS = normalScale(normalSampler, u_NormalScale);\r\n#endif\r\n\r\n#ifdef DETAILNORMAL\r\n    vec3 detailnormalSampler = texture2D(u_DetailNormalTexture, v_DetailUV).rgb;\r\n    detailnormalSampler = normalize(detailnormalSampler * 2.0 - 1.0);\r\n    detailnormalSampler.y *= -1.0;\r\n    detailnormalSampler = normalScale(detailnormalSampler, u_DetailNormalScale);\r\n    inputs.normalTS = BlendNormals(inputs.normalTS, detailnormalSampler);\r\n#endif\r\n\r\n    inputs.metallic = u_Metallic;\r\n    inputs.smoothness = u_Smoothness;\r\n\r\n#ifdef METALLICGLOSSTEXTURE\r\n\r\n    vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\r\n    #ifdef Gamma_u_MetallicGlossTexture\r\n    metallicSampler = gammaToLinear(metallicSampler);\r\n    #endif // Gamma_u_MetallicGlossTexture\r\n\r\n    inputs.metallic = metallicSampler.x;\r\n\r\n    #ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t#ifdef ALBEDOTEXTURE\r\n    inputs.smoothness = (albedoSampler.a * u_Smoothness);\r\n\t#endif // ALBEDOTEXTURE\r\n    #else // SMOOTHNESSSOURCE_METALLICTEXTURE_ALPHA\r\n    inputs.smoothness = (metallicSampler.a * u_Smoothness);\r\n    #endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\r\n#endif // METALLICGLOSSTEXTURE\r\n\r\n    inputs.occlusion = 1.0;\r\n#ifdef OCCLUSIONTEXTURE\r\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\r\n    #ifdef Gamma_u_OcclusionTexture\r\n    occlusionSampler = gammaToLinear(occlusionSampler);\r\n    #endif // Gamma_u_OcclusionTexture\r\n\r\n    float occlusion = occlusionSampler.g;\r\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\r\n#endif // OCCLUSIONTEXTURE\r\n\r\n    inputs.emissionColor = vec3(0.0);\r\n#ifdef EMISSION\r\n    inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\r\n    #ifdef EMISSIONTEXTURE\r\n    vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\r\n\t#ifdef Gamma_u_EmissionTexture\r\n    emissionSampler = gammaToLinear(emissionSampler);\r\n\t#endif // Gamma_u_EmissionTexture\r\n    inputs.emissionColor *= emissionSampler.rgb;\r\n    #endif // EMISSIONTEXTURE\r\n#endif // EMISSION\r\n\r\n#ifdef CLEARCOAT\r\n    inputs.clearCoat = u_ClearCoatFactor;\r\n    inputs.clearCoatRoughness = u_ClearCoatRoughness;\r\n\r\n    #ifdef CLEARCOATMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearCoatSampler = texture2D(u_ClearCoatTexture, uv);\r\n    inputs.clearCoat *= clearCoatSampler.r;\r\n    #endif // CLEARCOATMAP\r\n\r\n    #ifdef CLEARCOAT_ROUGHNESSMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearcoatSampleRoughness = texture2D(u_ClearCoatRoughnessTexture, uv);\r\n    inputs.clearCoatRoughness *= clearcoatSampleRoughness.g;\r\n    #endif // CLEARCOAT_ROUGHNESSMAP\r\n\r\n    #ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalSampler = texture2D(u_ClearCoatNormalTexture, uv).rgb;\r\n    clearCoatNormalSampler = normalize(clearCoatNormalSampler * 2.0 - 1.0);\r\n    clearCoatNormalSampler.y *= -1.0;\r\n    inputs.clearCoatNormalTS = clearCoatNormalSampler;\r\n    #endif // CLEARCOAT_NORMAL\r\n#endif // CLEARCOAT\r\n\r\n#ifdef ANISOTROPIC\r\n    inputs.anisotropy = u_AnisotropyStrength;\r\n    vec2 direction = vec2(1.0, 0.0);\r\n\r\n    #ifdef ANISOTROPYMAP\r\n    vec3 anisotropySampler = texture2D(u_AnisotropyTexture, uv).rgb;\r\n\r\n    inputs.anisotropy *= anisotropySampler.b;\r\n    direction = anisotropySampler.xy * 2.0 - 1.0;\r\n    #endif // ANISOTROPYMAP\r\n\r\n    vec2 anisotropyRotation = vec2(cos(u_AnisotropyRotation), sin(u_AnisotropyRotation));\r\n    mat2 rotationMatrix = mat2(anisotropyRotation.x, anisotropyRotation.y, -anisotropyRotation.y, anisotropyRotation.x);\r\n    inputs.anisotropyDirection = rotationMatrix * direction;\r\n\r\n#endif // ANISOTROPIC\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    SurfaceInputs inputs;\r\n    initSurfaceInputs(inputs, pixel);\r\n\r\n    vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\r\n#endif // FOG\r\n\r\n    gl_FragColor = surfaceColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME PBRStandardDepthNormalVS\r\n\r\n#include \"Math.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n\r\n#include \"Sprite3DVertex.glsl\";\r\n\r\n#include \"VertexCommon.glsl\";\r\n\r\n#include \"PBRVertex.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    sharePixelParams(pixel);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME PBRStandardDepthNormalFS\r\n\r\n#include \"Color.glsl\";\r\n\r\n#include \"Scene.glsl\";\r\n\r\n#include \"Camera.glsl\";\r\n#include \"Sprite3DFrag.glsl\";\r\n\r\n#include \"ShadingFrag.glsl\";\r\n\r\n#include \"DepthNormalFrag.glsl\";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALTEXTURE\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalScale(normalSampler, u_NormalScale);\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALTEXTURE\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport SkyboxVS from \"./SkyBox.vs\";\r\nimport SkyboxFS from \"./SkyBox.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\nexport class SkyBoxShaderInit {\r\n\r\n    static init() {\r\n\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_TintColor\": ShaderDataType.Color,\r\n            \"u_Exposure\": ShaderDataType.Float,\r\n            \"u_Rotation\": ShaderDataType.Float,\r\n            \"u_CubeTexture\": ShaderDataType.TextureCube\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_TintColor\": new Color(0.5, 0.5, 0.5, 0.5),\r\n            \"u_Exposure\": 1,\r\n            \"u_Rotation\": 0\r\n        };\r\n\r\n        let shader = Shader3D.add(\"SkyBox\");\r\n        shader.shaderType = ShaderFeatureType.Sky;\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyboxVS, SkyboxFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.renderState.depthWrite = false;\r\n        pass.renderState.stencilWrite = false;\r\n        pass.statefirst = true;\r\n\r\n\r\n    }\r\n\r\n}","#define SHADER_NAME SkyBoxVS\r\n\r\n#include \"SkyCommon.glsl\";\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nvoid main()\r\n{\r\n    // todo 这个转换 ？\r\n    v_Texcoord = vec3(-a_Position.x, a_Position.yz); //转换坐标系\r\n\r\n    vec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n    // gl_Position = getPositionCS(position.xyz);\r\n\r\n    gl_Position = u_SkyProjectionViewMat * position;\r\n\r\n    gl_Position = remapSkyPositionZ(gl_Position);\r\n}","#define SHADER_NAME SkyBoxFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvoid main()\r\n{\r\n    vec3 uv = v_Texcoord;\r\n    vec4 cubeSampler = textureCube(u_CubeTexture, uv);\r\n#ifdef Gamma_u_CubeTexture\r\n    cubeSampler = gammaToLinear(cubeSampler);\r\n#endif // Gamma_u_CubeTexture\r\n\r\n    vec3 color = cubeSampler.rgb * u_TintColor.rgb * pow(u_Exposure, 2.2) * c_ColorSpace.rgb;\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { VertexShuriKenParticle } from \"../../graphics/Vertex/VertexShuriKenParticle\";\r\nimport ShurikenVS from \"./particleShuriKen.vs\";\r\nimport ShurikenFS from \"./particleShuriKen.fs\";\r\nimport MathGradient from \"./MathGradient.glsl\";\r\nimport ParticleSpriteVS from \"./particleShuriKenSpriteVS.glsl\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n/**\r\n * ParticleShuriKen Shader init\r\n */\r\nexport class ParticleShuriKenShaderInit{\r\n    static init(){\r\n        \r\n        Shader3D.addInclude(\"MathGradient.glsl\", MathGradient);\r\n        Shader3D.addInclude(\"particleShuriKenSpriteVS.glsl\", ParticleSpriteVS);\r\n\r\n        let attributeMap: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_CornerTextureCoordinate': [VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0, ShaderDataType.Vector4],\r\n\t\t \t'a_MeshPosition': [VertexShuriKenParticle.PARTICLE_POSITION0,ShaderDataType.Vector3],\r\n            'a_MeshColor':[VertexShuriKenParticle.PARTICLE_COLOR0,ShaderDataType.Vector4],\r\n\t\t \t'a_MeshTextureCoordinate': [VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,ShaderDataType.Vector2],\r\n\t\t \t'a_ShapePositionStartLifeTime': [VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,ShaderDataType.Vector4],\r\n\t\t    'a_DirectionTime': [VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,ShaderDataType.Vector4],\r\n\t\t \t'a_StartColor': [VertexShuriKenParticle.PARTICLE_STARTCOLOR0,ShaderDataType.Vector4],\r\n\t\t \t'a_StartSize': [VertexShuriKenParticle.PARTICLE_STARTSIZE,ShaderDataType.Vector3],\r\n\t\t \t'a_StartRotation0': [VertexShuriKenParticle.PARTICLE_STARTROTATION,ShaderDataType.Vector3],\r\n\t\t \t'a_StartSpeed': [VertexShuriKenParticle.PARTICLE_STARTSPEED,ShaderDataType.Float],\r\n\t\t \t'a_Random0': [VertexShuriKenParticle.PARTICLE_RANDOM0,ShaderDataType.Vector4],\r\n\t\t \t'a_Random1': [VertexShuriKenParticle.PARTICLE_RANDOM1,ShaderDataType.Vector4],\r\n\t\t \t'a_SimulationWorldPostion': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,ShaderDataType.Vector3],\r\n\t\t \t'a_SimulationWorldRotation': [VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,ShaderDataType.Vector4],\r\n\t\t \t'a_SimulationUV': [VertexShuriKenParticle.PARTICLE_SIMULATIONUV,ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_Tintcolor\": ShaderDataType.Color,\r\n            \"u_texture\": ShaderDataType.Texture2D,\r\n            \"u_TilingOffset\": ShaderDataType.Vector4,\r\n            \"u_AlphaTestValue\": ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_Tintcolor\": new Color(0.5, 0.5, 0.5, 0.5),\r\n            \"u_TilingOffset\": new Vector4(1, 1, 0, 0),\r\n            \"u_AlphaTestValue\": 0.5\r\n        };\r\n\r\n        let shader = Shader3D.add(\"PARTICLESHURIKEN\", false, false);\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        shader.shaderType = ShaderFeatureType.Effect;\r\n        let forwardPass = subShader.addShaderPass(ShurikenVS, ShurikenFS);\r\n\r\n    }\r\n}","#ifdef GRAPHICS_API_GLES3\r\nvec2 getVec2ValueByIndexFromeVec4Array(in vec4 gradientNumbers[2],in int vec2Index){\r\n\tint v4Index = int(floor(float(vec2Index)/2.0));\r\n\tint offset =(vec2Index- v4Index*2)*2;\r\n\treturn vec2(gradientNumbers[v4Index][offset],gradientNumbers[v4Index][offset+1]);\r\n}\r\n\r\nvec2 getVec2ValueByIndexFromeVec4Array_COLORCOUNT(in vec4 gradientNumbers[COLORCOUNT_HALF],in int vec2Index){\r\n\tint v4Index = int(floor(float(vec2Index)/2.0));\r\n\tint offset =(vec2Index- v4Index*2)*2;\r\n\tvec4 v4Value = gradientNumbers[v4Index];\r\n\treturn vec2(v4Value[offset],v4Value[offset+1]);\r\n}\r\n#endif\r\n\r\nfloat getCurValueFromGradientFloat(in vec4 gradientNumbers[2], in float normalizedAge)\r\n{\r\n    float curValue;\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientNumbers[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientNumbers[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientNumbers[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientNumbers[1].zw;\r\n\r\n\t#endif\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t    vec2 gradientNumber;\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\tgradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i);\r\n\t\t#else\r\n\t\t\tgradientNumber = gradientNumbersVec2[i];\r\n\t\t#endif\r\n\t    float key = gradientNumber.x;\r\n\t\tcurValue = gradientNumber.y;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientNumber;\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\t\tlastGradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i - 1);\r\n\t\t\t#else\r\n\t\t\t\tlastGradientNumber = gradientNumbersVec2[i-1];\r\n\t\t\t#endif\r\n\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t    float age = max((normalizedAge - lastKey), 0.0) / (key - lastKey);\r\n\t\t    curValue = mix(lastGradientNumber.y, gradientNumber.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return curValue;\r\n}\r\n\r\nfloat getTotalValueFromGradientFloat(in vec4 gradientNumbers[2],\r\n    in float normalizedAge)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientNumbers[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientNumbers[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientNumbers[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientNumbers[1].zw;\r\n\t#endif\r\n\t\r\n\t#ifdef GRAPHICS_API_GLES3\r\n\t\tvec2 val = getVec2ValueByIndexFromeVec4Array(gradientNumbers,0);\t\r\n\t#else\r\n\t\tvec2 val = gradientNumbersVec2[0];\r\n\t#endif\r\n\r\n\tfloat keyTime = min(normalizedAge,val.x);\r\n    float totalValue = keyTime * val.y;\r\n\r\n\tfloat lastSpeed = 0.;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\tvec2 gradientNumber= getVec2ValueByIndexFromeVec4Array(gradientNumbers,i);\r\n\t\t\tvec2 lastGradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i - 1);\r\n\t\t#else\r\n\t\t\tvec2 gradientNumber = gradientNumbersVec2[i];\r\n\t\t\tvec2 lastGradientNumber =gradientNumbersVec2[i - 1];\r\n\t\t#endif\r\n\r\n\t    float key = gradientNumber.x;\r\n\t\tfloat lastValue = lastGradientNumber.y;\r\n\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t\tfloat time =  max((normalizedAge - lastKey), 0.);\r\n\t\t\tfloat age = time / (key-lastKey);\r\n\t\t\tlastSpeed = mix(lastValue, gradientNumber.y,age);\r\n\t\t    totalValue += (lastValue + mix(lastValue, gradientNumber.y, age)) / 2.0 * a_ShapePositionStartLifeTime.w * time;\r\n\t\t    keyTime = normalizedAge;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t    else if(key > keyTime)\r\n\t\t{\r\n\t\t    totalValue += (lastValue + gradientNumber.y) / 2.0 * a_ShapePositionStartLifeTime.w * (key - lastGradientNumber.x);\r\n\t\t\tkeyTime = key;\r\n\t\t\tlastSpeed = gradientNumber.y;\r\n\t\t}\r\n\t}\r\n    return totalValue + max(normalizedAge-keyTime, 0.) * lastSpeed * a_ShapePositionStartLifeTime.w;\r\n}\r\n\r\nvec4 getColorFromGradient(in vec4 gradientAlphas[COLORCOUNT_HALF],\r\n    in vec4 gradientColors[COLORCOUNT],\r\n    in float normalizedAge, in vec4 keyRanges)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\t#ifdef COLORKEYCOUNT_8\r\n\t\t\tvec2 resoult[8];\r\n\t\t\tresoult[0] = gradientAlphas[0].xy;\r\n\t\t\tresoult[1] = gradientAlphas[0].zw;\r\n\t\t\tresoult[2] = gradientAlphas[1].xy;\r\n\t\t\tresoult[3] = gradientAlphas[1].zw;\r\n\t\t\tresoult[4] = gradientAlphas[2].xy;\r\n\t\t\tresoult[5] = gradientAlphas[2].zw;\r\n\t\t\tresoult[6] = gradientAlphas[3].xy;\r\n\t\t\tresoult[7] = gradientAlphas[3].zw;\r\n\t\t#else\r\n\t\t\tvec2 resoult[4];\r\n\t\t\tresoult[0] = gradientAlphas[0].xy;\r\n\t\t\tresoult[1] = gradientAlphas[0].zw;\r\n\t\t\tresoult[2] = gradientAlphas[1].xy;\r\n\t\t\tresoult[3] = gradientAlphas[1].zw;\r\n\t\t#endif\r\n\t#endif\r\n\r\n    float alphaAge = clamp(normalizedAge, keyRanges.z, keyRanges.w);\r\n    vec4 overTimeColor;\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t    \tvec2 gradientAlpha = getVec2ValueByIndexFromeVec4Array_COLORCOUNT(gradientAlphas,i);\r\n\t\t#else\r\n\t\t\tvec2 gradientAlpha = resoult[i];\r\n\t\t#endif\r\n\t    float alphaKey = gradientAlpha.x;\r\n\t    if (alphaKey >= alphaAge)\r\n\t\t{\r\n\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t    \tvec2 lastGradientAlpha =getVec2ValueByIndexFromeVec4Array_COLORCOUNT(gradientAlphas,i - 1);\r\n\t\t\t#else\r\n\t\t\t\tvec2 lastGradientAlpha = resoult[i - 1];\r\n\t\t\t#endif\r\n\r\n\t\t    float lastAlphaKey = lastGradientAlpha.x;\r\n\t\t    float age = clamp((alphaAge - lastAlphaKey) / (alphaKey - lastAlphaKey), 0.0, 1.0);\r\n\t\t    overTimeColor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n\r\n    float colorAge = clamp(normalizedAge, keyRanges.x, keyRanges.y);\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t    vec4 gradientColor = gradientColors[i];\r\n\t    float colorKey = gradientColor.x;\r\n\t    if (colorKey >= colorAge)\r\n\t\t{\r\n\t\t    vec4 lastGradientColor = gradientColors[i - 1];\r\n\t\t    float lastColorKey = lastGradientColor.x;\r\n\t\t    float age = (colorAge - lastColorKey) / (colorKey - lastColorKey);\r\n\t\t    overTimeColor.rgb = mix(gradientColors[i - 1].yzw, gradientColor.yzw, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return overTimeColor;\r\n}\r\n\r\nfloat getFrameFromGradient(in vec4 gradientFrames[2], in float normalizedAge)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientFrames[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientFrames[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientFrames[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientFrames[1].zw;\r\n\t#endif\r\n    float overTimeFrame;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t    \tvec2 gradientFrame = getVec2ValueByIndexFromeVec4Array(gradientFrames,i);\r\n\t\t#else\r\n\t\t\tvec2 gradientFrame = gradientNumbersVec2[i];\r\n\t\t#endif\r\n\t    float key = gradientFrame.x;\r\n\t\toverTimeFrame = gradientFrame.y;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\t\tvec2 lastGradientFrame = getVec2ValueByIndexFromeVec4Array(gradientFrames,i-1);\r\n\t\t\t#else\r\n\t\t\t\tvec2 lastGradientFrame = gradientNumbersVec2[i-1];\r\n\t\t\t#endif\r\n\t\t    float lastKey = lastGradientFrame.x;\r\n\t\t\tfloat age = max((normalizedAge-lastKey), 0.)/(key-lastKey);\r\n\t\t    overTimeFrame = mix(lastGradientFrame.y, gradientFrame.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return floor(overTimeFrame);\r\n}\r\n","// sprite Uniform\r\nuniform float u_CurrentTime;\r\nuniform vec3 u_Gravity;\r\nuniform vec2 u_DragConstanct;\r\nuniform vec3 u_WorldPosition;\r\nuniform vec4 u_WorldRotation;\r\nuniform int u_ThreeDStartRotation;\r\nuniform int u_Shape;\r\nuniform int u_ScalingMode;\r\nuniform vec3 u_PositionScale;\r\nuniform vec3 u_SizeScale;\r\n\r\nuniform float u_StretchedBillboardLengthScale;\r\nuniform float u_StretchedBillboardSpeedScale;\r\nuniform int u_SimulationSpace;\r\n\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n    uniform int u_VOLSpaceType;\r\n\r\n    uniform vec4 u_VOLVelocityGradientX[2];  // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientY[2];  // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientZ[2];  // x为key,y为速度 z为key,w为速度\r\n\r\n    uniform vec4 u_VOLVelocityGradientMaxX[2]; // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientMaxY[2]; // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientMaxZ[2]; // x为key,y为速度 z为key,w为速度\r\n#endif\r\n\r\n#ifdef COLORKEYCOUNT_8\r\n    #define COLORCOUNT 8\r\n    #define COLORCOUNT_HALF 4\r\n#else\r\n    #define COLORCOUNT 4\r\n    #define COLORCOUNT_HALF 2\r\n#endif\r\n\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n    uniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\n    uniform vec4 u_ColorOverLifeGradientAlphas[COLORCOUNT_HALF]; // x为key,y为Alpha,z为key,w为Alpha \r\n    uniform vec4 u_ColorOverLifeGradientRanges;\r\n    uniform vec4 u_MaxColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\n    uniform vec4 u_MaxColorOverLifeGradientAlphas[COLORCOUNT_HALF]; // x为key,y为Alpha,z为key,w为Alpha \r\n    uniform vec4 u_MaxColorOverLifeGradientRanges;\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    uniform vec4 u_SOLSizeGradient[2]; // x为key,y为尺寸, z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMax[2]; // x为key,y为尺寸, z为key,w为尺寸\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    uniform vec4 u_SOLSizeGradientX[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientY[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientZ[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxX[2];// x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxY[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxZ[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n#endif\r\n\r\n#ifdef ROTATIONOVERLIFETIME\r\n    uniform vec4 u_ROLAngularVelocityGradient[2]; // x为key,y为旋转,z为key,w为旋转\r\n    uniform vec4 u_ROLAngularVelocityGradientMax[2]; // x为key,y为旋转,z为key,w为旋转,\r\n#endif\r\n\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n    uniform vec4 u_ROLAngularVelocityGradientX[2]; //x为key,y为旋转速度,z为key,w为旋转速度\r\n    uniform vec4 u_ROLAngularVelocityGradientY[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientZ[2];\r\n\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxX[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxY[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxZ[2];\r\n#endif\r\n\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n    uniform float u_TSACycles;\r\n    uniform vec2 u_TSASubUVLength;\r\n    uniform vec4 u_TSAGradientUVs[2]; // x为key,y为frame,z为key,w为frame\r\n    uniform vec4 u_TSAMaxGradientUVs[2]; // x为key,y为frame,z为key,w为frame\r\n#endif","#define SHADER_NAME ParticleVS\r\n\r\n#include \"Camera.glsl\";\r\n#include \"particleShuriKenSpriteVS.glsl\";\r\n#include \"Math.glsl\";\r\n#include \"MathGradient.glsl\";\r\n#include \"Color.glsl\";\r\n#include \"Scene.glsl\"\r\n#include \"SceneFogInput.glsl\"\r\n\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n\r\n//修改这里剔除没有用到的光照函数，增加粒子的编译速度\r\nvec2 TransformUV(vec2 texcoord, vec4 tilingOffset)\r\n{\r\n    vec2 transTexcoord = vec2(texcoord.x, texcoord.y - 1.0) * tilingOffset.xy + vec2(tilingOffset.z, -tilingOffset.w);\r\n    transTexcoord.y += 1.0;\r\n    return transTexcoord;\r\n}\r\n\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\nvec3 computeParticleLifeVelocity(in float normalizedAge)\r\n{\r\n    vec3 outLifeVelocity;\r\n    \toutLifeVelocity = vec3(\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t\t\ta_Random1.y),\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t\t\ta_Random1.z),\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t\t\ta_Random1.w));\r\n\r\n    return outLifeVelocity;\r\n}\r\n#endif\r\n\r\n// drag\r\nvec3 getStartPosition(vec3 startVelocity, float age, vec3 dragData)\r\n{\r\n    vec3 startPosition;\r\n    float lasttime = min(startVelocity.x / dragData.x, age);\r\n    startPosition = lasttime * (startVelocity - 0.5 * dragData * lasttime);\r\n    return startPosition;\r\n}\r\n\r\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity, in float age, in float normalizedAge, vec3 gravityVelocity, vec4 worldRotation, vec3 dragData)\r\n{\r\n    vec3 startPosition = getStartPosition(startVelocity, age, dragData);\r\n    vec3 lifePosition;\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n   \r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\tlifePosition = vec3(\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t\t\ta_Random1.y),\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t\t\ta_Random1.z),\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t\t\ta_Random1.w));\r\n    #endif\r\n\r\n    vec3 finalPosition;\r\n    if (u_VOLSpaceType == 0)\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition),\r\n\t\t    worldRotation);\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition,\r\n\t\t    worldRotation);\r\n\t}\r\n    else\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t}\r\n#else\r\n    // startPosition = startVelocity * age;\r\n    vec3 finalPosition;\r\n    if (u_ScalingMode != 2)\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t    worldRotation);\r\n    else\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t    worldRotation);\r\n#endif\r\n\r\n    if (u_SimulationSpace == 0)\r\n\tfinalPosition = finalPosition + a_SimulationWorldPostion;\r\n    else if (u_SimulationSpace == 1)\r\n\tfinalPosition = finalPosition + u_WorldPosition;\r\n\r\n    finalPosition += 0.5 * gravityVelocity * age;\r\n\r\n    return finalPosition;\r\n}\r\n\r\nvec4 computeParticleColor(in vec4 color, in float normalizedAge)\r\n{\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n    color *= mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,\r\n\t\t     u_ColorOverLifeGradientColors,\r\n\t\t     normalizedAge, u_ColorOverLifeGradientRanges),\r\n\tgetColorFromGradient(u_MaxColorOverLifeGradientAlphas,\r\n\t    u_MaxColorOverLifeGradientColors,\r\n\t    normalizedAge, u_MaxColorOverLifeGradientRanges),\r\n\ta_Random0.y);\r\n#endif\r\n    return color;\r\n}\r\n\r\nvec2 computeParticleSizeBillbard(in vec2 size, in float normalizedAge)\r\n{\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\ta_Random0.z);\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    size *= vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t     a_Random0.z),\r\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t    a_Random0.z));\r\n#endif\r\n\r\n    return size;\r\n}\r\n\r\n#ifdef RENDERMODE_MESH\r\nvec3 computeParticleSizeMesh(in vec3 size, in float normalizedAge)\r\n{\r\n\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    \tsize *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\t\t\t\t\ta_Random0.z);\r\n    #endif\r\n\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    \tsize *= vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t    \t a_Random0.z),\r\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t\t\t\t\ta_Random0.z),\r\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxZ, normalizedAge),\r\n\t\t\t\t\ta_Random0.z));\r\n    #endif\r\n\t\r\n    return size;\r\n}\r\n#endif\r\n\r\nfloat computeParticleRotationFloat(in float rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t\trotation += mix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),\r\n\t\t\ta_Random0.w);\r\n\t#endif\r\n\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\trotation += mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\t\t\tnormalizedAge),\r\n\t\tgetTotalValueFromGradientFloat(\r\n\t\t\tu_ROLAngularVelocityGradientMaxZ, normalizedAge),\r\n\t\ta_Random0.w);\r\n\t#endif\r\n    return rotation;\r\n}\r\n\r\n#if defined(RENDERMODE_MESH) && (defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE))\r\nvec3 computeParticleRotationVec3(in vec3 rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n    #ifdef ROTATIONOVERLIFETIME\r\n\t\t\trotation += mix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\r\n\t\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w);\r\n    #endif\r\n    \r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\trotation += vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\r\n\t\t\t\t\tnormalizedAge),\r\n\t\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,\r\n\t\t\t\t\tnormalizedAge),\r\n\t\t\t\ta_Random0.w),\r\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\r\n\t\t\tnormalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,\r\n\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w),\r\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\t\tnormalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,\r\n\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w));\r\n    #endif\r\n    return rotation;\r\n}\r\n#endif\r\n\r\nvec2 computeParticleUV(in vec2 uv, in float normalizedAge)\r\n{\r\n\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\r\n    float uvNormalizedAge = cycleNormalizedAge - floor(cycleNormalizedAge);\r\n    float frame = floor(mix(getFrameFromGradient(u_TSAGradientUVs, uvNormalizedAge),\r\n\tgetFrameFromGradient(u_TSAMaxGradientUVs, uvNormalizedAge),\r\n\ta_Random1.x));\r\n    float totalULength = frame * u_TSASubUVLength.x;\r\n    float floorTotalULength = floor(totalULength);\r\n    uv.x += totalULength - floorTotalULength;\r\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\r\n#endif\r\n    return uv;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float age = u_CurrentTime - a_DirectionTime.w;\r\n    float normalizedAge = age / a_ShapePositionStartLifeTime.w;\r\n    vec3 lifeVelocity;\r\n    if (normalizedAge < 1.0)\r\n\t{\r\n\t    vec3 startVelocity = a_DirectionTime.xyz * a_StartSpeed;\r\n\t\r\n\t\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\t\t\tlifeVelocity = computeParticleLifeVelocity(normalizedAge); //计算粒子生命周期速度\r\n\t\t#endif\r\n\t\r\n\t    vec3 gravityVelocity = u_Gravity * age;\r\n\r\n\t    vec4 worldRotation;\r\n\t    \r\n\t\tif (u_SimulationSpace == 0)\r\n\t\t\tworldRotation = a_SimulationWorldRotation;\r\n\t    else\r\n\t\t\tworldRotation = u_WorldRotation;\r\n\r\n\t    // drag\r\n\t    vec3 dragData = a_DirectionTime.xyz * mix(u_DragConstanct.x, u_DragConstanct.y, a_Random0.x);\r\n\t\t//miner 计算顶点位置\r\n\t    vec3 center = computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge, gravityVelocity, worldRotation, dragData); //计算粒子位置\r\n\r\n#ifdef SPHERHBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 cameraUpVector = normalize(u_CameraUp); // TODO:是否外面归一化\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\t    vec3 upVector = normalize(cross(sideVector, u_CameraDirection));\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    vec3 rotation = vec3(\r\n\t\t\ta_StartRotation0.xy,\r\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, rotation);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t    float c = cos(rot);\r\n\t\t    float s = sin(rot);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, a_StartRotation0);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float c = cos(a_StartRotation0.x);\r\n\t\t    float s = sin(a_StartRotation0.x);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #endif\r\n#endif\r\n\r\n#ifdef STRETCHEDBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 velocity;\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t    if (u_VOLSpaceType == 0)\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * (startVelocity + lifeVelocity),\r\n\t\t\t       worldRotation)\r\n\t\t    + gravityVelocity;\r\n\t    else\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + lifeVelocity + gravityVelocity;\r\n    #else\r\n\t    velocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + gravityVelocity;\r\n    #endif\r\n\r\n\t    vec3 cameraUpVector = normalize(velocity);\r\n\t    vec3 direction = normalize(center - u_CameraPos);\r\n\t    vec3 sideVector = normalize(cross(direction, normalize(velocity)));\r\n\r\n\t    sideVector = u_SizeScale.xzy * sideVector;\r\n\t    cameraUpVector = length(vec3(u_SizeScale.x, 0.0, 0.0)) * cameraUpVector;\r\n\r\n\t    vec2 size = computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\r\n\t    const mat2 rotaionZHalfPI = mat2(0.0, -1.0, 1.0, 0.0);\r\n\t    corner = rotaionZHalfPI * corner;\r\n\t    corner.y = corner.y - abs(corner.y);\r\n\r\n\t    float speed = length(velocity); // TODO:\r\n\t    center += sign(u_SizeScale.x) * (sign(u_StretchedBillboardLengthScale) * size.x * corner.x * sideVector + (speed * u_StretchedBillboardSpeedScale + size.y * u_StretchedBillboardLengthScale) * corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef HORIZONTALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 0.0, 1.0);\r\n\t    const vec3 sideVector = vec3(-1.0, 0.0, 0.0);\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef VERTICALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 1.0, 0.0);\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef RENDERMODE_MESH\r\n\t    vec3 size = computeParticleSizeMesh(a_StartSize, normalizedAge);\r\n\t\t#if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\tif (u_ThreeDStartRotation!=0)\r\n\t\t\t{\r\n\t\t\t\tvec3 rotation = vec3(\r\n\t\t\t\ta_StartRotation0.xy,\r\n\t\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, rotation),\r\n\t\t\t\tworldRotation);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t\t\t\t\tfloat angle = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t\t\t\t\tif (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\t\trotationByAxis(\r\n\t\t\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t\t\t\t\tangle),\r\n\t\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvec3 axis = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, -1.0, 0.0), float(u_Shape));\r\n\t\t\t\t\t\t\tif (u_SimulationSpace == 0)\r\n\t\t\t\t\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,axis,angle); //已验证\r\n\t\t\t\t\t\t\telse if (u_SimulationSpace == 1)\r\n\t\t\t\t\t\t\t\tcenter += rotationByQuaternions(u_SizeScale * rotationByAxis(a_MeshPosition * size, axis, angle),worldRotation); //已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t\t\t\t\t// TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\r\n\t\t\t\t\t\tvec3 angle = computeParticleRotationVec3(\r\n\t\t\t\t\t\tvec3(0.0, 0.0, -a_StartRotation0.x), age, normalizedAge);\r\n\t\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\trotationByEuler(u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\t\tvec3(angle.x, angle.y, angle.z)),\r\n\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t\t#endif\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    center += rotationByQuaternions(\r\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, a_StartRotation0),\r\n\t\t\tworldRotation); //已验证\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t{\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\t\tcenter += rotationByAxis(\r\n\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t\t\ta_StartRotation0.x);\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, normalize(cross(vec3(0.0, 0.0, 1.0), vec3(a_ShapePositionStartLifeTime.xy, 0.0))), a_StartRotation0.x),\r\n\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t}\r\n\t\t    else\r\n\t\t\t{\r\n\t\t\t\tvec3 axis = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, -1.0, 0.0), float(u_Shape));\r\n\t\t\t\tif (u_SimulationSpace == 0)\r\n\t\t\t\t\tcenter += u_SizeScale * rotationByAxis(a_MeshPosition * size, axis, a_StartRotation0.x);\r\n\t\t\t\telse if (u_SimulationSpace == 1)\r\n\t\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, axis, a_StartRotation0.x),\r\n\t\t\t\t\tworldRotation);\r\n\t\t\t}\r\n\t\t}\r\n    #endif\r\n\t    v_MeshColor = a_MeshColor;\r\n#endif\r\n\t    gl_Position = u_Projection * u_View * vec4(center, 1.0);\r\n\t\tvec4 startcolor = gammaToLinear(a_StartColor);\r\n\t    v_Color = computeParticleColor(startcolor, normalizedAge);\r\n#ifdef DIFFUSEMAP\r\n\t    vec2 simulateUV;\r\n    #if defined(SPHERHBILLBOARD) || defined(STRETCHEDBILLBOARD) || defined(HORIZONTALBILLBOARD) || defined(VERTICALBILLBOARD)\r\n\t    simulateUV = a_SimulationUV.xy + a_CornerTextureCoordinate.zw * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n\t\r\n    #ifdef RENDERMODE_MESH\r\n\t    simulateUV = a_SimulationUV.xy + a_MeshTextureCoordinate * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n\t    v_TextureCoordinate = TransformUV(v_TextureCoordinate, u_TilingOffset);\r\n#endif\r\n\t}\r\n    else\r\n\t{\r\n\t    gl_Position = vec4(2.0, 2.0, 2.0, 1.0); // Discard use out of X(-1,1),Y(-1,1),Z(0,1)\r\n\t}\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}\r\n","#define SHADER_NAME ParticleFS\r\n\r\n#include \"Scene.glsl\";\r\n#include \"SceneFog.glsl\";\r\n#include \"Color.glsl\";\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n// uniform sampler2D u_texture;\r\n// uniform vec4 u_Tintcolor;\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 color;\r\n#ifdef RENDERMODE_MESH\r\n    color = v_MeshColor;\r\n#else\r\n    color = vec4(1.0);\r\n#endif\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 colorT = texture2D(u_texture, v_TextureCoordinate);\r\n    #ifdef Gamma_u_texture\r\n    colorT = gammaToLinear(colorT);\r\n    #endif // Gamma_u_SpecularTexture\r\n    #ifdef TINTCOLOR\r\n    color *= colorT * u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= colorT * v_Color;\r\n    #endif // TINTCOLORd\r\n#else\r\n    #ifdef TINTCOLOR\r\n    color *= u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= v_Color;\r\n    #endif // TINTCOLOR\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n    if (color.a < u_AlphaTestValue)\r\n\t{\r\n\t    discard;\r\n\t}\r\n#endif // ALPHATEST\r\n\r\n\r\n#ifdef FOG\r\n    color.rgb = scenUnlitFog(color.rgb);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport SkyProceduralVS from \"./SkyProceduralShader.vs\";\r\nimport SkyProceduralFS from \"./SkyProceduralShader.fs\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\nexport class SkyProceduralShaderInit {\r\n    static init() {\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            \"u_SunSize\": ShaderDataType.Float,\r\n            \"u_SunSizeConvergence\": ShaderDataType.Float,\r\n            \"u_AtmosphereThickness\": ShaderDataType.Float,\r\n            \"u_SkyTint\": ShaderDataType.Color,\r\n            \"u_GroundTint\": ShaderDataType.Color,\r\n            \"u_Exposure\": ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            \"u_SunSize\": 0.04,\r\n            \"u_SunSizeConvergence\": 5,\r\n            \"u_AtmosphereThickness\": 1.0,\r\n            \"u_SkyTint\": new Color(0.5, 0.5, 0.5, 1.0),\r\n            \"u_GroundTint\": new Color(0.369, 0.349, 0.341, 1.0),\r\n            \"u_Exposure\": 1.3,\r\n        };\r\n        let shader = Shader3D.add(\"SkyProcedural\");\r\n        shader.shaderType = ShaderFeatureType.Sky;\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyProceduralVS, SkyProceduralFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.renderState.depthWrite = false;\r\n        pass.renderState.stencilWrite = false;\r\n        pass.statefirst = true;\r\n    }\r\n}","#define SHADER_NAME SkyProceduralVS\r\n\r\n#include \"SkyCommon.glsl\";\r\n\r\n\r\n#define OUTER_RADIUS 1.025\r\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\r\n#define MIE 0.0010             // Mie constant 米氏散射\r\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\r\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\r\n\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\nconst float outerRadius = OUTER_RADIUS;\r\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\r\nconst float innerRadius = 1.0;\r\nconst float innerRadius2 = 1.0;\r\nconst float cameraHeight = 0.0001;\r\n\r\nconst float HDSundiskIntensityFactor = 15.0;\r\nconst float simpleSundiskIntensityFactor = 27.0;\r\n\r\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\r\nconst float kmESun = MIE * SUN_BRIGHTNESS;\r\nconst float km4PI = MIE * 4.0 * 3.14159265;\r\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\r\nconst float scaleDepth = 0.25;\r\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\r\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\r\n\r\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\r\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\r\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Rayleigh phase function\r\nfloat getRayleighPhase(vec3 light, vec3 ray) \r\n{\r\n\tfloat eyeCos = dot(light, ray);\r\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\r\n}\r\n\r\nfloat scaleAngle(float inCos)\r\n{\r\n\tfloat x = 1.0 - inCos;\r\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n}\r\n\r\n\r\nvoid main(){\r\n    gl_Position = u_SkyProjectionViewMat*a_Position;\r\n\r\n    vec3 skyTintInGammaSpace = pow(u_SkyTint.xyz,vec3(0.45));//u_SkyTint.xyz;//支持非GAMMA空间后要调整\r\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\r\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\r\n\r\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\r\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\r\n\r\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\r\n\r\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\r\n\tvec3 eyeRay = normalize(a_Position.xyz);\r\n\r\n\tfloat far = 0.0;\r\n\tvec3 cIn, cOut;\r\n\tif (eyeRay.y >= 0.0) {// Sky\r\n\t\t// Calculate the length of the \"atmosphere\"\r\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat height = innerRadius + cameraHeight;\r\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\r\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\r\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\tvec3 frontColor = vec3(0.0);\r\n\t\t//unrolling this manually to avoid some platform for loop slow\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\r\n\t\tcIn = frontColor * (invWavelength * krESun);\r\n\t\tcOut = frontColor * kmESun;\r\n\t} else {// Ground\r\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\r\n\t\tvec3 pos = cameraPos + far * eyeRay;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\r\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\r\n\t\tfloat lightAngle = dot(-u_SunLight_direction, pos);\r\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\r\n\t\tfloat lightScale = scaleAngle(lightAngle);\r\n\t\tfloat cameraOffset = depth*cameraScale;\r\n\t\tfloat temp = lightScale + cameraScale;\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\t// Now loop through the sample rays\r\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\r\n\t\tvec3 attenuate;\r\n\r\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat scatter = depth*temp - cameraOffset;\r\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\r\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\r\n\t}\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tv_Vertex = -a_Position.xyz;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_RayDir = -eyeRay;\r\n\t#else\r\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\r\n\t#endif\r\n\r\n\t// if we want to calculate color in vprog:\r\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\r\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint.xyz * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\r\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight_direction, -eyeRay));\r\n\r\n\t\r\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\r\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\r\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\r\n\tfloat lightColorIntensity = clamp(length(u_SunLight_color.xyz), 0.25, 1.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY \r\n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#endif\r\n\tgl_Position= remapSkyPositionZ(gl_Position);\r\n}","#define SHADER_NAME SkyProceduralFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nconst float MIE_G = -0.990;\r\nconst float MIE_G2 = 0.9801;\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\n\r\n// uniform float u_SunSize;\r\n// uniform float u_SunSizeConvergence;\r\n\r\nuniform vec3 u_SunLight_direction;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\nvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\nvarying vec3 v_RayDir;\r\n#else\r\nvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\nvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Mie phase function\r\nfloat getMiePhase(float eyeCos, float eyeCos2)\r\n{\r\n    float temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\r\n    temp = pow(temp, pow(u_SunSize, 0.65) * 10.0);\r\n    temp = max(temp, 1.0e-4); // prevent division by zero, esp. in half precision\r\n    temp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\r\n    return temp;\r\n}\r\n\r\n// Calculates the sun shape\r\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray)\r\n{\r\n#ifdef SUN_HIGH_QUALITY\r\n    float focusedEyeCos = pow(clamp(dot(lightPos, ray), 0.0, 1.0), u_SunSizeConvergence);\r\n    return getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\r\n#else // SUN_SIMPLE\r\n    vec3 delta = lightPos - ray;\r\n    float dist = length(delta);\r\n    float spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\r\n    return spot * spot;\r\n#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n    // if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\r\n    // if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\r\n    // if y < 0 [eyeRay.y > 0] - sky\r\n    vec3 col = vec3(0.0, 0.0, 0.0);\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n    vec3 ray = normalize(v_Vertex);\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#elif defined(SUN_SIMPLE)\r\n    vec3 ray = v_RayDir;\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#else\r\n    float y = v_SkyGroundFactor;\r\n#endif\r\n\r\n    // if we did precalculate color in vprog: just do lerp between them\r\n    col = mix(v_SkyColor, v_GroundColor, clamp(y, 0.0, 1.0));\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\n    if (y < 0.0)\r\n\tcol += v_SunColor * calcSunAttenuation(-u_SunLight_direction, -ray);\r\n#endif\r\n\r\n    // col = sqrt(col);//linear space convert to gamma space\r\n    gl_FragColor = vec4(col, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","import { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport SkyPanoramicVS from \"./SkyPanoramic.vs\";\r\nimport SkyPanoramicFS from \"./SkyPanoramic.fs\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { AttributeMapType, SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { CullMode } from \"../../../RenderEngine/RenderEnum/CullMode\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\nexport class SkyPanoramicShaderInit {\r\n    static init() {\r\n        let attributeMap: AttributeMapType = {\r\n            \"a_Position\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n\r\n        let uniformMap = {\r\n            'u_TintColor': ShaderDataType.Color,\r\n            'u_Rotation': ShaderDataType.Float,\r\n            'u_Texture': ShaderDataType.Texture2D,\r\n            'u_Exposure':ShaderDataType.Float,\r\n        };\r\n\r\n        let defaultValue = {\r\n            'u_TintColor': new Color(0.5,0.5,0.5,1.0),\r\n            'u_Exposure': 1.3,\r\n            'u_Rotation': 0,\r\n            'u_Texture': Texture2D.grayTexture,\r\n        };\r\n        let shader = Shader3D.add(\"SkyPanoramic\");\r\n        shader.shaderType = ShaderFeatureType.Sky;\r\n        let subShader = new SubShader(attributeMap, uniformMap, defaultValue);\r\n        shader.addSubShader(subShader);\r\n        let pass = subShader.addShaderPass(SkyPanoramicVS, SkyPanoramicFS);\r\n        pass.renderState.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n        pass.renderState.cull = CullMode.Back;\r\n        pass.renderState.depthWrite = false;\r\n        pass.renderState.stencilWrite = false;\r\n        pass.statefirst = true;\r\n    }\r\n}","#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include \"SkyCommon.glsl\";\r\n\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\n\r\nvoid main()\r\n{\r\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n\t\r\n\r\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\r\n\r\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\r\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\r\n\r\n\t// Calculate constant scale and offset for 3D layouts\r\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\r\n\tgl_Position = u_SkyProjectionViewMat*position;\r\n\tgl_Position=remapSkyPositionZ(gl_Position);\r\n\r\n}\r\n","#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvec2 ToRadialCoords(vec3 coords)\r\n{\r\n    vec3 normalizedCoords = normalize(coords);\r\n    float latitude = acos(normalizedCoords.y);\r\n    float longitude = atan(normalizedCoords.z, normalizedCoords.x);\r\n    vec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5 / PI, 1.0 / PI);\r\n    return vec2(0.5, 1.0) - sphereCoords;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 tc = ToRadialCoords(v_Texcoord);\r\n    if (tc.x > v_Image180ScaleAndCutoff.y)\r\n\tgl_FragColor = vec4(0, 0, 0, 1);\r\n    tc.x = mod(tc.x * v_Image180ScaleAndCutoff.x, 1.0);\r\n    tc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\r\n\r\n    mediump vec4 tex = texture2D(u_Texture, tc);\r\n#ifdef Gamma_u_Texture\r\n    tex = gammaToLinear(tex);\r\n#endif // Gamma_u_Texture\r\n    mediump vec3 c = tex.xyz;\r\n    c = c * u_TintColor.rgb * c_ColorSpace.rgb;\r\n    c *= pow(u_Exposure, 2.2);\r\n    gl_FragColor = vec4(c, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","#if !defined(UtillitiesColor_lib)\r\n#define UtillitiesColor_lib\r\n\r\n// Transformations between CIE XYZ tristimulus values and CIE x,y\r\n// chromaticity coordinates\r\nvec3 XYZ_2_xyY(vec3 XYZ)\r\n{\r\n    vec3 xyY;\r\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\r\n    xyY.x = XYZ.x / divisor;\r\n    xyY.y = XYZ.y / divisor;\r\n    xyY.z = XYZ.y;\r\n    return xyY;\r\n}\r\n\r\nvec3 xyY_2_XYZ(vec3 xyY)\r\n{\r\n    vec3 XYZ;\r\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\r\n    XYZ.y = xyY.z;\r\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\r\n    return XYZ;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\r\n{\r\n    float r = rgb.r;\r\n    float g = rgb.g;\r\n    float b = rgb.b;\r\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\r\n    k = max(MEDIUMP_FLT_MIN, k);\r\n    float chroma = sqrt(k);\r\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb)\r\n{\r\n    return rgb_2_yc(rgb, 1.75);\r\n}\r\n\r\n// Transformations from RGB to other color representations\r\n\r\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\r\nfloat rgb_2_hue(vec3 rgb)\r\n{\r\n    float hue;\r\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\r\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\r\n    //     // hue = FLT_NAN;\r\n    //     // todo FLT_NAN\r\n    //     hue = 0.0;\r\n    // } else {\r\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\r\n    // }\r\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\r\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\r\n    else\r\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\r\n\r\n    if (hue < 0.0) {\r\n        hue = hue + 360.0;\r\n    }\r\n\r\n    return hue;\r\n}\r\n\r\n#endif // UtillitiesColor_lib","/**\r\n * @en Enum for trail alignment options.\r\n * @zh 拖尾对齐方式枚举。\r\n */\r\nexport enum TrailAlignment {\r\n    /**\r\n     * @en Align the trail to face the camera.\r\n     * @zh 使拖尾面向摄像机。\r\n     */\r\n    View,\r\n    /**\r\n     * @en Align the trail with the direction of the component\r\n     * @zh 使拖尾与组件的方向对齐。\r\n     */\r\n    TransformZ\r\n}\r\n","import { Shader3D } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\n\r\nimport UtillitiesColorGLSL from \"./lib/UtillitiesColor.glsl\";\r\nimport TransformCommonGLSL from \"./lib/TransformCommon.glsl\";\r\nimport RRTCommonGLSL from \"./lib/RRTCommon.glsl\";\r\nimport ODTCommonGLSL from \"./lib/ODTCommon.glsl\";\r\nimport TonescalesGLSL from \"./lib/Tonescales.glsl\";\r\n\r\nimport RRTGLSL from \"./rrt/RRT.glsl\";\r\nimport ODT_sRGB_100nits_GLSL from \"./odt/ODT_sRGB_100nits.glsl\";\r\n\r\nimport ACESGLSL from \"./ACES.glsl\";\r\n\r\nexport class ACESShaderLib {\r\n\r\n    static init() {\r\n        Shader3D.addInclude(\"ACES_UtillitiesColor.glsl\", UtillitiesColorGLSL);\r\n        Shader3D.addInclude(\"ACES_TransformCommon.glsl\", TransformCommonGLSL);\r\n        Shader3D.addInclude(\"ACES_Tonescales.glsl\", TonescalesGLSL);\r\n        Shader3D.addInclude(\"ACES_RRTCommon.glsl\", RRTCommonGLSL);\r\n        Shader3D.addInclude(\"ACES_ODTCommon.glsl\", ODTCommonGLSL);\r\n\r\n        Shader3D.addInclude(\"ACES_RRT.glsl\", RRTGLSL);\r\n        Shader3D.addInclude(\"ACES_ODT_sRGB_100nits.glsl\", ODT_sRGB_100nits_GLSL);\r\n\r\n        Shader3D.addInclude(\"ACES.glsl\", ACESGLSL);\r\n    }\r\n\r\n}","#if !defined(TransformCommon_lib)\r\n    #define TransformCommon_lib\r\n\r\nconst float TINY = 1e-10;\r\n\r\n// sRGB D65 to AP0 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP0_MAT = mat3(\r\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\r\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\r\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\r\n\r\n// sRGB D65 to AP1 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP1_MAT = mat3(\r\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\r\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\r\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\r\n\r\nconst mat3 AP1_to_XYZ_MAT = mat3(\r\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\r\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\r\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\r\n\r\nconst mat3 AP0_to_AP1_MAT = mat3(\r\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\r\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\r\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\r\n\r\nconst mat3 AP1_to_AP0_MAT = mat3(\r\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\r\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\r\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\r\n\r\nconst mat3 XYZ_to_AP1_MAT = mat3(\r\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\r\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\r\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\r\n\r\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\r\n\r\nfloat ACES_to_ACEScc(float x)\r\n{\r\n    // if (x <= 0.0)\r\n    // return -0.35828683;\r\n    // else if (x < pow(2.0, -15.0))\r\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\r\n    // else\r\n    // return (log2(x) + 9.72) / 17.52;\r\n\r\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\r\n}\r\n\r\nvec3 ACES_to_ACEScc(vec3 x)\r\n{\r\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\r\n    x.x = ACES_to_ACEScc(x.x);\r\n    x.y = ACES_to_ACEScc(x.y);\r\n    x.z = ACES_to_ACEScc(x.z);\r\n\r\n    return x;\r\n}\r\n\r\nfloat ACEScc_to_ACES(float x)\r\n{\r\n    if (x < -0.3013698630)\r\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\r\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\r\n\treturn pow(2.0, x * 17.52 - 9.72);\r\n    else\r\n\treturn MEDIUMP_FLT_MAX;\r\n}\r\n\r\nvec3 ACEScc_to_ACES(vec3 x)\r\n{\r\n    x.x = ACEScc_to_ACES(x.x);\r\n    x.y = ACEScc_to_ACES(x.y);\r\n    x.z = ACEScc_to_ACES(x.z);\r\n    return x;\r\n}\r\n\r\nfloat rgb_2_saturation(vec3 rgb)\r\n{\r\n    float rgbmax = vecmax(rgb);\r\n    float rgbmin = vecmin(rgb);\r\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\r\n}\r\n\r\n#endif // TransformCommon_lib","#if !defined(Tonescales_lib)\r\n#define Tonescales_lib\r\n\r\nconst mat3 M = mat3(\r\n    vec3(0.5, -1.0, 0.5),\r\n    vec3(-1.0, 1.0, 0.5),\r\n    vec3(0.5, 0.0, 0.0));\r\n\r\nfloat segmented_spline_c5_fwd(float x)\r\n{\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\r\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\r\n#else\r\n    const float coefsLow_0 = -4.0000000000;\r\n    const float coefsLow_1 = -4.0000000000;\r\n    const float coefsLow_2 = -3.1573765773;\r\n    const float coefsLow_3 = -0.4852499958;\r\n    const float coefsLow_4 = 1.8477324706;\r\n    const float coefsLow_5 = 1.8477324706;\r\n\r\n    const float coefsHigh_0 = -0.7185482425;\r\n    const float coefsHigh_1 = 2.0810307172;\r\n    const float coefsHigh_2 = 3.6681241237;\r\n    const float coefsHigh_3 = 4.0000000000;\r\n    const float coefsHigh_4 = 4.0000000000;\r\n    const float coefsHigh_5 = 4.0000000000;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\r\n    const vec2 midPoint = vec2(0.18, 4.8);\r\n    const vec2 maxPoint = vec2(47185.92, 10000.);\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.0;\r\n\r\n    const int N_KNOTS_LOW = 4;\r\n    const int N_KNOTS_HIGH = 4;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        }\r\n#endif // #ifdef GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n    return pow(10.0, logy);\r\n}\r\n\r\nfloat segmented_spline_c9_fwd(float x)\r\n{\r\n// ODT_48nits\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\r\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\r\n#else\r\n    const float coefsLow_0 = -1.6989700043;\r\n    const float coefsLow_1 = -1.6989700043;\r\n    const float coefsLow_2 = -1.4779000000;\r\n    const float coefsLow_3 = -1.2291000000;\r\n    const float coefsLow_4 = -0.8648000000;\r\n    const float coefsLow_5 = -0.4480000000;\r\n    const float coefsLow_6 = 0.0051800000;\r\n    const float coefsLow_7 = 0.4511080334;\r\n    const float coefsLow_8 = 0.9113744414;\r\n    const float coefsLow_9 = 0.9113744414;\r\n\r\n    const float coefsHigh_0 = 0.5154386965;\r\n    const float coefsHigh_1 = 0.8470437783;\r\n    const float coefsHigh_2 = 1.1358000000;\r\n    const float coefsHigh_3 = 1.3802000000;\r\n    const float coefsHigh_4 = 1.5197000000;\r\n    const float coefsHigh_5 = 1.5985000000;\r\n    const float coefsHigh_6 = 1.6467000000;\r\n    const float coefsHigh_7 = 1.6746091357;\r\n    const float coefsHigh_8 = 1.6878733390;\r\n    const float coefsHigh_9 = 1.6878733390;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    // todo const\r\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\r\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\r\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\r\n\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.04;\r\n\r\n    const int N_KNOTS_LOW = 8;\r\n    const int N_KNOTS_HIGH = 8;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n\r\n    return pow(10.0, logy);\r\n}\r\n\r\n#endif // Tonescales_lib","#if !defined(RRTCommon_lib)\r\n#define RRTCommon_lib\r\n\r\n// \"Glow\" module constants\r\nconst float RRT_GLOW_GAIN = 0.05;\r\nconst float RRT_GLOW_MID = 0.08;\r\n\r\n// Red modifier constants\r\nconst float RRT_RED_SCALE = 0.82;\r\nconst float RRT_RED_PIVOT = 0.03;\r\nconst float RRT_RED_HUE = 0.;\r\nconst float RRT_RED_WIDTH = 135.;\r\n\r\n// Desaturation contants\r\nconst float RRT_SAT_FACTOR = 0.96;\r\n\r\n// ------- Glow module functions\r\n\r\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\r\n{\r\n    float glowGainOut;\r\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\r\n        glowGainOut = glowGainIn;\r\n    } else if (ycIn >= 2.0 * glowMid) {\r\n        glowGainOut = 0.0;\r\n    } else {\r\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\r\n    }\r\n    return glowGainOut;\r\n}\r\n\r\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\r\nfloat sigmoid_shaper(float x)\r\n{\r\n    float t = max(1.0 - abs(x * 0.5), 0.0);\r\n    float y = 1.0 + sign(x) * (1.0 - t * t);\r\n\r\n    return y * 0.5;\r\n}\r\n\r\n// ------- Red modifier functions\r\nfloat center_hue(float hue, float centerH)\r\n{\r\n    float hueCentered = hue - centerH;\r\n    if (hueCentered < -180.0) {\r\n        hueCentered = hueCentered + 360.0;\r\n    } else if (hueCentered > 180.0) {\r\n        hueCentered -= 360.0;\r\n    }\r\n    return hueCentered;\r\n}\r\n\r\n#endif // RRTCommon_lib","#if !defined(ODTCommon_lib)\r\n#define ODTCommon_lib\r\n\r\nconst float CINEMA_WHITE = 48.0;\r\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\r\n\r\n// Gamma compensation factor\r\nconst float DIM_SURROUND_GAMMA = 0.9811;\r\n\r\n// Saturation compensation factor\r\nconst float ODT_SAT_FACTOR = 0.93;\r\n\r\n// white point D60 to D65\r\n// ACES white point D60\r\nconst mat3 D60_to_D65_MAT = mat3(\r\n    vec3(0.987224, -0.00759836, 0.00307257),\r\n    vec3(-0.00611327, 1.00186, -0.00509595),\r\n    vec3(0.0159533, 0.00533002, 1.08168));\r\n\r\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\r\n{\r\n    return (Y - Ymin) / (Ymax - Ymin);\r\n}\r\n\r\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\r\n{\r\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\r\n    vec3 xyY = XYZ_2_xyY(XYZ);\r\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\r\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\r\n    XYZ = xyY_2_XYZ(xyY);\r\n\r\n    return XYZ * XYZ_to_AP1_MAT;\r\n}\r\n\r\n#endif // ODTCommon_lib","#if !defined(RRT_lib)\r\n#define RRT_lib\r\n\r\n#include \"ACES_RRTCommon.glsl\";\r\n\r\n/**\r\n * @param ACES AP0\r\n * @returns OCES\r\n */\r\nvec3 RRT(vec3 aces)\r\n{\r\n    // --- Glow module --- //\r\n    float saturation = rgb_2_saturation(aces);\r\n    float ycIn = rgb_2_yc(aces);\r\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\r\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\r\n\r\n    aces *= addedGlow;\r\n\r\n    // --- Red modifier --- //\r\n    float hue = rgb_2_hue(aces);\r\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\r\n\r\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\r\n    hueWeight *= hueWeight;\r\n\r\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\r\n\r\n    // --- ACES to RGB rendering space --- //\r\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\r\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\r\n\r\n    // --- Global desaturation --- //\r\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\r\n\r\n    // --- Apply the tonescale independently in rendering-space RGB --- //\r\n    vec3 rgbPost;\r\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\r\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\r\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\r\n\r\n    // --- RGB rendering space to OCES --- //\r\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\r\n\r\n    return rgbOces;\r\n}\r\n\r\n#endif // RRT_lib","#if !defined(ODT_sRGB_100nits_lib)\r\n#define ODT_sRGB_100nits_lib\r\n\r\n#include \"ACES_ODTCommon.glsl\";\r\n\r\n// CIE XYZ to REC.709\r\nconst mat3 XYZ_to_REC709_MAT = mat3(\r\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\r\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\r\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\r\n\r\nconst float DISPGAMMA = 2.4;\r\nconst float OFFSET = 0.055;\r\n\r\nvec3 ODT_sRGB_100nits(vec3 oces)\r\n{\r\n    // OCES to RGB rendering space\r\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\r\n\r\n    // Apply the tonescale independently in rendering-space RGB\r\n    vec3 rgbPost;\r\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\r\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\r\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\r\n\r\n    // Scale luminance to linear code value\r\n    vec3 linearCV;\r\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\r\n\r\n    // Apply gamma adjustment to compensate for dim surround\r\n    linearCV = darkSurround_to_dimSurround(linearCV);\r\n\r\n    // Convert to display primary encoding\r\n    // Rendering space RGB to XYZ\r\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\r\n\r\n    // Apply CAT from ACES white point to assumed observer adapted white point\r\n    XYZ = D60_to_D65_MAT * XYZ;\r\n\r\n    // CIE XYZ to display primaries\r\n    linearCV = XYZ_to_REC709_MAT * XYZ;\r\n\r\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\r\n    return linearCV;\r\n}\r\n\r\n#endif // ODT_sRGB_100nits_lib","// Academy Color Encoding System (ACES) software and tools are provided by the\r\n// Academy under the following terms and conditions: A worldwide, royalty-free,\r\n// non-exclusive right to copy, modify, create derivatives, and use, in source\r\n// and binary forms, is hereby granted, subject to acceptance of this license.\r\n\r\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\r\n// Portions contributed by others as indicated. All rights reserved.\r\n\r\n// Performance of any of the aforementioned acts indicates acceptance to be\r\n// bound by the following terms and conditions:\r\n\r\n// Copies of source code, in whole or in part, must retain the above copyright\r\n// notice, this list of conditions and the Disclaimer of Warranty.\r\n\r\n// Use in binary form must retain the above copyright notice, this list of\r\n// conditions and the Disclaimer of Warranty in the documentation and/or other\r\n// materials provided with the distribution.\r\n\r\n// Nothing in this license shall be deemed to grant any rights to trademarks,\r\n// copyrights, patents, trade secrets or any other intellectual property of\r\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\r\n\r\n// Neither the name \"A.M.P.A.S.\" nor the name of any other contributors to this\r\n// software may be used to endorse or promote products derivative of or based on\r\n// this software without express prior written permission of A.M.P.A.S. or the\r\n// contributors, as appropriate.\r\n\r\n// This license shall be construed pursuant to the laws of the State of\r\n// California, and any disputes related thereto shall be subject to the\r\n// jurisdiction of the courts therein.\r\n\r\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\r\n// CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\r\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\r\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\r\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\r\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\r\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\r\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\r\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\r\n// OR UNDISCLOSED.\r\n\r\n#if !defined(ACES_lib)\r\n#define ACES_lib\r\n\r\n#include \"ACES_TransformCommon.glsl\";\r\n#include \"ACES_UtillitiesColor.glsl\";\r\n#include \"ACES_Tonescales.glsl\";\r\n\r\n#include \"ACES_RRT.glsl\";\r\n#include \"ACES_ODT_sRGB_100nits.glsl\";\r\n\r\n// idt\r\n\r\n// linear D65 sRGB to D60 ACES AP0\r\nvec3 sRGB_to_AP0(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP0_MAT * sRGB;\r\n}\r\n\r\n// linear D65 sRGB to D60 ACES AP1\r\nvec3 sRGB_to_AP1(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP1_MAT * sRGB;\r\n}\r\n\r\n// lmt\r\n// todo\r\n\r\n#endif // ACES_lib","\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport UtilsGLSL from \"./utils/Utils.glsl\";\r\nimport ColorGLSL from \"./utils/Color.glsl\";\r\nimport MathGLSL from \"./utils/Math.glsl\";\r\nimport OutputTransformGLSL from \"./common/OutputTransform.glsl\";\r\nimport BakedBoneMatrixSamplerGLSL from \"./utils/BakedBoneMatrixSampler.glsl\";\r\n\r\nimport MorphTargetGLSL from \"./common/MorphTarget.glsl\";\r\nimport VertexGLSL from \"./common/VertexCommon.glsl\";\r\n\r\nimport ShadingCommonGLSL from \"./common/ShadingCommon.glsl\";\r\nimport ShadingVertexGLSL from \"./common/ShadingVertex.glsl\";\r\nimport ShadingFragGLSL from \"./common/ShadingFrag.glsl\";\r\n\r\nimport SceneGLSL from \"./common/SceneCommon.glsl\";\r\nimport CameraGLSL from \"./common/CameraCommon.glsl\";\r\nimport SkyCommon from \"./common/SkyCommon.glsl\";\r\nimport Sprite3DCommonGLSL from \"./common/Sprite3DCommon.glsl\";\r\nimport Sprite3DVertexGLSL from \"./common/Sprite3DVertex.glsl\";\r\nimport Sprite3DFragGLSL from \"./common/Sprite3DFrag.glsl\";\r\nimport DepthVertexGLSL from \"./depth/DepthVertex.glsl\";\r\nimport DepthFragGLSL from \"./depth/DepthFrag.glsl\";\r\nimport DepthNormalUtilGLSL from \"./depth/DepthNormalUtil.glsl\";\r\nimport DepthNormalFragGLSL from \"./depth/DepthNormalFrag.glsl\";\r\n\r\nimport ShadowSampleTentGLSL from \"./lighting/ShadowSampleTent.glsl\";\r\nimport ShadowSamplerGLSL from \"./lighting/ShadowSampler.glsl\";\r\nimport SceneFogGLSL from \"./utils/SceneFog.glsl\";\r\nimport SceneFogInputGLSL from \"./utils/SceneFogInput.glsl\";\r\nimport LightingGLSL from \"./lighting/Lighting.glsl\";\r\nimport GlobalIlluminationGLSL from \"./lighting/globalIllumination.glsl\";\r\nimport OctGLSL from \"./lighting/volumetricGI/Oct.glsl\";\r\nimport GridHelpersGLSL from \"./lighting/volumetricGI/GridHelpers.glsl\";\r\nimport VolumetricGIGLSL from \"./lighting/volumetricGI/VolumetricGI.glsl\";\r\n\r\nimport BlinnPhongLightingGLSL from \"./lightingmode/BlinnPhongLighting.glsl\";\r\nimport PBRLightingGLSL from \"./lightingmode/PBRLighting.glsl\";\r\nimport { BlitScreenShaderInit } from \"./postprocess/BlitScreenShaderInit\";\r\nimport { UnlitShaderInit } from \"./unlit/UnlitShaderInit\";\r\nimport { BlinnPhongShaderInit } from \"./blinnphong/BlinnPhongShaderInit\";\r\nimport { TrailShaderInit } from \"./Trail/TrailShaderInit\";\r\nimport { PBRShaderLib } from \"./pbr/PBRShaderLib\";\r\nimport { PBRStandardShaderInit } from \"./pbr/PBRStandardShaderInit\";\r\nimport { SkyBoxShaderInit } from \"./sky/SkyBoxShaderInit\";\r\nimport { ParticleShuriKenShaderInit } from \"./ShurikenParticle/ParticleShuriKenShaderInit\";\r\nimport { SkyProceduralShaderInit } from \"./sky/SkyProceduralShaderInit\";\r\nimport { SkyPanoramicShaderInit } from \"./sky/SkyPanoramicShaderInit\";\r\nimport { ACESShaderLib } from \"./postprocess/ACES/ACESShaderLib\";\r\n\r\n/**\r\n * @internal\r\n * <code>ShaderInit</code> 类用于初始化内置Shader。\r\n */\r\nexport class ShaderInit3D {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\r\n\t\t// utils\r\n\t\tShader3D.addInclude(\"Utils.glsl\", UtilsGLSL);\r\n\t\tShader3D.addInclude(\"Color.glsl\", ColorGLSL);\r\n\t\tShader3D.addInclude(\"Math.glsl\", MathGLSL);\r\n\t\tShader3D.addInclude(\"BakedBoneMatrixSampler.glsl\", BakedBoneMatrixSamplerGLSL);\r\n\t\tShader3D.addInclude(\"MorphTarget.glsl\", MorphTargetGLSL);\r\n\t\tShader3D.addInclude(\"VertexCommon.glsl\", VertexGLSL);\r\n\t\tShader3D.addInclude(\"ShadingCommon.glsl\", ShadingCommonGLSL);\r\n\t\tShader3D.addInclude(\"ShadingVertex.glsl\", ShadingVertexGLSL);\r\n\t\tShader3D.addInclude(\"ShadingFrag.glsl\", ShadingFragGLSL);\r\n\r\n\t\tShader3D.addInclude(\"OutputTransform.glsl\", OutputTransformGLSL);\r\n\r\n\t\t// scene\r\n\t\tShader3D.addInclude(\"Scene.glsl\", SceneGLSL);\r\n\r\n\t\t// camera\r\n\t\tShader3D.addInclude(\"Camera.glsl\", CameraGLSL);\r\n\r\n\t\t//sky\r\n\t\tShader3D.addInclude(\"SkyCommon.glsl\", SkyCommon);\r\n\r\n\t\t// sprite3D\r\n\t\tShader3D.addInclude(\"Sprite3DCommon.glsl\", Sprite3DCommonGLSL);\r\n\t\tShader3D.addInclude(\"Sprite3DVertex.glsl\", Sprite3DVertexGLSL);\r\n\t\tShader3D.addInclude(\"Sprite3DFrag.glsl\", Sprite3DFragGLSL);\r\n\r\n\t\t// depth\r\n\t\tShader3D.addInclude(\"DepthVertex.glsl\", DepthVertexGLSL);\r\n\t\tShader3D.addInclude(\"DepthFrag.glsl\", DepthFragGLSL);\r\n\t\tShader3D.addInclude(\"DepthNormalUtil.glsl\", DepthNormalUtilGLSL);\r\n\t\tShader3D.addInclude(\"DepthNormalFrag.glsl\", DepthNormalFragGLSL);\r\n\r\n\t\t// scene fog\r\n\t\tShader3D.addInclude(\"SceneFog.glsl\", SceneFogGLSL);\r\n\t\tShader3D.addInclude(\"SceneFogInput.glsl\", SceneFogInputGLSL);\r\n\t\t// shadow sampler\r\n\t\tShader3D.addInclude(\"ShadowSampleTent.glsl\", ShadowSampleTentGLSL);\r\n\t\tShader3D.addInclude(\"ShadowSampler.glsl\", ShadowSamplerGLSL);\r\n\r\n\t\t// lighting\r\n\t\tShader3D.addInclude(\"Lighting.glsl\", LightingGLSL);\r\n\t\tShader3D.addInclude(\"globalIllumination.glsl\", GlobalIlluminationGLSL);\r\n\t\t// volumetric GI\r\n\t\tShader3D.addInclude(\"Oct.glsl\", OctGLSL);\r\n\t\tShader3D.addInclude(\"GridHelpers.glsl\", GridHelpersGLSL);\r\n\t\tShader3D.addInclude(\"VolumetricGI.glsl\", VolumetricGIGLSL);\r\n\r\n\t\t// lighting mode\r\n\t\tShader3D.addInclude(\"BlinnPhongLighting.glsl\", BlinnPhongLightingGLSL);\r\n\t\tShader3D.addInclude(\"PBRLighting.glsl\", PBRLightingGLSL);\r\n\r\n\t\t// lib\r\n\t\tPBRShaderLib.init();\r\n\t\tACESShaderLib.init();\r\n\r\n\t\t// shader init\r\n\t\tBlitScreenShaderInit.init();\r\n\t\tUnlitShaderInit.init();\r\n\t\tPBRStandardShaderInit.init();\r\n\t\t//PBRShaderInit.init();\r\n\t\tBlinnPhongShaderInit.init();\r\n\t\tTrailShaderInit.init();\r\n\t\tParticleShuriKenShaderInit.init();\r\n\t\tSkyBoxShaderInit.init();\r\n\t\tSkyProceduralShaderInit.init();\r\n\t\tSkyPanoramicShaderInit.init();\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////\r\n\t\tShader3D.SHADERDEFINE_LEGACYSINGALLIGHTING = Shader3D.getDefineByName(\"LEGACYSINGLELIGHTING\");\r\n\t\tShader3D.SHADERDEFINE_ENUNIFORMBLOCK = Shader3D.getDefineByName(\"ENUNIFORMBLOCK\");\r\n\t\tShader3D.SHADERDEFINE_FLOATTEXTURE = Shader3D.getDefineByName(\"FLOATTEXTURE\");\r\n\t\tShader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR = Shader3D.getDefineByName(\"FLOATTEXTURE_FIL_LINEAR\");\r\n        Shader3D.SHADERDEFINE_BLITSCREEN_INVERTY = Shader3D.getDefineByName(\"BLITSCREEN_INVERTY\");\r\n\t\tShader3D.SHADERDEFINE_REMAP_POSITIONZ = Shader3D.getDefineByName(\"REMAP_Z\");\r\n        Shader3D.SHADERDEFINE_LOD_TEXTURE_SAMPLE = Shader3D.getDefineByName(\"LOD_TEXTURE_SAMPLE\");\r\n\t}\r\n}\r\n\r\n","#if !defined(Color_lib)\r\n    #define Color_lib\r\n\r\n    #include \"Math.glsl\";\r\n\r\nvec3 linearToGamma(in vec3 value)\r\n{\r\n    // return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\r\n    return pow(value, vec3(1.0 / 2.2));\r\n}\r\n\r\nvec4 linearToGamma(in vec4 value)\r\n{\r\n    return vec4(linearToGamma(value.rgb), value.a);\r\n}\r\n\r\nvec3 gammaToLinear(in vec3 value)\r\n{\r\n    // return pow((value + 0.055) / 1.055, vec3(2.4));\r\n    return pow(value, vec3(2.2));\r\n}\r\n\r\nvec4 gammaToLinear(in vec4 value)\r\n{\r\n    return vec4(gammaToLinear(value.rgb), value.a);\r\n}\r\n\r\nconst float c_RGBDMaxRange = 255.0;\r\n\r\n// float color to rgbd\r\nvec4 encodeRGBD(in vec3 color)\r\n{\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float d = max(1.0, c_RGBDMaxRange / maxRGB);\r\n    d = saturate(d / 255.0);\r\n\r\n    vec3 rgb = color.rgb * d;\r\n    rgb = saturate(rgb);\r\n    return vec4(rgb, d);\r\n}\r\n\r\n// rgbd to float color\r\nvec3 decodeRGBD(in vec4 rgbd)\r\n{\r\n    vec3 color = rgbd.rgb * (1.0 / rgbd.a);\r\n    return color;\r\n}\r\n\r\n// float color to rgbm\r\nvec4 encodeRGBM(in vec3 color, float range)\r\n{\r\n    color *= 1.0 / range;\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float m = ceil(maxRGB * 255.0) / 255.0;\r\n    vec3 rgb = color.rgb * 1.0 / m;\r\n\r\n    vec4 rgbm = vec4(rgb, m);\r\n    return rgbm;\r\n}\r\n\r\n// rgbm to float color\r\nvec3 decodeRGBM(in vec4 rgbm, float range)\r\n{\r\n    return range * rgbm.rgb * rgbm.a;\r\n}\r\n\r\n    #include \"OutputTransform.glsl\";\r\n\r\n#endif // Color_lib","#if !defined(Math_lib)\r\n    #define Math_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\nmat2 inverse(mat2 m)\r\n{\r\n    return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);\r\n}\r\nmat3 inverse(mat3 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\r\n    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\r\n    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\r\n\r\n    float b01 = a22 * a11 - a12 * a21;\r\n    float b11 = -a22 * a10 + a12 * a20;\r\n    float b21 = a21 * a10 - a11 * a20;\r\n\r\n    float det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11), b11, (a22 * a00 - a02 * a20),\r\n\t       (-a12 * a00 + a02 * a10), b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10))\r\n\t/ det;\r\n}\r\n\r\nmat4 inverse(mat4 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3], a10 = m[1][0], a11 = m[1][1], a12 = m[1][2],\r\n\t  a13 = m[1][3], a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3], a30 = m[3][0], a31 = m[3][1],\r\n\t  a32 = m[3][2], a33 = m[3][3],\r\n\r\n\t  b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10,\r\n\t  b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12,\r\n\t  b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30,\r\n\t  b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,\r\n\r\n\t  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    return mat4(a11 * b11 - a12 * b10 + a13 * b09, a02 * b10 - a01 * b11 - a03 * b09, a31 * b05 - a32 * b04 + a33 * b03,\r\n\t       a22 * b04 - a21 * b05 - a23 * b03, a12 * b08 - a10 * b11 - a13 * b07, a00 * b11 - a02 * b08 + a03 * b07,\r\n\t       a32 * b02 - a30 * b05 - a33 * b01, a20 * b05 - a22 * b02 + a23 * b01, a10 * b10 - a11 * b08 + a13 * b06,\r\n\t       a01 * b08 - a00 * b10 - a03 * b06, a30 * b04 - a31 * b02 + a33 * b00, a21 * b02 - a20 * b04 - a23 * b00,\r\n\t       a11 * b07 - a10 * b09 - a12 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b01 - a30 * b03 - a32 * b00,\r\n\t       a20 * b03 - a21 * b01 + a22 * b00)\r\n\t/ det;\r\n}\r\n\r\nmat4 transpose(mat4 m)\r\n{\r\n    return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\r\n\tm[0][1], m[1][1], m[2][1], m[3][1],\r\n\tm[0][2], m[1][2], m[2][2], m[3][2],\r\n\tm[0][3], m[1][3], m[2][3], m[3][3]);\r\n}\r\nmat3 transpose(mat3 m)\r\n{\r\n    return mat3(m[0][0], m[1][0], m[2][0],\r\n\tm[0][1], m[1][1], m[2][1],\r\n\tm[0][2], m[1][2], m[2][2]);\r\n}\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #define PI 3.14159265359\r\n\r\n    #define INVERT_PI 0.31830988618\r\n\r\n    #define HALF_PI 1.570796327\r\n\r\n    #define MEDIUMP_FLT_MAX 65504.0\r\n    #define MEDIUMP_FLT_MIN 0.00006103515625\r\n\r\n    #if defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define FLT_EPS\t\t   1e-5\r\n\t#define saturateMediump(x) x\r\n    #else\r\n\t#define FLT_EPS\t\t   MEDIUMP_FLT_MIN\r\n\t#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\r\n    #endif // GL_FRAGMENT_PRECISION_HIGH\r\n\r\n    #define saturate(x) clamp(x, 0.0, 1.0)\r\n\r\nfloat pow2(float x)\r\n{\r\n    return x * x;\r\n}\r\n\r\nvec3 pow2(vec3 x)\r\n{\r\n    return x * x;\r\n}\r\n\r\nfloat pow5(float x)\r\n{\r\n    float x2 = x * x;\r\n    return x2 * x2 * x;\r\n}\r\n\r\nconst float INVERT_LOG10 = 0.43429448190325176;\r\n\r\nfloat log10(float x)\r\n{\r\n    return log(x) * INVERT_LOG10;\r\n}\r\n\r\nfloat vecmax(const vec2 v)\r\n{\r\n    return max(v.x, v.y);\r\n}\r\n\r\nfloat vecmax(const vec3 v)\r\n{\r\n    return max(v.x, max(v.y, v.z));\r\n}\r\n\r\nfloat vecmax(const vec4 v)\r\n{\r\n    return max(max(v.x, v.y), max(v.z, v.w));\r\n}\r\n\r\nfloat vecmin(const vec2 v)\r\n{\r\n    return min(v.x, v.y);\r\n}\r\n\r\nfloat vecmin(const vec3 v)\r\n{\r\n    return min(v.x, min(v.y, v.z));\r\n}\r\n\r\nfloat vecmin(const vec4 v)\r\n{\r\n    return min(min(v.x, v.y), min(v.z, v.w));\r\n}\r\n\r\nvec3 SafeNormalize(in vec3 inVec)\r\n{\r\n    float dp3 = max(0.001, dot(inVec, inVec));\r\n    return inVec * inversesqrt(dp3);\r\n}\r\n\r\nvec3 normalScale(in vec3 normal, in float scale)\r\n{\r\n    normal *= vec3(scale, scale, 1.0);\r\n    return normalize(normal);\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid in the range -1..1.\r\n */\r\nfloat acosFast(float x)\r\n{\r\n    // Lagarde 2014, \"Inverse trigonometric functions GPU optimization for AMD GCN architecture\"\r\n    // This is the approximation of degree 1, with a max absolute error of 9.0x10^-3\r\n    float y = abs(x);\r\n    float p = -0.1565827 * y + 1.570796;\r\n    p *= sqrt(1.0 - y);\r\n    return x >= 0.0 ? p : PI - p;\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid only in the range 0..1.\r\n */\r\nfloat acosFastPositive(float x)\r\n{\r\n    float p = -0.1565827 * x + 1.570796;\r\n    return p * sqrt(1.0 - x);\r\n}\r\n\r\n/*\r\n * Random number between 0 and 1, using interleaved gradient noise.\r\n * w must not be normalized (e.g. window coordinates)\r\n */\r\nfloat interleavedGradientNoise(const highp vec2 w)\r\n{\r\n    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);\r\n    return fract(m.z * fract(dot(w, m.xy)));\r\n}\r\n\r\n/*\r\n * vertex rotate by Euler\r\n */\r\nvec3 rotationByEuler(in vec3 vector, in vec3 rot)\r\n{\r\n    float halfRoll = rot.z * 0.5;\r\n    float halfPitch = rot.x * 0.5;\r\n    float halfYaw = rot.y * 0.5;\r\n\r\n    float sinRoll = sin(halfRoll);\r\n    float cosRoll = cos(halfRoll);\r\n    float sinPitch = sin(halfPitch);\r\n    float cosPitch = cos(halfPitch);\r\n    float sinYaw = sin(halfYaw);\r\n    float cosYaw = cos(halfYaw);\r\n\r\n    float quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    float quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    float quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    float quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n * Assume that axis has been normalized\r\n * point rotate by one axis\r\n */\r\nvec3 rotationByAxis(in vec3 vector, in vec3 axis, in float angle)\r\n{\r\n    float halfAngle = angle * 0.5;\r\n    float sinf = sin(halfAngle);\r\n\r\n    float quaX = axis.x * sinf;\r\n    float quaY = axis.y * sinf;\r\n    float quaZ = axis.z * sinf;\r\n    float quaW = cos(halfAngle);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n *rotate by quaternions\r\n */\r\nvec3 rotationByQuaternions(in vec3 v, in vec4 q)\r\n{\r\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n#endif // Math_lib","#if !defined(BakeBoneAnimSampler_lib)\r\n    #define BakeBoneAnimSampler_lib\r\n\r\nmat4 loadBakedMatMatrix(float FramePos, float boneIndices, float offset)\r\n{\r\n    vec2 uv;\r\n    float PixelPos = FramePos + boneIndices * 4.0;\r\n    float halfOffset = offset * 0.5;\r\n    float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\r\n    uv.y = floor(uvoffset) * offset + halfOffset;\r\n    uv.x = mod(float(PixelPos), u_SimpleAnimatorTextureSize) * offset + halfOffset;\r\n    vec4 mat0row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat1row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat2row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat3row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    mat4 m = mat4(mat0row.x, mat0row.y, mat0row.z, mat0row.w,\r\n\tmat1row.x, mat1row.y, mat1row.z, mat1row.w,\r\n\tmat2row.x, mat2row.y, mat2row.z, mat2row.w,\r\n\tmat3row.x, mat3row.y, mat3row.z, mat3row.w);\r\n    return m;\r\n}\r\n\r\n#endif // BakeBoneAnimSampler_lib","#if !defined(MorphTarget_lib)\r\n    #define MorphTarget_lib\r\n\r\n    #ifdef GRAPHICS_API_GLES3\r\n\r\n/// static mesh property\r\nuniform sampler2DArray u_MorphTargetsTex;\r\n// xy: tex size, z: attribute count\r\nuniform vec4 u_MorphParams;\r\nuniform vec4 u_MorphAttrOffset;\r\n\r\n\t#define Morph_TexWidth\t   u_MorphParams.x\r\n\t#define Morph_TexHeight\t   u_MorphParams.y\r\n\t#define Morph_AttributeNum u_MorphParams.z\r\n\t#define Morph_TargetNum\t   u_MorphParams.w\r\n\r\n\t#define Morph_PositionOffset u_MorphAttrOffset.x\r\n\t#define Morph_NormalOffset   u_MorphAttrOffset.y\r\n\t#define Morph_TangentOffset  u_MorphAttrOffset.z\r\n\r\n//#define MORPH_MAX_COUNT 32 //兼容WGSL\r\n\r\n/// dynamic params\r\n//uniform float u_MorphActiveTargets[MORPH_MAX_COUNT];\r\n//uniform float u_MorphTargetWeights[MORPH_MAX_COUNT];\r\nuniform vec4 u_MorphActiveTargets[MORPH_MAX_COUNT];\r\nuniform int u_MorphTargetActiveCount;\r\n\r\n\t#define MORPH_ACTIVE_COUNT u_MorphTargetActiveCount\r\n\r\nvec4 sampleMorphTargets(in int vertexID, in float targetID)\r\n{\r\n    int v = vertexID / int(Morph_TexWidth);\r\n    int u = vertexID - v * int(Morph_TexWidth);\r\n\r\n    vec3 uvw = vec3((float(u) + 0.5) / Morph_TexWidth, (float(v) + 0.5) / Morph_TexHeight, targetID);\r\n\r\n    return texture(u_MorphTargetsTex, uvw);\r\n}\r\n\r\nvec3 positionMorph(in vec3 position)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_PositionOffset);\r\n\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    position += sampleMorphTargets(vertexID, index).xyz * weight;\r\n\t}\r\n\r\n    return position;\r\n}\r\n\r\nvec3 normalMorph(in vec3 normal)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_NormalOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    normal += sampleMorphTargets(vertexID, index).xyz * weight;\r\n\t}\r\n\r\n    return normal;\r\n}\r\n\r\nvec4 tangentMorph(in vec4 tangent)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_TangentOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    vec4 sampleTangent = sampleMorphTargets(vertexID, index);\r\n\r\n\t    tangent.xyz += sampleTangent.xyz * weight * tangent.w * sampleTangent.w;\r\n\t}\r\n\r\n    return tangent;\r\n}\r\n\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n#endif // MorphTarget_lib","#if !defined(VertexCommon_lib)\r\n    #define VertexCommon_lib\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#include \"MorphTarget.glsl\";\r\n    #endif // MORPHTARGETS\r\n\r\nstruct Vertex {\r\n\r\n    vec3 positionOS;\r\n\r\n    vec3 normalOS;\r\n\r\n    #ifdef TANGENT\r\n    vec4 tangentOS;\r\n    #endif // TANGENT\r\n\r\n    // todo  uv define ?\r\n    #ifdef UV\r\n    vec2 texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vec2 texCoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n\r\n    #ifdef LIGHTMAP\r\n    vec4 lightmapScaleOffset;\r\n\t#endif LIGHTMAP\r\n};\r\n\r\n/**\r\n * vertex position\r\n */\r\nvec4 getVertexPosition()\r\n{\r\n    vec4 position = a_Position;\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_POSITION\r\n    #ifdef GRAPHICS_API_GLES3\r\n    position.xyz = positionMorph(position.xyz);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_POSITION\r\n    #endif // MORPHTARGETS\r\n\r\n    return position;\r\n}\r\n\r\nvec3 getVertexNormal()\r\n{\r\n    vec3 normal = a_Normal.xyz;\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_NORMAL\r\n    #ifdef GRAPHICS_API_GLES3\r\n    normal.xyz = normalMorph(normal);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_NORMAL\r\n    #endif // MORPHTARGETS\r\n\r\n    return normal;\r\n}\r\n\r\n    #ifdef TANGENT\r\nvec4 getVertexTangent()\r\n{\r\n    vec4 tangent = a_Tangent0;\r\n\r\n\t#ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_TANGENT\r\n    #ifdef GRAPHICS_API_GLES3\r\n    tangent = tangentMorph(tangent);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_TANGENT\r\n\t#endif // MORPHTARGETS\r\n\r\n    return tangent;\r\n}\r\n    #endif // TANGENT\r\n\r\n    #ifdef LIGHTMAP\r\n#ifndef GPU_INSTANCE\r\n    uniform vec4 u_LightmapScaleOffset;\r\n#endif // GPU_INSTANCE\r\n\r\nvec4 getLightmapScaleOffset(){\r\n    \r\n    #ifdef GPU_INSTANCE\r\n        return a_LightmapScaleOffset;\r\n    #else\r\n        return u_LightmapScaleOffset;\r\n    #endif // GPU_INSTANCE\r\n}\r\n    #endif // LIGHTMAP\r\n\r\nvoid getVertexParams(inout Vertex vertex)\r\n{\r\n    vertex.positionOS = getVertexPosition().xyz;\r\n\r\n    vertex.normalOS = getVertexNormal();\r\n\r\n    #ifdef TANGENT\r\n    vertex.tangentOS = getVertexTangent();\r\n    #endif // TANGENT\r\n\r\n    #ifdef UV\r\n    vertex.texCoord0 = a_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vertex.texCoord1 = a_Texcoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    // consider vertexColor is gamma\r\n    vertex.vertexColor = vec4(pow(a_Color.rgb, vec3(2.2)), a_Color.a);\r\n    #endif // COLOR\r\n\r\n    #ifdef LIGHTMAP\r\n    vertex.lightmapScaleOffset = getLightmapScaleOffset();\r\n\t#endif LIGHTMAP\r\n}\r\n\r\n#endif // VertexCommon_lib","#if !defined(ShadingCommon_lib)\r\n    #define ShadingCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    // todo\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // ShadingCommon_lib","#if !defined(ShadingVertex_lib)\r\n    #define ShadingVertex_lib\r\n\r\n    #include \"ShadingCommon.glsl\";\r\n\r\nvoid sharePixelParams(const in PixelParams params)\r\n{\r\n    v_PositionWS = params.positionWS;\r\n\r\n    v_NormalWS = params.normalWS;\r\n    v_TangentWS = params.tangentWS;\r\n    v_BiNormalWS = params.biNormalWS;\r\n\r\n    #ifdef UV\r\n    v_Texcoord0 = params.uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    v_Texcoord1 = params.uv1;\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    v_VertexColor = params.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\nvoid shadingPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    params.positionWS = pos.xyz / pos.w;\r\n\r\n    mat3 normalMat = transpose(inverse(mat3(worldMat)));\r\n    params.normalWS = normalize((normalMat * vertex.normalOS).xyz);\r\n\r\n    #ifdef TANGENT\r\n    params.tangentWS = normalize((normalMat * vertex.tangentOS.xyz).xyz);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(vertex.tangentOS.w));\r\n    #else // TANGENT\r\n    params.tangentWS = vec3(1.0, 0.0, 0.0);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\r\n    #endif // TANGENT\r\n\r\n    #ifdef UV\r\n    params.uv0 = vertex.texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, vertex.lightmapScaleOffset);\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = vertex.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingVertex_lib","#if !defined(ShadingFrag_lib)\r\n    #define ShadingFrag_lib\r\n\r\n    #include \"ShadingCommon.glsl\";\r\n\r\n    #define _InvertNormal (float(gl_FrontFacing) * 2.0 - 1.0);\r\n\r\nvoid getPixelParams(inout PixelParams params)\r\n{\r\n    params.positionWS = v_PositionWS;\r\n\r\n    float invertN = _InvertNormal;\r\n\r\n    params.normalWS = normalize(v_NormalWS * invertN);\r\n    params.tangentWS = normalize(v_TangentWS * invertN);\r\n    params.biNormalWS = normalize(v_BiNormalWS * invertN);\r\n\r\n    params.TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\r\n\r\n    #ifdef UV\r\n    params.uv0 = v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = v_VertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingFrag_lib","#if !defined(OutputTransform_lib)\r\n    #define OutputTransform_lib\r\n\r\nvec3 gammaCorrect(in vec3 color, float gammaValue)\r\n{\r\n    return pow(color, vec3(gammaValue));\r\n}\r\n\r\nvec4 gammaCorrect(in vec4 color)\r\n{\r\n    // todo color gamut gamma value\r\n    // default sRGB\r\n    float gammaValue = 1.0 / 2.2;\r\n    return vec4(gammaCorrect(color.rgb, gammaValue), color.a);\r\n}\r\n\r\nvec4 outputTransform(in vec4 color)\r\n{\r\n    #ifdef GAMMACORRECT\r\n    // render in linear, output gamma\r\n    return gammaCorrect(color);\r\n    #else // GAMMACORRECT\r\n    return color;\r\n    #endif // GAMMACORRECT\r\n}\r\n\r\n#endif // OutputTransform_lib\r\n","#if !defined(SceneCommon_lib)\r\n    #define SceneCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\nuniform SceneUniformBlock\r\n{\r\n    // time\r\n    float u_Time;\r\n    vec4 u_FogParams;// x start,y range,z Density\r\n    vec4 u_FogColor;\r\n};\r\n    #else // ENUNIFORMBLOCK\r\n// time\r\nuniform float u_Time;\r\nuniform vec4 u_FogParams;//x start,y range,z Density\r\nuniform vec4 u_FogColor;\r\n    #endif // ENUNIFORMBLOCK\r\n    //rotate SH IBL\r\nuniform float u_GIRotate;\r\n\r\n#endif // SceneCommon_lib","#if !defined(CameraCommon_lib)\r\n    #define CameraCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\n\r\nuniform CameraUniformBlock\r\n{\r\n    mat4 u_View;\r\n    mat4 u_Projection;\r\n    mat4 u_ViewProjection;\r\n    vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\n    vec4 u_Viewport; // x,y,width,height\r\n    vec3 u_CameraDirection;\r\n    vec3 u_CameraUp;\r\n    vec3 u_CameraPos;\r\n};\r\n    #else\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\nuniform mat4 u_ViewProjection;\r\nuniform vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\nuniform vec4 u_Viewport; // x, y, width, height\r\nuniform vec3 u_CameraDirection;\r\nuniform vec3 u_CameraUp;\r\nuniform vec3 u_CameraPos;\r\n    #endif // ENUNIFORMBLOCK\r\n\r\n/*Depth or DepthNormal Uniform*/\r\nuniform highp sampler2D u_CameraDepthTexture;\r\nuniform vec4 u_ZBufferParams; //(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near)\r\nuniform mediump sampler2D u_CameraDepthNormalsTexture;\r\nuniform mediump sampler2D u_CameraOpaqueTexture;\r\nuniform vec4 u_OpaqueTextureParams;\r\n\r\nvec4 getPositionCS(in vec3 positionWS)\r\n{\r\n    return u_ViewProjection * vec4(positionWS, 1.0);\r\n}\r\n\r\nvec3 getViewDirection(in vec3 positionWS)\r\n{\r\n    return normalize(u_CameraPos - positionWS);\r\n}\r\n\r\n// 根据投影矩阵重映射深度\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n\r\n    #ifdef REMAP_Z\r\n    position.z = position.z * 2.0 - position.w;\r\n    #endif\r\n    return position;\r\n}\r\n\r\n#endif // CameraCommon_lib","#if !defined(SkyCommon_lib)\r\n    #define SkyCommon_lib\r\n\r\nuniform vec3 u_SunLight_direction;\r\nuniform vec4 u_SunLight_color;\r\nuniform mat4 u_SkyViewMat;\r\nuniform mat4 u_SkyProjectionMat;\r\nuniform mat4 u_SkyProjectionViewMat;\r\n\r\nvec4 remapSkyPositionZ(in vec4 position)\r\n{\r\n    position.z = position.w;\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\n\r\nconst float c_deg2ang = 3.141593 / 180.0;\r\nvec4 rotateAroundYInDegrees(vec4 vertex, float deg)\r\n{\r\n    float angle = deg * c_deg2ang;\r\n    float sina = sin(angle);\r\n    float cosa = cos(angle);\r\n    mat2 m = mat2(cosa, -sina, sina, cosa);\r\n    return vec4(m * vertex.xz, vertex.yw).xzyw;\r\n}\r\n\r\n\r\n#endif // SkyCommon_lib","#if !defined(Sprite3DCommon_lib)\r\n    #define Sprite3DCommon_lib\r\n\r\nuniform mat4 u_WorldMat;\r\n\r\nuniform vec4 u_WroldInvertFront; // x: invert front face\r\n\r\n    \r\n\r\n\r\nvec2 tranformLightMapUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 lightMapUV = vec2(texcoord.x, 1.0 - texcoord.y) * tilingOffset.xy + tilingOffset.zw;\r\n    lightMapUV.y = 1.0 - lightMapUV.y;\r\n    return lightMapUV;\r\n}\r\n\r\nvec2 transformUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 uv = texcoord * tilingOffset.xy + tilingOffset.zw * vec2(1.0, -1.0) + vec2(0.0, 1.0 - tilingOffset.y);\r\n    return uv;\r\n}\r\n\r\n#endif // Sprite3DCommon_lib","#if !defined(Sprite3DVertex_lib)\r\n    #define Sprite3DVertex_lib\r\n\r\n    #include \"Sprite3DCommon.glsl\";\r\n\r\n    #ifdef BONE\r\n// todo const int c_MaxBoneCount = 24\r\nuniform mat4 u_Bones[24];\r\n\r\n\t#ifdef SIMPLEBONE\r\nuniform vec4 u_SimpleAnimatorParams;\r\nuniform sampler2D u_SimpleAnimatorTexture;\r\nuniform float u_SimpleAnimatorTextureSize;\r\n\t    #include \"BakedBoneMatrixSampler.glsl\";\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n/**\r\n * world matrix\r\n */\r\nmat4 getWorldMatrix()\r\n{\r\n    #ifdef GPU_INSTANCE\r\n    mat4 worldMat = a_WorldMat;\r\n    #else\r\n    mat4 worldMat = u_WorldMat;\r\n    #endif // GPU_INSTANCE\r\n\r\n    #ifdef BONE\r\n\r\n\t#ifdef SIMPLEBONE\r\n\r\n\t    #ifdef GPU_INSTANCE\r\n    float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\r\n\t    #else // GPU_INSTANCE\r\n    float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\r\n\t    #endif // GPU_INSTANCE\r\n\r\n    float offset = 1.0 / u_SimpleAnimatorTextureSize;\r\n    mat4 skinTrans = loadBakedMatMatrix(currentPixelPos, a_BoneIndices.x, offset) * a_BoneWeights.x;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.y, offset) * a_BoneWeights.y;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.z, offset) * a_BoneWeights.z;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.w, offset) * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#else // SIMPLEBONE\r\n\r\n    ivec4 boneIndex = ivec4(a_BoneIndices);\r\n    mat4 skinTrans = u_Bones[boneIndex.x] * a_BoneWeights.x;\r\n    skinTrans += u_Bones[boneIndex.y] * a_BoneWeights.y;\r\n    skinTrans += u_Bones[boneIndex.z] * a_BoneWeights.z;\r\n    skinTrans += u_Bones[boneIndex.w] * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n    return worldMat;\r\n}\r\n\r\nvec2 getSimpleBoneCustomData(){\r\n    vec2 custom;\r\n   #ifdef BONE\r\n    #ifdef SIMPLEBONE\r\n    #ifdef GPU_INSTANCE\r\n    custom=a_SimpleTextureParams.zw;\r\n    #else// GPU_INSTANCE\r\n    custom=u_SimpleAnimatorParams.zw;\r\n    #endif// GPU_INSTANCE\r\n    #endif// SIMPLEBONE\r\n  #endif // BONE\r\n    return custom;\r\n}\r\n\r\n#endif // Sprite3DVertex_lib","#if !defined(Sprite3DFrag_lib)\r\n    #define Sprite3DFrag_lib\r\n\r\n    #include \"Sprite3DCommon.glsl\";\r\n\r\n#endif // Sprite3DFrag_lib","#if !defined(DepthVertex_lib)\r\n    #define DepthVertex_lib\r\n    #include \"Math.glsl\";\r\n    #include \"Scene.glsl\";\r\n    #include \"Camera.glsl\";\r\n    #include \"Sprite3DVertex.glsl\";\r\n\r\n    #include \"VertexCommon.glsl\";\r\n\r\n    #if defined(SHADOW) || defined(SHADOW_SPOT)\r\n\r\n\t#ifndef DEPTHPASS\r\n\t    #ifdef ENUNIFORMBLOCK\r\nuniform ShadowUniformBlock\r\n{\r\n    vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n    vec3 u_ShadowLightDirection;\r\n};\r\n\t    #else // ENUNIFORMBLOCK\r\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n\t\t#ifdef SHADOW\r\nuniform vec3 u_ShadowLightDirection;\r\n\t\t#endif // SHADOW\r\n\t    #endif // ENUNIFORMBLOCK\r\n\r\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\r\n{\r\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS), 0.0, 1.0);\r\n    float scale = invNdotL * u_ShadowBias.y;\r\n\r\n    // normal bias is negative since we want to apply an inset normal offset\r\n    positionWS += -lightDirection * u_ShadowBias.xxx;\r\n    positionWS += normalWS * vec3(scale);\r\n    return positionWS;\r\n}\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW || SHADOW_SPOT\r\n\r\n    #ifdef DEPTHPASS\r\n\t#include \"Camera.glsl\";\r\n    #endif // DEPTHPASS\r\n\r\nvec4 DepthPositionCS(in vec3 positionWS, in vec3 normalWS)\r\n{\r\n    #ifdef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    #endif // DEPTHPASS\r\n\r\n    #ifdef SHADOW\r\n\t#ifndef DEPTHPASS\r\n    positionWS = applyShadowBias(positionWS, normalWS, u_ShadowLightDirection);\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW\r\n\r\n    #ifdef SHADOW_SPOT\r\n\t#ifndef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = positionCS.z - u_ShadowBias.x / positionCS.w;\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW_SPOT\r\n\r\n    return positionCS;\r\n}\r\n\r\n#endif // DepthVertex_lib","#if !defined(DepthFrag_lib)\r\n    #define DepthFrag_lib\r\n\r\nvec4 getDepthColor()\r\n{\r\n    return vec4(0.0);\r\n}\r\n\r\n#endif // DepthFrag_lib","#define SAMPLE_DEPTH_TEXTURE(textureName, coord2) (texture2D(textureName, coord2).r)\r\n//此方法库用来压缩解析深度贴图，法线深度贴图\r\n\r\n// Encoding/decoding view space normals into 2D 0..1 vector\r\nvec2 EncodeViewNormalStereo(vec3 n)\r\n{\r\n    n.z = abs(n.z);\r\n    float kScale = 1.7777;\r\n    vec2 enc;\r\n    enc = n.xy / (n.z + 1.0);\r\n    enc /= kScale;\r\n    enc = enc * 0.5 + 0.5;\r\n    return enc;\r\n}\r\n\r\nvec3 DecodeViewNormalStereo(vec4 enc4)\r\n{\r\n    float kScale = 1.7777;\r\n    vec3 nn = enc4.xyz * vec3(2.0 * kScale, 2.0 * kScale, 0.0) + vec3(-kScale, -kScale, 1.0);\r\n    float g = 2.0 / dot(nn.xyz, nn.xyz);\r\n    vec3 n;\r\n    n.xy = g * nn.xy;\r\n    n.z = g - 1.0;\r\n    return n;\r\n}\r\n\r\n// Encoding/decoding [0..1) floats into 8 bit/channel RG. Note that 1.0 will not be encoded properly.\r\nvec2 EncodeFloatRG(float v)\r\n{\r\n    vec2 kEncodeMul = vec2(1.0, 255.0);\r\n    float kEncodeBit = 1.0 / 255.0;\r\n    vec2 enc = kEncodeMul * v;\r\n    enc = fract(enc);\r\n    enc.x -= enc.y * kEncodeBit;\r\n    return enc;\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvec4 EncodeDepthNormal(float depth, vec3 normals)\r\n{\r\n    vec4 encode;\r\n    encode.xy = EncodeViewNormalStereo(normals);\r\n    encode.zw = EncodeFloatRG(depth);\r\n    return encode;\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth, out vec3 normal)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n    normal = DecodeViewNormalStereo(enc);\r\n}\r\n\r\nvec4 depthNormalsFragment(vec4 depthNormal)\r\n{\r\n    return EncodeDepthNormal(depthNormal.w, depthNormal.xyz);\r\n}\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n","#if !defined(DepthNormalFrag_lib)\r\n    #define DepthNormalFrag_lib\r\n\r\n    #include \"DepthNormalUtil.glsl\";\r\n\r\nvec4 encodeDepthNormal(const in vec4 positionCS, const in vec3 normalWS)\r\n{\r\n    float depth = (positionCS.z * 2.0 - positionCS.w) * u_ProjectionParams.w;\r\n\r\n    vec3 normalVS = mat3(u_View) * normalWS;\r\n\r\n    return EncodeDepthNormal(depth, normalVS);\r\n}\r\n\r\n#endif // DepthNormalFrag_lib","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nfloat getFogFactor()\r\n{\r\n    return v_fogFactor;\r\n}\r\n\r\nvec3 scenUnlitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n\t#ifdef ADDTIVEFOG\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(vec3(0.0), color, lerpFact);\r\n\t#else\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n\t#endif // ADDTIVEFOG\r\n}\r\n\r\nvec3 sceneLitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n}\r\n\r\n    #endif\r\n#endif // SceneFog_lib","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nvoid FogHandle(in float fact)\r\n{\r\n    float lerpFact = 0.0;\r\n\t#ifdef FOG_EXP\r\n    lerpFact = fact * (u_FogParams.z / log(2.0));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#elif defined(FOG_EXP2)\r\n    lerpFact = fact * (u_FogParams.z / sqrt(log(2.0)));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#else // default FOG_LINEAR\r\n    lerpFact = (-1.0 * fact / (u_FogParams.y - u_FogParams.x) + u_FogParams.y / (u_FogParams.y - u_FogParams.x));\r\n\t#endif\r\n    v_fogFactor = lerpFact;\r\n}\r\n    #endif\r\n#endif // SceneFog_lib","// ------------------------------------------------------------------\r\n//  PCF Filtering Tent Functions\r\n// ------------------------------------------------------------------\r\n\r\n// Assuming a isoceles right angled triangle of height \"triangleHeight\" (as drawn below).\r\n// This function return the area of the triangle above the first texel(in Y the first texel).\r\n//\r\n// |\\      <-- 45 degree slop isosceles right angled triangle\r\n// | \\\r\n// ----    <-- length of this side is \"triangleHeight\"\r\n// _ _ _ _ <-- texels\r\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\r\n{\r\n    return triangleHeight - 0.5;\r\n}\r\n\r\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\r\n// This function return the area of the triangle above each of those texels.\r\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\r\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\r\n//  /   \\\r\n// _ _ _ _ <-- texels\r\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\r\n{\r\n    // Compute the exterior areas,a and h is same.\r\n    float a = offset + 0.5;\r\n    float offsetSquaredHalved = a * a * 0.5;\r\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\r\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\r\n\r\n    // Compute the middle areas\r\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\r\n    // intersect the axis between Y and Z (ie where offset = 0).\r\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\r\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\r\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\r\n    float clampedOffsetLeft = min(offset,0.0);\r\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\r\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\r\n\r\n    // We do the same for the Z but with the right part of the isoceles triangle\r\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\r\n    float clampedOffsetRight = max(offset,0.0);\r\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\r\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\r\n}\r\n\r\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\r\n// This function return the weight of each texels area relative to the full triangle area.\r\n//  /       \\\r\n// _ _ _ _ _ _ <-- texels\r\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\r\n{\r\n    vec4 areaFrom3texelTriangle;\r\n    vec4 areaUncutFrom3texelTriangle;\r\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\r\n\r\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\r\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\r\n    // 0.16 is 1/(the triangle area)\r\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\r\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\r\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\r\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\r\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\r\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\r\n}\r\n\r\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\r\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\r\n{\r\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\r\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\r\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\r\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\r\n\r\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\r\n    vec3 texelsWeightsUA, texelsWeightsUB;\r\n    vec3 texelsWeightsVA, texelsWeightsVB;\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\r\n\r\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\r\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\r\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\r\n\r\n    // move the PCF bilinear fetches to respect texels weights\r\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\r\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\r\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\r\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\r\n\r\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\r\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\r\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\r\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\r\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\r\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\r\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\r\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\r\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\r\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\r\n\r\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\r\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\r\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\r\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\r\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\r\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\r\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\r\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\r\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\r\n}","//兼容WGSL\r\n#if !defined(ShadowSampler_lib)\r\n    #define ShadowSampler_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\n\t#define NO_NATIVE_SHADOWMAP\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #if defined(NO_NATIVE_SHADOWMAP)\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2D textureName\r\n    #define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2D shadowMap\r\n    #else // NO_NATIVE_SHADOWMAP\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2DShadow textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3, 0.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2DShadow shadowMap\r\n    #endif // NO_NATIVE_SHADOWMAP\r\n\r\n    // 计算阴影\r\n    #ifdef RECEIVESHADOW\r\n\r\n\t#include \"ShadowSampleTent.glsl\";\r\n\r\nuniform vec4 u_ShadowParams;\r\n\r\n\t#define ShadowStrength\t   u_ShadowParams.x\r\n\t#define SpotShadowStrength u_ShadowParams.y\r\n\r\n    // 平行光阴影\r\n\t#ifdef SHADOW\r\n\t    #define CALCULATE_SHADOWS\r\nvarying vec4 v_ShadowCoord;\r\nTEXTURE2D_SHADOW(u_ShadowMap);\r\nuniform vec4 u_ShadowMapSize;\r\n\r\n// #ifdef SHADOW_CASCADE\r\n// const int c_MaxCascadeCount = 4;\r\n// #else //SHADOW_CASCADE\r\n// const int c_MaxCascadeCount = 1;\r\n// #endif//SHADOW_CASCADE\r\n// uniform mat4 u_ShadowMatrices[c_MaxCascadeCount];\r\n// uniform vec4 u_ShadowSplitSpheres[c_MaxCascadeCount];\r\n\r\nuniform mat4 u_ShadowMatrices[4];\r\nuniform vec4 u_ShadowSplitSpheres[4];\r\n\t#endif // SHADOW\r\n\r\n\t// 聚光灯阴影\r\n\t#ifdef SHADOW_SPOT\r\n\t    #define CALCULATE_SPOTSHADOWS\r\nvarying vec4 v_SpotShadowCoord;\r\nTEXTURE2D_SHADOW(u_SpotShadowMap);\r\nuniform vec4 u_SpotShadowMapSize;\r\nuniform mat4 u_SpotViewProjectMatrix;\r\n\t#endif // SHADOW_SPOT\r\n\r\nfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowMapSize)\r\n{\r\n    float attenuation;\r\n    vec4 attenuation4;\r\n    vec2 offset = shadowMapSize.xy / 2.0;\r\n    vec3 shadowCoord0 = shadowCoord + vec3(-offset, 0.0);\r\n    vec3 shadowCoord1 = shadowCoord + vec3(offset.x, -offset.y, 0.0);\r\n    vec3 shadowCoord2 = shadowCoord + vec3(-offset.x, offset.y, 0.0);\r\n    vec3 shadowCoord3 = shadowCoord + vec3(offset, 0.0);\r\n    attenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\r\n    attenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\r\n    attenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\r\n    attenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\r\n    attenuation = dot(attenuation4, vec4(0.25));\r\n    return attenuation;\r\n}\r\n\r\nfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowmapSize)\r\n{\r\n    float attenuation;\r\n    float fetchesWeights[9];\r\n    vec2 fetchesUV[9];\r\n    sampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\r\n    attenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\r\n    return attenuation;\r\n}\r\n    #endif // RECEIVESHADOW\r\n\r\n    // 计算平行光阴影\r\n    #if defined(CALCULATE_SHADOWS)\r\n\r\n#ifdef SHADOW_CASCADE\r\n// 平行光阴影级联索引\r\nmediump int computeCascadeIndex(in vec3 positionWS)\r\n{\r\n    vec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\r\n    vec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\r\n    vec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\r\n    vec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\r\n\r\n    mediump vec4 comparison = vec4(dot(fromCenter0, fromCenter0) < u_ShadowSplitSpheres[0].w,\r\n\tdot(fromCenter1, fromCenter1) < u_ShadowSplitSpheres[1].w,\r\n\tdot(fromCenter2, fromCenter2) < u_ShadowSplitSpheres[2].w,\r\n\tdot(fromCenter3, fromCenter3) < u_ShadowSplitSpheres[3].w);\r\n\r\n    comparison.yzw = clamp(comparison.yzw - comparison.xyz, 0.0, 1.0); // keep the nearest\r\n    mediump vec4 indexCoefficient = vec4(4.0, 3.0, 2.0, 1.0);\r\n    mediump int index = 4 - int(dot(comparison, indexCoefficient));\r\n    return index;\r\n}\r\n#endif\r\n\r\n// 平行光阴影坐标\r\nvec4 getShadowCoord(in vec3 positionWS)\r\n{\r\n\t#ifdef SHADOW_CASCADE\r\n    mediump int cascadeIndex = computeCascadeIndex(positionWS);\r\n\t    #ifdef GRAPHICS_API_GLES3\r\n    mat4 shadowMat = u_ShadowMatrices[cascadeIndex];\r\n\t    #else // GRAPHICS_API_GLES3\r\n    mat4 shadowMat;\r\n    if (cascadeIndex == 0)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[0];\r\n\t}\r\n    else if (cascadeIndex == 1)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[1];\r\n\t}\r\n    else if (cascadeIndex == 2)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[2];\r\n\t}\r\n    else\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[3];\r\n\t}\r\n\t    #endif // GRAPHICS_API_GLES3\r\n\r\n    return shadowMat * vec4(positionWS, 1.0);\r\n\r\n\t#else // SHADOW_CASCADE\r\n\r\n    return u_ShadowMatrices[0] * vec4(positionWS, 1.0);\r\n\r\n\t#endif // SHADOW_CASCADE\r\n}\r\n\r\n// 采样平行光阴影\r\nfloat sampleShadowmap(in vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n\r\n    vec4 shadowmapSize = u_ShadowMapSize;\r\n\r\n    //if (coord.z > 0.0 && coord.z < 1.0)\r\n\t{\r\n\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_ShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_ShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap, coord);\r\n\t#endif // SHADOW_SOFT_SHADOW_HIGH\r\n\t    attenuation = mix(1.0, attenuation, ShadowStrength);\r\n\t}\r\n\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n        return attenuation;\r\n    return 1.0;\r\n}\r\n\r\n    #endif // CALCULATE_SHADOWS\r\n\r\n    // 计算 聚光灯 阴影\r\n    #if defined(CALCULATE_SPOTSHADOWS)\r\n\r\n// 聚光灯阴影坐标\r\nvec4 getSpotShadowCoord(in vec3 positionWS)\r\n{\r\n    vec4 coordinate = u_SpotViewProjectMatrix * vec4(positionWS, 1.0);\r\n\r\n    return coordinate;\r\n}\r\n\r\n// 采样聚光灯阴影\r\nfloat sampleSpotShadowmap(vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n    coord.xy = coord.xy * 0.5 + 0.5;\r\n\r\n    vec4 shadowmapSize = u_SpotShadowMapSize;\r\n    // todo\r\n    //if (coord.z > 0.0 && coord.z < 1.0)\r\n\t//{\r\n\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap, coord);\r\n\t#endif\r\n\t    attenuation = mix(1.0, attenuation, SpotShadowStrength);\r\n\t//}\r\n\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n        return attenuation;\r\n    return 1.0;\r\n}\r\n\r\n    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n#endif // ShadowSampler_lib","#if !defined(Lighting_lib)\r\n    #define Lighting_lib\r\n\r\n    #include \"ShadowSampler.glsl\";\r\n\r\nstruct Light {\r\n    vec3 color;\r\n    vec3 dir;\r\n    float attenuation;\r\n};\r\n\r\nstruct DirectionLight {\r\n    vec3 color;\r\n    vec3 direction;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct PointLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct SpotLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    vec3 direction;\r\n    float spot;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\n    #define LightMode_Mix      0\r\n    #define LightMode_RealTime 1\r\n\r\nint getAttenuationByMode(float lightMapMode)\r\n{\r\n    #ifdef LIGHTMAP // mix 0 realtime 1\r\n    return int(lightMapMode);\r\n    #else // LIGHTMAP\r\n\r\n\t#ifdef VOLUMETRICGI\r\n    return int(lightMapMode);\r\n\t#endif // VOLUMETRICGI\r\n\r\n    #endif // LIGHTMAP\r\n    return LightMode_RealTime;\r\n}\r\n\r\n    #if defined(DIRECTIONLIGHT) || defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n\r\n\t#define LIGHTING\r\n\r\n// 灯光衰减函数\r\nfloat attenuation(in vec3 L, in float invLightRadius)\r\n{\r\n    float fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\r\n    fRatio *= fRatio;\r\n    return 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0 * (1.0 - fRatio), 0.0, 1.0);\r\n}\r\n\r\n// 平行光\r\nLight getLight(in DirectionLight directionLight)\r\n{\r\n    Light light;\r\n    light.color = directionLight.color;\r\n    light.dir = directionLight.direction;\r\n    light.attenuation = directionLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 点光\r\nLight getLight(in PointLight pointLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - pointLight.position;\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / pointLight.range);\r\n\r\n    Light light;\r\n    light.color = pointLight.color * rangeAttenuate;\r\n    light.dir = normalize(lightDirection);\r\n    light.attenuation = pointLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 聚光灯\r\nLight getLight(in SpotLight spotLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - spotLight.position;\r\n    vec3 normalizeLightDir = normalize(lightDirection);\r\n\r\n    vec2 cosAngles = cos(vec2(spotLight.spot, spotLight.spot * 0.5) * 0.5);\r\n    float dirAttenuate = dot(spotLight.direction, normalizeLightDir);\r\n    dirAttenuate *= smoothstep(cosAngles.x, cosAngles.y, dirAttenuate);\r\n\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / spotLight.range);\r\n\r\n    Light light;\r\n    light.color = spotLight.color * rangeAttenuate * dirAttenuate;\r\n    light.dir = normalizeLightDir;\r\n    light.attenuation = spotLight.attenuation;\r\n    return light;\r\n}\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount 1\r\n\t    #define DirectionCount\t1\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform vec3 u_DirLightColor;\r\nuniform vec3 u_DirLightDirection;\r\nuniform int u_DirLightMode;\r\n\t    #endif // DIRECTIONLIGHT\r\n\r\n\t    #ifdef POINTLIGHT\r\n// uniform PointLight u_PointLight;\r\nuniform vec3 u_PointLightColor;\r\nuniform vec3 u_PointLightPos;\r\nuniform float u_PointLightRange;\r\nuniform int u_PointLightMode;\r\n\t    #endif // POINTLIGHT\r\n\r\n\t    #ifdef SPOTLIGHT\r\n// uniform SpotLight u_SpotLight;\r\nuniform vec3 u_SpotLightPos;\r\nuniform vec3 u_SpotLightColor;\r\nuniform vec3 u_SpotLightDirection;\r\nuniform float u_SpotLightRange;\r\nuniform float u_SpotLightSpot;\r\nuniform int u_SpotLightMode;\r\n\t    #endif // SPOTLIGHT\r\n\r\n\t#else // LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount MAX_LIGHT_COUNT\r\n\t    #define DirectionCount\tu_DirationLightCount\r\n\r\nuniform sampler2D u_LightBuffer;\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform mediump int u_DirationLightCount;\r\n\t    #endif\r\n\r\n\t    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT * CLUSTER_Y_COUNT;\r\nint c_ClusterBufferHeight = CLUSTER_Z_COUNT * (1 + int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER) / 4.0))); //兼容WGSL\r\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth * 4;\r\nuniform sampler2D u_LightClusterBuffer;\r\n\r\nint getLightIndex(in int offset, in int index)\r\n{\r\n    int totalOffset = offset + index;\r\n    int row = totalOffset / c_ClusterBufferFloatWidth;\r\n    int lastRowFloat = totalOffset - row * c_ClusterBufferFloatWidth;\r\n    int col = lastRowFloat / 4;\r\n    vec2 uv = vec2((float(col) + 0.5) / float(c_ClusterBufferWidth), (float(row) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 texPixel = texture2D(u_LightClusterBuffer, uv);\r\n    int pixelComponent = lastRowFloat - col * 4;\r\n\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n    return int(texPixel[pixelComponent]);\r\n\t\t#else\r\n    if (pixelComponent == 0)\r\n\treturn int(texPixel.x);\r\n    else if (pixelComponent == 1)\r\n\treturn int(texPixel.y);\r\n    else if (pixelComponent == 2)\r\n\treturn int(texPixel.z);\r\n    else\r\n\treturn int(texPixel.w);\r\n\t\t#endif\r\n}\r\n\t    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#endif // LEGACYSINGLELIGHTING\r\n\r\n\t#ifdef DIRECTIONLIGHT\r\nDirectionLight getDirectionLight(in int index, in vec3 positionWS)\r\n{\r\n    DirectionLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_DirLightColor;\r\n    light.direction = u_DirLightDirection;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_DirLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    float v = (float(index) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.direction = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p1.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // DIRECTIONLIGHT\r\n\r\n\t#if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nivec4 getClusterInfo(mat4 viewMatrix, vec4 viewport, vec3 positionWS, vec4 fragCoord, vec4 projectParams)\r\n{\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    return ivec4(1, 1, 0, 0);\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  这个地方 用 positionVS 替换?\r\n    vec3 viewPos = vec3(viewMatrix * vec4(positionWS, 1.0));\r\n    int clusterXIndex = int(floor(fragCoord.x / (float(viewport.z) / float(CLUSTER_X_COUNT))));\r\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z < 0.0 ? 0.0 : 1.0) - fragCoord.y * projectParams.z) / (float(viewport.w) / float(CLUSTER_Y_COUNT))));\r\n    float zSliceParam = float(CLUSTER_Z_COUNT) / log2(projectParams.y / projectParams.x);\r\n    int clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam - log2(projectParams.x) * zSliceParam));\r\n    // todo 化简\r\n    vec2 uv = vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT) + 0.5) / float(c_ClusterBufferWidth), (float(clusterZIndex) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 clusterPixel = texture2D(u_LightClusterBuffer, uv);\r\n    return ivec4(clusterPixel); // X:Point Count Y:Spot Count Z、W:Light Offset\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n}\r\n\t#endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#ifdef POINTLIGHT\r\nPointLight getPointLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n\r\n    PointLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_PointLightColor;\r\n    light.position = u_PointLightPos;\r\n    light.range = u_PointLightRange;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_PointLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int pointIndex = getLightIndex(indexOffset, index);\r\n    float v = (float(pointIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p2.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n    return light;\r\n}\r\n\t#endif // POINTLIGHT\r\n\r\n\t#ifdef SPOTLIGHT\r\nSpotLight getSpotLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n    SpotLight light;\r\n\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_SpotLightColor;\r\n    light.position = u_SpotLightPos;\r\n    light.range = u_SpotLightRange;\r\n    light.direction = u_SpotLightDirection;\r\n    light.spot = u_SpotLightSpot;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_SpotLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int spotIndex = getLightIndex(indexOffset, index + clusterInfo.x);\r\n    float v = (float(spotIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    vec4 p3 = texture2D(u_LightBuffer, vec2(0.625, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.spot = p2.a;\r\n    light.direction = p3.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p3.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SPOTSHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getSpotShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleSpotShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // SPOTLIGHT\r\n\r\n    #endif // DIRECTIONLIGHT || POINTLIGHT || SPOTLIGHT\r\n\r\n#endif // Lighting_lib","#if !defined(globalIllumination_lib)\r\n    #define globalIllumination_lib\r\n\r\n    #ifdef VOLUMETRICGI\r\n\t#include \"VolumetricGI.glsl\";\r\n    #endif // VOLUMETRICGI\r\n\r\nvec3 rotateByYAixs(in vec3 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec3(x, normal.y, z);\r\n}\r\n\r\nvec4 rotateByYAixs(in vec4 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec4(x, normal.y, z, normal.w);\r\n}\r\nuniform float u_AmbientIntensity;\r\nuniform float u_ReflectionIntensity;\r\n\r\n    #ifdef GI_IBL\r\n\r\nuniform vec3 u_IblSH[9];\r\n\r\nuniform samplerCube u_IBLTex;\r\nuniform float u_IBLRoughnessLevel;\r\n\r\n//#define IBL_ROUGHNESS_LEVEL u_IBLRoughnessLevel //兼容WGSL\r\n\r\n// todo 格式\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo cmeng 生成的数据问题， 临时转换下\r\n    vec3 n = normalWS * vec3(-1.0, 1.0, 1.0);\r\n    n = rotateByYAixs(n);\r\n    return max(\r\n\t       u_IblSH[0]\r\n\t\t   + u_IblSH[1] * n.y\r\n\t\t   + u_IblSH[2] * n.z\r\n\t\t   + u_IblSH[3] * n.x\r\n\t\t   + u_IblSH[4] * (n.y * n.x)\r\n\t\t   + u_IblSH[5] * (n.y * n.z)\r\n\t\t   + u_IblSH[6] * (3.0 * n.z * n.z - 1.0)\r\n\t\t   + u_IblSH[7] * (n.z * n.x)\r\n\t\t   + u_IblSH[8] * (n.x * n.x - n.y * n.y),\r\n\t       0.0)\r\n\t* u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float lod = u_IBLRoughnessLevel * perceptualRoughness * (2.0 - perceptualRoughness); //兼容WGSL\r\n\r\n    // todo 临时转换\r\n    vec3 reflectDir = r * vec3(-1.0, 1.0, 1.0);\r\n\r\n    // todo rotateY SceneConfig\r\n    reflectDir = rotateByYAixs(reflectDir);\r\n\r\n    // todo float 编码 ?\r\n    #ifdef LOD_TEXTURE_SAMPLE\r\n    vec4 reflectSampler = textureCubeLodEXT(u_IBLTex, reflectDir, lod);\r\n    #else\r\n    vec4 reflectSampler = textureLod(u_IBLTex, reflectDir, lod); //兼容WGSL\r\n    #endif\r\n\r\n\t#ifdef IBL_RGBD\r\n    return decodeRGBD(reflectSampler) * u_ReflectionIntensity;\r\n\t#else // IBL_RGBD\r\n    return reflectSampler.rgb * u_ReflectionIntensity;\r\n\t#endif // IBL_RGBD\r\n}\r\n\r\n    #endif // GI_IBL\r\n\r\n    #ifdef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientSHAr;\r\nuniform vec4 u_AmbientSHAg;\r\nuniform vec4 u_AmbientSHAb;\r\nuniform vec4 u_AmbientSHBr;\r\nuniform vec4 u_AmbientSHBg;\r\nuniform vec4 u_AmbientSHBb;\r\nuniform vec4 u_AmbientSHC;\r\n\r\n\t#define LAYA_SPECCUBE_LOD_STEPS 6.0\r\nuniform samplerCube u_ReflectTexture;\r\nuniform vec4 u_ReflectCubeHDRParams;\r\n\r\nvec3 shEvalLinearL0L1(in vec4 normal)\r\n{\r\n    vec3 x;\r\n    x.r = dot(u_AmbientSHAr, normal);\r\n    x.g = dot(u_AmbientSHAg, normal);\r\n    x.b = dot(u_AmbientSHAb, normal);\r\n    return x;\r\n}\r\n\r\nvec3 shEvalLinearL2(in vec4 normal)\r\n{\r\n    vec3 x1, x2;\r\n    // 4 of the quadratic (L2) polynomials\r\n    vec4 vB = normal.xyzz * normal.yzzx;\r\n    x1.r = dot(u_AmbientSHBr, vB);\r\n    x1.g = dot(u_AmbientSHBg, vB);\r\n    x1.b = dot(u_AmbientSHBb, vB);\r\n\r\n    // Final (5th) quadratic (L2) polynomial\r\n    float vC = normal.x * normal.x - normal.y * normal.y;\r\n    x2 = u_AmbientSHC.rgb * vC;\r\n\r\n    return x1 + x2;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo -x 坐标转换\r\n    vec4 normal = vec4(-normalWS.x, normalWS.yz, 1.0);\r\n\r\n    // TODO rotate y SceneConfig\r\n\r\n    normal = rotateByYAixs(normal);\r\n\r\n    vec3 ambientContrib = shEvalLinearL0L1(normal);\r\n    ambientContrib += shEvalLinearL2(normal);\r\n    vec3 ambient = max(vec3(0.0), ambientContrib);\r\n\r\n    return ambient * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);\r\n    // todo 临时转换\r\n    r *= vec3(-1.0, 1.0, 1.0);\r\n    r = rotateByYAixs(r);\r\n\r\n    float lod = roughness * LAYA_SPECCUBE_LOD_STEPS;\r\n    vec4 rgbm = textureCubeLodEXT(u_ReflectTexture, r, lod);\r\n    float range = u_ReflectCubeHDRParams.x;\r\n    vec3 color = decodeRGBM(rgbm, range);\r\n    color = gammaToLinear(color);\r\n    return color * u_ReflectionIntensity;\r\n}\r\n\r\n    #endif // GI_LEGACYIBL\r\n\r\n    #ifndef GI_IBL\r\n\t#ifndef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientColor;\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    return u_AmbientColor.rgb * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n    return diffuseIrradiance(normalWS);\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    // todo\r\n    return u_AmbientColor.rgb * u_ReflectionIntensity;\r\n}\r\n\r\n\t#endif // GI_LEGACYIBL\r\n    #endif // GI_IBL\r\n\r\n    #ifdef LIGHTMAP\r\n\r\n\t#ifdef UV1\r\n\t    #define USELIGHTMAP\r\n\t#endif // UV1\r\n\r\nuniform sampler2D u_LightMap;\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n\r\nuniform sampler2D u_LightMapDirection;\r\n\r\nvec3 DecodeDirectionalLightmap(in vec2 lightmapUV, in vec3 bakeColor, in vec3 normalWS)\r\n{\r\n    vec4 dirLightmap = texture2D(u_LightMapDirection, lightmapUV);\r\n    vec3 lightdir = normalize(dirLightmap.xyz - vec3(0.5)); // 0-1  => -0.5-0.5\r\n    //根据法线计算半兰伯特\r\n    float halfLambert = clamp(dot(normalWS, lightdir), 0.0, 1.0) * 0.5 + 0.5;\r\n    return bakeColor * halfLambert / max(dirLightmap.w, 0.001);\r\n}\r\n\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\nvec3 getBakedLightmapColor(in vec2 lightmapUV, in vec3 normalWS)\r\n{\r\n    vec4 lightmapSampler = texture2D(u_LightMap, lightmapUV);\r\n\t// todo lightmap rgbm encode color space\r\n    lightmapSampler.rgb =  decodeRGBM(lightmapSampler,5.0);\r\n\r\n\t//#ifdef Gamma_u_LightMap\r\n    lightmapSampler = gammaToLinear(lightmapSampler);\r\n\t//#endif // Gamma_u_LightMap\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n    lightmapSampler.rgb = DecodeDirectionalLightmap(lightmapUV, lightmapSampler.rgb, normalWS);\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\n    return lightmapSampler.rgb;\r\n}\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n\r\nuniform vec3 u_SpecCubeProbePosition;\r\nuniform vec3 u_SpecCubeBoxMax;\r\nuniform vec3 u_SpecCubeBoxMin;\r\n\r\nvec3 getBoxProjectionReflectedVector(vec3 r, vec3 positionWS)\r\n{\r\n    vec3 boxCenter = u_SpecCubeProbePosition;\r\n    vec3 boxMin = u_SpecCubeBoxMin;\r\n    vec3 boxMax = u_SpecCubeBoxMax;\r\n\r\n    vec3 nr = normalize(r);\r\n    vec3 rbmax = boxMax - positionWS;\r\n    vec3 rbmin = boxMin - positionWS;\r\n    vec3 select = step(vec3(0.0), r);\r\n    vec3 rbminmax = mix(rbmin, rbmax, select) / nr;\r\n    float scalar = vecmin(rbminmax);\r\n    vec3 boxr = nr * scalar + positionWS - boxCenter;\r\n    return boxr;\r\n}\r\n\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n#endif // globalIllumination_lib","#if !defined(Oct_lib)\r\n    #define Oct_lib\r\n\r\nfloat signNotZero(in float k) { return k >= 0.0 ? 1.0 : -1.0; }\r\n\r\nvec2 signNotZero(in vec2 v) { return vec2(signNotZero(v.x), signNotZero(v.y)); }\r\n\r\n/**\r\n * v: normalized sample dir\r\n * @return: oct encode uv [-1, 1]\r\n */\r\nvec2 octEncode(in vec3 v)\r\n{\r\n    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);\r\n    vec2 result = v.xy * (1.0 / l1norm);\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    result = (1.0 - abs(result.yx)) * signNotZero(result.xy);\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * x: u [-1, 1]\r\n * y: v [-1, 1]\r\n * @return: normalized sample dir\r\n */\r\nvec3 finalDecode(float x, float y)\r\n{\r\n    vec3 v = vec3(x, y, 1.0 - abs(x) - abs(y));\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);\r\n\t}\r\n    return normalize(v);\r\n}\r\n\r\n/**\r\n * dir: cubemap sample dir\r\n * outsize: probe size with border (x: probe x, y: probe y, z: 1 / probe x, w: 1\r\n * / probe y) gridsize: probe grid size (x: probe x index, y: probe y index, z:\r\n * grid x size, w: grid y size)\r\n * @return texture coord [0, 1]\r\n */\r\nvec2 textureCoordFromDirection(in vec3 dir, vec4 outSize, vec4 gridSize)\r\n{\r\n    vec2 uv = (octEncode(normalize(dir))) * 0.5 + 0.5;\r\n    uv = uv * (outSize.xy - vec2(2.0, 2.0)) * outSize.zw + outSize.zw;\r\n    uv = gridSize.xy * (1.0 / gridSize.zw) + uv * (1.0 / gridSize.zw);\r\n    return uv;\r\n}\r\n\r\n#endif // Oct_lib","#if !defined(GridHelpers_lib)\r\n    #define GridHelpers_lib\r\n\r\nint imod(int x, int y)\r\n{\r\n    #ifdef GRAPHICS_API_GLES3\r\n    return x % y;\r\n    #else // GRAPHICS_API_GLES3\r\n    return x - (x / y) * y;\r\n    #endif // GRAPHICS_API_GLES3\r\n}\r\n\r\nint gridCoordToProbeIndex(in ivec3 probeCoords, const in ivec3 probeCounts)\r\n{\r\n    return probeCoords.x + probeCoords.y * probeCounts.x + probeCoords.z * probeCounts.x * probeCounts.y;\r\n}\r\n\r\nivec3 probeIndexToGridcoord(in int probeIndex, const in ivec3 probeCounts)\r\n{\r\n    ivec3 iPos;\r\n    iPos.x = imod(probeIndex, probeCounts.x);\r\n    iPos.y = imod(probeIndex, (probeCounts.x * probeCounts.y)) / probeCounts.x;\r\n    iPos.z = probeIndex / (probeCounts.x * probeCounts.y);\r\n    return iPos;\r\n\r\n    //   ivec3 iPos;\r\n    //   iPos.x = probeIndex & (probeCounts.x - 1);\r\n    //   iPos.y = (probeIndex & ((probeCounts.x * probeCounts.y) - 1)) >>\r\n    //            findMSB(probeCounts.x);\r\n    //   iPos.z = probeIndex >> findMSB(probeCounts.x * probeCounts.y);\r\n    //   return iPos;\r\n}\r\n\r\nvec3 gridCoordToPosition(in ivec3 coord, const in vec3 probeStep,\r\n    const in vec3 probeStartPosition)\r\n{\r\n    return (vec3(coord) + 0.5) * probeStep + probeStartPosition;\r\n}\r\n\r\nivec3 baseGridCoord(in vec3 position, in vec3 probeStep,\r\n    in vec3 probeStartPosition, in ivec3 probeCounts)\r\n{\r\n    probeStartPosition += 0.5 * probeStep;\r\n    return ivec3(clamp(vec3((position - probeStartPosition) / probeStep),\r\n\tvec3(0, 0, 0), vec3(probeCounts) - vec3(1, 1, 1)));\r\n}\r\n\r\n#endif // GridHelpers_lib","// https://jcgt.org/published/0008/02/01/\r\n\r\n#if !defined(VolumetricGI_lib)\r\n    #define VolumetricGI_lib\r\n\r\n    #include \"Oct.glsl\";\r\n    #include \"GridHelpers.glsl\";\r\n\r\nuniform vec3 u_VolGIProbeCounts;\r\nuniform vec3 u_VolGIProbeStep;\r\nuniform vec3 u_VolGIProbeStartPosition;\r\nuniform vec4 u_VolGIProbeParams;\r\n\r\nstruct VolumetricGI {\r\n    vec3 probeCounts;\r\n    vec3 probeStep;\r\n    vec3 probeStartPosition;\r\n    vec4 probeParams; // x: irradianceTexels, y: distanceTexels, z: normalBias, w: viewBias\r\n};\r\n\r\nuniform sampler2D u_ProbeIrradiance;\r\nuniform sampler2D u_ProbeDistance;\r\n\r\nvec2 porbeGridCoordToTextureGridCoord(in ivec3 porbeGridCoord,\r\n    in ivec3 probeCounts,\r\n    in vec2 textureGridSize)\r\n{\r\n    int probeIndex = gridCoordToProbeIndex(porbeGridCoord, probeCounts);\r\n    ivec2 index;\r\n    index.x = imod(probeIndex, (probeCounts.x * probeCounts.y));\r\n    index.y = probeIndex / (probeCounts.x * probeCounts.y);\r\n\r\n    vec2 textureGridCoord = vec2(index);\r\n    textureGridCoord.y = textureGridCoord.y;\r\n    return textureGridCoord;\r\n}\r\n\r\nvec3 VolumetricGISurfaceBias(in vec3 surfaceNormal, in vec3 cameraDirection)\r\n{\r\n    return surfaceNormal * u_VolGIProbeParams.z + cameraDirection * u_VolGIProbeParams.w;\r\n}\r\n\r\nvec3 VolumetricGIVolumeIrradiance(in vec3 worldPosition, in vec3 surfaceBias,\r\n    in vec3 direction)\r\n{\r\n    // direction *= vec3(-1.0, 1.0, 1.0);\r\n    ivec3 porbeCounts = ivec3(u_VolGIProbeCounts);\r\n    vec3 probeStep = u_VolGIProbeStep;\r\n    vec3 probeStartPosition = u_VolGIProbeStartPosition;\r\n    vec2 volumeCounts = vec2(porbeCounts.x * porbeCounts.y, porbeCounts.z);\r\n    vec4 irradianceTexels = vec4(u_VolGIProbeParams.x, u_VolGIProbeParams.x, 1.0 / u_VolGIProbeParams.x, 1.0 / u_VolGIProbeParams.x);\r\n    vec4 distanceTexels = vec4(u_VolGIProbeParams.y, u_VolGIProbeParams.y, 1.0 / u_VolGIProbeParams.y, 1.0 / u_VolGIProbeParams.y);\r\n\r\n    ivec3 maxGridCoord = porbeCounts - ivec3(1);\r\n\r\n    vec3 irradiance = vec3(0.0);\r\n    float accumulatedWeights = 0.0;\r\n\r\n    // Bias the world space position\r\n    vec3 biasedWorldPosition = worldPosition + surfaceBias;\r\n\r\n    // Get the 3D grid coordinates of the probe nearest the biased world position\r\n    // (i.e. the \"base\" probe)\r\n    ivec3 baseProbeCoords = baseGridCoord(biasedWorldPosition, probeStep,\r\n\tprobeStartPosition, porbeCounts);\r\n\r\n    // Get the world-space position of the base probe (ignore relocation)\r\n    vec3 baseProbeWorldPosition = gridCoordToPosition(baseProbeCoords, probeStep, probeStartPosition);\r\n\r\n    // Clamp the distance (in grid space) between the given point and the base\r\n    // probe's world position (on each axis) to [0, 1]\r\n    vec3 gridSpaceDistance = biasedWorldPosition - baseProbeWorldPosition;\r\n\r\n    vec3 alpha = clamp(gridSpaceDistance / probeStep, vec3(0.0), vec3(1.0));\r\n\r\n    // Iterate over the 8 closest probes and accumulate their contributions\r\n    for (int probeIndex = 0; probeIndex < 8; probeIndex++)\r\n\t{\r\n\t    // Compute the offset to the adjacent probe in grid coordinates by sourcing\r\n\t    // the offsets from the bits of the loop index: x = bit 0, y = bit 1, z =\r\n\t    // bit 2\r\n\t    // ivec3 adjacentProbeOffset = ivec3(probeIndex, probeIndex >> 1, probeIndex >> 2) & ivec3(1, 1, 1);\r\n\t\tivec3 adjacentProbeOffset = ivec3(imod(probeIndex, 2), imod((probeIndex / 2), 2),imod( (probeIndex / 4), 2));\r\n\r\n\t    // Get the 3D grid coordinates of the adjacent probe by adding the offset to\r\n\t    // the base probe and clamping to the grid boundaries\r\n\t    ivec3 adjacentProbeCoords = ivec3(clamp(vec3(baseProbeCoords + adjacentProbeOffset), vec3(0), vec3(maxGridCoord)));\r\n\r\n\t    // Get the adjacent probe's world position\r\n\t    vec3 adjacentProbeWorldPosition = gridCoordToPosition(adjacentProbeCoords, probeStep, probeStartPosition);\r\n\r\n\t    // Compute the distance and direction from the (biased and non-biased)\r\n\t    // shading point and the adjacent probe\r\n\t    vec3 worldPosToAdjProbe = normalize(adjacentProbeWorldPosition - worldPosition);\r\n\t    vec3 biasedPosToAdjProbe = normalize(adjacentProbeWorldPosition - biasedWorldPosition);\r\n\t    float biasedPosToAdjProbeDist = distance(adjacentProbeWorldPosition, biasedWorldPosition);\r\n\r\n\t    // Compute trilinear weights based on the distance to each adjacent probe to\r\n\t    // smoothly transition between probes. adjacentProbeOffset is binary, so\r\n\t    // we're using a 1-alpha when adjacentProbeOffset = 0 and alpha when\r\n\t    // adjacentProbeOffset = 1.\r\n\t    vec3 trilinear = max(vec3(0.001), mix(1.0 - alpha, alpha, vec3(adjacentProbeOffset)));\r\n\t    float trilinearWeight = trilinear.x * trilinear.y * trilinear.z;\r\n\t    float weight = 1.0;\r\n\r\n\t    // A naive soft backface weight would ignore a probe when\r\n\t    // it is behind the surface. That's good for walls, but for\r\n\t    // small details inside of a room, the normals on the details\r\n\t    // might rule out all of the probes that have mutual visibility\r\n\t    // to the point. We instead use a \"wrap shading\" test. The small\r\n\t    // offset at the end reduces the \"going to zero\" impact.\r\n\t    float warpShading = (dot(worldPosToAdjProbe, direction) + 1.0) * 0.5;\r\n\t    weight *= (warpShading * warpShading) * 0.2;\r\n\r\n\t    vec2 textureGridCoord = porbeGridCoordToTextureGridCoord(\r\n\t\tadjacentProbeCoords, porbeCounts, volumeCounts);\r\n\t    // compute the octahedral coordinates of the adjacent probe\r\n\t    vec2 probeTextureUV = textureCoordFromDirection(-biasedPosToAdjProbe, distanceTexels,\r\n\t\tvec4(textureGridCoord, volumeCounts));\r\n\t    // Sample the probe's distance texture to get the mean distance to nearby\r\n\t    // surfaces\r\n\t    vec3 filteredDistance = texture2D(u_ProbeDistance, probeTextureUV).xyz;\r\n\t    // Find the variance of the mean distance\r\n\t    float variance = abs(filteredDistance.x * filteredDistance.x - filteredDistance.y);\r\n\r\n\t    // Occlusion test\r\n\t    float chebyshevWeight = 1.0;\r\n\t    if (biasedPosToAdjProbeDist > filteredDistance.x)\r\n\t\t{\r\n\t\t    float v = biasedPosToAdjProbeDist - filteredDistance.x;\r\n\t\t    // v must be greater than 0, which is guaranteed by the if condition\r\n\t\t    // above.\r\n\t\t    chebyshevWeight = variance / (variance + (v * v));\r\n\r\n\t\t    // Increase the contrast in the weight\r\n\t\t    chebyshevWeight = max(chebyshevWeight * chebyshevWeight * chebyshevWeight, 0.0);\r\n\t\t}\r\n\r\n\t    if (filteredDistance.z < 1.0)\r\n\t\t{\r\n\t\t    chebyshevWeight = 1.0;\r\n\t\t}\r\n\r\n\t    // Avoid visibility weights ever going all the way to zero because\r\n\t    // when *no* probe has visibility we need a fallback value\r\n\t    weight *= max(0.05, chebyshevWeight);\r\n\r\n\t    // Avoid a weight of zero\r\n\t    weight = max(0.000001, weight);\r\n\r\n\t    // A small amount of light is visible due to logarithmic perception, so\r\n\t    // crush tiny weights but keep the curve continuous\r\n\t    const float crushThreshold = 0.2;\r\n\t    if (weight < crushThreshold)\r\n\t\t{\r\n\t\t    weight *= (weight * weight) * (1.0 / (crushThreshold * crushThreshold));\r\n\t\t}\r\n\r\n\t    // Apply the trilinear weights\r\n\t    weight *= trilinearWeight;\r\n\r\n\t    probeTextureUV = textureCoordFromDirection(\r\n\t\tdirection, irradianceTexels, vec4(textureGridCoord, volumeCounts));\r\n\r\n\t    // Sample the probe's irradiance\r\n\t    vec3 probeIrradiance = linearToGamma(texture2D(u_ProbeIrradiance, probeTextureUV).rgb);\r\n\r\n\t    irradiance += (probeIrradiance * weight);\r\n\t    accumulatedWeights += weight;\r\n\t}\r\n\r\n    if (accumulatedWeights == 0.0)\r\n\t{\r\n\t    return vec3(0.0);\r\n\t}\r\n\r\n    irradiance *= (1.0 / accumulatedWeights); // Normalize by the accumulated weights\r\n\r\n    irradiance = gammaToLinear(irradiance);\r\n\r\n    return irradiance;\r\n}\r\n\r\n#endif // VolumetricGI_lib","#if !defined(BlinnPhongLighting_lib)\r\n    #define BlinnPhongLighting_lib\r\n\r\n    #include \"Lighting.glsl\";\r\n    #include \"globalIllumination.glsl\";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n\r\n    vec3 viewDir;\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    vec3 specularColor;\r\n    float shininess;\r\n    vec3 gloss;\r\n\r\n    vec3 normalTS;\r\n\r\n    float alpha;\r\n    float alphaClip;\r\n};\r\n\r\nvec3 BlinnPhongLighting(in Surface surface, in Light light, in PixelInfo pixel)\r\n{\r\n    vec3 l = normalize(-light.dir);\r\n    vec3 v = pixel.viewDir;\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float shininess = surface.shininess;\r\n    vec3 specularColor = surface.specularColor;\r\n    vec3 gloss = surface.gloss;\r\n\r\n    // difffuse\r\n    float ndl = max(0.0, dot(normalWS, l));\r\n    vec3 lightDiffuse = light.color * diffuseColor * ndl;\r\n\r\n    // specular\r\n    mediump vec3 h = normalize(v + l);\r\n    lowp float ndh = max(0.0, dot(h, normalWS));\r\n    float specularIntensity = pow(ndh, shininess * 128.0);\r\n    vec3 lightSpecular = light.color * specularColor * specularIntensity * gloss;\r\n\r\n    return lightDiffuse + lightSpecular;\r\n}\r\n\r\nvec3 BlinnPhongGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 indirect = vec3(0.0);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV, info.normalWS);\r\n\r\n    // todo  surface.diffuseColor ？\r\n    indirect = bakedColor * surface.diffuseColor;\r\n\r\n\t#endif // UV1\r\n\r\n    #else // LIGHTMAP\r\n\r\n    vec3 n = info.normalWS;\r\n    indirect = diffuseIrradiance(n) * surface.diffuseColor;\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    return indirect;\r\n}\r\n\r\n#endif // BlinnPhongLighting_lib","#if !defined(PBRLighting_lib)\r\n    #define PBRLighting_lib\r\n\r\n    #include \"Lighting.glsl\";\r\n\r\n    // 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.089\r\n\t#define MIN_ROUGHNESS\t\t 0.007921\r\n    #else\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.045\r\n\t#define MIN_ROUGHNESS\t\t 0.002025\r\n    #endif\r\n\r\n    #define MIN_N_DOT_V 1e-4\r\n\r\n    #include \"BRDF.glsl\";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n\r\n    vec3 viewDir;\r\n    float NoV;\r\n\r\n    vec3 dfg;\r\n    vec3 energyCompensation;\r\n\r\n    #ifdef IRIDESCENCE\r\n    vec3 iridescenceFresnel;\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef CLEARCOAT\r\n    vec3 clearCoatNormal;\r\n    float clearCoatNoV;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef SHEEN\r\n    float sheenScaling;\r\n    float sheenDfg;\r\n    #endif // SHEEN\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 anisotropicT;\r\n    vec3 anisotropicB;\r\n    float ToV;\r\n    float BoV;\r\n    float at;\r\n    float ab;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef THICKNESS\r\n    vec4 worldScale;\r\n    #endif // THICKNESS\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    vec3 f0;\r\n    vec3 f90;\r\n    float roughness;\r\n    float perceptualRoughness;\r\n    float occlusion;\r\n\r\n    #ifdef EMISSION\r\n    vec3 emissionColor;\r\n    #endif // EMISSION\r\n\r\n    vec3 normalTS;\r\n\r\n    float ior;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n    float clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef IRIDESCENCE\r\n    float iridescence;\r\n    float iridescenceIor;\r\n    float iridescenceThickness;\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\n    vec3 sheenColor;\r\n    float sheenRoughness;\r\n    float sheenPerceptualRoughness;\r\n    #endif // SHEEN\r\n\r\n    #ifdef TRANSMISSION\r\n    float transmission;\r\n    #endif // TRANSMISSION\r\n\r\n    #ifdef THICKNESS\r\n    float thickness;\r\n    vec3 attenuationColor;\r\n    float attenuationDistance;\r\n    #endif // THICKNESS\r\n};\r\n\r\nstruct LightParams {\r\n    vec3 l;\r\n    vec3 h;\r\n    float NoL;\r\n    float NoH;\r\n    float LoH;\r\n    float VoH;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoH;\r\n    float clearCoatNoL;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float ToL;\r\n    float BoL;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initLightParams(inout LightParams params, const in PixelInfo pixel, const in Light light)\r\n{\r\n    vec3 v = pixel.viewDir;\r\n    vec3 n = pixel.normalWS;\r\n\r\n    vec3 l = normalize(-light.dir);\r\n    params.l = l;\r\n\r\n    vec3 h = SafeNormalize(v + l);\r\n    params.h = h;\r\n    params.NoL = saturate(dot(n, l));\r\n    params.NoH = saturate(dot(n, h));\r\n    params.LoH = saturate(dot(l, h));\r\n    params.VoH = saturate(dot(v, h));\r\n\r\n    #ifdef CLEARCOAT\r\n    params.clearCoatNoL = saturate(dot(pixel.clearCoatNormal, l));\r\n    params.clearCoatNoH = saturate(dot(pixel.clearCoatNormal, h));\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 t = pixel.anisotropicT;\r\n    vec3 b = pixel.anisotropicB;\r\n    params.ToL = dot(t, l);\r\n    params.BoL = dot(b, l);\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec3 prefilteredDFG_LUT(float roughness, float NoV)\r\n{\r\n    vec2 samplePoint = clamp(vec2(NoV, roughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\r\n    samplePoint.y = 1.0 - samplePoint.y;\r\n    #if defined(FLOATTEXTURE) && defined(FLOATTEXTURE_FIL_LINEAR)\r\n    return (texture2D(u_IBLDFG, samplePoint)).rgb;\r\n    #else\r\n    return decodeRGBD(texture2D(u_IBLDFG, samplePoint));\r\n    #endif\r\n}\r\n\r\n// todo remove\r\nvec2 EnvBRDFApproxLazarov(float roughness, float NoV)\r\n{\r\n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\r\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\r\n    vec4 r = roughness * c0 + c1;\r\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\r\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\r\n    return AB;\r\n}\r\n\r\nfloat dielectricSpecularToF0(float specular)\r\n{\r\n    return 0.08 * specular;\r\n}\r\n\r\nfloat dielectricF0ToIor(float f0)\r\n{\r\n    return 2.0 / (1.0 - sqrt(min(f0, 0.99))) - 1.0;\r\n}\r\n\r\nfloat dielectricIorToF0(float ior)\r\n{\r\n    return pow2((ior - 1.0) / (ior + 1.0));\r\n}\r\n\r\n// input dielectric f0, output surface f0\r\nvec3 computeF0(vec3 f0, vec3 baseColor, float metallic)\r\n{\r\n    return mix(f0, baseColor, metallic);\r\n}\r\n\r\n// input surface f0, output surface f90\r\nvec3 computeF90(vec3 f0)\r\n{\r\n    return vec3(saturate(dot(f0, vec3(50.0 * 0.33))));\r\n}\r\n\r\nvec3 computeDiffuse(vec3 baseColor, float metallic)\r\n{\r\n    return (1.0 - metallic) * baseColor;\r\n}\r\n\r\nfloat specularAA(float roughness, in vec3 normalWS)\r\n{\r\n\r\n    #if !defined(GRAPHICS_API_GLES3) && !defined(GL_OES_standard_derivatives)\r\n\r\n    return roughness;\r\n\r\n    #else // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\r\n\r\n    vec3 du = dFdx(normalWS);\r\n    vec3 dv = dFdy(normalWS);\r\n\r\n    float specularAAVariance = 0.15;\r\n    float specularAAThreshold = 0.04;\r\n\r\n    float variance = specularAAVariance * (dot(du, du) + dot(dv, dv));\r\n    float kernelRoughness = min(2.0 * variance, specularAAThreshold);\r\n\r\n    float squareRoughness = saturate(roughness * roughness + kernelRoughness);\r\n\r\n    return sqrt(squareRoughness);\r\n\r\n    #endif // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\r\n}\r\n\r\nvec3 diffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    return surface.diffuseColor * Fd_Lambert();\r\n    // return surface.diffuseColor * Fd_Burley(surface.roughness, pixel.NoV, lightParams.NoL, lightParams.LoH);\r\n}\r\n\r\nvec3 specularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.roughness;\r\n\r\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\r\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\r\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\r\n\r\n    return (D * V) * F;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvec3 iridescenceDiffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    vec3 f0 = surface.f0;\r\n    vec3 f90 = vec3(1.0);\r\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\r\n    float iridescence = surface.iridescence;\r\n    float VoH = lightParams.VoH;\r\n    return surface.diffuseColor * Fd_IridescenceLambert(f0, f90, iridescenceFresnel, iridescence, VoH);\r\n}\r\n\r\nvec3 iridescenceSpecularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.roughness;\r\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\r\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\r\n\r\n    float iridescenceFactor = surface.iridescence;\r\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\r\n    vec3 F = mix(fresnel(surface.f0, lightParams.LoH), iridescenceFresnel, vec3(iridescenceFactor));\r\n\r\n    return (D * V) * F;\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef CLEARCOAT\r\nfloat clearCoatLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.clearCoatRoughness;\r\n    float clearCoat = surface.clearCoat;\r\n    vec3 n = pixel.clearCoatNormal;\r\n    vec3 h = lightParams.h;\r\n    float LoH = lightParams.LoH;\r\n\r\n    float clearCoatNoH = lightParams.clearCoatNoH;\r\n\r\n    float D = distribution(roughness, clearCoatNoH, h, n);\r\n    float V = V_kelemen(LoH);\r\n\r\n    return D * V;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef SHEEN\r\nvec3 sheenLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.sheenRoughness;\r\n    float NoV = pixel.NoV;\r\n    float NoH = lightParams.NoH;\r\n    float NoL = lightParams.NoL;\r\n\r\n    float D = D_Charlie(roughness, NoH);\r\n    float V = V_Neubelt(NoV, NoL);\r\n    // F = 1.0\r\n    return D * V * surface.sheenColor;\r\n}\r\n    #endif // SHEEN\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    float at = pixel.at;\r\n    float ab = pixel.ab;\r\n    vec3 anisotropicT = pixel.anisotropicT;\r\n    vec3 anisotropicB = pixel.anisotropicB;\r\n\r\n    float NoV = pixel.NoV;\r\n    float ToV = pixel.ToV;\r\n    float BoV = pixel.BoV;\r\n\r\n    vec3 h = lightParams.h;\r\n    float NoL = lightParams.NoL;\r\n    float NoH = lightParams.NoH;\r\n    float VoH = lightParams.VoH;\r\n    float ToL = lightParams.ToL;\r\n    float BoL = lightParams.BoL;\r\n\r\n    float V = V_SmithGGXCorrelated_Anisotropic(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\r\n    float D = D_GGX_Anisotropic(NoH, h, anisotropicT, anisotropicB, at, ab);\r\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\r\n    return V * D * F;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo pixel, const in Light light)\r\n{\r\n    LightParams lightParams;\r\n    initLightParams(lightParams, pixel, light);\r\n\r\n    float NoL = lightParams.NoL;\r\n\r\n    #ifdef IRIDESCENCE\r\n    vec3 Fd = iridescenceDiffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = iridescenceSpecularLobe(surface, pixel, lightParams);\r\n    #elif defined(ANISOTROPIC)\r\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = anisotropyLobe(surface, pixel, lightParams);\r\n    #else\r\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = specularLobe(surface, pixel, lightParams);\r\n    #endif\r\n\r\n    #ifdef TRANSMISSION\r\n    Fd *= 1.0 - surface.transmission;\r\n    #endif // TRANSMISSION\r\n\r\n    vec3 shading = (Fd + Fr * pixel.energyCompensation);\r\n\r\n    #ifdef SHEEN\r\n    vec3 fSheen = sheenLobe(surface, pixel, lightParams);\r\n    shading *= pixel.sheenScaling;\r\n    shading += fSheen;\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoL = lightParams.clearCoatNoL;\r\n    float LoH = lightParams.LoH;\r\n    // default IOR 1.5\r\n    float FccClearCoat = F_Schlick(0.04, 1.0, LoH) * surface.clearCoat;\r\n    float attenuation = 1.0 - FccClearCoat;\r\n    shading *= attenuation * NoL;\r\n\r\n    float clearcoat = clearCoatLobe(surface, pixel, lightParams) * FccClearCoat;\r\n    shading += clearcoat * clearCoatNoL;\r\n    // NoL has alread multiply\r\n    NoL = 1.0;\r\n    #endif // CLEARCOAT\r\n\r\n    return shading * light.color * NoL;\r\n}\r\n\r\n    // gi\r\n    #include \"PBRGI.glsl\";\r\n\r\n#endif // PBRLighting_lib","import { Event } from \"../../events/Event\";\r\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\r\nimport { SubMeshRenderElement } from \"./render/SubMeshRenderElement\";\r\nimport { SkinnedMeshSprite3DShaderDeclaration } from \"./SkinnedMeshSprite3DShaderDeclaration\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { BaseRenderType, IBaseRenderNode, ISimpleSkinRenderNode } from \"../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./SimpleSkinnedMeshSprite3D\";\r\n\r\nexport class SimpleSkinnedMeshRenderer extends SkinnedMeshRenderer {\r\n    // /**@internal 解决循环引用 */\r\n    // static SIMPLE_SIMPLEANIMATORTEXTURE: number;\r\n    // /**@internal 解决循环引用*/\r\n    // static SIMPLE_SIMPLEANIMATORPARAMS: number;\r\n    // /**@internal 解决循环引用*/\r\n    // static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\r\n\r\n    /**@internal */\r\n    private _simpleAnimatorTexture: Texture2D;\r\n    /**@internal */\r\n    _simpleAnimatorParams: Vector4;\r\n    /**@internal */\r\n    private _simpleAnimatorTextureSize: number;\r\n    /**@internal  x simpleAnimation offset,y simpleFrameOffset*/\r\n    private _simpleAnimatorOffset: Vector2;\r\n    /**@internal */\r\n    _bonesNums: number;\r\n\r\n    /**@internal */\r\n    _baseRenderNode: IBaseRenderNode;\r\n    //解决编译bug TODO\r\n    private _ownerSimpleRenderNode: ISimpleSkinRenderNode;\r\n\r\n    /**\r\n     * @internal\r\n     * @en The animator texture\r\n     * @zh 动画帧贴图\r\n     */\r\n    get simpleAnimatorTexture(): Texture2D {\r\n        return this._simpleAnimatorTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorTexture(value: Texture2D) {\r\n        this._simpleAnimatorTexture = value;\r\n        this._simpleAnimatorTextureSize = value.width;\r\n        this._baseRenderNode.shaderData.setTexture(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE, value);\r\n        value._addReference();\r\n        this._baseRenderNode.shaderData.setNumber(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE, this._simpleAnimatorTextureSize);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The animator params\r\n     * @zh 设置动画帧数参数\r\n     */\r\n    get simpleAnimatorOffset(): Vector2 {\r\n        return this._simpleAnimatorOffset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    set simpleAnimatorOffset(value: Vector2) {\r\n        value.cloneTo(this._simpleAnimatorOffset);\r\n    }\r\n\r\n\r\n    protected _isISkinRenderNode(): any {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of SimpleSkinnedMeshRenderer.\r\n     * @zh 创建一个 SimpleSkinnedMeshRenderer 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._simpleAnimatorParams = new Vector4();\r\n        this._simpleAnimatorOffset = new Vector2();\r\n        this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE);\r\n        this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE);\r\n        this._baseRenderNode.renderNodeType = BaseRenderType.SimpleSkinRender;\r\n        this._baseRenderNode.shaderData.setVector(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, new Vector4());\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @returns \r\n     */\r\n    protected _createBaseRenderNode(): IBaseRenderNode {\r\n        this._ownerSimpleRenderNode = Laya3DRender.Render3DModuleDataFactory.createSimpleSkinRenderNode();\r\n        return this._ownerSimpleRenderNode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @returns \r\n     */\r\n    protected _getcommonUniformMap(): string[] {\r\n        return [\"Sprite3D\", \"SimpleSkinnedMesh\"];\r\n    }\r\n\r\n    protected _computeSkinnedData(): void {\r\n        this._computeAnimatorParamsData();\r\n    }\r\n\r\n    /**\r\n     * @perfTag PerformanceDefine.T_SkinBoneUpdate\r\n     * @en Update the render state of the skinned mesh.\r\n     * @param context The 3D render context\r\n     * @zh 更新蒙皮网格的渲染状态。\r\n     * @param context 3D 渲染上下文。\r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        super.renderUpdate(context);\r\n        this._computeSkinnedData();\r\n    }\r\n\r\n    /**\r\n     *@inheritDoc\r\n     *@override\r\n     *@internal\r\n     */\r\n    _createRenderElement() {\r\n        let renderelement = new SubMeshRenderElement();\r\n        return renderelement;\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _computeAnimatorParamsData(): void {\r\n        if (this._cacheMesh) {\r\n            this._simpleAnimatorParams.x = this._simpleAnimatorOffset.x;\r\n            this._simpleAnimatorParams.y = Math.round(this._simpleAnimatorOffset.y) * this._bonesNums * 4;\r\n\r\n            this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Set custom data\r\n     * @param value1 Custom data 1\r\n     * @param value2 Custom data 2\r\n     * @zh 自定义数据\r\n     * @param value1 自定义数据1\r\n     * @param value2 自定义数据1\r\n     */\r\n    setCustomData(value1: number, value2: number = 0) {\r\n        this._simpleAnimatorParams.z = value1;\r\n        this._simpleAnimatorParams.w = value2;\r\n        this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams);\r\n    }\r\n\r\n    /**\r\n    *@inheritDoc\r\n    *@override\r\n    *@internal\r\n    */\r\n    _onMeshChange(value: Mesh): void {\r\n        this._onSkinMeshChange(value);\r\n        if (!value)\r\n            return;\r\n        this._cacheMesh = (<Mesh>value);\r\n        this._setRenderElements();\r\n\r\n    }\r\n    \r\n    /**\r\n     * @internal\r\n     * 克隆到目标\r\n     * @param dest 目标 \r\n     */\r\n    _cloneTo(dest: SimpleSkinnedMeshRenderer): void {\r\n        let render = dest as SimpleSkinnedMeshRenderer;\r\n        render.simpleAnimatorOffset = this.simpleAnimatorOffset;\r\n        render.simpleAnimatorTexture = this.simpleAnimatorTexture;\r\n        render._bonesNums = this._bonesNums;\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * 删除节点\r\n     */\r\n    protected _onDestroy() {\r\n        if (this._cacheRootBone)\r\n            (!this._cacheRootBone._destroyed) && (this._cacheRootBone.transform.off(Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange));\r\n        (this._simpleAnimatorTexture) && this._simpleAnimatorTexture._removeReference();\r\n        this._simpleAnimatorTexture = null;\r\n        super._onDestroy();\r\n    }\r\n}","import { Node } from \"../../display/Node\";\r\nimport { Loader } from \"../../net/Loader\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { MeshFilter } from \"./MeshFilter\";\r\nimport { RenderableSprite3D } from \"./RenderableSprite3D\";\r\nimport { Sprite3D } from \"./Sprite3D\";\r\nimport { Material } from \"../../resource/Material\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./SimpleSkinnedMeshRenderer\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n\r\n\r\n/**\r\n * @en The `SimpleSkinnedMeshSprite3D` class is used to create a simple skinned mesh.\r\n * @zh `SimpleSkinnedMeshSprite3D` 类用于创建简单网格。\r\n */\r\nexport class SimpleSkinnedMeshSprite3D extends RenderableSprite3D {\r\n    /**@internal */\r\n    static _tempArray0: any[] = [];\r\n\r\n    /** */\r\n    static SIMPLE_SIMPLEANIMATORTEXTURE: number;\r\n    static SIMPLE_SIMPLEANIMATORPARAMS: number;\r\n    static SIMPLE_SIMPLEANIMATORTEXTURESIZE: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\r\n        SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\r\n\r\n        const commandUniform = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"SimpleSkinnedMesh\");\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE, \"u_SimpleAnimatorTexture\", ShaderDataType.Texture2D);\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, \"u_SimpleAnimatorParams\", ShaderDataType.Vector4);\r\n        commandUniform.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE, \"u_SimpleAnimatorTextureSize\", ShaderDataType.Float);\r\n    }\r\n\r\n    /** @internal */\r\n    private _meshFilter: MeshFilter;\r\n\r\n    /**\r\n     * @en The mesh filter component.\r\n     * @zh 网格过滤器。\r\n     */\r\n    get meshFilter(): MeshFilter {\r\n        return this._meshFilter;\r\n    }\r\n\r\n    /**\r\n     * @en The simple skinned mesh renderer component.\r\n     * @zh 网格渲染器。\r\n     */\r\n    get simpleSkinnedMeshRenderer(): SimpleSkinnedMeshRenderer {\r\n        return (<SimpleSkinnedMeshRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * @en Constructor function.\r\n     * @param mesh The mesh to use. The default material for the mesh will also be loaded.\r\n     * @param name The name of the instance.\r\n     * @zh 构造函数。\r\n     * @param mesh 网格,同时会加载网格所用默认材质。\r\n     * @param name 名字。\r\n     */\r\n    constructor(mesh: Mesh = null, name: string = null) {\r\n        super(name);\r\n        this._meshFilter = this.addComponent(MeshFilter);\r\n        this._render = this.addComponent(SimpleSkinnedMeshRenderer);\r\n        (mesh) && (this._meshFilter.sharedMesh = mesh);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var render: SimpleSkinnedMeshRenderer = this.simpleSkinnedMeshRenderer;\r\n        var lightmapIndex: any = data.lightmapIndex;\r\n        (lightmapIndex != null) && (render.lightmapIndex = lightmapIndex);\r\n        var lightmapScaleOffsetArray: any[] = data.lightmapScaleOffset;\r\n        (lightmapScaleOffsetArray) && (render.lightmapScaleOffset = new Vector4(lightmapScaleOffsetArray[0], lightmapScaleOffsetArray[1], lightmapScaleOffsetArray[2], lightmapScaleOffsetArray[3]));\r\n        (data.enableRender != undefined) && (render.enabled = data.enableRender);\r\n        (data.receiveShadows != undefined) && (render.receiveShadow = data.receiveShadows);\r\n        (data.castShadow != undefined) && (render.castShadow = data.castShadow);\r\n        let meshPath: string = data.meshPath;\r\n        if (meshPath) {\r\n            let mesh: Mesh = Loader.getRes(meshPath);//加载失败mesh为空\r\n            (mesh) && (this.meshFilter.sharedMesh = mesh);\r\n        }\r\n\r\n        var materials: any[] = data.materials;\r\n        if (materials) {\r\n            let sharedMaterials: Material[] = render.sharedMaterials;\r\n            let materialCount: number = materials.length;\r\n            sharedMaterials.length = materialCount;\r\n            for (let i = 0; i < materialCount; i++) {\r\n                sharedMaterials[i] = Loader.getRes(materials[i].path);\r\n            }\r\n            render.sharedMaterials = sharedMaterials;\r\n        }\r\n\r\n        var boundBox: any = data.boundBox;\r\n        var min: any[] = boundBox.min;\r\n        var max: any[] = boundBox.max;\r\n        render.localBounds.setMin(new Vector3(min[0], min[1], min[2]));\r\n        render.localBounds.setMax(new Vector3(max[0], max[1], max[2]));\r\n        render.localBounds = render.localBounds;\r\n        if (spriteMap) {\r\n            let rootBoneData: number = data.rootBone;\r\n            render.rootBone = spriteMap[rootBoneData];\r\n            let bonesData: any[] = data.bones;\r\n            for (let i = 0, n = bonesData.length; i < n; i++)\r\n                render.bones.push(spriteMap[bonesData[i]]);\r\n            render.bones =  render.bones;\r\n            render._bonesNums = data.bonesNums ? data.bonesNums : render.bones.length;\r\n        }\r\n        // else {//[兼容代码]\r\n        // \t(data.rootBone) && (render._setRootBone(data.rootBone));//[兼容性]\r\n        // }\r\n        var animatorTexture: string = data.animatorTexture;\r\n        if (animatorTexture) {\r\n            let animatortexture: Texture2D = Loader.getRes(animatorTexture, Loader.TEXTURE2D);\r\n            render.simpleAnimatorTexture = animatortexture;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void {\r\n        super._cloneTo(destObject, srcRoot, dstRoot);//父类函数在最后,组件应该最后赋值，否则获取材质默认值等相关函数会有问题\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._meshFilter.destroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","\r\n/**\r\n * @en Trail Texture Mode\r\n * @zh 拖尾纹理模式\r\n */\r\nexport class TrailTextureMode {\r\n    /**\r\n     * @en Stretch mode.\r\n     * @zh 拉伸模式。\r\n     */\r\n\tstatic Stretch: number = 0;\r\n\r\n    /**\r\n     * @en Tile mode.\r\n     * @zh 平铺模式。\r\n     */\r\n\tstatic Tile: number = 1;\r\n}\r\n\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { Camera } from \"../Camera\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\";\r\nimport { TrailAlignment } from \"./TrailAlignment\";\r\nimport { TrailFilter } from \"./TrailFilter\";\r\nimport { VertexTrail } from \"./VertexTrail\";\r\n\r\n/**\r\n * @en The `TrailGeometry` class is used to create trail rendering elements.\r\n * @zh `TrailGeometry` 类用于创建拖尾渲染单元。\r\n */\r\nexport class TrailGeometry extends GeometryElement {\r\n\t/**\r\n\t * @en Alignment of the trail ti j wq e o face the camera.\r\n\t * @zh 轨迹准线_面向摄像机。\r\n\t */\r\n\tstatic ALIGNMENT_VIEW: number = 0;\r\n\t/**\r\n\t * @en Alignment of the trail to face the direction of movement.\r\n\t * @zh 轨迹准线_面向运动方向。\r\n\t */\r\n\tstatic ALIGNMENT_TRANSFORM_Z: number = 1;\r\n\r\n\t/**@internal */\r\n\tprivate static _tempVector30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector31: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector32: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector33: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector34: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector35: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempVector36: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices1: number = 8;\r\n\t/**@internal */\r\n\tprivate _floatCountPerVertices2: number = 5;\r\n\t/**@internal */\r\n\tprivate _increaseSegementCount: number = 16;\r\n\t/**@internal */\r\n\tprivate _activeIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _endIndex: number = 0;\r\n\t/**@internal */\r\n\tprivate _needAddFirstVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _isTempEndVertex: boolean = false;\r\n\t/**@internal */\r\n\tprivate _subBirthTime: Float32Array;\r\n\t/**@internal */\r\n\tprivate _subDistance: Float64Array;\r\n\t/**@internal */\r\n\tprivate _segementCount: number;\r\n\t/**@internal */\r\n\tprivate _vertices1: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertices2: Float32Array = null;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer1: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _vertexBuffer2: VertexBuffer3D;\r\n\t/**@internal */\r\n\tprivate _lastFixedVertexPosition: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprotected _owner: TrailFilter;\r\n\r\n\tprivate tmpColor: Color = new Color();\r\n\t/** @private */\r\n\tprivate _disappearBoundsMode: Boolean = false;\r\n\r\n\tconstructor(owner: TrailFilter) {\r\n\t\tsuper(MeshTopology.TriangleStrip, DrawType.DrawArray);\r\n\t\tthis._owner = owner;\r\n\t\t//初始化_segementCount\r\n\t\tthis.bufferState = new BufferState();\r\n\t\tthis._segementCount = this._increaseSegementCount;\r\n\r\n\t\tthis._resizeData(this._segementCount, this.bufferState);\r\n\t\t// var bounds: Bounds = this._owner._owner.trailRenderer.bounds;\r\n\t\t// var sprite3dPosition: Vector3 = this._owner._owner.transform.position;\r\n\t\t// bounds.setMin(sprite3dPosition);\r\n\t\t// bounds.setMax(sprite3dPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resizeData(segementCount: number, bufferState: BufferState): void {\r\n\t\tthis._subBirthTime = new Float32Array(segementCount);\r\n\t\tthis._subDistance = new Float64Array(segementCount);\r\n\r\n\t\tvar vertexCount: number = segementCount * 2;\r\n\t\tvar vertexDeclaration1: VertexDeclaration = VertexTrail.vertexDeclaration1;\r\n\t\tvar vertexDeclaration2: VertexDeclaration = VertexTrail.vertexDeclaration2;\r\n\t\tvar vertexBuffers: VertexBuffer3D[] = [];\r\n\t\tvar vertexbuffer1Size: number = vertexCount * vertexDeclaration1.vertexStride;\r\n\t\tvar vertexbuffer2Size: number = vertexCount * vertexDeclaration2.vertexStride;\r\n\t\tvar memorySize: number = vertexbuffer1Size + vertexbuffer2Size;\r\n\t\tthis._vertices1 = new Float32Array(vertexCount * this._floatCountPerVertices1);\r\n\t\tthis._vertices2 = new Float32Array(vertexCount * this._floatCountPerVertices2);\r\n\t\tthis._vertexBuffer1 = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertexbuffer1Size, BufferUsage.Dynamic, false);\r\n\t\tthis._vertexBuffer1.vertexDeclaration = vertexDeclaration1;\r\n\t\tthis._vertexBuffer2 = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertexbuffer2Size, BufferUsage.Dynamic, false);\r\n\t\tthis._vertexBuffer2.vertexDeclaration = vertexDeclaration2;\r\n\r\n\t\tvertexBuffers.push(this._vertexBuffer1);\r\n\t\tvertexBuffers.push(this._vertexBuffer2);\r\n\t\t// bufferState.bind();\r\n\t\t// bufferState.applyVertexBuffers(vertexBuffers);\r\n\t\t// bufferState.unBind();\r\n\t\tbufferState.applyState(vertexBuffers, null);\r\n\t\tResource._addMemory(memorySize, memorySize);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _resetData(): void {\r\n\t\tvar count: number = this._endIndex - this._activeIndex;\r\n\t\t//提前取出旧数据，否则_resizeData会覆盖\r\n\t\tvar oldVertices1: Float32Array = new Float32Array(this._vertices1.buffer, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count);\r\n\t\tvar oldVertices2: Float32Array = new Float32Array(this._vertices2.buffer, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count);\r\n\t\tvar oldSubDistance: Float64Array = new Float64Array(this._subDistance.buffer, this._activeIndex * 8, count);//修改距离数据\r\n\t\tvar oldSubBirthTime: Float32Array = new Float32Array(this._subBirthTime.buffer, this._activeIndex * 4, count);//修改出生时间数据\r\n\r\n\t\tif (count === this._segementCount) {//当前count=_segementCount表示已满,需要扩充\r\n\t\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\t\tthis._vertexBuffer1.destroy();\r\n\t\t\tthis._vertexBuffer2.destroy();\r\n\t\t\tthis._segementCount += this._increaseSegementCount;\r\n\t\t\tthis._resizeData(this._segementCount, this.bufferState);\r\n\t\t}\r\n\r\n\t\tthis._vertices1.set(oldVertices1, 0);\r\n\t\tthis._vertices2.set(oldVertices2, 0);\r\n\t\tthis._subDistance.set(oldSubDistance, 0);\r\n\t\tthis._subBirthTime.set(oldSubBirthTime, 0);\r\n\r\n\t\tthis._endIndex = count;\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, 0, this._floatCountPerVertices1 * 2 * this._activeIndex * 4, this._floatCountPerVertices1 * 2 * count * 4);\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, 0, this._floatCountPerVertices2 * 2 * this._activeIndex * 4, this._floatCountPerVertices2 * 2 * count * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新Trail数据\r\n\t */\r\n\t_updateTrail(camera: Camera, lastPosition: Vector3, position: Vector3): void {\r\n\t\tif (!Vector3.equals(lastPosition, position)) {//位置不变不产生分段\r\n\t\t\tif ((this._endIndex - this._activeIndex) === 0)\r\n\t\t\t\tthis._addTrailByFirstPosition(camera, position);//当前分段全部消失时,需要添加一个首分段\r\n\t\t\telse\r\n\t\t\t\tthis._addTrailByNextPosition(camera, position);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过起始位置添加TrailRenderElement起始数据\r\n\t */\r\n\tprivate _addTrailByFirstPosition(camera: Camera, position: Vector3): void {\r\n\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\tthis._subDistance[this._endIndex] = 0;\r\n\t\tthis._subBirthTime[this._endIndex] = this._owner._curtime;\r\n\t\tthis._endIndex++;\r\n\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\tthis._needAddFirstVertex = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新TrailRenderElement数据\r\n\t */\r\n\tprivate _addTrailByNextPosition(camera: Camera, position: Vector3): void {\r\n\t\tvar delVector3: Vector3 = TrailGeometry._tempVector30;\r\n\t\tvar pointAtoBVector3: Vector3 = TrailGeometry._tempVector31;\r\n\t\tswitch (this._owner.alignment) {\r\n\t\t\tcase TrailAlignment.View:\r\n\t\t\t\tvar cameraMatrix: Matrix4x4 = camera.viewMatrix;\r\n\t\t\t\tVector3.transformCoordinate(position, cameraMatrix, TrailGeometry._tempVector33);\r\n\t\t\t\tVector3.transformCoordinate(this._lastFixedVertexPosition, cameraMatrix, TrailGeometry._tempVector34);\r\n\t\t\t\tVector3.subtract(TrailGeometry._tempVector33, TrailGeometry._tempVector34, delVector3);\r\n\t\t\t\tVector3.cross(TrailGeometry._tempVector33, delVector3, pointAtoBVector3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TrailAlignment.TransformZ:\r\n\t\t\t\tVector3.subtract(position, this._lastFixedVertexPosition, delVector3);\r\n\t\t\t\tvar forward: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\t(this._owner._ownerRender.owner as Sprite3D).transform.getForward(forward);\r\n\t\t\t\tVector3.cross(delVector3, forward, pointAtoBVector3);//实时更新模式需要和view一样根据当前forward重新计算\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tVector3.normalize(pointAtoBVector3, pointAtoBVector3);\r\n\t\tVector3.scale(pointAtoBVector3, this._owner.widthMultiplier / 2, pointAtoBVector3);\r\n\r\n\t\tvar delLength: number = Vector3.scalarLength(delVector3);\r\n\t\tvar tempEndIndex: number;\r\n\t\tvar offset: number;\r\n\r\n\t\tif (this._needAddFirstVertex) {\r\n\t\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, this._endIndex - 1);//延迟更新首分段数据\r\n\t\t\tthis._needAddFirstVertex = false;\r\n\t\t}\r\n\r\n\t\tif (delLength - this._owner.minVertexDistance >= MathUtils3D.zeroTolerance) {//大于最小距离产生新分段\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tposition.cloneTo(this._lastFixedVertexPosition);\r\n\t\t\tthis._isTempEndVertex = false;\r\n\t\t} else {\r\n\t\t\tif (this._isTempEndVertex) {\r\n\t\t\t\ttempEndIndex = this._endIndex - 1;\r\n\t\t\t\toffset = delLength - this._subDistance[tempEndIndex];\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, tempEndIndex);\r\n\t\t\t\tthis._owner._totalLength += offset;//不产生新分段要通过差值更新总距离\r\n\t\t\t} else {\r\n\t\t\t\t(this._endIndex === this._segementCount) && (this._resetData());\r\n\t\t\t\tthis._updateVerticesByPosition(position, pointAtoBVector3, delLength, this._endIndex);\r\n\t\t\t\tthis._owner._totalLength += delLength;\r\n\t\t\t\tthis._endIndex++;\r\n\t\t\t}\r\n\t\t\tthis._isTempEndVertex = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据\r\n\t */\r\n\tprivate _updateVerticesByPositionData(position: Vector3, pointAtoBVector3: Vector3, index: number): void {\r\n\t\tvar vertexOffset: number = this._floatCountPerVertices1 * 2 * index;\r\n\t\tvar curtime: number = this._owner._curtime;\r\n\t\tthis._vertices1[vertexOffset] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 1] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 2] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 3] = -pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 4] = -pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 5] = -pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 6] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 7] = 1.0;\r\n\r\n\t\tthis._vertices1[vertexOffset + 8] = position.x;\r\n\t\tthis._vertices1[vertexOffset + 9] = position.y;\r\n\t\tthis._vertices1[vertexOffset + 10] = position.z;\r\n\t\tthis._vertices1[vertexOffset + 11] = pointAtoBVector3.x;\r\n\t\tthis._vertices1[vertexOffset + 12] = pointAtoBVector3.y;\r\n\t\tthis._vertices1[vertexOffset + 13] = pointAtoBVector3.z;\r\n\t\tthis._vertices1[vertexOffset + 14] = curtime;\r\n\t\tthis._vertices1[vertexOffset + 15] = 0.0;\r\n\r\n\t\t//添加新的顶点时，需要更新包围盒\r\n\t\tvar bounds: Bounds = this._owner._ownerRender.bounds;\r\n\t\tvar min: Vector3 = bounds.getMin();\r\n\t\tvar max: Vector3 = bounds.getMax();\r\n\t\tvar up: Vector3 = TrailGeometry._tempVector35;\r\n\t\tvar down: Vector3 = TrailGeometry._tempVector36;\r\n\t\tvar out: Vector3 = TrailGeometry._tempVector32;\r\n\t\tVector3.add(position, pointAtoBVector3, up);\r\n\t\tVector3.subtract(position, pointAtoBVector3, down);\r\n\r\n\t\tVector3.min(down, up, out);\r\n\t\tVector3.min(min, out, min);\r\n\t\tbounds.setMin(min);\r\n\r\n\t\tVector3.max(up, down, out);\r\n\t\tVector3.max(max, out, max);\r\n\t\tbounds.setMax(max);\r\n\r\n\r\n\t\tvar floatCount: number = this._floatCountPerVertices1 * 2;\r\n\t\tthis._vertexBuffer1.setData(this._vertices1.buffer, vertexOffset * 4, vertexOffset * 4, floatCount * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 通过位置更新顶点数据、距离、出生时间\r\n\t */\r\n\tprivate _updateVerticesByPosition(position: Vector3, pointAtoBVector3: Vector3, delDistance: number, index: number): void {\r\n\t\tthis._updateVerticesByPositionData(position, pointAtoBVector3, index);\r\n\t\tthis._subDistance[index] = delDistance;\r\n\t\tthis._subBirthTime[index] = this._owner._curtime;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新VertexBuffer2数据\r\n\t */\r\n\t_updateVertexBufferUV(): void {\r\n\t\tvar bounds: Bounds;\r\n\t\tvar min: Vector3, max: Vector3;\r\n\t\tif (this._disappearBoundsMode) {//如果有顶点消失时候，需要重新计算包围盒\r\n\t\t\tbounds = this._owner._ownerRender.bounds;\r\n\t\t\tvar sprite3dPosition: Vector3 = (this._owner._ownerRender.owner as Sprite3D).transform.position;\r\n\t\t\tbounds.setMin(sprite3dPosition);\r\n\t\t\tbounds.setMax(sprite3dPosition);\r\n\t\t\tmin = bounds.getMin();\r\n\t\t\tmax = bounds.getMax();\r\n\t\t}\r\n\t\tvar vertexCount: number = this._endIndex;\r\n\t\tvar curLength: number = 0;\r\n\r\n\t\tvar gradient: Gradient = this._owner.colorGradient;\r\n\t\tvar startAlphaIndex: number = gradient.colorAlphaKeysCount - 1;\r\n\t\tvar startColorIndex: number = gradient.colorRGBKeysCount - 1;\r\n\r\n\t\tvar totalLength: number = this._owner._totalLength;\r\n\t\tvar stride: number = this._floatCountPerVertices2 * 2;\r\n\t\tfor (var i: number = this._activeIndex; i < vertexCount; i++) {\r\n\t\t\t(i !== this._activeIndex) && (curLength += this._subDistance[i]);\r\n\t\t\tvar uvX: number;\r\n\t\t\tvar lerpFactor: number;\r\n\t\t\tif (this._owner.textureMode == TrailTextureMode.Stretch) {\r\n\t\t\t\tuvX = 1.0 - curLength / totalLength;\r\n\t\t\t\tlerpFactor = uvX;\r\n\t\t\t} else {\r\n\t\t\t\tlerpFactor = 1.0 - curLength / totalLength;\r\n\t\t\t\tuvX = 1.0 - (totalLength - curLength);\r\n\t\t\t}\r\n\r\n\t\t\tstartColorIndex = gradient.evaluateColorRGB(lerpFactor, this.tmpColor, startColorIndex, true);\r\n\t\t\tstartAlphaIndex = gradient.evaluateColorAlpha(lerpFactor, this.tmpColor, startAlphaIndex, true);\r\n\r\n\t\t\tvar index: number = i * stride;\r\n\t\t\tthis._vertices2[index + 0] = uvX;\r\n\t\t\tthis._vertices2[index + 1] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 2] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 3] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 4] = this.tmpColor.a;\r\n\r\n\t\t\tthis._vertices2[index + 5] = uvX;\r\n\t\t\tthis._vertices2[index + 6] = this.tmpColor.r;\r\n\t\t\tthis._vertices2[index + 7] = this.tmpColor.g;\r\n\t\t\tthis._vertices2[index + 8] = this.tmpColor.b;\r\n\t\t\tthis._vertices2[index + 9] = this.tmpColor.a;\r\n\r\n\t\t\tif (this._disappearBoundsMode) {\r\n\t\t\t\tvar posOffset = this._floatCountPerVertices1 * 2 * i;\r\n\t\t\t\tvar pos: Vector3 = TrailGeometry._tempVector32;\r\n\t\t\t\tvar up: Vector3 = TrailGeometry._tempVector33;\r\n\t\t\t\tvar side: Vector3 = TrailGeometry._tempVector34;\r\n\r\n\t\t\t\tpos.setValue(this._vertices1[posOffset + 0], this._vertices1[posOffset + 1], this._vertices1[posOffset + 2]);\r\n\t\t\t\tup.setValue(this._vertices1[posOffset + 3], this._vertices1[posOffset + 4], this._vertices1[posOffset + 5]);\r\n\r\n\t\t\t\tVector3.add(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t\tVector3.subtract(pos, up, side);\r\n\t\t\t\tVector3.min(side, min, min);\r\n\t\t\t\tVector3.max(side, max, max);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._disappearBoundsMode) {\r\n\t\t\tbounds.setMin(min);\r\n\t\t\tbounds.setMax(max);\r\n\t\t\tthis._disappearBoundsMode = false;\r\n\t\t}\r\n\t\tvar offset: number = this._activeIndex * stride;\r\n\t\tthis._vertexBuffer2.setData(this._vertices2.buffer, offset * 4, offset * 4, (vertexCount * stride - offset) * 4);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateDisappear(): void {\r\n\t\tvar count: number = this._endIndex;\r\n\t\tfor (var i: number = this._activeIndex; i < count; i++) {\r\n\t\t\tif (this._owner._curtime - this._subBirthTime[i] >= this._owner.time + MathUtils3D.zeroTolerance) {\r\n\t\t\t\tvar nextIndex: number = i + 1;\r\n\t\t\t\tif (nextIndex !== count)\r\n\t\t\t\t\tthis._owner._totalLength -= this._subDistance[nextIndex];//移除分段要减去下一分段到当前分段的距离\r\n\r\n\t\t\t\tif (this._isTempEndVertex && (nextIndex === count - 1)) {//如果只剩最后一分段要将其转化为固定分段\r\n\t\t\t\t\tvar fixedPos: Vector3 = this._lastFixedVertexPosition;\r\n\t\t\t\t\tfixedPos.x = this._vertices1[0];\r\n\t\t\t\t\tfixedPos.y = this._vertices1[1];\r\n\t\t\t\t\tfixedPos.z = this._vertices1[2];\r\n\t\t\t\t\tthis._isTempEndVertex = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._activeIndex++;\r\n\t\t\t\tthis._disappearBoundsMode = true;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Get the type.\r\n\t * @zh 获取类型。\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn TrailGeometry._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn this._endIndex - this._activeIndex > 1;//当前分段为0或1时不渲染\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tthis.clearRenderParams();\r\n\t\tvar start: number = this._activeIndex * 2;\r\n\t\tvar count: number = this._endIndex * 2 - start;\r\n\t\tthis.setDrawArrayParams(start, count);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Destroys the instance and releases resources.\r\n\t * @zh 销毁实例并释放资源。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tvar memorySize: number = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;\r\n\t\tResource._addMemory(-memorySize, -memorySize);\r\n\t\tthis.bufferState.destroy();\r\n\t\tthis._vertexBuffer1.destroy();\r\n\t\tthis._vertexBuffer2.destroy();\r\n\r\n\t\tthis._bufferState = null;\r\n\t\tthis._vertices1 = null;\r\n\t\tthis._vertexBuffer1 = null;\r\n\t\tthis._vertices2 = null;\r\n\t\tthis._vertexBuffer2 = null;\r\n\t\tthis._subBirthTime = null;\r\n\t\tthis._subDistance = null;\r\n\t\tthis._lastFixedVertexPosition = null;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clear.\r\n\t * @zh 清除。\r\n\t */\r\n\tclear(): void {\r\n\t\tthis._activeIndex = 0;\r\n\t\tthis._endIndex = 0;\r\n\t\tthis._disappearBoundsMode = false;\r\n\t\tthis._subBirthTime.fill(0);\r\n\t\tthis._subDistance.fill(0);\r\n\t\tthis._segementCount = 0;\r\n\t\tthis._isTempEndVertex = false;\r\n\t\tthis._needAddFirstVertex = false;\r\n\t\tthis._lastFixedVertexPosition.setValue(0, 0, 0);\r\n\t}\r\n}\r\n\r\n","import { Camera } from \"../Camera\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { GradientMode } from \"../GradientMode\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { TrailGeometry } from \"./TrailGeometry\";\r\nimport { TrailMaterial } from \"./TrailMaterial\";\r\nimport { TrailRenderer } from \"./TrailRenderer\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { TrailAlignment } from \"./TrailAlignment\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\n\r\n\r\n/**\r\n * @en The TrailFilter class is used to create a trailing filter.\r\n * @zh TrailFilter 类用于创建拖尾过滤器。\r\n */\r\nexport class TrailFilter {\r\n\t/**@internal */\r\n\tstatic CURTIME: number;\r\n\t/**@internal */\r\n\tstatic LIFETIME: number;\r\n\t/**@internal */\r\n\tstatic WIDTHCURVE: number;\r\n\t/**@internal */\r\n\tstatic WIDTHCURVEKEYLENGTH: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__() {\r\n\t\tTrailFilter.CURTIME = Shader3D.propertyNameToID(\"u_CurTime\");\r\n\t\tTrailFilter.LIFETIME = Shader3D.propertyNameToID(\"u_LifeTime\");\r\n\t\tTrailFilter.WIDTHCURVE = Shader3D.propertyNameToID(\"u_WidthCurve\");\r\n\t\tTrailFilter.WIDTHCURVEKEYLENGTH = Shader3D.propertyNameToID(\"u_WidthCurveKeyLength\");\r\n\r\n\t\tconst spriteParms = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"TrailRender\");\r\n\t\tspriteParms.addShaderUniform(TrailFilter.CURTIME, \"u_CurTime\", ShaderDataType.Float);\r\n\t\tspriteParms.addShaderUniform(TrailFilter.LIFETIME, \"u_LifeTime\", ShaderDataType.Float);\r\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVE, \"u_WidthCurve\", ShaderDataType.Buffer);\r\n\t\tspriteParms.addShaderUniform(TrailFilter.WIDTHCURVEKEYLENGTH, \"u_WidthCurveKeyLength\", ShaderDataType.Int);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _minVertexDistance: number;\r\n\t/**@internal */\r\n\tprivate _widthMultiplier: number;\r\n\t/**@internal */\r\n\tprivate _time: number;\r\n\t/**@internal */\r\n\tprivate _widthCurve: FloatKeyframe[];\r\n\t/**@internal */\r\n\tprivate _colorGradient: Gradient;\r\n\t/**@internal */\r\n\tprivate _textureMode: TrailTextureMode = TrailTextureMode.Stretch;\r\n\t/**@internal */\r\n\tprivate _trialGeometry: GeometryElement;\r\n\t/**@internal 拖尾总长度*/\r\n\t_totalLength: number = 0;\r\n\t/**@internal */\r\n\t_ownerRender: TrailRenderer;\r\n\t/**@internal */\r\n\t_lastPosition: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\t_curtime: number = 0;\r\n\r\n\t/**\r\n\t * @en The trail alignment.\r\n\t * @zh 轨迹准线。\r\n\t */\r\n\talignment: TrailAlignment = TrailAlignment.View;\r\n\r\n\t/**\r\n\t * @en Fade out time.\r\n\t * @zh 淡出时间。\r\n\t */\r\n\tget time(): number {\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tset time(value: number) {\r\n\t\tthis._time = value;\r\n\t\tthis._ownerRender._baseRenderNode.shaderData.setNumber(TrailFilter.LIFETIME, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Minimum distance between new and old vertices\r\n\t * @zh 新旧顶点之间最小距离。\r\n\t */\r\n\tget minVertexDistance(): number {\r\n\t\treturn this._minVertexDistance;\r\n\t}\r\n\r\n\tset minVertexDistance(value: number) {\r\n\t\tthis._minVertexDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The width multiplier.\r\n\t * @zh 宽度倍数。\r\n\t */\r\n\tget widthMultiplier(): number {\r\n\t\treturn this._widthMultiplier;\r\n\t}\r\n\r\n\tset widthMultiplier(value: number) {\r\n\t\tthis._widthMultiplier = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The width curve. The maximum number is 10.\r\n\t * @zh 宽度曲线。最多10个。\r\n\t */\r\n\tget widthCurve(): FloatKeyframe[] {\r\n\t\treturn this._widthCurve;\r\n\t}\r\n\r\n\tset widthCurve(value: FloatKeyframe[]) {\r\n\t\tthis._widthCurve = value;\r\n\t\tvar widthCurveFloatArray: Float32Array = new Float32Array(value.length * 4);\r\n\t\tvar i: number, j: number, index: number = 0;\r\n\t\tfor (i = 0, j = value.length; i < j; i++) {\r\n\t\t\twidthCurveFloatArray[index++] = value[i].time;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].inTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].outTangent;\r\n\t\t\twidthCurveFloatArray[index++] = value[i].value;\r\n\t\t}\r\n\t\tthis._ownerRender._baseRenderNode.shaderData.setBuffer(TrailFilter.WIDTHCURVE, widthCurveFloatArray);\r\n\t\tthis._ownerRender._baseRenderNode.shaderData.setInt(TrailFilter.WIDTHCURVEKEYLENGTH, value.length);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The color gradient.\r\n\t * @zh 颜色梯度。\r\n\t */\r\n\tget colorGradient(): Gradient {\r\n\t\treturn this._colorGradient;\r\n\t}\r\n\r\n\tset colorGradient(value: Gradient) {\r\n\t\tthis._colorGradient = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en The texture mode.\r\n\t * @zh 纹理模式。\r\n\t */\r\n\tget textureMode(): TrailTextureMode {\r\n\t\treturn this._textureMode;\r\n\t}\r\n\r\n\tset textureMode(value: TrailTextureMode) {\r\n\t\tthis._textureMode = value;\r\n\t}\r\n\r\n\t/** @ignore */\r\n\tconstructor(owner: TrailRenderer) {\r\n\t\tthis._ownerRender = owner;\r\n\t\tthis._initDefaultData();\r\n\t\tthis.addRenderElement();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Adds a render element to the renderer.\r\n\t * @zh 向渲染器添加渲染元素。\r\n\t */\r\n\taddRenderElement(): void {\r\n\t\tvar render: TrailRenderer = (<TrailRenderer>this._ownerRender);\r\n\t\tvar elements: RenderElement[] = render._renderElements;\r\n\t\tvar material: TrailMaterial = (<TrailMaterial>render.sharedMaterials[0]);\r\n\t\t(material) || (material = TrailMaterial.defaultMaterial);\r\n\t\tvar element: RenderElement = new RenderElement();\r\n\t\telement.setTransform((this._ownerRender.owner as Sprite3D)._transform);\r\n\t\telement.render = render;\r\n\t\telement.material = material;\r\n\t\t//element.renderSubShader = element.material.shader.getSubShaderAt(0);\r\n\t\tthis._trialGeometry = new TrailGeometry(this);\r\n\t\telement.setGeometry(this._trialGeometry);\r\n\t\telements.push(element);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(state: RenderContext3D): void {\r\n\t\tvar render: BaseRender = this._ownerRender;\r\n\t\tconst scene = this._ownerRender.owner.scene\r\n\t\tif (!scene)\r\n\t\t\treturn;\r\n\t\tthis._curtime += scene.timer._delta / 1000;\r\n\t\t//设置颜色\r\n\t\trender._baseRenderNode.shaderData.setNumber(TrailFilter.CURTIME, this._curtime);\r\n\t\t//现在的位置记录\r\n\t\tvar curPos: Vector3 = (this._ownerRender.owner as Sprite3D).transform.position;\r\n\t\tvar element: TrailGeometry = (<TrailGeometry>render._renderElements[0]._geometry);\r\n\t\telement._updateDisappear();\r\n\t\telement._updateTrail((<Camera>state.camera), this._lastPosition, curPos);\r\n\t\telement._updateVertexBufferUV();\r\n\t\t//克隆到lastPosition\r\n\t\tcurPos.cloneTo(this._lastPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_initDefaultData(): void {\r\n\t\tthis.time = 5.0;\r\n\t\tthis.minVertexDistance = 0.1;\r\n\t\tthis.widthMultiplier = 1;\r\n\t\tthis.textureMode = TrailTextureMode.Stretch;\r\n\r\n\t\tvar widthKeyFrames: FloatKeyframe[] = [];\r\n\t\tvar widthKeyFrame1: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame1.time = 0;\r\n\t\twidthKeyFrame1.inTangent = 0;\r\n\t\twidthKeyFrame1.outTangent = 0;\r\n\t\twidthKeyFrame1.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame1);\r\n\t\tvar widthKeyFrame2: FloatKeyframe = new FloatKeyframe();\r\n\t\twidthKeyFrame2.time = 1;\r\n\t\twidthKeyFrame2.inTangent = 0;\r\n\t\twidthKeyFrame2.outTangent = 0;\r\n\t\twidthKeyFrame2.value = 1;\r\n\t\twidthKeyFrames.push(widthKeyFrame2);\r\n\t\tthis.widthCurve = widthKeyFrames;\r\n\r\n\t\tvar gradient: Gradient = new Gradient();\r\n\t\tgradient.setMaxKeyCount(2, 2);\r\n\t\tgradient.mode = GradientMode.Blend;\r\n\t\tgradient.addColorRGB(0, Color.WHITE);\r\n\t\tgradient.addColorRGB(1, Color.WHITE);\r\n\t\tgradient.addColorAlpha(0, 1);\r\n\t\tgradient.addColorAlpha(1, 1);\r\n\t\tthis.colorGradient = gradient;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Destroys the instance and releases resources.\r\n\t * @zh 销毁实例并释放资源。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._trialGeometry.destroy();\r\n\t\tthis._trialGeometry = null;\r\n\t\tthis._widthCurve = null;\r\n\t\tthis._colorGradient = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clears the trail.\r\n\t * @zh 清除拖尾。\r\n\t */\r\n\tclear(): void {\r\n\t\t(<TrailGeometry>this._trialGeometry).clear();\r\n\t\tthis._lastPosition.setValue(0, 0, 0);\r\n\t\tthis._curtime = 0;\r\n\t\tthis._totalLength = 0;\r\n\t}\r\n}\r\n\r\n","import { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\n\r\n/**\r\n * @en The SkyPanoramicMaterial class is used to implement SkyPanoramicMaterial material.\r\n * @zh SkyPanoramicMaterial 类用于实现全景天空材质。\r\n */\r\nexport class SkyPanoramicMaterial extends Material {\r\n    static TINTCOLOR: number;\r\n    static EXPOSURE: number;\r\n    static ROTATION: number;\r\n    static TEXTURE: number;\r\n    static TEXTURE_HDR_PARAMS: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n\r\n        SkyPanoramicMaterial.TINTCOLOR = Shader3D.propertyNameToID(\"u_TintColor\");\r\n        SkyPanoramicMaterial.EXPOSURE = Shader3D.propertyNameToID(\"u_Exposure\");\r\n        SkyPanoramicMaterial.ROTATION = Shader3D.propertyNameToID(\"u_Rotation\");\r\n        SkyPanoramicMaterial.TEXTURE = Shader3D.propertyNameToID(\"u_Texture\");\r\n        SkyPanoramicMaterial.TEXTURE_HDR_PARAMS = Shader3D.propertyNameToID(\"u_Texture_HDR_params\");\r\n    }\r\n    /** @internal */\r\n    private _textureHDRParams: Vector4 = new Vector4(1.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @en Tint color of the panoramic sky.\r\n     * @zh 全景天空的颜色。\r\n     */\r\n    get tintColor(): Color {\r\n        return this.getColorByIndex(SkyPanoramicMaterial.TINTCOLOR);\r\n    }\r\n\r\n    set tintColor(value: Color) {\r\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * @en Exposure intensity of the panoramic sky.\r\n     * @zh 全景天空的曝光强度。\r\n     */\r\n    get exposure(): number {\r\n        return this.getFloatByIndex(SkyPanoramicMaterial.EXPOSURE);\r\n    }\r\n\r\n    set exposure(value: number) {\r\n        this.setFloatByIndex(SkyPanoramicMaterial.EXPOSURE, value);\r\n    }\r\n\r\n    /**\r\n     * @en Rotation angle of the panoramic sky.\r\n     * @zh 全景天空的旋转角度。\r\n     */\r\n    get rotation(): number {\r\n        return this.getFloatByIndex(SkyPanoramicMaterial.ROTATION);\r\n    }\r\n\r\n    set rotation(value: number) {\r\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, value);\r\n    }\r\n\r\n    /**\r\n     * @en Panoramic sky texture.\r\n     * @zh 全景天空纹理。\r\n     */\r\n    get panoramicTexture(): Texture2D {\r\n        return <Texture2D>this.getTextureByIndex(SkyPanoramicMaterial.TEXTURE);\r\n    }\r\n\r\n    set panoramicTexture(value: Texture2D) {\r\n        this.setTextureByIndex(SkyPanoramicMaterial.TEXTURE, value);\r\n    }\r\n\r\n    /** \r\n     * @ignore\r\n     * @en Creates an instance of SkyPanoramicMaterial.\r\n     * @zh 创建一个 SkyPanoramicMaterial 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.setShaderName(\"SkyPanoramic\");\r\n        this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR, new Color(0.5, 0.5, 0.5, 0.5));\r\n        this.setFloatByIndex(SkyPanoramicMaterial.ROTATION, 0.0);\r\n        this.setVector4ByIndex(SkyPanoramicMaterial.TEXTURE_HDR_PARAMS, this._textureHDRParams);\r\n        this.exposure = 1.3;\r\n    }\r\n}","#define SHADER_NAME BloomVS\r\n\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\nvoid main()\r\n{\r\n    gl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}","import BloomVS from \"../../../shader/files/postProcess/Bloom/Bloom.vs\";\r\nimport BloomDownsample13PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample13.fs\";\r\nimport BloomDownsample4PS from \"../../../shader/files/postProcess/Bloom/BloomDownsample4.fs\";\r\nimport BloomPrefilter13PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter13.fs\";\r\nimport BloomPrefilter4PS from \"../../../shader/files/postProcess/Bloom/BloomPrefilter4.fs\";\r\nimport BloomUpsampleBoxPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleBox.fs\";\r\nimport BloomUpsampleTentPS from \"../../../shader/files/postProcess/Bloom/BloomUpsampleTent.fs\";\r\nimport CompositePS from \"../../../shader/files/postProcess/Bloom/Composite.fs\";\r\nimport CompositeVS from \"../../../shader/files/postProcess/Bloom/Composite.vs\";\r\nimport SamplingGLSL from \"../../../shader/files/postProcess/Sampling.glsl\";\r\nimport StdLibGLSL from \"../../../shader/files/postProcess/StdLib.glsl\";\r\nimport ColorsGLSL from \"../../../shader/files/postProcess/Colors.glsl\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { PostProcess } from \"../../../component/PostProcess\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { RenderState } from \"../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDataType, ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Viewport } from \"../../../../maths/Viewport\";\r\n\r\n/**\r\n * @en The BloomEffect class is used to create a flood effect.\r\n * @zh BloomEffect 类用于创建泛光效果。\r\n */\r\nexport class BloomEffect extends PostProcessEffect {\r\n\t/** @internal */\r\n\tstatic SHADERVALUE_MAINTEX: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_AUTOEXPOSURETEX: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_SAMPLESCALE: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_THRESHOLD: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_PARAMS: number;\r\n\t/**@internal */\r\n\tstatic SHADERVALUE_BLOOMTEX: number;\r\n\r\n\t/**@internal */\r\n\tstatic SUBSHADER_PREFILTER13: number = 0;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_PREFILTER4: number = 1;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_DOWNSAMPLE13: number = 2;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_DOWNSAMPLE4: number = 3;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_UPSAMPLETENT: number = 4;\r\n\t/**@internal */\r\n\tstatic SUBSHADER_UPSAMPLEBOX: number = 5;\r\n\r\n\t/**@internal */\r\n\tprivate static MAXPYRAMIDSIZE: number = 16; // Just to make sure we handle 64k screens... Future-proof!\r\n\r\n\t/**\r\n\t * @en Bloom resource initialize\r\n\t * @zh 泛光资源初始化\r\n\t */\r\n\tstatic init() {\r\n\t\tShader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\r\n\t\tShader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\r\n\t\tShader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\r\n\t\tvar attributeMap: any = {\r\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n\t\t};\r\n\r\n\t\tvar uniformMap: any = {\r\n\t\t\t\"u_MainTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_MainTex_TexelSize\": ShaderDataType.Vector4,\r\n\t\t\t\"u_AutoExposureTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_Threshold\": ShaderDataType.Vector4,\r\n\t\t\t\"u_Params\": ShaderDataType.Vector4,\r\n\t\t\t\"u_BloomTex\": ShaderDataType.Texture2D,\r\n\t\t\t\"u_SampleScale\": ShaderDataType.Float,\r\n\t\t};\r\n\t\tvar shader = Shader3D.add(\"PostProcessBloom\");\r\n\t\tshader.shaderType = ShaderFeatureType.PostProcess;\r\n\t\t//subShader0\r\n\t\tvar subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tvar shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\r\n\t\tvar renderState: RenderState = shaderPass.renderState;\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader1\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader2\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader3\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader4\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\t//subShader5\r\n\t\tsubShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tshaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\r\n\t\trenderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t\tBloomEffect.CompositeInit();\r\n\t\tBloomEffect.__initDefine__();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Shader initialize\r\n\t * @zh 着色器初始化\r\n\t */\r\n\tstatic CompositeInit() {\r\n\t\t//PostProcessComposite\r\n\t\tlet attributeMap: any = {\r\n\t\t\t'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\r\n\t\t};\r\n\t\tlet uniformMap = {\r\n\t\t\t'u_MainTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_BloomTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_AutoExposureTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_Bloom_DirtTex': ShaderDataType.Texture2D,\r\n\t\t\t'u_BloomTex_TexelSize': ShaderDataType.Vector4,\r\n\t\t\t'u_Bloom_DirtTileOffset': ShaderDataType.Vector4,\r\n\t\t\t'u_Bloom_Settings': ShaderDataType.Vector4,\r\n\t\t\t'u_Bloom_Color': ShaderDataType.Color,\r\n\r\n\t\t};\r\n\t\tlet shader = Shader3D.add(\"PostProcessComposite\");\r\n\t\tshader.shaderType = ShaderFeatureType.PostProcess;\r\n\t\tlet subShader = new SubShader(attributeMap, uniformMap);\r\n\t\tshader.addSubShader(subShader);\r\n\t\tlet shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\r\n\t\tlet renderState = shaderPass.renderState;\r\n\t\trenderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n\t\trenderState.depthWrite = false;\r\n\t\trenderState.cull = RenderState.CULL_NONE;\r\n\t\trenderState.blend = RenderState.BLEND_DISABLE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 初始化宏定义\r\n\t */\r\n\tstatic __initDefine__() {\r\n\t\tBloomEffect.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\r\n\t\tBloomEffect.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\r\n\t\tBloomEffect.SHADERVALUE_SAMPLESCALE = Shader3D.propertyNameToID(\"u_SampleScale\");\r\n\t\tBloomEffect.SHADERVALUE_THRESHOLD = Shader3D.propertyNameToID(\"u_Threshold\");\r\n\t\tBloomEffect.SHADERVALUE_PARAMS = Shader3D.propertyNameToID(\"u_Params\");\r\n\t\tBloomEffect.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _shader: Shader3D = null;\r\n\t/**@internal */\r\n\tprivate _shaderData: ShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\t/**@internal */\r\n\tprivate _linearColor: Color = new Color();\r\n\t/**@internal */\r\n\tprivate _bloomTextureTexelSize: Vector4 = new Vector4();\r\n\r\n\t/**@internal */\r\n\tprivate _shaderThreshold: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _shaderParams: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _pyramid: any[] = null;\r\n\t/**@internal */\r\n\tprivate _intensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _threshold: number = 1.0;\r\n\t/**@internal */\r\n\tprivate _softKnee: number = 0.5;\r\n\t/**@internal */\r\n\tprivate _diffusion: number = 7.0;\r\n\t/**@internal */\r\n\tprivate _anamorphicRatio: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _dirtIntensity: number = 0.0;\r\n\t/**@internal */\r\n\tprivate _shaderSetting: Vector4 = new Vector4();\r\n\t/**@internal */\r\n\tprivate _dirtTileOffset: Vector4 = new Vector4();\r\n\r\n\t/**@internal*/\r\n\tprivate _clamp: number;\r\n\r\n\t/**泛光颜色。*/\r\n\tprivate _color: Color;\r\n\r\n\t/**是否开启快速模式。该模式通过降低质量来提升性能。*/\r\n\tprivate _fastMode: boolean = false;\r\n\r\n\t/**镜头污渍纹路,用于为泛光特效增加污渍灰尘效果*/\r\n\tprivate _dirtTexture: BaseTexture = null;\r\n\r\n\t/**\r\n\t * @en The number of the bloom pixel, this value is in gamma space\r\n\t * @zh 泛光像素的数量,该值在伽马空间\r\n\t */\r\n\tget clamp(): number {\r\n\t\treturn this._clamp;\r\n\t}\r\n\r\n\tset clamp(value: number) {\r\n\t\tthis._clamp = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Flood color.\r\n\t * @zh 泛光颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis._color = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Fast mode.\r\n\t * @zh 快速模式\r\n\t */\r\n\tget fastMode(): boolean {\r\n\t\treturn this._fastMode;\r\n\t}\r\n\r\n\tset fastMode(value: boolean) {\r\n\t\tthis._fastMode = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Dirty texture\r\n\t * @zh 脏迹贴图\r\n\t */\r\n\tget dirtTexture() {\r\n\t\treturn this._dirtTexture;\r\n\t}\r\n\r\n\tset dirtTexture(value: BaseTexture) {\r\n\t\tthis._dirtTexture && this._dirtTexture._removeReference(1);\r\n\t\tthis._dirtTexture = value;\r\n\t\tthis._dirtTexture && this._dirtTexture._addReference(1);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Intensity of floodlight filter, the minimum value is 0.\r\n\t * @zh 泛光过滤器强度,最小值为0。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._intensity;\r\n\t}\r\n\r\n\tset intensity(value: number) {\r\n\t\tthis._intensity = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The flood threshold, below which pixels with brightness will be filtered out, is in gamma space.\r\n\t * @zh 泛光阈值,在该阈值亮度以下的像素会被过滤掉,该值在伽马空间。\r\n\t */\r\n\tget threshold(): number {\r\n\t\treturn this._threshold;\r\n\t}\r\n\r\n\tset threshold(value: number) {\r\n\t\tthis._threshold = Math.max(value, 0.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Soft knee transition strength. Gradual transition occurs below the threshold (0 for completely hard transition, 1 for completely soft transition).\r\n\t * @zh 软膝盖过渡强度，在阈值以下进行渐变过渡（0为完全硬过度，1为完全软过度）。\r\n\t */\r\n\tget softKnee(): number {\r\n\t\treturn this._softKnee;\r\n\t}\r\n\r\n\tset softKnee(value: number) {\r\n\t\tthis._softKnee = Math.min(Math.max(value, 0.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Diffusion value, changes the bloom spread range. It's best to use integer values for the best effect. This value changes the internal iteration count, range is 1 to 10.\r\n\t * @zh 扩散值，改变泛光的扩散范围。最好使用整数值以保证效果，该值会改变内部的迭代次数，范围是1到10。\r\n\t */\r\n\tget diffusion(): number {\r\n\t\treturn this._diffusion;\r\n\t}\r\n\r\n\tset diffusion(value: number) {\r\n\t\tthis._diffusion = Math.min(Math.max(value, 1), 10);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Anamorphic ratio, distorts the bloom to produce a visual deformation. Negative values for vertical distortion, positive values for horizontal distortion. Range: -1 to 1.\r\n\t * @zh 形变比，通过扭曲泛光产生视觉上的形变。负值为垂直扭曲，正值为水平扭曲。范围：-1到1。\r\n\t */\r\n\tget anamorphicRatio(): number {\r\n\t\treturn this._anamorphicRatio;\r\n\t}\r\n\r\n\tset anamorphicRatio(value: number) {\r\n\t\tthis._anamorphicRatio = Math.min(Math.max(value, -1.0), 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Dirt intensity. Range: 0 to 1.\r\n\t * @zh 污渍强度。范围：0到1。\r\n\t */\r\n\tget dirtIntensity(): number {\r\n\t\treturn this._dirtIntensity;\r\n\t}\r\n\r\n\tset dirtIntensity(value: number) {\r\n\t\tthis._dirtIntensity = Math.max(value, 0.0);\r\n\t}\r\n\t/**\r\n\t * @en initializate the bloom effect instance.\r\n\t * @zh 初始化泛光效果实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.singleton = true;\r\n\t\tthis.active = true;\r\n\t\tthis.intensity = 1.0;\r\n\t\tthis.threshold = 1.0;\r\n\t\tthis.softKnee = 0.5;\r\n\t\tthis.clamp = 65472;\r\n\t\tthis.diffusion = 7;\r\n\t\tthis.anamorphicRatio = 0;\r\n\t\tthis.color = new Color(1.0, 1.0, 1.0, 1.0);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Called when added to the post-processing stack.\r\n\t * @param postprocess The post-processing component.\r\n\t * @zh 添加到后期处理栈时调用。\r\n\t * @param postprocess 后期处理组件。\r\n\t */\r\n\teffectInit(postprocess: PostProcess) {\r\n\t\tsuper.effectInit(postprocess);\r\n\t\tthis._shader = Shader3D.find(\"PostProcessBloom\");\r\n\t\tthis._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Get the camera depth texture mode flag according to the post-processing settings.\r\n\t * @returns The camera depth texture mode flag.\r\n\t * @zh 根据后期处理设置获取相机深度纹理模式标志。\r\n\t * @returns 相机深度纹理模式标志。\r\n\t */\r\n\tgetCameraDepthTextureModeFlag() {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Release the Effect.\r\n\t * @param postprocess The post-processing component.\r\n\t * @zh 释放Effect。\r\n\t * @param postprocess 后期处理组件。\r\n\t */\r\n\trelease(postprocess: PostProcess) {\r\n\t\tsuper.release(postprocess);\r\n\t\tthis._shader = null;\r\n\t\tthis._pyramid = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t * @en Render the effect.\r\n\t * @param context The post-processing render context.\r\n\t * @zh 渲染效果。\r\n\t * @param context 后期处理渲染上下文。\r\n\t */\r\n\trender(context: PostProcessRenderContext): void {\r\n\t\tvar cmd: CommandBuffer = context.command;\r\n\t\tvar viewport: Viewport = context.camera.viewport;\r\n\r\n\t\t//应用自动曝光调整纹理\r\n\t\tthis._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);\r\n\r\n\t\t//获取垂直扭曲和水平扭曲宽高\r\n\t\tvar ratio: number = this._anamorphicRatio;\r\n\t\tvar rw: number = ratio < 0 ? -ratio : 0;\r\n\t\tvar rh: number = ratio > 0 ? ratio : 0;\r\n\r\n\t\t//半分辨率模糊,性效比较高\r\n\t\tvar tw: number = Math.floor(viewport.width / (2 - rw));\r\n\t\tvar th: number = Math.floor(viewport.height / (2 - rh));\r\n\r\n\t\t//计算迭代次数\r\n\t\tvar s: number = Math.max(tw, th);\r\n\t\tvar logs: number;\r\n\t\tlogs = Math.log2(s) + this._diffusion - 10;\r\n\t\tvar logsInt: number = Math.floor(logs);\r\n\t\tvar iterations: number = Math.min(Math.max(logsInt, 1), BloomEffect.MAXPYRAMIDSIZE);\r\n\t\tvar sampleScale: number = 0.5 + logs - logsInt;\r\n\t\tthis._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE, sampleScale);\r\n\r\n\t\t//预过滤参数\r\n\t\tvar lthresh: number = Color.gammaToLinearSpace(this.threshold);\r\n\t\tvar knee: number = lthresh * this._softKnee + 1e-5;\r\n\t\tthis._shaderThreshold.setValue(lthresh, lthresh - knee, knee * 2, 0.25 / knee);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD, this._shaderThreshold);\r\n\t\tvar lclamp: number = Color.gammaToLinearSpace(this.clamp);\r\n\r\n\t\tthis._shaderParams.setValue(lclamp, 0, 0, 0);\r\n\t\tthis._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS, this._shaderParams);\r\n\r\n\t\tvar qualityOffset: number = this.fastMode ? 1 : 0;\r\n\r\n\t\t// Downsample\r\n\t\tvar lastDownTexture: RenderTexture = context.indirectTarget;\r\n\t\tfor (var i: number = 0; i < iterations; i++) {\r\n\t\t\tvar downIndex: number = i * 2;\r\n\t\t\tvar upIndex: number = downIndex + 1;\r\n\t\t\tvar subShader: number = i == 0 ? BloomEffect.SUBSHADER_PREFILTER13 + qualityOffset : BloomEffect.SUBSHADER_DOWNSAMPLE13 + qualityOffset;\r\n\r\n\t\t\tvar mipDownTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\r\n\t\t\tmipDownTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\tthis._pyramid[downIndex] = mipDownTexture;\r\n\r\n\t\t\tif (i !== iterations - 1) {\r\n\t\t\t\tvar mipUpTexture: RenderTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\r\n\t\t\t\tmipUpTexture.filterMode = FilterMode.Bilinear;\r\n\t\t\t\tthis._pyramid[upIndex] = mipUpTexture;\r\n\t\t\t}\r\n\r\n\t\t\tcmd.blitScreenTriangle(lastDownTexture, mipDownTexture, null, this._shader, this._shaderData, subShader);\r\n\r\n\t\t\tlastDownTexture = mipDownTexture;\r\n\t\t\ttw = Math.max(Math.floor(tw / 2), 1);\r\n\t\t\tth = Math.max(Math.floor(th / 2), 1);\r\n\t\t}\r\n\t\t// Upsample\r\n\t\tvar lastUpTexture: RenderTexture = this._pyramid[(iterations - 1) * 2];//down\r\n\t\tfor (i = iterations - 2; i >= 0; i--) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tmipDownTexture = this._pyramid[downIndex];\r\n\t\t\tmipUpTexture = this._pyramid[upIndex];\r\n\t\t\tcmd.setShaderDataTexture(this._shaderData, BloomEffect.SHADERVALUE_BLOOMTEX, mipDownTexture);//通过指令延迟设置\r\n\t\t\tcmd.blitScreenTriangle(lastUpTexture, mipUpTexture, null, this._shader, this._shaderData, BloomEffect.SUBSHADER_UPSAMPLETENT + qualityOffset);\r\n\t\t\tlastUpTexture = mipUpTexture;\r\n\t\t}\r\n\r\n\t\tvar linearColor: Color = this._linearColor;\r\n\t\tthis.color.toLinear(linearColor);\r\n\t\tvar intensity: number = Math.pow(2, this._intensity / 10.0) - 1.0;\r\n\t\tvar shaderSettings: Vector4 = this._shaderSetting;\r\n\t\tthis._shaderSetting.setValue(sampleScale, intensity, this._dirtIntensity, iterations);\r\n\r\n\t\t//镜头污渍\r\n\t\t//需要保证污渍纹理不变型\r\n\t\tvar usedirtTexture = this._dirtTexture ? this._dirtTexture : Texture2D.blackTexture;\r\n\r\n\t\tvar dirtRatio: number = usedirtTexture.width / usedirtTexture.height;\r\n\t\tvar screenRatio: number = viewport.width / viewport.height;\r\n\t\tvar dirtTileOffset: Vector4 = this._dirtTileOffset;\r\n\t\tif (dirtRatio > screenRatio)\r\n\t\t\tdirtTileOffset.setValue(screenRatio / dirtRatio, 1.0, (1.0 - dirtTileOffset.x) * 0.5, 0.0);\r\n\t\telse if (dirtRatio < screenRatio)\r\n\t\t\tdirtTileOffset.setValue(1.0, dirtRatio / screenRatio, 0.0, (1.0 - dirtTileOffset.y) * 0.5);\r\n\r\n\t\t//合成Shader属性\r\n\t\tvar compositeShaderData: ShaderData = context.compositeShaderData;\r\n\t\tif (this.fastMode)\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW);\r\n\t\telse\r\n\t\t\tcompositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM);\r\n\r\n\t\tthis._bloomTextureTexelSize.setValue(1.0 / lastUpTexture.width, 1.0 / lastUpTexture.height, lastUpTexture.width, lastUpTexture.height);\r\n\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET, dirtTileOffset);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS, shaderSettings);\r\n\t\tcompositeShaderData.setColor(PostProcess.SHADERVALUE_BLOOM_COLOR, linearColor);//TODO:需要Color支持\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX, usedirtTexture);\r\n\t\tcompositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOMTEX, lastUpTexture);\r\n\t\tcompositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize);\r\n\r\n\t\tlet _compositeShader: Shader3D = Shader3D.find(\"PostProcessComposite\");\r\n\r\n\t\tcmd.blitScreenTriangle(context.indirectTarget, context.destination, context.camera._screenOffsetScale, _compositeShader, compositeShaderData, 0);\r\n\r\n\r\n\t\t//释放渲染纹理\r\n\t\tfor (i = 0; i < iterations; i++) {\r\n\t\t\tdownIndex = i * 2;\r\n\t\t\tupIndex = downIndex + 1;\r\n\t\t\tRenderTexture.recoverToPool(this._pyramid[downIndex]);\r\n\t\t\t(i !== 0 && i !== iterations - 1) && (RenderTexture.recoverToPool(this._pyramid[upIndex]));//i==0为lastUpTexture,需延迟释放,i==iterations - 1,不存在\r\n\t\t}\r\n\r\n\t\tcontext.deferredReleaseTextures.push(lastUpTexture);//TODO:是否需要改机制\r\n\t}\r\n\r\n}\r\n\r\n\r\n","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\r\n\r\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nmediump vec4 safeHDR(mediump vec4 c)\r\n{\r\n    return min(c, HALF_MAX);\r\n}\r\n\r\nfloat max3(float a, float b, float c)\r\n{\r\n    return max(max(a, b), c);\r\n}\r\n\r\nvec3 positivePow(vec3 base, vec3 power)\r\n{\r\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\r\n}","#include \"StdLib.glsl\";\r\n\r\n#define EPSILON 1.0e-4\r\n\r\n// Quadratic color thresholding\r\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\r\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\r\n\t// Pixel brightness\r\n\tmediump float br = max3(color.r, color.g, color.b);\r\n\r\n\t// Under-threshold part: quadratic curve\r\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\r\n\trq = curve.z * rq * rq;\r\n\r\n\t// Combine and apply the brightness response curve.\r\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\r\n\r\n\treturn color;\r\n}\r\n\r\n\r\n\r\n//\r\n// sRGB transfer functions\r\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n//\r\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn c * c;\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\r\n// \t#else\r\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\r\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\r\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\r\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\r\n// \t\treturn linearRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 sRGBToLinear(mediump vec4 c){\r\n//     return vec4(sRGBToLinear(c.rgb), c.a);\r\n// }\r\n\r\n\r\n\r\n// mediump vec3 linearToSRGB(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn sqrt(c);\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\r\n// \t#else\r\n// \t\tmediump vec3 sRGBLo = c * 12.92;\r\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\r\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\r\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\r\n// \t\treturn sRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 linearToSRGB(mediump vec4 c){\r\n//     return vec4(linearToSRGB(c.rgb), c.a);\r\n// }","\r\n// todo only sampler u_MainTex\r\nvec4 samplerTex(sampler2D tex, vec2 uv)\r\n{\r\n    vec4 mainSampler = texture2D(tex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    mainSampler = gammaToLinear(mainSampler);\r\n#endif // Gamma_u_MainTex\r\n\r\n    return mainSampler;\r\n}\r\n\r\n// Better, temporally stable box filtering\r\n// [Jimenez14] http://goo.gl/eomGso\r\n// . . . . . . .\r\n// . A . B . C .\r\n// . . D . E . .\r\n// . F . G . H .\r\n// . . I . J . .\r\n// . K . L . M .\r\n// . . . . . . .\r\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    mediump vec4 A = samplerTex(tex, uv + texelSize * vec2(-1.0, -1.0));\r\n    mediump vec4 B = samplerTex(tex, uv + texelSize * vec2(0.0, -1.0));\r\n    mediump vec4 C = samplerTex(tex, uv + texelSize * vec2(1.0, -1.0));\r\n    mediump vec4 D = samplerTex(tex, uv + texelSize * vec2(-0.5, -0.5));\r\n    mediump vec4 E = samplerTex(tex, uv + texelSize * vec2(0.5, -0.5));\r\n    mediump vec4 F = samplerTex(tex, uv + texelSize * vec2(-1.0, 0.0));\r\n    mediump vec4 G = samplerTex(tex, uv);\r\n    mediump vec4 H = samplerTex(tex, uv + texelSize * vec2(1.0, 0.0));\r\n    mediump vec4 I = samplerTex(tex, uv + texelSize * vec2(-0.5, 0.5));\r\n    mediump vec4 J = samplerTex(tex, uv + texelSize * vec2(0.5, 0.5));\r\n    mediump vec4 K = samplerTex(tex, uv + texelSize * vec2(-1.0, 1.0));\r\n    mediump vec4 L = samplerTex(tex, uv + texelSize * vec2(0.0, 1.0));\r\n    mediump vec4 M = samplerTex(tex, uv + texelSize * vec2(1.0, 1.0));\r\n\r\n    mediump vec2 scale = vec2(0.5, 0.125);\r\n    mediump vec2 div = (1.0 / 4.0) * scale;\r\n\r\n    mediump vec4 o = (D + E + I + J) * div.x;\r\n    o += (A + B + G + F) * div.y;\r\n    o += (B + C + H + G) * div.y;\r\n    o += (F + G + L + K) * div.y;\r\n    o += (G + H + M + L) * div.y;\r\n\r\n    return o;\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n// 9-tap bilinear upsampler (tent filter)\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\n// . 2 . 4 . 2 .\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv - d.xy);\r\n    s += samplerTex(tex, uv - d.wy) * 2.0;\r\n    s += samplerTex(tex, uv - d.zy);\r\n\r\n    s += samplerTex(tex, uv + d.zw) * 2.0;\r\n    s += samplerTex(tex, uv) * 4.0;\r\n    s += samplerTex(tex, uv + d.xw) * 2.0;\r\n\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.wy) * 2.0;\r\n    s += samplerTex(tex, uv + d.xy);\r\n\r\n    return s * (1.0 / 16.0);\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}","#define SHADER_NAME BloomPreFilter13FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomPreFilter4FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomDownSample13FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomDownSample4FS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomUpSampleTentFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleTent()\r\n{\r\n    mediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleTent();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BloomUpSampleBoxFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleBox()\r\n{\r\n    mediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleBox();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME CompositeVS\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}","#define SHADER_NAME CompositeFS\r\n\r\n#include \"Color.glsl\";\r\n#include \"Colors.glsl\";\r\n#include \"Sampling.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, v_Texcoord0);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n\r\n    mediump vec4 color = vec4(0.0);\r\n    color = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_MainTex\r\n\r\n    color.rgb *= autoExposure;\r\n\r\n#if defined(BLOOM) || defined(BLOOM_LOW)\r\n    #ifdef BLOOM\r\n    mediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #else\r\n    mediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #endif\r\n\r\n    // UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\r\n    // but considering we use a cover-style scale on the dirt texture the difference\r\n    // isn't massive so we chose to save a few ALUs here instead in case lens distortion\r\n    // is active\r\n    mediump vec4 dirt = vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\r\n    #ifdef Gamma_u_Bloom_DirtTex\r\n    dirt = gammaToLinear(dirt);\r\n    #endif // Gamma_u_Bloom_DirtTex\r\n\r\n    // Additive bloom (artist friendly)\r\n    bloom *= u_Bloom_Settings.y;\r\n    dirt *= u_Bloom_Settings.z;\r\n    mediump vec4 bloomColor = u_Bloom_Color;\r\n    color += bloom * bloomColor;\r\n    color += dirt * bloom;\r\n#endif\r\n\r\n    mediump vec4 finalColor = color;\r\n    // finalColor = linearToSRGB(finalColor);\r\n    // finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\r\n    gl_FragColor = finalColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME OcclusionEstimationFS\r\n\r\n#include \"DepthNormalUtil.glsl\";\r\n\r\n#include \"AmbientOcclusion.glsl\";\r\n\r\n#define FIX_SAMPLING_PATTERN\r\n\r\n// Check if the camera is perspective.\r\n// (returns 1.0 when orthographic)\r\nfloat CheckPerspective(float x)\r\n{\r\n    // todo ortho\r\n    return mix(x, 1.0, 0.0);\r\n}\r\n\r\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\r\n{\r\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\r\n}\r\n\r\n// Pseudo random number generator with 2D coordinates\r\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\r\nfloat UVRandom(float u, float v)\r\n{\r\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\r\n    return fract(43758.5453 * sin(f));\r\n}\r\n\r\nvec2 CosSin(float theta)\r\n{\r\n    // float sn, cs;\r\n    // sincos(theta, sn, cs);\r\n    float sn = sin(theta);\r\n    float cs = cos(theta);\r\n    return vec2(cs, sn);\r\n}\r\n\r\nfloat GradientNoise(vec2 uv)\r\n{\r\n    uv = floor(uv * u_MainTex_TexelSize.zw);\r\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\r\n    return fract(52.9829189 * fract(f));\r\n}\r\n\r\n// Sample point picker\r\nvec3 PickSamplePoint(vec2 uv, float index)\r\n{\r\n#if defined(FIX_SAMPLING_PATTERN)\r\n    float gn = GradientNoise(uv * DOWNSAMPLE);\r\n    float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\r\n    float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\r\n#else\r\n    float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\r\n    float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\r\n#endif\r\n\r\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\r\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\r\n    return v * l;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    mat3 proj = mat3(u_Projection);\r\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\r\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\r\n\r\n    vec3 norm_o;\r\n    float depth_o = SampleDepthNormal(uv, norm_o);\r\n\r\n    // Reconstruct the view-space position.\r\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\r\n\r\n    float ao = 0.0;\r\n\r\n    for (int s = 0; s < int(SAMPLE_COUNT); s++)\r\n\t{\r\n\t    float s_float = float(s);\r\n\t    vec3 v_s1 = PickSamplePoint(uv, s_float);\r\n\r\n\t    v_s1 = faceforward(v_s1, -norm_o, v_s1);\r\n\t    vec3 vpos_s1 = vpos_o + v_s1;\r\n\r\n\t    // Reproject the sample point\r\n\t    vec3 spos_s1 = proj * vpos_s1;\r\n\t    vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\r\n\r\n\t    float depth_s1 = SampleDepth(uv_s1_01);\r\n\r\n\t    vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\r\n\t    vec3 v_s2 = vpos_s2 - vpos_o;\r\n\r\n\t    float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\r\n\t    float a2 = dot(v_s2, v_s2) + EPSILON;\r\n\r\n\t    ao += a1 / a2;\r\n\t}\r\n\r\n    ao *= RADIUS;\r\n\r\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\r\n\r\n    gl_FragColor = PackAONormal(ao, norm_o);\r\n}\r\n\r\n/**\r\n    0.8741,     0,          0,          0,\r\n    0,          1.7320,     0,          0,\r\n    0,          0,          -1.0152,    -1,\r\n    0,          0,          -0.3046,    0\r\n**/","import BlitScreenVS from \"../../../shader/postprocess/BlitScreen.vs\";\r\nimport FragAO from \"../../../shader/files/postProcess/ScalableAO/FragAO.fs\";\r\nimport AoBlurHorizontal from \"../../../shader/files/postProcess/ScalableAO/AoBlurHorizontal.fs\";\r\nimport AOComposition from \"../../../shader/files/postProcess/ScalableAO/AOComposition.fs\";\r\nimport AmbientOcclusion from \"../../../shader/files/postProcess/ScalableAO/AmbientOcclusion.glsl\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { WrapMode } from \"../../../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Camera } from \"../../Camera\";\r\nimport { CommandBuffer } from \"../command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../PostProcessRenderContext\";\r\nimport { BaseCamera } from \"../../BaseCamera\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { DepthTextureMode, RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { ShaderDataType, ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { RenderState } from \"../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\n/**\r\n * @en The quality of AO.\r\n * @zh AO质量\r\n */\r\nexport enum AOQUALITY {\r\n    /**\r\n     * @en High quality.\r\n     * @zh 高质量\r\n     */\r\n    High,\r\n    /**\r\n     * @en Medium quality.\r\n     * @zh 中质量\r\n     */\r\n    MEDIUM,\r\n    /**\r\n     * @en Low quality.\r\n     * @zh 低质量\r\n     */\r\n    LOWEST\r\n}\r\n\r\n/**\r\n * @en The ScalableAO class is used to create ambient occlusion effect.\r\n * @zh ScalableAO 类用于创建环境光遮罩效果。\r\n */\r\nexport class ScalableAO extends PostProcessEffect {\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_AOHigh: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_AOMEDIUM: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_LOWEST: ShaderDefine;\r\n\r\n    /**@internal */\r\n    static BlurDelty: number;\r\n\r\n    /**@internal */\r\n    static AOColor: number;\r\n\r\n    /**@internal */\r\n    static aoTexture: number;\r\n\r\n    /**@internal */\r\n    static AOParams: number;\r\n\r\n    /**@internal */\r\n    static SourceTex: number;\r\n\r\n    /**@internal */\r\n    static deltyHorizontal: Vector2 = new Vector2(1.0, 0.0);\r\n\r\n    /**@internal */\r\n    static deltyVector: Vector2 = new Vector2(0.0, 1.0);\r\n\r\n    /**\r\n     * @en ScaleAO resource init\r\n     * @zh 初始化AO资源\r\n     */\r\n    static init() {\r\n        ScalableAO.BlurDelty = Shader3D.propertyNameToID(\"u_Delty\");\r\n        ScalableAO.AOColor = Shader3D.propertyNameToID(\"u_AOColor\");\r\n        ScalableAO.aoTexture = Shader3D.propertyNameToID(\"u_compositionAoTexture\");\r\n\r\n        ScalableAO.AOParams = Shader3D.propertyNameToID('u_AOParams');\r\n        ScalableAO.SourceTex = Shader3D.propertyNameToID('u_SourceTex');\r\n        ScalableAO.SHADERDEFINE_AOHigh = Shader3D.getDefineByName(\"AO_High\");\r\n        ScalableAO.SHADERDEFINE_AOMEDIUM = Shader3D.getDefineByName(\"AO_MEDIUM\");\r\n        ScalableAO.SHADERDEFINE_LOWEST = Shader3D.getDefineByName(\"AO_LOWEST\");\r\n        Shader3D.addInclude(\"AmbientOcclusion.glsl\", AmbientOcclusion);\r\n        //scalableAoShader\r\n        let attributeMap: any = {\r\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\r\n        };\r\n        let uniformMap: any = {\r\n            'u_OffsetScale': ShaderDataType.Vector4,\r\n            'u_MainTex': ShaderDataType.Texture2D,\r\n            'u_MainTex_TexelSize': ShaderDataType.Vector4,\r\n            'u_Delty': ShaderDataType.Vector2,\r\n            'u_PlugTime': ShaderDataType.Vector4,\r\n            'u_AOParams': ShaderDataType.Vector3,\r\n            'u_BlurVector': ShaderDataType.Vector2,\r\n            'u_AOColor': ShaderDataType.Color,\r\n            'u_compositionAoTexture': ShaderDataType.Texture2D\r\n\r\n        }\r\n        let shader: Shader3D = Shader3D.add(\"ScalableAO\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        let subShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let aoPass = subShader.addShaderPass(BlitScreenVS, FragAO);\r\n        aoPass.statefirst = true;\r\n        aoPass.renderState.cull = RenderState.CULL_NONE;\r\n        //BlurShader\r\n        shader = Shader3D.add(\"AOBlurHorizontal\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let blurPass = subShader.addShaderPass(BlitScreenVS, AoBlurHorizontal);\r\n        blurPass.statefirst = true;\r\n        blurPass.renderState.cull = RenderState.CULL_NONE;\r\n\r\n        //Composition\r\n        shader = Shader3D.add(\"AOComposition\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        subShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(subShader);\r\n        let compositionPass = subShader.addShaderPass(BlitScreenVS, AOComposition);\r\n        compositionPass.statefirst = true;\r\n        compositionPass.renderState.cull = RenderState.CULL_NONE;\r\n    }\r\n\r\n    /*@internal scalable AO shader*/\r\n    private _shader: Shader3D;\r\n\r\n    /**@internal shader data */\r\n    private _shaderData: ShaderData;\r\n\r\n    /*@internal blurHorizontal Ao Shader */\r\n    private _aoBlurHorizontalShader: Shader3D;\r\n\r\n    /**@internal */\r\n    private _aoComposition: Shader3D;\r\n\r\n    /**@internal */\r\n    private _aoParams: Vector3 = new Vector3();\r\n\r\n    private _aoQuality: AOQUALITY = AOQUALITY.MEDIUM;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en initializes the effect.\r\n     * @zh 构造函数, 初始化实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._shader = Shader3D.find(\"ScalableAO\");\r\n        this._shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n        this._aoParams = new Vector3(0.12, 0.15, 1);\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n        this._shaderData.setVector(BaseCamera.DEPTHZBUFFERPARAMS, new Vector4());\r\n        this._aoBlurHorizontalShader = Shader3D.find(\"AOBlurHorizontal\");\r\n        this._aoComposition = Shader3D.find(\"AOComposition\");\r\n        this.aoQuality = AOQUALITY.MEDIUM;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The color of ambient occlusion.\r\n     * @zh 环境光遮挡的颜色\r\n     */\r\n    get aoColor() {\r\n        return this._shaderData.getColor(ScalableAO.AOColor);\r\n    }\r\n\r\n    set aoColor(value: Color) {\r\n        this._shaderData.setColor(ScalableAO.AOColor, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The intensity of ambient occlusion.\r\n     * @zh 环境光遮挡的强度\r\n     */\r\n    get intensity() {\r\n        return this._aoParams.x;\r\n    }\r\n\r\n    set intensity(value: number) {\r\n        this._aoParams.x = value;\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The influence radius of ambient occlusion.\r\n     * @zh 环境光遮挡的影响半径\r\n     */\r\n    get radius() {\r\n        return this._aoParams.y;\r\n    }\r\n    \r\n    set radius(value: number) {\r\n        this._aoParams.y = value;\r\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The quality of ambient occlusion.\r\n     * @zh 环境光遮挡的质量\r\n     */\r\n    get aoQuality() {\r\n        return this._aoQuality;\r\n    }\r\n\r\n    set aoQuality(value: AOQUALITY) {\r\n        this._aoQuality = value;\r\n        switch (value) {\r\n            case AOQUALITY.High:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                break;\r\n            case AOQUALITY.MEDIUM:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                break;\r\n            case AOQUALITY.LOWEST:\r\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_LOWEST);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\r\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Get the camera depth texture mode flag.\r\n     * @zh 获取相机深度纹理模式标志。\r\n     */\r\n    getCameraDepthTextureModeFlag() {\r\n        return DepthTextureMode.DepthAndDepthNormals;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Render the ambient occlusion effect.\r\n     * @param context The post-process render context.\r\n     * @zh 渲染环境光遮挡效果。\r\n     * @param context 后处理渲染上下文。\r\n     */\r\n    render(context: PostProcessRenderContext): void {\r\n        let cmd: CommandBuffer = context.command;\r\n        let viewport = context.camera.viewport;\r\n        let camera: Camera = context.camera;\r\n\r\n        // camera rendermode\r\n        camera.depthTextureMode |= DepthTextureMode.DepthNormals;\r\n        camera.depthTextureMode |= DepthTextureMode.Depth;\r\n\r\n        let depthNormalTexture: RenderTexture = camera.depthNormalTexture;\r\n        let depthTexture = camera.depthTexture;\r\n\r\n        if (!depthNormalTexture || !depthTexture) {\r\n            return;\r\n        }\r\n\r\n        depthNormalTexture.wrapModeU = WrapMode.Clamp;\r\n        depthNormalTexture.wrapModeV = WrapMode.Clamp;\r\n\r\n        let source: RenderTexture = context.source;\r\n        let width = source.width;\r\n        let height = source.height;\r\n        let textureFormat: RenderTargetFormat = source.colorFormat;\r\n        let depthFormat: RenderTargetFormat = RenderTargetFormat.None;\r\n\r\n        let finalTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\r\n\r\n        let shader: Shader3D = this._shader;\r\n        let shaderData: ShaderData = this._shaderData;\r\n        //depthTexture;\r\n        //depthNormalTexture;\r\n        cmd.blitScreenTriangle(context.source, finalTex, null, shader, shaderData, 0);\r\n        //context.source = finalTex;\r\n        let blurTex: RenderTexture = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\r\n        //blur horizontal\r\n        cmd.blitScreenTriangle(finalTex, blurTex, null, this._aoBlurHorizontalShader, shaderData, 0);\r\n        //blur Vec\r\n        cmd.setShaderDataVector2(shaderData, ScalableAO.BlurDelty, ScalableAO.deltyVector);\r\n        cmd.blitScreenTriangle(blurTex, finalTex, null, this._aoBlurHorizontalShader, this._shaderData, 0);\r\n        //blur Composition\r\n        cmd.setShaderDataTexture(shaderData, ScalableAO.aoTexture, finalTex);\r\n        cmd.blitScreenTriangle(context.source, context.destination, null, this._aoComposition, this._shaderData, 0);\r\n        //context.source = blurTex;\r\n        context.deferredReleaseTextures.push(finalTex);\r\n        context.deferredReleaseTextures.push(blurTex);\r\n    }\r\n\r\n}","#include \"Camera.glsl\";\r\n// const \r\n#define TWO_PI 6.2831852\r\n\r\n#define EPSILON         1.0e-4\r\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nconst float kContrast = 0.6;\r\nconst float kGeometryCoeff = 0.8;\r\nconst float kBeta = 0.002;\r\n\r\n\r\n// varying\r\nvarying vec2 v_Texcoord0;\r\n\r\n#if defined(AO_High)\r\n\t#define SAMPLE_COUNT 12\r\n#elif defined(AO_MEDIUM)\r\n\t#define SAMPLE_COUNT 8\r\n#else\r\n\t#define SAMPLE_COUNT 4\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n\r\n#define INTENSITY u_AOParams.x\r\n#define RADIUS u_AOParams.y\r\n#define DOWNSAMPLE u_AOParams.z\r\n\r\nfloat PositivePow(float base, float power)\r\n{\r\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\r\n}\r\n\r\n\r\n// Boundary check for depth sampler\r\n// (returns a very large value if it lies out of bounds)\r\nfloat CheckBounds(vec2 uv, float d) \r\n{\r\n    float ob = 0.0;\r\n    // todo\r\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \r\n    {\r\n        ob = 1.0;\r\n    }\r\n    if (d <= 0.00001) {\r\n        ob += 1.0;\r\n    }\r\n\r\n    return ob * 1e8;\r\n}\r\n\r\nfloat SampleDepth(vec2 uv) \r\n{\r\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\r\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\r\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\r\n}\r\n\r\nvec3 SampleNormal(vec2 uv) \r\n{\r\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\r\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\r\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\r\n}\r\n\r\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \r\n{\r\n    normal = SampleNormal(uv);\r\n    return SampleDepth(uv);\r\n}\r\n\r\n// Normal vector comparer (for geometry-aware weighting)\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\r\n}\r\n\r\n// Accessors for packed AO/normal buffer\r\nvec4 PackAONormal(float ao, vec3 n) \r\n{\r\n    return vec4(ao, n * 0.5 + 0.5);\r\n}\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat GetPackAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n\r\n","#define SHADER_NAME AOBlurHorizontal\r\n//质量\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// uniform vec2 u_Delty;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\n\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\nvec4 PackAONormal(float ao, vec3 normal)\r\n{\r\n    return vec4(ao, normal * 0.5 + 0.5);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0 * u_Delty.x, u_Delty.y * u_MainTex_TexelSize.y * 2.0);\r\n    vec2 uv = v_Texcoord0;\r\n\r\n// #if defined(BLUR_HIGH_QUALITY) //兼容WGSL\r\n\r\n    // High quality 7-tap Gaussian with adaptive sampling\r\n    vec2 uvtran = uv;\r\n    vec4 p0 = texture2D(u_MainTex, uv);\r\n    uvtran = uv - delta;\r\n    vec4 p1a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p1b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 2.0;\r\n    vec4 p2a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta * 2.0;\r\n    vec4 p2b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 3.2307692308;\r\n    vec4 p3a = texture2D(u_MainTex, uvtran);\r\n    ;\r\n    uvtran = uv + delta * 3.2307692308;\r\n    vec4 p3b = texture2D(u_MainTex, uvtran);\r\n    ;\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 0.37004405286;\r\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\r\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\r\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\r\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\r\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\r\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1a) * w1a;\r\n    s += GetPackedAO(p1b) * w1b;\r\n    s += GetPackedAO(p2a) * w2a;\r\n    s += GetPackedAO(p2b) * w2b;\r\n    s += GetPackedAO(p3a) * w3a;\r\n    s += GetPackedAO(p3b) * w3b;\r\n\r\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\r\n\r\n// #else\r\n\r\n//     // Fater 5-tap Gaussian with linear sampling\r\n//     vec4 p0 = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\r\n//     vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\r\n//     vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\r\n//     vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\r\n//     vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\r\n\r\n//     vec2 uvtran = uv;\r\n//     vec4 p0 = texture2D(u_MainTex, uv);\r\n//     uvtran = uv - delta * 1.3846153846;\r\n//     vec4 p1a = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv + delta * 1.3846153846;\r\n//     vec4 p1b = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv - delta * 3.2307692308;\r\n//     vec4 p2a = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv + delta * 3.2307692308;\r\n//     vec4 p2b = texture2D(u_MainTex, uvtran);\r\n\r\n//     vec3 n0 = GetPackedNormal(p0);\r\n\r\n//     float w0 = 0.2270270270;\r\n//     float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\r\n//     float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\r\n//     float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\r\n//     float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\r\n\r\n//     float s;\r\n//     s = GetPackedAO(p0) * w0;\r\n//     s += GetPackedAO(p1a) * w1a;\r\n//     s += GetPackedAO(p1b) * w1b;\r\n//     s += GetPackedAO(p2a) * w2a;\r\n//     s += GetPackedAO(p2b) * w2b;\r\n\r\n//     s /= w0 + w1a + w1b + w2a + w2b;\r\n\r\n// #endif\r\n\r\n    gl_FragColor = PackAONormal(s, n0);\r\n}","#define SHADER_NAME AOComposition\r\n\r\n#include \"Color.glsl\";\r\n\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n// Geometry-aware bilateral filter (single pass/small kernel)\r\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\r\n{\r\n    vec4 p0 = texture2D(tex, uv);\r\n    vec2 uvtran = uv + vec2(-delta.x, -delta.y);\r\n    vec4 p1 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(delta.x, -delta.y);\r\n    vec4 p2 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(-delta.x, delta.y);\r\n    vec4 p3 = texture2D(tex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p4 = texture2D(tex, uvtran);\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 1.0;\r\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\r\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\r\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\r\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1) * w1;\r\n    s += GetPackedAO(p2) * w2;\r\n    s += GetPackedAO(p3) * w3;\r\n    s += GetPackedAO(p4) * w4;\r\n\r\n    return s / (w0 + w1 + w2 + w3 + w4);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec2 delty = u_MainTex_TexelSize.xy;\r\n    float ao = BlurSmall(u_compositionAoTexture, uv, delty);\r\n    vec4 albedo = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    albedo = gammaToLinear(albedo);\r\n#endif // Gamma_u_MainTex\r\n    vec4 aocolor = vec4(ao * u_AOColor.rgb, ao);\r\n    albedo.rgb = albedo.rgb * (1.0 - ao) + ao * u_AOColor.rgb * ao;\r\n    gl_FragColor = albedo;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME SCREENVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\n\r\nvoid main() {\t\r\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}","import FullScreenVert from \"../../../shader/files/postProcess/GaussianDoF/FullScreenVert.vs\";\r\nimport CoCFS from \"../../../shader/files/postProcess/GaussianDoF/CoC.fs\";\r\nimport PrefilterFS from \"../../../shader/files/postProcess/GaussianDoF/Prefilter.fs\";\r\nimport BlurVFS from \"../../../shader/files/postProcess/GaussianDoF/BlurV.fs\";\r\nimport BlurHFS from \"../../../shader/files/postProcess/GaussianDoF/BlurH.fs\";\r\nimport CompositeFS from \"../../../shader/files/postProcess/GaussianDoF/Composite.fs\";\r\nimport { Camera } from \"../../../core/Camera\";\r\nimport { CommandBuffer } from \"../../../core/render/command/CommandBuffer\";\r\nimport { PostProcessEffect } from \"../../../core/render/PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../../../core/render/PostProcessRenderContext\";\r\nimport { FilterMode } from \"../../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { ShaderDataType, ShaderData } from \"../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { VertexMesh } from \"../../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { DepthTextureMode, RenderTexture } from \"../../../../resource/RenderTexture\";\r\nimport { RenderState } from \"../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\n/**\r\n * @en The `GaussianDoF` class is used to create a Gaussian Depth of Field effect.\r\n * Only supports far field blur.\r\n * - start: The depth at which the far field begins to blur.\r\n * - end: The depth at which the far field reaches its maximum blur radius.\r\n * - maxRadius: The maximum blur radius for the far field.\r\n * @zh `GaussianDoF` 类用于创建高斯景深效果。\r\n * 仅支持远景模糊。\r\n * - start: 开始远景模糊的深度\r\n * - end: 达到最大模糊半径的远景深度\r\n * - maxRadius: 远景模糊最大半径\r\n */\r\nexport class GaussianDoF extends PostProcessEffect {\r\n    /**@internal */\r\n    static SOURCESIZE: number;\r\n\r\n    /**@internal */\r\n    static ZBUFFERPARAMS: number;\r\n\r\n    /**@internal */\r\n    static COCPARAMS: number;\r\n\r\n    /**@internal */\r\n    static DEPTHTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static NORMALDEPTHTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static FULLCOCTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static DOWNSAMPLESCALE: number;\r\n\r\n    /**@internal */\r\n    static BLURCOCTEXTURE: number;\r\n\r\n    /**@internal */\r\n    static SHADERDEFINE_DEPTHNORMALTEXTURE: ShaderDefine;\r\n\r\n    /**\r\n     * @en GaussianDOF resource init\r\n     * @zh 高斯DOF资源初始化\r\n     */\r\n    static init() {\r\n        GaussianDoF.SOURCESIZE = Shader3D.propertyNameToID(\"u_SourceSize\");\r\n        GaussianDoF.ZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\r\n        GaussianDoF.COCPARAMS = Shader3D.propertyNameToID(\"u_CoCParams\");\r\n        GaussianDoF.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\r\n        GaussianDoF.NORMALDEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalTexture\");\r\n        GaussianDoF.FULLCOCTEXTURE = Shader3D.propertyNameToID(\"u_FullCoCTex\");\r\n        GaussianDoF.DOWNSAMPLESCALE = Shader3D.propertyNameToID(\"u_DownSampleScale\");\r\n        GaussianDoF.BLURCOCTEXTURE = Shader3D.propertyNameToID(\"u_BlurCoCTex\");\r\n        GaussianDoF.SHADERDEFINE_DEPTHNORMALTEXTURE = Shader3D.getDefineByName(\"CAMERA_NORMALDEPTH\");\r\n\r\n        let attributeMap: any = {\r\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\r\n        };\r\n\r\n        let uniformMap: any = {\r\n            \"u_MainTex\": ShaderDataType.Texture2D,\r\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\r\n            \"u_OffsetScale\": ShaderDataType.Vector4,\r\n            \"u_ZBufferParams\": ShaderDataType.Vector4,\r\n            \"u_CoCParams\": ShaderDataType.Vector3,\r\n            \"u_FullCoCTex\": ShaderDataType.Texture2D,\r\n            \"u_SourceSize\": ShaderDataType.Vector4,\r\n            \"u_DownSampleScale\": ShaderDataType.Vector4,\r\n            \"u_BlurCoCTex\": ShaderDataType.Texture2D,\r\n        };\r\n        let shader: Shader3D = Shader3D.add(\"GaussianDoF\");\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        /**\r\n         * CoC pass\r\n         * 根据 FarStart 与 FarEnd， 将深度值映射到 0 - 1\r\n         * \r\n         * Camera nearPlane---------FarStart---------FarEnd---------Camera farplane\r\n         *       0         ---------   0    ---------   1  ---------      1\r\n         */\r\n        let cocSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(cocSubShader);\r\n        let cocPass = cocSubShader.addShaderPass(FullScreenVert, CoCFS);\r\n        cocPass.statefirst = true;\r\n        cocPass.renderState.cull = RenderState.CULL_NONE;\r\n\r\n        /**\r\n         * Prefilter pass\r\n         * \r\n         */\r\n        let prefilterSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(prefilterSubShader);\r\n        let prefilterPass = prefilterSubShader.addShaderPass(FullScreenVert, PrefilterFS);\r\n        prefilterPass.statefirst = true;\r\n        prefilterPass.renderState.cull = RenderState.CULL_NONE;\r\n\r\n        // blur\r\n        /**\r\n         * blurH pass\r\n         */\r\n        let blurHSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(blurHSubShader);\r\n        let blurHPass = blurHSubShader.addShaderPass(FullScreenVert, BlurHFS);\r\n        blurHPass.statefirst = true;\r\n        blurHPass.renderState.cull = RenderState.CULL_NONE;\r\n\r\n        /**\r\n         * blurV pass\r\n         */\r\n        let blurVSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(blurVSubShader);\r\n        let blurVPass = blurVSubShader.addShaderPass(FullScreenVert, BlurVFS);\r\n        blurVPass.statefirst = true;\r\n        blurVPass.renderState.cull = RenderState.CULL_NONE;\r\n\r\n        /**\r\n         * Composite pass\r\n         */\r\n        let compositeSubShader: SubShader = new SubShader(attributeMap, uniformMap);\r\n        shader.addSubShader(compositeSubShader);\r\n        let compositePass = compositeSubShader.addShaderPass(FullScreenVert, CompositeFS);\r\n        compositePass.statefirst = true;\r\n        compositePass.renderState.cull = RenderState.CULL_NONE;\r\n    }\r\n\r\n    /**@internal */\r\n    private _shader: Shader3D;\r\n\r\n    /**@internal */\r\n    private _shaderData: ShaderData;\r\n\r\n    /**@internal */\r\n    private _zBufferParams: Vector4;\r\n\r\n    /**@internal */\r\n    private _sourceSize: Vector4;\r\n\r\n    /**@internal */\r\n    private _dowmSampleScale: Vector4;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en initialization GaussianDOF effect instance.\r\n     * @zh 初始化高斯DOF效果实例\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._shader = Shader3D.find(\"GaussianDoF\");\r\n        this._shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, new Vector3(10, 30, 1));\r\n        this._zBufferParams = new Vector4();\r\n        this._sourceSize = new Vector4();\r\n        this._dowmSampleScale = new Vector4();\r\n    }\r\n\r\n    /**\r\n     * @en The depth at which far field blur begins.\r\n     * @zh 开始远景模糊的深度。\r\n     */\r\n    get farStart(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).x;\r\n    }\r\n\r\n    set farStart(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.x = value;\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The depth at which maximum blur radius is reached for far field.\r\n     * @zh 达到最大模糊半径的远景深度。\r\n     */\r\n    get farEnd(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).y;\r\n    }\r\n\r\n    set farEnd(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.y = Math.max(cocParams.x, value);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The maximum blur radius.\r\n     * @zh 最大模糊半径。\r\n     */\r\n    get maxRadius(): number {\r\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).z;\r\n    }\r\n\r\n    set maxRadius(value: number) {\r\n        let cocParams: Vector3 = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\r\n        cocParams.z = Math.min(value, 2);\r\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @param context \r\n     */\r\n    private _setupShaderValue(context: PostProcessRenderContext): void {\r\n        let camera: Camera = context.camera;\r\n        this._dowmSampleScale.setValue(0.5, 0.5, 2.0, 2.0);\r\n        this._shaderData.setVector(GaussianDoF.DOWNSAMPLESCALE, this._dowmSampleScale);\r\n        let far = camera.farPlane;\r\n        let near = camera.nearPlane;\r\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n        this._shaderData.setVector(GaussianDoF.ZBUFFERPARAMS, this._zBufferParams);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Get the camera depth texture mode flag.\r\n     * @zh 获取相机深度纹理模式标志。\r\n     */\r\n    getCameraDepthTextureModeFlag() {\r\n        return DepthTextureMode.Depth;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Render the Gaussian DoF effect.\r\n     * @param context The post-process render context.\r\n     * @zh 渲染高斯景深效果。\r\n     * @param context 后处理渲染上下文。\r\n     */\r\n    render(context: PostProcessRenderContext): void {\r\n        let cmd: CommandBuffer = context.command;\r\n        this._setupShaderValue(context);\r\n\r\n        let source: RenderTexture = context.source;\r\n\r\n        let shader: Shader3D = this._shader;\r\n        let shaderData: ShaderData = this._shaderData;\r\n\r\n        let dataTexFormat: RenderTargetFormat = RenderTargetFormat.R16G16B16A16;\r\n        // todo fullCoC format: R16\r\n        let fullCoC: RenderTexture = RenderTexture.createFromPool(source.width, source.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        // coc pass\r\n        cmd.blitScreenTriangle(source, fullCoC, null, shader, shaderData, 0);\r\n        // Prefilter pass\r\n        fullCoC.filterMode = FilterMode.Bilinear;\r\n        this._shaderData.setTexture(GaussianDoF.FULLCOCTEXTURE, fullCoC);\r\n        let prefilterTex: RenderTexture = RenderTexture.createFromPool(source.width / 2, source.height / 2, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(source, prefilterTex, null, shader, shaderData, 1);\r\n        // blur\r\n        prefilterTex.filterMode = FilterMode.Bilinear;\r\n        this._sourceSize.setValue(prefilterTex.width, prefilterTex.height, 1.0 / prefilterTex.width, 1.0 / prefilterTex.height);\r\n        this._shaderData.setShaderData(GaussianDoF.SOURCESIZE, ShaderDataType.Vector4, this._sourceSize);\r\n        // blur H\r\n        let blurHTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(prefilterTex, blurHTex, null, this._shader, this._shaderData, 2);\r\n        // blur V\r\n        let blurVTex: RenderTexture = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\r\n        cmd.blitScreenTriangle(blurHTex, blurVTex, null, this._shader, this._shaderData, 3);\r\n        // composite\r\n        blurVTex.filterMode = FilterMode.Bilinear;\r\n        blurVTex.anisoLevel = 1;\r\n        fullCoC.filterMode = FilterMode.Point;\r\n        this._shaderData.setTexture(GaussianDoF.BLURCOCTEXTURE, blurVTex);\r\n        let finalTex: RenderTexture = RenderTexture.createFromPool(source.width, source.height, source.colorFormat, source.depthStencilFormat, false, 1);\r\n        cmd.blitScreenTriangle(source, context.destination, null, this._shader, this._shaderData, 4);\r\n        //context.source = finalTex;\r\n        // recover render texture\r\n        RenderTexture.recoverToPool(fullCoC);\r\n        RenderTexture.recoverToPool(prefilterTex);\r\n        RenderTexture.recoverToPool(blurHTex);\r\n        RenderTexture.recoverToPool(blurVTex);\r\n        context.deferredReleaseTextures.push(finalTex);\r\n    }\r\n}\r\n","#define SHADER_NAME COCFS\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\nuniform sampler2D u_CameraDepthNormalTexture;\r\n#else\r\nuniform sampler2D u_CameraDepthTexture;\r\n#endif\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\n    vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, uv);\r\n    float depth = 0.0;\r\n    DecodeDepthNormal(depthNormal, depth);\r\n    depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\r\n#else\r\n    float depth = texture2D(u_CameraDepthTexture, uv).x;\r\n#endif\r\n\r\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\r\n    float farStart = u_CoCParams.x;\r\n    float farEnd = u_CoCParams.y;\r\n\r\n    float coc = (depth - farStart) / (farEnd - farStart);\r\n    coc = clamp(coc, 0.0, 1.0);\r\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\r\n}\r\n","#define SHADER_NAME PrefilterFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kCount = 5;\r\nvec2 kTaps[5];\r\n\r\nvoid main()\r\n{\r\n\r\n    kTaps[0] = vec2(0.0, 0.0);\r\n    kTaps[1] = vec2(0.9, -0.4);\r\n    kTaps[2] = vec2(-0.9, 0.4);\r\n    kTaps[3] = vec2(0.4, 0.9);\r\n    kTaps[4] = vec2(-0.4, -0.9);\r\n\r\n    vec3 colorAcc = vec3(0.0);\r\n    float farCoCAcc = 0.0;\r\n    for (int i = 0; i < kCount; i++)\r\n\t{\r\n\t    vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\r\n\t    vec3 tapColor = texture2D(u_MainTex, uv).rgb;\r\n#ifdef Gamma_u_MainTex\r\n\t    tapColor = gammaToLinear(tapColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n\t    float coc = texture2D(u_FullCoCTex, uv).r;\r\n\r\n\t    colorAcc += tapColor * coc;\r\n\t    farCoCAcc += coc;\r\n\t}\r\n    vec3 color = colorAcc * (1.0 / float(kCount));\r\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\r\n\r\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\r\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\r\n    // color *= farCoC;\r\n\r\n    gl_FragColor = vec4(color, farCoC);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BlurHFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.a;\r\n\t    vec3 sampColor = samp.rgb;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, samp0CoC);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","#define SHADER_NAME BlurVFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// todo 3 & 5\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.w;\r\n\t    vec3 sampColor = samp.xyz;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n","#define SHADER_NAME CompositeFS\r\n\r\n#include \"Color.glsl\";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n#ifdef BLITSCREEN_INVERTY\r\n    uv.y = 1.0 - uv.y;\r\n#endif\r\n    vec3 baseColor = texture2D(u_MainTex, uv).rgb;\r\n#ifdef Gamma_u_MainTex\r\n    baseColor = gammaToLinear(baseColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec4 samplevalue = texture2D(u_BlurCoCTex, uv);\r\n    vec3 farColor = samplevalue.rgb;\r\n    float coc = texture2D(u_FullCoCTex, uv).r;\r\n\r\n    vec3 dstColor = vec3(0.0);\r\n    float dstAlpha = 1.0;\r\n\r\n    float blend = sqrt(coc * 3.14 * 2.0);\r\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\r\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\r\n\r\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}","import { BufferUsage } from \"../../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexDeclaration } from \"../../../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../../../renders/VertexElementFormat\";\r\nimport { BufferState } from \"../../../../../webgl/utils/BufferState\";\r\nimport { Laya3DRender } from \"../../../../RenderObjs/Laya3DRender\";\r\nimport { IndexBuffer3D } from \"../../../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../../../graphics/VertexBuffer3D\";\r\nimport { GeometryElement } from \"../../../GeometryElement\";\r\nimport { RenderContext3D } from \"../../RenderContext3D\";\r\n\r\n/**\r\n * @en Represents the geometry of a lens flare element.\r\n * @zh 表示镜头光晕元素的几何体。\r\n */\r\nexport class LensFlareElementGeomtry extends GeometryElement {\r\n    /**\r\n     * @en Constant representing the position and UV attributes.\r\n     * @zh 表示位置和UV属性的常量。\r\n     */\r\n    static PositionUV: number = 0;\r\n    /**\r\n     * @en Constant representing the position, rotation, and scale attributes.\r\n     * @zh 表示位置、旋转和缩放属性的常量。\r\n     */\r\n    static PositionRotationScale: number = 1;\r\n    /**@internal */\r\n    static lensQuadVertices: Float32Array;\r\n    /**@internal */\r\n    static lensQuadIndex: Uint16Array;\r\n    /**@internal */\r\n    static vertexDeclaration: VertexDeclaration;\r\n    /**@internal */\r\n    static instanceVertexDeclaration: VertexDeclaration;\r\n    /**@internal 最大instanceData*/\r\n    static lensFlareElementMax: number = 20;\r\n    /**@internal */\r\n    private _vertexBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    private _instanceVertexBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    private _indexBuffer: IndexBuffer3D;\r\n    /**@internal */\r\n    private static _type: number = GeometryElement._typeCounter++;\r\n\r\n    /**\r\n     * @en Initializes the data for lens flare element geometry.\r\n     * @zh 初始化镜头光晕元素几何体的数据。\r\n     */\r\n    static init() {\r\n        let quadSize = 0.1;\r\n        LensFlareElementGeomtry.lensQuadVertices = new Float32Array([\r\n            quadSize, quadSize, 1, 1,\r\n            -quadSize, quadSize, 0, 1,\r\n            -quadSize, -quadSize, 0, 0,\r\n            quadSize, -quadSize, 1, 0]);\r\n        LensFlareElementGeomtry.lensQuadIndex = new Uint16Array([0, 2, 1, 0, 3, 2]);\r\n        //xy:position zw:uv\r\n        LensFlareElementGeomtry.vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, 0)]);\r\n        //x:startPosition  y:angular zw:scale\r\n        LensFlareElementGeomtry.instanceVertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, 1)])\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Constructor method, initialize the instance.\r\n     * @zh 构造方法，初始化实例\r\n     */\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElementInstance);\r\n        this.indexFormat = IndexFormat.UInt16;\r\n        this._createBuffer();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _createBuffer() {\r\n        //VB\r\n        this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(LensFlareElementGeomtry.lensQuadVertices.length * 4, BufferUsage.Dynamic, false);\r\n        this._vertexBuffer.vertexDeclaration = LensFlareElementGeomtry.vertexDeclaration;\r\n        this._vertexBuffer.setData(LensFlareElementGeomtry.lensQuadVertices.buffer);\r\n        //instanceVB\r\n        this._instanceVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(LensFlareElementGeomtry.lensFlareElementMax * 4 * 4, BufferUsage.Dynamic, false);\r\n        this._instanceVertexBuffer.instanceBuffer = true;\r\n        this._instanceVertexBuffer.vertexDeclaration = LensFlareElementGeomtry.instanceVertexDeclaration;\r\n        //IB\r\n        this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, LensFlareElementGeomtry.lensQuadIndex.length, BufferUsage.Static, false);\r\n        this._indexBuffer.setData(LensFlareElementGeomtry.lensQuadIndex);\r\n        //VAO\r\n        this.bufferState = new BufferState();\r\n        this.bufferState.applyState([this._vertexBuffer, this._instanceVertexBuffer], this._indexBuffer);\r\n        this._updateRenderParams(null);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    get instanceBuffer() {\r\n        return this._instanceVertexBuffer;\r\n    }\r\n\r\n    /**\r\n     *\t{@inheritDoc PixelLineFilter._getType}\r\n     *\t@override\r\n     *  @internal\r\n     */\r\n    _getType(): number {\r\n        return LensFlareElementGeomtry._type;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @return  是否需要渲染。\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the lens flare element geometry and releases its resources.\r\n     * @zh 销毁镜头光晕元素几何体并释放其资源。\r\n     */\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._vertexBuffer.destroy();\r\n        this._instanceVertexBuffer.destroy();\r\n        this.bufferState.destroy();\r\n        this._indexBuffer.destroy();\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    * UpdateGeometry Data\r\n    */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        this.clearRenderParams();\r\n        this.setDrawElemenParams(LensFlareElementGeomtry.lensQuadIndex.length, 0);\r\n    }\r\n}\r\n","import { RenderState } from \"../../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Material, MaterialRenderMode } from \"../../../../../resource/Material\";\r\nimport { Stat } from \"../../../../../utils/Stat\";\r\nimport { Utils } from \"../../../../../utils/Utils\";\r\nimport { Laya3DRender } from \"../../../../RenderObjs/Laya3DRender\";\r\nimport { Camera } from \"../../../Camera\";\r\nimport { Transform3D } from \"../../../Transform3D\";\r\nimport { RenderContext3D } from \"../../RenderContext3D\";\r\nimport { RenderElement } from \"../../RenderElement\";\r\nimport { CommandBuffer } from \"../../command/CommandBuffer\";\r\nimport { LensFlareElement, LensFlareEffect } from \"./LensFlareEffect\";\r\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\r\n\r\n/**\r\n * @en Represents lens flare command\r\n * @zh 表示镜头光晕指令\r\n */\r\nexport class LensFlareCMD {\r\n\r\n    /**@internal geoemtry */\r\n    private _lensFlareGeometry: LensFlareElementGeomtry;\r\n\r\n    /**@internal renderElement*/\r\n    private _renderElement: RenderElement;\r\n\r\n    /**@internal */\r\n    private _materials: Material;\r\n\r\n    /**@internal */\r\n    private _transform3D: Transform3D;\r\n\r\n    /**@internal */\r\n    private _lensFlareElementData: LensFlareElement;\r\n\r\n    private _instanceCount: number = 1;\r\n    /**\r\n     * @en The number of instances drawn\r\n     * @zh instance绘制的个数 \r\n     */\r\n    public get instanceCount(): number {\r\n        return this._instanceCount;\r\n    }\r\n    public set instanceCount(value: number) {\r\n        this._instanceCount = value;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Constructor method, initialize instance.\r\n     * @zh 构造方法，初始化实例\r\n     */\r\n    constructor() {\r\n        this._transform3D = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\r\n        this._renderElement = new RenderElement();\r\n        this._renderElement._renderElementOBJ.isRender = true;\r\n        this._lensFlareGeometry = new LensFlareElementGeomtry();\r\n        this._renderElement.setTransform(this._transform3D);\r\n        this._renderElement.setGeometry(this._lensFlareGeometry);\r\n        this._initMaterial();\r\n    }\r\n\r\n    /**\r\n     * init material\r\n     */\r\n    private _initMaterial() {\r\n        this._materials = new Material();\r\n        this._materials.lock = true;\r\n        this._materials.setShaderName(\"LensFlare\");\r\n        this._materials.materialRenderMode = MaterialRenderMode.RENDERMODE_ADDTIVE;\r\n        this._materials.depthTest = RenderState.DEPTHTEST_ALWAYS;\r\n        this._materials.cull = RenderState.CULL_NONE;\r\n        this._renderElement.material = this._materials;\r\n        //this._renderElement.renderSubShader = this._materials.shader.getSubShaderAt(0);\r\n        this._renderElement.subShaderIndex = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The center position of the lens flare effect.\r\n     * @zh 镜头光晕效果的中心位置。\r\n     */\r\n    set center(value: Vector2) {\r\n        this._materials.setVector2(\"u_FlareCenter\", value);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The rotation angle of the lens flare effect.\r\n     * @zh 镜头光晕效果的旋转角度。\r\n     */\r\n    set rotate(value: number) {\r\n        this._materials.setFloat(\"u_rotate\", value);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The lens flare element data.\r\n     * @zh 镜头光晕元素数据\r\n     */\r\n    get lensFlareElement(): LensFlareElement {\r\n        return this._lensFlareElementData;\r\n    }\r\n\r\n    set lensFlareElement(value: LensFlareElement) {\r\n        this._lensFlareElementData = value;\r\n        this.applyElementData();\r\n    }\r\n\r\n\r\n    /**\r\n     * @en apply element Data\r\n     * @zh 应用元素数据\r\n     */\r\n    applyElementData() {\r\n        //根据LensFlareElement更新数据\r\n        this._materials.setTexture(\"u_FlareTexture\", this._lensFlareElementData.texture);\r\n        this._materials.setColor(\"u_Tint\", this._lensFlareElementData.tint);\r\n        this._materials.setFloat(\"u_TintIntensity\", this._lensFlareElementData.intensity);\r\n        this._materials.setVector2(\"u_Postionoffset\", this._lensFlareElementData.positionOffset);\r\n        this._materials.setFloat(\"u_Angularoffset\", this._lensFlareElementData.angularOffset);\r\n        if (this._lensFlareElementData.autoRotate) {\r\n            this._materials.addDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE);\r\n        } else {\r\n            this._materials.removeDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE);\r\n        }\r\n        //其他TODO\r\n\r\n        //更新InstanceBuffer\r\n        this._lensFlareGeometry.instanceCount = 1;//TODO\r\n        // startPos、angular、scaleX、scaleY\r\n        let testFloat = new Float32Array([this._lensFlareElementData.startPosition, Utils.toAngle(this._lensFlareElementData.rotation), this._lensFlareElementData.scale.x, this._lensFlareElementData.scale.y]);//TODO        \r\n        // instanceBuffer set\r\n        this._lensFlareGeometry.instanceBuffer.setData(testFloat.buffer, 0, 0, testFloat.length * 4);//TODO\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Execute the command.\r\n     * @zh 执行命令\r\n     */\r\n    run(cmd: CommandBuffer): void {\r\n        var context = RenderContext3D._instance;\r\n        this._materials.setFloat(\"u_aspectRatio\", context.camera.viewport.height / context.camera.viewport.width);\r\n        cmd.drawRenderElement(this._renderElement);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en recover command\r\n     * @zh 回收命令\r\n     */\r\n    recover(): void {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Destroy command\r\n     * @zh 销毁命令\r\n     */\r\n    destroy(): void {\r\n        this._materials.lock = false;\r\n        this._materials.destroy();\r\n    }\r\n}","#define SHADER_NAME LENSFLARESVS\r\n//attribute vec4 a_PositionTexcoord;\r\n// x: startPosition y: rotation zw: scale\r\n// attribute vec4 a_DistanceRotationScale;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec2 rotateVector(vec2 pos, vec2 center, float angle) {\r\n    float cosAngle = cos(angle);\r\n    float sinAngle = sin(angle);\r\n    vec2 offset = pos - center;\r\n    vec2 rotatedOffset = vec2(\r\n        offset.x * cosAngle - offset.y * sinAngle,\r\n        offset.x * sinAngle + offset.y * cosAngle\r\n    );\r\n    return center + rotatedOffset;\r\n}\r\n\r\nvec2 rotateVec2(float rad,vec2 pos){\r\n    float s = sin(rad);\r\n    float c = cos(rad);\r\n    float x = pos.x*c-pos.y*s;\r\n    float y = pos.x*s+c*pos.y;\r\n    return vec2(x,y);\r\n}\r\n\r\nvec2 scaleVec2(vec2 scale,vec2 pos){\r\n    float x = scale.x * pos.x;\r\n    float y = scale.y * pos.y;\r\n    return vec2(x,y);\r\n}\r\n\r\nvec2 transVec2(vec2 trans,vec2 pos){\r\n    float x = pos.x + trans.x;\r\n    float y = pos.y + trans.y;\r\n    return vec2(x,y);\r\n}\r\n\r\n\r\nvoid main(){\r\n    vec2 center = u_FlareCenter;\r\n    vec2 deltaPos = -2.0 * center;\r\n    vec2 lenFlarePosition = vec2(a_PositionTexcoord.x, a_PositionTexcoord.y);\r\n    // aspectRadio scale\r\n    vec2 aspectRadio = vec2(u_aspectRatio, 1.0);\r\n    //缩放\r\n    vec2 scale = vec2(a_DistanceRotationScale.z, a_DistanceRotationScale.w);\r\n    lenFlarePosition = scaleVec2(scale,lenFlarePosition);\r\n    //旋转\r\n    // float rad = acos(dot(normalize(center),vec2(0.0,1.0)));\r\n    // angular offset\r\n    #ifdef LENSFLAREAUTOROTATE\r\n        lenFlarePosition = rotateVec2(u_rotate, lenFlarePosition);\r\n        float texRotate = a_DistanceRotationScale.y;\r\n        lenFlarePosition = rotateVec2(texRotate, lenFlarePosition);\r\n    #endif\r\n    float angularoffset = u_Angularoffset;\r\n    lenFlarePosition = rotateVector(lenFlarePosition, center, angularoffset);\r\n    lenFlarePosition = scaleVec2(aspectRadio,lenFlarePosition);\r\n    //平移\r\n    lenFlarePosition = center + deltaPos * a_DistanceRotationScale.x + lenFlarePosition + u_Postionoffset;\r\n    gl_Position = vec4(lenFlarePosition.x, lenFlarePosition.y, 0.0, 1.0);\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n}\r\n","/**\r\n * @en Physical Statistics Data\r\n * @zh 物理统计数据\r\n */\r\nexport enum EPhysicsStatisticsInfo {\r\n    /**\r\n     * @en Physical Event Count Enumeration\r\n     * @zh 物理事件计数枚举\r\n     */\r\n    C_PhysicsEventCount,\r\n\r\n    /**\r\n     * @en Cleanup Count Per Frame\r\n     * @zh 每帧清理个数\r\n     */\r\n    FrameClearCount,\r\n\r\n    /**\r\n     * @en Physical Dynamics Rigid Body Count Enumeration\r\n     * @zh 物理动力学刚体计数枚举\r\n     */\r\n    C_PhysicaDynamicRigidBody,\r\n    \r\n    /**\r\n     * @en Physical Static Rigid Body Count Enumeration\r\n     * @zh 物理静态刚体计数枚举\r\n     */\r\n    C_PhysicaStaticRigidBody,\r\n    /**\r\n     * @en Physical Kinematic Rigid Body Count Enumeration\r\n     * @zh 物理运动学刚体计数枚举\r\n     */\r\n    C_PhysicaKinematicRigidBody,\r\n    /**\r\n     * @en Physical Character Controller Count Enumeration\r\n     * @zh 物理角色控制器计数枚举\r\n     */\r\n    C_PhysicaCharacterController,\r\n    /**\r\n     * @en Physical Joint Count Enumeration\r\n     * @zh 物理关节计数枚举\r\n     */\r\n    C_PhysicsJoint,\r\n\r\n    /**\r\n     * @en Enumeration Count\r\n     * @zh 枚举个数\r\n     */\r\n    Count,\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\nimport { Sprite } from \"../../../display/Sprite\";\r\nimport { Context } from \"../../../renders/Context\";\r\nimport { Texture2D } from \"../../../resource/Texture2D\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Timer } from \"../../../utils/Timer\";\r\nimport { SubmitKey } from \"../../../webgl/submit/SubmitKey\";\r\nimport { Cluster } from \"../../graphics/renderPath/Cluster\";\r\nimport { PhysicsSettings } from \"../../physics/PhysicsSettings\";\r\nimport { SkyRenderer } from \"../../resource/models/SkyRenderer\";\r\nimport { TextureCube } from \"../../../resource/TextureCube\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { BaseCamera } from \"../BaseCamera\";\r\nimport { Camera } from \"../Camera\";\r\nimport { AlternateLightQueue, LightQueue } from \"../light/LightQueue\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Lightmap } from \"./Lightmap\";\r\nimport { Scene3DShaderDeclaration } from \"./Scene3DShaderDeclaration\";\r\nimport { ShadowCasterPass } from \"../../shadowMap/ShadowCasterPass\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { BlitFrameBufferCMD } from \"../render/command/BlitFrameBufferCMD\";\r\nimport { DirectionLightCom } from \"../light/DirectionLightCom\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { PointLightCom } from \"../light/PointLightCom\";\r\nimport { SpotLightCom } from \"../light/SpotLightCom\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { UnifromBufferData, UniformBufferParamsType } from \"../../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { Prefab } from \"../../../resource/HierarchyResource\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { ComponentDriver } from \"../../../components/ComponentDriver\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { SceneRenderManager } from \"./SceneRenderManager\";\r\nimport { VolumeManager } from \"../../component/Volume/VolumeManager\";\r\nimport { UI3DManager } from \"../UI3D/UI3DManager\";\r\nimport { Scene } from \"../../../display/Scene\";\r\nimport { ReflectionProbe } from \"../../component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { AmbientMode } from \"./AmbientMode\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { IPhysicsManager } from \"../../../Physics3D/interface/IPhysicsManager\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IElementComponentManager } from \"./IScenceComponentManager\";\r\nimport { ISceneNodeData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { ShaderDataType, ShaderData, ShaderDataItem } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { CommandUniformMap } from \"../../../RenderDriver/DriverDesign/RenderDevice/CommandUniformMap\";\r\nimport { RenderTexture2D } from \"../../../resource/RenderTexture2D\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\n\r\nexport enum FogMode {\r\n    Linear = 0, //Linear\r\n    EXP = 1,    // 指数\r\n    EXP2 = 2,   // 指数平方\r\n}\r\n\r\n/**\r\n * @en The Scene3D class is used to create a 3D scene.\r\n * @zh Scene3D类用于实现3D场景。\r\n */\r\nexport class Scene3D extends Sprite {\r\n    /** @internal */\r\n    private static _lightTexture: Texture2D;\r\n    /** @internal */\r\n    private static _lightPixles: Float32Array;\r\n    /** @internal */\r\n    static _shadowCasterPass: ShadowCasterPass;\r\n    /**@internal */\r\n    static physicsSettings: PhysicsSettings = new PhysicsSettings();\r\n    /**Scene3D UniformMap */\r\n    static sceneUniformMap: CommandUniformMap;\r\n    /** Scene UniformPropertyID */\r\n    /** @internal */\r\n    static FOGCOLOR: number;\r\n    /** @internal */\r\n    static FOGPARAMS: number;\r\n    /** @internal */\r\n    static DIRECTIONLIGHTCOUNT: number;\r\n    /** @internal */\r\n    static LIGHTBUFFER: number;\r\n    /** @internal */\r\n    static CLUSTERBUFFER: number;\r\n    /** @internal */\r\n    static SUNLIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static SUNLIGHTDIRCOLOR: number;\r\n\r\n    /** @internal */\r\n    static AMBIENTCOLOR: number;\r\n\r\n    /** @internal */\r\n    static TIME: number;\r\n    /**@internal */\r\n    static GIRotate: number;\r\n    /** @internal */\r\n    static sceneID: number;\r\n\r\n    /**@internal scene uniform block */\r\n    static SCENEUNIFORMBLOCK: number;\r\n    //------------------legacy lighting-------------------------------\r\n    /** @internal */\r\n    static LIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static LIGHTDIRCOLOR: number;\r\n    /** @internal */\r\n    static LIGHTMODE: number;\r\n    /** @internal */\r\n    static POINTLIGHTPOS: number;\r\n    /** @internal */\r\n    static POINTLIGHTRANGE: number;\r\n    /** @internal */\r\n    static POINTLIGHTCOLOR: number;\r\n    /** @internal */\r\n    static POINTLIGHTMODE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTPOS: number;\r\n    /** @internal */\r\n    static SPOTLIGHTDIRECTION: number;\r\n    /** @internal */\r\n    static SPOTLIGHTSPOTANGLE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTRANGE: number;\r\n    /** @internal */\r\n    static SPOTLIGHTCOLOR: number;\r\n    /** @internal */\r\n    static SPOTLIGHTMODE: number;\r\n    //------------------legacy lighting-------------------------------\r\n    /**@internal */\r\n    static mainCavansViewPort: Viewport = new Viewport(0, 0, 1, 1);\r\n    /**\r\n     * @en Scene component management table\r\n     * @zh 场景组件管理表 \r\n     */\r\n    static componentManagerMap: Map<string, any> = new Map();\r\n\r\n    /**\r\n     * @en The update mark of the scene.\r\n     * @zh 场景更新标记。\r\n     */\r\n    static get _updateMark(): number {\r\n        return RenderContext3D._instance._contextOBJ.cameraUpdateMask;\r\n    }\r\n    /** @internal 场景更新标记 */\r\n    static set _updateMark(value: number) {\r\n        RenderContext3D._instance._contextOBJ.cameraUpdateMask = value;\r\n    }\r\n\r\n    /**\r\n     * @en Registers a manager within the scene.\r\n     * @param type The type of the manager to register.\r\n     * @param cla The instance of the manager.\r\n     * @zh 注册场景内的管理器。\r\n     * @param type 要注册的管理器类型。\r\n     * @param cla 管理器实例。\r\n     */\r\n    static regManager(type: string, cla: any) {\r\n        Scene3D.componentManagerMap.set(type, cla);\r\n    }\r\n\r\n    /**\r\n     * @en init shaderData\r\n     * @zh 着色器数据初始化\r\n     */\r\n    static shaderValueInit() {\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG = Shader3D.getDefineByName(\"FOG\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR = Shader3D.getDefineByName(\"FOG_LINEAR\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP = Shader3D.getDefineByName(\"FOG_EXP\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2 = Shader3D.getDefineByName(\"FOG_EXP2\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT = Shader3D.getDefineByName(\"DIRECTIONLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT = Shader3D.getDefineByName(\"POINTLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT = Shader3D.getDefineByName(\"SPOTLIGHT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW = Shader3D.getDefineByName(\"SHADOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE = Shader3D.getDefineByName(\"SHADOW_CASCADE\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_LOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SOFT_SHADOW_HIGH\");\r\n\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT = Shader3D.getDefineByName(\"SHADOW_SPOT\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_LOW\");\r\n        Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH = Shader3D.getDefineByName(\"SHADOW_SPOT_SOFT_SHADOW_HIGH\");\r\n\r\n        Scene3D.FOGCOLOR = Shader3D.propertyNameToID(\"u_FogColor\");\r\n        Scene3D.FOGPARAMS = Shader3D.propertyNameToID(\"u_FogParams\");//x start,y end,z Density\r\n        Scene3D.DIRECTIONLIGHTCOUNT = Shader3D.propertyNameToID(\"u_DirationLightCount\");\r\n        Scene3D.LIGHTBUFFER = Shader3D.propertyNameToID(\"u_LightBuffer\");\r\n        Scene3D.CLUSTERBUFFER = Shader3D.propertyNameToID(\"u_LightClusterBuffer\");\r\n        Scene3D.TIME = Shader3D.propertyNameToID(\"u_Time\");\r\n        Scene3D.GIRotate = Shader3D.propertyNameToID(\"u_GIRotate\");\r\n        Scene3D.SCENEUNIFORMBLOCK = Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SCENE);\r\n        let sceneUniformMap: CommandUniformMap = Scene3D.sceneUniformMap = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Scene3D\");\r\n        if (Config3D._uniformBlock) {\r\n\r\n            sceneUniformMap.addShaderBlockUniform(Scene3D.SCENEUNIFORMBLOCK, UniformBufferObject.UBONAME_SCENE, [\r\n                {\r\n                    id: Scene3D.TIME,\r\n                    propertyName: \"u_Time\",\r\n                    uniformtype: ShaderDataType.Float\r\n                },\r\n                {\r\n                    id: Scene3D.FOGPARAMS,\r\n                    propertyName: \"u_FogParams\",\r\n                    uniformtype: ShaderDataType.Vector4\r\n                },\r\n                {\r\n                    id: Scene3D.FOGCOLOR,\r\n                    propertyName: \"u_FogColor\",\r\n                    uniformtype: ShaderDataType.Vector4\r\n                }\r\n            ])\r\n        } else {\r\n            sceneUniformMap.addShaderUniform(Scene3D.FOGCOLOR, \"u_FogColor\", ShaderDataType.Color);\r\n            sceneUniformMap.addShaderUniform(Scene3D.FOGPARAMS, \"u_FogParams\", ShaderDataType.Vector4);\r\n            sceneUniformMap.addShaderUniform(Scene3D.TIME, \"u_Time\", ShaderDataType.Float);\r\n        }\r\n\r\n        sceneUniformMap.addShaderUniform(Scene3D.DIRECTIONLIGHTCOUNT, \"u_DirationLightCount\", ShaderDataType.Int);\r\n        sceneUniformMap.addShaderUniform(Scene3D.LIGHTBUFFER, \"u_LightBuffer\", ShaderDataType.Texture2D);\r\n        sceneUniformMap.addShaderUniform(Scene3D.CLUSTERBUFFER, \"u_LightClusterBuffer\", ShaderDataType.Texture2D);\r\n\r\n        sceneUniformMap.addShaderUniform(Scene3D.GIRotate, \"u_GIRotate\", ShaderDataType.Float);\r\n    }\r\n\r\n    /**\r\n     * @en Initializes legacy lighting values for the ShaderData. \r\n     * This function sets up the uniform mappings between the shader and the scene for various types of lights, \r\n     * including directional lights, point lights, and spotlights.\r\n     * @zh 初始化 ShaderData 的传统光照值。\r\n     * 此函数为各种类型的灯光（包括方向光、点光源和聚光灯）设置着色器与场景之间的统一映射。\r\n     */\r\n    static legacyLightingValueInit() {\r\n        Scene3D.LIGHTDIRECTION = Shader3D.propertyNameToID(\"u_DirLightDirection\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRECTION, \"u_DirLightDirection\", ShaderDataType.Vector3);\r\n        Scene3D.LIGHTDIRCOLOR = Shader3D.propertyNameToID(\"u_DirLightColor\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRCOLOR, \"u_DirLightColor\", ShaderDataType.Vector3);\r\n        Scene3D.LIGHTMODE = Shader3D.propertyNameToID(\"u_DirLightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTMODE, \"u_DirLightMode\", ShaderDataType.Int);\r\n\r\n        Scene3D.POINTLIGHTPOS = Shader3D.propertyNameToID(\"u_PointLightPos\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTPOS, \"u_PointLightPos\", ShaderDataType.Vector3);\r\n        Scene3D.POINTLIGHTRANGE = Shader3D.propertyNameToID(\"u_PointLightRange\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTRANGE, \"u_PointLightRange\", ShaderDataType.Float);\r\n        Scene3D.POINTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_PointLightColor\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTCOLOR, \"u_PointLightColor\", ShaderDataType.Vector3);\r\n        Scene3D.POINTLIGHTMODE = Shader3D.propertyNameToID(\"u_PointLightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTMODE, \"u_PointLightMode\", ShaderDataType.Int);\r\n\r\n        Scene3D.SPOTLIGHTPOS = Shader3D.propertyNameToID(\"u_SpotLightPos\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTPOS, \"u_SpotLightPos\", ShaderDataType.Vector3);\r\n        Scene3D.SPOTLIGHTDIRECTION = Shader3D.propertyNameToID(\"u_SpotLightDirection\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTDIRECTION, \"u_SpotLightDirection\", ShaderDataType.Vector3);\r\n        Scene3D.SPOTLIGHTSPOTANGLE = Shader3D.propertyNameToID(\"u_SpotLightSpot\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTSPOTANGLE, \"u_SpotLightSpot\", ShaderDataType.Float);\r\n        Scene3D.SPOTLIGHTRANGE = Shader3D.propertyNameToID(\"u_SpotLightRange\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTRANGE, \"u_SpotLightRange\", ShaderDataType.Float);\r\n        Scene3D.SPOTLIGHTCOLOR = Shader3D.propertyNameToID(\"u_SpotLightColor\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTCOLOR, \"u_SpotLightColor\", ShaderDataType.Vector3);\r\n        Scene3D.SPOTLIGHTMODE = Shader3D.propertyNameToID(\"u_SpotLightMode\");\r\n        Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTMODE, \"u_SpotLightMode\", ShaderDataType.Int);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en create Scene UniformBuffer\r\n     * @returns New Scene UniformBuffer\r\n     * @zh 创建场景统一缓冲区\r\n     * @returns 新的场景统一缓冲区\r\n     */\r\n    static createSceneUniformBlock(): UnifromBufferData {\r\n        let uniformpara: Map<string, UniformBufferParamsType> = new Map<string, UniformBufferParamsType>();\r\n        uniformpara.set(\"u_Time\", UniformBufferParamsType.Number);\r\n        uniformpara.set(\"u_FogParams\", UniformBufferParamsType.Vector4);\r\n        uniformpara.set(\"u_FogColor\", UniformBufferParamsType.Vector4);\r\n        let uniformMap = new Map<number, UniformBufferParamsType>();\r\n        uniformpara.forEach((value, key) => {\r\n            uniformMap.set(Shader3D.propertyNameToID(key), value);\r\n        });\r\n        return new UnifromBufferData(uniformMap);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        var multiLighting: boolean = Config3D._multiLighting;\r\n        if (multiLighting) {\r\n            const width = 4;\r\n            var maxLightCount: number = Config3D.maxLightCount;\r\n            var clusterSlices: Vector3 = Config3D.lightClusterCount;\r\n            Cluster.instance = new Cluster(clusterSlices.x, clusterSlices.y, clusterSlices.z, Math.min(Config3D.maxLightCount, Config3D._maxAreaLightCountPerClusterAverage));\r\n            Scene3D._lightTexture = Utils3D._createFloatTextureBuffer(width, maxLightCount);\r\n            Scene3D._lightTexture.lock = true;\r\n            Scene3D._lightPixles = new Float32Array(maxLightCount * width * 4);\r\n        }\r\n        Scene3D.shaderValueInit();\r\n        var configShaderValue = Shader3D._configDefineValues;\r\n        if (!Config3D._multiLighting) {\r\n            (configShaderValue.add(Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING));\r\n            Scene3D.legacyLightingValueInit()\r\n        }\r\n        Scene3D._shadowCasterPass = new ShadowCasterPass();\r\n        //UniformBuffer\r\n        if (Config3D._uniformBlock)\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_ENUNIFORMBLOCK);\r\n\r\n        let supportFloatTex = LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        if (supportFloatTex) {\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_FLOATTEXTURE);\r\n        }\r\n        let supportFloatLinearFiltering = LayaGL.renderEngine.getCapable(RenderCapable.Texture_FloatLinearFiltering);\r\n        if (supportFloatLinearFiltering) {\r\n            configShaderValue.add(Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Loads the scene, note: not cached.\r\n     * @param url The template address.\r\n     * @param complete The completion callback.\r\n     * @zh 加载场景,注意:不缓存。\r\n     * @param url 模板地址。\r\n     * @param complete 完成回调。\r\n     */\r\n    static load(url: string, complete: Handler): void {\r\n        ILaya.loader.load(url).then((res: Prefab) => {\r\n            if (complete) {\r\n                let ret: Scene3D;\r\n                if (res) {\r\n                    let scene = res.create();\r\n                    if (scene instanceof Scene)\r\n                        ret = scene._scene3D;\r\n                    else\r\n                        ret = <Scene3D>scene;\r\n                }\r\n                complete.runWith([ret]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**@internal ide配置文件使用 */\r\n    _reflectionsSource: number = 0;\r\n    /**@internal ide配置文件使用 */\r\n    _reflectionsResolution: string = \"256\";\r\n    /**@internal ide配置文件使用 */\r\n    _reflectionsIblSamples = 128;\r\n\r\n\r\n\r\n    /** @internal */\r\n    private _group: string;\r\n    /** @internal */\r\n    public _lightCount: number = 0;\r\n    /** @internal */\r\n    public _pointLights: LightQueue<PointLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _spotLights: LightQueue<SpotLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _directionLights: LightQueue<DirectionLightCom> = new LightQueue();\r\n    /** @internal */\r\n    public _alternateLights: AlternateLightQueue = new AlternateLightQueue();\r\n    /** @internal */\r\n    private _lightmaps: Lightmap[] = [];\r\n    /** @internal */\r\n    private _skyRenderer: SkyRenderer = new SkyRenderer();\r\n    /** @internal */\r\n    private _enableFog: boolean;\r\n    /** @internal */\r\n    private _timer: Timer;\r\n    /** @internal */\r\n    private _time: number = 0;\r\n    /** @internal */\r\n    private _fogParams: Vector4;\r\n    /** @internal */\r\n    private _fogMode: FogMode;\r\n    /**@internal */\r\n    private _sceneReflectionProb: ReflectionProbe;\r\n    /**@internal */\r\n    private _physicsStepTime: number = 0;\r\n    /**@internal */\r\n    _sunColor: Color = new Color(1.0, 1.0, 1.0);\r\n    /**@interanl */\r\n    _sundir: Vector3 = new Vector3();\r\n    /**@internal*/\r\n    _id = Scene3D.sceneID++;\r\n    /** @internal */\r\n    _mainDirectionLight: DirectionLightCom;\r\n    /** @internal */\r\n    _mainSpotLight: SpotLightCom;\r\n    /** @internal */\r\n    _mainPointLight: PointLightCom;//TODO\r\n    /** @internal */\r\n    _physicsManager: IPhysicsManager;\r\n    /** @internal 只读,不允许修改。*/\r\n    _collsionTestList: number[] = [];\r\n    /** @internal */\r\n    _shaderValues: ShaderData;\r\n    /** @interanl */\r\n    _sceneUniformData: UnifromBufferData;\r\n    /** @internal */\r\n    _sceneUniformObj: UniformBufferObject;\r\n    /** @internal */\r\n    _key: SubmitKey = new SubmitKey();\r\n    /** @internal */\r\n    _cameraPool: BaseCamera[] = [];\r\n\r\n    /** @internal */\r\n    _volumeManager: VolumeManager;\r\n    /**@internal */\r\n    _UI3DManager: UI3DManager = new UI3DManager();\r\n    /**@internal */\r\n    _sceneRenderManager: SceneRenderManager;\r\n    /** \r\n     * @en The mask layer to which the sprite belongs is currently being created.\r\n     * @zh 当前创建精灵所属遮罩层。\r\n     */\r\n    currentCreationLayer: number = Math.pow(2, 0);\r\n    /** \r\n     * @en Whether to enable lighting.\r\n     * @zh 是否启用灯光。\r\n     */\r\n    enableLight: boolean = true;\r\n    /**lightShadowMap 更新频率 @internal */\r\n    _ShadowMapupdateFrequency: number = 1;\r\n    /** @internal */\r\n    _nativeObj: any;\r\n\r\n    /** @internal 由IDE负责调用渲染 */\r\n    _renderByEditor: boolean;\r\n    /** @internal */\r\n    _scene2D: Scene;\r\n    /** @internal */\r\n    _sceneModuleData: ISceneNodeData;\r\n    /** @internal */\r\n    componentElementMap: Map<string, IElementComponentManager> = new Map();\r\n\r\n    /** @internal */\r\n    private _componentElementDatasMap: any = {};\r\n    /**\r\n     * @en The 2D scene to which the Scene3D belongs, used when the scene is loaded by the IDE editor.\r\n     * @zh Scene3D所属的2D场景，使用IDE编辑的场景载入后具有此属性。\r\n     */\r\n    get scene2D(): Scene {\r\n        return this._scene2D;\r\n    }\r\n\r\n    /**\r\n     * @en The SceneRenderableManager.\r\n     * @zh 场景渲染管理器。\r\n     */\r\n    get sceneRenderableManager(): SceneRenderManager {\r\n        return this._sceneRenderManager;\r\n    }\r\n    set sceneRenderableManager(manager: SceneRenderManager) {\r\n        manager.list = this._sceneRenderManager.list;\r\n        this._sceneRenderManager = manager;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Whether fog is enabled.\r\n     * @zh 是否启用雾化效果。\r\n     */\r\n    get enableFog(): boolean {\r\n        return this._enableFog;\r\n    }\r\n\r\n    set enableFog(value: boolean) {\r\n        if (this._enableFog !== value) {\r\n            this._enableFog = value;\r\n            if (value) {\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n            } else\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The fog mode.\r\n     * @zh 雾化模式。\r\n     */\r\n    get fogMode(): FogMode {\r\n        return this._fogMode;\r\n    }\r\n\r\n    set fogMode(value: FogMode) {\r\n        this._fogMode = value;\r\n        switch (value) {\r\n            case FogMode.Linear:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                break;\r\n            case FogMode.EXP:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                break;\r\n            case FogMode.EXP2:\r\n                this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR);\r\n                this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The fog color.\r\n     * @zh 雾化颜色。\r\n     */\r\n    get fogColor(): Color {\r\n        return this._shaderValues.getColor(Scene3D.FOGCOLOR);\r\n    }\r\n\r\n    set fogColor(value: Color) {\r\n        this._shaderValues.setColor(Scene3D.FOGCOLOR, value);\r\n    }\r\n\r\n    /**\r\n     * @en The fog start position.\r\n     * @zh 雾化起始位置。\r\n     */\r\n    get fogStart(): number {\r\n        return this._fogParams.x;\r\n\r\n    }\r\n\r\n    set fogStart(value: number) {\r\n        this._fogParams.x = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**\r\n     * @en The fog end range.\r\n     * @zh 雾化结束范围。\r\n     */\r\n    get fogEnd(): number {\r\n        return this._fogParams.y;\r\n    }\r\n\r\n    set fogEnd(value: number) {\r\n        this._fogParams.y = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The fog density.\r\n     * @zh 雾化密度。\r\n     */\r\n    get fogDensity(): number {\r\n        return this._fogParams.z\r\n    }\r\n\r\n    set fogDensity(value: number) {\r\n        this._fogParams.z = value;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The fog effect parameters.\r\n     * @zh 雾效参数。\r\n     */\r\n    get fogParams(): Vector4 {\r\n        return this._shaderValues.getVector(Scene3D.FOGPARAMS);\r\n    }\r\n\r\n    set fogParams(value: Vector4) {\r\n        this._shaderValues.setVector(Scene3D.FOGPARAMS, value);\r\n    }\r\n\r\n    /**\r\n     * @en The GI rotation value. The value should be between 0 and 2PI.\r\n     * @zh 全局光照旋转值。 值应在 0 到 2PI 之间。\r\n     */\r\n    get GIRotate() {\r\n        return this._shaderValues.getNumber(Scene3D.GIRotate);\r\n    }\r\n    set GIRotate(value: number) {\r\n        this._shaderValues.setNumber(Scene3D.GIRotate, value);\r\n    }\r\n\r\n    /**\r\n     * @en The ambient light mode.\r\n     * If the value is AmbientMode.SolidColor, the ambientColor is generally used as the ambient light source. If the value is AmbientMode.SphericalHarmonics, the ambientSphericalHarmonics is generally used as the ambient light source.\r\n     * @zh 环境光模式。\r\n     * 如果值为 AmbientMode.SolidColor，则通常使用 ambientColor 作为环境光源。如果值为 AmbientMode.SphericalHarmonics，则通常使用 ambientSphericalHarmonics 作为环境光源。\r\n     */\r\n    get ambientMode(): AmbientMode {\r\n        return this._sceneReflectionProb.ambientMode;\r\n    }\r\n\r\n    set ambientMode(value: AmbientMode) {\r\n        this._sceneReflectionProb.ambientMode = value;\r\n    }\r\n\r\n    /**\r\n     * @en The scene reflection probe.\r\n     * @zh 场景反射探针。\r\n     */\r\n    get sceneReflectionProb(): ReflectionProbe {\r\n        return this._sceneReflectionProb;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The scene reflection probe.\r\n     * @zh 场景反射探针。\r\n     */\r\n    set sceneReflectionProb(value: ReflectionProbe) {\r\n        this._sceneReflectionProb = value;\r\n    }\r\n\r\n    /**\r\n     * @en The fixed color ambient light.\r\n     * @zh 固定颜色环境光。\r\n     */\r\n    get ambientColor(): Color {\r\n        return this._sceneReflectionProb.ambientColor;\r\n    }\r\n\r\n    set ambientColor(value: Color) {\r\n        this._sceneReflectionProb.ambientColor = value;\r\n    }\r\n\r\n    /**\r\n     * @en The ambient light intensity.\r\n     * @zh 环境漫反射的强度。\r\n     */\r\n    get ambientIntensity(): number {\r\n        return this._sceneReflectionProb.ambientIntensity;\r\n    }\r\n\r\n    set ambientIntensity(value: number) {\r\n        this._sceneReflectionProb.ambientIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * @en The reflection probe intensity.\r\n     * @zh 反射探针强度。\r\n     */\r\n    get reflectionIntensity(): number {\r\n        return this._sceneReflectionProb.reflectionIntensity;\r\n    }\r\n\r\n    set reflectionIntensity(value: number) {\r\n        this._sceneReflectionProb.reflectionIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * @en The ambient spherical harmonics coefficients.\r\n     * @zh 环境光球谐系数。\r\n     */\r\n    public get ambientSH(): Float32Array {\r\n        return this._sceneReflectionProb.ambientSH;\r\n    }\r\n    public set ambientSH(value: Float32Array) {\r\n        this._sceneReflectionProb.ambientSH = value;\r\n    }\r\n\r\n    /**\r\n     * @en The IBL texture .\r\n     * @zh IBL纹理。\r\n     */\r\n    public get iblTex(): TextureCube {\r\n        return this._sceneReflectionProb.iblTex;\r\n\r\n    }\r\n    public set iblTex(value: TextureCube) {\r\n        this._sceneReflectionProb.iblTex = value\r\n    }\r\n\r\n    /**\r\n     * @en Checks if the ambient IBL texture is using RGBD compression.\r\n     * @zh 检查环境光贴图是否使用 RGBD 压缩。\r\n     */\r\n    public get iblTexRGBD(): boolean {\r\n        return this._sceneReflectionProb.iblTexRGBD;\r\n    }\r\n    public set iblTexRGBD(value: boolean) {\r\n        this._sceneReflectionProb.iblTexRGBD = value;\r\n    }\r\n\r\n    /**\r\n     * @en The sky renderer.\r\n     * @zh 天空渲染器。\r\n     */\r\n    get skyRenderer(): SkyRenderer {\r\n        return this._skyRenderer;\r\n    }\r\n\r\n    /**\r\n     * @en The physics simulation.\r\n     * @zh 物理模拟器。\r\n     */\r\n    get physicsSimulation(): IPhysicsManager {\r\n        return this._physicsManager;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @en The scene timer.\r\n     * @zh 场景时钟。\r\n     */\r\n    get timer(): Timer {\r\n        return this._timer;\r\n    }\r\n\r\n    set timer(value: Timer) {\r\n        this._timer = value;\r\n    }\r\n\r\n    /**\r\n     * @en The array of lightmaps. The returned value is a shallow copy of the array.\r\n     * @zh 光照贴图数组。返回的是一个浅拷贝数组。\r\n     */\r\n    get lightmaps(): Lightmap[] {\r\n        return this._lightmaps.slice();\r\n    }\r\n\r\n    set lightmaps(value: Lightmap[]) {\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        if (maps) {\r\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n                var map: Lightmap = maps[i];\r\n                map.lightmapColor && map.lightmapColor._removeReference();\r\n                map.lightmapDirection && map.lightmapDirection._removeReference();\r\n            }\r\n        }\r\n        if (value) {\r\n            var count: number = value.length;\r\n            maps.length = count;\r\n            for (i = 0; i < count; i++) {\r\n                var map: Lightmap = value[i];\r\n                map.lightmapColor && map.lightmapColor._addReference();\r\n                map.lightmapDirection && map.lightmapDirection._addReference();\r\n                maps[i] = map;\r\n            }\r\n        } else {\r\n            maps.length = 0;\r\n        }\r\n        this._sceneModuleData.lightmapDirtyFlag = Scene3D._updateMark\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The shadow map update frequency. Increasing the frequency can optimize performance if there are no self-shadows.\r\n     * @zh 阴影图更新频率。如果没有自阴影，增加频率可以优化性能。\r\n     */\r\n    get shadowMapFrequency() {\r\n        return this._ShadowMapupdateFrequency;\r\n    }\r\n\r\n    set shadowMapFrequency(value: number) {\r\n        this._ShadowMapupdateFrequency = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of the Scene3D class.\r\n     * @zh 创建一个Scene3D的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this._is3D = true;\r\n        this._componentDriver = new ComponentDriver();\r\n        this._timer = ILaya.timer;\r\n        this._sceneModuleData = Laya3DRender.Render3DModuleDataFactory.createSceneModuleData();\r\n        if (LayaEnv.isConch && (window as any).conchConfig.getGraphicsAPI() != 2) {\r\n            this._nativeObj = new (window as any).conchSubmitScene3D(this.renderSubmit.bind(this));\r\n        }\r\n        if (Laya3D.enablePhysics)\r\n            this._physicsManager = Laya3D.PhysicsCreateUtil.createPhysicsManger(Scene3D.physicsSettings);\r\n\r\n        this._shaderValues = LayaGL.renderDeviceFactory.createShaderData(null);\r\n        this._shaderValues.addDefines(Shader3D._configDefineValues);\r\n        if (Config3D._uniformBlock) {\r\n            //SceneUniformBlock\r\n            this._sceneUniformObj = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_SCENE, 0);\r\n            this._sceneUniformData = Scene3D.createSceneUniformBlock();\r\n            if (!this._sceneUniformObj) {\r\n                this._sceneUniformObj = UniformBufferObject.create(UniformBufferObject.UBONAME_SCENE, BufferUsage.Dynamic, this._sceneUniformData.getbyteLength(), true);\r\n            }\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SCENE, this._sceneUniformObj, this._sceneUniformData);\r\n            this._shaderValues.setUniformBuffer(Scene3D.SCENEUNIFORMBLOCK, this._sceneUniformObj);\r\n            //ShadowUniformBlock\r\n            //Scene3D._shadowCasterPass\r\n            this._shaderValues._addCheckUBO(UniformBufferObject.UBONAME_SHADOW, Scene3D._shadowCasterPass._castDepthBufferOBJ, Scene3D._shadowCasterPass._castDepthBufferData);\r\n            this._shaderValues.setUniformBuffer(Shader3D.propertyNameToID(UniformBufferObject.UBONAME_SHADOW), Scene3D._shadowCasterPass._castDepthBufferOBJ);\r\n        }\r\n        this._fogParams = new Vector4(300, 1000, 0.01, 0);\r\n        this.enableFog = false;\r\n        this.fogStart = 300;\r\n        this.fogEnd = 1000;\r\n        this.fogDensity = 0.01;\r\n        this.fogColor = new Color(0.7, 0.7, 0.7);\r\n        this.fogMode = FogMode.Linear;\r\n        this.GIRotate = 0;\r\n\r\n        this._scene = this;\r\n        this._sceneRenderManager = new SceneRenderManager();\r\n\r\n        if (Config3D.debugFrustumCulling) {\r\n        }\r\n\r\n        this._volumeManager = new VolumeManager();\r\n        this._UI3DManager = new UI3DManager();\r\n        this.sceneReflectionProb = this._volumeManager.reflectionProbeManager.sceneReflectionProbe;\r\n\r\n        this._sceneReflectionProb.reflectionIntensity = 1.0;\r\n        this.ambientColor = new Color(0.212, 0.227, 0.259);\r\n\r\n        Scene3D.componentManagerMap.forEach((val, key) => {\r\n            let cla: any = val;\r\n            this.componentElementMap.set(key, new cla());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en The component element data map.\r\n     * @zh 组件元素数据映射表。\r\n     */\r\n    get componentElementDatasMap(): any {\r\n        return this._componentElementDatasMap;\r\n    }\r\n\r\n    /** @internal */\r\n    set componentElementDatasMap(value: any) {\r\n        this._componentElementDatasMap = value;\r\n        this.componentElementMap.forEach((value, key) => {\r\n            value.Init(this._componentElementDatasMap[key])\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _update(): void {\r\n        var delta: number = this.timer._delta / 1000;\r\n        this._time += delta;\r\n        this._shaderValues.setNumber(Scene3D.TIME, this._time);\r\n        //Physics\r\n        if (LayaEnv.isPlaying) {\r\n            this._physicsStepTime += delta;\r\n            if (this._physicsStepTime > Scene3D.physicsSettings.fixedTimeStep) {\r\n\r\n                let physicsManager = this._physicsManager;\r\n                if (Laya3D.enablePhysics && Stat.enablePhysicsUpdate) {\r\n                    physicsManager.update(this._physicsStepTime);\r\n                }\r\n                this._physicsStepTime = 0;\r\n            }\r\n        }\r\n        if (this._volumeManager.needreCaculateAllRenderObjects())\r\n            this._volumeManager.reCaculateAllRenderObjects(this._sceneRenderManager.list);\r\n        else\r\n            this._volumeManager.handleMotionlist();\r\n\r\n        this.componentElementMap.forEach((value) => {\r\n            value.update(delta);\r\n        });\r\n        this._componentDriver.callStart();\r\n        this._componentDriver.callUpdate();\r\n\r\n        this._componentDriver.callLateUpdate();\r\n        this._componentDriver.callDestroy();\r\n\r\n        //this._sceneRenderManager.updateMotionObjects();\r\n        this._sceneRenderManager.renderUpdate();\r\n        this.skyRenderer.renderUpdate(RenderContext3D._instance);\r\n        if (!this._renderByEditor)\r\n            this._UI3DManager.update();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _binarySearchIndexInCameraPool(camera: BaseCamera): number {\r\n        var start: number = 0;\r\n        var end: number = this._cameraPool.length - 1;\r\n        var mid: number;\r\n        while (start <= end) {\r\n            mid = Math.floor((start + end) / 2);\r\n            var midValue: number = this._cameraPool[mid]._renderingOrder;\r\n            if (midValue == camera._renderingOrder)\r\n                return mid;\r\n            else if (midValue > camera._renderingOrder)\r\n                end = mid - 1;\r\n            else\r\n                start = mid + 1;\r\n        }\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getGroup(): string {\r\n        return this._group;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setGroup(value: string): void {\r\n        this._group = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onActive(): void {\r\n        super._onActive();\r\n        ILaya.stage._scene3Ds.push(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     * @override\r\n     */\r\n    protected _onInActive(): void {\r\n        super._onInActive();\r\n        var scenes: any[] = ILaya.stage._scene3Ds;\r\n        scenes.splice(scenes.indexOf(this), 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _prepareSceneToRender(): void {\r\n        var shaderValues: ShaderData = this._shaderValues;\r\n        var multiLighting: boolean = Config3D._multiLighting && Stat.enableMulLight;\r\n        if (multiLighting) {\r\n            var ligTex: Texture2D = Scene3D._lightTexture;\r\n            var ligPix: Float32Array = Scene3D._lightPixles;\r\n            const pixelWidth: number = ligTex.width;\r\n            const floatWidth: number = pixelWidth * 4;\r\n            var curCount: number = 0;\r\n            var dirCount: number = Stat.enableLight ? this._directionLights._length : 0;\r\n            var dirElements: DirectionLightCom[] = this._directionLights._elements;\r\n            if (dirCount > 0) {\r\n                var sunLightIndex: number = this._directionLights.getBrightestLight();//get the brightest light as sun\r\n                this._mainDirectionLight = dirElements[sunLightIndex];\r\n                this._directionLights.normalLightOrdering(sunLightIndex);\r\n                for (var i: number = 0; i < dirCount; i++, curCount++) {\r\n                    var dirLight: DirectionLightCom = dirElements[i];\r\n                    var dir: Vector3 = dirLight.direction;\r\n                    var intCor: Vector3 = dirLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(dirLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(dirLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(dirLight.color.b);\r\n                    Vector3.scale(intCor, dirLight._intensity, intCor);\r\n                    (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\r\n                    Vector3.normalize(dir, dir);//矩阵有缩放时需要归一化\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = dirLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                    ligPix[off + 4] = dir.x;\r\n                    ligPix[off + 5] = dir.y;\r\n                    ligPix[off + 6] = dir.z;\r\n                    // if (i == 0) {\r\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, intCor);\r\n                    // \tthis._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dir);\r\n                    // }\r\n                    if (i == 0) {\r\n                        this._sunColor = dirLight.color;\r\n                        this._sundir = dir;\r\n                    }\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n                this._mainDirectionLight = null;\r\n            }\r\n\r\n            var poiCount: number = Stat.enableLight ? this._pointLights._length : 0;\r\n            if (poiCount > 0) {\r\n                var poiElements: PointLightCom[] = this._pointLights._elements;\r\n                var mainPointLightIndex: number = this._pointLights.getBrightestLight();\r\n                this._mainPointLight = poiElements[mainPointLightIndex];\r\n                this._pointLights.normalLightOrdering(mainPointLightIndex);\r\n                for (var i: number = 0; i < poiCount; i++, curCount++) {\r\n                    var poiLight: PointLightCom = poiElements[i];\r\n                    var pos: Vector3 = (poiLight.owner as Sprite3D).transform.position;\r\n                    var intCor: Vector3 = poiLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(poiLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(poiLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(poiLight.color.b);\r\n                    Vector3.scale(intCor, poiLight._intensity, intCor);\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = poiLight.range;\r\n                    ligPix[off + 4] = pos.x;\r\n                    ligPix[off + 5] = pos.y;\r\n                    ligPix[off + 6] = pos.z;\r\n                    ligPix[off + 7] = poiLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n                this._mainPointLight = null;\r\n            }\r\n\r\n            var spoCount: number = Stat.enableLight ? this._spotLights._length : 0;\r\n            if (spoCount > 0) {\r\n                var spoElements: SpotLightCom[] = this._spotLights._elements;\r\n                var mainSpotLightIndex: number = this._spotLights.getBrightestLight();\r\n                this._mainSpotLight = spoElements[mainSpotLightIndex];\r\n                this._spotLights.normalLightOrdering(mainSpotLightIndex)\r\n                for (var i: number = 0; i < spoCount; i++, curCount++) {\r\n                    var spoLight: SpotLightCom = spoElements[i];\r\n                    var dir: Vector3 = spoLight.direction;\r\n                    var pos: Vector3 = (spoLight.owner as Sprite3D).transform.position;\r\n                    var intCor: Vector3 = spoLight._intensityColor;\r\n                    var off: number = floatWidth * curCount;\r\n                    intCor.x = Color.gammaToLinearSpace(spoLight.color.r);\r\n                    intCor.y = Color.gammaToLinearSpace(spoLight.color.g);\r\n                    intCor.z = Color.gammaToLinearSpace(spoLight.color.b);\r\n                    Vector3.scale(intCor, spoLight._intensity, intCor);\r\n                    (spoLight.owner as Sprite3D).transform.worldMatrix.getForward(dir);\r\n                    Vector3.normalize(dir, dir);\r\n                    ligPix[off] = intCor.x;\r\n                    ligPix[off + 1] = intCor.y;\r\n                    ligPix[off + 2] = intCor.z;\r\n                    ligPix[off + 3] = spoLight.range;\r\n                    ligPix[off + 4] = pos.x;\r\n                    ligPix[off + 5] = pos.y;\r\n                    ligPix[off + 6] = pos.z;\r\n                    ligPix[off + 7] = spoLight.spotAngle * Math.PI / 180;\r\n                    ligPix[off + 8] = dir.x;\r\n                    ligPix[off + 9] = dir.y;\r\n                    ligPix[off + 10] = dir.z;\r\n                    ligPix[off + 11] = spoLight._lightmapBakedType;//0: MIX  1:REALTIME\r\n                }\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n                this._mainSpotLight = null;\r\n            }\r\n\r\n            (curCount > 0) && (ligTex.setSubPixelsData(0, 0, pixelWidth, curCount, ligPix, 0, false, false, false));\r\n            shaderValues.setTexture(Scene3D.LIGHTBUFFER, ligTex);\r\n            shaderValues.setInt(Scene3D.DIRECTIONLIGHTCOUNT, this._directionLights._length);\r\n            shaderValues.setTexture(Scene3D.CLUSTERBUFFER, Cluster.instance._clusterTexture);\r\n        }\r\n        else {\r\n            if (!Scene3D.LIGHTDIRECTION)//需要更新一下\r\n                Scene3D.legacyLightingValueInit();\r\n            if (this._directionLights._length > 0 && Stat.enableLight) {\r\n                var dirLight: DirectionLightCom = this._directionLights._elements[0];\r\n                this._mainDirectionLight = dirLight;\r\n                dirLight._intensityColor.x = Color.gammaToLinearSpace(dirLight.color.r);\r\n                dirLight._intensityColor.y = Color.gammaToLinearSpace(dirLight.color.g);\r\n                dirLight._intensityColor.z = Color.gammaToLinearSpace(dirLight.color.b);\r\n                Vector3.scale(dirLight._intensityColor, dirLight._intensity, dirLight._intensityColor);\r\n\r\n                (dirLight.owner as Sprite3D).transform.worldMatrix.getForward(dirLight.direction);\r\n                Vector3.normalize(dirLight.direction, dirLight.direction);\r\n                shaderValues.setVector3(Scene3D.LIGHTDIRCOLOR, dirLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.LIGHTDIRECTION, dirLight.direction);\r\n                shaderValues.setInt(Scene3D.LIGHTMODE, dirLight._lightmapBakedType);\r\n                if (i == 0) {\r\n                    this._sunColor = dirLight.color;\r\n                    this._sundir = dirLight.direction;\r\n                }\r\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRCOLOR, dirLight._intensityColor);\r\n                // this._setShaderValue(Scene3D.SUNLIGHTDIRECTION, dirLight._direction);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);\r\n            }\r\n            if (this._pointLights._length > 0 && Stat.enableLight) {\r\n                var poiLight: PointLightCom = this._pointLights._elements[0];\r\n                this._mainPointLight = poiLight;\r\n                poiLight._intensityColor.x = Color.gammaToLinearSpace(poiLight.color.r);\r\n                poiLight._intensityColor.y = Color.gammaToLinearSpace(poiLight.color.g);\r\n                poiLight._intensityColor.z = Color.gammaToLinearSpace(poiLight.color.b);\r\n                Vector3.scale(poiLight._intensityColor, poiLight._intensity, poiLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.POINTLIGHTCOLOR, poiLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.POINTLIGHTPOS, (poiLight.owner as Sprite3D).transform.position);\r\n                shaderValues.setNumber(Scene3D.POINTLIGHTRANGE, poiLight.range);\r\n                shaderValues.setInt(Scene3D.POINTLIGHTMODE, poiLight._lightmapBakedType);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);\r\n            }\r\n            if (this._spotLights._length > 0 && Stat.enableLight) {\r\n                var spotLight: SpotLightCom = this._spotLights._elements[0];\r\n                this._mainSpotLight = spotLight;\r\n                spotLight._intensityColor.x = Color.gammaToLinearSpace(spotLight.color.r);\r\n                spotLight._intensityColor.y = Color.gammaToLinearSpace(spotLight.color.g);\r\n                spotLight._intensityColor.z = Color.gammaToLinearSpace(spotLight.color.b);\r\n                Vector3.scale(spotLight._intensityColor, spotLight._intensity, spotLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTCOLOR, spotLight._intensityColor);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTPOS, (spotLight.owner as Sprite3D).transform.position);\r\n                (spotLight.owner as Sprite3D).transform.worldMatrix.getForward(spotLight.direction);\r\n                Vector3.normalize(spotLight.direction, spotLight.direction);\r\n                shaderValues.setVector3(Scene3D.SPOTLIGHTDIRECTION, spotLight.direction);\r\n                shaderValues.setNumber(Scene3D.SPOTLIGHTRANGE, spotLight.range);\r\n                shaderValues.setNumber(Scene3D.SPOTLIGHTSPOTANGLE, spotLight.spotAngle * Math.PI / 180);\r\n                shaderValues.setInt(Scene3D.SPOTLIGHTMODE, spotLight._lightmapBakedType);\r\n                shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cullInfoCamera: Camera;\r\n\r\n    /**\r\n     * @en The culling camera used for determining the visibility of scene elements.\r\n     * @zh 用于确定场景元素可见性的剔除摄像机。\r\n     */\r\n    get cullInfoCamera(): Camera {\r\n        return this._cullInfoCamera;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * scence外的Camera渲染场景,需要设置这个接口\r\n     * @param camera\r\n     */\r\n    _setCullCamera(camera: Camera) {\r\n        this._cullInfoCamera = camera;\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate the culling camera.\r\n     * @zh 重新计算剔除摄像机。\r\n     */\r\n    recaculateCullCamera() {\r\n        this._cullInfoCamera = this._cameraPool[0] as Camera;\r\n        this._cameraPool.forEach(element => {\r\n            if (this.cullInfoCamera.maxlocalYDistance < (element as Camera).maxlocalYDistance) {\r\n                this._cullInfoCamera = element as Camera;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addCamera(camera: BaseCamera): void {\r\n        var index: number = this._binarySearchIndexInCameraPool(camera);\r\n        var order: number = camera._renderingOrder;\r\n        var count: number = this._cameraPool.length;\r\n        while (index < count && this._cameraPool[index]._renderingOrder <= order)\r\n            index++;\r\n        this._cameraPool.splice(index, 0, camera);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeCamera(camera: BaseCamera): void {\r\n        this._cameraPool.splice(this._cameraPool.indexOf(camera), 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addRenderObject(render: BaseRender): void {\r\n        this._sceneRenderManager.addRenderObject(render);\r\n        render._addReflectionProbeUpdate();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeRenderObject(render: BaseRender): void {\r\n        this._sceneRenderManager.removeRenderObject(render);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Destroys the scene.\r\n     * @param destroyChild Whether to destroy the child node.\r\n     * @zh 销毁场景。\r\n     * @param destroyChild 是否删除子节点\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        if (this._destroyed)\r\n            return;\r\n        super.destroy(destroyChild);\r\n        this._nativeObj = null;\r\n        this._skyRenderer.destroy();\r\n        this._skyRenderer = null;\r\n        this._directionLights = null;\r\n        this._pointLights = null;\r\n        this._spotLights = null;\r\n        this._alternateLights = null;\r\n        (RenderContext3D._instance.scene == this) && (RenderContext3D._instance.scene = null);\r\n        this._shaderValues.destroy();\r\n        // todo\r\n        if (this._sceneUniformData) {\r\n            this._sceneUniformData.destroy();\r\n            this._sceneUniformData = null;\r\n        }\r\n        this._shaderValues = null;\r\n        this.sceneRenderableManager.destroy();\r\n        this._sceneRenderManager = null\r\n        this._cameraPool = null;\r\n        // this._octree = null;\r\n        this._physicsManager && this._physicsManager.destroy();\r\n        // this._reflection._removeReference();\r\n        // this._reflection = null;\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        if (maps) {\r\n            for (var i: number = 0, n: number = maps.length; i < n; i++) {\r\n                var map: Lightmap = maps[i];\r\n                map.lightmapColor && map.lightmapColor._removeReference();\r\n                map.lightmapDirection && map.lightmapDirection._removeReference();\r\n            }\r\n        }\r\n        this._lightmaps = null;\r\n        this._volumeManager.destroy();\r\n        this._componentDriver.callDestroy();\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Gets the manager for a specific component type.\r\n     * @param type The type of the component manager.\r\n     * @zh 根据组件类型获取对应的管理器。\r\n     * @param type 组件管理器的类型。\r\n     */\r\n    getComponentElementManager(type: string) {\r\n        return this.componentElementMap.get(type);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    render(ctx: Context): void {\r\n        return;//3d的render由外面直接调rendersubmit\r\n        if (this._children.length > 0) {\r\n            //temp\r\n            ctx.drawLeftData();\r\n            this.renderSubmit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The rendering entry.\r\n     * @zh 渲染入口\r\n     */\r\n    renderSubmit(): void {\r\n        if (this._children.length <= 0) return;\r\n\r\n        if (this._renderByEditor) return;\r\n        //BufferState._curBindedBufferState && BufferState._curBindedBufferState.unBind();\r\n        this._prepareSceneToRender();\r\n        var i: number, n: number, n1: number;\r\n        Scene3D._updateMark++;\r\n        for (i = 0, n = this._cameraPool.length, n1 = n - 1; i < n; i++) {\r\n            var camera: Camera = (<Camera>this._cameraPool[i]);\r\n            if (camera.enableRender && camera.activeInHierarchy) {\r\n\r\n                if (camera.renderTarget) {\r\n                    camera.enableBuiltInRenderTexture ||= false;\r\n                }\r\n                else {\r\n                    camera.enableBuiltInRenderTexture ||= true;\r\n                }\r\n\r\n                camera.render(this);\r\n\r\n                if (!camera._offScreenRenderTexture) {\r\n                    this.blitMainCanvans(camera._internalRenderTexture, camera.normalizedViewport, camera);\r\n                }\r\n\r\n                // if (!camera._cacheDepth) {\r\n                //     camera._needInternalRenderTexture() && (!camera._internalRenderTexture._inPool) && RenderTexture.recoverToPool(camera._internalRenderTexture);\r\n                // }\r\n\r\n                camera._aftRenderMainPass();\r\n            }\r\n        }\r\n        Context.set2DRenderConfig();//还原2D配置\r\n        RenderTexture.clearPool();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param source\r\n     * @param normalizeViewPort\r\n     * @param camera\r\n     * @returns\r\n     */\r\n    blitMainCanvans(source: BaseTexture, normalizeViewPort: Viewport, camera: Camera) {\r\n        if (!source)\r\n            return;\r\n        Scene3D.mainCavansViewPort.x = RenderContext3D.clientWidth * normalizeViewPort.x | 0;\r\n        Scene3D.mainCavansViewPort.y = RenderContext3D.clientHeight * normalizeViewPort.y | 0;\r\n        Scene3D.mainCavansViewPort.width = RenderContext3D.clientWidth * normalizeViewPort.width | 0;\r\n        Scene3D.mainCavansViewPort.height = RenderContext3D.clientHeight * normalizeViewPort.height | 0;\r\n        source.filterMode = FilterMode.Bilinear;\r\n        if (camera.fxaa)\r\n            BlitFrameBufferCMD.shaderdata.addDefine(BaseCamera.SHADERDEFINE_FXAA);\r\n        var cmd = BlitFrameBufferCMD.create(source, null, Scene3D.mainCavansViewPort, null, null, BlitFrameBufferCMD.shaderdata);\r\n        cmd.run();\r\n        cmd.recover();\r\n        RenderTexture2D._clear = false;\r\n        BlitFrameBufferCMD.shaderdata.removeDefine(BaseCamera.SHADERDEFINE_FXAA);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    reUse(context: Context, pos: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en Sets a global shader value for rendering.\r\n     * @param name The name corresponding to the shader.\r\n     * @param shaderDataType The type of the shader data.\r\n     * @param value The value of the rendering data.\r\n     * @zh 设置全局渲染着色器值。\r\n     * @param name 数据对应着色器名字\r\n     * @param shaderDataType 渲染数据类型\r\n     * @param value 渲染数据值\r\n     */\r\n    setGlobalShaderValue(name: string, type: ShaderDataType, value: ShaderDataItem) {\r\n        var shaderOffset = Shader3D.propertyNameToID(name);\r\n        this._shaderValues.setShaderData(shaderOffset, type, value);\r\n    }\r\n    //--------------------------------------------------------deprecated------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @deprecated\r\n     * 雾效范围\r\n     */\r\n    get fogRange(): number {\r\n        return this._fogParams.y - this.fogParams.x;\r\n    }\r\n\r\n    set fogRange(value: number) {\r\n        this._fogParams.y = value + this.fogParams.x;\r\n        this.fogParams = this._fogParams;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 设置光照贴图。\r\n     * @param value 光照贴图。\r\n     */\r\n    setlightmaps(value: Texture2D[]): void {\r\n        var maps: Lightmap[] = this._lightmaps;\r\n        for (var i: number = 0, n: number = maps.length; i < n; i++)\r\n            maps[i].lightmapColor._removeReference();\r\n        if (value) {\r\n            var count: number = value.length;\r\n            maps.length = count;\r\n            for (i = 0; i < count; i++) {\r\n                var lightMap: Texture2D = value[i];\r\n                lightMap._addReference();\r\n                (maps[i]) || (maps[i] = new Lightmap());\r\n                maps[i].lightmapColor = lightMap;\r\n            }\r\n        } else {\r\n            throw new Error(\"Scene3D: value value can't be null.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 获取光照贴图浅拷贝列表。\r\n     * @return 获取光照贴图浅拷贝列表。\r\n     */\r\n    getlightmaps(): Texture2D[] {\r\n        var lightmapColors: Texture2D[] = new Array(this._lightmaps.length);\r\n        for (var i: number = 0; i < this._lightmaps.length; i++) {\r\n            lightmapColors[i] = this._lightmaps[i].lightmapColor;\r\n        }\r\n        return lightmapColors;//slice()防止修改数组内容\r\n    }\r\n}\r\n","import { Config3D } from \"../../../Config3D\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { BaseTexture } from \"../../resource/BaseTexture\";\r\nimport { PostProcess } from \"../component/PostProcess\";\r\nimport { DepthPass } from \"../depthMap/DepthPass\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { Ray } from \"../math/Ray\";\r\nimport { Picker } from \"../utils/Picker\";\r\nimport { BaseCamera } from \"./BaseCamera\";\r\nimport { CommandBuffer } from \"./render/command/CommandBuffer\";\r\nimport { RenderContext3D } from \"./render/RenderContext3D\";\r\nimport { Scene3D } from \"./scene/Scene3D\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { Texture2D } from \"../../resource/Texture2D\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { DepthTextureMode, RenderTexture } from \"../../resource/RenderTexture\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\";\r\nimport { IRender3DProcess } from \"../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ICameraNodeData } from \"../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Transform3D } from \"./Transform3D\";\r\nimport { Cluster } from \"../graphics/renderPath/Cluster\";\r\nimport { Viewport } from \"../../maths/Viewport\";\r\nimport { RenderPassStatisticsInfo } from \"../../RenderEngine/RenderEnum/RenderStatInfo\";\r\n\r\n/**\r\n * @en Camera clear flags.\r\n * @zh 相机清除标记。\r\n */\r\nexport enum CameraClearFlags {\r\n    /**\r\n     * @en Solid color.\r\n     * @zh 固定颜色。\r\n     */\r\n    SolidColor,\r\n    /**\r\n     * @en Sky.\r\n     * @zh 天空。\r\n     */\r\n    Sky,\r\n    /**\r\n     * @en Depth only.\r\n     * @zh 仅深度。\r\n     */\r\n    DepthOnly,\r\n    /**\r\n     * @en Do not clear.\r\n     * @zh 不清除。\r\n     */\r\n    Nothing,\r\n    /**\r\n     * @en Clear color only.\r\n     * @zh 只清理颜色。\r\n     */\r\n    ColorOnly,\r\n}\r\n\r\n/**\r\n * @en Camera event flags.\r\n * @zh 相机事件标记。\r\n */\r\nexport enum CameraEventFlags {\r\n    //BeforeDepthTexture,\r\n    //AfterDepthTexture,\r\n    //BeforeDepthNormalsTexture,\r\n    //AfterDepthNormalTexture,\r\n    /**\r\n     * @en Before rendering opaque objects.\r\n     * @zh 在渲染非透明物体之前。\r\n     */\r\n    BeforeForwardOpaque = 0,\r\n    /**\r\n     * @en Before rendering the skybox.\r\n     * @zh 在渲染天空盒之前。\r\n     */\r\n    BeforeSkyBox = 2,\r\n    /**\r\n     * @en Before rendering transparent objects.\r\n     * @zh 在渲染透明物体之前。\r\n     */\r\n    BeforeTransparent = 4,\r\n    /**\r\n     * @en Before applying image effects.\r\n     * @zh 在后期处理之前。\r\n     */\r\n    BeforeImageEffect = 6,\r\n    /**\r\n     * @en After all rendering is complete.\r\n     * @zh 所有渲染之后。\r\n     */\r\n    AfterEveryThing = 8,\r\n}\r\n\r\n/**\r\n * @en The Camera class is used to create cameras.\r\n * @zh Camera 类用于创建摄像机。\r\n */\r\nexport class Camera extends BaseCamera {\r\n    /** @internal */\r\n    static _tempVector20: Vector2 = new Vector2();\r\n    /** @internal*/\r\n    static _context3DViewPortCatch: Viewport = new Viewport(0, 0, 0, 0);\r\n    /**@internal */\r\n    static _contextScissorPortCatch: Vector4 = new Vector4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @internal\r\n     * @en Update flag\r\n     * @zh 更新标志位\r\n     */\r\n    static get _updateMark(): number {\r\n        return RenderContext3D._instance._contextOBJ.cameraUpdateMask;\r\n    }\r\n\r\n    static set _updateMark(value: number) {\r\n        RenderContext3D._instance._contextOBJ.cameraUpdateMask = value;\r\n    }\r\n\r\n\r\n\r\n    /** \r\n     * @internal \r\n     * @en Depth map pipeline\r\n     * @zh 深度贴图管线\r\n     */\r\n    static depthPass: DepthPass;\r\n\r\n    /**\r\n     * @en Get the rendering result of a certain position in the scene based on camera and scene information.\r\n     * @param camera The camera\r\n     * @param scene The scene to be rendered\r\n     * @param renderTexture The render texture to draw to\r\n     * @returns The rendered texture\r\n     * @zh 根据相机、场景信息获得场景中某一位置的渲染结果。\r\n     * @param camera 相机\r\n     * @param scene 需要渲染的场景\r\n     * @param renderTexture 要绘制到的渲染纹理\r\n     * @returns 渲染后的纹理\r\n     */\r\n    static drawRenderTextureByScene(camera: Camera, scene: Scene3D, renderTexture: RenderTexture): RenderTexture {\r\n        if (!renderTexture) return null;\r\n        Scene3D._updateMark++;\r\n\r\n        if (!scene.parent)\r\n            scene._update();\r\n        else {\r\n            scene.sceneRenderableManager.renderUpdate();\r\n            scene.skyRenderer.renderUpdate(RenderContext3D._instance);\r\n        }\r\n\r\n        //@ts-ignore\r\n        scene._prepareSceneToRender();\r\n        scene._setCullCamera(camera);\r\n        let recoverTexture = camera.renderTarget;\r\n        camera.renderTarget = renderTexture;\r\n\r\n        let originScene = camera.scene;\r\n\r\n        camera._scene = scene;\r\n\r\n        camera.render(scene);\r\n        camera.renderTarget = recoverTexture;\r\n        scene.recaculateCullCamera();\r\n        scene._componentDriver.callPostRender();\r\n\r\n        camera._aftRenderMainPass();\r\n\r\n        camera._scene = originScene;\r\n\r\n        return renderTexture;\r\n    }\r\n\r\n    /**\r\n     * @deprecated 请使用getTexturePixelAsync函数代替\r\n     * get PixelTexture\r\n     * 获得纹理的像素\r\n     * @param texture 纹理\r\n     * @returns \r\n     */\r\n    static getTexturePixel(texture: Texture2D): ArrayBufferView {\r\n        let coverFilter = texture.filterMode;\r\n        texture.filterMode = FilterMode.Point;\r\n        let rtFormat = RenderTargetFormat.R8G8B8;\r\n        let pixelData;\r\n        let size = texture.width * texture.height;\r\n        switch (texture.format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                rtFormat = RenderTargetFormat.R32G32B32A32;\r\n                pixelData = new Float32Array(size * 4);\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                rtFormat = RenderTargetFormat.R32G32B32;\r\n                pixelData = new Float32Array(size * 3);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                rtFormat = RenderTargetFormat.R8G8B8;\r\n                pixelData = new Uint8Array(size * 3);\r\n                break;\r\n            default:\r\n                rtFormat = RenderTargetFormat.R8G8B8A8;\r\n                pixelData = new Uint8Array(size * 4);\r\n                break;\r\n        }\r\n        let rt = RenderTexture.createFromPool(texture.width, texture.height, rtFormat, RenderTargetFormat.None, false, 0, false);\r\n        let cmd = new CommandBuffer();\r\n        cmd.blitScreenQuad(texture, rt);\r\n        cmd.context = RenderContext3D._instance;\r\n        cmd._applyOne();\r\n        texture.filterMode = coverFilter;\r\n        rt.getData(0, 0, texture.width, texture.height, pixelData);\r\n        rt.destroy();//删除\r\n        return pixelData;\r\n    }\r\n\r\n    /**\r\n     * @en Get the pixels of a texture asynchronously\r\n     * @param texture The texture\r\n     * @returns A promise that resolves with the pixel data\r\n     * @zh 获得纹理的像素\r\n     * @param texture 纹理\r\n     * @returns 解析为像素数据的 Promise\r\n     */\r\n    static getTexturePixelAsync(texture: Texture2D): Promise<ArrayBufferView> {\r\n        let coverFilter = texture.filterMode;\r\n        texture.filterMode = FilterMode.Point;\r\n        let rtFormat = RenderTargetFormat.R8G8B8;\r\n        let pixelData;\r\n        let size = texture.width * texture.height;\r\n        switch (texture.format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                rtFormat = RenderTargetFormat.R32G32B32A32;\r\n                pixelData = new Float32Array(size * 4);\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                rtFormat = RenderTargetFormat.R32G32B32;\r\n                pixelData = new Float32Array(size * 3);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                rtFormat = RenderTargetFormat.R8G8B8;\r\n                pixelData = new Uint8Array(size * 3);\r\n                break;\r\n            default:\r\n                rtFormat = RenderTargetFormat.R8G8B8A8;\r\n                pixelData = new Uint8Array(size * 4);\r\n                break;\r\n        }\r\n        let rt = RenderTexture.createFromPool(texture.width, texture.height, rtFormat, RenderTargetFormat.None, false, 0, false);\r\n        let cmd = new CommandBuffer();\r\n        cmd.blitScreenQuad(texture, rt);\r\n        cmd.context = RenderContext3D._instance;\r\n        cmd._applyOne();\r\n        texture.filterMode = coverFilter;\r\n        const pd = rt.getDataAsync(0, 0, texture.width, texture.height, pixelData);\r\n        rt.destroy();//删除\r\n        return pd;\r\n    }\r\n\r\n    /**\r\n     * @en Draw scene content based on the camera's position in the scene and return it\r\n     * @param camera The camera\r\n     * @param scene The scene\r\n     * @param renderCubeSize The pixel size of the cube texture\r\n     * @param format The color format\r\n     * @param cullingMask The culling mask\r\n     * @returns Output texture pixels in order: back, front, left, right, up, down\r\n     * @zh 根据场景中相机的位置绘制场景内容并返回\r\n     * @param camera 相机\r\n     * @param scene 场景\r\n     * @param renderCubeSize 立方体纹理像素大小\r\n     * @param format 颜色格式\r\n     * @param cullingMask 剔除遮罩\r\n     * @returns 输出纹理像素顺序：后、前、左、右、上、下\r\n     */\r\n    static drawTextureCubePixelByScene(camera: Camera, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number): ArrayBufferView[] {\r\n        let rtFormat = RenderTargetFormat.R8G8B8;\r\n        let pixelData;\r\n        let size = renderCubeSize * renderCubeSize;\r\n        let bytelength;\r\n        switch (format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                rtFormat = RenderTargetFormat.R32G32B32A32;\r\n                size *= 4;\r\n                bytelength = 4;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                rtFormat = RenderTargetFormat.R32G32B32;\r\n                size *= 3;\r\n                bytelength = 4;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                rtFormat = RenderTargetFormat.R8G8B8;\r\n                size *= 3;\r\n                bytelength = 1;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                rtFormat = RenderTargetFormat.R8G8B8A8;\r\n                pixelData = new Uint8Array(size * 4);\r\n                size *= 4;\r\n                bytelength = 1;\r\n                break;\r\n            default:\r\n                throw \"Type is not supported\";\r\n                break;\r\n        }\r\n        let rt = new RenderTexture(renderCubeSize, renderCubeSize, rtFormat, RenderTargetFormat.DEPTH_16, false, 0, false, false);\r\n        camera.fieldOfView = 90;\r\n        camera.cullingMask = cullingMask;\r\n        // bake 0,1,0,0\r\n        //front 0,0,0,1\r\n        //left 0,0.7071068,0,0.7071068\r\n        //right 0,0.7071068,0,-0.7071068\r\n        //up 0,0.7071068,-0.7071068,0\r\n        //down 0,-0.7071068,-0.7071068,0\r\n        let pixels: ArrayBufferView[] = [];\r\n        let quaterionArray = [\r\n            new Quaternion(0, 1, 0, 0),\r\n            new Quaternion(0, 0, 0, 1),\r\n            new Quaternion(0, 0.7071068, 0, 0.7071068),\r\n            new Quaternion(0, 0.7071068, 0, -0.7071068),\r\n            new Quaternion(0, 0.7071068, -0.7071068, 0),\r\n            new Quaternion(0, -0.7071068, -0.7071068, 0),\r\n        ];\r\n        for (var i = 0; i < 6; i++) {\r\n            camera.transform.rotation = quaterionArray[i];\r\n            this.drawRenderTextureByScene(camera, scene, rt);\r\n            if (bytelength == 4)\r\n                pixelData = new Float32Array(size);\r\n            else\r\n                pixelData = new Uint8Array(size);\r\n            pixels[i] = rt.getData(0, 0, renderCubeSize, renderCubeSize, pixelData);\r\n        }\r\n        rt.destroy();\r\n        return pixels;\r\n    }\r\n\r\n    /**\r\n     * @en Draw the content of a specified scene to a cube map texture.\r\n     * @param camera The camera used for rendering.\r\n     * @param position The position of the camera.\r\n     * @param scene The specified scene to render.\r\n     * @param renderCubeSize The size of the cube map texture.\r\n     * @param format The format of the cube map texture.\r\n     * @param cullingMask The culling mask for the camera. Default is 0.\r\n     * @returns The created cube map texture.\r\n     * @zh 绘制指定场景的内容到立方体贴图。\r\n     * @param camera 用于渲染的相机。\r\n     * @param position 相机的位置。\r\n     * @param scene 要渲染的指定场景。\r\n     * @param renderCubeSize 立方体贴图的大小。\r\n     * @param format 立方体贴图的格式。\r\n     * @param cullingMask 相机的剔除遮罩。默认值为0。\r\n     * @returns 创建的立方体贴图。\r\n     */\r\n    static drawTextureCubeByScene(camera: Camera, position: Vector3, scene: Scene3D, renderCubeSize: number, format: TextureFormat, cullingMask: number = 0): TextureCube {\r\n        camera.transform.position = position;\r\n        let pixels = this.drawTextureCubePixelByScene(camera, scene, renderCubeSize, format, cullingMask);\r\n        let finalformat: TextureFormat;\r\n        switch (format) {\r\n            case TextureFormat.R32G32B32A32:\r\n            case TextureFormat.R16G16B16A16:\r\n                finalformat = TextureFormat.R32G32B32A32;\r\n                break;\r\n            case TextureFormat.R32G32B32:\r\n            case TextureFormat.R16G16B16:\r\n                finalformat = TextureFormat.R32G32B32;\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n            case TextureFormat.R8G8B8:\r\n                finalformat = TextureFormat.R8G8B8;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                finalformat = TextureFormat.R8G8B8A8;\r\n                break;\r\n            default:\r\n                throw \"Type is not supported\";\r\n        }\r\n        let textureCube = new TextureCube(renderCubeSize, format, true, false);\r\n        textureCube.setPixelsData(pixels, false, false);\r\n        return textureCube;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        Camera.depthPass = new DepthPass();\r\n    }\r\n\r\n\r\n    /** @internal */\r\n    protected _aspectRatio: number;\r\n    /** @internal */\r\n    protected _viewport: Viewport;\r\n    /** @internal */\r\n    protected _rayViewport: Viewport;\r\n    /** @internal */\r\n    protected _normalizedViewport: Viewport;\r\n    /** @internal */\r\n    protected _viewMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _projectionMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _projectionViewMatrix: Matrix4x4;\r\n    /** @internal */\r\n    protected _boundFrustum: BoundFrustum;\r\n    /** @internal */\r\n    private _updateViewMatrix: boolean = true;\r\n    /** @internal */\r\n    protected _postProcess: PostProcess = null;\r\n    /** @internal */\r\n    protected _enableHDR: boolean = false;\r\n    /** @internal */\r\n    private _viewportParams: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _projectionParams: Vector4 = new Vector4();\r\n    /** @internal*/\r\n    protected _needBuiltInRenderTexture: boolean = false;\r\n    /**@internal */\r\n    protected _msaa: boolean = false;\r\n    /**@internal */\r\n    private _fxaa: boolean = false;\r\n    /** @internal*/\r\n    private _depthTextureMode: DepthTextureMode;\r\n    /** @internal */\r\n    _offScreenRenderTexture: RenderTexture = null;\r\n    /** @internal */\r\n    _internalRenderTexture: RenderTexture = null;\r\n    /**\r\n     * @internal\r\n     * @en Whether to directly use the rendered depth map\r\n     * @zh 是否直接使用渲染深度贴图\r\n     */\r\n    _canBlitDepth: boolean = false;\r\n    /**@internal */\r\n    _internalCommandBuffer: CommandBuffer = new CommandBuffer();\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * @en Depth texture format\r\n     * @zh 深度贴图格式\r\n     */\r\n    protected _depthTextureFormat: RenderTargetFormat = RenderTargetFormat.DEPTH_32; //兼容WGSL\r\n    /**\r\n     * @en Depth texture\r\n     * @zh 深度贴图\r\n     */\r\n    private _depthTexture: BaseTexture;\r\n    /**\r\n     * @en Depth normals texture\r\n     * @zh 深度法线贴图\r\n     */\r\n    private _depthNormalsTexture: RenderTexture;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Opaque objects texture\r\n     * @zh 非透明物体贴图\r\n     */\r\n    _opaqueTexture: RenderTexture;\r\n    /**\r\n     * @en Whether to enable the opaque objects pass\r\n     * @zh 是否开启非透明物体通道\r\n     */\r\n    private _opaquePass: boolean;\r\n\r\n    /** @internal */\r\n    _cameraEventCommandBuffer: { [key: string]: CommandBuffer[] } = {};\r\n    /**\r\n     * @internal\r\n     * @en Implement shadow rendering using CommandBuffer\r\n     * @zh 实现CommandBuffer的阴影渲染\r\n     */\r\n    private _shadowCasterCommanBuffer: CommandBuffer[] = [];\r\n\r\n    /** @internal */\r\n    _clusterXPlanes: Vector3[];\r\n    /** @internal */\r\n    _clusterYPlanes: Vector3[];\r\n    /** @internal */\r\n    _clusterPlaneCacheFlag: Vector2 = new Vector2(-1, -1);\r\n    /** @internal */\r\n    _screenOffsetScale: Vector4 = new Vector4();\r\n\r\n    /**\r\n     * @en Whether rendering is allowed.\r\n     * @zh 是否允许渲染。\r\n     */\r\n    enableRender: boolean = true;\r\n    /**\r\n     * @en Clear flag.\r\n     * @zh 清除标记。\r\n     */\r\n    clearFlag: CameraClearFlags = CameraClearFlags.SolidColor;\r\n    /**\r\n     * @internal\r\n     * @en Whether to cache the depth texture from the previous frame.\r\n     * @zh 是否缓存上一帧的深度纹理。\r\n     */\r\n    _cacheDepth: boolean\r\n    /**\r\n     * @internal\r\n     * @en Cached texture from the previous frame.\r\n     * @zh 缓存的上一帧纹理。\r\n     */\r\n    _cacheDepthTexture: RenderTexture;\r\n\r\n    _renderDataModule: ICameraNodeData;\r\n\r\n    private _Render3DProcess: IRender3DProcess;\r\n\r\n    /**\r\n     * @en The near clipping plane of the camera.\r\n     * @param value The distance to the near clipping plane.\r\n     * @zh 相机的近裁剪平面。\r\n     * @param value 近裁剪平面的距离。\r\n     */\r\n    set nearPlane(value: number) {\r\n        super.nearPlane = value;\r\n        this._renderDataModule.nearplane = value;\r\n    }\r\n\r\n    get nearPlane() {\r\n        return this._nearPlane;\r\n    }\r\n\r\n    /**\r\n     * @en The far clipping plane of the camera.\r\n     * @param value The distance to the far clipping plane.\r\n     * @zh 相机的远裁剪平面。\r\n     * @param value 远裁剪平面的距离。\r\n     */\r\n    set farPlane(value: number) {\r\n        super.farPlane = value;\r\n        this._renderDataModule.farplane = value;\r\n    }\r\n\r\n    get farPlane() {\r\n        return this._farPlane;\r\n    }\r\n\r\n    /**\r\n     * @en Set the field of view of the camera.\r\n     * @param value The field of view in degrees.\r\n     * @zh 设置相机的视野。\r\n     * @param value 单位为度。\r\n     */\r\n    set fieldOfView(value: number) {\r\n        super.fieldOfView = value;\r\n        this._renderDataModule.fieldOfView = value;\r\n    }\r\n\r\n    get fieldOfView() {\r\n        return this._fieldOfView;\r\n    }\r\n\r\n    /**\r\n     * @en The aspect ratio of the camera.\r\n     * @zh 相机的横纵比。\r\n     */\r\n    get aspectRatio(): number {\r\n        if (this._aspectRatio === 0) {\r\n            var vp: Viewport = this.viewport;\r\n            return vp.width / vp.height;\r\n        }\r\n        return this._aspectRatio;\r\n    }\r\n\r\n    set aspectRatio(value: number) {\r\n        if (value < 0)\r\n            throw new Error(\"Camera: the aspect ratio has to be a positive real number.\");\r\n        this._aspectRatio = value;\r\n        this._renderDataModule.aspectRatio = value;\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @en The viewport in screen pixel coordinates.\r\n     * @zh 屏幕像素坐标的视口。\r\n     */\r\n    get viewport(): Viewport {//TODO:优化\r\n        if (this._offScreenRenderTexture)\r\n            this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height);\r\n        else\r\n            this._calculationViewport(this._normalizedViewport, this.clientWidth, this.clientHeight);//屏幕尺寸会动态变化,需要重置\r\n        return this._viewport;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        var width: number;\r\n        var height: number;\r\n        if (this._offScreenRenderTexture) {\r\n            width = this._offScreenRenderTexture.width;\r\n            height = this._offScreenRenderTexture.height;\r\n        } else {\r\n            width = this.clientWidth;\r\n            height = this.clientHeight;\r\n        }\r\n        this._normalizedViewport.x = value.x / width;\r\n        this._normalizedViewport.y = value.y / height;\r\n        this._normalizedViewport.width = value.width / width;\r\n        this._normalizedViewport.height = value.height / height;\r\n        this._calculationViewport(this._normalizedViewport, width, height);\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @en The display width of the camera.\r\n     * @zh 相机显示宽度。\r\n     */\r\n    get clientWidth(): number {\r\n        ILaya.stage.needUpdateCanvasSize();\r\n        if (Config3D.customResolution)\r\n            return Config3D.pixelRatio * Config3D._resoluWidth | 0;\r\n        else\r\n            return RenderContext3D.clientWidth * Config3D.pixelRatio | 0;\r\n    }\r\n\r\n    /**\r\n     * @en The display height of the camera.\r\n     * @zh 相机显示高度。\r\n     */\r\n    get clientHeight(): number {\r\n        ILaya.stage.needUpdateCanvasSize();\r\n        if (Config3D.customResolution)\r\n            return Config3D.pixelRatio * Config3D._resoluHeight | 0;\r\n        else\r\n            return RenderContext3D.clientHeight * Config3D.pixelRatio | 0;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @en Multi-sample anti-aliasing.\r\n     * @zh 多重采样抗锯齿。\r\n     */\r\n    set msaa(value: boolean) {\r\n        LayaGL.renderEngine.getCapable(RenderCapable.MSAA) ? this._msaa = value : this._msaa = false;\r\n    }\r\n\r\n\r\n    get msaa(): boolean {\r\n        return this._msaa && Stat.enablemsaa;\r\n    }\r\n\r\n    /**\r\n     * @en Space anti-aliasing.\r\n     * @zh 空间抗锯齿\r\n     */\r\n    set fxaa(value: boolean) {\r\n        this._fxaa = value;\r\n    }\r\n\r\n    get fxaa(): boolean {\r\n        return this._fxaa;\r\n    }\r\n\r\n    /**\r\n     * @en The viewport in clip space.\r\n     * @zh 裁剪空间的视口。\r\n     */\r\n    get normalizedViewport(): Viewport {\r\n        return this._normalizedViewport;\r\n    }\r\n\r\n    set normalizedViewport(value: Viewport) {\r\n        var width: number;\r\n        var height: number;\r\n        if (this._offScreenRenderTexture) {\r\n            width = this._offScreenRenderTexture.width;\r\n            height = this._offScreenRenderTexture.height;\r\n        } else {\r\n            width = this.clientWidth;\r\n            height = this.clientHeight;\r\n        }\r\n        if (this._normalizedViewport !== value)\r\n            value.cloneTo(this._normalizedViewport);\r\n        this._calculationViewport(value, width, height);\r\n        this._calculateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * @en Get the view matrix.\r\n     * @zh 视图矩阵。\r\n     */\r\n    get viewMatrix(): Matrix4x4 {\r\n        if (this._updateViewMatrix) {\r\n            var scale: Vector3 = this.transform.getWorldLossyScale();\r\n            var scaleX: number = scale.x;\r\n            var scaleY: number = scale.y;\r\n            var scaleZ: number = scale.z;\r\n            var viewMatE: Float32Array = this._viewMatrix.elements;\r\n\r\n            this.transform.worldMatrix.cloneTo(this._viewMatrix)\r\n            viewMatE[0] /= scaleX;//忽略缩放\r\n            viewMatE[1] /= scaleX;\r\n            viewMatE[2] /= scaleX;\r\n            viewMatE[4] /= scaleY;\r\n            viewMatE[5] /= scaleY;\r\n            viewMatE[6] /= scaleY;\r\n            viewMatE[8] /= scaleZ;\r\n            viewMatE[9] /= scaleZ;\r\n            viewMatE[10] /= scaleZ;\r\n            this._viewMatrix.invert(this._viewMatrix);\r\n            this._updateViewMatrix = false;\r\n            if (this.skyRenderElement._renderElementOBJ)\r\n                this.skyRenderElement.calculateViewMatrix(this._viewMatrix);\r\n        }\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * @en The projection matrix.\r\n     * @zh 投影矩阵。\r\n     */\r\n    get projectionMatrix(): Matrix4x4 {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    set projectionMatrix(value: Matrix4x4) {\r\n        this._projectionMatrix = value;\r\n        this._useUserProjectionMatrix = true;\r\n    }\r\n\r\n    /**\r\n     * @en The projection view matrix.\r\n     * @zh 视图投影矩阵。\r\n     */\r\n    get projectionViewMatrix(): Matrix4x4 {\r\n        Matrix4x4.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix);\r\n        this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix);\r\n        return this._projectionViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * @en The bound frustum of the camera.\r\n     * @zh 摄像机视锥。\r\n     */\r\n    get boundFrustum(): BoundFrustum {\r\n        this._boundFrustum.matrix = this.projectionViewMatrix;\r\n        return this._boundFrustum;\r\n    }\r\n\r\n    /**\r\n     * @en Customize the rendering target for the scene.\r\n     * @zh 自定义渲染场景的渲染目标。\r\n     */\r\n    get renderTarget(): RenderTexture {\r\n        return this._offScreenRenderTexture;\r\n    }\r\n\r\n    set renderTarget(value: RenderTexture) {\r\n        var lastValue: RenderTexture = this._offScreenRenderTexture;\r\n        if (lastValue !== value) {\r\n            (lastValue) && (lastValue._isCameraTarget = false);\r\n            (value) && (value._isCameraTarget = true);\r\n            this._offScreenRenderTexture = value;\r\n            this._calculateProjectionMatrix();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Post processing.\r\n     * @zh 后期处理。\r\n     */\r\n    get postProcess(): PostProcess {\r\n        return this._postProcess;\r\n    }\r\n\r\n    set postProcess(value: PostProcess) {\r\n        this._postProcess = value;\r\n        //if (!value) return;\r\n        //value && value._init(this);\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable HDR. Enabling it has a certain impact on performance.\r\n     * @zh 是否开启HDR。开启后对性能有一定影响。\r\n     */\r\n    get enableHDR(): boolean {\r\n        return this._enableHDR;\r\n    }\r\n\r\n    set enableHDR(value: boolean) {\r\n        if (value && !LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_R16G16B16A16)) {\r\n            console.warn(\"Camera:can't enable HDR in this device.\");\r\n            return;\r\n        }\r\n        this._enableHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use the RenderTexture being rendered for CommandBuffer service. Set to true when used with CommandBuffer.\r\n     * @zh 是否使用正在渲染的 RenderTexture 为 CommandBuffer 服务。通常与 CommandBuffer 一起使用时设置为 true。\r\n     */\r\n    get enableBuiltInRenderTexture(): boolean {\r\n        return this._needBuiltInRenderTexture;\r\n    }\r\n\r\n    set enableBuiltInRenderTexture(value: boolean) {\r\n        this._needBuiltInRenderTexture = value;\r\n    }\r\n\r\n    /**\r\n     * @en The depth texture mode for the camera.\r\n     * @zh 相机的深度纹理模式。\r\n     */\r\n    get depthTextureMode(): DepthTextureMode {\r\n        return this._depthTextureMode;\r\n    }\r\n\r\n    set depthTextureMode(value: DepthTextureMode) {\r\n        this._depthTextureMode = value;\r\n        if (!LayaGL.renderEngine.getCapable(RenderCapable.RenderTextureFormat_Depth)) {\r\n            this._depthTextureMode &= ~DepthTextureMode.Depth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Set the Opaque Pass mode for the camera.\r\n     * @zh 相机的不透明通道模式。\r\n     */\r\n    set opaquePass(value: boolean) {\r\n        if (value == this._opaquePass)\r\n            return;\r\n        if (!value) {\r\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, Texture2D.blackTexture);\r\n            this._shaderValues.setVector(BaseCamera.OPAQUETEXTUREPARAMS, Vector4.ONE);\r\n            this._opaqueTexture && RenderTexture.recoverToPool(this._opaqueTexture);\r\n            this._opaqueTexture = null;\r\n        }\r\n        this._opaquePass = value;\r\n    }\r\n\r\n    get opaquePass() {\r\n        return this._opaquePass;\r\n    }\r\n\r\n    opaqueTextureSize: number = 512;\r\n\r\n    /**\r\n     * @en The format of the depth texture.\r\n     * @zh 深度纹理的格式。\r\n     */\r\n    get depthTextureFormat(): RenderTargetFormat {\r\n        return this._depthTextureFormat;\r\n    }\r\n    set depthTextureFormat(value: RenderTargetFormat) {\r\n        this._depthTextureFormat = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Enable or disable the use of built-in depth texture (TODO: If enabled, the depth texture can only be used in post-processing, not in the rendering process).\r\n     * @zh 设置是否使用内置的深度纹理（TODO:如果开启，深度纹理只能在后期处理中使用，不能在渲染流程中使用）。\r\n     */\r\n    set enableBlitDepth(value: boolean) {\r\n        if (value == this._canBlitDepth)\r\n            return;\r\n        this._canBlitDepth = value;\r\n        this._cacheDepth = value;\r\n        this._internalRenderTexture && RenderTexture.recoverToPool(this._internalRenderTexture);\r\n        this._internalRenderTexture = RenderTexture.createFromPool(this.viewport.width, this.viewport.height, this._getRenderTextureFormat(), this.depthTextureFormat, false, this.msaa ? 4 : 1, this._canBlitDepth, this._needRenderGamma(this._getRenderTextureFormat()));\r\n        if (!value) {\r\n            if (this._cacheDepthTexture)\r\n                this._cacheDepthTexture._inPool ? 0 : RenderTexture.recoverToPool(this._cacheDepthTexture);\r\n        }\r\n\r\n    }\r\n    get enableBlitDepth() {\r\n        return this._canBlitDepth;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the camera can blit (draw) the depth texture.\r\n     * @zh 相机是否可以绘制深度纹理。\r\n     */\r\n    get canblitDepth() {\r\n        return this._canBlitDepth && this._internalRenderTexture && this._internalRenderTexture.depthStencilFormat != null;\r\n    }\r\n\r\n    /**\r\n     * @en Creates an instance of the Camera.\r\n     * @param aspectRatio The aspect ratio of the camera view.\r\n     * @param nearPlane The near clipping plane distance.\r\n     * @param farPlane The far clipping plane distance.\r\n     * @zh 创建一个Camera实例。\r\n     * @param\taspectRatio 横纵比。\r\n     * @param\tnearPlane 近裁面。\r\n     * @param\tfarPlane 远裁面。\r\n     */\r\n    constructor(aspectRatio: number = 0, nearPlane: number = 0.3, farPlane: number = 1000) {\r\n        super(nearPlane, farPlane);\r\n        this._renderDataModule = Laya3DRender.Render3DModuleDataFactory.createCameraModuleData();\r\n        this._Render3DProcess = Laya3DRender.Render3DPassFactory.createRender3DProcess();\r\n        this._renderDataModule.transform = this.transform;\r\n        this._viewMatrix = new Matrix4x4();\r\n        this._projectionMatrix = new Matrix4x4();\r\n        this._projectionViewMatrix = new Matrix4x4();\r\n        this._viewport = new Viewport(0, 0, 0, 0);\r\n        this._normalizedViewport = new Viewport(0, 0, 1, 1);\r\n        this._rayViewport = new Viewport(0, 0, 0, 0);\r\n        this._aspectRatio = aspectRatio;\r\n        this._boundFrustum = new BoundFrustum(new Matrix4x4());\r\n        this.depthTextureMode = 0;\r\n        this.opaquePass = false;\r\n        this._calculateProjectionMatrix();\r\n        ILaya.stage.on(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        this.transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        this.opaquePass = false;\r\n        this._internalCommandBuffer.context = RenderContext3D._instance;\r\n        this._renderDataModule.farplane = this.farPlane;\r\n        this._renderDataModule.nearplane = this.nearPlane;\r\n        this._renderDataModule.fieldOfView = this.fieldOfView;\r\n        this._renderDataModule.aspectRatio = this.aspectRatio;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _calculationViewport(normalizedViewport: Viewport, width: number, height: number): void {\r\n        var lx: number = normalizedViewport.x * width;//不应限制x范围\r\n        var ly: number = normalizedViewport.y * height;//不应限制y范围\r\n        var rx: number = lx + Math.max(normalizedViewport.width * width, 0);\r\n        var ry: number = ly + Math.max(normalizedViewport.height * height, 0);\r\n\r\n        var ceilLeftX: number = Math.ceil(lx);\r\n        var ceilLeftY: number = Math.ceil(ly);\r\n        var floorRightX: number = Math.floor(rx);\r\n        var floorRightY: number = Math.floor(ry);\r\n\r\n        var pixelLeftX: number = ceilLeftX - lx >= 0.5 ? Math.floor(lx) : ceilLeftX;\r\n        var pixelLeftY: number = ceilLeftY - ly >= 0.5 ? Math.floor(ly) : ceilLeftY;\r\n        var pixelRightX: number = rx - floorRightX >= 0.5 ? Math.ceil(rx) : floorRightX;\r\n        var pixelRightY: number = ry - floorRightY >= 0.5 ? Math.ceil(ry) : floorRightY;\r\n\r\n        this._viewport.x = pixelLeftX;\r\n        this._viewport.y = pixelLeftY;\r\n        this._viewport.width = pixelRightX - pixelLeftX;\r\n        this._viewport.height = pixelRightY - pixelLeftY;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _calculateProjectionMatrix(): void {\r\n        if (!this._useUserProjectionMatrix) {\r\n            if (this._orthographic) {\r\n                var halfHeight: number = this.orthographicVerticalSize * 0.5;\r\n                var halfWidth: number = halfHeight * this.aspectRatio;\r\n                Matrix4x4.createOrthoOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n            } else {\r\n                Matrix4x4.createPerspective(3.1416 * this.fieldOfView / 180.0, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);\r\n            }\r\n            if (this.skyRenderElement._renderElementOBJ)\r\n                this.skyRenderElement.caluclateProjectionMatrix(this._projectionMatrix, this.aspectRatio, this.nearPlane, this.farPlane, this.fieldOfView, this.orthographic);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Check if a layer is visible based on the culling mask.\r\n     * @param layer The layer to check.\r\n     * @returns Whether the layer is visible.\r\n     * @zh 通过蒙版值获取蒙版是否显示。\r\n     * @param layer 要检查的图层。\r\n     * @returns 图层是否可见。\r\n     */\r\n    _isLayerVisible(layer: number): boolean {\r\n        return (Math.pow(2, layer) & this.cullingMask) != 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onTransformChanged(flag: number): void {\r\n        flag &= Transform3D.TRANSFORM_WORLDMATRIX;//过滤有用TRANSFORM标记\r\n        (flag) && (this._updateViewMatrix = true);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        var clearFlagData: any = data.clearFlag;\r\n        (clearFlagData !== undefined) && (this.clearFlag = clearFlagData);\r\n        var viewport: any[] = data.viewport;\r\n        this.normalizedViewport = new Viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\r\n        var enableHDR: boolean = data.enableHDR;\r\n        (enableHDR !== undefined) && (this.enableHDR = enableHDR);\r\n    }\r\n\r\n    /**\r\n     * @en Clone the camera.\r\n     * @zh 克隆相机。\r\n     */\r\n    clone(): Camera {\r\n        let camera = <Camera>super.clone();\r\n        camera.clearFlag = this.clearFlag;\r\n        this.clearColor.cloneTo(camera.clearColor);\r\n        camera.clearColor = camera.clearColor;\r\n        camera.viewport = this.viewport;\r\n        this.normalizedViewport.cloneTo(camera.normalizedViewport);\r\n        camera.enableHDR = this.enableHDR;\r\n        camera.farPlane = this.farPlane;\r\n        camera.nearPlane = this.nearPlane;\r\n        camera.fieldOfView = this.fieldOfView;\r\n        camera.orthographic = this.orthographic;\r\n        camera.orthographicVerticalSize = this.orthographicVerticalSize;\r\n        camera.opaquePass = this.opaquePass;\r\n        camera._cameraEventCommandBuffer = this._cameraEventCommandBuffer;\r\n        camera.opaquePass = this.opaquePass;\r\n        //Object.assign(camera._cameraEventCommandBuffer, this._cameraEventCommandBuffer);\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getCanvasWidth(): number {\r\n        if (this._offScreenRenderTexture)\r\n            return this._offScreenRenderTexture.width;\r\n        else\r\n            return this.clientWidth;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getCanvasHeight(): number {\r\n        if (this._offScreenRenderTexture)\r\n            return this._offScreenRenderTexture.height;\r\n        else\r\n            return this.clientHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getRenderTexture(): RenderTexture {\r\n        return this._internalRenderTexture || this._offScreenRenderTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Determine if the render result needs gamma correction.\r\n     * @param rt The render target format to check.\r\n     * @returns Whether gamma correction is needed for the given render target format.\r\n     * @zh 判断渲染结果是否需要 Gamma 校正。\r\n     * @param rt 要检查的渲染目标格式。\r\n     * @returns 给定的渲染目标格式是否需要 Gamma 校正。\r\n     */\r\n    _needRenderGamma(rt: RenderTargetFormat) {\r\n        switch (rt) {\r\n            case RenderTargetFormat.R8G8B8:\r\n            case RenderTargetFormat.R8G8B8A8:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _needInternalRenderTexture(): boolean {\r\n        let needInternalRT = this.enableBuiltInRenderTexture;\r\n        if (this.renderTarget) {\r\n            if (this.msaa) {\r\n                needInternalRT = needInternalRT || !(this.renderTarget.samples > 1);\r\n            }\r\n            if (this.enableHDR) {\r\n                switch (this.renderTarget.format) {\r\n                    case TextureFormat.R16G16B16A16:\r\n                    case TextureFormat.R16G16B16:\r\n                    case TextureFormat.R32G32B32A32:\r\n                    case TextureFormat.R32G32B32:\r\n                        break;\r\n                    default:\r\n                        needInternalRT = true;\r\n                        break;\r\n                }\r\n            }\r\n            if (this.postProcess && this.postProcess.enable && this.postProcess.effects.length > 0) {\r\n                needInternalRT = true;\r\n            }\r\n            if (this.normalizedViewport.width != 1 || this.normalizedViewport.height != 1 || this.normalizedViewport.x != 0 || this.normalizedViewport.y != 0) {\r\n                needInternalRT = true;\r\n            }\r\n        }\r\n\r\n        return needInternalRT;//condition of internal RT\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getRenderTextureFormat(): RenderTargetFormat {\r\n        if (this._enableHDR)\r\n            return RenderTargetFormat.R16G16B16A16;\r\n        else\r\n            return RenderTargetFormat.R8G8B8A8;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * update Camera Render\r\n     * @param context \r\n     */\r\n    _updateCameraRenderData(context: RenderContext3D) {\r\n        this._prepareCameraToRender();\r\n        this._applyViewProject(this.viewMatrix, this._projectionMatrix, context.invertY);\r\n        this._contextApply(context);\r\n    }\r\n\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     */\r\n    _prepareCameraToRender(): void {\r\n        super._prepareCameraToRender();\r\n        var vp: Viewport = this.viewport;\r\n        this._viewportParams.setValue(vp.x, vp.y, vp.width, vp.height);\r\n        let invertY = LayaGL.renderEngine._screenInvertY ? !RenderContext3D._instance.invertY : RenderContext3D._instance.invertY;\r\n        // let invertY = RenderContext3D._instance.invertY;\r\n        this._projectionParams.setValue(this._nearPlane, this._farPlane, invertY ? -1 : 1, 1 / this.farPlane);\r\n        this._shaderValues.setVector(BaseCamera.VIEWPORT, this._viewportParams);\r\n        this._shaderValues.setVector(BaseCamera.PROJECTION_PARAMS, this._projectionParams);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param context \r\n     */\r\n    _contextApply(context: RenderContext3D) {\r\n        context.viewMatrix = this.viewMatrix;\r\n        context.projectionMatrix = this.projectionMatrix;\r\n        context.projectionViewMatrix = this.projectionViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _applyViewProject(viewMat: Matrix4x4, proMat: Matrix4x4, invertY: boolean): void {\r\n        var projectView: Matrix4x4;\r\n        if (invertY) {\r\n            Matrix4x4.multiply(BaseCamera._invertYScaleMatrix, proMat, BaseCamera._invertYProjectionMatrix);\r\n            Matrix4x4.multiply(BaseCamera._invertYProjectionMatrix, viewMat, BaseCamera._invertYProjectionViewMatrix);\r\n            proMat = BaseCamera._invertYProjectionMatrix;\r\n            projectView = BaseCamera._invertYProjectionViewMatrix;\r\n        }\r\n        else {\r\n            Matrix4x4.multiply(proMat, viewMat, this._projectionViewMatrix);\r\n            this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix);\r\n            projectView = this._projectionViewMatrix;\r\n        }\r\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWMATRIX, viewMat);\r\n        this._shaderValues.setMatrix4x4(BaseCamera.PROJECTMATRIX, proMat);\r\n        this._shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, projectView);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateClusterPlaneXY(): void {\r\n        var fieldOfView: number = this.fieldOfView;\r\n        var aspectRatio: number = this.aspectRatio;\r\n        if (this._clusterPlaneCacheFlag.x !== fieldOfView || this._clusterPlaneCacheFlag.y !== aspectRatio) {\r\n            var clusterCount: Vector3 = Config3D.lightClusterCount;\r\n            var xSlixe: number = clusterCount.x, ySlice: number = clusterCount.y;\r\n            var xCount: number = xSlixe + 1, yCount: number = ySlice + 1;\r\n            var xPlanes: Vector3[] = this._clusterXPlanes, yPlanes: Vector3[] = this._clusterYPlanes;\r\n\r\n            if (!xPlanes) {\r\n                xPlanes = this._clusterXPlanes = new Array(xCount);\r\n                yPlanes = this._clusterYPlanes = new Array(yCount);\r\n                for (var i: number = 0; i < xCount; i++)\r\n                    xPlanes[i] = new Vector3();\r\n                for (var i: number = 0; i < yCount; i++)\r\n                    yPlanes[i] = new Vector3();\r\n            }\r\n            var halfY = Math.tan((this.fieldOfView / 2) * Math.PI / 180);\r\n            var halfX = this.aspectRatio * halfY;\r\n            var yLengthPerCluster = 2 * halfY / ySlice;\r\n            var xLengthPerCluster = 2 * halfX / xSlixe;\r\n            for (var i: number = 0; i < xCount; i++) {\r\n                var angle: number = -halfX + xLengthPerCluster * i;\r\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\r\n                var normX: number = 1 / bigHypot;\r\n                var xPlane: Vector3 = xPlanes[i];\r\n                xPlane.setValue(normX, 0, -angle * normX);\r\n            }\r\n            //start from top is more similar to light pixel data\r\n            for (var i: number = 0; i < yCount; i++) {\r\n                var angle: number = halfY - yLengthPerCluster * i;\r\n                var bigHypot: number = Math.sqrt(1 + angle * angle);\r\n                var normY: number = -1 / bigHypot;\r\n                var yPlane: Vector3 = yPlanes[i];\r\n                yPlane.setValue(0, normY, -angle * normY);\r\n            }\r\n\r\n            this._clusterPlaneCacheFlag.x = fieldOfView;\r\n            this._clusterPlaneCacheFlag.y = aspectRatio;\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * apply \r\n    //  * @internal\r\n    //  */\r\n    // _applyCasterPassCommandBuffer(context: RenderContext3D) {\r\n    //     if (!this._shadowCasterCommanBuffer || this._shadowCasterCommanBuffer.length == 0)\r\n    //         return;\r\n    //     this._shadowCasterCommanBuffer.forEach(function (value) {\r\n    //         value._context = context;\r\n    //         value._apply();\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _addCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\r\n        if (this._shadowCasterCommanBuffer.indexOf(commandBuffer) < 0)\r\n            this._shadowCasterCommanBuffer.push(commandBuffer);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param commandBuffer \r\n     */\r\n    _removeCasterShadowCommandBuffer(commandBuffer: CommandBuffer) {\r\n        var index: number = this._shadowCasterCommanBuffer.indexOf(commandBuffer);\r\n        if (index != -1) this._shadowCasterCommanBuffer.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Pre-render process for the main rendering pass.\r\n     * @param context The rendering context.\r\n     * @param scene The scene to be rendered.\r\n     * @param needInternalRT Whether an internal render target is needed.\r\n     * @param viewport The viewport for rendering.\r\n     * @zh 主渲染流程之前的预处理过程。\r\n     * @param context 渲染上下文。\r\n     * @param scene 要渲染的场景。\r\n     * @param needInternalRT 是否需要内部渲染目标。\r\n     * @param viewport 渲染的视口。\r\n     */\r\n    _preRenderMainPass(context: RenderContext3D, scene: Scene3D, needInternalRT: boolean, viewport: Viewport) {\r\n        context.camera = this;\r\n        context.cameraShaderValue = this._shaderValues;\r\n        Camera._updateMark++;\r\n\r\n        //TODO:webgl2 should use blitFramebuffer\r\n        //TODO:if adjacent camera param can use same internal RT can merge\r\n        //if need internal RT and no off screen RT and clearFlag is DepthOnly or Nothing, should grab the backBuffer\r\n        if (needInternalRT && !this._offScreenRenderTexture && (this.clearFlag == CameraClearFlags.DepthOnly || this.clearFlag == CameraClearFlags.Nothing)) {\r\n            if (RenderTexture.bindCanvasRender) {//解决iOS中使用CopyTexSubImage2D特别慢的bug\r\n                if (RenderTexture.bindCanvasRender != this._internalRenderTexture) {\r\n                    this._internalCommandBuffer.clear();\r\n                    this._internalCommandBuffer.blitScreenQuad(RenderTexture.bindCanvasRender, this._internalRenderTexture);\r\n                    this._internalCommandBuffer._applyOne();\r\n\r\n                }\r\n            } else {\r\n                if (this._enableHDR) {//internal RT is HDR can't directly copy\r\n                    var grabTexture: RenderTexture = RenderTexture.createFromPool(viewport.width, viewport.height, RenderTargetFormat.R8G8B8, RenderTargetFormat.DEPTH_16, false, 1);\r\n                    grabTexture.filterMode = FilterMode.Bilinear;\r\n                    this._renderEngine.copySubFrameBuffertoTex(grabTexture._texture, 0, 0, 0, viewport.x, RenderContext3D.clientHeight - (viewport.y + viewport.height), viewport.width, viewport.height);\r\n                    this._internalCommandBuffer.clear();\r\n                    this._internalCommandBuffer.blitScreenQuad(grabTexture, this._internalRenderTexture);\r\n                    this._internalCommandBuffer._apply(true);\r\n                    RenderTexture.recoverToPool(grabTexture);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The depth texture of the camera.\r\n     * @zh 相机的深度纹理。\r\n     */\r\n    get depthTexture(): BaseTexture {\r\n        return this._depthTexture;\r\n    }\r\n\r\n    set depthTexture(value: BaseTexture) {\r\n        this._depthTexture = value;\r\n    }\r\n    /**\r\n     * @internal\r\n     * @en The depth-normal texture of the camera.\r\n     * @zh 相机的深度法线纹理。\r\n     */\r\n    get depthNormalTexture(): RenderTexture {\r\n        return this._depthNormalsTexture;\r\n    }\r\n\r\n    set depthNormalTexture(value: RenderTexture) {\r\n        this._depthNormalsTexture = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _aftRenderMainPass() {\r\n        // if (needShadowPass)\r\n        //     ILaya3D.Scene3D._shadowCasterPass.cleanUp();\r\n        if (this._cacheDepth && this._internalRenderTexture) {\r\n            if (this._cacheDepthTexture)\r\n                this._cacheDepthTexture._inPool ? 0 : RenderTexture.recoverToPool(this._cacheDepthTexture);\r\n            this._cacheDepthTexture = this._internalRenderTexture;\r\n        }\r\n        else {\r\n            this._internalRenderTexture && RenderTexture.recoverToPool(this._internalRenderTexture);\r\n        }\r\n\r\n        // Camera.depthPass.cleanUp();\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en Create the opaque pass texture.\r\n     * @zh 创建不透明通道纹理。\r\n     */\r\n    _createOpaqueTexture() {\r\n        if (!this._opaqueTexture) {\r\n            let tex = this._getRenderTexture();\r\n            // this._opaqueTexture = RenderTexture.createFromPool(tex.width, tex.height, tex.colorFormat, RenderTargetFormat.None, false, 1, false, true);\r\n            let size = this.opaqueTextureSize;\r\n            this._opaqueTexture = RenderTexture.createFromPool(size, size, tex.colorFormat, RenderTargetFormat.None, true, 1, false, true);\r\n            this._opaqueTexture.filterMode = FilterMode.Bilinear;\r\n            this._opaqueTexture.wrapModeU = WrapMode.Clamp;\r\n            this._opaqueTexture.wrapModeV = WrapMode.Clamp;\r\n            this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE, this._opaqueTexture);\r\n\r\n            let opaqueTexParams = new Vector4();\r\n            opaqueTexParams.x = this._opaqueTexture.width;\r\n            opaqueTexParams.y = this._opaqueTexture.height;\r\n            opaqueTexParams.z = this._opaqueTexture.maxMipmapLevel;\r\n\r\n            this._shaderValues.setVector(BaseCamera.OPAQUETEXTUREPARAMS, opaqueTexParams);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @override\r\n     * @en Render the scene.\r\n     * @param scene The scene to render.\r\n     * @zh 渲染场景。\r\n     * @param scene 要渲染的场景。\r\n     */\r\n    render(scene: Scene3D): void {\r\n        // set context\r\n        let context = RenderContext3D._instance;\r\n        context.scene = scene;\r\n        context.camera = this;\r\n        scene._setCullCamera(this);\r\n\r\n        let viewport = this.viewport;\r\n        let needInternalRT = this._needInternalRenderTexture();\r\n\r\n        // create internal rt if needed\r\n        if (needInternalRT) {\r\n            let multiSampler = this.msaa ? 4 : 1;\r\n            let frameFormat = this._getRenderTextureFormat();\r\n            let depthFormat = this.depthTextureFormat;\r\n            let gamma = this._needRenderGamma(frameFormat);\r\n            let internalRT = RenderTexture.createFromPool(viewport.width, viewport.height, frameFormat, depthFormat, false, multiSampler, this.canblitDepth, gamma);\r\n            internalRT.filterMode = FilterMode.Bilinear;\r\n\r\n            this._internalRenderTexture = internalRT;\r\n        }\r\n        else {\r\n            this._internalRenderTexture = null;\r\n        }\r\n\r\n        if (this.opaquePass && !this._opaqueTexture) {\r\n            this._createOpaqueTexture();\r\n        }\r\n\r\n        context.invertY = false;\r\n        let renderRT = this._getRenderTexture();\r\n        if (renderRT) {\r\n            context.invertY = renderRT._isCameraTarget ? !LayaGL.renderEngine._screenInvertY : false;\r\n        }\r\n\r\n        // camera data \r\n        this._prepareCameraToRender();\r\n        this._applyViewProject(this.viewMatrix, this.projectionMatrix, context.invertY);\r\n        this._contextApply(context);\r\n        // todo proterty name\r\n        if (this._cameraUniformData && this._cameraUniformUBO) {\r\n            this._cameraUniformUBO.setDataByUniformBufferData(this._cameraUniformData);\r\n        }\r\n\r\n        if (this.clearFlag == CameraClearFlags.Sky) {\r\n            scene.skyRenderer.setRenderElement(this.skyRenderElement);\r\n            this.skyRenderElement.renderpre(context);\r\n        }\r\n\r\n        scene._componentDriver.callPreRender();\r\n        this._preRenderMainPass(context, scene, needInternalRT, viewport);\r\n\r\n        let multiLight = Config3D._multiLighting;\r\n        if (multiLight) {\r\n            Cluster.instance.update(this, scene);\r\n        }\r\n        var time = performance.now();//T_CameraRender Stat\r\n        this._Render3DProcess.fowardRender(context._contextOBJ, this);\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_CameraRender] += (performance.now() - time);//Stat\r\n\r\n        scene._componentDriver.callPostRender();\r\n    }\r\n\r\n    /**\r\n     * @en Calculate a ray from screen space.\r\n     * @param point The position in screen space.\r\n     * @param out The output ray.\r\n     * @zh 计算从屏幕空间生成的射线。\r\n     * @param point 屏幕空间的位置位置。\r\n     * @param out  输出射线。\r\n     */\r\n    viewportPointToRay(point: Vector2, out: Ray): void {\r\n        this._rayViewport.x = this.viewport.x;\r\n        this._rayViewport.y = this.viewport.y;\r\n        this._rayViewport.width = ILaya.stage._width;\r\n        this._rayViewport.height = ILaya.stage._height;\r\n        Picker.calculateCursorRay(point, this._rayViewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n    }\r\n\r\n    /**\r\n     * @en Calculate a ray from normalized viewport space.\r\n     * @param point The position in normalized viewport space.\r\n     * @param out The output ray.\r\n     * @zh 计算从归一化视口空间生成的射线。\r\n     * @param point 裁切空间的位置。\r\n     * @param out  输出射线。\r\n     */\r\n    normalizedViewportPointToRay(point: Vector2, out: Ray): void {\r\n        var finalPoint: Vector2 = Camera._tempVector20;\r\n        var vp: Viewport = this.normalizedViewport;\r\n        point.x = point.x * Config3D.pixelRatio;\r\n        point.y = point.y * Config3D.pixelRatio;\r\n        finalPoint.x = point.x * vp.width;\r\n        finalPoint.y = point.y * vp.height;\r\n\r\n        Picker.calculateCursorRay(finalPoint, this.viewport, this._projectionMatrix, this.viewMatrix, null, out);\r\n    }\r\n\r\n    /**\r\n     * @en Transform a point from world space to viewport space.\r\n     * @param position The coordinate in world space.\r\n     * @param out x, y, z are viewport space coordinates, w is the z-axis coordinate relative to the camera.\r\n     * @zh 将一个点从世界空间转换到视口空间。\r\n     * @param position 世界空间的坐标。\r\n     * @param out  x、y、z为视口空间坐标,w为相对于摄像机的z轴坐标。\r\n     */\r\n    worldToViewportPoint(position: Vector3, out: Vector4): void {\r\n        Matrix4x4.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix);\r\n        this.viewport.project(position, this._projectionViewMatrix, out);\r\n        var r = Config3D.pixelRatio;\r\n        let _wr = (out.x - this.viewport.x) / r;\r\n        let _hr = (out.y - this.viewport.y) / r;\r\n        out.x = _wr + this.viewport.x;\r\n        out.y = _hr + this.viewport.y;\r\n\r\n        out.x = (out.x / ILaya.stage.clientScaleX) | 0;\r\n        out.y = (out.y / ILaya.stage.clientScaleY) | 0;\r\n    }\r\n\r\n    /**\r\n     * @en Transform a point from world space to normalized viewport space.\r\n     * @param position The coordinate in world space.\r\n     * @param out x, y, z are normalized viewport space coordinates, w is the z-axis coordinate relative to the camera.\r\n     * @zh 将一个点从世界空间转换到归一化视口空间。\r\n     * @param position 世界空间的坐标。\r\n     * @param out  x、y、z为归一化视口空间坐标,w为相对于摄像机的z轴坐标。\r\n     */\r\n    worldToNormalizedViewportPoint(position: Vector3, out: Vector4): void {\r\n        this.worldToViewportPoint(position, out);\r\n        out.x = out.x / ILaya.stage.width;\r\n        out.y = out.y / ILaya.stage.height;\r\n    }\r\n\r\n    /**\r\n     * @en Convert 2D screen coordinate system to 3D orthographic projection coordinate system. Note: Only valid under orthographic model.\r\n     * @param source The source coordinate.\r\n     * @param out The output coordinate.\r\n     * @returns Whether the conversion was successful.\r\n     * @zh 转换2D屏幕坐标系统到3D正交投影下的坐标系统，注：只有正交模型下有效。\r\n     * @param   source 源坐标。\r\n     * @param   out 输出坐标。\r\n     * @return 是否转换成功。\r\n     */\r\n    convertScreenCoordToOrthographicCoord(source: Vector3, out: Vector3): boolean {//TODO:是否应该使用viewport宽高\r\n        if (this._orthographic) {\r\n            var clientWidth: number = this.clientWidth;\r\n            var clientHeight: number = this.clientHeight;\r\n            var ratioX: number = this.orthographicVerticalSize * this.aspectRatio / clientWidth;\r\n            var ratioY: number = this.orthographicVerticalSize / clientHeight;\r\n            out.x = (-clientWidth / 2 + source.x * ILaya.stage.clientScaleX) * ratioX;\r\n            out.y = (clientHeight / 2 - source.y * ILaya.stage.clientScaleY) * ratioY;\r\n            out.z = (this.nearPlane - this.farPlane) * (source.z + 1) / 2 - this.nearPlane;\r\n            Vector3.transformCoordinate(out, this.transform.worldMatrix, out);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @inheritDoc\r\n     * @en Destroy the Camera node.\r\n     * @param destroyChild Whether to destroy child nodes.\r\n     * @zh 删除Camera节点。\r\n     * @param destroyChild 是否删除子节点\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._shaderValues.destroy();\r\n        this._internalRenderTexture && (!this._internalRenderTexture._inPool) && RenderTexture.recoverToPool(this._internalRenderTexture);\r\n        this._offScreenRenderTexture = null;\r\n        if (this._opaqueTexture) {\r\n            RenderTexture.recoverToPool(this._opaqueTexture);\r\n        }\r\n        this.transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        ILaya.stage.off(Event.RESIZE, this, this._onScreenSizeChanged);\r\n        this._cameraEventCommandBuffer = {};\r\n        if (RenderContext3D._instance.camera == this) {\r\n            RenderContext3D._instance.cameraShaderValue = null;\r\n            RenderContext3D._instance.camera = null;\r\n        }\r\n        super.destroy(destroyChild);\r\n    }\r\n\r\n    /**\r\n     * @en Add a command buffer to the camera's rendering pipeline.\r\n     * @param event The camera event flag.\r\n     * @param commandBuffer The rendering command buffer.\r\n     * @zh 增加camera渲染节点渲染缓存。\r\n     * @param event 相机事件标志\r\n     * @param commandBuffer 渲染命令流\r\n     */\r\n    addCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\r\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\r\n        if (!commandBufferArray) commandBufferArray = this._cameraEventCommandBuffer[event] = [];\r\n        if (commandBufferArray.indexOf(commandBuffer) < 0)\r\n            commandBufferArray.push(commandBuffer);\r\n        commandBuffer._camera = this;\r\n        if (commandBuffer.casterShadow) {\r\n            this._addCasterShadowCommandBuffer(commandBuffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove a command buffer from the camera's rendering pipeline.\r\n     * @param event The camera event flag.\r\n     * @param commandBuffer The rendering command buffer to remove.\r\n     * @zh 移除camera渲染节点渲染缓存。\r\n     * @param event 相机事件标志\r\n     * @param commandBuffer 渲染命令流\r\n     */\r\n    removeCommandBuffer(event: CameraEventFlags, commandBuffer: CommandBuffer): void {\r\n        var commandBufferArray: CommandBuffer[] = this._cameraEventCommandBuffer[event];\r\n        if (commandBufferArray) {\r\n            var index: number = commandBufferArray.indexOf(commandBuffer);\r\n            if (index != -1) commandBufferArray.splice(index, 1);\r\n\r\n            commandBuffer.casterShadow && this._removeCasterShadowCommandBuffer(commandBuffer);\r\n        }\r\n        else\r\n            throw \"Camera:unknown event.\";\r\n    }\r\n\r\n    /**\r\n     * @en Remove all command buffers for a specific camera event.\r\n     * @param event The camera event flag.\r\n     * @zh 移除camera相机节点的所有渲染缓存。\r\n     * @param event 相机事件标志\r\n     */\r\n    removeCommandBuffers(event: CameraEventFlags): void {\r\n        if (this._cameraEventCommandBuffer[event])\r\n            this._cameraEventCommandBuffer[event].length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Camera();\r\n    }\r\n\r\n    /** @internal [NATIVE]*/\r\n    _boundFrustumBuffer: Float32Array;\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Light, LightMode, LightType } from \"./Light\";\r\nexport enum AreaShape {\r\n    rectangle,\r\n    ellipse,\r\n}\r\n/**\r\n * @en The AreaLightCom class is used to create area lights.\r\n * @zh AreaLightCom 类用于创建区域光。\r\n */\r\nexport class AreaLightCom extends Light {\r\n    /**@internal */\r\n    private _areaShape: AreaShape;\r\n\r\n    /**@internal */\r\n    private _power: number;\r\n\r\n    /**@internal */\r\n    private _size: Vector2;\r\n\r\n    /**@internal */\r\n    private _spread: number;\r\n\r\n    /**@internal */\r\n    private _maxBounces: number;\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of AreaLightCom.\r\n     * @zh 创建一个 AreaLightCom 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._lightType = LightType.Area;\r\n        this._lightmapBakedType = LightMode.bakeOnly;\r\n        this._spread = 90;\r\n        this._maxBounces = 1024;\r\n        this._size = new Vector2(1, 1);\r\n        this._areaShape = AreaShape.rectangle;\r\n        this._power = 100;\r\n    }\r\n\r\n    protected _creatModuleData() {\r\n        this._dataModule = {\r\n            transform:null,\r\n            range:0,\r\n            shadowResolution:1,\r\n            shadowDistance:1,\r\n            shadowMode:null,\r\n            shadowStrength:1,\r\n            shadowDepthBias:1,\r\n            shadowNormalBias:1,\r\n            shadowNearPlane:1\r\n        }\r\n\t}\r\n\r\n\r\n    /**\r\n     * @en The lightmap baked type.\r\n     * @zh 灯光烘焙类型。\r\n     */\r\n    get lightmapBakedType(): LightMode {\r\n        return LightMode.bakeOnly;\r\n    }\r\n\r\n    set lightmapBakedType(value: LightMode) {\r\n        this._lightmapBakedType = LightMode.bakeOnly;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The area light shape.\r\n     * @zh 区域光的形状。\r\n     */\r\n    get shape(): AreaShape {\r\n        return this._areaShape;\r\n    }\r\n\r\n    set shape(value: AreaShape) {\r\n        this._areaShape = value;\r\n    }\r\n\r\n    /**\r\n     * @en The light intensity.\r\n     * @zh 光照强度。\r\n     */\r\n    get power() {\r\n        return this._power;\r\n    }\r\n\r\n    set power(value: number) {\r\n        this._power = value;\r\n    }\r\n\r\n    /**\r\n     * @en The size of the area light.\r\n     * @zh 区域光大小。\r\n     */\r\n    get size() {\r\n        return this._size;\r\n    }\r\n\r\n    set size(value: Vector2) {\r\n        value && value.cloneTo(this._size);\r\n    }\r\n\r\n    /**\r\n     * @en The spread angle of the area light.\r\n     * @zh 区域光的辐射角度。\r\n     */\r\n    get spread(): number {\r\n        return this._spread;\r\n    }\r\n\r\n    set spread(value: number) {\r\n        this._spread = Math.min((Math.max(0, value)), 180);\r\n    }\r\n\r\n    /**\r\n     * @en The maximum number of light bounces.\r\n     * @zh 区域光的最大反弹次数。\r\n     */\r\n    get maxBounces() {\r\n        return this._maxBounces;\r\n    }\r\n\r\n    set maxBounces(value: number) {\r\n        this._maxBounces = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _addToLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        //this.range = data.range;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: AreaLightCom): void {\r\n        super._cloneTo(dest);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new AreaLightCom();\r\n    }\r\n}\r\n\r\n","\r\nimport LensFlareVS from \"../../../../shader/files/postProcess/LensFlare/LensFlare.vs\";\r\nimport LensFlareFS from \"../../../../shader/files/postProcess/LensFlare/LensFlare.fs\";\r\nimport { Shader3D, ShaderFeatureType } from \"../../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { SubShader } from \"../../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { Color } from \"../../../../../maths/Color\";\r\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\r\nimport { ShaderDataType } from \"../../../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { RenderState } from \"../../../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\n\r\n/**\r\n * @en Initialize the lens flare element shader.\r\n * @zh 初始化镜头光晕元素着色器\r\n */\r\nexport class LensFlareShaderInit {\r\n    /**\r\n     * @en Initialize the lens flare element shader.\r\n     * @zh 初始化镜头光晕元素着色器\r\n     */\r\n    static init() {\r\n        let attribute: { [name: string]: [number, ShaderDataType] } = {\r\n            'a_PositionTexcoord': [LensFlareElementGeomtry.PositionUV, ShaderDataType.Vector4],\r\n            'a_DistanceRotationScale': [LensFlareElementGeomtry.PositionRotationScale, ShaderDataType.Vector4],\r\n        }\r\n        let uniformMap = {\r\n            \"u_Tint\": ShaderDataType.Color,\r\n            \"u_TintIntensity\": ShaderDataType.Float,\r\n            \"u_FlareTexture\": ShaderDataType.Texture2D,\r\n            \"u_FlareCenter\": ShaderDataType.Vector2,\r\n            \"u_aspectRatio\": ShaderDataType.Float,\r\n            \"u_rotate\": ShaderDataType.Float,\r\n            \"u_Postionoffset\": ShaderDataType.Vector2,\r\n            \"u_Angularoffset\": ShaderDataType.Float,\r\n        }\r\n        let defaultValue = {\r\n            \"u_Tint\": Color.WHITE,\r\n            \"u_aspectRatio\": 1\r\n        }\r\n        let shader = Shader3D.add(\"LensFlare\", true, false);\r\n        shader.shaderType = ShaderFeatureType.PostProcess;\r\n        let subshader = new SubShader(attribute, uniformMap, defaultValue)\r\n        shader.addSubShader(subshader);\r\n        let pass = subshader.addShaderPass(LensFlareVS, LensFlareFS);\r\n        pass.statefirst = true;\r\n        pass.renderState.cull = RenderState.CULL_NONE;\r\n    }\r\n}","#define SHADER_NAME LENSFLARESFS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main(){\r\n      gl_FragColor = texture2D(u_FlareTexture, v_Texcoord0)* u_Tint * u_TintIntensity;\r\n}","import { ShaderDefine } from \"../../../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Color } from \"../../../../../maths/Color\";\r\nimport { Vector2 } from \"../../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../../../resource/BaseTexture\";\r\nimport { RenderTexture } from \"../../../../../resource/RenderTexture\";\r\nimport { Resource } from \"../../../../../resource/Resource\";\r\nimport { Texture2D } from \"../../../../../resource/Texture2D\";\r\nimport { Utils } from \"../../../../../utils/Utils\";\r\nimport { PostProcess } from \"../../../../component/PostProcess\";\r\nimport { Camera } from \"../../../Camera\";\r\nimport { DirectionLightCom } from \"../../../light/DirectionLightCom\";\r\nimport { Light, LightType } from \"../../../light/Light\";\r\nimport { PostProcessEffect } from \"../../PostProcessEffect\";\r\nimport { PostProcessRenderContext } from \"../../PostProcessRenderContext\";\r\nimport { CommandBuffer } from \"../../command/CommandBuffer\";\r\nimport { LensFlareCMD } from \"./LensFlareCMD\";\r\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\r\nimport { LensFlareShaderInit } from \"./LensFlareShaderInit\";\r\n\r\n\r\n/**\r\n * @en lens Flare Element\r\n * @zh 镜头光晕元素\r\n */\r\nexport class LensFlareElement {\r\n    /**@internal active*/\r\n    private _active: boolean = true;\r\n\r\n    /**@internal tintColor */\r\n    private _tint: Color = new Color(1, 1, 1, 1);\r\n\r\n    /**@internal intensity*/\r\n    private _intensity: number = 1;\r\n\r\n    /**@internal texture*/\r\n    private _texture: BaseTexture = Texture2D.whiteTexture;\r\n\r\n    /**@internal positionOffet In screen space */\r\n    private _positionOffset: Vector2 = new Vector2(0, 0);\r\n\r\n    /**@internal scale in each dimension */\r\n    private _scale: Vector2 = new Vector2(1, 1);\r\n\r\n    /**@internal */\r\n    private _autoRotate: boolean = false;\r\n\r\n    /**@internal rotation with angle */\r\n    private _rotation: number = 0;\r\n\r\n    //AxisTransform\r\n    private _startPosition: number = 0.0;\r\n\r\n    private _angularOffset: number = 0;//0-360°\r\n\r\n    // TODO\r\n    /**@internal */\r\n    private _aspectRatio: boolean = false;\r\n    /**@internal */\r\n    private _modulateByLightColor: boolean = false;\r\n    /**@internal */\r\n    private _blendMode: any;\r\n    /**@internal */\r\n    private _translationScale: Vector2 = new Vector2(1, 1);\r\n\r\n    /**\r\n     * @en Whether the element is active.\r\n     * @zh 是否激活\r\n     */\r\n    public get active(): boolean {\r\n        return this._active;\r\n    }\r\n    public set active(value: boolean) {\r\n        this._active = value;\r\n    }\r\n\r\n    /**\r\n     * @en The tint color of the lens flare.\r\n     * @zh 光晕的颜色\r\n     */\r\n    public get tint(): Color {\r\n        return this._tint;\r\n    }\r\n    public set tint(value: Color) {\r\n        this._tint = value;\r\n    }\r\n\r\n    /**\r\n     * @en The intensity of the lens flare.\r\n     * @zh 光晕的强度\r\n     */\r\n    public get intensity(): number {\r\n        return this._intensity;\r\n    }\r\n    public set intensity(value: number) {\r\n        this._intensity = value;\r\n    }\r\n\r\n    /**\r\n     * @en The texture of the lens flare.\r\n     * @zh 光晕的贴图\r\n     */\r\n    public get texture(): BaseTexture {\r\n        return this._texture;\r\n    }\r\n    public set texture(value: BaseTexture) {\r\n        this._texture = value;\r\n    }\r\n\r\n    /**\r\n     * @en The position offset of the lens flare in screen space.\r\n     * @zh 光晕的位置偏移(屏幕空间下)\r\n     */\r\n    public get positionOffset(): Vector2 {\r\n        return this._positionOffset;\r\n    }\r\n    public set positionOffset(value: Vector2) {\r\n        this._positionOffset = value;\r\n    }\r\n\r\n    /**\r\n     * @en The scale of the lens flare in each dimension.\r\n     * @zh 光晕的缩放(每个轴上)\r\n     */\r\n    public get scale(): Vector2 {\r\n        return this._scale;\r\n    }\r\n    public set scale(value: Vector2) {\r\n        this._scale = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to enable automatic rotation.\r\n     * @zh 是否开启自动旋转\r\n     */\r\n    public get autoRotate(): boolean {\r\n        return this._autoRotate;\r\n    }\r\n    public set autoRotate(value: boolean) {\r\n        this._autoRotate = value;\r\n    }\r\n\r\n    /**\r\n     * @en The rotation of the lens flare.\r\n     * @zh 光晕的旋转角度\r\n     */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n    public set rotation(value: number) {\r\n        this._rotation = value;\r\n    }\r\n\r\n    /**\r\n     * @en The start position of the lens flare.\r\n     * @zh 光晕的起始位置\r\n     */\r\n    public get startPosition(): number {\r\n        return this._startPosition;\r\n    }\r\n    public set startPosition(value: number) {\r\n        this._startPosition = value;\r\n    }\r\n\r\n    /**\r\n     * @en The angle offset of the lens flare.\r\n     * @zh 光晕的角度偏移\r\n     */\r\n    public get angularOffset(): number {\r\n        return this._angularOffset;\r\n    }\r\n    public set angularOffset(value: number) {\r\n        this._angularOffset = value;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @en Lens Flare Data \r\n * @zh 镜头光晕的资源数据\r\n */\r\nexport class LensFlareData extends Resource {\r\n    constructor() {\r\n        super(false);\r\n    }\r\n\r\n    /**\r\n     * @en Lens Flare Element Collection\r\n     * @zh 镜头光晕元素集合\r\n     */\r\n    elements: LensFlareElement[] = [];\r\n}\r\n\r\n/**\r\n * @en Lens Flare Effect\r\n * @zh 镜头光晕效果\r\n */\r\nexport class LensFlareEffect extends PostProcessEffect {\r\n    /**@interal */\r\n    static SHADERDEFINE_AUTOROTATE: ShaderDefine;\r\n\r\n    /**\r\n     * @internal\r\n     * initdefine\r\n     */\r\n    static __initDefine__() {\r\n        LensFlareEffect.SHADERDEFINE_AUTOROTATE = Shader3D.getDefineByName(\"LENSFLAREAUTOROTATE\");\r\n    }\r\n\r\n    /**\r\n     * @en Initialize Shader and Geometry\r\n     * @zh 初始化着色器和几何体\r\n     */\r\n    static init() {\r\n        LensFlareElementGeomtry.init();\r\n        LensFlareShaderInit.init();\r\n        LensFlareEffect.__initDefine__();\r\n    }\r\n\r\n    /**@internal */\r\n    private _tempV3: Vector3;\r\n\r\n    /**@internal */\r\n    private _tempV4: Vector4;\r\n\r\n    /**@internal */\r\n    private _flareCMDS: LensFlareCMD[];\r\n\r\n    /**@internal */\r\n    private _center: Vector2;\r\n\r\n    /**@internal */\r\n    private _rotate: number\r\n\r\n    /**@internal */\r\n    private _light: Light;\r\n\r\n    /**@internal */\r\n    private _effectIntensity: number = 1;\r\n\r\n    /**@internal */\r\n    private _effectScale: number = 1;\r\n\r\n    /**@internal */\r\n    private _needUpdate: boolean = false;\r\n\r\n    /**@internal */\r\n    _lensFlareData: LensFlareData;\r\n\r\n    /**\r\n     * @en LensFlareData\r\n     * @zh 镜头光晕数据\r\n     */\r\n    get lensFlareData(): LensFlareData {\r\n        return this._lensFlareData;\r\n    }\r\n\r\n    set lensFlareData(value: LensFlareData) {\r\n        if (!value) return;\r\n        this._flareCMDS.length = 0;\r\n        for (let i = 0; i < value.elements.length; i++) {\r\n            let ele = value.elements[i];\r\n            if (!ele.active) continue;\r\n            var cmd = new LensFlareCMD();\r\n            cmd.lensFlareElement = ele;\r\n            this._flareCMDS.push(cmd);\r\n        }\r\n        this._lensFlareData = value;\r\n        this._needUpdate = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Bind light\r\n     * @zh 绑定光源\r\n     */\r\n    get bindLight(): Light {\r\n        return this._light;\r\n    }\r\n\r\n    set bindLight(light: Light) {\r\n        if (!light)\r\n            return;\r\n        this._light = light;//TODO\r\n        this._needUpdate = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Post-processing effect intensity\r\n     * @zh 后处理效果强度\r\n     */\r\n    public get effectIntensity(): number {\r\n        return this._effectIntensity;\r\n    }\r\n    public set effectIntensity(value: number) {\r\n        this._effectIntensity = value;\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Post-processing effect scale\r\n     * @zh 后处理效果缩放\r\n     */\r\n    public get effectScale(): number {\r\n        return this._effectScale;\r\n    }\r\n    public set effectScale(value: number) {\r\n        this._effectScale = value;\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.singleton = false;\r\n        this._flareCMDS = [];\r\n        this._flareCMDS.push(new LensFlareCMD());\r\n        this._center = new Vector2();\r\n        this._tempV3 = new Vector3();\r\n        this._tempV4 = new Vector4();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 更新后处理数据\r\n     */\r\n    _updateEffectData(cmd: CommandBuffer) {\r\n        if (this._flareCMDS.length == 0) return;\r\n        for (let i = 0; i < this._flareCMDS.length; i++) {\r\n            this._flareCMDS[i].center = this._center;//set center\r\n            this._flareCMDS[i].rotate = this._rotate;//set rotate\r\n            if (this._needUpdate) {\r\n                let cmdEle = this._flareCMDS[i].lensFlareElement;\r\n                if (!cmdEle) continue;\r\n                cmdEle.intensity *= this.effectIntensity;\r\n                let scale = cmdEle.scale;\r\n                scale.setValue(scale.x * this.effectScale, scale.y * this.effectScale);\r\n                cmdEle.scale = scale;\r\n                this._flareCMDS[i].applyElementData();\r\n            }\r\n            this._flareCMDS[i].run(cmd);\r\n        }\r\n        this._needUpdate = false;\r\n    }\r\n\r\n    /**\r\n     * @en Calculate the center point of directional light\r\n     * @param camera The camera\r\n     * @zh 计算直射光中心点\r\n     * @param camera 摄像机\r\n     */\r\n    caculateDirCenter(camera: Camera) {\r\n        //center caculate start\r\n        // lightDirection\r\n        (this._light as DirectionLightCom).direction.cloneTo(this._tempV3);\r\n        // lightDir revert\r\n        Vector3.scale(this._tempV3, -10, this._tempV3);\r\n        // offset of light to camera\r\n        Vector3.add(camera.transform.position, this._tempV3, this._tempV3);\r\n        // to screen space\r\n        Vector3.transformV3ToV4(this._tempV3, camera.projectionViewMatrix, this._tempV4);\r\n        // normalize x\\y coordinate\r\n        this._center.setValue(this._tempV4.x / this._tempV4.w, this._tempV4.y / this._tempV4.w);\r\n        // angle caculatge\r\n        var angle: number = Utils.toAngle(Math.atan2(this._center.x, this._center.y));\r\n        // angle round\r\n        angle = (angle < 0) ? angle + 360 : angle;\r\n        angle = Math.round(angle);\r\n        this._rotate = Math.PI * 2.0 - Math.PI / 180 * angle;\r\n    }\r\n\r\n    /**\r\n     * @en Calculate point light\r\n     * @param camera The camera\r\n     * @zh 计算点光源\r\n     * @param camera 相机\r\n     */\r\n    caculatePointCenter(camera: Camera) {\r\n        //TODO\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Calculate spot light\r\n     * @param value Screen point\r\n     * @zh 计算聚光灯\r\n     * @param value 屏幕点\r\n     */\r\n    caculateSpotCenter(value: Vector2) {\r\n        //TODO\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Render process\r\n     * @param context Post-processing render context\r\n     * @zh 渲染流程\r\n     * @param context 后期处理渲染上下文\r\n     */\r\n    render(context: PostProcessRenderContext) {\r\n        var cmd: CommandBuffer = context.command;\r\n        let source: RenderTexture = context.indirectTarget;\r\n        cmd.setRenderTarget(source, false, false);\r\n        if (!this._light)\r\n            return;\r\n        switch (this._light.lightType) {\r\n            case LightType.Directional:\r\n                this.caculateDirCenter(context.camera);\r\n                break;\r\n            case LightType.Point:\r\n                //TODO\r\n                break;\r\n            case LightType.Spot:\r\n                //TODO\r\n                break;\r\n        }\r\n        if (Math.abs(this._center.x) > 1.0 || Math.abs(this._center.y) > 1.0) return;\r\n        this._updateEffectData(cmd);\r\n        cmd.blitScreenQuad(source, context.destination);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Release the effect\r\n     * @param postprocess Post-processing node\r\n     * @zh 释放效果\r\n     * @param postprocess 后期处理节点\r\n     */\r\n    release(postprocess: PostProcess) {\r\n        //TODO\r\n        this._needUpdate = false;\r\n    }\r\n}","import { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @en The PixelLineMaterial class is used to implement pixel line material.\r\n * @zh PixelLineMaterial 类用于实现像素线材质。\r\n */\r\nexport class PixelLineMaterial extends Material {\r\n\t/**@internal */\r\n\tstatic COLOR: number;\r\n\r\n\t/** \r\n\t * @en Default material, no modification allowed\r\n\t * @zh 默认材质，禁止修改\r\n\t */\r\n\tstatic defaultMaterial: Material;\r\n\r\n\t/**\r\n\t* @internal\r\n\t*/\r\n\tstatic __initDefine__(): void {\r\n\t\tPixelLineMaterial.COLOR = Shader3D.propertyNameToID(\"u_Color\");\r\n\t}\r\n\r\n\t/**\r\n\t * @en The color of the pixel line.\r\n\t * @zh 像素线的颜色。\r\n\t */\r\n\tget color(): Vector4 {\r\n\t\treturn (<Vector4>this._shaderValues.getVector(PixelLineMaterial.COLOR));\r\n\t}\r\n\r\n\tset color(value: Vector4) {\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Initialize PixelLineMaterial instance.\r\n\t * @zh 初始化PixelLineMaterial实例\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"LineShader\");\r\n\t\tthis._shaderValues.setVector(PixelLineMaterial.COLOR, new Vector4(1.0, 1.0, 1.0, 1.0));\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: PixelLineMaterial = new PixelLineMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n","import { ILaya } from \"../../../ILaya\";\r\nimport { EPhysicsStatisticsInfo } from \"../physicsEnum/EPhysicsStatisticsInfo\";\r\n\r\nexport class Physics3DStatInfo {\r\n    private static _PhysicsStatisticsInfo: Map<EPhysicsStatisticsInfo, number> = new Map();\r\n\r\n    /**\r\n     * @en enable Physics Statistics\r\n     * @zh 启动物理统计信息\r\n     */\r\n    static enableStatistics: boolean = false;\r\n\r\n    /**\r\n     * @en enable Frame ClearData\r\n     * @zh 是否每帧自动清理\r\n     */\r\n    static autoFrameClear: boolean = false;\r\n\r\n    /**\r\n     * @en Initialize Physical Statistics Map\r\n     * @zh 初始化物理统计信息表\r\n     */\r\n    static initStatisticsInfo(): void {\r\n        for (let i = 0; i < EPhysicsStatisticsInfo.Count; i++) {\r\n            this._PhysicsStatisticsInfo.set(i, 0);\r\n        }\r\n        if (Physics3DStatInfo.enableStatistics && Physics3DStatInfo.autoFrameClear) {\r\n            ILaya.timer.frameLoop(1, null, Physics3DStatInfo.clearStatisticsInfo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Set Physical Statistics Values\r\n     * @param info Physical Statistics Enumeration\r\n     * @param value value\r\n     * @zh 设置物理统计信息值\r\n     * @param info 物理统计信息枚举\r\n     * @param value 值\r\n     */\r\n    static addStatisticsInfo(info: EPhysicsStatisticsInfo, value: number): void {\r\n        Physics3DStatInfo.enableStatistics && (Physics3DStatInfo._PhysicsStatisticsInfo.set(info, Physics3DStatInfo._PhysicsStatisticsInfo.get(info) + value))\r\n    }\r\n\r\n    /**\r\n     * @en Get Physical Statistics Values\r\n     * @param info Physical Statistics Enumeration\r\n     * @returns Physical Statistics value\r\n     * @zh 获取物理统计信息值\r\n     * @param info 物理统计信息枚举\r\n     * @returns 物理统计信息值\r\n     */\r\n    static getStatisticsInfo(info: EPhysicsStatisticsInfo): number {\r\n        let value = 0;\r\n        if (Physics3DStatInfo.enableStatistics) {\r\n            value = Physics3DStatInfo._PhysicsStatisticsInfo.get(info)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @en Per Frame Cleanup of Physical Statistics\r\n     * @zh 每帧清理物理统计信息\r\n     */\r\n    static clearStatisticsInfo(): void {\r\n        if (Physics3DStatInfo.enableStatistics) {\r\n            for (let i = 0; i < EPhysicsStatisticsInfo.FrameClearCount; i++) {\r\n                Physics3DStatInfo._PhysicsStatisticsInfo.set(i, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Stop Statistics\r\n     * @zh 停止统计信息\r\n     */\r\n    static stopAndClearAllStatisticsInfo(): void {\r\n        for (let i = 0; i < EPhysicsStatisticsInfo.Count; i++) {\r\n            this._PhysicsStatisticsInfo.set(i, 0);\r\n        }\r\n        if (Physics3DStatInfo.enableStatistics && Physics3DStatInfo.autoFrameClear) {\r\n            ILaya.timer.clear(null, Physics3DStatInfo.clearStatisticsInfo);\r\n        }\r\n    }\r\n}","import { Config3D } from \"./Config3D\";\r\nimport { ILaya3D } from \"./ILaya3D\";\r\nimport { PostProcess } from \"./laya/d3/component/PostProcess\";\r\nimport { BlinnPhongMaterial } from \"./laya/d3/core/material/BlinnPhongMaterial\";\r\nimport { PBRMaterial } from \"./laya/d3/core/material/PBRMaterial\";\r\nimport { PBRStandardMaterial } from \"./laya/d3/core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./laya/d3/core/material/SkyBoxMaterial\";\r\nimport { SkyProceduralMaterial } from \"./laya/d3/core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./laya/d3/core/material/UnlitMaterial\";\r\nimport { MeshRenderer } from \"./laya/d3/core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./laya/d3/core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./laya/d3/core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { PixelLineVertex } from \"./laya/d3/core/pixelLine/PixelLineVertex\";\r\nimport { Command } from \"./laya/d3/core/render/command/Command\";\r\nimport { RenderContext3D } from \"./laya/d3/core/render/RenderContext3D\";\r\nimport { ScreenQuad } from \"./laya/d3/core/render/ScreenQuad\";\r\nimport { RenderableSprite3D } from \"./laya/d3/core/RenderableSprite3D\";\r\nimport { Scene3D } from \"./laya/d3/core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"./laya/d3/core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"./laya/d3/core/Sprite3D\";\r\nimport { TrailMaterial } from \"./laya/d3/core/trail/TrailMaterial\";\r\nimport { VertexTrail } from \"./laya/d3/core/trail/VertexTrail\";\r\nimport { SubMeshInstanceBatch } from \"./laya/d3/graphics/SubMeshInstanceBatch\";\r\nimport { VertexPositionTerrain } from \"./laya/d3/graphics/Vertex/VertexPositionTerrain\";\r\nimport { VertexPositionTexture0 } from \"./laya/d3/graphics/Vertex/VertexPositionTexture0\";\r\nimport { VertexShurikenParticleBillboard } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleBillboard\";\r\nimport { VertexShurikenParticleMesh } from \"./laya/d3/graphics/Vertex/VertexShurikenParticleMesh\";\r\nimport { Mesh } from \"./laya/d3/resource/models/Mesh\";\r\nimport { PrimitiveMesh } from \"./laya/d3/resource/models/PrimitiveMesh\";\r\nimport { SkyBox } from \"./laya/d3/resource/models/SkyBox\";\r\nimport { SkyDome } from \"./laya/d3/resource/models/SkyDome\";\r\nimport { TextureCube } from \"./laya/resource/TextureCube\";\r\nimport { ShaderInit3D } from \"./laya/d3/shader/ShaderInit3D\";\r\nimport { Texture2D } from \"./laya/resource/Texture2D\";\r\nimport { WebGL } from \"./laya/webgl/WebGL\";\r\nimport { ShadowUtils } from \"./laya/d3/core/light/ShadowUtils\";\r\nimport { ShadowCasterPass } from \"./laya/d3/shadowMap/ShadowCasterPass\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./laya/d3/core/SimpleSkinnedMeshSprite3D\";\r\nimport { HalfFloatUtils } from \"./laya/utils/HalfFloatUtils\";\r\nimport { Camera } from \"./laya/d3/core/Camera\";\r\nimport { BaseCamera } from \"./laya/d3/core/BaseCamera\";\r\nimport { ShuriKenParticle3DShaderDeclaration } from \"./laya/d3/core/particleShuriKen/ShuriKenParticle3DShaderDeclaration\";\r\nimport { BaseRender } from \"./laya/d3/core/render/BaseRender\";\r\nimport { TrailFilter } from \"./laya/d3/core/trail/TrailFilter\";\r\nimport { DepthPass } from \"./laya/d3/depthMap/DepthPass\";\r\nimport { RenderCapable } from \"./laya/RenderEngine/RenderEnum/RenderCapable\";\r\nimport { BlitFrameBufferCMD } from \"./laya/d3/core/render/command/BlitFrameBufferCMD\";\r\nimport { SkyRenderer } from \"./laya/d3/resource/models/SkyRenderer\";\r\nimport { SkyPanoramicMaterial } from \"./laya/d3/core/material/SkyPanoramicMaterial\";\r\nimport { BloomEffect } from \"./laya/d3/core/render/PostEffect/BloomEffect\";\r\nimport { ScalableAO } from \"./laya/d3/core/render/PostEffect/ScalableAO\";\r\nimport { GaussianDoF } from \"./laya/d3/core/render/PostEffect/GaussianDoF\";\r\nimport { VertexMesh } from \"./laya/RenderEngine/RenderShader/VertexMesh\";\r\nimport { ColorGradEffect } from \"./laya/d3/core/render/PostEffect/ColorGradEffect\";\r\nimport { LensFlareEffect } from \"./laya/d3/core/render/PostEffect/LensFlares/LensFlareEffect\";\r\nimport { IPhysicsCreateUtil } from \"./laya/Physics3D/interface/IPhysicsCreateUtil\";\r\nimport { LayaGL } from \"./laya/layagl/LayaGL\";\r\nimport { Laya } from \"./Laya\";\r\nimport { PixelLineMaterial } from \"./laya/d3/core/pixelLine/PixelLineMaterial\";\r\nimport { Texture2DArray } from \"./laya/resource/Texture2DArray\";\r\nimport { PlayerConfig } from \"./Config\";\r\nimport { Physics3DStatInfo } from \"./laya/Physics3D/interface/Physics3DStatInfo\";\r\n\r\n/**\r\n * @en Laya3D class is used to initialize 3D settings.\r\n * @zh Laya3D类用于初始化3D设置。\r\n */\r\nexport class Laya3D {\r\n    /**\r\n     * @en Physics creation manager.\r\n     * @zh 物理创建管理器。\r\n     */\r\n    static _PhysicsCreateUtil: IPhysicsCreateUtil;\r\n\r\n    /**@internal */\r\n    static _enablePhysics: boolean = false;\r\n\r\n    /**\r\n     * @en The physics creation manager.\r\n     * @zh 物理创建管理器。\r\n     */\r\n    static get PhysicsCreateUtil() {\r\n        return this._PhysicsCreateUtil;\r\n    }\r\n    static set PhysicsCreateUtil(value: IPhysicsCreateUtil) {\r\n        if (value && !Laya3D._PhysicsCreateUtil) {\r\n            Laya3D._PhysicsCreateUtil = value;\r\n            Laya3D._enablePhysics = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether physics is enabled.\r\n     * @zh 是否启用物理。\r\n     * @returns {boolean} True if physics is enabled, false otherwise.\r\n     * @returns {boolean} 如果启用了物理则返回true，否则返回false。\r\n     */\r\n    static get enablePhysics(): any {\r\n        return Laya3D._enablePhysics;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static _changeWebGLSize(width: number, height: number): void {\r\n        WebGL.onStageResize(width, height);\r\n        RenderContext3D.clientWidth = width;\r\n        RenderContext3D.clientHeight = height;\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n     */\r\n    static __init__() {\r\n        Config3D._multiLighting = Config3D.enableMultiLight && LayaGL.renderEngine.getCapable(RenderCapable.TextureFormat_R32G32B32A32);\r\n        Config3D._uniformBlock = Config3D.enableUniformBufferObject && LayaGL.renderEngine.getCapable(RenderCapable.UnifromBufferObject);\r\n\r\n        if (Config3D.maxLightCount > 2048) {\r\n            Config3D.maxLightCount = 2048;\r\n            console.warn(\"Config3D: maxLightCount must less equal 2048.\");\r\n        }\r\n\r\n        let lcc = Config3D.lightClusterCount;\r\n        if (lcc.x > 128 || lcc.y > 128 || lcc.z > 128) {\r\n            lcc.setValue(Math.min(lcc.x, 128), Math.min(lcc.y, 128), Math.min(lcc.z, 128));\r\n            console.warn(\"Config3D: lightClusterCount X and Y、Z must less equal 128.\");\r\n        }\r\n\r\n        let maxAreaLightCountWithZ = Math.floor(2048 / Config3D.lightClusterCount.z - 1) * 4;\r\n        if (maxAreaLightCountWithZ < Config3D.maxLightCount)\r\n            console.warn(\"Config3D: if the area light(PointLight、SpotLight) count is large than \" + maxAreaLightCountWithZ + \",maybe the far away culster will ingonre some light.\");\r\n        Config3D._maxAreaLightCountPerClusterAverage = Math.min(maxAreaLightCountWithZ, Config3D.maxLightCount);\r\n\r\n        ILaya3D.Scene3D = Scene3D;\r\n        ILaya3D.Laya3D = Laya3D;\r\n        VertexMesh.__init__();\r\n        VertexShurikenParticleBillboard.__init__();\r\n        VertexShurikenParticleMesh.__init__();\r\n        VertexPositionTexture0.__init__();\r\n        VertexTrail.__init__();\r\n        VertexPositionTerrain.__init__();\r\n        PixelLineVertex.__init__();\r\n        SubMeshInstanceBatch.__init__();\r\n        ShaderInit3D.__init__();\r\n        ShuriKenParticle3DShaderDeclaration.__init__();\r\n        PBRMaterial.__init__();\r\n        PBRStandardMaterial.__init__();\r\n        SkyPanoramicMaterial.__init__();\r\n        BloomEffect.init();\r\n        ScalableAO.init();\r\n        GaussianDoF.init();\r\n        ColorGradEffect.init();\r\n        LensFlareEffect.init();\r\n\r\n        Mesh.__init__();\r\n        PrimitiveMesh.__init__();\r\n        Sprite3D.__init__();\r\n        RenderableSprite3D.__init__();\r\n        MeshSprite3D.__init__();\r\n        DepthPass.__init__();\r\n        SkinnedMeshSprite3D.__init__();\r\n        SimpleSkinnedMeshSprite3D.__init__();\r\n        TrailFilter.__init__();\r\n        ShuriKenParticle3D.__init__();\r\n        PostProcess.__init__();\r\n        Scene3D.__init__();\r\n        ShadowCasterPass.__init__();\r\n        BaseCamera.__init__();\r\n        BaseRender.__init__();\r\n        MeshRenderer.__init__();\r\n        SkyRenderer.__init__();\r\n        Camera.__init__();\r\n        ShadowUtils.init();\r\n        RenderContext3D.__init__();\r\n        BlinnPhongMaterial.__initDefine__();\r\n        SkyProceduralMaterial.__initDefine__();\r\n        UnlitMaterial.__initDefine__();\r\n        TrailMaterial.__initDefine__();\r\n        ShurikenParticleMaterial.__initDefine__();\r\n        SkyBoxMaterial.__initDefine__();\r\n        Command.__init__();\r\n        BlitFrameBufferCMD.__init__();\r\n        BlinnPhongMaterial.defaultMaterial = new BlinnPhongMaterial();\r\n        BlinnPhongMaterial.defaultMaterial.lock = true;\r\n        UnlitMaterial.defaultMaterial = new UnlitMaterial();\r\n        UnlitMaterial.defaultMaterial.lock = true;\r\n        let pixelLineMaterial = new UnlitMaterial();\r\n        pixelLineMaterial.lock = true;\r\n        pixelLineMaterial.enableVertexColor = true;\r\n        PixelLineMaterial.defaultMaterial = pixelLineMaterial;\r\n        TrailMaterial.defaultMaterial = new TrailMaterial();\r\n        TrailMaterial.defaultMaterial.lock = true;\r\n        Texture2D.__init__();\r\n        TextureCube.__init__();\r\n        Texture2DArray.__init__();\r\n        SkyBox.__init__();\r\n        SkyDome.__init__();\r\n        ScreenQuad.__init__();\r\n        HalfFloatUtils.__init__();\r\n    }\r\n\r\n    /**\r\n     *@internal\r\n    */\r\n    static __initPhysics__(): Promise<void> {\r\n        if (!Laya3D._PhysicsCreateUtil) {\r\n            Laya3D._enablePhysics = false;\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            Laya3D._enablePhysics = true;\r\n            Physics3DStatInfo.initStatisticsInfo();\r\n            if (PlayerConfig.physics3D)\r\n                Object.assign(Scene3D.physicsSettings, PlayerConfig.physics3D);\r\n            return Laya3D._PhysicsCreateUtil.initialize();\r\n        }\r\n    }\r\n}\r\n\r\n(window as any).Laya3D = Laya3D;\r\nLaya.addInitCallback(() => Laya3D.__initPhysics__());","import { Node } from \"../../../display/Node\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { ShadowMode } from \"./ShadowMode\";\r\nimport { Light, LightMode } from \"./Light\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\n\r\n/**\r\n * @ignore\r\n * @deprecated\r\n * <code>LightSprite</code> 类用于创建灯光的父类。\r\n */\r\nexport class LightSprite extends Sprite3D {\r\n\t/** @internal */\r\n\t_light: Light;\r\n\t/**\r\n\t * 灯光颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn this._light.color;\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis._light.color = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光烘焙模式\r\n\t */\r\n\tget mode(): LightMode {\r\n\t\treturn this._light.lightmapBakedType;\r\n\t}\r\n\r\n\tset mode(value: LightMode) {\r\n\t\tthis._light.lightmapBakedType = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光强度。\r\n\t */\r\n\tget intensity(): number {\r\n\t\treturn this._light.intensity;\r\n\t}\r\n\r\n\tset intensity(value: number) {\r\n\t\tthis._light.intensity = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影模式。\r\n\t */\r\n\tget shadowMode(): ShadowMode {\r\n\t\treturn this._light.shadowMode;\r\n\t}\r\n\r\n\tset shadowMode(value: ShadowMode) {\r\n\t\tthis._light.shadowMode = value\r\n\t}\r\n\r\n\t/**\r\n\t * 最大阴影距离。\r\n\t */\r\n\tget shadowDistance(): number {\r\n\t\treturn this._light.shadowDistance;\r\n\t}\r\n\r\n\tset shadowDistance(value: number) {\r\n\t\tthis._light.shadowDistance = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影贴图分辨率。\r\n\t */\r\n\tget shadowResolution(): number {\r\n\t\treturn this._light.shadowResolution;\r\n\t}\r\n\r\n\tset shadowResolution(value: number) {\r\n\t\tthis._light.shadowResolution = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影深度偏差。\r\n\t */\r\n\tget shadowDepthBias(): number {\r\n\t\treturn this._light.shadowDepthBias;\r\n\t}\r\n\r\n\tset shadowDepthBias(value: number) {\r\n\t\tthis._light.shadowDepthBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影法线偏差。\r\n\t */\r\n\tget shadowNormalBias(): number {\r\n\t\treturn this._light.shadowNormalBias;\r\n\t}\r\n\r\n\tset shadowNormalBias(value: number) {\r\n\t\tthis._light.shadowNormalBias = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影强度。\r\n\t */\r\n\tget shadowStrength(): number {\r\n\t\treturn this._light.shadowStrength;\r\n\t}\r\n\r\n\tset shadowStrength(value: number) {\r\n\t\tthis._light.shadowStrength = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 阴影视锥的近裁面。\r\n\t */\r\n\tget shadowNearPlane(): number {\r\n\t\treturn this._light.shadowNearPlane;\r\n\t}\r\n\r\n\tset shadowNearPlane(value: number) {\r\n\t\tthis._light.shadowNearPlane = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 灯光烘培类型。\r\n\t */\r\n\tget lightmapBakedType(): number {\r\n\t\treturn this._light.lightmapBakedType;\r\n\t}\r\n\r\n\tset lightmapBakedType(value: number) {\r\n\t\tthis._light.lightmapBakedType = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取灯光世界矩阵\r\n\t */\r\n\tget lightWorldMatrix(): Matrix4x4 {\r\n\t\treturn this._light.lightWorldMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>LightSprite</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tvar colorData: any[] = data.color;\r\n\t\tthis.color.r = colorData[0];\r\n\t\tthis.color.g = colorData[1];\r\n\t\tthis.color.b = colorData[2];\r\n\t\tthis.intensity = data.intensity;\r\n\t\tthis.lightmapBakedType = data.lightmapBakedType;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(destObject: any, rootSprite: Node, dstSprite: Node) {\r\n\t\tsuper._cloneTo(destObject, rootSprite, dstSprite);\r\n\t\tvar spriteLight = <LightSprite>destObject;\r\n\t\tspriteLight.color = this.color.clone();\r\n\t\tspriteLight.intensity = this.intensity;\r\n\t\tspriteLight.lightmapBakedType = this.lightmapBakedType;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Node {\r\n\t\treturn new Sprite3D();\r\n\t}\r\n}\r\n\r\n","import { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { UnlitMaterial } from \"./UnlitMaterial\";\r\n\r\n/**\r\n * @en The AffectMaterial class is used to implement Mesh effect materials.\r\n * @zh EffectMaterial 类用于实现Mesh特效材质。\r\n */\r\nexport class EffectMaterial extends Material {\r\n\t/**\r\n\t * @en Default material, no modification allowed\r\n\t * @zh 默认材质，禁止修改\r\n\t */\r\n\tstatic defaultMaterial: EffectMaterial;\r\n\r\n\t/**\r\n\t * @en The color of the material.\r\n\t * @zh 材质的颜色。\r\n\t */\r\n\tget color(): Color {\r\n\t\treturn (<Color>this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR));\r\n\t}\r\n\r\n\tset color(value: Color) {\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The texture of the material.\r\n\t * @zh 材质的贴图。\r\n\t */\r\n\tget texture(): BaseTexture {\r\n\t\treturn this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE);\r\n\t}\r\n\r\n\tset texture(value: BaseTexture) {\r\n\t\tif (value)\r\n\t\t\tthis.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\telse\r\n\t\t\tthis.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n\t\tthis.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @en The tiling and offset values for the material's textures.\r\n\t * @zh 材质纹理的平铺和偏移值。\r\n\t */\r\n\tget tilingOffset(): Vector4 {\r\n\t\treturn (<Vector4>this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET));\r\n\t}\r\n\r\n\tset tilingOffset(value: Vector4) {\r\n\t\tif (value) {\r\n\t\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.getVector4ByIndex(UnlitMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of EffectMaterial.\r\n\t * @zh 创建EffectMaterial实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"Unlit\");\r\n\t\tthis.setVector4ByIndex(UnlitMaterial.TILINGOFFSET, new Vector4(1.0, 1.0, 0.0, 0.0));\r\n\t\tthis.setColorByIndex(UnlitMaterial.ALBEDOCOLOR, new Color(1.0, 1.0, 1.0, 1.0));\r\n\t\tthis.renderMode = EffectMaterial.RENDERMODE_ADDTIVE;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @en Clone the material.\r\n\t * @returns A clone of the material.\r\n\t * @zh 克隆材质。\r\n\t * @returns 克隆的材质副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: EffectMaterial = new EffectMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t//----------------deprecated----------------\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_加色法混合。\r\n\t */\r\n\tstatic RENDERMODE_ADDTIVE: number = 0;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_ALPHABLENDED: number = 1;\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * 设置渲染模式。\r\n\t * 可以使用新的渲染状态\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase EffectMaterial.RENDERMODE_ADDTIVE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tthis.addDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tcase EffectMaterial.RENDERMODE_ALPHABLENDED:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_TRANSPARENT;\r\n\t\t\t\tthis.alphaTest = false;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_NONE;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tthis.removeDefine(Material.SHADERDEFINE_ADDTIVEFOG);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"MeshEffectMaterial : renderMode value error.\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { Material } from \"../../../resource/Material\";\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class ExtendTerrainMaterial extends Material {\r\n\t/**渲染状态_不透明。*/\r\n\tstatic RENDERMODE_OPAQUE: number = 1;\r\n\t/**渲染状态_透明混合。*/\r\n\tstatic RENDERMODE_TRANSPARENT: number = 2;\r\n\r\n\t/**@internal */\r\n\tstatic SPLATALPHATEXTURE: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE1: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE2: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE3: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE4: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSETEXTURE5: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET1: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET2: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET3: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET4: number;\r\n\t/**@internal */\r\n\tstatic DIFFUSESCALEOFFSET5: number;\r\n\r\n\t/**地形细节宏定义。*/\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM1: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM2: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM3: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM4: ShaderDefine;\r\n\t/**@internal */\r\n\tstatic SHADERDEFINE_DETAIL_NUM5: ShaderDefine;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __initDefine__(): void {\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM1\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM2\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM3\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM4\");\r\n\t\tExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5 = Shader3D.getDefineByName(\"ExtendTerrain_DETAIL_NUM5\");\r\n\r\n\t\tExtendTerrainMaterial.SPLATALPHATEXTURE = Shader3D.propertyNameToID(\"u_SplatAlphaTexture\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE1 = Shader3D.propertyNameToID(\"u_DiffuseTexture1\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE2 = Shader3D.propertyNameToID(\"u_DiffuseTexture2\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE3 = Shader3D.propertyNameToID(\"u_DiffuseTexture3\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE4 = Shader3D.propertyNameToID(\"u_DiffuseTexture4\");\r\n\t\tExtendTerrainMaterial.DIFFUSETEXTURE5 = Shader3D.propertyNameToID(\"u_DiffuseTexture5\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET1 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset1\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET2 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset2\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET3 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset3\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET4 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset4\");\r\n\t\tExtendTerrainMaterial.DIFFUSESCALEOFFSET5 = Shader3D.propertyNameToID(\"u_DiffuseScaleOffset5\");\r\n\t}\r\n\t/**\r\n\t * splatAlpha贴图。\r\n\t */\r\n\tget splatAlphaTexture(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE);\r\n\t}\r\n\r\n\tset splatAlphaTexture(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE, value);\r\n\t}\r\n\r\n\t/**\r\n\t * 第一层贴图。\r\n\t */\r\n\tget diffuseTexture1(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1);\r\n\t}\r\n\r\n\tset diffuseTexture1(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1, value);\r\n\t\tthis._setDetailNum(1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图。\r\n\t */\r\n\tget diffuseTexture2(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2);\r\n\t}\r\n\r\n\tset diffuseTexture2(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2, value);\r\n\t\tthis._setDetailNum(2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图。\r\n\t */\r\n\tget diffuseTexture3(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3);\r\n\t}\r\n\r\n\tset diffuseTexture3(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3, value);\r\n\t\tthis._setDetailNum(3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图。\r\n\t */\r\n\tget diffuseTexture4(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4);\r\n\t}\r\n\r\n\tset diffuseTexture4(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4, value);\r\n\t\tthis._setDetailNum(4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图。\r\n\t */\r\n\tget diffuseTexture5(): BaseTexture {\r\n\t\treturn this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5);\r\n\t}\r\n\r\n\tset diffuseTexture5(value: BaseTexture) {\r\n\t\tthis._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5, value);\r\n\t\tthis._setDetailNum(5);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 第一层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset1(scaleOffset1: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET1, scaleOffset1);\r\n\t}\r\n\r\n\t/**\r\n\t * 第二层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset2(scaleOffset2: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET2, scaleOffset2);\r\n\t}\r\n\r\n\t/**\r\n\t * 第三层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset3(scaleOffset3: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET3, scaleOffset3);\r\n\t}\r\n\r\n\t/**\r\n\t * 第四层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset4(scaleOffset4: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET4, scaleOffset4);\r\n\t}\r\n\r\n\t/**\r\n\t * 第五层贴图缩放偏移。\r\n\t */\r\n\tset diffuseScaleOffset5(scaleOffset5: Vector4) {\r\n\t\tthis._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET5, scaleOffset5);\r\n\t}\r\n\r\n\t/**\r\n\t * 设置渲染模式。\r\n\t */\r\n\tset renderMode(value: number) {\r\n\t\tswitch (value) {\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_OPAQUE:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = true;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_DISABLE;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LESS;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExtendTerrainMaterial.RENDERMODE_TRANSPARENT:\r\n\t\t\t\tthis.renderQueue = Material.RENDERQUEUE_OPAQUE;\r\n\t\t\t\tthis.depthWrite = false;\r\n\t\t\t\tthis.cull = RenderState.CULL_BACK;\r\n\t\t\t\tthis.blend = RenderState.BLEND_ENABLE_ALL;\r\n\t\t\t\tthis.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\r\n\t\t\t\tthis.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\r\n\t\t\t\tthis.depthTest = RenderState.DEPTHTEST_LEQUAL;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"ExtendTerrainMaterial:renderMode value error.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>ExtendTerrainMaterial</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setShaderName(\"ExtendTerrain\");\r\n\t\tthis.renderMode = ExtendTerrainMaterial.RENDERMODE_OPAQUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _setDetailNum(value: number): void {\r\n\t\tswitch (value) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tthis._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3);\r\n\t\t\t\tthis._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* 克隆。\r\n\t* @return\t 克隆副本。\r\n\t* @override\r\n\t*/\r\n\tclone(): any {\r\n\t\tvar dest: ExtendTerrainMaterial = new ExtendTerrainMaterial();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Sprite3D } from \"../Sprite3D\"\r\nimport { BaseRender } from \"../render/BaseRender\"\r\nimport { TrailFilter } from \"./TrailFilter\";\r\nimport { FloatKeyframe } from \"../FloatKeyframe\";\r\nimport { Gradient } from \"../Gradient\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { TrailTextureMode } from \"../TrailTextureMode\"\r\nimport { TrailAlignment } from \"./TrailAlignment\"\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { IBaseRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { TrailMaterial } from \"./TrailMaterial\";\r\n\r\n/**\r\n * @en The `TrailRenderer` class is used to create a trail renderer.\r\n * @zh `TrailRenderer` 类用于创建拖尾渲染器。\r\n */\r\nexport class TrailRenderer extends BaseRender {\r\n\r\n    /**@internal */\r\n    _trailFilter: TrailFilter;\r\n\r\n    /**@internal */\r\n    protected _projectionViewWorldMatrix: Matrix4x4 = new Matrix4x4();\r\n    /** @ignore */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _getcommonUniformMap(): Array<string> {\r\n        return [\"Sprite3D\", \"TrailRender\"];\r\n    }\r\n\r\n\r\n    protected _createBaseRenderNode(): IBaseRenderNode {\r\n        return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected \r\n     */\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this._trailFilter = new TrailFilter(this);\r\n        this._setRenderElements();\r\n    }\r\n\r\n    /**\r\n     * @en Fade out time. Unit: s.\r\n     * @zh 淡出时间。单位: 秒。\r\n     */\r\n    get time(): number {\r\n        return this._trailFilter.time;\r\n    }\r\n\r\n    set time(value: number) {\r\n        this._trailFilter.time = value;\r\n    }\r\n\r\n    /**\r\n     * @en Minimum distance between new and old vertices.\r\n     * @zh 新旧顶点之间最小距离。\r\n     */\r\n    get minVertexDistance(): number {\r\n        return this._trailFilter.minVertexDistance;\r\n    }\r\n\r\n    set minVertexDistance(value: number) {\r\n        this._trailFilter.minVertexDistance = value;\r\n    }\r\n\r\n    /**\r\n     * @en The width multiplier.\r\n     * @zh 宽度倍数。\r\n     */\r\n    get widthMultiplier(): number {\r\n        return this._trailFilter.widthMultiplier;\r\n    }\r\n\r\n    set widthMultiplier(value: number) {\r\n        this._trailFilter.widthMultiplier = value;\r\n    }\r\n\r\n    /**\r\n     * @en The width curve. Maximum 10.\r\n     * @zh 宽度曲线。最多10个。\r\n     */\r\n    get widthCurve(): FloatKeyframe[] {\r\n        return this._trailFilter.widthCurve;\r\n    }\r\n\r\n    set widthCurve(value: FloatKeyframe[]) {\r\n        this._trailFilter.widthCurve = value;\r\n    }\r\n\r\n    /**\r\n     * @en The color gradient.\r\n     * @zh 颜色梯度。\r\n     */\r\n    get colorGradient(): Gradient {\r\n        return this._trailFilter.colorGradient;\r\n    }\r\n\r\n    set colorGradient(value: Gradient) {\r\n        this._trailFilter.colorGradient = value;\r\n    }\r\n\r\n    /**\r\n     * @en The texture mode.\r\n     * @zh 纹理模式。\r\n     */\r\n    get textureMode(): TrailTextureMode {\r\n        return this._trailFilter.textureMode;\r\n    }\r\n\r\n    set textureMode(value: TrailTextureMode) {\r\n        this._trailFilter.textureMode = value;\r\n    }\r\n\r\n    /**\r\n     * @en The trail alignment.\r\n     * @zh 拖尾轨迹准线\r\n     */\r\n    get alignment(): TrailAlignment {\r\n        return this._trailFilter.alignment;\r\n    }\r\n\r\n    set alignment(value: TrailAlignment) {\r\n        this._trailFilter.alignment = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n\r\n        (this.owner as Sprite3D)._transform.position.cloneTo(this._trailFilter._lastPosition);//激活时需要重置上次位置\r\n    }\r\n\r\n    /**\r\n     * @en Render update.\r\n     * @param context 3D rendering context.\r\n     * @zh 渲染更新。\r\n     * @param context 3D渲染上下文 \r\n     */\r\n    renderUpdate(context: RenderContext3D) {\r\n        this._calculateBoundingBox();\r\n\r\n        this._renderElements.forEach((element, index) => {\r\n            let geometry = element._geometry;\r\n            element._renderElementOBJ.isRender = geometry._prepareRender(context);\r\n            geometry._updateRenderParams(context);\r\n\r\n            let material = this.sharedMaterial ?? TrailMaterial.defaultMaterial;\r\n            material = this.sharedMaterials[index] ?? material;\r\n            element.material = material;\r\n            element._renderElementOBJ.materialRenderQueue = material.renderQueue;\r\n        })\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @en The bounding box. Read-only, do not modify its value.\r\n     * @zh 包围盒,只读,不允许修改其值。\r\n     */\r\n    get bounds(): Bounds {\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _calculateBoundingBox(): void {\r\n        let context = RenderContext3D._instance;\r\n        this.boundsChange = false;\r\n        this._trailFilter._update(context);\r\n    }\r\n\r\n    /**\r\n     * @en Clear the trail.\r\n     * @zh 清除拖尾\r\n     */\r\n    clear(): void {\r\n        this._trailFilter.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDestroy() {\r\n        this._trailFilter.destroy();\r\n        super._onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = dest as TrailRenderer;\r\n        render.time = this.time;\r\n        render.minVertexDistance = this.minVertexDistance;\r\n        //render.widthCurve = this.widthCurve;\r\n        var widthCurve: FloatKeyframe[] = [];\r\n        var widthCurveData: any[] = this.widthCurve;\r\n        for (let i = 0, n = this.widthCurve.length; i < n; i++) {\r\n            widthCurve.push(widthCurveData[i].clone());\r\n        }\r\n        render.widthCurve = widthCurve;\r\n        render.colorGradient = this.colorGradient.clone();\r\n        render.textureMode = this.textureMode;\r\n        render.alignment = this.alignment;\r\n    }\r\n\r\n}\r\n\r\n","import { Color } from \"../../maths/Color\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { TextureCubeFace } from \"../../resource/TextureCube\";\r\n\r\n/**\r\n * @en Second-order spherical harmonics function.\r\n * @zh 二阶球谐函数。\r\n */\r\nexport class SphericalHarmonicsL2 {\r\n    /** @internal */\r\n    static _default: SphericalHarmonicsL2 = new SphericalHarmonicsL2();\r\n\r\n    /** @internal */\r\n    private _coefficients: Float32Array = new Float32Array(27);\r\n\r\n    /**\r\n     * @en Gets the coefficient for a specific color channel.\r\n     * @param i The channel index, ranging from 0 to 2.\r\n     * @param j The coefficient index, ranging from 0 to 8.\r\n     * @returns The coefficient value.\r\n     * @zh 获取特定颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     * @returns 系数值。\r\n     */\r\n    getCoefficient(i: number, j: number): number {\r\n        return this._coefficients[i * 9 + j];\r\n    }\r\n\r\n    /**\r\n     * @en Sets the coefficient for a specific color channel.\r\n     * @param i The channel index, ranging from 0 to 2.\r\n     * @param j The coefficient index, ranging from 0 to 8.\r\n     * @param coefficient The coefficient value to set.\r\n     * @zh 设置特定颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param j 系数索引，范围0到8。\r\n     * @param coefficient 要设置的系数值。\r\n     */\r\n    setCoefficient(i: number, j: number, coefficient: number): void {\r\n        this._coefficients[i * 9 + j] = coefficient;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the coefficients for a specific color channel.\r\n     * @param i The channel index, ranging from 0 to 2.\r\n     * @param coefficient0 Coefficient 0\r\n     * @param coefficient1 Coefficient 1\r\n     * @param coefficient2 Coefficient 2\r\n     * @param coefficient3 Coefficient 3\r\n     * @param coefficient4 Coefficient 4\r\n     * @param coefficient5 Coefficient 5\r\n     * @param coefficient6 Coefficient 6\r\n     * @param coefficient7 Coefficient 7\r\n     * @param coefficient8 Coefficient 8\r\n     * @zh 设置颜色通道的系数。\r\n     * @param i 通道索引，范围0到2。\r\n     * @param coefficient0 系数0\r\n     * @param coefficient1 系数1\r\n     * @param coefficient2 系数2\r\n     * @param coefficient3 系数3\r\n     * @param coefficient4 系数4\r\n     * @param coefficient5 系数5\r\n     * @param coefficient6 系数6\r\n     * @param coefficient7 系数7\r\n     * @param coefficient8 系数8\r\n     */\r\n    setCoefficients(i: number, coefficient0: number, coefficient1: number, coefficient2: number, coefficient3: number, coefficient4: number, coefficient5: number, coefficient6: number, coefficient7: number, coefficient8: number): void {\r\n        var offset: number = i * 9;\r\n        this._coefficients[offset] = coefficient0;\r\n        this._coefficients[++offset] = coefficient1;\r\n        this._coefficients[++offset] = coefficient2;\r\n        this._coefficients[++offset] = coefficient3;\r\n        this._coefficients[++offset] = coefficient4;\r\n        this._coefficients[++offset] = coefficient5;\r\n        this._coefficients[++offset] = coefficient6;\r\n        this._coefficients[++offset] = coefficient7;\r\n        this._coefficients[++offset] = coefficient8;\r\n    }\r\n\r\n    /**\r\n     * @en Clones the spherical harmonics data to another instance.\r\n     * @param dest The destination instance to which the data is cloned.\r\n     * @zh 克隆球谐函数数据到另一个实例。\r\n     * @param dest 克隆数据的目标实例。\r\n     */\r\n    cloneTo(dest: SphericalHarmonicsL2): void {\r\n        if (this === dest)\r\n            return;\r\n        var coes: Float32Array = this._coefficients;\r\n        var destCoes: Float32Array = dest._coefficients;\r\n        for (var i: number = 0; i < 27; i++)\r\n            destCoes[i] = coes[i];\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n * @en The `SphericalHarmonicsL2Generater` class is used for generating second-order spherical harmonics coefficients.\r\n * @zh `SphericalHarmonicsL2Generater` 类用于生成二阶球谐系数。\r\n */\r\nexport class SphericalHarmonicsL2Generater {\r\n\r\n    private static _tempSHR: Float32Array = new Float32Array(9);\r\n    private static _tempSHG: Float32Array = new Float32Array(9);\r\n    private static _tempSHB: Float32Array = new Float32Array(9);\r\n\r\n    /**\r\n     * k0: 1/2  * sqrt(1/Pi)\r\n     * k1: 1/3  * sqrt(3/Pi)\r\n     * k2: 1/8  * sqrt(15/Pi)\r\n     * k3: 1/16 * sqrt(5/Pi)\r\n     * k4: 1/16 * sqrt(15/Pi)\r\n     * [\r\n     *  k0,\r\n     * -k1, k1, k1\r\n     * k2, -k2, k3, -k2, k4\r\n     * ]\r\n     */\r\n    private static readonly k = [\r\n        0.28209479177387814347,\r\n        -0.32573500793527994772, 0.32573500793527994772, -0.32573500793527994772,\r\n        0.27313710764801976764, -0.27313710764801976764, 0.07884789131313000151, -0.27313710764801976764, 0.13656855382400988382\r\n    ]\r\n\r\n    /** @internal */\r\n    static readonly GradientSimulateSize: number = 3;\r\n    /** @internal */\r\n    static readonly SH_Count: number = 9;\r\n\r\n    private static _tempSkyPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n    private static _tempEquatorPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n    private static _tempGroundPixels: Float32Array = new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize * SphericalHarmonicsL2Generater.GradientSimulateSize * 3);\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the surface area corresponding to the uv coordinates on a sphere.\r\n     * @param u The u coordinate.\r\n     * @param v The v coordinate.\r\n     * @returns The surface area.\r\n     * @zh 计算球面上uv坐标对应的立体角。\r\n     * @param u u坐标。\r\n     * @param v v坐标。\r\n     * @returns 立体角。\r\n     */\r\n    static surfaceArea(u: number, v: number) {\r\n        return Math.atan2(u * v, Math.sqrt(u * u + v * v + 1.0));\r\n    }\r\n\r\n    /**\r\n     * @en Converts uv coordinates to a direction vector based on the cube face.\r\n     * @param u The u coordinate.\r\n     * @param v The v coordinate.\r\n     * @param face The cube map face.\r\n     * @param out_dir The resulting direction vector.\r\n     * @zh 根据立方体贴图面将uv坐标转换为方向向量。\r\n     * @param u u坐标。\r\n     * @param v v坐标。\r\n     * @param face 立方体贴图面。\r\n     * @param out_dir 输出的方向向量。\r\n     */\r\n    static uv2Dir(u: number, v: number, face: TextureCubeFace, out_dir: Vector3) {\r\n        switch (face) {\r\n            case TextureCubeFace.PositiveX:\r\n                out_dir.x = 1.0;\r\n                out_dir.y = -v;\r\n                out_dir.z = -u;\r\n                break;\r\n            case TextureCubeFace.NegativeX:\r\n                out_dir.x = -1.0;\r\n                out_dir.y = -v;\r\n                out_dir.z = u;\r\n                break;\r\n            case TextureCubeFace.PositiveY:\r\n                out_dir.x = u;\r\n                out_dir.y = 1.0;\r\n                out_dir.z = v;\r\n                break;\r\n            case TextureCubeFace.NegativeY:\r\n                out_dir.x = u;\r\n                out_dir.y = -1.0;\r\n                out_dir.z = -v;\r\n                break;\r\n            case TextureCubeFace.PositiveZ:\r\n                out_dir.x = u;\r\n                out_dir.y = -v;\r\n                out_dir.z = 1.0;\r\n                break;\r\n            case TextureCubeFace.NegativeZ:\r\n                out_dir.x = -u;\r\n                out_dir.y = -v;\r\n                out_dir.z = -1.0;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Evaluates the spherical harmonics function for given coefficients.\r\n     * @param i The coefficient index.\r\n     * @param x The x component of the direction vector.\r\n     * @param y The y component of the direction vector.\r\n     * @param z The z component of the direction vector.\r\n     * @returns The evaluated value.\r\n     * @zh 根据给定的系数评估球谐函数。\r\n     * @param i 系数索引。\r\n     * @param x 方向向量的x分量。\r\n     * @param y 方向向量的y分量。\r\n     * @param z 方向向量的z分量。\r\n     * @returns 评估值。\r\n     */\r\n    static sh_eval_9(i: number, x: number, y: number, z: number) {\r\n        const sqrt = Math.sqrt;\r\n        const M_PI = Math.PI;\r\n        switch (i) {\r\n            case 0:\r\n                return 0.5 * sqrt(1.0 / M_PI);\r\n            case 1:\r\n                return -y * 0.5 * sqrt(3.0 / M_PI);\r\n            case 2:\r\n                return z * 0.5 * sqrt(3.0 / M_PI);\r\n            case 3:\r\n                return -x * 0.5 * sqrt(3.0 / M_PI);\r\n            case 4:\r\n                return x * y * 0.5 * sqrt(15.0 / M_PI);\r\n            case 5:\r\n                return -y * z * 0.5 * sqrt(15.0 / M_PI);\r\n            case 6:\r\n                return (3.0 * z * z - 1.0) * 0.25 * sqrt(5.0 / M_PI);\r\n            case 7:\r\n                return -x * z * 0.5 * sqrt(15.0 / M_PI);\r\n            case 8:\r\n                return (x * x - y * y) * 0.25 * sqrt(15.0 / M_PI);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculates the ambient light coefficients from cubemap pixel values.\r\n     * @param cubemapPixels The cubemap pixel data for each face.\r\n     * @param pixelComponentSize The number of components per pixel.\r\n     * @param cubemapSize The size of the cubemap.\r\n     * @param isGamma Whether the pixel data is in gamma color space.\r\n     * @zh 从立方体贴图像素值计算环境光照系数。\r\n     * @param cubemapPixels 立方体贴图的每个面的像素数据。\r\n     * @param pixelComponentSize 每像素数据量。\r\n     * @param cubemapSize 立方体贴图的大小。\r\n     * @param isGamma 像素数据是否为伽马颜色空间。\r\n     */\r\n    static CalCubemapSH(cubemapPixels: Float32Array[], pixelComponentSize: number, cubemapSize: number, isGamma: boolean = true): SphericalHarmonicsL2 {\r\n\r\n        let width = cubemapSize;\r\n        let height = cubemapSize;\r\n\r\n        let shr = this._tempSHR.fill(0);\r\n        let shg = this._tempSHG.fill(0);\r\n        let shb = this._tempSHB.fill(0);\r\n\r\n        let dir = new Vector3();\r\n        for (let face = 0; face < 6; face++) {\r\n\r\n            let facePixels = cubemapPixels[face];\r\n\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n\r\n                    let px = x + 0.5;\r\n                    let py = y + 0.5;\r\n\r\n                    let u = 2.0 * (px / width) - 1.0;\r\n                    let v = 2.0 * (py / height) - 1.0;\r\n\r\n                    let dx = 1.0 / width;\r\n                    let dy = 1.0 / height;\r\n                    // 4个点 uv 分布\r\n                    let x0 = u - dx;\r\n                    let y0 = v - dy;\r\n                    let x1 = u + dx;\r\n                    let y1 = v + dy;\r\n\r\n                    // 当前纹素立体角\r\n                    let da = this.surfaceArea(x0, y0) - this.surfaceArea(x0, y1) - this.surfaceArea(x1, y0) + this.surfaceArea(x1, y1);\r\n\r\n                    this.uv2Dir(u, v, face, dir);\r\n                    Vector3.normalize(dir, dir);\r\n\r\n                    let pixelOffset = (x + y * width) * pixelComponentSize;\r\n                    let r = facePixels[pixelOffset];\r\n                    let g = facePixels[pixelOffset + 1];\r\n                    let b = facePixels[pixelOffset + 2];\r\n                    if (isGamma) {\r\n                        r = Color.gammaToLinearSpace(r);\r\n                        g = Color.gammaToLinearSpace(g);\r\n                        b = Color.gammaToLinearSpace(b);\r\n                    }\r\n\r\n                    for (let s = 0; s < this.SH_Count; s++) {\r\n                        let sh_val = this.sh_eval_9(s, dir.x, dir.y, dir.z);\r\n                        shr[s] += r * sh_val * da;\r\n                        shg[s] += g * sh_val * da;\r\n                        shb[s] += b * sh_val * da;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let sh = new SphericalHarmonicsL2();\r\n\r\n        for (let index = 0; index < this.SH_Count; index++) {\r\n            let scale = this.k[index];\r\n\r\n            let r = shr[index];\r\n            sh.setCoefficient(0, index, r * scale);\r\n\r\n            let g = shg[index];\r\n            sh.setCoefficient(1, index, g * scale);\r\n\r\n            let b = shb[index];\r\n            sh.setCoefficient(2, index, b * scale);\r\n        }\r\n\r\n        return sh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Calculate the ambient lighting coefficient based on sky color, horizon color, and ground color\r\n     * @param skyColor The color of the sky.\r\n     * @param equatorColor The color of the equator.\r\n     * @param groundColor The color of the ground.\r\n     * @param isGamma Whether the colors are in gamma color space.\r\n     * @zh 通过 天空颜色, 地平线颜色, 地面颜色计算环境光照系数\r\n     * @param skyColor 天空颜色。\r\n     * @param equatorColor 地平线颜色。\r\n     * @param groundColor 地面颜色。\r\n     * @param isGamma 颜色是否为伽马空间。\r\n     */\r\n    static CalGradientSH(skyColor: Vector3, equatorColor: Vector3, groundColor: Vector3, isGamma: boolean = true): SphericalHarmonicsL2 {\r\n\r\n        console.time(\"Gradient SH\");\r\n\r\n        let skyPixels = this._tempSkyPixels;\r\n        let equatorPixels = this._tempEquatorPixels;\r\n        let groundPixels = this._tempGroundPixels;\r\n\r\n        const fillPixelBuffer = (float32: Float32Array, color: Vector3, isGamma: boolean) => {\r\n            let fillColor = new Color(color.x, color.y, color.z, 1.0);\r\n            if (isGamma) {\r\n                fillColor.toLinear(fillColor);\r\n            }\r\n            let r = Math.min(fillColor.r, 1.0);\r\n            let g = Math.min(fillColor.g, 1.0);\r\n            let b = Math.min(fillColor.b, 1.0);\r\n            for (let index = 0; index < float32.length; index += 3) {\r\n                float32[index] = r;\r\n                float32[index + 1] = g;\r\n                float32[index + 2] = b;\r\n            }\r\n        }\r\n\r\n        fillPixelBuffer(skyPixels, skyColor, isGamma);\r\n        fillPixelBuffer(equatorPixels, equatorColor, isGamma);\r\n        fillPixelBuffer(groundPixels, groundColor, isGamma);\r\n\r\n        let gradientPixles = [];\r\n        gradientPixles[TextureCubeFace.PositiveY] = skyPixels;\r\n        gradientPixles[TextureCubeFace.NegativeY] = groundPixels;\r\n        gradientPixles[TextureCubeFace.PositiveX] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.NegativeX] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.PositiveZ] = equatorPixels;\r\n        gradientPixles[TextureCubeFace.NegativeZ] = equatorPixels;\r\n\r\n        let sh = SphericalHarmonicsL2Generater.CalCubemapSH(gradientPixles, 3, this.GradientSimulateSize, false);\r\n\r\n        console.timeEnd(\"Gradient SH\");\r\n        return sh;\r\n    }\r\n}","import { Scene3D } from \"../scene/Scene3D\";\r\nimport { ShadowCascadesMode } from \"./ShadowCascadesMode\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { IDirectLightData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\n\r\n/**\r\n * @en DirectionLight used to create parallel light.\r\n * @zh DirectionLight 类用于创建方向光。\r\n */\r\nexport class DirectionLightCom extends Light {\r\n\t/**@internal */\r\n\t_dataModule: IDirectLightData;\r\n\t/** @internal */\r\n\tprivate _direction: Vector3 = new Vector3();\r\n\r\n\r\n\t/** @internal */\r\n\t_shadowTwoCascadeSplits: number = 1.0 / 3.0;\r\n\t/** @internal */\r\n\t_shadowFourCascadeSplits: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * @en The direction of the directional light.\r\n     * @zh 方向光的方向。\r\n     */\r\n\tget direction(): Vector3 {\r\n\t\treturn this._direction;\r\n\t}\r\n\r\n\tset direction(value: Vector3) {\r\n\t\tvalue.cloneTo(this.direction);\r\n\t\tthis._dataModule.setDirection(this._direction);\r\n\t};\r\n\r\n    /**\r\n     * @en The number of shadow cascades.\r\n     * @zh 阴影级联数量。\r\n     */\r\n\tget shadowCascadesMode(): ShadowCascadesMode {\r\n\t\treturn this._dataModule.shadowCascadesMode;\r\n\t}\r\n\r\n\tset shadowCascadesMode(value: ShadowCascadesMode) {\r\n\t\tthis._dataModule.shadowCascadesMode = value;\r\n\t}\r\n\r\n    /**\r\n     * @en The split ratio for two cascade shadows.\r\n     * @zh 二级级联阴影分割比例。\r\n     */\r\n\tget shadowTwoCascadeSplits(): number {\r\n\t\treturn this._dataModule.shadowTwoCascadeSplits;\r\n\t}\r\n\r\n\tset shadowTwoCascadeSplits(value: number) {\r\n\t\tthis._dataModule.shadowTwoCascadeSplits = value;\r\n\t}\r\n\r\n    /**\r\n     * @en The split ratios for four cascade shadows. X, Y, Z represent the split ratios in order. Z must be greater than Y, and Y must be greater than X.\r\n     * @zh 四级级联阴影分割比例。X、Y、Z依次为其分割比例，Z必须大于Y，Y必须大于X。\r\n     */\r\n\tget shadowFourCascadeSplits(): Vector3 {\r\n\t\treturn this._shadowFourCascadeSplits;\r\n\t}\r\n\r\n\tset shadowFourCascadeSplits(value: Vector3) {\r\n\t\tif (value.x > value.y || value.y > value.z || value.z > 1.0)\r\n\t\t\tthrow \"DiretionLight:Invalid value.\";\r\n\t\tvalue.cloneTo(this._shadowFourCascadeSplits);\r\n\t\tthis._dataModule.setShadowFourCascadeSplits(this._shadowFourCascadeSplits);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of DirectionLight.\r\n\t * @zh 创建一个 DirectionLight 的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._lightType = LightType.Directional;\r\n\t\tthis.shadowCascadesMode = ShadowCascadesMode.NoCascades;\r\n\t\tthis.shadowFourCascadeSplits = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\r\n\t\tthis.shadowTwoCascadeSplits = 1.0 / 3.0;\r\n\t}\r\n\r\n\tprotected _creatModuleData() {\r\n\t\tthis._dataModule = Laya3DRender.Render3DModuleDataFactory.createDirectLight();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._directionLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._directionLights.remove(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): DirectionLightCom {\r\n\t\treturn new DirectionLightCom();\r\n\t}\r\n}\r\n\r\n","import { IPointLightData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { Light, LightType } from \"./Light\";\r\n\r\n\r\n/**\r\n * @en The `PointLightCom` class represents a point light source in the scene.\r\n * @zh `PointLightCom` 类表示场景中的点光源。\r\n */\r\nexport class PointLightCom extends Light {\r\n\r\n    /**\r\n     * @en Declares the data module for point light.\r\n     * @zh 声明点光源的数据模块。\r\n     */\r\n    declare _dataModule: IPointLightData;\r\n\r\n    /** @internal */\r\n    private _range: number;\r\n\r\n    /**\r\n     * @en The range of the point light.\r\n     * @zh 点光的范围。\r\n     */\r\n    get range(): number {\r\n        return this._range;\r\n    }\r\n\r\n    set range(value: number) {\r\n        this._range = value;\r\n        this._dataModule.range = value;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates an instance of PointLightCom.\r\n     * @zh 创建一个 PointLightCom 的实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._lightType = LightType.Point;\r\n\r\n        this.range = 6.0;\r\n    }\r\n\r\n    protected _creatModuleData(): void {\r\n        this._dataModule = Laya3DRender.Render3DModuleDataFactory.createPointLight();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _addToLightQueue(): void {\r\n        this.owner.scene._pointLights.add(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    protected _removeFromLightQueue(): void {\r\n        this.owner.scene._pointLights.remove(this);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any, spriteMap: any): void {\r\n        super._parse(data, spriteMap);\r\n        this.range = data.range;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: PointLightCom): void {\r\n        super._cloneTo(dest);\r\n        var pointlight = dest as PointLightCom;\r\n        pointlight.range = this.range;\r\n        pointlight._lightType = LightType.Point;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Component {\r\n        return new PointLightCom();\r\n    }\r\n\r\n}","import { Scene3D } from \"../scene/Scene3D\";\r\nimport { Light, LightType } from \"./Light\";\r\nimport { Component } from \"../../../components/Component\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { ISpotLightData } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\n/**\r\n * @en The `SpotLightCom` class is used to create a spotlight.\r\n * @zh `SpotLightCom` 类用于创建聚光。\r\n */\r\nexport class SpotLightCom extends Light {\r\n\r\n\t/**\r\n\t * @en Declares the data module for the spotlight.\r\n\t * @zh 声明聚光灯的数据模块。\r\n\t */\r\n\tdeclare _dataModule: ISpotLightData;\r\n\r\n\t/** @internal */\r\n\tprivate _direction: Vector3;\r\n\r\n\t/**\r\n\t * @en The direction of the spotlight.\r\n\t * @zh 聚光的方向。\r\n\t */\r\n\tget direction(): Vector3 {\r\n\t\treturn this._direction;\r\n\t}\r\n\r\n\tset direction(value: Vector3) {\r\n\t\tvalue.cloneTo(this.direction);\r\n\t\tthis._dataModule.setDirection(this._direction);\r\n\t};\r\n\r\n\r\n    /**\r\n     * @en The cone angle of the spotlight.\r\n     * @zh 聚光灯的锥形角度。\r\n     */\r\n\tget spotAngle(): number {\r\n\t\treturn this._dataModule.spotAngle;\r\n\t}\r\n\r\n\tset spotAngle(value: number) {\r\n\t\tthis._dataModule.spotAngle = Math.max(Math.min(value, 179), 0);\r\n\t}\r\n\r\n    /**\r\n     * @en The range of the spotlight.\r\n     * @zh 聚光灯的范围。\r\n     */\r\n\tget range(): number {\r\n\t\treturn this._dataModule.spotRange;\r\n\t}\r\n\r\n\tset range(value: number) {\r\n\t\tthis._dataModule.spotRange = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creats an instance of SpotLightCom.\r\n\t * @zh 创建一个 SpotLightCom 的实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.spotAngle = 30.0;\r\n\t\tthis.range = 10.0;\r\n\t\tthis._direction = new Vector3();\r\n\t\tthis._lightType = LightType.Spot;\r\n\t}\r\n\r\n\tprotected _creatModuleData() {\r\n\t\tthis._dataModule = Laya3DRender.Render3DModuleDataFactory.createSpotLight();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _addToLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._spotLights.add(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _removeFromLightQueue(): void {\r\n\t\t(<Scene3D>this.owner.scene)._spotLights.remove(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_parse(data: any, spriteMap: any): void {\r\n\t\tsuper._parse(data, spriteMap);\r\n\t\tthis.range = data.range;\r\n\t\tthis.spotAngle = data.spotAngle;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: Component): void {\r\n\t\tsuper._cloneTo(dest);\r\n\t\tvar spotLight = <SpotLightCom>dest;\r\n\t\tspotLight.range = this.range;\r\n\t\tspotLight.spotAngle = this.spotAngle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprotected _create(): Component {\r\n\t\treturn new SpotLightCom();\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ILaya3D } from \"../../../../../ILaya3D\";\r\nimport { IVolumetricGIData } from \"../../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { Texture2D } from \"../../../../resource/Texture2D\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { Volume } from \"../Volume\";\r\nimport { VolumeManager } from \"../VolumeManager\";\r\n\r\n/**\r\n * @en The VolumetricGI class represents volumetric global illumination in the scene.\r\n * @zh VolumetricGI 类表示场景中的体积全局光照。\r\n */\r\nexport class VolumetricGI extends Volume {\r\n    /**\r\n     * @en The count of volumetric global illumination probes.\r\n     * @zh 体积全局光照探针的数量。\r\n     */\r\n    static volumetricCount: number = 0;\r\n    /**\r\n     * @en Get a globally unique ID.\r\n     * @zh 获取一个全局唯一的ID。\r\n     */\r\n    static getID(): number {\r\n        return VolumetricGI.volumetricCount++;\r\n    }\r\n    /** @internal IDE*/\r\n    probeLocations: Float32Array;\r\n    /**@internal */\r\n    private _probeCounts: Vector3;\r\n    /**@internal */\r\n    private _probeStep: Vector3;\r\n    /**\r\n     * @internal\r\n     * x: irradiance probe texel size\r\n     * y: distance probe texel size\r\n     * z: normalBias\r\n     * w: viewBias\r\n     */\r\n    private _params: Vector4;\r\n    /**@internal */\r\n    _volumetricProbeID: number\r\n    /**@internal */\r\n    _dataModule: IVolumetricGIData;\r\n\r\n    /**\r\n     * @en construct method, initialize VolumetricGI object.\r\n     * @zh 构造方法，初始化VolumetricGI对象。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._type = VolumeManager.VolumetricGIType;\r\n        this._probeCounts = new Vector3();\r\n        this._probeStep = new Vector3();\r\n        this._params = new Vector4(8, 16, 0, 0);\r\n        this._dataModule = Laya3DRender.Render3DModuleDataFactory.createVolumetricGI();\r\n        this._dataModule.setParams(this._params);\r\n        this._volumetricProbeID = VolumetricGI.getID();\r\n        this._dataModule.intensity = 1;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     * @internal\r\n     * @protected\r\n     * @override\r\n    */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    private _irradiance: Texture2D;\r\n    /**\r\n     * @en Light probe irradiance texture.\r\n     * @zh 光照探针辐照度纹理。\r\n     */\r\n    get irradiance(): Texture2D {\r\n        return this._irradiance;\r\n    }\r\n\r\n    set irradiance(value: Texture2D) {\r\n        if (this._irradiance == value)\r\n            return;\r\n        this._irradiance && (this._irradiance._removeReference());\r\n        if (value) {\r\n            value._addReference();\r\n            this._dataModule.irradiance = value._texture;\r\n        }\r\n        else {\r\n            this._dataModule.irradiance = null;\r\n        }\r\n        this._irradiance = value;\r\n        this._irradiance = value;\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    private _distance: Texture2D;\r\n    /**\r\n     * @en Distance texture for light probe.\r\n     * @zh 光照探针的距离纹理。\r\n     */\r\n    get distance(): Texture2D {\r\n        return this._distance;\r\n    }\r\n\r\n    set distance(value: Texture2D) {\r\n        if (this._distance == value)\r\n            return;\r\n        this._distance && (this._distance._removeReference());\r\n        if (value) {\r\n            value._addReference();\r\n            this._dataModule.distance = value._texture;\r\n        }\r\n        else {\r\n            this._dataModule.distance = null;\r\n        }\r\n        this._distance = value;\r\n        this._distance = value;\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    /**\r\n     * @en Normal bias for volumetric global illumination.\r\n     * @zh 体积全局光照的法线偏移。\r\n     */\r\n    get normalBias(): number {\r\n        return this._params.z;\r\n    }\r\n\r\n    set normalBias(value: number) {\r\n        this._params.z = value;\r\n        this._dataModule.setParams(this._params);\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    /**\r\n     * @en View bias for volumetric global illumination.\r\n     * @zh 体积全局光照的视图偏移。\r\n     */\r\n    get viewBias(): number {\r\n        return this._params.w;\r\n    }\r\n\r\n    set viewBias(value: number) {\r\n        this._params.w = value;\r\n        this._dataModule.setParams(this._params);\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    /**\r\n     * @en Number of texels per probe in the irradiance texture.\r\n     * @zh 辐照度纹理中每个探针的纹素数量。\r\n     */\r\n    get irradianceTexel(): number {\r\n        return this._params.x;\r\n    }\r\n\r\n    /**\r\n     * @en Number of texels per probe in the distance texture.\r\n     * @zh 距离纹理中每个探针的纹素数量。\r\n     */\r\n    get distanceTexel(): number {\r\n        return this._params.y;\r\n    }\r\n\r\n    /**\r\n     * @en The intensity of the reflection probe.\r\n     * @zh 反射探针的强度。\r\n     */\r\n    get intensity(): number {\r\n        return this._dataModule.intensity;\r\n    }\r\n\r\n    set intensity(value: number) {\r\n        if (value == this._dataModule.intensity) return;\r\n        value = Math.max(value, 0.0);\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    /**\r\n     * @en The number of probes for volumetric global illumination.\r\n     * @zh 体积全局光照的探针数量。\r\n     */\r\n    get probeCounts(): Vector3 {\r\n        return this._probeCounts;\r\n    }\r\n\r\n    set probeCounts(value: Vector3) {\r\n        if (value.equal(this._probeCounts)) return;\r\n        value.cloneTo(this._probeCounts);\r\n        this._dataModule.setProbeCounts(value);\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n    /**\r\n     * @en The step size between probes for volumetric global illumination.\r\n     * @zh 体积全局光照探针之间的间隔。\r\n     */\r\n    get probeStep(): Vector3 {\r\n        return this._probeStep;\r\n    }\r\n\r\n    set probeStep(value: Vector3) {\r\n        if (value.equal(this._probeStep)) return;\r\n        value.cloneTo(this._probeStep);\r\n        this._dataModule.setProbeStep(value);\r\n        this._dataModule.updateMark = ILaya3D.Scene3D._updateMark;\r\n    }\r\n\r\n    _reCaculateBoundBox(): void {\r\n        super._reCaculateBoundBox();\r\n        this.bounds.cloneTo(this._dataModule.bound);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _onDestroy() {\r\n        // todo\r\n        this.irradiance = null;\r\n        this.distance = null;\r\n    }\r\n\r\n    /**@internal */\r\n    _cloneTo(dest: VolumetricGI): void {\r\n        dest.irradiance = this.irradiance;\r\n        dest.distance = this.distance;\r\n        this._probeCounts.cloneTo(dest._probeCounts);\r\n        this.probeStep.cloneTo(dest.probeStep);\r\n        dest.normalBias = this.normalBias;\r\n        dest.viewBias = this.viewBias;\r\n        dest.intensity = this.intensity;\r\n    }\r\n\r\n}","import { Component } from \"../../components/Component\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { BaseRender, RenderBitFlag } from \"../core/render/BaseRender\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\nconst tempVec = new Vector3();\r\nconst tempVec1 = new Vector3();\r\n\r\n/**\r\n * @en The `LODInfo` class describes Level of Detail (LOD) data.\r\n * @zh `LODInfo` 类描述了细节层次（LOD）数据。\r\n */\r\nexport class LODInfo {\r\n    /**@internal */\r\n    _mincullRate: number;//裁剪比例 0-1\r\n\r\n    /**@internal */\r\n    _renders: BaseRender[];//此LOD显示的渲染节点\r\n\r\n    /**@internal */\r\n    _cachSprite3D: Sprite3D[];\r\n\r\n    /**@internal */\r\n    _lodIndex: number;\r\n\r\n    /**@internal */\r\n    private _group: LODGroup;\r\n\r\n\r\n\r\n    /**\r\n     * @en Constructor method of LODInfo.\r\n     * @zh 细节层次数据的构造方法\r\n     */\r\n    constructor(mincullRate: number) {\r\n        this._mincullRate = mincullRate;\r\n        this._renders = [];\r\n        this._cachSprite3D = [];\r\n    }\r\n\r\n    /**\r\n     * @en Minimum culling ratio for LOD.\r\n     * @zh LOD的最小剔除率。\r\n     */\r\n    get mincullRate() {\r\n        return this._mincullRate;\r\n    }\r\n\r\n    set mincullRate(value: number) {\r\n        this._mincullRate = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en Sets the LOD group\r\n     * @zh 设置LOD组。\r\n     */\r\n    set group(value: LODGroup) {\r\n        if (value == this._group)\r\n            return;\r\n        if (this._group) {//remove old event\r\n            // this._renders.forEach(element => {\r\n            //     (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n            //     element._LOD = -1;\r\n            // })\r\n            for (let i = 0, n = this._renders.length; i < n; i++) {\r\n                let element = this._renders[i];\r\n                (element.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n                element._LOD = -1;\r\n            }\r\n        }\r\n        this._group = value;\r\n        for (let i = 0, n = this._renders.length; i < n; i++) {\r\n            let element = this._renders[i];\r\n            (element.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\r\n            element._LOD = this._lodIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The node information for the LODInfo.\r\n     * @zh LODInfo的节点信息。\r\n     */\r\n    get renders(): Sprite3D[] {\r\n        return this._cachSprite3D;\r\n    }\r\n\r\n    set renders(value: Sprite3D[]) {\r\n        this._cachSprite3D = value;\r\n        for (var i = 0, n = value.length; i < n; i++) {\r\n            this.addNode(value[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Adds a rendering node to the LODInfo.\r\n     * @param node The Sprite3D node to be added as a rendering node.\r\n     * @zh 在LODInfo中增加渲染节点。\r\n     * @param node 要作为渲染节点添加的Sprite3D节点。\r\n     */\r\n    addNode(node: Sprite3D) {\r\n        if (!node)\r\n            return;\r\n        let ren = node;\r\n        if (ren._isRenderNode > 0) {\r\n            let components = ren.components;\r\n            for (let comp of components) {\r\n                if ((comp instanceof BaseRender) && this._renders.indexOf(comp) == -1)\r\n                    this._renders.push(comp);\r\n            }\r\n            this._group && node.transform.on(Event.TRANSFORM_CHANGED, this._group, this._group._updateRecaculateFlag);\r\n        }\r\n        for (var i = 0, n = node.numChildren; i < n; i++) {\r\n            this.addNode(node.getChildAt(i) as Sprite3D);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes a LOD node from the LODInfo.\r\n     * @param node The Sprite3D node to be removed from the LOD.\r\n     * @zh 从LODInfo中删除某个LOD节点。\r\n     * @param node 要从LOD中删除的Sprite3D节点。\r\n     */\r\n    removeNode(node: Sprite3D) {\r\n        let ren = node;\r\n        if (ren._isRenderNode > 0) {\r\n            let components = ren.components;\r\n            let index: number;\r\n            for (let comp of components) {\r\n                if ((comp instanceof BaseRender) && (index = this._renders.indexOf(comp)) == -1) {\r\n                    this._renders.splice(index, 1);\r\n                    comp.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n                    this._group && node.transform.off(Event.TRANSFORM_CHANGED, this._group._updateRecaculateFlag);\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0, n = node.numChildren; i < n; i++) {\r\n            this.removeNode(node.getChildAt(i) as Sprite3D);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Releases all render node cull flags in the LODInfo.\r\n     * @zh 释放LODInfo中的所有渲染节点的剔除标记。\r\n     */\r\n    removeAllRender() {\r\n        this._renders.forEach(element => {\r\n            element.setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * @en The `LODGroup` class is used to build LOD components.\r\n * @zh SpotLight 类用于构建LOD组件\r\n */\r\nexport class LODGroup extends Component {\r\n\r\n    /**\r\n   * @en Indicates whether the LOD bounds radius and bounds need to be recalculated. Recalculation is needed when there is a relative change in the LOD values.\r\n   * @zh 是否需要重新计算 _lodBoundsRadius 和 _bounds。当 LOD 值的位置有相对改动时，需要重新计算。\r\n   */\r\n    private _needcaculateBounds: boolean = false;\r\n\r\n    /**\r\n     * @en The bounds calculation for all rendering nodes in the LOD group.\r\n     * @zh lodGroup 所有的渲染节点的包围盒计算\r\n     */\r\n    private _bounds: Bounds;\r\n\r\n    /**\r\n     * @en The size of the LOD group.\r\n     * @zh LOD组大小\r\n     */\r\n    private _size: number;\r\n\r\n    /**\r\n     * @en The center position of the bounding box.\r\n     * @zh 包围盒中心位置\r\n     */\r\n    private _lodPosition: Vector3;\r\n\r\n    /**\r\n     * @en The number of LOD levels.\r\n     * @zh LOD 等级数量\r\n     */\r\n    private _lodCount: number;\r\n\r\n    /**\r\n     * @en The information of LOD levels.\r\n     * @zh LOD 等级信息\r\n     */\r\n    private _lods: LODInfo[] = [];\r\n\r\n    /**\r\n     * @en The index of the visible node.\r\n     * @zh 显示节点\r\n     */\r\n    private _visialIndex = -1;\r\n\r\n    /**\r\n     * @en The ratio of the LOD node.\r\n     * @zh LOD节点比例\r\n     */\r\n    private _nowRate: number;\r\n\r\n    /**\r\n     * @en Constructor method of LODGroup.\r\n     * @zh LOD组的构造方法\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._bounds = new Bounds();\r\n        this._lodPosition = new Vector3();\r\n        this.runInEditor = true;\r\n    }\r\n\r\n    /**\r\n     * @en Shadow culling pass\r\n     * @zh 阴影裁剪pass\r\n     */\r\n    shadowCullPass(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en The array of LODInfo objects\r\n     * @zh LODInfo数组\r\n     */\r\n    get lods(): LODInfo[] {\r\n        return this._lods;\r\n    }\r\n\r\n    set lods(data: LODInfo[]) {\r\n        this._lods = data;\r\n        for (var i = 0, n = this._lods.length; i < n; i++) {\r\n            let element = this._lods[i]\r\n            element._lodIndex = i;\r\n            element.group = this;\r\n        }\r\n        this._updateRecaculateFlag();\r\n        this._lodCount = this._lods.length;\r\n    }\r\n\r\n    /**\r\n     * @en Proportion of lod nodes\r\n     * @zh lod节点比例\r\n     */\r\n    get nowRate() {\r\n        return this._nowRate;\r\n    }\r\n\r\n    /**\r\n     * @en LOD bounds\r\n     * @zh LOD包围盒\r\n     */\r\n    get bounds() {\r\n        this.recalculateBounds();\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        for (var i = 0, n = this._lods.length; i < n; i++) {\r\n            this._setLODinvisible(i);\r\n        }\r\n        this._visialIndex = -1;\r\n\r\n\r\n        this._applyVisibleRate(1);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        this._lods.forEach(element => {\r\n            element.removeAllRender();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 设置显示隐藏组\r\n     * @param rate \r\n     * @returns \r\n     */\r\n    private _applyVisibleRate(rate: number) {\r\n        for (var i = 0; i < this._lodCount; i++) {\r\n            let lod = this._lods[i];\r\n            if (rate > lod.mincullRate) {\r\n                if (i == -1) {\r\n                    this._setLODvisible(i);\r\n                    this._visialIndex = i;\r\n                    return;\r\n                }\r\n                if (i == this._visialIndex)\r\n                    return;\r\n                else {\r\n                    (this._visialIndex != -1) && this._setLODinvisible(this._visialIndex);\r\n                    this._setLODvisible(i);\r\n                    this._visialIndex = i;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        //cull\r\n        if (this._visialIndex != -1) {\r\n            this._setLODinvisible(this._visialIndex);\r\n            this._visialIndex = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置某一级LOD显示\r\n     * @param index \r\n     */\r\n    private _setLODvisible(index: number): void {\r\n        let lod = this._lods[index];\r\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\r\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置某一级LOD不显示\r\n     * @param index \r\n     */\r\n    private _setLODinvisible(index: number) {\r\n        let lod = this._lods[index];\r\n        for (var i = 0, n = lod._renders.length; i < n; i++) {\r\n            lod._renders[i].setRenderbitFlag(RenderBitFlag.RenderBitFlag_CullFlag, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Called when the object is being destroyed to perform cleanup operations.\r\n     * @zh 在对象被销毁时调用，以执行清理操作。\r\n     */\r\n    onDestroy() {\r\n        this._lods.forEach(element => {\r\n            let renderarray = element._renders;\r\n            for (var i = 0; i < renderarray.length; i++) {\r\n                element.removeNode(renderarray[i].owner as Sprite3D);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateRecaculateFlag() {\r\n        this._needcaculateBounds = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param lodGroup \r\n     */\r\n    _cloneTo(lodGroup: LODGroup) {\r\n        super._cloneTo(lodGroup);\r\n        //get common parent\r\n        let getCommomParent = (rootNode: Sprite3D, rootCheckNode: Sprite3D): Sprite3D => {\r\n            let nodeArray: Sprite3D[] = [];\r\n            let node = rootNode;\r\n            while (!!node) {\r\n                if (node instanceof Sprite3D)\r\n                    nodeArray.push(node);\r\n                node = node.parent as Sprite3D;\r\n            }\r\n            let checkNode: Sprite3D = rootCheckNode;\r\n            while (!!checkNode && nodeArray.indexOf(checkNode) == -1) {\r\n                checkNode = checkNode.parent as Sprite3D;\r\n            }\r\n            return checkNode;\r\n        }\r\n        let cloneHierachFun = (rootNode: Sprite3D, rootCheckNode: Sprite3D, destNode: Sprite3D): Sprite3D => {\r\n            let rootparent: Sprite3D = getCommomParent(rootNode, rootCheckNode);\r\n            if (!rootparent)\r\n                return null;\r\n            let path: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootNode, path);\r\n            let pathcheck: number[] = [];\r\n            Utils3D._getHierarchyPath(rootparent, rootCheckNode, pathcheck);\r\n            let destParent = Utils3D._getParentNodeByHierarchyPath(destNode, path);\r\n            if (!destParent)\r\n                return null;\r\n            return Utils3D._getNodeByHierarchyPath(destParent, pathcheck) as Sprite3D;\r\n        }\r\n        let lodArray: LODInfo[] = [];\r\n        for (let i = 0, n = this._lodCount; i < n; i++) {\r\n            let lod = this._lods[i];\r\n            let cloneLOD = new LODInfo(lod.mincullRate);\r\n            lodArray.push(cloneLOD);\r\n            lod._renders.forEach(element => {\r\n                let node = cloneHierachFun(this.owner as Sprite3D, element.owner as Sprite3D, lodGroup.owner as Sprite3D);\r\n                if (node)\r\n                    cloneLOD.addNode(node);\r\n            });\r\n        }\r\n        lodGroup.lods = lodArray;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Recalculate the bounding box\r\n     * @zh 重新计算包围盒\r\n     */\r\n    recalculateBounds() {\r\n        if (!this._needcaculateBounds) {\r\n            return;\r\n        }\r\n        let firstBounds = true;\r\n        for (let i = 0, n = this._lods.length; i < n; i++) {\r\n            let lod = this._lods[i];\r\n            lod._renders.forEach(element => {\r\n                if (firstBounds) {\r\n                    element.bounds.cloneTo(this._bounds);\r\n                    firstBounds = false;\r\n                }\r\n                else\r\n                    Bounds.merge(this._bounds, element.bounds, this._bounds);\r\n            });\r\n        }\r\n        this._lodPosition = this._bounds._imp.getCenter();\r\n        let extend = this._bounds.getExtent();\r\n        this._size = 2 * Math.max(extend.x, extend.y, extend.z);\r\n        this._needcaculateBounds = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Update before rendering\r\n     * @zh 渲染之前的更新\r\n     */\r\n    onPreRender() {\r\n        this.recalculateBounds();\r\n        //查看相机的距离\r\n        let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n        let maxYDistance = checkCamera.maxlocalYDistance;\r\n        let cameraFrustum = checkCamera.boundFrustum;\r\n        Vector3.subtract(this._lodPosition, checkCamera.transform.position, tempVec);\r\n        //大于farplane,或者不在视锥内.不做lod操作\r\n        let length = tempVec.length();\r\n        if (length > checkCamera.farPlane || cameraFrustum.containsPoint(this._lodPosition) == 0) {\r\n            return;\r\n        }\r\n        let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n        let rate = (this._size / rateYDistance);\r\n        this._nowRate = rate;\r\n        this._applyVisibleRate(rate);\r\n    }\r\n}\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * @en The `PixelLineData` class is used to represent line data.\r\n * @zh `PixelLineData` 类用于表示线数据。\r\n */\r\nexport class PixelLineData {\r\n\t/**\r\n\t * @en The starting position of the line.\r\n\t * @zh 线的起始位置。\r\n\t */\r\n\tstartPosition: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en The ending position of the line.\r\n\t * @zh 线的结束位置。\r\n\t */\r\n\tendPosition: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en The color at the start of the line.\r\n\t * @zh 线的起始颜色。\r\n\t */\r\n\tstartColor: Color = new Color();\r\n\r\n\t/**\r\n\t * @en The color at the end of the line.\r\n\t * @zh 线的结束颜色。\r\n\t */\r\n\tendColor: Color = new Color();\r\n\r\n\t/**\r\n\t * @en Line start normal\r\n\t * @zh 线开始法线\r\n\t */\r\n\tstartNormal:Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en Line end normal\r\n\t * @zh 线结束法线\r\n\t */\r\n\tendNormal:Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: PixelLineData): void {\r\n\t\tthis.startPosition.cloneTo(destObject.startPosition);\r\n\t\tthis.endPosition.cloneTo(destObject.endPosition);\r\n\t\tthis.startColor.cloneTo(destObject.startColor);\r\n\t\tthis.endColor.cloneTo(destObject.endColor);\r\n\t\tthis.startNormal.cloneTo(destObject.startPosition);\r\n\t\tthis.endNormal.cloneTo(destObject.endPosition);\r\n\t}\r\n}\r\n\r\n","import { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\r\nimport { PixelLineVertex } from \"./PixelLineVertex\";\r\n\r\n/**\r\n * @en The `PixelLineFilter` class is used for line filtering.\r\n * @zh `PixelLineFilter` 类用于线过滤器。\r\n */\r\nexport class PixelLineFilter extends GeometryElement {\r\n\t/** @private */\r\n\tprivate static _tempVector0: Vector3 = new Vector3();\r\n\t/** @private */\r\n\tprivate static _tempVector1: Vector3 = new Vector3();\r\n\r\n\t/**@internal */\r\n\tprivate static _type: number = GeometryElement._typeCounter++;\r\n\r\n\t/** @internal */\r\n\tprivate _floatCountPerVertices: number = 10;\r\n\r\n\r\n\t/** @internal */\r\n\tprivate _vertexBuffer: VertexBuffer3D;\r\n\t/** @internal */\r\n\tprivate _vertices: Float32Array;\r\n\t/** @internal */\r\n\tprivate _minUpdate: number = Number.MAX_VALUE;\r\n\t/** @internal */\r\n\tprivate _maxUpdate: number = Number.MIN_VALUE;\r\n\t/** @internal */\r\n\tprivate _floatBound: Float32Array = new Float32Array(6);\r\n\t/** @internal */\r\n\tprivate _calculateBound: boolean = true;\r\n\r\n\t/** @internal */\r\n\t_ownerRender: PixelLineRenderer;\r\n\t/** @internal */\r\n\t_bounds: Bounds;\r\n\t/** @internal */\r\n\t_maxLineCount: number = 0;\r\n\t/** @internal */\r\n\t_lineCount: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en initialize pixeLineFilter instance.\r\n\t * @param owner The rendering sprite node.\r\n\t * @param maxLineCount The maximum line count.\r\n\t * @zh 初始化pixeLineFilter实例。\r\n\t * @param owner 渲染精灵节点。\r\n\t * @param maxLineCount 最大线段数量。\r\n\t */\r\n\tconstructor(owner: PixelLineRenderer, maxLineCount: number) {\r\n\t\tsuper(MeshTopology.Lines, DrawType.DrawArray);\r\n\t\tvar pointCount: number = maxLineCount * 2;\r\n\t\tthis._ownerRender = owner;\r\n\t\tthis._maxLineCount = maxLineCount;\r\n\t\tthis._vertices = new Float32Array(pointCount * this._floatCountPerVertices);\r\n\t\tthis._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tvar bufferState = new BufferState();\r\n\t\tthis.bufferState = bufferState;\r\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\tthis._bounds = new Bounds(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t *\t{@inheritDoc PixelLineFilter._getType}\r\n\t *\t@override\r\n\t *  @internal\r\n\t */\r\n\t_getType(): number {\r\n\t\treturn PixelLineFilter._type;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resizeLineData(maxCount: number): void {\r\n\t\tvar pointCount: number = maxCount * 2;\r\n\t\tvar lastVertices: Float32Array = this._vertices;\r\n\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._maxLineCount = maxCount;\r\n\r\n\t\tvar vertexCount: number = pointCount * this._floatCountPerVertices;\r\n\t\tthis._vertices = new Float32Array(vertexCount);\r\n\t\tthis._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride * pointCount, BufferUsage.Static, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = PixelLineVertex.vertexDeclaration;\r\n\r\n\t\tif (vertexCount < lastVertices.length) {//取最小长度,拷贝旧数据\r\n\t\t\tthis._vertices.set(new Float32Array(lastVertices.buffer, 0, vertexCount));\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, vertexCount * 4);\r\n\t\t} else {\r\n\t\t\tthis._vertices.set(lastVertices);\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, 0, 0, lastVertices.length * 4);\r\n\t\t}\r\n\r\n\t\tthis.bufferState.applyState([this._vertexBuffer], null);\r\n\r\n\t\tthis._minUpdate = Number.MAX_VALUE;\r\n\t\tthis._maxUpdate = Number.MIN_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _updateLineVertices(offset: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color, startNormal: Vector3 = null, endNormal: Vector3 = null): void {\r\n\t\tif (startPosition) {\r\n\t\t\tthis._vertices[offset + 0] = startPosition.x;\r\n\t\t\tthis._vertices[offset + 1] = startPosition.y;\r\n\t\t\tthis._vertices[offset + 2] = startPosition.z;\r\n\t\t}\r\n\r\n\t\tif (startColor) {\r\n\t\t\tthis._vertices[offset + 3] = startColor.r;\r\n\t\t\tthis._vertices[offset + 4] = startColor.g;\r\n\t\t\tthis._vertices[offset + 5] = startColor.b;\r\n\t\t\tthis._vertices[offset + 6] = startColor.a;\r\n\t\t}\r\n\r\n\t\tif (startNormal) {\r\n\t\t\tthis._vertices[offset + 7] = startNormal.x;\r\n\t\t\tthis._vertices[offset + 8] = startNormal.y;\r\n\t\t\tthis._vertices[offset + 9] = startNormal.z;\r\n\t\t}\r\n\r\n\t\tif (endPosition) {\r\n\t\t\tthis._vertices[offset + 10] = endPosition.x;\r\n\t\t\tthis._vertices[offset + 11] = endPosition.y;\r\n\t\t\tthis._vertices[offset + 12] = endPosition.z;\r\n\t\t}\r\n\r\n\t\tif (endColor) {\r\n\t\t\tthis._vertices[offset + 13] = endColor.r;\r\n\t\t\tthis._vertices[offset + 14] = endColor.g;\r\n\t\t\tthis._vertices[offset + 16] = endColor.b;\r\n\t\t\tthis._vertices[offset + 16] = endColor.a;\r\n\t\t}\r\n\r\n\t\tif (endNormal) {\r\n\t\t\tthis._vertices[offset + 17] = endNormal.x;\r\n\t\t\tthis._vertices[offset + 18] = endNormal.y;\r\n\t\t\tthis._vertices[offset + 19] = endNormal.z;\r\n\t\t}\r\n\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + this._floatCountPerVertices * 2);\r\n\r\n\t\t//expand bound\r\n\t\tvar bounds: Bounds = this._bounds;\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar min: Vector3 = bounds.getMin(), max: Vector3 = bounds.getMax();\r\n\t\tVector3.min(min, startPosition, min);\r\n\t\tVector3.min(min, endPosition, min);\r\n\t\tVector3.max(max, startPosition, max);\r\n\t\tVector3.max(max, endPosition, max);\r\n\t\tbounds.setMin(min);\r\n\t\tbounds.setMax(max);\r\n\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t\tthis._ownerRender.boundsChange = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_reCalculateBound(): void {\r\n\t\tif (this._calculateBound) {\r\n\t\t\tvar vertices: Float32Array = this._vertices;\r\n\t\t\tvar min: Vector3 = PixelLineFilter._tempVector0;\r\n\t\t\tvar max: Vector3 = PixelLineFilter._tempVector1;\r\n\t\t\tmin.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\t\t\tmax.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\t\t\tfor (var i: number = 0; i < this._lineCount * 2; ++i) {\r\n\t\t\t\tvar offset: number = this._floatCountPerVertices * i;\r\n\t\t\t\tvar x: number = vertices[offset + 0], y: number = vertices[offset + 1], z: number = vertices[offset + 2];\r\n\t\t\t\tmin.x = Math.min(x, min.x);\r\n\t\t\t\tmin.y = Math.min(y, min.y);\r\n\t\t\t\tmin.z = Math.min(z, min.z);\r\n\t\t\t\tmax.x = Math.max(x, max.x);\r\n\t\t\t\tmax.y = Math.max(y, max.y);\r\n\t\t\t\tmax.z = Math.max(z, max.z);\r\n\t\t\t}\r\n\t\t\tthis._bounds.setMin(min);\r\n\t\t\tthis._bounds.setMax(max);\r\n\t\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\t\tfloatBound[0] = min.x, floatBound[1] = min.y, floatBound[2] = min.z;\r\n\t\t\tfloatBound[3] = max.x, floatBound[4] = max.y, floatBound[5] = max.z;\r\n\t\t\tthis._calculateBound = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_removeLineData(index: number): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar nextIndex: number = index + 1;\r\n\t\tvar offset: number = index * floatCount;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar rightPartVertices: Float32Array = new Float32Array(vertices.buffer, nextIndex * floatCount * 4, (this._lineCount - nextIndex) * floatCount);\r\n\t\tvertices.set(rightPartVertices, offset);\r\n\t\tthis._minUpdate = Math.min(this._minUpdate, offset);\r\n\t\tthis._maxUpdate = Math.max(this._maxUpdate, offset + rightPartVertices.length);\r\n\t\tthis._lineCount--;\r\n\r\n\t\tvar floatBound: Float32Array = this._floatBound;\r\n\t\tvar startX: number = vertices[offset], startY: number = vertices[offset + 1], startZ: number = vertices[offset + 2];\r\n\t\tvar endX: number = vertices[offset + 7], endY: number = vertices[offset + 8], endZ: number = vertices[offset + 9];\r\n\t\tvar minX: number = floatBound[0], minY: number = floatBound[1], minZ: number = floatBound[2];\r\n\t\tvar maxX: number = floatBound[3], maxY: number = floatBound[4], maxZ: number = floatBound[5];\r\n\r\n\t\tif ((startX === minX) || (startX === maxX) || (startY === minY) || (startY === maxY) || (startZ === minZ) || (startZ === maxZ) ||\r\n\t\t\t(endX === minX) || (endX === maxX) || (endY === minY) || (endY === maxY) || (endZ === minZ) || (endZ === maxZ))\r\n\t\t\tthis._calculateBound = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineData(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color, startNormal: Vector3 = null, endNormal: Vector3 = null): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tthis._updateLineVertices(index * floatCount, startPosition, endPosition, startColor, endColor, startNormal, endNormal);\r\n\t\tthis._calculateBound = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateLineDatas(index: number, data: PixelLineData[]): void {\r\n\t\tvar floatCount: number = this._floatCountPerVertices * 2;\r\n\t\tvar count: number = data.length;\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tvar line: PixelLineData = data[i];\r\n\t\t\tthis._updateLineVertices((index + i) * floatCount, line.startPosition, line.endPosition, line.startColor, line.endColor, line.startNormal, line.endNormal);\r\n\t\t}\r\n\t\tthis._calculateBound = data.length > 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Get the line segment data.\r\n\t * @param index The index of the line segment.\r\n\t * @param out The output PixelLineData object.\r\n\t * @zh 获取线段数据。\r\n\t * @param index 线段的索引。\r\n\t * @param out 输出的PixelLineData对象。\r\n\t */\r\n\t_getLineData(index: number, out: PixelLineData): void {\r\n\t\tvar startPosition: Vector3 = out.startPosition;\r\n\t\tvar startColor: Color = out.startColor;\r\n\t\tvar endPosition: Vector3 = out.endPosition;\r\n\t\tvar endColor: Color = out.endColor;\r\n\r\n\t\tvar startNormal: Vector3 = out.startNormal;\r\n\t\tvar endNormal: Vector3 = out.endNormal;\r\n\r\n\t\tvar vertices: Float32Array = this._vertices;\r\n\t\tvar offset: number = index * this._floatCountPerVertices * 2;\r\n\r\n\t\tstartPosition.x = vertices[offset + 0];\r\n\t\tstartPosition.y = vertices[offset + 1];\r\n\t\tstartPosition.z = vertices[offset + 2];\r\n\t\tstartColor.r = vertices[offset + 3];\r\n\t\tstartColor.g = vertices[offset + 4];\r\n\t\tstartColor.b = vertices[offset + 5];\r\n\t\tstartColor.a = vertices[offset + 6];\r\n\t\tstartNormal.x = vertices[offset + 7];\r\n\t\tstartNormal.y = vertices[offset + 8];\r\n\t\tstartNormal.z = vertices[offset + 9];\r\n\r\n\t\tendPosition.x = vertices[offset + 10];\r\n\t\tendPosition.y = vertices[offset + 11];\r\n\t\tendPosition.z = vertices[offset + 12];\r\n\t\tendColor.r = vertices[offset + 13];\r\n\t\tendColor.g = vertices[offset + 14];\r\n\t\tendColor.b = vertices[offset + 15];\r\n\t\tendColor.a = vertices[offset + 16];\r\n\t\tendNormal.x = vertices[offset + 17];\r\n\t\tendNormal.y = vertices[offset + 18];\r\n\t\tendNormal.z = vertices[offset + 19];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_prepareRender(state: RenderContext3D): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @internal\r\n\t */\r\n\t_updateRenderParams(state: RenderContext3D): void {\r\n\t\tthis.clearRenderParams();\r\n\t\tif (this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE) {\r\n\t\t\tthis._vertexBuffer.setData(this._vertices.buffer, this._minUpdate * 4, this._minUpdate * 4, (this._maxUpdate - this._minUpdate) * 4);\r\n\t\t\tthis._minUpdate = Number.MAX_VALUE;\r\n\t\t\tthis._maxUpdate = Number.MIN_VALUE;\r\n\t\t}\r\n\t\tif (this._lineCount > 0) {\r\n\t\t\tthis.setDrawArrayParams(0, this._lineCount * 2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Destroy the PixelLineFilter instance.\r\n\t * @zh 销毁PixelLineFilter实例。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._destroyed)\r\n\t\t\treturn;\r\n\t\tsuper.destroy();\r\n\t\tthis.bufferState.destroy();\r\n\t\tthis._vertexBuffer.destroy();\r\n\t\tthis._bufferState = null;\r\n\t\tthis._vertexBuffer = null;\r\n\t\tthis._vertices = null;\r\n\t}\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IMeshRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\n\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { PixelLineFilter } from \"./PixelLineFilter\";\r\nimport { PixelLineMaterial } from \"./PixelLineMaterial\";\r\n\r\n\r\n/**\r\n * @en PixelLineRenderer class for line rendering.\r\n * @zh PixelLineRenderer 类用于线渲染器。\r\n */\r\nexport class PixelLineRenderer extends BaseRender {\r\n    /** @internal */\r\n    protected _projectionViewWorldMatrix: Matrix4x4;\r\n\r\n    /**@internal */\r\n    _pixelLineFilter: PixelLineFilter;\r\n    /** @private 是否调用active */\r\n    private _isRenderActive: Boolean = false;\r\n    /** @private 是否加入渲染队列*/\r\n    private _isInRenders: Boolean = false;\r\n\r\n    private _needUpdatelines: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Initialize PixelLineRenderer instance.\r\n     * @zh 初始化PixelLineRenderer实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._projectionViewWorldMatrix = new Matrix4x4();\r\n        this._pixelLineFilter = new PixelLineFilter(this, 20);\r\n        this._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n        this.geometryBounds = this._pixelLineFilter._bounds;\r\n    }\r\n\r\n    /**\r\n     * @en The bounds of the line renderer.\r\n     * @zh 线渲染器的包围盒。\r\n     */\r\n    get bounds(): Bounds {\r\n        var lineFilter: PixelLineFilter = this._pixelLineFilter;\r\n        lineFilter._reCalculateBound();\r\n        return super.bounds;\r\n    }\r\n\r\n    private _lines: PixelLineData[] = [];\r\n\r\n    /**\r\n     * @en The line segment data.\r\n     * @zh 线段数据。\r\n     */\r\n    get pixelLinesDatas() {\r\n        if (this._needUpdatelines) {\r\n            this._updateLineDatas();\r\n        }\r\n        return this._lines;\r\n    }\r\n\r\n    set pixelLinesDatas(value: PixelLineData[]) {\r\n        this.clear();\r\n        this.addLines(value);\r\n    }\r\n\r\n    /**\r\n     * @en The maximum number of lines.\r\n     * @zh 最大线数量。\r\n     */\r\n    get maxLineCount(): number {\r\n        return this._pixelLineFilter._maxLineCount;\r\n    }\r\n\r\n    set maxLineCount(value: number) {\r\n        this._pixelLineFilter._resizeLineData(value);\r\n        this._pixelLineFilter._lineCount = Math.min(this._pixelLineFilter._lineCount, value);\r\n    }\r\n\r\n    /**\r\n     * @en The current number of lines.\r\n     * @zh 当前线数量。\r\n     */\r\n    get lineCount(): number {\r\n        return this._pixelLineFilter._lineCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this._changeRenderObjects(0, PixelLineMaterial.defaultMaterial);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        this._isRenderActive = true;\r\n        if (this._pixelLineFilter._lineCount != 0) {\r\n            (this.owner.scene)._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._setBelongScene(this.owner.scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDisable(): void {\r\n        if (this._pixelLineFilter && this._pixelLineFilter._lineCount != 0 && this._isRenderActive) {\r\n            this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n        this._isRenderActive = false;\r\n        this._setUnBelongScene();\r\n    }\r\n\r\n    protected _createBaseRenderNode(): IMeshRenderNode {\r\n        return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode();\r\n    }\r\n\r\n    /**\r\n     * @en Update the render context.\r\n     * @param context The render context.\r\n     * @zh 更新渲染上下文。\r\n     * @param context 渲染上下文。\r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        this._renderElements.forEach((element, index) => {\r\n            element._renderElementOBJ.isRender = element._geometry._prepareRender(context);\r\n            element._geometry._updateRenderParams(context);\r\n\r\n            let material = this.sharedMaterial ?? UnlitMaterial.defaultMaterial;\r\n            material = this.sharedMaterials[index] ?? material;\r\n            element.material = material;\r\n            element._renderElementOBJ.materialRenderQueue = material.renderQueue;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @inheritDoc\r\n     */\r\n    _changeRenderObjects(index: number, material: Material): void {\r\n        var renderObjects: RenderElement[] = this._renderElements;\r\n        (material) || (material = PixelLineMaterial.defaultMaterial);\r\n        var renderElement: RenderElement = renderObjects[index];\r\n        (renderElement) || (renderElement = renderObjects[index] = new RenderElement());\r\n        renderElement.setTransform((this.owner as Sprite3D)._transform);\r\n        renderElement.setGeometry(this._pixelLineFilter);\r\n        renderElement.render = this;\r\n        renderElement.material = material;\r\n        //renderElement.renderSubShader = renderElement.material.shader.getSubShaderAt(0);//TODO\r\n        this._setRenderElements();\r\n    }\r\n\r\n    /**\r\n     * @internal //animator data set call\r\n     * @param key \r\n     */\r\n    _pixelLinesDataChange(key: string) {\r\n        if (key != null) {\r\n            let keyN = parseInt(key);\r\n            let line = this._lines[keyN];\r\n            if (line) {\r\n                this.setLine(keyN, line.startPosition, line.endPosition, line.startColor, line.endColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a line.\r\n     * @param startPosition Initial point position\r\n     * @param endPosition End point position\r\n     * @param startColor Initial point color\r\n     * @param endColor End point color\r\n     * @zh 增加一条线。\r\n     * @param startPosition 初始点位置\r\n     * @param endPosition 结束点位置\r\n     * @param startColor 初始点颜色\r\n     * @param endColor 结束点颜色\r\n     */\r\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        if (this._pixelLineFilter._lineCount !== this._pixelLineFilter._maxLineCount) {\r\n            this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++, startPosition, endPosition, startColor, endColor);\r\n        }\r\n        else {\r\n            throw \"PixelLineSprite3D: lineCount has equal with maxLineCount.\";\r\n        }\r\n\r\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\r\n            this.owner.scene && this.owner.scene._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * @en Add a line with normal.\r\n     * @param startPosition Initial point position\r\n     * @param endPosition End point position\r\n     * @param startColor Initial point color\r\n     * @param endColor End point color\r\n     * @param startNormal Initial point normal\r\n     * @param endNormal End point normal\r\n     * @zh 增加一条带有法线的线。\r\n     * @param startPosition 初始点位置\r\n     * @param endPosition 结束点位置\r\n     * @param startColor 初始点颜色\r\n     * @param endColor 结束点颜色\r\n     * @param startNormal 初始点法线     \r\n     * @param endNormal 结束点法线\r\n     */\r\n    addLineWithNormal(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color, startNormal: Vector3, endNormal: Vector3) {\r\n        if (this._pixelLineFilter._lineCount !== this._pixelLineFilter._maxLineCount) {\r\n            this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++, startPosition, endPosition, startColor, endColor, startNormal, endNormal);\r\n        }\r\n        else {\r\n            throw \"PixelLineSprite3D: lineCount has equal with maxLineCount.\";\r\n        }\r\n\r\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\r\n            this.owner.scene && this.owner.scene._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * @en Add multiple line segments.\r\n     * @param lines Line segment data\r\n     * @zh 添加多条线段。\r\n     * @param lines 线段数据\r\n     */\r\n    addLines(lines: PixelLineData[]): void {\r\n        var lineCount: number = this._pixelLineFilter._lineCount;\r\n        var addCount: number = lines.length;\r\n        if (lineCount + addCount > this._pixelLineFilter._maxLineCount) {\r\n            throw \"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.\";\r\n        }\r\n        else {\r\n            this._pixelLineFilter._updateLineDatas(lineCount, lines);\r\n            this._pixelLineFilter._lineCount += addCount;\r\n            this.boundsChange = true;\r\n        }\r\n        if (this._isRenderActive && !this._isInRenders && this._pixelLineFilter._lineCount > 0) {\r\n            this.owner.scene && this.owner.scene._addRenderObject(this);\r\n            this._isInRenders = true;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * @en Remove a line segment.\r\n     * @param index Index of the line to remove\r\n     * @zh 移除一条线段。\r\n     * @param index 线段索引。\r\n     */\r\n    removeLine(index: number): void {\r\n        if (index < this._pixelLineFilter._lineCount)\r\n            this._pixelLineFilter._removeLineData(index);\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n        if (this._isRenderActive && this._isInRenders && this._pixelLineFilter._lineCount == 0) {\r\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n        this._needUpdatelines = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update a line.\r\n     * @param index Index of the line to update\r\n     * @param startPosition Initial point position\r\n     * @param endPosition End point position\r\n     * @param startColor Initial point color\r\n     * @param endColor End point color\r\n     * @zh 更新线。\r\n     * @param index 线段索引。\r\n     * @param startPosition 初始点位置。\r\n     * @param endPosition 结束点位置。\r\n     * @param startColor 初始点颜色。\r\n     * @param endColor 结束点颜色。\r\n     */\r\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        if (index < this._pixelLineFilter._lineCount) {\r\n            this._pixelLineFilter._updateLineData(index, startPosition, endPosition, startColor, endColor);\r\n            let pixeldata = this._lines[index];\r\n            if (pixeldata) {\r\n                startColor.cloneTo(pixeldata.startColor);\r\n                endColor.cloneTo(pixeldata.endColor);\r\n                startPosition.cloneTo(pixeldata.startPosition);\r\n                endPosition.cloneTo(pixeldata.endPosition);\r\n            }\r\n        }\r\n\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n    }\r\n\r\n    /**\r\n     * @en Update a line with normal.\r\n     * @param index Index of the line to update\r\n     * @param startPosition Initial point position\r\n     * @param endPosition End point position\r\n     * @param startColor Initial point color\r\n     * @param endColor End point color\r\n     * @param startNormal Initial point normal\r\n     * @param endNormal End point normal\r\n     * @zh 更新带有法线的线。\r\n     * @param index 线段索引。\r\n     * @param startPosition 初始点位置。\r\n     * @param endPosition 结束点位置。\r\n     * @param startColor 初始点颜色。\r\n     * @param endColor 结束点颜色。\r\n     * @param startNormal 初始点法线。\r\n     * @param endNormal 结束点法线。\r\n     */\r\n    setLineWithNormal(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color, startNormal: Vector3, endNormal: Vector3): void {\r\n        if (index < this._pixelLineFilter._lineCount) {\r\n            this._pixelLineFilter._updateLineData(index, startPosition, endPosition, startColor, endColor, startNormal, endNormal);\r\n            let pixeldata = this._lines[index];\r\n            if (pixeldata) {\r\n                startColor.cloneTo(pixeldata.startColor);\r\n                endColor.cloneTo(pixeldata.endColor);\r\n                startPosition.cloneTo(pixeldata.startPosition);\r\n                endPosition.cloneTo(pixeldata.endPosition);\r\n                startNormal && startNormal.cloneTo(pixeldata.startNormal);\r\n                endNormal && endNormal.cloneTo(pixeldata.endNormal);\r\n            }\r\n        }\r\n\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n    }\r\n\r\n    /**\r\n     * @en Get line segment data.\r\n     * @param index Index of the line to get\r\n     * @param out Output line segment data\r\n     * @zh 获取线段数据。\r\n     * @param index 线段索引。\r\n     * @param out 线段数据。\r\n     */\r\n    getLine(index: number, out: PixelLineData): void {\r\n        if (index < this.lineCount)\r\n            this._pixelLineFilter._getLineData(index, out);\r\n        else\r\n            throw \"PixelLineSprite3D: index must less than lineCount.\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updateLineDatas() {\r\n        let n = this.lineCount;\r\n        this._lines = [];\r\n        for (let i = 0; i < n; i++) {\r\n            let pixelLineDatas = new PixelLineData();\r\n            this.getLine(i, pixelLineDatas);\r\n            this._lines.push(pixelLineDatas);\r\n        }\r\n        this._needUpdatelines = false;\r\n    }\r\n\r\n    /**\r\n     * @en Clear all line segments.\r\n     * @zh 清除所有线段。\r\n     */\r\n    clear(): void {\r\n        this._pixelLineFilter._lineCount = 0;\r\n        if (this._isRenderActive && this._isInRenders) {\r\n            this.owner.scene && this.owner.scene._removeRenderObject(this);\r\n            this._isInRenders = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n        this._pixelLineFilter.destroy();\r\n        this._pixelLineFilter = null;\r\n        super._onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @param dest \r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        let render = dest as PixelLineRenderer;\r\n        render.maxLineCount = this.maxLineCount;\r\n        const lineCount = this.lineCount;\r\n        let linedata = new PixelLineData();\r\n        for (let i = 0, n = lineCount; i < n; i++) {\r\n            this.getLine(i, linedata);\r\n            render.addLine(linedata.startPosition, linedata.endPosition, linedata.startColor, linedata.endColor);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { AnimatorState } from \"./AnimatorState\";\r\n\r\n/**\r\n * @en The AnimatorPlayState class is used to create animation play state information.\r\n * @zh AnimatorPlayState 类用于创建动画播放状态信息。\r\n */\r\nexport class AnimatorPlayState {\r\n\t/**@internal */\r\n\t_finish: boolean;\r\n\t/**@internal */\r\n\t_startPlayTime: number;\r\n\t/**@internal */\r\n\t_lastElapsedTime: number;\r\n\t/**@internal 动画播放时间*/\r\n\t_elapsedTime: number;\r\n\t/**@internal 播放状态的归一化时间,整数为循环次数，小数为单次播放时间。*/\r\n\t_normalizedTime: number;\r\n\t/**@internal 单词播放归一化时间 */\r\n\t_normalizedPlayTime: number;\r\n\t/**@internal */\r\n\t_duration: number;\r\n\t/**@internal 上次播放的时间，event事件使用*/\r\n\t_parentPlayTime: number;\r\n\t/**@internal */\r\n\t_playEventIndex: number;\r\n\t/**@internal */\r\n\t_lastIsFront: boolean;\r\n\t/**@internal */\r\n\tprivate _currentState: AnimatorState | null = null;\r\n\r\n\t/**\r\n\t * @en The current AnimatorState.\r\n\t * @zh 当前的动画状态。\r\n\t */\r\n\tpublic get currentState(): AnimatorState | null {\r\n\t\treturn this._currentState;\r\n\t}\r\n\tpublic set currentState(value: AnimatorState | null) {\r\n\t\tthis._currentState = value;\r\n\t\tthis._currentState.curTransition = null;//清空目前条件判断\r\n\t}\r\n\r\n\t/**\r\n\t * @en The normalized time of the play state. The integer part represents the number of loops, and the fractional part represents the time of a single play.\r\n\t * @returns The normalized time of the animation.\r\n\t * @zh 播放状态的归一化时间。整数部分表示循环次数，小数部分表示单次播放时间。\r\n\t * @returns 动画的归一化时间。\r\n\t */\r\n\tget normalizedTime(): number {\r\n\t\treturn this._normalizedTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The duration of the current animation in seconds.\r\n\t * @zh 当前动画的持续时间，以秒为单位。\r\n\t */\r\n\tget duration(): number {\r\n\t\treturn this._duration;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The current animator state.\r\n\t * @zh 当前的动画状态机。\r\n\t */\r\n\tget animatorState(): AnimatorState {\r\n\t\treturn this._currentState!;\r\n\t}\r\n\r\n\t/**\r\n\t * @en constructor\r\n\t * @zh 构造函数\r\n\t */\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_resetPlayState(startTime: number, clipDuration: number): void {\r\n\t\tthis._finish = false;\r\n\t\tthis._playEventIndex = 0;\r\n\t\tthis._startPlayTime = startTime;\r\n\t\tthis._elapsedTime = startTime;\r\n\t\tthis._lastIsFront = true;\r\n\t\tthis._normalizedTime = this._elapsedTime / clipDuration;\r\n\t\tvar playTime = this._normalizedTime % 1.0;\r\n\t\tthis._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_cloneTo(dest: AnimatorPlayState): void {\r\n\t\tdest._finish = this._finish;\r\n\t\tdest._startPlayTime = this._startPlayTime;\r\n\t\tdest._playEventIndex = this._playEventIndex;\r\n\t\tdest._elapsedTime = this._elapsedTime;\r\n\t\tdest._normalizedTime = this._normalizedTime;\r\n\t\tdest._normalizedPlayTime = this._normalizedPlayTime;\r\n\t\tdest._lastIsFront = this._lastIsFront;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IClone } from \"../../../utils/IClone\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { Animator } from \"./Animator\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\nimport { KeyframeNodeOwner } from \"./KeyframeNodeOwner\";\r\n\r\n\r\n/**\r\n * @en The `AnimatorControllerLayer` class is used to create animation controller layers.\r\n * @zh `AnimatorControllerLayer` 类用于创建动画控制器层。\r\n */\r\nexport class AnimatorControllerLayer implements IClone {\r\n    /**\r\n     * @en Blending mode: Override. \r\n     * @zh 混合模式：覆盖。\r\n     */\r\n    static BLENDINGMODE_OVERRIDE: number = 0;\r\n    /**\r\n     * @en Blending mode: Additive. \r\n     * @zh 混合模式：叠加。\r\n     */\r\n    static BLENDINGMODE_ADDTIVE: number = 1;\r\n\r\n    /**@internal */\r\n    private _defaultState: AnimatorState | null;\r\n    /**@internal */\r\n    private _referenceCount: number = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Play type of the layer. 0: Normal play, 1: Dynamic blend play, 2: Fixed blend play\r\n     * @zh 层的播放类型。0：常规播放、1：动态融合播放、2：固定融合播放\r\n     */\r\n    _playType: number = -1;\r\n    /**@internal */\r\n    _crossDuration: number = -1;\r\n    /**@internal */\r\n    _crossPlayState: AnimatorState;\r\n    /**@internal */\r\n    _crossMark: number = 0;\r\n    /**@internal */\r\n    _crossNodesOwnersCount: number = 0;\r\n    /**@internal */\r\n    _crossNodesOwners: KeyframeNodeOwner[] = [];\r\n    /**@internal */\r\n    _crossNodesOwnersIndicesMap: any = {};\r\n    /**@internal */\r\n    _srcCrossClipNodeIndices: number[] = [];\r\n    /**@internal */\r\n    _destCrossClipNodeIndices: number[] = [];\r\n\r\n    /**@internal */\r\n    _animator: Animator;\r\n    /**@internal */\r\n    _states: AnimatorState[] = [];\r\n    /**@internal */\r\n    _playStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\r\n    /**@internal */\r\n    _crossPlayStateInfo: AnimatorPlayState | null = new AnimatorPlayState();\r\n    /**@internal */\r\n    _avatarMask: AvatarMask;\r\n    /**\r\n     * @en The name of the layer.\r\n     * @zh 层的名称。\r\n     */\r\n    name: string;\r\n    /**\r\n     * @en The blending mode of the layer.\r\n     * @zh 层的混合模式。\r\n     */\r\n    blendingMode: number = AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n    /**\r\n     * @en The default weight of the layer.\r\n     * @zh 层的默认权重。\r\n     */\r\n    defaultWeight: number = 1.0;\r\n    /**\r\n     * @en Whether to automatically play when activated.\r\n     * @zh 激活时是否自动播放。\r\n     */\r\n    playOnWake: boolean = true;\r\n    /**\r\n     * @en Whether the layer is enabled.\r\n     * @zh 层是否启用。\r\n     */\r\n    enable: boolean = true;\r\n\r\n    /**\r\n     * @en Default animation state machine.\r\n     * @zh 默认动画状态机。\r\n     */\r\n    get defaultState(): AnimatorState {\r\n        return this._defaultState!;\r\n    }\r\n\r\n    set defaultState(value: AnimatorState) {\r\n        this._defaultState = value;\r\n    }\r\n\r\n    /**\r\n     * @en The avatar mask of the layer.\r\n     * @zh 层的骨骼遮罩。\r\n     */\r\n    get avatarMask(): AvatarMask {\r\n        return this._avatarMask;\r\n    }\r\n\r\n    set avatarMask(value: AvatarMask) {\r\n        this._avatarMask = value;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The name of the default animation state machine for this layer.\r\n     * @zh 此层的默认动画状态机的名称。\r\n     */\r\n    public get defaultStateName() {\r\n        if (!this._defaultState) {\r\n            return null;\r\n        }\r\n        return this._defaultState.name;\r\n    }\r\n\r\n    private _defaultStateNameCatch: string;\r\n\r\n    public set defaultStateName(value: string) {\r\n        this._defaultState = this.getAnimatorState(value);\r\n        if (null == this._defaultState) {\r\n            if (0 == this._states.length) {\r\n                this._defaultStateNameCatch = value;\r\n            } else {\r\n                for (var i = this._states.length - 1; i >= 0; i--) {\r\n                    if (this._states[i].name == value) {\r\n                        this._defaultState = this._states[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The AnimatorStates in this layer.\r\n     * @zh 此层中动画状态\r\n     */\r\n    public get states(): ReadonlyArray<AnimatorState> {\r\n        return this._states;\r\n    }\r\n\r\n    public set states(states: ReadonlyArray<AnimatorState>) {\r\n        if (this._states === states)\r\n            return;\r\n\r\n        if (this._states.length > 0) {\r\n            let removed = this._states.filter(s => states.indexOf(s) == -1);\r\n            for (let state of removed)\r\n                this.removeState(state);\r\n        }\r\n\r\n        if (states.length > 0) {\r\n            let newAdded = states.filter(s => this._states.indexOf(s) == -1);\r\n            for (let state of newAdded)\r\n                this.addState(state);\r\n        }\r\n\r\n        this._states.length = 0;\r\n        this._states.push(...states);\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method.\r\n     * @param name 动画层名称\r\n     * @zh 构造方法\r\n     * @param name 动画层名称\r\n     */\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeClip(clipStateInfos: AnimatorState[], index: number, state: AnimatorState): void {\r\n        var clip: AnimationClip = state._clip!;\r\n        var clipStateInfo: AnimatorState = clipStateInfos[index];\r\n\r\n        clipStateInfos.splice(index, 1);\r\n\r\n        if (this._animator) {\r\n            var frameNodes = clip._nodes;\r\n            var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n            clip._removeReference();\r\n            for (var i: number = 0, n: number = frameNodes!.count; i < n; i++)\r\n                this._animator._removeKeyframeNodeOwner(nodeOwners, frameNodes!.getNodeByIndex(i));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getReferenceCount(): number {\r\n        return this._referenceCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _addReference(count: number = 1): void {\r\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n            this._states[i]._addReference(count);\r\n        this._referenceCount += count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeReference(count: number = 1): void {\r\n        for (var i: number = 0, n: number = this._states.length; i < n; i++)\r\n            this._states[i]._removeReference(count);\r\n        this._referenceCount -= count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clearReference(): void {\r\n        this._removeReference(-this._referenceCount);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the current play state of the animation.\r\n     * @returns The current AnimatorPlayState.\r\n     * @zh 获取当前的动画播放状态。\r\n     * @return 动画播放状态。\r\n     */\r\n    getCurrentPlayState(): AnimatorPlayState {\r\n        return this._playStateInfo!;\r\n    }\r\n\r\n    /**\r\n     * @en Gets an animator state by its name.\r\n     * @param name The name of the animator state to find.\r\n     * @returns The AnimatorState if found, or null if not found.\r\n     * @zh 通过名称获取动画状态。\r\n     * @param name 要查找的动画状态的名称。\r\n     * @returns 如果找到则返回AnimatorState，否则返回null。\r\n     */\r\n    getAnimatorState(name: string): AnimatorState | null {\r\n        var state: AnimatorState;;\r\n        for (let i = 0; i < this._states.length; i++) {\r\n            if (this._states[i].name == name) {\r\n                state = this._states[i];\r\n                break;\r\n            }\r\n        }\r\n        return state ? state : null;\r\n    }\r\n\r\n    /**\r\n     * @en Adds an animation state to the layer.\r\n     * @param state The AnimatorState to add.\r\n     * @zh 向层中添加动画状态。\r\n     * @param state 要添加的AnimatorState。\r\n     */\r\n    addState(state: AnimatorState): void {\r\n        var stateName: string = state.name;\r\n        if (this.getAnimatorState(stateName)) {\r\n            throw \"AnimatorControllerLayer:this stat's name has exist.\";\r\n        } else {\r\n            this._states.push(state);\r\n            if (stateName == this._defaultStateNameCatch) {\r\n                this._defaultState = state;\r\n                this._defaultStateNameCatch = null;\r\n            }\r\n\r\n            if (this._animator) {\r\n                (state._clip) && (state._clip!._addReference());\r\n                this._animator._getOwnersByClip(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes an animation state from the layer.\r\n     * @param state The AnimatorState to remove.\r\n     * @zh 从层中移除动画状态。\r\n     * @param state 要移除的动画状态。\r\n     */\r\n    removeState(state: AnimatorState): void {\r\n        var states: AnimatorState[] = this._states;\r\n        var index: number = -1;\r\n        for (var i: number = 0, n: number = states.length; i < n; i++) {\r\n            if (states[i] === state) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index !== -1)\r\n            this._removeClip(states, index, state);\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the AnimatorControllerLayer and clears all references.\r\n     * @zh 销毁AnimatorControllerLayer并清除所有引用。\r\n     */\r\n    destroy(): void {\r\n        this._clearReference();\r\n        this._states = [];\r\n        this._playStateInfo = null;\r\n        this._crossPlayStateInfo = null;\r\n        this._defaultState = null;\r\n    }\r\n\r\n    /**\r\n     * @en Clones the properties of this AnimatorControllerLayer to another object.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 将此AnimatorControllerLayer的属性克隆到另一个对象。\r\n     * @param destObject 要克隆到的目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AnimatorControllerLayer = (<AnimatorControllerLayer>destObject);\r\n        dest.name = this.name;\r\n        dest.blendingMode = this.blendingMode;\r\n        dest.defaultWeight = this.defaultWeight;\r\n        dest.playOnWake = this.playOnWake;\r\n        this.avatarMask && (dest.avatarMask = this._avatarMask.clone());\r\n    }\r\n\r\n    /**\r\n     * @en Creates and returns a clone of this AnimatorControllerLayer.\r\n     * @returns A new AnimatorControllerLayer instance with properties copied from this one.\r\n     * @zh 创建并返回此AnimatorControllerLayer的克隆副本。\r\n     * @returns 一个新的AnimatorControllerLayer实例，其属性从当前实例复制。\r\n     */\r\n    clone(): any {\r\n        var dest: AnimatorControllerLayer = new AnimatorControllerLayer(this.name);\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\r\nimport { SimpleSkinnedMeshRenderer } from \"../../core/SimpleSkinnedMeshRenderer\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\n/**\r\n * @en Animator resource class for handling animation-related resources.\r\n * @zh 动画资源类，用于处理与动画相关的资源。\r\n */\r\nexport class AnimatorResource {\r\n    /**\r\n     * @en Get the animator resource component from a Sprite3D object.\r\n     * @param sprite The Sprite3D object to get the component from.\r\n     * @param propertyKey The key of the property to get the component for.\r\n     * @zh 从Sprite3D对象获取动画资源组件。\r\n     * @param sprite 要获取组件的Sprite3D对象。\r\n     * @param propertyKey 要获取组件的属性键。\r\n     */\r\n    static getAnimatorResource(sprite: Sprite3D, propertyKey: string): Component {\r\n        switch (propertyKey) {\r\n            case \"simpleSkinnedMeshRenderer\":\r\n                return sprite.getComponent(SimpleSkinnedMeshRenderer);\r\n            default:\r\n                return sprite.getComponent(ClassUtils.getClass(propertyKey));\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { IClone } from \"../../../utils/IClone\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\r\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\r\nimport { Animator, AnimatorParams } from \"./Animator\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\r\n\r\n/**\r\n * @en The AnimatorState class is used to create animation states.\r\n * @zh AnimatorState 类用于创建动画状态。\r\n */\r\nexport class AnimatorState extends EventDispatcher implements IClone {\r\n    /**\r\n     * @en Animation event called when the state is entered.\r\n     * @zh 动画事件，在进入状态时调用。\r\n     */\r\n    static EVENT_OnStateEnter = \"OnStartEnter\";\r\n    /**\r\n     * @en Animation event called when the state is updated.\r\n     * @zh 动画事件，在更新状态时调用。\r\n     */\r\n    static EVENT_OnStateUpdate = \"OnStateUpdate\";\r\n\r\n    /**\r\n     * @en Animation event called when a loop is completed.\r\n     * @zh 动画事件，在循环完成时调用。\r\n     */\r\n    static EVENT_OnStateLoop = 'OnStateLoop';\r\n    /**\r\n     * @en Animation event called when the state is exited.\r\n     * @zh 动画事件，在离开状态时调用。\r\n     */\r\n    static EVENT_OnStateExit = \"OnStateExit\";\r\n\r\n    /** @internal */\r\n    private _referenceCount: number = 0;\r\n\r\n    /** @internal */\r\n    _clip: AnimationClip | null = null;\r\n\r\n    /** @internal */\r\n    _nodeOwners: KeyframeNodeOwner[] = [];//TODO:提出去\r\n\r\n    /** @internal */\r\n    _currentFrameIndices: Int16Array | null = null;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Whether to loop playback. 0 uses _clip.islooping, 1 for loop, 2 for no loop.\r\n     * @zh 是否循环播放。0表示使用_clip.islooping，1表示循环，2表示不循环。\r\n     */\r\n    _isLooping: 0 | 1 | 2 = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * @en Realtime data array to avoid data confusion. Must store realtime data in animatorState, not in animationClip.\r\n     * This is necessary for operations like crossFade() with different animatorStates but the same clip source.\r\n     * @zh 实时数据数组，用于避免数据混淆。必须将实时数据存储在animatorState中，而不是animationClip中。\r\n     * 这对于像crossFade()这样的操作是必要的，因为可能使用不同的animatorState但相同的片段源。\r\n     */\r\n    _realtimeDatas: Array<number | Vector3 | Quaternion> = [];\r\n\r\n    /** @internal */\r\n    _scripts: AnimatorStateScript[] | null = null;\r\n\r\n    /**\r\n     * @internal\r\n     * @en List of transitions.\r\n     * @zh 过渡列表。\r\n     */\r\n    _transitions: AnimatorTransition[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     * @en List of solo transitions that only play this transition.\r\n     * @zh 优先过渡列表，只播放此过渡。\r\n     */\r\n    _soloTransitions: AnimatorTransition[] = [];\r\n\r\n    /**\r\n     * @en Current transition content.\r\n     * @zh 当前过渡内容。\r\n     */\r\n    curTransition: AnimatorTransition;\r\n\r\n    /**\r\n     * @en Name of the animator state.\r\n     * @zh 动画状态的名称。\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * @en Animation playback speed. 1.0 is normal playback speed.\r\n     * @zh 动画播放速度。1.0为正常播放速度。\r\n     */\r\n    speed: number = 1.0;\r\n\r\n    /**\r\n     * @en Start time of animation playback.\r\n     * @zh 动画播放的起始时间。\r\n     */\r\n    clipStart: number = 0.0;\r\n\r\n    /**\r\n     * @en End time of animation playback.\r\n     * @zh 动画播放的结束时间。\r\n     */\r\n    clipEnd: number = 1.0;\r\n    /**\r\n     * @en Play on awake start offset.\r\n     * @zh 唤醒时播放的起始偏移量。\r\n     */\r\n    cycleOffset: number = 0;\r\n\r\n    /**\r\n     * @en The animation clip.\r\n     * @zh 动画片段。\r\n     */\r\n    get clip(): AnimationClip | null {\r\n        return this._clip;\r\n    }\r\n\r\n    set clip(value: AnimationClip | null) {\r\n        if (this._clip !== value) {\r\n            if (this._clip)\r\n                (this._referenceCount > 0) && (this._clip._removeReference(this._referenceCount));\r\n            if (value) {\r\n                var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4> = this._realtimeDatas;\r\n                var clipNodes: KeyframeNodeList = value._nodes!;\r\n                var count: number = clipNodes.count;\r\n                this._currentFrameIndices = new Int16Array(count);\r\n                this._resetFrameIndices();\r\n                (this._referenceCount > 0) && (value._addReference(this._referenceCount));\r\n                this._realtimeDatas.length = count;\r\n                for (var i: number = 0; i < count; i++) {\r\n                    switch (clipNodes.getNodeByIndex(i).type) {\r\n                        case KeyFrameValueType.Float:\r\n                            break;\r\n                        case KeyFrameValueType.Position:\r\n                        case KeyFrameValueType.Scale:\r\n                        case KeyFrameValueType.RotationEuler:\r\n                        case KeyFrameValueType.Vector3:\r\n                            realtimeDatas[i] = new Vector3();\r\n                            break;\r\n                        case KeyFrameValueType.Rotation:\r\n                            realtimeDatas[i] = new Quaternion();\r\n                            break;\r\n                        case KeyFrameValueType.Vector2:\r\n                            realtimeDatas[i] = new Vector2();\r\n                            break;\r\n                        case KeyFrameValueType.Vector4:\r\n                        case KeyFrameValueType.Color:\r\n                            realtimeDatas[i] = new Vector4();\r\n                            break;\r\n                        default:\r\n                            throw \"AnimationClipParser04:unknown type.\";\r\n                    }\r\n                }\r\n            }\r\n            this._clip = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether the animation is looping.\r\n     * @zh 动画是否循环播放。\r\n     */\r\n    get islooping() {\r\n        if (0 != this._isLooping) {\r\n            return 1 == this._isLooping;\r\n        }\r\n        return this._clip.islooping;\r\n    }\r\n\r\n    /**\r\n     * @en The animation transition content (used by IDE).\r\n     * @zh 动画过渡内容（IDE使用）。\r\n     */\r\n    get transitions() {\r\n        return this._transitions;\r\n    }\r\n\r\n    set transitions(value: AnimatorTransition[]) {\r\n        this._transitions = value;\r\n    }\r\n\r\n    /**\r\n     * @en The priority animation transition content (used by IDE).\r\n     * @zh 优先动画过渡内容（IDE使用）。\r\n     */\r\n    get soloTransitions() {\r\n        return this._soloTransitions;\r\n    }\r\n\r\n    set soloTransitions(value: AnimatorTransition[]) {\r\n        this._soloTransitions = value\r\n    }\r\n\r\n    /**\r\n     * @en consrtuctor of AnimatorState\r\n     * @zh 动画状态的构造方法\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventStart(animator: Animator, layerIndex: number) {\r\n        this.event(AnimatorState.EVENT_OnStateEnter);\r\n\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                this._scripts[i].setPlayScriptInfo(animator, layerIndex, this);\r\n                this._scripts[i].onStateEnter();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventExit() {\r\n        this.event(AnimatorState.EVENT_OnStateExit);\r\n        this.curTransition = null;\r\n        if (this._scripts) {\r\n            for (let i = 0, n = this._scripts.length; i < n; i++) {\r\n                this._scripts[i].onStateExit();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventStateUpdate(value: number) {\r\n        this.event(AnimatorState.EVENT_OnStateUpdate, value);\r\n        if (this._scripts) {\r\n            for (var i = 0, n = this._scripts.length; i < n; i++)\r\n                this._scripts[i].onStateUpdate(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _eventLoop() {\r\n        this.event(AnimatorState.EVENT_OnStateLoop);\r\n        if (this._scripts) {\r\n            for (let i = 0, n = this._scripts.length; i < n; i++) {\r\n                if (this._scripts[i].onStateLoop)\r\n                    this._scripts[i].onStateLoop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Dispatch transition events.\r\n     * @param normalizeTime Normalized time of the animation.\r\n     * @param paramsMap Map of animator parameters.\r\n     * @returns The triggered transition, or null if no transition is triggered.\r\n     * @zh 派发过渡事件。\r\n     * @param normalizeTime 动画的归一化时间。\r\n     * @param paramsMap 动画参数映射。\r\n     * @returns 触发的过渡，如果没有触发过渡则返回null。\r\n     */\r\n    _eventtransition(normalizeTime: number, paramsMap: AnimatorParams): AnimatorTransition {\r\n        let soloNums = this._soloTransitions.length;\r\n        if (soloNums > 0) {\r\n            for (var i = 0; i < soloNums; i++) {\r\n                if (this._soloTransitions[i].check(normalizeTime, paramsMap))\r\n                    return this._soloTransitions[i];\r\n            }\r\n            return null;\r\n        }\r\n        let transNums = this._transitions.length;\r\n        for (var i = 0; i < transNums; i++) {\r\n            if (this._transitions[i].check(normalizeTime, paramsMap))\r\n                return this._transitions[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getReferenceCount(): number {\r\n        return this._referenceCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param count \r\n     */\r\n    _addReference(count: number = 1): void {\r\n        (this._clip) && (this._clip._addReference(count));\r\n        this._referenceCount += count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param count \r\n     */\r\n    _removeReference(count: number = 1): void {\r\n        (this._clip) && (this._clip._removeReference(count));\r\n        this._referenceCount -= count;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clearReference(): void {\r\n        this._removeReference(-this._referenceCount);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _resetFrameIndices(): void {\r\n        for (var i: number = 0, n: number = this._currentFrameIndices!.length; i < n; i++)\r\n            this._currentFrameIndices![i] = -1;//-1表示没到第0帧,首帧时间可能大于\r\n    }\r\n\r\n    /**\r\n     * @en Add a script to the animator state.\r\n     * @param type The type of the script to add.\r\n     * @returns The added script instance.\r\n     * @zh 向动画状态添加脚本。\r\n     * @param type 要添加的脚本类型。\r\n     * @returns 添加的脚本实例。\r\n     */\r\n    addScript(type: typeof AnimatorStateScript): AnimatorStateScript {\r\n        var script: AnimatorStateScript = new type();\r\n        this._scripts = this._scripts || [];\r\n        this._scripts.push(script);\r\n        return script;\r\n    }\r\n\r\n    /**\r\n     * @en Get a script of the specified type from the animator state.\r\n     * @param type The type of the script to get.\r\n     * @returns The script of the specified type, or null if not found.\r\n     * @zh 从动画状态获取指定类型的脚本。\r\n     * @param type 要获取的脚本类型。\r\n     * @returns 指定类型的脚本，如果未找到则返回null。\r\n     */\r\n    getScript(type: typeof AnimatorStateScript): AnimatorStateScript | null {\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                var script: AnimatorStateScript = this._scripts[i];\r\n                if (script instanceof type)\r\n                    return script;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Get all scripts of the specified type from the animator state.\r\n     * @param type The type of the scripts to get.\r\n     * @returns An array of scripts of the specified type, or null if none found.\r\n     * @zh 从动画状态获取所有指定类型的脚本。\r\n     * @param type 要获取的脚本类型。\r\n     * @returns 指定类型的脚本数组，如果未找到则返回null。\r\n     */\r\n    getScripts(type: typeof AnimatorStateScript): AnimatorStateScript[] | null {\r\n        var coms: AnimatorStateScript[] | null = null;\r\n        if (this._scripts) {\r\n            for (var i: number = 0, n: number = this._scripts.length; i < n; i++) {\r\n                var script: AnimatorStateScript = this._scripts[i];\r\n                if (script instanceof type) {\r\n                    coms = coms || [];\r\n                    coms.push(script);\r\n                }\r\n            }\r\n        }\r\n        return coms;\r\n    }\r\n\r\n    /**\r\n     * @en Clone the current AnimatorState to another object.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 将当前AnimatorState克隆到另一个对象。\r\n     * @param destObject 克隆的目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AnimatorState = <AnimatorState>destObject;\r\n        dest.name = this.name;\r\n        dest.speed = this.speed;\r\n        dest.clipStart = this.clipStart;\r\n        dest.clipEnd = this.clipEnd;\r\n        dest.clip = this._clip;\r\n    }\r\n\r\n    /**\r\n     * @en Create a clone of the current AnimatorState.\r\n     * @returns A new AnimatorState object with the same properties as the current one.\r\n     * @zh 创建当前AnimatorState的克隆。\r\n     * @returns 一个新的AnimatorState对象，具有与当前对象相同的属性。\r\n     */\r\n    clone(): any {\r\n        var dest: AnimatorState = new AnimatorState();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n\r\n}","/**\r\n * @en Describes the animation layer mask.\r\n * @zh 用来描述动画层遮罩。\r\n */\r\nexport class AvatarMask {\r\n    /**@internal */\r\n    private _avatarPathMap: Record<string, boolean>;\r\n\r\n    /**\r\n     * @en Constructor, initialize mask information.\r\n     * @param data Mask information.\r\n     * @zh 构造函数,初使化遮罩信息。\r\n     * @param data 遮罩信息\r\n     */\r\n    constructor(data?: any) {\r\n        this._avatarPathMap = data?._avatarPathMap || {};\r\n    }\r\n\r\n    /**\r\n     * @en Checks if the transform at the given path is active in the mask.\r\n     * @param path The node path.\r\n     * @returns Whether the transform is active.\r\n     * @zh 查找节点路径遮罩。\r\n     * @param path 节点路径\r\n     * @returns 节点路径是否启用\r\n     */\r\n    getTransformActive(path: string): boolean {\r\n        return this._avatarPathMap[path];\r\n    }\r\n\r\n    /**\r\n     * @en Sets the mask for a specific transform path.\r\n     * @param path The node path.\r\n     * @param value Whether to enable the mask.\r\n     * @zh 设置遮罩。\r\n     * @param path 节点路径 \r\n     * @param value 是否启用遮罩\r\n     */\r\n    setTransformActive(path: string, value: boolean): void {\r\n        this._avatarPathMap[path] = value;\r\n    }\r\n\r\n    /**\r\n     * @en Gets all mask information.\r\n     * @returns The mask information.\r\n     * @zh 获得遮罩信息。\r\n     * @returns 遮罩信息\r\n     */\r\n    getAllTranfromPath() {\r\n        return this._avatarPathMap;\r\n    }\r\n\r\n    /**\r\n     * @en Clones the AvatarMask.\r\n     * @returns A clone of the AvatarMask.\r\n     * @zh 克隆。\r\n     * @returns 克隆的AvatarMask。\r\n     */\r\n    clone(): any {\r\n        var dest: AvatarMask = new AvatarMask();\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n    /**\r\n     * @en Clones the AvatarMask to another object.\r\n     * @param destObject The target object to clone to.\r\n     * @zh 克隆到目标对象。\r\n     * @param destObject 目标对象\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var dest: AvatarMask = (<AvatarMask>destObject);\r\n        for (var key in this._avatarPathMap) {\r\n            dest.setTransformActive(key, this._avatarPathMap[key]);\r\n        }\r\n\r\n    }\r\n\r\n}","\r\nimport { Component } from \"../../../components/Component\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { Loader } from \"../../../net/Loader\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { AnimationClip } from \"../../animation/AnimationClip\";\r\nimport { AnimatorStateScript } from \"../../animation/AnimatorStateScript\";\r\nimport { KeyframeNode } from \"../../animation/KeyframeNode\";\r\nimport { KeyframeNodeList } from \"../../animation/KeyframeNodeList\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { RenderableSprite3D } from \"../../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\r\nimport { AnimatorPlayState } from \"./AnimatorPlayState\";\r\nimport { AnimatorResource } from \"./AnimatorResource\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\nimport { KeyframeNodeOwner, KeyFrameValueType } from \"./KeyframeNodeOwner\";\r\nimport { AnimationEvent } from \"../../animation/AnimationEvent\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { AnimatorController } from \"./AnimatorController\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { AnimatorUpdateMode } from \"../../../components/AnimatorUpdateMode\";\r\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\r\n\r\nexport type AnimatorParams = { [key: number]: number | boolean };\r\n\r\n\r\n/**\r\n * @en The `Animator` class is used to create 3D animation components.\r\n * @zh `Animator` 类用于创建3D动画组件。\r\n */\r\nexport class Animator extends Component {\r\n    /**@internal */\r\n    private static _tempVector31: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private static _tempColor: Color = new Color();\r\n    /**@internal */\r\n    private static _tempQuaternion1: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * @en Culling mode: Always animate.\r\n     * @zh 裁剪模式：始终播放动画。\r\n     */\r\n    static CULLINGMODE_ALWAYSANIMATE: number = 0;\r\n    /**\r\n     * @en Culling mode: Don't animate when not visible.\r\n     * @zh 裁剪模式：不可见时完全不播放动画。\r\n     */\r\n    static CULLINGMODE_CULLCOMPLETELY: number = 2;\r\n\r\n    /**@internal */\r\n    private _speed: number;\r\n    /**@internal */\r\n    private _keyframeNodeOwnerMap: any;\r\n    /**@internal */\r\n    private _keyframeNodeOwners: KeyframeNodeOwner[] = [];\r\n    /**@internal */\r\n    private _updateMark: number;\r\n    /**@internal */\r\n    private _controllerLayers: AnimatorControllerLayer[];\r\n    /**@internal 更新模式*/\r\n    private _updateMode: AnimatorUpdateMode = AnimatorUpdateMode.Normal;\r\n    /**@internal 降低更新频率调整值*/\r\n    private _lowUpdateDelty: number = 20;\r\n    /**@internal */\r\n    private _animatorParams: AnimatorParams = {};\r\n    // /**@internal */\r\n    // _linkSprites: any;\r\n    /**@internal\t*/\r\n    _avatarNodeMap: any;\r\n    /**@internal */\r\n    _linkAvatarSpritesData: any = {};\r\n    /**@internal */\r\n    _linkAvatarSprites: Sprite3D[] = [];\r\n    /**@internal */\r\n    _renderableSprites: RenderableSprite3D[] = [];\r\n\r\n    /**\t\r\n     * @en Culling mode，By default, when set to invisible, the animation will not play at all.\r\n     * @zh 裁剪模式,默认为不可见时完全不播放动画。\r\n     */\r\n    cullingMode: number = Animator.CULLINGMODE_CULLCOMPLETELY;\r\n\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalPositions: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalRotations: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeLocalScales: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeWorldMatrixs: Float32Array;\r\n    /**@internal\t[NATIVE]*/\r\n    _animationNodeParentIndices: Int16Array;\r\n    /**@internal */\r\n    private _finishSleep: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _controller: AnimatorController;\r\n\r\n    /**\r\n     * @en The animation controller.\r\n     * @zh 动画控制器。\r\n     */\r\n    get controller() {\r\n        return this._controller;\r\n    }\r\n    set controller(val: AnimatorController) {\r\n\r\n        this._controller = val;\r\n        if (this._controller) {\r\n            this._controller.updateTo(this);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The playback speed of the animation. 1.0 is the normal playback speed.\r\n     * @zh 动画的播放速度。1.0 为正常播放速度。\r\n     */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n\r\n    set speed(value: number) {\r\n        this._speed = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The update mode for the animator.\r\n     * @zh 动画更新模式。\r\n     */\r\n    set updateMode(value: AnimatorUpdateMode) {\r\n        this._updateMode = value;\r\n    }\r\n\r\n    /**\r\n     * @en Low update mode\r\n     * @zh 低更新模式\r\n     */\r\n    set lowUpdateDelty(value: number) {\r\n        this._lowUpdateDelty = value;\r\n    }\r\n\r\n    /**\r\n     * @en The number of layers in the state machine animation.\r\n     * @zh 状态机动画层的数量。\r\n     */\r\n    get controllerLayerCount(): number {\r\n        return this._controllerLayers.length;\r\n    }\r\n\r\n    /**\r\n     * @en The map of animator parameters.\r\n     * @zh 状态机参数map。\r\n     */\r\n    get animatorParams() {\r\n        return this._animatorParams;\r\n    }\r\n\r\n    set animatorParams(values: AnimatorParams) {\r\n        this._animatorParams = values;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Whether to stop updating after the animation is completed.\r\n     * @zh 动画完成后是否停止更新。\r\n     */\r\n    get sleep() {\r\n        return this._finishSleep;\r\n    }\r\n\r\n    set sleep(value: boolean) {\r\n        this._finishSleep = value;\r\n    }\r\n\r\n    /**\r\n     * @en The constructor of Animator.\r\n     * @zh 构造方法，创建动画组件。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._controllerLayers = [];\r\n        //this._linkSprites = {};\r\n        this._speed = 1.0;\r\n        this._keyframeNodeOwnerMap = {};\r\n        this._updateMark = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addKeyframeNodeOwner(clipOwners: KeyframeNodeOwner[], node: KeyframeNode, propertyOwner: any): void {\r\n        var nodeIndex = node._indexInList;\r\n        var fullPath = node.fullPath;\r\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n        let mat = false;\r\n        if (keyframeNodeOwner) {\r\n            keyframeNodeOwner.referenceCount++;\r\n            clipOwners[nodeIndex] = keyframeNodeOwner;\r\n        } else {\r\n            var property = propertyOwner;\r\n            for (var i = 0, n = node.propertyCount; i < n; i++) {\r\n                property = property[node.getPropertyByIndex(i)];\r\n                if (property instanceof Material) {\r\n                    mat = true\r\n                }\r\n                if (!property)\r\n                    break;\r\n            }\r\n\r\n            keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath] = new KeyframeNodeOwner();\r\n            keyframeNodeOwner.isMaterial = mat;\r\n            keyframeNodeOwner.fullPath = fullPath;\r\n            keyframeNodeOwner.indexInList = this._keyframeNodeOwners.length;\r\n            keyframeNodeOwner.referenceCount = 1;\r\n            keyframeNodeOwner.propertyOwner = propertyOwner;\r\n            keyframeNodeOwner.nodePath = node.nodePath;\r\n            keyframeNodeOwner.callbackFunData = node.callbackFunData;\r\n            keyframeNodeOwner.callParams = node.callParams;\r\n            keyframeNodeOwner.getCallbackNode();\r\n            var propertyCount = node.propertyCount;\r\n            var propertys: string[] = [];\r\n            for (i = 0; i < propertyCount; i++)\r\n                propertys[i] = node.getPropertyByIndex(i);\r\n            keyframeNodeOwner.property = propertys;\r\n            keyframeNodeOwner.type = node.type;\r\n\r\n            if (property) {//查询成功后赋默认值\r\n                if (node.type === 0) {\r\n                    keyframeNodeOwner.defaultValue = property;\r\n                } else {\r\n                    var defaultValue = new property.constructor();\r\n                    property.cloneTo(defaultValue);\r\n                    keyframeNodeOwner.defaultValue = defaultValue;\r\n                    keyframeNodeOwner.value = new property.constructor();\r\n                    keyframeNodeOwner.crossFixedValue = new property.constructor();\r\n                }\r\n            }\r\n\r\n            this._keyframeNodeOwners.push(keyframeNodeOwner);\r\n            clipOwners[nodeIndex] = keyframeNodeOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _removeKeyframeNodeOwner(nodeOwners: (KeyframeNodeOwner | null)[], node: KeyframeNode): void {\r\n        var fullPath = node.fullPath;\r\n        var keyframeNodeOwner = this._keyframeNodeOwnerMap[fullPath];\r\n        if (keyframeNodeOwner) {//TODO:Avatar中没该节点,但动画文件有,不会保存_keyframeNodeOwnerMap在中,移除会出BUG,例如动画节点下的SkinnedMeshRender有动画帧，但Avatar中忽略了\r\n            keyframeNodeOwner.referenceCount--;\r\n            if (keyframeNodeOwner.referenceCount === 0) {\r\n                delete this._keyframeNodeOwnerMap[fullPath];\r\n                this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(keyframeNodeOwner), 1);\r\n            }\r\n            nodeOwners[node._indexInList] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getOwnersByClip(clipStateInfo: AnimatorState): void {\r\n        if (!clipStateInfo._clip)\r\n            return;\r\n\r\n        var frameNodes = clipStateInfo._clip!._nodes;\r\n        var frameNodesCount = frameNodes!.count;\r\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n        nodeOwners.length = frameNodesCount;\r\n        for (var i: number = 0; i < frameNodesCount; i++) {\r\n            var node: KeyframeNode = frameNodes!.getNodeByIndex(i);\r\n            //var property: any = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name!] : this.owner;//如果有avatar需使用克隆节点\r\n            var property: any = this.owner;\r\n            for (var j: number = 0, m: number = node.ownerPathCount; j < m; j++) {\r\n                var ownPat: string = node.getOwnerPathByIndex(j);\r\n                if (ownPat === \"\") {//TODO:直接不存\r\n                    break;\r\n                } else {\r\n                    property = property.getChildByName(ownPat);\r\n                    if (!property)\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (property) {\r\n                var propertyOwner: string = node.propertyOwner;\r\n                const oriProperty = property;\r\n                (propertyOwner) && (property = property[propertyOwner]);\r\n                if (!property) {\r\n                    property = AnimatorResource.getAnimatorResource(oriProperty, propertyOwner);\r\n                }\r\n                property && this._addKeyframeNodeOwner(nodeOwners, node, property);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updatePlayer(animatorState: AnimatorState, playState: AnimatorPlayState, elapsedTime: number, islooping: boolean, layerIndex: number): void {\r\n        var clipDuration: number = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\r\n        var lastElapsedTime: number = playState._elapsedTime;\r\n        var elapsedPlaybackTime: number = lastElapsedTime + elapsedTime;\r\n        playState._lastElapsedTime = lastElapsedTime;\r\n        playState._elapsedTime = elapsedPlaybackTime;\r\n        var normalizedTime: number = elapsedPlaybackTime / clipDuration;//TODO:时候可以都统一为归一化时间\r\n        playState._normalizedTime = normalizedTime;\r\n        var playTime: number = normalizedTime % 1.0;\r\n        playState._normalizedPlayTime = playTime < 0 ? playTime + 1.0 : playTime;\r\n        playState._duration = clipDuration;\r\n        if (elapsedPlaybackTime >= clipDuration) {\r\n            if (!islooping) {\r\n                playState._finish = true;\r\n                playState._elapsedTime = clipDuration;\r\n                playState._normalizedPlayTime = 1.0;\r\n            } else {\r\n                let loopNum = Math.floor(elapsedPlaybackTime / clipDuration);\r\n                let pLoopNum = Math.floor(lastElapsedTime / clipDuration);\r\n                if (pLoopNum != loopNum) {\r\n                    animatorState._eventLoop();\r\n                }\r\n            }\r\n        }\r\n\r\n        (!playState._finish) && animatorState._eventStateUpdate(playState._normalizedPlayTime);\r\n        this._applyTransition(animatorState, layerIndex, animatorState._eventtransition(playState._normalizedPlayTime, this.animatorParams));\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 启用过渡\r\n     * @param layerindex \r\n     * @param transition \r\n     * @returns \r\n     */\r\n    private _applyTransition(state: AnimatorState, layerindex: number, transition: AnimatorTransition) {\r\n        if (!transition || transition == state.curTransition)\r\n            return;\r\n        state.curTransition = transition;\r\n        this.crossFade(transition.destState.name, transition.transduration, layerindex, transition.transstartoffset);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param animatorState \r\n     * @param playState \r\n     */\r\n    private _updateStateFinish(animatorState: AnimatorState, playState: AnimatorPlayState): void {\r\n        if (playState._finish) {\r\n            animatorState._eventExit();//派发播放完成的事件\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updateEventScript(stateInfo: AnimatorState, playStateInfo: AnimatorPlayState): void {\r\n        if (!this.owner._getBit(NodeFlags.HAS_SCRIPT))\r\n            return;\r\n\r\n        let clip = stateInfo._clip;\r\n        let events = clip!._animationEvents;\r\n        if (!events || 0 == events.length || null == playStateInfo.animatorState) return;\r\n        let clipDuration = clip!._duration;\r\n        let time = playStateInfo._normalizedPlayTime * clipDuration;\r\n        let parentPlayTime = playStateInfo._parentPlayTime;\r\n        if (null == parentPlayTime) {\r\n            parentPlayTime = clipDuration * playStateInfo.animatorState.clipStart;\r\n        }\r\n        if (time < parentPlayTime) {\r\n            this._eventScript(events, parentPlayTime, clipDuration * playStateInfo.animatorState.clipEnd);\r\n        }\r\n        this._eventScript(events, parentPlayTime, time);\r\n        playStateInfo._parentPlayTime = time;\r\n    }\r\n    /**\r\n    * @internal\r\n    */\r\n    private _eventScript(events: AnimationEvent[], parentPlayTime: number, currPlayTime: number) {\r\n        let scripts = this.owner.components;\r\n        for (let i = 0, len = events.length; i < len; i++) {\r\n            let e = events[i];\r\n            if (e.time > parentPlayTime && e.time <= currPlayTime) {\r\n                for (let j = 0, m = scripts.length; j < m; j++) {\r\n                    let script = scripts[j];\r\n                    if (script._isScript()) {\r\n                        let fun: Function = (script as any)[e.eventName];\r\n                        (fun) && (fun.apply(script, e.params));\r\n                    }\r\n                }\r\n            } else if (e.time > currPlayTime) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新clip数据\r\n     * @internal\r\n     */\r\n    private _updateClipDatas(animatorState: AnimatorState, addtive: boolean, playStateInfo: AnimatorPlayState, animatorMask: AvatarMask = null): void {\r\n        var clip = animatorState._clip;\r\n        var clipDuration = clip!._duration;\r\n\r\n        var curPlayTime = animatorState.clipStart * clipDuration + playStateInfo._normalizedPlayTime * playStateInfo._duration;\r\n        var currentFrameIndices = animatorState._currentFrameIndices;\r\n        var frontPlay = playStateInfo._elapsedTime > playStateInfo._lastElapsedTime;\r\n        clip!._evaluateClipDatasRealTime(clip!._nodes!, curPlayTime, currentFrameIndices!, addtive, frontPlay, animatorState._realtimeDatas, animatorMask);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyFloat(defaultValue: number, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: number): number {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue += weight * data;\r\n            } else {\r\n                var oriValue: number = defaultValue;\r\n                defaultValue = oriValue + weight * (data - oriValue);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive)\r\n                    defaultValue = nodeOwner.defaultValue + data;\r\n                else\r\n                    defaultValue = data;\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue = nodeOwner.defaultValue + weight * (data);\r\n                } else {\r\n                    var defValue: number = nodeOwner.defaultValue;\r\n                    defaultValue = defValue + weight * (data - defValue);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec2(defaultValue: Vector2, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector2): Vector2 {\r\n        if (!defaultValue) return null;\r\n\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                } else {\r\n                    var defValue: Vector2 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec3(defaultValue: Vector3, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n                defaultValue.z += weight * data.z;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\r\n                } else {\r\n                    var defValue: Vector3 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyVec4(defaultValue: Vector4, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.x += weight * data.x;\r\n                defaultValue.y += weight * data.y;\r\n                defaultValue.z += weight * data.z;\r\n                defaultValue.w += weight * data.w;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.x = oriValue.x + weight * (data.x - oriValue.x);\r\n                defaultValue.y = oriValue.y + weight * (data.y - oriValue.y);\r\n                defaultValue.z = oriValue.z + weight * (data.z - oriValue.z);\r\n                defaultValue.w = oriValue.w + weight * (data.w - oriValue.w);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + data.x;\r\n                    defaultValue.y = nodeOwner.defaultValue.y + data.y;\r\n                    defaultValue.z = nodeOwner.defaultValue.z + data.z;\r\n                    defaultValue.w = nodeOwner.defaultValue.w + data.w;\r\n                }\r\n                else\r\n                    data.cloneTo(defaultValue);\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.x = nodeOwner.defaultValue.x + weight * (data.x);\r\n                    defaultValue.y = nodeOwner.defaultValue.y + weight * (data.y);\r\n                    defaultValue.z = nodeOwner.defaultValue.z + weight * (data.z);\r\n                    defaultValue.w = nodeOwner.defaultValue.w + weight * (data.w);\r\n                } else {\r\n                    var defValue: Vector4 = nodeOwner.defaultValue;\r\n                    defaultValue.x = defValue.x + weight * (data.x - defValue.x);\r\n                    defaultValue.y = defValue.y + weight * (data.y - defValue.y);\r\n                    defaultValue.z = defValue.z + weight * (data.z - defValue.z);\r\n                    defaultValue.w = defValue.w + weight * (data.w - defValue.w);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    private _applyColor(defaultValue: Color, nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector4) {\r\n        if (!defaultValue) return null;\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                defaultValue.r += weight * data.x;\r\n                defaultValue.g += weight * data.y;\r\n                defaultValue.b += weight * data.z;\r\n                defaultValue.a += weight * data.w;\r\n            } else {\r\n                var oriValue = defaultValue;\r\n                defaultValue.r = oriValue.r + weight * (data.x - oriValue.r);\r\n                defaultValue.g = oriValue.g + weight * (data.y - oriValue.g);\r\n                defaultValue.b = oriValue.b + weight * (data.z - oriValue.b);\r\n                defaultValue.a = oriValue.a + weight * (data.w - oriValue.a);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    defaultValue.r = nodeOwner.defaultValue.r + data.x;\r\n                    defaultValue.g = nodeOwner.defaultValue.g + data.y;\r\n                    defaultValue.b = nodeOwner.defaultValue.b + data.z;\r\n                    defaultValue.a = nodeOwner.defaultValue.a + data.w;\r\n                }\r\n                else {\r\n                    //data.cloneTo(defaultValue);\r\n                    defaultValue.setValue(data.x, data.y, data.z, data.w);\r\n                }\r\n\r\n            } else {\r\n                if (additive) {\r\n                    defaultValue.r = nodeOwner.defaultValue.r + weight * (data.x);\r\n                    defaultValue.g = nodeOwner.defaultValue.g + weight * (data.y);\r\n                    defaultValue.b = nodeOwner.defaultValue.b + weight * (data.z);\r\n                    defaultValue.a = nodeOwner.defaultValue.a + weight * (data.w);\r\n                } else {\r\n                    var defValue: Color = nodeOwner.defaultValue;\r\n                    defaultValue.r = defValue.r + weight * (data.x - defValue.r);\r\n                    defaultValue.g = defValue.g + weight * (data.y - defValue.g);\r\n                    defaultValue.b = defValue.b + weight * (data.z - defValue.b);\r\n                    defaultValue.a = defValue.a + weight * (data.w - defValue.a);\r\n                }\r\n            }\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyPositionAndRotationEuler(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, data: Vector3, out: Vector3): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                out.x += weight * data.x;\r\n                out.y += weight * data.y;\r\n                out.z += weight * data.z;\r\n            } else {\r\n                var oriX: number = out.x;\r\n                var oriY: number = out.y;\r\n                var oriZ: number = out.z;\r\n                out.x = oriX + weight * (data.x - oriX);\r\n                out.y = oriY + weight * (data.y - oriY);\r\n                out.z = oriZ + weight * (data.z - oriZ);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defValue: Vector3 = nodeOwner.defaultValue;\r\n                    out.x = defValue.x + data.x;\r\n                    out.y = defValue.y + data.y;\r\n                    out.z = defValue.z + data.z;\r\n                } else {\r\n                    out.x = data.x;\r\n                    out.y = data.y;\r\n                    out.z = data.z;\r\n                }\r\n            } else {\r\n                defValue = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    out.x = defValue.x + weight * data.x;\r\n                    out.y = defValue.y + weight * data.y;\r\n                    out.z = defValue.z + weight * data.z;\r\n                } else {\r\n                    var defX: number = defValue.x;\r\n                    var defY: number = defValue.y;\r\n                    var defZ: number = defValue.z;\r\n                    out.x = defX + weight * (data.x - defX);\r\n                    out.y = defY + weight * (data.y - defY);\r\n                    out.z = defZ + weight * (data.z - defZ);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyRotation(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipRot: Quaternion, localRotation: Quaternion): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                var tempQuat: Quaternion = Animator._tempQuaternion1;//使用临时四元数_tempQuaternion1，避免引用错乱\r\n                Utils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n                tempQuat.normalize(tempQuat);\r\n                Quaternion.multiply(localRotation, tempQuat, localRotation);\r\n            } else {\r\n                Quaternion.lerp(localRotation, clipRot, weight, localRotation);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defaultRot: Quaternion = nodeOwner.defaultValue;\r\n                    Quaternion.multiply(defaultRot, clipRot, localRotation);\r\n                } else {\r\n                    localRotation.x = clipRot.x;\r\n                    localRotation.y = clipRot.y;\r\n                    localRotation.z = clipRot.z;\r\n                    localRotation.w = clipRot.w;\r\n                }\r\n            } else {\r\n                defaultRot = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    tempQuat = Animator._tempQuaternion1;\r\n                    Utils3D.quaternionWeight(clipRot, weight, tempQuat);\r\n                    tempQuat.normalize(tempQuat);\r\n                    Quaternion.multiply(defaultRot, tempQuat, localRotation);\r\n                } else {\r\n                    Quaternion.lerp(defaultRot, clipRot, weight, localRotation);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyScale(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, clipSca: Vector3, localScale: Vector3): void {\r\n        if (nodeOwner.updateMark === this._updateMark) {//一定非第一层\r\n            if (additive) {\r\n                var scale: Vector3 = Animator._tempVector31;\r\n                Utils3D.scaleWeight(clipSca, weight, scale);\r\n                localScale.x = localScale.x * scale.x;\r\n                localScale.y = localScale.y * scale.y;\r\n                localScale.z = localScale.z * scale.z;\r\n            } else {\r\n                Utils3D.scaleBlend(localScale, clipSca, weight, localScale);\r\n            }\r\n        } else {\r\n            if (isFirstLayer) {\r\n                if (additive) {\r\n                    var defaultSca: Vector3 = nodeOwner.defaultValue;\r\n                    localScale.x = defaultSca.x * clipSca.x;\r\n                    localScale.y = defaultSca.y * clipSca.y;\r\n                    localScale.z = defaultSca.z * clipSca.z;\r\n                } else {\r\n                    localScale.x = clipSca.x;\r\n                    localScale.y = clipSca.y;\r\n                    localScale.z = clipSca.z;\r\n                }\r\n            } else {\r\n                defaultSca = nodeOwner.defaultValue;\r\n                if (additive) {\r\n                    scale = Animator._tempVector31;\r\n                    Utils3D.scaleWeight(clipSca, weight, scale);\r\n                    localScale.x = defaultSca.x * scale.x;\r\n                    localScale.y = defaultSca.y * scale.y;\r\n                    localScale.z = defaultSca.z * scale.z;\r\n                } else {\r\n                    Utils3D.scaleBlend(defaultSca, clipSca, weight, localScale);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _applyCrossData(nodeOwner: KeyframeNodeOwner, additive: boolean, weight: number, isFirstLayer: boolean, srcValue: any, desValue: any, crossWeight: number): void {\r\n        var pro: any = nodeOwner.propertyOwner;\r\n        let lastpro;\r\n        if (pro) {\r\n            switch (nodeOwner.type) {\r\n                case KeyFrameValueType.Float: //Float\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n\r\n                    var crossValue: number = srcValue + crossWeight * (desValue - srcValue);\r\n                    nodeOwner.value = crossValue;\r\n                    lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, crossValue));\r\n                    } else {\r\n                        pro && (pro as Material).setFloat(lastpro, this._applyFloat((pro as Material).getFloat(lastpro), nodeOwner, additive, weight, isFirstLayer, crossValue));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n                case KeyFrameValueType.Position: //Position\r\n                    var localPos: Vector3 = pro.localPosition;\r\n                    var position: Vector3 = nodeOwner.value;\r\n                    var srcX: number = srcValue.x, srcY: number = srcValue.y, srcZ: number = srcValue.z;\r\n                    position.x = srcX + crossWeight * (desValue.x - srcX);\r\n                    position.y = srcY + crossWeight * (desValue.y - srcY);\r\n                    position.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, position, localPos);\r\n                    pro.localPosition = localPos;\r\n                    break;\r\n                case KeyFrameValueType.Rotation: //Rotation\r\n                    var localRot: Quaternion = pro.localRotation;\r\n                    var rotation: Quaternion = nodeOwner.value;\r\n                    Quaternion.lerp(srcValue, desValue, crossWeight, rotation);\r\n                    this._applyRotation(nodeOwner, additive, weight, isFirstLayer, rotation, localRot);\r\n                    pro.localRotation = localRot;\r\n                    break;\r\n                case KeyFrameValueType.Scale: //Scale\r\n                    var localSca: Vector3 = pro.localScale;\r\n                    var scale: Vector3 = nodeOwner.value;\r\n                    Utils3D.scaleBlend(srcValue, desValue, crossWeight, scale);\r\n                    this._applyScale(nodeOwner, additive, weight, isFirstLayer, scale, localSca);\r\n                    pro.localScale = localSca;\r\n                    break;\r\n                case KeyFrameValueType.RotationEuler: //RotationEuler\r\n                    var localEuler: Vector3 = pro.localRotationEuler;\r\n                    var rotationEuler: Vector3 = nodeOwner.value;\r\n                    srcX = srcValue.x, srcY = srcValue.y, srcZ = srcValue.z;\r\n                    rotationEuler.x = srcX + crossWeight * (desValue.x - srcX);\r\n                    rotationEuler.y = srcY + crossWeight * (desValue.y - srcY);\r\n                    rotationEuler.z = srcZ + crossWeight * (desValue.z - srcZ);\r\n                    this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, rotationEuler, localEuler);\r\n                    pro.localRotationEuler = localEuler;\r\n                    break;\r\n                case KeyFrameValueType.Color:\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n                    let v44 = nodeOwner.value as Vector4;\r\n                    v44.x = srcValue.r + crossWeight * (desValue.r - srcValue.r);\r\n                    v44.y = srcValue.g + crossWeight * (desValue.g - srcValue.g);\r\n                    v44.z = srcValue.b + crossWeight * (desValue.b - srcValue.b);\r\n                    v44.w = srcValue.a + crossWeight * (desValue.a - srcValue.a);\r\n\r\n                    nodeOwner.value = v44;\r\n                    lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyColor(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, v44));\r\n                    } else {\r\n                        pro && (pro as Material).setColor(lastpro, this._applyColor((pro as Material).getColor(lastpro), nodeOwner, additive, weight, isFirstLayer, v44));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n                case KeyFrameValueType.Vector2:\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n                    let v2 = nodeOwner.value as Vector2;\r\n                    v2.x = srcValue.r + crossWeight * (desValue.r - srcValue.r);\r\n                    v2.y = srcValue.g + crossWeight * (desValue.g - srcValue.g);\r\n                    nodeOwner.value = v2;\r\n                    lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyVec2(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, v2));\r\n                    } else {\r\n                        pro && (pro as Material).setVector2(lastpro, this._applyVec2((pro as Material).getVector2(lastpro), nodeOwner, additive, weight, isFirstLayer, v2));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n                case KeyFrameValueType.Vector4:\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n                    let v4 = nodeOwner.value as Vector4;\r\n                    v4.x = srcValue.x + crossWeight * (desValue.x - srcValue.x);\r\n                    v4.y = srcValue.y + crossWeight * (desValue.y - srcValue.y);\r\n                    v4.z = srcValue.z + crossWeight * (desValue.z - srcValue.z);\r\n                    nodeOwner.value = v4;\r\n                    lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyVec4(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, v4));\r\n                    } else {\r\n                        pro && (pro as Material).setVector4(lastpro, this._applyVec4((pro as Material).getVector4(lastpro), nodeOwner, additive, weight, isFirstLayer, v4));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n                case KeyFrameValueType.Vector3:\r\n                    var proPat: string[] = nodeOwner.property!;\r\n                    var m: number = proPat.length - 1;\r\n                    for (var j: number = 0; j < m; j++) {\r\n                        pro = pro[proPat[j]];\r\n                        if (!pro)//属性可能或被置空\r\n                            break;\r\n                    }\r\n                    let v3 = nodeOwner.value as Vector3;\r\n                    v3.x = srcValue.x + crossWeight * (desValue.x - srcValue.x);\r\n                    v3.y = srcValue.y + crossWeight * (desValue.y - srcValue.y);\r\n                    v3.z = srcValue.z + crossWeight * (desValue.z - srcValue.z);\r\n                    nodeOwner.value = v3;\r\n                    lastpro = proPat[m];\r\n                    if (!nodeOwner.isMaterial) {\r\n                        pro && (pro[lastpro] = this._applyVec3(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, v3));\r\n                    } else {\r\n                        pro && (pro as Material).setVector3(lastpro, this._applyVec3((pro as Material).getVector3(lastpro), nodeOwner, additive, weight, isFirstLayer, v3));\r\n                    }\r\n                    if (nodeOwner.callbackFun) {\r\n                        nodeOwner.animatorDataSetCallBack();\r\n                    }\r\n                    break;\r\n            }\r\n            nodeOwner.updateMark = this._updateMark;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 赋值Node数据\r\n     * @param stateInfo 动画状态\r\n     * @param additive 是否为addtive\r\n     * @param weight state权重\r\n     * @param isFirstLayer 是否是第一层\r\n     */\r\n    private _setClipDatasToNode(stateInfo: AnimatorState, additive: boolean, weight: number, isFirstLayer: boolean, controllerLayer: AnimatorControllerLayer = null): void {\r\n        var realtimeDatas: Array<number | Vector3 | Quaternion | Vector2 | Vector4 | Color> = stateInfo._realtimeDatas;\r\n        var nodes: KeyframeNodeList = stateInfo._clip!._nodes!;\r\n        var nodeOwners: KeyframeNodeOwner[] = stateInfo._nodeOwners;\r\n        for (var i: number = 0, n: number = nodes.count; i < n; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {//骨骼中没有该节点\r\n                var node = nodes.getNodeByIndex(i);\r\n                if (controllerLayer.avatarMask && (!controllerLayer.avatarMask.getTransformActive(node.nodePath))) {\r\n                    continue;\r\n                }\r\n                var pro: any = nodeOwner.propertyOwner;\r\n                let value: string;\r\n                if (pro) {\r\n                    switch (nodeOwner.type) {\r\n                        case KeyFrameValueType.Float: //Float\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\r\n                            let lastpro = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[lastpro] = this._applyFloat(pro[lastpro], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && (pro as Material).setFloat(lastpro, this._applyFloat(0, nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Position: //Position\r\n                            var localPos: Vector3 = pro.localPosition;\r\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localPos);\r\n                            pro.localPosition = localPos;\r\n                            break;\r\n                        case KeyFrameValueType.Rotation: //Rotation\r\n                            var localRot: Quaternion = pro.localRotation;\r\n                            this._applyRotation(nodeOwner, additive, weight, isFirstLayer, <Quaternion>realtimeDatas[i], localRot);\r\n                            pro.localRotation = localRot;\r\n                            break;\r\n                        case KeyFrameValueType.Scale: //Scale\r\n                            var localSca: Vector3 = pro.localScale;\r\n                            this._applyScale(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localSca);\r\n                            pro.localScale = localSca;\r\n                            break;\r\n                        case KeyFrameValueType.RotationEuler: //RotationEuler\r\n                            var localEuler: Vector3 = pro.localRotationEuler;\r\n                            this._applyPositionAndRotationEuler(nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i], localEuler);\r\n                            pro.localRotationEuler = localEuler;\r\n                            break;\r\n                        case KeyFrameValueType.Vector2://vec2\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec2(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, this._applyVec2(pro.getVector2(value), nodeOwner, additive, weight, isFirstLayer, <Vector2>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector3://vec3\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec3(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, this._applyVec3(pro.getVector3(value), nodeOwner, additive, weight, isFirstLayer, <Vector3>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector4://vec4\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyVec4(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector4(value) && (pro as Material).setVector4(value, this._applyVec4(pro.getVector4(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Color://Color\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = this._applyColor(pro[value], nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, this._applyColor(pro.getColor(value), nodeOwner, additive, weight, isFirstLayer, <Vector4>realtimeDatas[i]));\r\n                            }\r\n                            break;\r\n                    }\r\n                    nodeOwner.updateMark = this._updateMark;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, srcState: AnimatorState, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n        var weight: number = controllerLayer.defaultWeight;\r\n\r\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\r\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n        var destNodeOwners: KeyframeNodeOwner[] = destState._nodeOwners;\r\n        var srcRealtimeDatas: Array<number | Vector3 | Quaternion> = srcState._realtimeDatas;\r\n        var srcDataIndices: number[] = controllerLayer._srcCrossClipNodeIndices;\r\n        var srcNodeOwners: KeyframeNodeOwner[] = srcState._nodeOwners;\r\n\r\n        for (var i: number = 0; i < ownerCount; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var srcIndex: number = srcDataIndices[i];\r\n                var destIndex: number = destDataIndices[i];\r\n                if (-1 == srcIndex && -1 == destIndex) continue;\r\n                var srcValue: any = srcIndex !== -1 ? srcRealtimeDatas[srcIndex] : destNodeOwners[destIndex].defaultValue;\r\n                if (null == srcValue) continue;\r\n                var desValue: any = destIndex !== -1 ? destRealtimeDatas[destIndex] : srcNodeOwners[srcIndex].defaultValue;\r\n                if (!desValue) {\r\n                    desValue = srcNodeOwners[srcIndex].defaultValue;\r\n                }\r\n                if (null == desValue) continue;\r\n                if (!controllerLayer.avatarMask || controllerLayer.avatarMask.getTransformActive(nodeOwner.nodePath)) {\r\n                    this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _setFixedCrossClipDatasToNode(controllerLayer: AnimatorControllerLayer, destState: AnimatorState, crossWeight: number, isFirstLayer: boolean): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = controllerLayer._crossNodesOwners;\r\n        var ownerCount: number = controllerLayer._crossNodesOwnersCount;\r\n        var additive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n        var weight: number = controllerLayer.defaultWeight;\r\n        var destRealtimeDatas: Array<number | Vector3 | Quaternion> = destState._realtimeDatas;\r\n        var destDataIndices: number[] = controllerLayer._destCrossClipNodeIndices;\r\n\r\n        for (var i: number = 0; i < ownerCount; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var destIndex: number = destDataIndices[i];\r\n                var srcValue: any = nodeOwner.crossFixedValue;\r\n                var desValue;\r\n                if (destIndex == -1 || !destRealtimeDatas[destIndex]) {\r\n                    desValue = nodeOwner.defaultValue;\r\n                } else {\r\n                    desValue = destRealtimeDatas[destIndex];\r\n                }\r\n                this._applyCrossData(nodeOwner, additive, weight, isFirstLayer, srcValue, desValue, crossWeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _revertDefaultKeyframeNodes(clipStateInfo: AnimatorState): void {\r\n        var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n        for (var i: number = 0, n: number = nodeOwners.length; i < n; i++) {\r\n            var nodeOwner: KeyframeNodeOwner = nodeOwners[i];\r\n            if (nodeOwner) {\r\n                var pro: any = nodeOwner.propertyOwner;\r\n                let value: string;\r\n                if (pro) {\r\n                    switch (nodeOwner.type) {\r\n                        case KeyFrameValueType.Float:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            //pro && this._applyFloat(pro, proPat[m], nodeOwner, additive, weight, isFirstLayer, <number>realtimeDatas[i]);\r\n                            let lastpro = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[lastpro] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && (pro as Material).setFloat(lastpro, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Position:\r\n                            var locPos: Vector3 = pro.localPosition;\r\n                            var def: Vector3 = nodeOwner.defaultValue;\r\n                            locPos.x = def.x;\r\n                            locPos.y = def.y;\r\n                            locPos.z = def.z;\r\n                            pro.localPosition = locPos;\r\n                            break;\r\n                        case KeyFrameValueType.Rotation:\r\n                            var locRot: Quaternion = pro.localRotation;\r\n                            var defQua: Quaternion = nodeOwner.defaultValue;\r\n                            locRot.x = defQua.x;\r\n                            locRot.y = defQua.y;\r\n                            locRot.z = defQua.z;\r\n                            locRot.w = defQua.w;\r\n                            pro.localRotation = locRot;\r\n                            break;\r\n                        case KeyFrameValueType.Scale:\r\n                            var locSca: Vector3 = pro.localScale;\r\n                            def = nodeOwner.defaultValue;\r\n                            locSca.x = def.x;\r\n                            locSca.y = def.y;\r\n                            locSca.z = def.z;\r\n                            pro.localScale = locSca;\r\n                            break;\r\n                        case KeyFrameValueType.RotationEuler:\r\n                            var locEul: Vector3 = pro.localRotationEuler;\r\n                            def = nodeOwner.defaultValue;\r\n                            locEul.x = def.x;\r\n                            locEul.y = def.y;\r\n                            locEul.z = def.z;\r\n                            pro.localRotationEuler = locEul;\r\n                            break;\r\n                        case KeyFrameValueType.Vector2:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector2(value) && (pro as Material).setVector2(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector3:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Vector4:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = nodeOwner.defaultValue);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getVector3(value) && (pro as Material).setVector3(value, nodeOwner.defaultValue);\r\n                            }\r\n                            break;\r\n                        case KeyFrameValueType.Color:\r\n                            var proPat: string[] = nodeOwner.property!;\r\n                            var m: number = proPat.length - 1;\r\n                            for (var j: number = 0; j < m; j++) {\r\n                                pro = pro[proPat[j]];\r\n                                if (!pro)//属性可能或被置空\r\n                                    break;\r\n                            }\r\n                            value = proPat[m];\r\n                            let tempColor = Animator._tempColor;\r\n                            tempColor.r = nodeOwner.defaultValue.x;\r\n                            tempColor.g = nodeOwner.defaultValue.y;\r\n                            tempColor.b = nodeOwner.defaultValue.z;\r\n                            tempColor.a = nodeOwner.defaultValue.w;\r\n                            if (!nodeOwner.isMaterial) {\r\n                                pro && (pro[value] = tempColor);\r\n                                if (nodeOwner.callbackFun) {\r\n                                    nodeOwner.animatorDataSetCallBack();\r\n                                }\r\n                            } else {\r\n                                pro && pro.getColor(value) && (pro as Material).setColor(value, tempColor);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            throw \"Animator:unknown type.\";\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    onAfterDeserialize(): void {\r\n        let arr = (<any>this).controllerLayers;\r\n        if (!arr || null != this.controller)\r\n            return;\r\n        delete (<any>this).controllerLayers;\r\n        this._controllerLayers.length = 0;\r\n        for (let layer of arr) {\r\n            this.addControllerLayer(layer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++) {\r\n            if (this._controllerLayers[i].playOnWake) {\r\n                let defaultClip: AnimatorState = this.getDefaultState(i);\r\n                (defaultClip) && (this.play(null, i, defaultClip.cycleOffset));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDestroy() {\r\n        for (let i = 0, n = this._controllerLayers.length; i < n; i++)\r\n            this._controllerLayers[i]._removeReference();\r\n    }\r\n\r\n    private _applyUpdateMode(delta: number): number {\r\n        let ret;\r\n        switch (this._updateMode) {\r\n            case AnimatorUpdateMode.Normal:\r\n                ret = delta;\r\n                break;\r\n            case AnimatorUpdateMode.LowFrame:\r\n                ret = (Stat.loopCount % this._lowUpdateDelty == 0) ? delta * this._lowUpdateDelty : 0;\r\n                break;\r\n            case AnimatorUpdateMode.UnScaleTime:\r\n                ret = 0;\r\n                break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _handleSpriteOwnersBySprite(isLink: boolean, path: string[], sprite: Sprite3D): void {\r\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n            if (!this._controllerLayers[i].enable)\r\n                continue;\r\n            var clipStateInfos: AnimatorState[] = this._controllerLayers[i]._states;\r\n            for (var j: number = 0, m: number = clipStateInfos.length; j < m; j++) {\r\n                var clipStateInfo: AnimatorState = clipStateInfos[j];\r\n                var clip: AnimationClip = clipStateInfo._clip!;\r\n                var nodePath: string = path.join(\"/\");\r\n                var ownersNodes: KeyframeNode[] = clip._nodesMap[nodePath];\r\n                if (ownersNodes) {\r\n                    var nodeOwners: KeyframeNodeOwner[] = clipStateInfo._nodeOwners;\r\n                    for (var k: number = 0, p: number = ownersNodes.length; k < p; k++) {\r\n                        if (isLink)\r\n                            this._addKeyframeNodeOwner(nodeOwners, ownersNodes[k], sprite);\r\n                        else\r\n                            this._removeKeyframeNodeOwner(nodeOwners, ownersNodes[k]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _parse(data: any): void {\r\n        var play: any = data.playOnWake;\r\n        var layersData: any[] = data.layers;\r\n        for (var i: number = 0; i < layersData.length; i++) {\r\n            var layerData: any = layersData[i];\r\n            var animatorLayer: AnimatorControllerLayer = new AnimatorControllerLayer(layerData.name);\r\n            if (i === 0)\r\n                animatorLayer.defaultWeight = 1.0;//TODO:\r\n            else\r\n                animatorLayer.defaultWeight = layerData.weight;\r\n\r\n            var blendingModeData: any = layerData.blendingMode;\r\n            (blendingModeData) && (animatorLayer.blendingMode = blendingModeData);\r\n            this.addControllerLayer(animatorLayer);\r\n            var states: any[] = layerData.states;\r\n            for (var j: number = 0, m: number = states.length; j < m; j++) {\r\n                var state: any = states[j];\r\n                var clipPath: string = state.clipPath;\r\n                if (clipPath) {\r\n                    var name: string = state.name;\r\n                    var motion: AnimationClip;\r\n                    motion = Loader.getRes(clipPath);\r\n                    if (motion) {//加载失败motion为空\r\n                        var animatorState: AnimatorState = new AnimatorState();\r\n                        animatorState.name = name;\r\n                        animatorState.clip = motion;\r\n                        state.speed && (animatorState.speed = state.speed);\r\n                        animatorLayer.addState(animatorState);\r\n                        (j === 0) && (this.getControllerLayer(i).defaultState = animatorState);\r\n                    }\r\n                }\r\n            }\r\n            (play !== undefined) && (animatorLayer.playOnWake = play);\r\n            //avatarMask\r\n            let layerMaskData = layerData.avatarMask;\r\n            if (layerMaskData) {\r\n                let avaMask = new AvatarMask();\r\n                animatorLayer.avatarMask = avaMask;\r\n                for (var bips in layerMaskData) {\r\n                    avaMask.setTransformActive(bips, layerMaskData[bips]);\r\n                }\r\n            }\r\n        }\r\n        var cullingModeData: any = data.cullingMode;\r\n        (cullingModeData !== undefined) && (this.cullingMode = cullingModeData);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @perfTag PerformanceDefine.T_AnimatorUpdate\r\n     */\r\n    onUpdate(): void {\r\n        let timer = this.owner._scene.timer;\r\n        let delta = timer._delta / 1000.0;//Laya.timer.delta已结包含Laya.timer.scale\r\n        delta = this._applyUpdateMode(delta);\r\n        if (this._speed === 0 || delta === 0)//delta为0无需更新,可能造成crossWeight计算值为NaN\r\n            return;\r\n        if (!Stat.enableAnimatorUpdate)\r\n            return;\r\n        var needRender = true;//TODO:有渲染节点才可将needRender变为true\r\n        var i, n;\r\n        this._updateMark++;\r\n        for (i = 0, n = this._controllerLayers.length; i < n; i++) {\r\n            var controllerLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n            if (!controllerLayer.enable)\r\n                continue;\r\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\r\n            if (this.sleep && playStateInfo._finish && controllerLayer._playType == 0) {\r\n                continue;\r\n            }\r\n            var crossPlayStateInfo: AnimatorPlayState = controllerLayer._crossPlayStateInfo!;\r\n            addtive = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n            switch (controllerLayer._playType) {\r\n                case 0:\r\n                    var animatorState: AnimatorState = playStateInfo.currentState!;\r\n                    var clip: AnimationClip = animatorState._clip!;\r\n                    var speed: number = this._speed * animatorState.speed;\r\n                    var finish: boolean = playStateInfo._finish;//提前取出finish,防止最后一帧跳过\r\n                    finish || this._updatePlayer(animatorState, playStateInfo, delta * speed, animatorState.islooping, i);\r\n                    if (needRender) {\r\n                        var addtive: boolean = controllerLayer.blendingMode !== AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;\r\n                        this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);//clipDatas为逐动画文件,防止两个使用同一动画文件的Animator数据错乱,即使动画停止也要updateClipDatas\r\n                        this._setClipDatasToNode(animatorState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);//多层动画混合时即使动画停止也要设置数据\r\n                        finish || this._updateEventScript(animatorState, playStateInfo);\r\n                    }\r\n                    finish || this._updateStateFinish(animatorState, playStateInfo);\r\n                    break;\r\n                case 1:\r\n                    animatorState = playStateInfo.currentState!;\r\n                    clip = animatorState._clip!;\r\n                    var crossState: AnimatorState = controllerLayer._crossPlayState;\r\n                    var crossClip: AnimationClip = crossState._clip!;\r\n                    var crossDuratuion: number = controllerLayer._crossDuration;\r\n                    var startPlayTime: number = crossPlayStateInfo._startPlayTime;\r\n                    var crossClipDuration: number = crossClip._duration - startPlayTime;\r\n                    var crossScale: number = (crossDuratuion > crossClipDuration && 0 != crossClipDuration) ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n                    var crossSpeed: number = this._speed * crossState.speed;\r\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossClip.islooping, i);\r\n                    var crossWeight: number = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n                    var needUpdateFinishcurrentState = false;\r\n                    if (crossWeight >= 1.0) {\r\n                        if (needRender) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setClipDatasToNode(crossState, addtive, controllerLayer.defaultWeight, i === 0, controllerLayer);\r\n\r\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n                            playStateInfo.currentState = crossState;\r\n                            crossPlayStateInfo._cloneTo(playStateInfo);\r\n                        }\r\n                    } else {\r\n                        if (!playStateInfo._finish) {\r\n                            speed = this._speed * animatorState.speed;\r\n                            needUpdateFinishcurrentState = true;\r\n                            this._updatePlayer(animatorState, playStateInfo, delta * speed, animatorState.islooping, i);\r\n                            if (needRender)\r\n                                this._updateClipDatas(animatorState, addtive, playStateInfo, controllerLayer.avatarMask);\r\n                        }\r\n                        if (needRender) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setCrossClipDatasToNode(controllerLayer, animatorState, crossState, crossWeight, i === 0);\r\n                        }\r\n                    }\r\n                    if (needRender) {\r\n                        this._updateEventScript(animatorState, playStateInfo);\r\n                        this._updateEventScript(crossState, crossPlayStateInfo);\r\n                    }\r\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\r\n                    needUpdateFinishcurrentState && this._updateStateFinish(playStateInfo.currentState, playStateInfo);\r\n                    break;\r\n                case 2:\r\n                    crossState = controllerLayer._crossPlayState;\r\n                    crossClip = crossState._clip!;\r\n                    crossDuratuion = controllerLayer._crossDuration;\r\n                    startPlayTime = crossPlayStateInfo._startPlayTime;\r\n                    crossClipDuration = crossClip._duration - startPlayTime;\r\n                    crossScale = crossDuratuion > crossClipDuration ? crossClipDuration / crossDuratuion : 1.0;//如果过度时间大于过度动作时间,则减慢速度\r\n                    crossSpeed = this._speed * crossState.speed;\r\n                    this._updatePlayer(crossState, crossPlayStateInfo, delta * crossScale * crossSpeed, crossState.islooping, i);\r\n                    if (needRender) {\r\n                        crossWeight = ((crossPlayStateInfo._elapsedTime - startPlayTime) / crossScale) / crossDuratuion;\r\n                        if (crossWeight >= 1.0) {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setClipDatasToNode(crossState, addtive, 1.0, i === 0, controllerLayer);\r\n                            controllerLayer._playType = 0;//完成融合,切换到正常播放状态\r\n                            playStateInfo.currentState = crossState;\r\n                            crossPlayStateInfo._cloneTo(playStateInfo);\r\n                        } else {\r\n                            this._updateClipDatas(crossState, addtive, crossPlayStateInfo, controllerLayer.avatarMask);\r\n                            this._setFixedCrossClipDatasToNode(controllerLayer, crossState, crossWeight, i === 0);\r\n                        }\r\n                        this._updateEventScript(crossState, crossPlayStateInfo);\r\n                    }\r\n                    this._updateStateFinish(crossState, crossPlayStateInfo);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        var animator: Animator = (<Animator>dest);\r\n        animator.cullingMode = this.cullingMode;\r\n\r\n        for (var i: number = 0, n: number = this._controllerLayers.length; i < n; i++) {\r\n            var controllLayer: AnimatorControllerLayer = this._controllerLayers[i];\r\n            animator.addControllerLayer(controllLayer.clone());\r\n            var animatorStates: AnimatorState[] = controllLayer._states;\r\n            for (var j: number = 0, m: number = animatorStates.length; j < m; j++) {\r\n                var state: AnimatorState = animatorStates[j].clone();\r\n                var cloneLayer: AnimatorControllerLayer = animator.getControllerLayer(i);\r\n                cloneLayer.addState(state);\r\n                (j == 0) && (cloneLayer.defaultState = state);\r\n            }\r\n        }\r\n        animator.controller = this._controller\r\n    }\r\n\r\n    /**\r\n     * @en Gets the default animation state.\r\n     * @param layerIndex The layer index.\r\n     * @returns The default animation state.\r\n     * @zh 获取默认动画状态。\r\n     * @param\tlayerIndex 层索引。\r\n     * @return 默认动画状态。\r\n     */\r\n    getDefaultState(layerIndex: number = 0): AnimatorState {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        return controllerLayer.defaultState;\r\n    }\r\n\r\n    /**\r\n     * @en Adds an animation state.\r\n     * @param state The animation state to add.\r\n     * @param layerIndex The layer index. \r\n     * @zh 添加动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    addState(state: AnimatorState, layerIndex: number = 0): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        controllerLayer.addState(state);\r\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.addState() instead.\");\r\n    }\r\n\r\n    /**\r\n     * @en Removes an animation state.\r\n     * @param state The animation state to remove.\r\n     * @param layerIndex The layer index.\r\n     * @zh 移除动画状态。\r\n     * @param\tstate 动画状态。\r\n     * @param   layerIndex 层索引。\r\n     */\r\n    removeState(state: AnimatorState, layerIndex: number = 0): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        controllerLayer.removeState(state);\r\n        console.warn(\"Animator:this function is discard,please use animatorControllerLayer.removeState() instead.\");\r\n    }\r\n\r\n    /**\r\n     * @en Adds a controller layer.\r\n     * @param controllderLayer The animation controller layer to add.\r\n     * @zh 添加控制器层。\r\n     * @param controllderLayer 动画控制层。\r\n     */\r\n    addControllerLayer(controllderLayer: AnimatorControllerLayer): void {\r\n        this._controllerLayers.push(controllderLayer);\r\n        controllderLayer._animator = this;//TODO:可以复用,不应该这么设计\r\n        controllderLayer._addReference();\r\n        var states: AnimatorState[] = controllderLayer._states;\r\n        for (var i: number = 0, n: number = states.length; i < n; i++)\r\n            this._getOwnersByClip(states[i]);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the controller layer.\r\n     * @param layerIndex The layer index. Defaults to 0.\r\n     * @returns The AnimatorControllerLayer at the specified index.\r\n     * @zh 获取控制器层。\r\n     * @param\tlayerIndex 层索引。\r\n     * @return 指定索引处的AnimatorControllerLayer。\r\n     */\r\n    getControllerLayer(layerInex: number = 0): AnimatorControllerLayer {\r\n        return this._controllerLayers[layerInex];\r\n    }\r\n\r\n    /**\r\n     * @en Plays an animation.\r\n     * @param name If null, plays the default animation; otherwise, plays the animation clip with the specified name.\r\n     * @param layerIndex The layer index. Defaults to 0.\r\n     * @param normalizedTime The normalized start time of the animation. Defaults to Number.NEGATIVE_INFINITY.\r\n     * @zh 播放动画。\r\n     * @param\tname 如果为null则播放默认动画，否则按名字播放动画片段。\r\n     * @param\tlayerIndex 层索引。\r\n     * @param\tnormalizedTime 归一化的播放起始时间。\r\n     */\r\n    play(name: string | null = null, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n        var controllerLayer: AnimatorControllerLayer = this._controllerLayers[layerIndex];\r\n        if (controllerLayer) {\r\n            var defaultState: AnimatorState = controllerLayer.defaultState;\r\n            if (!name && !defaultState)\r\n                throw new Error(\"Animator:must have default clip value,please set clip property.\");\r\n            var playStateInfo: AnimatorPlayState = controllerLayer._playStateInfo!;\r\n            var curPlayState: AnimatorState = playStateInfo.currentState!;\r\n\r\n\r\n            var animatorState: AnimatorState = name ? controllerLayer.getAnimatorState(name) : defaultState;\r\n            if (!animatorState._clip)\r\n                return;\r\n\r\n            var clipDuration: number = animatorState._clip!._duration;\r\n            var calclipduration = animatorState._clip!._duration * (animatorState.clipEnd - animatorState.clipStart);\r\n            if (curPlayState !== animatorState) {\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\r\n                else\r\n                    playStateInfo._resetPlayState(0.0, calclipduration);\r\n                (curPlayState !== null && curPlayState !== animatorState) && (this._revertDefaultKeyframeNodes(curPlayState));\r\n                controllerLayer._playType = 0;\r\n                playStateInfo.currentState = animatorState;\r\n            } else {\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY) {\r\n                    playStateInfo._resetPlayState(clipDuration * normalizedTime, calclipduration);\r\n                    controllerLayer._playType = 0;\r\n                }\r\n            }\r\n            var scripts: AnimatorStateScript[] = animatorState._scripts!;\r\n            animatorState._eventStart(this, layerIndex);\r\n\r\n        }\r\n        else {\r\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n        }\r\n        if (this.owner._scene) {\r\n            this.onUpdate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Performs a crossfade transition between the current animation state and the target animation state.\r\n     * @param name The name of the target animation state.\r\n     * @param transitionDuration The transition duration, normalized to the current animation state's duration. Value should be between 0.0 and 1.0.\r\n     * @param layerIndex The layer index. Defaults to 0.\r\n     * @param normalizedTime The normalized start time of the animation. Defaults to Number.NEGATIVE_INFINITY.\r\n     * @zh 在当前动画状态和目标动画状态之间进行融合过渡播放。\r\n     * @param\tname 目标动画状态。\r\n     * @param\ttransitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。\r\n     * @param\tlayerIndex 层索引。\r\n     * @param\tnormalizedTime 归一化的播放起始时间。\r\n     */\r\n    crossFade(name: string, transitionDuration: number, layerIndex: number = 0, normalizedTime: number = Number.NEGATIVE_INFINITY): void {\r\n        var controllerLayer = this._controllerLayers[layerIndex];\r\n        if (controllerLayer) {\r\n            var destAnimatorState = controllerLayer.getAnimatorState(name);\r\n            if (destAnimatorState) {\r\n                var playType = controllerLayer._playType;\r\n                if (playType === -1) {//如果未曾调用过play则回滚到play方法\r\n                    this.play(name, layerIndex, normalizedTime);\r\n                    return;\r\n                }\r\n\r\n                var crossPlayStateInfo = controllerLayer._crossPlayStateInfo;\r\n                var crossNodeOwners = controllerLayer._crossNodesOwners;\r\n                var crossNodeOwnerIndicesMap = controllerLayer._crossNodesOwnersIndicesMap;\r\n\r\n                var srcAnimatorState = controllerLayer._playStateInfo!.currentState;\r\n                var destNodeOwners = destAnimatorState._nodeOwners;\r\n                var destCrossClipNodeIndices = controllerLayer._destCrossClipNodeIndices;\r\n                var destClip = destAnimatorState._clip;\r\n                var destNodes = destClip._nodes!;\r\n                var destNodesMap = destClip._nodesDic;\r\n                var crossCount = 0;\r\n                switch (playType) {\r\n                    case 0:\r\n                        var srcNodeOwners = srcAnimatorState!._nodeOwners;\r\n                        var scrCrossClipNodeIndices = controllerLayer._srcCrossClipNodeIndices;\r\n                        var srcClip = srcAnimatorState!._clip;\r\n                        var srcNodes = srcClip!._nodes!;\r\n                        var srcNodesMap = srcClip!._nodesDic;\r\n                        controllerLayer._playType = 1;\r\n\r\n                        var crossMark = ++controllerLayer._crossMark;\r\n                        crossCount = controllerLayer._crossNodesOwnersCount = 0;\r\n\r\n                        for (var i = 0, n = srcNodes.count; i < n; i++) {\r\n                            var srcNode = srcNodes.getNodeByIndex(i);\r\n                            var srcIndex = srcNode._indexInList;\r\n                            var srcNodeOwner = srcNodeOwners[srcIndex];\r\n                            if (srcNodeOwner) {\r\n                                var srcFullPath = srcNode.fullPath;\r\n                                scrCrossClipNodeIndices[crossCount] = srcIndex;\r\n                                var destNode = destNodesMap[srcFullPath];\r\n                                if (destNode)\r\n                                    destCrossClipNodeIndices[crossCount] = destNode._indexInList;\r\n                                else\r\n                                    destCrossClipNodeIndices[crossCount] = -1;\r\n\r\n                                crossNodeOwnerIndicesMap[srcFullPath] = crossMark;\r\n                                crossNodeOwners[crossCount] = srcNodeOwner;\r\n                                crossCount++;\r\n                            }\r\n                        }\r\n\r\n                        for (i = 0, n = destNodes.count; i < n; i++) {\r\n                            destNode = destNodes.getNodeByIndex(i);\r\n                            var destIndex = destNode._indexInList;\r\n                            var destNodeOwner = destNodeOwners[destIndex];\r\n                            if (destNodeOwner) {\r\n                                var destFullPath = destNode.fullPath;\r\n                                if (!srcNodesMap[destFullPath]) {\r\n                                    scrCrossClipNodeIndices[crossCount] = -1;\r\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n                                    crossNodeOwners[crossCount] = destNodeOwner;\r\n                                    crossCount++;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                    case 2:\r\n                        controllerLayer._playType = 2;\r\n                        for (i = 0, n = crossNodeOwners.length; i < n; i++) {\r\n                            var nodeOwner = crossNodeOwners[i];\r\n                            nodeOwner.saveCrossFixedValue();\r\n                            destNode = destNodesMap[nodeOwner.fullPath!];\r\n                            if (destNode)\r\n                                destCrossClipNodeIndices[i] = destNode._indexInList;\r\n                            else\r\n                                destCrossClipNodeIndices[i] = -1;\r\n                        }\r\n\r\n                        crossCount = controllerLayer._crossNodesOwnersCount;\r\n                        crossMark = controllerLayer._crossMark;\r\n                        for (i = 0, n = destNodes.count; i < n; i++) {\r\n                            destNode = destNodes.getNodeByIndex(i);\r\n                            destIndex = destNode._indexInList;\r\n                            destNodeOwner = destNodeOwners[destIndex];\r\n                            if (destNodeOwner) {\r\n                                destFullPath = destNode.fullPath;\r\n                                if (crossNodeOwnerIndicesMap[destFullPath] !== crossMark) {\r\n                                    destCrossClipNodeIndices[crossCount] = destIndex;\r\n\r\n                                    crossNodeOwnerIndicesMap[destFullPath] = crossMark;\r\n                                    nodeOwner = destNodeOwners[destIndex];\r\n                                    crossNodeOwners[crossCount] = nodeOwner;\r\n                                    nodeOwner.saveCrossFixedValue();\r\n                                    crossCount++;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                }\r\n                controllerLayer._crossNodesOwnersCount = crossCount;\r\n                controllerLayer._crossPlayState = destAnimatorState;\r\n                controllerLayer._crossDuration = srcAnimatorState!._clip!._duration * transitionDuration;\r\n                if (normalizedTime !== Number.NEGATIVE_INFINITY)\r\n                    crossPlayStateInfo!._resetPlayState(destClip._duration * normalizedTime, controllerLayer._crossDuration);\r\n                else\r\n                    crossPlayStateInfo!._resetPlayState(0.0, controllerLayer._crossDuration);\r\n                destAnimatorState._eventStart(this, layerIndex);\r\n            }\r\n            else {\r\n                console.warn(\"Invalid name \" + layerIndex + \".\");\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"Invalid layerIndex \" + layerIndex + \".\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Enables a trigger parameter.\r\n     * @param name The name or index of the trigger parameter.\r\n     * @zh 启用触发条件参数。\r\n     * @param name 触发条件的名字或者索引\r\n     */\r\n    setParamsTrigger(name: number): void;\r\n    setParamsTrigger(name: string): void;\r\n    setParamsTrigger(name: string | number) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = true;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the value of a number parameter.\r\n     * @param name The name or index of the parameter.\r\n     * @param value The value to set.\r\n     * @zh 设置数值类型参数的值。\r\n     * @param name 属性的名字或者索引\r\n     * @param value 属性值\r\n     */\r\n    setParamsNumber(name: number, value: number): void;\r\n    setParamsNumber(name: string, value: number): void;\r\n    setParamsNumber(name: string | number, value: number) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = value;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the value of a boolean parameter.\r\n     * @param name The name or index of the parameter.\r\n     * @param value The value to set.\r\n     * @zh 设置布尔类型参数的值。\r\n     * @param name 属性的名字或者索引\r\n     * @param value 属性值\r\n     */\r\n    setParamsBool(name: number, value: boolean): void;\r\n    setParamsBool(name: string, value: boolean): void;\r\n    setParamsBool(name: string | number, value: boolean) {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        this._animatorParams[id] = value;\r\n    }\r\n\r\n    /**\r\n     * @en Gets the value of a parameter.\r\n     * @param name The name or index of the parameter.\r\n     * @returns The value of the parameter.\r\n     * @zh 获取参数的值。\r\n     * @param\tname 属性的名字或者索引\r\n     * @return 属性值\r\n     */\r\n    getParamsvalue(name: number): number | boolean;\r\n    getParamsvalue(name: string): number | boolean;\r\n    getParamsvalue(name: string | number): number | boolean {\r\n        let id;\r\n        if (typeof name == \"number\")\r\n            id = name;\r\n        else\r\n            id = AnimatorStateCondition.conditionNameToID(name);\r\n        return this._animatorParams[id];\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated 请使用animator.getControllerLayer(layerIndex).getCurrentPlayState()替换。use animator.getControllerLayer(layerIndex).getCurrentPlayState() instead\r\n     * 获取当前的播放状态。\r\n     * @param   layerIndex 层索引。\r\n     * @return  动画播放状态。\r\n     */\r\n    getCurrentAnimatorPlayState(layerInex: number = 0): AnimatorPlayState {\r\n        return this._controllerLayers[layerInex]._playStateInfo!;\r\n    }\r\n}\r\n\r\n\r\n","import { AniStateConditionType } from \"../../../components/AnimatorControllerParse\";\r\nimport { AnimatorStateCondition } from \"../../../components/AnimatorStateCondition\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\n\r\n/**\r\n * @en The AnimatorTransition class represents a transition between two AnimatorStates.\r\n * @zh AnimatorTransition 类表示两个 AnimatorState 之间的过渡。\r\n */\r\nexport class AnimatorTransition {\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _name: string;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _mute: boolean;//can,t play on this transition\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _exitTime: number;//退出时间\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _exitByTime: boolean;//是否设置生效时间\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _transstartoffset: number;//归一化的时间的下一个state播放位置\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _transduration: number;//归一化过度时间 0-1\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _conditions: AnimatorStateCondition[];//\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _destState: AnimatorState;\r\n\r\n    /**\r\n     *  @internal\r\n     */\r\n    private _isAndOperEnabled: boolean;\r\n\r\n    /**\r\n     * 创建一个新的Animatortransition\r\n     */\r\n    constructor() {\r\n        this._conditions = [];\r\n        this._exitByTime = true;\r\n        this._exitTime = 0.85;\r\n        this._transduration = 0.15;\r\n        this._transstartoffset = 0;\r\n        this._mute = false;\r\n    }\r\n\r\n    /**\r\n     * @en The name of the transition.\r\n     * @zh 过渡的名称。\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the transition is disabled.\r\n     * @zh 过渡是否被禁用。\r\n     */\r\n    get mute() {\r\n        return this._mute;\r\n    }\r\n\r\n    set mute(value: boolean) {\r\n        this._mute = value;\r\n    }\r\n\r\n    /**\r\n     * @en The destination state of the transition.\r\n     * @zh 过渡的目标状态。\r\n     */\r\n    get destState() {\r\n        return this._destState;\r\n    }\r\n\r\n    set destState(value: AnimatorState) {\r\n        this._destState = value;\r\n    }\r\n\r\n    /**\r\n     * @en The conditions array for the transition. Used by IDE.\r\n     * @zh 过渡的条件数组。由IDE使用。\r\n     */\r\n    get conditions() {\r\n        return this._conditions;\r\n    }\r\n\r\n    set conditions(value: AnimatorStateCondition[]) {\r\n        for (var i = this._conditions.length - 1; i >= 0; i--) {\r\n            this.removeCondition(this._conditions[i]);\r\n        }\r\n\r\n        for (var i = 0; i < value.length; i++) {\r\n            this.addCondition(value[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether the transition is triggered by time.\r\n     * @zh 过渡是否由时间触发。\r\n     */\r\n    get exitByTime() {\r\n        return this._exitByTime;\r\n    }\r\n\r\n    set exitByTime(value: boolean) {\r\n        this._exitByTime = value;\r\n    }\r\n\r\n    /**\r\n     * @en The normalized transition duration (relative to the target state).\r\n     * @zh 过渡的归一化持续时间（相对于目标状态）。\r\n     */\r\n    set transduration(value: number) {\r\n        this._transduration = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    get transduration() {\r\n        return this._transduration;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The playback time offset of the target state (normalized time).\r\n     * @zh 目标状态的播放时间偏移（归一化时间）。\r\n     */\r\n    set transstartoffset(value: number) {\r\n        this._transstartoffset = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    get transstartoffset() {\r\n        return this._transstartoffset;\r\n    }\r\n\r\n    /**\r\n     * @en The trigger time (normalized time).\r\n     * @zh 触发时间（归一化时间）。\r\n     */\r\n    get exitTime() {\r\n        return this._exitTime;\r\n    }\r\n\r\n    set exitTime(value: number) {\r\n        this._exitTime = Math.max(0, Math.min(value, 1.0));\r\n    }\r\n\r\n    /**\r\n     * @en Adds a condition to the transition.\r\n     * @zh 增加一个条件到过渡中。\r\n     */\r\n    addCondition(condition: AnimatorStateCondition): void {\r\n        if (this._conditions.indexOf(condition) == -1) {\r\n            this._conditions.push(condition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes a condition from the transition.\r\n     * @param condition The condition to remove.\r\n     * @zh 从过渡中删除一个条件。\r\n     * @param condition 要删除的条件。\r\n     */\r\n    removeCondition(condition: AnimatorStateCondition): void {\r\n        let index = this._conditions.indexOf(condition);\r\n        if (index != -1) {\r\n            this._conditions.splice(index, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use AND operation when there are multiple conditions.\r\n     * @zh 当有多个条件时是否使用与（AND）操作。\r\n     */\r\n    get isAndOperEnabled() {\r\n        return this._isAndOperEnabled;\r\n    }\r\n    set isAndOperEnabled(vlaue: boolean) {\r\n        this._isAndOperEnabled = vlaue;\r\n    }\r\n\r\n    /**\r\n     * @en Checks if the transition should be enabled based on the current conditions and time.\r\n     * @param normalizeTime The normalized time of the current animation state.\r\n     * @param paramsMap A map of condition parameters, where the key is the condition ID and the value is the condition state.\r\n     * @returns True if the transition should be enabled, false otherwise.\r\n     * @zh 检查是否应该根据当前条件和时间启用过渡。\r\n     * @param normalizeTime 当前动画状态的归一化时间。\r\n     * @param paramsMap 条件参数的映射，其中键是条件ID，值是条件状态。\r\n     * @returns 如果应该启用过渡则返回true，否则返回false。\r\n     */\r\n    check(normalizeTime: number, paramsMap: { [key: number]: number | boolean }): boolean {\r\n        if (this._mute) {\r\n            return false;\r\n        }\r\n        if (this._conditions.length == 0) {\r\n            if (normalizeTime >= this._exitTime)\r\n                return true;\r\n        } else {\r\n            if (this._exitByTime && normalizeTime < this._exitTime) {\r\n                return false;\r\n            }\r\n            if (this._isAndOperEnabled) {\r\n                let triggerCatch: number[];\r\n                for (var i = 0; i < this._conditions.length; i++) {\r\n                    let con = this._conditions[i];\r\n                    let out = con.checkState(paramsMap[con.id]);\r\n                    if (!out) {\r\n                        return false;\r\n                    }\r\n                    if (con.type == AniStateConditionType.Trigger) {\r\n                        if (triggerCatch) triggerCatch = [];\r\n                        triggerCatch.push(con.id);\r\n                    }\r\n                }\r\n                if (triggerCatch) {\r\n                    for (let id of triggerCatch) {\r\n                        paramsMap[id] = false;\r\n                    }\r\n                }\r\n                return true;\r\n            } else {\r\n                for (var i = 0; i < this._conditions.length; i++) {\r\n                    let con = this._conditions[i];\r\n                    let out = con.checkState(paramsMap[con.id]);\r\n                    if (out) {\r\n                        if (con.type == AniStateConditionType.Trigger)\r\n                            paramsMap[con.id] = false;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","import { AnimatorControllerParse, AniParmType, TypeAnimatorConditions, TypeAnimatorControllerData, TypeAnimatorParams, TypeAnimatorState, TypeAnimatorTransition } from \"../../../components/AnimatorControllerParse\";\r\nimport { AnimatorStateCondition, AnimatorStateBoolCondition, AnimatorStateNumberCondition, AnimatorStateTriggerCondition } from \"../../../components/AnimatorStateCondition\";\r\nimport { Resource } from \"../../../resource/Resource\";\r\nimport { ClassUtils } from \"../../../utils/ClassUtils\";\r\nimport { Animator } from \"./Animator\";\r\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\r\nimport { AnimatorState } from \"./AnimatorState\";\r\nimport { AnimatorTransition } from \"./AnimatorTransition\";\r\nimport { AvatarMask } from \"./AvatarMask\";\r\n\r\n/**\r\n * @en Represents an animator controller resource that manages animation states and transitions.\r\n * @zh 管理动画状态和转换的动画控制器资源。\r\n */\r\nexport class AnimatorController extends Resource {\r\n    /**\r\n     * @en The parsed data of the animator controller.\r\n     * @zh 解析后的动画控制器数据。\r\n     */\r\n    data: TypeAnimatorControllerData;\r\n    /**\r\n     * @en An array of clip IDs associated with this animator controller.\r\n     * @zh 与此动画控制器关联的剪辑ID数组。\r\n     */\r\n    clipsID: string[];\r\n    /**\r\n     * @en The constructor of AnimatorController, initialize a new AnimatorController object.\r\n     * @param data The animator controller data.\r\n     * @zh 构造函数，初始化一个新的 AnimatorController 对象。\r\n     * @param data 动画控制器数据。\r\n     */\r\n    constructor(data: any) {\r\n        super();\r\n        let obj = AnimatorControllerParse.parse(data);\r\n        this.data = obj.ret;\r\n        this.clipsID = obj.clipsID;\r\n    }\r\n\r\n    private getLayers() {\r\n        let layers = this.data.controllerLayers;\r\n        let lArr: AnimatorControllerLayer[] = [];\r\n        for (let i = layers.length - 1; i >= 0; i--) {\r\n            let l = layers[i];\r\n            let acl = new AnimatorControllerLayer(l.name);\r\n            if (l.avatarMask) {\r\n                acl.avatarMask = l.avatarMask;\r\n            }\r\n            lArr.unshift(acl);\r\n            for (let k in l) {\r\n                if (\"avatarMask\" == k || \"name\" == k || \"states\" == k || null == (l as any)[k]) {\r\n                    continue;\r\n                }\r\n                try {\r\n                    (acl as any)[k] = (l as any)[k];\r\n                } catch (err: any) { }\r\n            }\r\n            this.getState(l.states, acl, this.data);\r\n        }\r\n        return lArr;\r\n    }\r\n\r\n    /**\r\n     * @en Updates the given Animator with the current AnimatorController's data.\r\n     * This method updates the controller layers and animator parameters.\r\n     * @param a The Animator to update.\r\n     * @zh 使用当前AnimatorController的数据更新给定的Animator。\r\n     * 此方法更新控制器层和动画参数。\r\n     * @param a 要更新的Animator。\r\n     */\r\n    updateTo(a: Animator) {\r\n        let currLayer = (a as any)._controllerLayers;\r\n\r\n        for (let i = 0, len = currLayer.length; i < len; i++) {\r\n            currLayer[i]._removeReference();\r\n        }\r\n        currLayer.length = 0;\r\n\r\n        let layers = this.getLayers();\r\n\r\n        for (let i = 0, len = layers.length; i < len; i++) {\r\n            a.addControllerLayer(layers[i]);\r\n        }\r\n        let parms = this.data.animatorParams;\r\n        if (parms) {\r\n            for (let i = parms.length - 1; i >= 0; i--) {\r\n                let p = parms[i];\r\n                if (AniParmType.Bool == p.type) {\r\n                    a.setParamsBool(p.name, Boolean(p.val));\r\n                } else if (AniParmType.Float == p.type) {\r\n                    let val = Number(p.val);\r\n                    if (isNaN(val)) {\r\n                        val = 0;\r\n                    }\r\n                    a.setParamsNumber(p.name, val);\r\n                } else if (AniParmType.Trigger == p.type) {\r\n                    if (p.val) {\r\n                        a.setParamsTrigger(p.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createState(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer) {\r\n        if (!states) return null;\r\n        let ret: Record<string, AnimatorState> = {};\r\n        let defID: string = null;\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n\r\n            let childStates = obj.states;\r\n\r\n            if (childStates) {\r\n                let groupRet = this.createState(childStates, idCatch, acl);\r\n\r\n                if (groupRet) {\r\n                    idCatch[obj.id] = groupRet.states[groupRet.id];\r\n                }\r\n                continue;\r\n            }\r\n            if (0 > Number(obj.id)) {\r\n                if (\"-1\" == obj.id) {\r\n                    let transitions = obj.soloTransitions;\r\n                    if (transitions && 0 < transitions.length) {\r\n                        defID = transitions[0].id;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            let state = new AnimatorState();\r\n            idCatch[obj.id] = state;\r\n            ret[obj.id] = state;\r\n            for (let k in obj) {\r\n                try {\r\n                    if (\"scripts\" == k) {\r\n                        let scripts: string[] = obj[k];\r\n                        if (scripts && Array.isArray(scripts)) {\r\n                            for (let k = scripts.length - 1; k >= 0; k--) {\r\n                                let uuid = scripts[k];\r\n                                if (uuid && 0 == uuid.indexOf(\"res://\")) {\r\n                                    uuid = uuid.substring(6);\r\n                                }\r\n                                let c = ClassUtils.getClass(uuid);\r\n                                if (c) {\r\n                                    state.addScript(c);\r\n                                }\r\n                            }\r\n                        }\r\n                        continue;\r\n                    } else if (\"soloTransitions\" == k) {\r\n                        continue;\r\n                    } else if (null != (obj as any)[k]) {\r\n                        (state as any)[k] = (obj as any)[k];\r\n                    }\r\n                } catch (err: any) { }\r\n            }\r\n            acl.addState(state);\r\n        }\r\n        return { id: defID, states: ret };\r\n    }\r\n\r\n\r\n    private setExitTransition(exitRet: Record<string, TypeAnimatorTransition[]>, transitions: TypeAnimatorTransition[], idCatch: Record<string, AnimatorState>, data: TypeAnimatorControllerData, pExitRet: Record<string, TypeAnimatorTransition[]>) {\r\n        for (let id in exitRet) {\r\n            let state = idCatch[id];\r\n            if (state) {\r\n                let ats: AnimatorTransition[] = state.transitions;\r\n                let sts: AnimatorTransition[] = state.soloTransitions;\r\n                let linArr = exitRet[id];\r\n                for (let i = transitions.length - 1; i >= 0; i--) {\r\n                    let t = transitions[i];\r\n                    if (\"-3\" == t.id) {\r\n                        if (null == pExitRet[id]) {\r\n                            pExitRet[id] = [];\r\n                        }\r\n                        pExitRet[id].push(t);\r\n                        continue;\r\n                    }\r\n                    for (let j = linArr.length - 1; j >= 0; j--) {\r\n                        let t2 = linArr[j];\r\n                        let ato = new AnimatorTransition();\r\n                        ato.destState = idCatch[t.id];\r\n                        if (t.conditions) {\r\n                            this.addConditions(t.conditions, ato, data);\r\n                        }\r\n                        if (t2.conditions) {\r\n                            this.addConditions(t2.conditions, ato, data);\r\n                        }\r\n                        for (let k in t) {\r\n                            if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                                continue;\r\n                            } else {\r\n                                (ato as any)[k] = (t as any)[k];\r\n                            }\r\n                        }\r\n                        if (t.solo) {\r\n                            sts.unshift(ato);\r\n                        } else {\r\n                            ats.unshift(ato);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private setTransitions(states: TypeAnimatorState[], idCatch: Record<string, AnimatorState>, acl: AnimatorControllerLayer, data: TypeAnimatorControllerData, pState?: TypeAnimatorState) {\r\n        if (!states) return null;\r\n        let exitRet: Record<string, TypeAnimatorTransition[]> = {};\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n            if (obj.states) {\r\n                let exitTransition = this.setTransitions(obj.states, idCatch, acl, data, obj);\r\n                if (exitTransition) {\r\n                    let transitions = obj.soloTransitions;\r\n                    if (transitions) {\r\n                        this.setExitTransition(exitTransition, transitions, idCatch, data, exitRet);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = states.length - 1; i >= 0; i--) {\r\n            let obj = states[i];\r\n            if (obj.states) {\r\n                continue;\r\n            }\r\n            if (\"-1\" == obj.id) {\r\n                if (obj.soloTransitions && 0 < obj.soloTransitions.length) {\r\n                    if (null == pState) {\r\n                        acl.defaultState = idCatch[obj.soloTransitions[0].id];\r\n                    } else {\r\n                        idCatch[pState.id] = idCatch[obj.soloTransitions[0].id];\r\n                    }\r\n                    continue;\r\n                }\r\n            } else if (\"-2\" == obj.id) {\r\n                let transitions = obj.soloTransitions;\r\n                if (transitions) {\r\n                    for (let j = transitions.length - 1; j >= 0; j--) {\r\n                        let o = transitions[j];\r\n                        let destState = idCatch[o.id];\r\n                        if (destState) {\r\n                            for (let idk in idCatch) {\r\n                                let state = idCatch[idk];\r\n                                let ato = new AnimatorTransition();\r\n                                ato.destState = destState;\r\n                                if (o.conditions) {\r\n                                    this.addConditions(o.conditions, ato, data);\r\n                                }\r\n\r\n                                for (let k in o) {\r\n                                    if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                                        continue;\r\n                                    } else {\r\n                                        (ato as any)[k] = (o as any)[k];\r\n                                    }\r\n                                }\r\n\r\n                                if (o.solo) {\r\n                                    state.soloTransitions.unshift(ato);\r\n                                } else {\r\n                                    state.transitions.unshift(ato);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                continue;\r\n            } else if (\"-3\" == obj.id) {\r\n                continue;\r\n            }\r\n            let soloTransitions = obj.soloTransitions;\r\n            if (soloTransitions && idCatch[obj.id]) {\r\n                let ats: AnimatorTransition[] = idCatch[obj.id].transitions;\r\n                let sts: AnimatorTransition[] = idCatch[obj.id].soloTransitions;\r\n                for (let j = soloTransitions.length - 1; j >= 0; j--) {\r\n                    let o = soloTransitions[j];\r\n                    if (\"-3\" == o.id) {\r\n                        if (null == exitRet[obj.id]) {\r\n                            exitRet[obj.id] = [];\r\n                        }\r\n                        exitRet[obj.id].push(o);\r\n                        continue;\r\n                    }\r\n\r\n                    let ato = new AnimatorTransition();\r\n\r\n                    if (idCatch[o.id]) {\r\n                        ato.destState = idCatch[o.id];\r\n                    }\r\n                    if (o.conditions) {\r\n                        this.addConditions(o.conditions, ato, data);\r\n                    }\r\n                    for (let k in o) {\r\n                        if (\"solo\" == k || \"id\" == k || \"conditions\" == k) {\r\n                            continue;\r\n                        } else {\r\n                            (ato as any)[k] = (o as any)[k];\r\n                        }\r\n                    }\r\n                    if (o.solo) {\r\n                        sts.unshift(ato);\r\n                    } else {\r\n                        ats.unshift(ato);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return exitRet;\r\n    }\r\n\r\n    private getState(states: TypeAnimatorState[], acl: AnimatorControllerLayer, data: TypeAnimatorControllerData) {\r\n        if (states) {\r\n            let idCatch: Record<string, AnimatorState> = {};\r\n            this.createState(states, idCatch, acl);\r\n            this.setTransitions(states, idCatch, acl, data);\r\n        }\r\n    }\r\n\r\n    private addConditions(arr: TypeAnimatorConditions[], ato: AnimatorTransition, data: TypeAnimatorControllerData) {\r\n        let parms = data.animatorParams;\r\n        if (null == parms || 0 == parms.length) return;\r\n        for (let i = 0, len = arr.length; i < len; i++) {\r\n            let o = arr[i];\r\n            let parm: TypeAnimatorParams = null;\r\n            for (let j = parms.length - 1; j >= 0; j--) {\r\n                if (parms[j].id == o.id) {\r\n                    parm = parms[j];\r\n                    break;\r\n                }\r\n            }\r\n            if (null == parm) {\r\n                return;\r\n            }\r\n            let c: AnimatorStateCondition;\r\n            if (parm.type == AniParmType.Bool) {\r\n                let b = new AnimatorStateBoolCondition(parm.name);\r\n                b.compareFlag = Boolean(o.checkValue);\r\n                c = b;\r\n            } else if (parm.type == AniParmType.Float) {\r\n                let n = new AnimatorStateNumberCondition(parm.name);\r\n                n.numberValue = Number(o.checkValue);\r\n                n.compareFlag = o.type;\r\n                c = n;\r\n            } else if (parm.type == AniParmType.Trigger) {\r\n                let t = new AnimatorStateTriggerCondition(parm.name);\r\n                c = t;\r\n            }\r\n            ato.addCondition(c);\r\n        }\r\n    }\r\n}","/**\r\n * @internal\r\n */\r\nexport class BatchMark {\r\n\t/**@internal */\r\n\tupdateMark: number = -1;\r\n\t/**@internal */\r\n\tindexInList: number = -1;\r\n\t/**@internal */\r\n\tbatched: boolean = false;\r\n}\r\n\r\n","import { BatchMark } from \"../../core/render/BatchMark\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\n/**\r\n * @internal\r\n */\r\nexport class InstanceBatchManager {\r\n    /** @internal */\r\n    static instance = new InstanceBatchManager();\r\n    /**@internal */\r\n    private _instanceBatchOpaqueMarks: any[] = [];\r\n    /**@internal [只读]*/\r\n    updateCountMark: number = 0;\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * get batch index\r\n     */\r\n    private _getData<T>(key: boolean | number, data: any, cls?: new () => T): T {\r\n        if (null == cls) {\r\n            cls = Array as any;\r\n        }\r\n        if (\"boolean\" == typeof key) {\r\n            return (data[key ? 0 : 1]) || (data[key ? 0 : 1] = new cls());\r\n        } else {\r\n            return data[key] || (data[key] = new cls());\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * get batchMark by render property\r\n    //  * @param receiveShadow \r\n    //  * @param materialID \r\n    //  * @param subMeshID \r\n    //  * @param invertFace \r\n    //  * @param lightmapIndex \r\n    //  * @returns \r\n    //  */\r\n    // getInstanceBatchOpaquaMark(receiveShadow: boolean, materialID: number, subMeshID: number, invertFace: boolean, reflectionprob: number, lightmapIndex: number): BatchMark {\r\n    //     var data = this._getData(receiveShadow, this._instanceBatchOpaqueMarks);\r\n    //     data = this._getData(materialID, data);\r\n    //     data = this._getData(subMeshID, data);\r\n    //     data = this._getData(invertFace, data);\r\n    //     data = this._getData(lightmapIndex, data);\r\n    //     return this._getData(reflectionprob, data, BatchMark);\r\n    // }\r\n\r\n    getInstanceBatchOpaquaMark(element: RenderElement): BatchMark {\r\n        //transID\r\n        let invertFrontFace = element._transform ? element._transform._isFrontFaceInvert : false;\r\n        let receiveShadow = element._baseRender._receiveShadow;\r\n        let matID_geometry = (element._material._id << 17) + (element._geometry._id << 2) + (Number(invertFrontFace) << 1) + Number(receiveShadow);\r\n        //gi id\r\n        let reflectid = (element._baseRender._probReflection ? element._baseRender._probReflection._reflectionProbeID : -1) + 1;\r\n        let lightmapid = (element._baseRender.lightmapIndex) + 1;\r\n        let lightprobid = (element._baseRender._lightProb ? element._baseRender._lightProb._volumetricProbeID : -1) + 1;\r\n        let giID = (reflectid << 10) + (lightmapid << 20) + lightprobid;\r\n        //get Mark\r\n        var data = this._getData(matID_geometry, this._instanceBatchOpaqueMarks);\r\n        return this._getData(giID, data, BatchMark);\r\n\r\n\r\n\r\n    }\r\n}","import { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { FastSinglelist, SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { Camera } from \"../../../core/Camera\";\r\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\r\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\r\nimport { Scene3D } from \"../../../core/scene/Scene3D\";\r\nconst tempVec = new Vector3();\r\n// const tempVec1 = new Vector3();\r\n/**\r\n * @en Class used to describe batched rendering nodes.\r\n * @zh 类用来描述合批的渲染节点。\r\n */\r\nexport class BatchRender extends BaseRender {\r\n    /**@internal */\r\n    protected _checkLOD: boolean;\r\n    /**@internal */\r\n    protected _lodCount: number;\r\n    /**@internal */\r\n    protected _lodRateArray: number[];\r\n    /**@internal*/\r\n    protected _batchList: FastSinglelist<BaseRender>;\r\n    /**@internal*/\r\n    protected _batchbit: RenderBitFlag;\r\n    /**@internal*/\r\n    protected _RenderBitFlag: RenderBitFlag;\r\n    /**@internal*/\r\n    protected _lodInstanceRenderElement: { [key: number]: InstanceRenderElement[] } = {};\r\n    /**@internal*/\r\n    protected _lodsize: number;\r\n    /**@internal*/\r\n    private _cacheLod: number;\r\n\r\n    /**\r\n     * @en constructor, initialize the batch rendering node.\r\n     * @zh 构造方法, 初始化合批渲染节点。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_Batch;\r\n        this._renderElements = [];\r\n        this._lodInstanceRenderElement[-1] = [];\r\n        this._batchList = new SingletonList<BaseRender>();\r\n    }\r\n\r\n    /**\r\n     * @en Whether to batch based on LOD (Level of Detail).\r\n     * @zh 是否根据 LOD（细节层次）来进行合批。\r\n     */\r\n    get checkLOD() {\r\n        return this._checkLOD;\r\n    }\r\n\r\n    set checkLOD(value: boolean) {\r\n        this._checkLOD = value;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the LOD culling rate array for filtering.\r\n     * @zh 设置 LOD 裁剪率数组用于过滤。\r\n     */\r\n    get lodCullRateArray() {\r\n        return this._lodRateArray;\r\n    }\r\n\r\n    set lodCullRateArray(value: number[]) {\r\n        if (!this._checkLOD) {\r\n            return;\r\n        }\r\n        value.sort((a, b) => b - a);\r\n        this._lodRateArray = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * Overrid it\r\n     *  是否满足batch条件\r\n     */\r\n    protected _canBatch(render: BaseRender): boolean {\r\n        if (render._batchRender) {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this._batchList) {\r\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        if (this._batchList) {\r\n            for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n                this._batchList.elements[i].setRenderbitFlag(this._RenderBitFlag, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * 根据lod的改变\r\n     */\r\n    protected _changeLOD(lod: number) {\r\n        if (this._cacheLod == lod) {\r\n            return;\r\n        }\r\n\r\n        if (this._cacheLod == this.lodCullRateArray.length - 1) {\r\n            lod = -1;\r\n        }\r\n\r\n        this._renderElements = this._lodInstanceRenderElement[lod];\r\n        if (this._lodInstanceRenderElement[lod] && lod != -1) {\r\n            this._renderElements || (this._renderElements = []);\r\n            this._renderElements = this._renderElements.concat(this._lodInstanceRenderElement[-1]);\r\n        } else {\r\n            this._renderElements = this._lodInstanceRenderElement[-1];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @en Called before rendering. Handles LOD (Level of Detail) calculations and changes.\r\n     * @zh 渲染前调用。处理 LOD（细节级别）计算和变更。\r\n     */\r\n    onPreRender() {\r\n        if (!this.checkLOD || !this._lodRateArray || this._lodRateArray.length < 1) {\r\n            this._changeLOD(0);\r\n        } else {\r\n            let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n            let maxYDistance = checkCamera.maxlocalYDistance;\r\n            Vector3.subtract(this._bounds._imp.getCenter(), checkCamera.transform.position, tempVec);\r\n            //大于farplane,或者不在视锥内.不做lod操作\r\n            let length = tempVec.length();\r\n            let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n            let rate = (this._lodsize / rateYDistance);\r\n            for (let i = 0; i < this._lodRateArray.length; i++) {\r\n                if (rate < this._lodRateArray[i])\r\n                    continue;\r\n                this._changeLOD(i);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param render \r\n     */\r\n    _batchOneRender(render: BaseRender): boolean {\r\n        //TODO\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param render \r\n     */\r\n    _removeOneRender(render: BaseRender) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param render \r\n     */\r\n    _updateOneRender(render: BaseRender) {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * @en Adds a list of render nodes to the batch queue.\r\n     * @param renderNode An array of BaseRender objects to be added to the batch.\r\n     * @zh 将渲染节点队列添加到合批队列中。\r\n     * @param renderNode 要添加到合批的 BaseRender 对象数组。\r\n     */\r\n    addList(renderNode: BaseRender[]) {\r\n        for (var i = 0, n = renderNode.length; i < n; i++) {\r\n            let baseRender = renderNode[i];\r\n            if (this._canBatch(baseRender)) {\r\n                this._batchList.add(baseRender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Performs batching based on the _batchList.\r\n     * This method iterates through the _batchList and batches each render node.\r\n     * @zh 根据 _batchList 执行合批操作。\r\n     * 此方法遍历 _batchList 并对每个渲染节点进行合批。\r\n     */\r\n    reBatch() {\r\n        let renderNums = this._batchList.length;\r\n        let renders = this._batchList.elements;\r\n        for (var i = 0; i < renderNums; i++) {\r\n            let render = renders[i];\r\n            this._batchOneRender(render);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Restoring the Batch Render State\r\n     * @zh 恢复批处理渲染状态\r\n     */\r\n    _restorRenderNode() {\r\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n            this._removeOneRender(this._batchList.elements[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _clear() {\r\n        this._restorRenderNode();\r\n        this._renderElements = [];\r\n        this._batchList.destroy();\r\n        this._batchList = new SingletonList<BaseRender>();\r\n        this._lodInstanceRenderElement = {};\r\n        this._lodInstanceRenderElement[-1] = [];\r\n\r\n    }\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender, RenderBitFlag } from \"../../../core/render/BaseRender\";\r\nimport { BatchMark } from \"../../../core/render/BatchMark\";\r\nimport { InstanceRenderElement } from \"../../../core/render/InstanceRenderElement\";\r\nimport { RenderElement } from \"../../../core/render/RenderElement\";\r\nimport { InstanceBatchManager } from \"../../../graphics/Batch/InstanceBatchManager\";\r\nimport { MeshInstanceGeometry } from \"../../../graphics/MeshInstanceGeometry\";\r\nimport { Bounds } from \"../../../math/Bounds\";\r\nimport { SubMesh } from \"../../../resource/models/SubMesh\";\r\nimport { BatchRender } from \"./BatchRender\";\r\n\r\n/**\r\n * @en used to create static instance batch rendering.\r\n * @zh 用于创建静态实例批处理渲染。\r\n */\r\nexport class StaticInstanceBatchRender extends BatchRender {\r\n\r\n    /**@internal instanceBatchManager*/\r\n    private _batchManager: InstanceBatchManager;\r\n\r\n    /**@internal  记录每个BatchMask对应的Instance的数量*/\r\n    private _insBatchMarksNums: number[] = [];\r\n\r\n    /**@interal */\r\n    private _insElementMarksArray: InstanceRenderElement[] = [];\r\n\r\n    /**@interal batch rule:Batch min count*/\r\n    private _instanceBatchminNums: number = 10;\r\n\r\n    /**@interal cache udpate element*/\r\n    private _updateChangeElement: InstanceRenderElement[] = [];\r\n\r\n    /**\r\n     * @en constructor, initialize static instance batch rendering.\r\n     * @zh 构造方法, 初始化静态实例批处理渲染。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.checkLOD = true;\r\n        this._batchManager = new InstanceBatchManager();\r\n        this._RenderBitFlag = RenderBitFlag.RenderBitFlag_InstanceBatch;\r\n    }\r\n\r\n    /**\r\n     * @en Determines whether this render supports instance batching.\r\n     * @param render The render object to be checked.\r\n     * @returns A boolean value indicating whether instance batching is supported.\r\n     * @zh 判断这个 Render 是否支持 InstanceBatch。\r\n     * @param render 要检查的渲染对象。\r\n     * @returns 一个布尔值，指示是否支持实例批处理。\r\n     */\r\n    private _isRenderNodeAllCanInstanceBatch(render: BaseRender): boolean {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            if (!element.material._shader._enableInstancing) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the number of instances to be batched.\r\n     * @param render The render object containing the elements to be batched.\r\n     * @zh 计算实例合并的数量。\r\n     * @param render 包含要合并元素的渲染对象。\r\n     */\r\n    private _sumInstanceBatch(render: BaseRender) {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element);\r\n            if (insBatchMarks.indexInList == -1) {\r\n                insBatchMarks.indexInList = this._insBatchMarksNums.length;\r\n                this._insBatchMarksNums.push(0);\r\n            }\r\n            this._insBatchMarksNums[insBatchMarks.indexInList] += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _batchOneElement(element: RenderElement, render: BaseRender) {\r\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element);\r\n        if (insBatchMarks.indexInList == -1)\r\n            return;\r\n        let instanceelement: InstanceRenderElement = this._insElementMarksArray[insBatchMarks.indexInList];\r\n        if (!instanceelement) {\r\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\r\n        }\r\n        let list = instanceelement._instanceBatchElementList;\r\n        if (list.length == InstanceRenderElement.maxInstanceCount) {\r\n            this._insBatchMarksNums.push(this._insBatchMarksNums[insBatchMarks.indexInList]);\r\n            insBatchMarks.indexInList = this._insBatchMarksNums.length - 1;\r\n            instanceelement = this._createInstanceElement(element, render, insBatchMarks);\r\n            list = instanceelement._instanceBatchElementList;\r\n        }\r\n        if (list.indexof(element) == -1) {\r\n            list.add(element);\r\n            instanceelement._isUpdataData = true;\r\n            (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n            //element._batchElement = instanceelement;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _removeOneElement(element: RenderElement, render: BaseRender) {\r\n        var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element);\r\n        if (insBatchMarks.indexInList == -1)\r\n            return;\r\n        // let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\r\n        // if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\r\n        //     return;\r\n        // }\r\n        // let list = instanceelement._instanceBatchElementList;\r\n        // if (list.indexof(element) != -1) {\r\n        //     list.remove(element);\r\n        //     instanceelement._isUpdataData = true;\r\n        //     (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n        //     element._batchElement = null;\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * update one element\r\n     * @param element \r\n     * @param render \r\n     * @returns \r\n     */\r\n    private _updateOneElement(element: RenderElement, render: BaseRender) {\r\n        //let instanceelement: InstanceRenderElement = element._batchElement as InstanceRenderElement;\r\n        // if (!instanceelement || this._renderElements.indexOf(instanceelement) == -1) {\r\n        //     return;\r\n        // }\r\n        // let list = instanceelement._instanceBatchElementList;\r\n        // if (list.indexof(element) != -1) {\r\n        //     instanceelement._isUpdataData = true;\r\n        //     (this._updateChangeElement.indexOf(instanceelement) == -1) && this._updateChangeElement.push(instanceelement);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * create instanceElement\r\n     * @param element \r\n     * @param render \r\n     * @param batchMark \r\n     * @returns \r\n     */\r\n    private _createInstanceElement(element: RenderElement, render: BaseRender, batchMark: BatchMark) {\r\n        let instanceRenderElement = new InstanceRenderElement();\r\n        instanceRenderElement.render = render;\r\n        //instanceRenderElement.renderType = RenderElement.RENDERTYPE_INSTANCEBATCH;\r\n        //Geometry updaste\r\n        (instanceRenderElement._geometry as MeshInstanceGeometry).subMesh = (element._geometry as SubMesh);\r\n        instanceRenderElement.material = element.material;\r\n        instanceRenderElement.setTransform(null);\r\n        instanceRenderElement.renderSubShader = element.renderSubShader;\r\n        let list = instanceRenderElement._instanceBatchElementList;\r\n        list.length = 0;\r\n        list.add(element);\r\n        this._insElementMarksArray[batchMark.indexInList] = instanceRenderElement;\r\n        batchMark.batched = true;\r\n        if (!this._lodInstanceRenderElement[render._LOD]) {\r\n            this._lodInstanceRenderElement[render._LOD] = [];\r\n        }\r\n        this._lodInstanceRenderElement[render._LOD].push(instanceRenderElement);\r\n        return instanceRenderElement;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Determines whether the render instance meets the batch conditions.\r\n     * @param render The base render object to check for batching conditions.\r\n     * @returns boolean True if the render instance meets the batching conditions; otherwise, false.\r\n     * @zh 判断渲染实例是否满足批处理条件。\r\n     * @param render 要检查批处理条件的基础渲染对象。\r\n     * @returns boolean 如果渲染实例满足批处理条件，则返回 true；否则返回 false。\r\n     */\r\n\r\n    protected _canBatch(render: BaseRender): boolean {\r\n        let elements = render._renderElements;\r\n        for (var i = 0, n = elements.length; i < n; i++) {\r\n            let element = elements[i];\r\n            var insBatchMarks = this._batchManager.getInstanceBatchOpaquaMark(element);\r\n            if (this._insBatchMarksNums[insBatchMarks.indexInList] < this._instanceBatchminNums || element.material.renderQueue >= 3000) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * @en Recalculate the bounding box\r\n     * @zh 重新计算包围盒\r\n     */\r\n    _calculateBoundingBox() {\r\n        let bound = this._bounds;\r\n        for (let i = 0, n = this._batchList.length; i < n; i++) {\r\n            if (i == 0) {\r\n                this._batchList.elements[i].bounds.cloneTo(bound);\r\n            } else {\r\n                Bounds.merge(bound, this._batchList.elements[i].bounds, bound);\r\n            }\r\n        }\r\n        let extend = this._bounds.getExtent();\r\n        this._lodsize = 2 * Math.max(extend.x, extend.y, extend.z);\r\n        return this._bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     * destroy\r\n     */\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n    }\r\n\r\n    /**\r\n     * 添加合批到render\r\n     * @param render \r\n     * @internal\r\n     * @returns \r\n     */\r\n    _batchOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return false;\r\n        this.boundsChange = true;\r\n        let elements = render._renderElements;\r\n        for (let i = 0, n = elements.length; i < n; i++) {\r\n            let renderelement = elements[i];\r\n            this._batchOneElement(renderelement, render);\r\n        }\r\n        render._batchRender = this;\r\n        render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 删除合批\r\n     * @Override\r\n     * @internal\r\n     * @param render \r\n     * @returns \r\n     */\r\n    _removeOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return;\r\n        if (this._batchList.indexof(render) != -1) {\r\n            this.boundsChange = true;\r\n            let elements = render._renderElements;\r\n            for (let i = 0, n = elements.length; i < n; i++) {\r\n                let renderelement = elements[i];\r\n                this._removeOneElement(renderelement, render);\r\n            }\r\n            render._batchRender = null;\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_InstanceBatch, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 合批过的更新数据\r\n     * @override\r\n     * @internal\r\n     * @param render \r\n     * @returns \r\n     */\r\n    _updateOneRender(render: BaseRender) {\r\n        if (!this._canBatch(render)) return;\r\n        if (this._batchList.indexof(render) != -1) {\r\n            this.boundsChange = true;\r\n            let elements = render._renderElements;\r\n            for (let i = 0, n = elements.length; i < n; i++) {\r\n                let renderelement = elements[i];\r\n                this._updateOneElement(renderelement, render);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Clean up all renderings\r\n     * @zh 清理所有渲染\r\n     */\r\n    _clear() {\r\n        super._clear();\r\n        this._insElementMarksArray.forEach(element => {\r\n            element && element.destroy();\r\n        });\r\n\r\n        this._insElementMarksArray = [];\r\n        this._updateChangeElement = [];\r\n        this._insBatchMarksNums = [];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @en Add a list of renders to the batch queue\r\n     * @param renderNodes  The render queue to be added\r\n     * @zh 将渲染队列添加到批处理队列\r\n     * @param renderNodes  要添加的渲染队列\r\n     */\r\n    addList(renderNodes: BaseRender[]) {\r\n        if (!this._batchList) {\r\n            this._batchList = new SingletonList<BaseRender>();\r\n        }\r\n        let renders: BaseRender[] = [];\r\n        for (var i = 0; i < renderNodes.length; i++) {\r\n            let baseRender = renderNodes[i];\r\n            if (baseRender._batchRender) {\r\n                continue;\r\n            }\r\n            if (this._isRenderNodeAllCanInstanceBatch(baseRender)) {\r\n                // this._batchList.add(baseRender);\r\n                renders.push(baseRender);\r\n                this._sumInstanceBatch(baseRender);\r\n            }\r\n        }\r\n        for (var i = 0, n = renders.length; i < n; i++) {\r\n            let baseRender = renders[i];\r\n            if (this._canBatch(baseRender)) {\r\n                this._batchList.add(baseRender);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @en Rebatch based on the _batchList\r\n     * @zh 根据_batchList重新进行批处理\r\n     */\r\n    reBatch() {\r\n        let renderNums = this._batchList.length;\r\n        let renders = this._batchList.elements;\r\n        for (var i = 0; i < renderNums; i++) {\r\n            let render = renders[i];\r\n            this._batchOneRender(render);\r\n        }\r\n    }\r\n\r\n}","import { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { BatchRender } from \"./BatchRender\";\r\n\r\n/**\r\n * @en The batch rendering of the static vertex merge.\r\n * @zh 静态顶点合并的批量渲染。\r\n */\r\nexport class StatiVertexMergeBatchRender extends BatchRender {\r\n    \r\n    //TODO 好像基类不需要\r\n    _addList(renderNodes: BaseRender[]) {\r\n        //TODO  add list\r\n    }\r\n}","import { SingletonList } from \"../../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../../core/render/BaseRender\";\r\nimport { Sprite3D, StaticFlag } from \"../../../core/Sprite3D\";\r\nimport { Volume } from \"../Volume\";\r\nimport { BatchRender } from \"./BatchRender\";\r\nimport { StaticInstanceBatchRender } from \"./StaticInstanceBatchRender\";\r\nimport { StatiVertexMergeBatchRender } from \"./StatiVertexMergeBatchRender\";\r\n\r\n/**\r\n * @en Class used to describe the volume of a mergeable render node.\r\n * @zh 用来描述一个可合并渲染节点的体积。\r\n */\r\nexport class StaticBatchVolume extends Volume {\r\n\r\n    /**@internal 缓存可以合并的*/\r\n    private _cacheRender: SingletonList<BaseRender>;\r\n\r\n    /**@internal 已经合并了的BaseRender */\r\n    private _batchRender: SingletonList<BaseRender>;\r\n\r\n    /**@internal 是否根据LOD属性优化 */\r\n    private _checkLOD: boolean;//是否考虑LOD\r\n\r\n    /** StaticInstanceBatch */\r\n    /**@internal 是否开启静态物体Instance的合批 */\r\n    private _enableStaticInstanceBatch: boolean;\r\n\r\n    /**@internal 内置静态物体Instance合批 */\r\n    private _instanceBatchRender: StaticInstanceBatchRender;\r\n\r\n    /**StaticVertexMergeBatch */\r\n    /**@internal 是否开启顶点静态合批 TODO */\r\n    private _enableStaticVertexMergeBatch: boolean;\r\n\r\n    /**@internal 顶点静态合批  TODO*/\r\n    private _vertexMergeBatchRender: StatiVertexMergeBatchRender;\r\n\r\n    /**@internal CustomBatch自定义的batch流程*/\r\n    private _enableCustomBatch: boolean;\r\n\r\n    /**@internal */\r\n    private _customBatchs: BatchRender[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    private _getStaticInstanceBatchRender(): StaticInstanceBatchRender {\r\n        let render = (this.owner as Sprite3D).getComponent(StaticInstanceBatchRender);\r\n        if (!render) {\r\n            render = (this.owner as Sprite3D).addComponent(StaticInstanceBatchRender) as StaticInstanceBatchRender;\r\n        }\r\n        return render;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    private _getStatiVertexMergeBatchRender(): StatiVertexMergeBatchRender {\r\n        let render = (this.owner as Sprite3D).getComponent(StatiVertexMergeBatchRender);\r\n        if (!render) {\r\n            render = (this.owner as Sprite3D).addComponent(StatiVertexMergeBatchRender) as StatiVertexMergeBatchRender;\r\n        }\r\n        return render;\r\n    }\r\n\r\n    /**\r\n     * @en Whether LOD (Level of Detail) is considered in batching.\r\n     * @zh 合批是否考虑 LOD（细节层次）。\r\n     */\r\n    get checkLOD(): boolean {\r\n        return this._checkLOD;\r\n    }\r\n\r\n    set checkLOD(value: boolean) {\r\n        this._checkLOD = value;\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender.checkLOD = value;\r\n        }\r\n        if (this._enableStaticVertexMergeBatch) {\r\n            this._vertexMergeBatchRender.checkLOD = value;\r\n        }\r\n        if (this._enableCustomBatch) {\r\n            this._customBatchs.forEach(element => {\r\n                element.checkLOD = value;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether static instance batching is enabled.\r\n     * @zh 是否启用静态实例合批渲染。\r\n     */\r\n    get enableStaticInstanceBatchRender(): boolean {\r\n        return this._enableStaticInstanceBatch;\r\n    }\r\n\r\n    set enableStaticInstanceBatchRender(value: boolean) {\r\n        if (!this._instanceBatchRender && value) {\r\n            this._instanceBatchRender = this._getStaticInstanceBatchRender();\r\n        }\r\n        if (value == this._enableStaticInstanceBatch)\r\n            return;\r\n        if (value) {\r\n            this._instanceBatchRender.enabled = true;\r\n        } else {\r\n            this._instanceBatchRender.enabled = false;\r\n        }\r\n        this._enableStaticInstanceBatch = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether static vertex merge batching is enabled.\r\n     * @zh 是否启用静态顶点合并合批。\r\n     */\r\n    get enableMergeBatchRender() {\r\n        return this._enableStaticVertexMergeBatch;\r\n    }\r\n\r\n    set enableMergeBatchRender(value: boolean) {\r\n        if (!this._vertexMergeBatchRender && value) {\r\n            this._vertexMergeBatchRender = this._getStatiVertexMergeBatchRender();\r\n        }\r\n        if (value == this._enableStaticVertexMergeBatch)\r\n            return;\r\n        if (value) {\r\n            this._vertexMergeBatchRender.enabled = true;\r\n        } else {\r\n            this._vertexMergeBatchRender.enabled = false;\r\n        }\r\n        this._enableStaticVertexMergeBatch = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether custom batching is enabled.\r\n     * @zh 是否启用自定义合批。\r\n     */\r\n    get enableCustomBatchRender() {\r\n        return this._enableCustomBatch;\r\n    }\r\n\r\n    set enableCustomBatchRender(value: boolean) {\r\n        this._enableCustomBatch = value;\r\n        this._customBatchs.forEach(element => {\r\n            element.enabled = value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en The custom batch renderers.\r\n     * @zh 自定义的合批渲染器。\r\n     */\r\n    get customBatchRenders() {\r\n        return this._customBatchs;\r\n    }\r\n    set customBatchRenders(value: BatchRender[]) {\r\n        if (this._customBatchs) {\r\n            this._customBatchs.forEach(element => {\r\n                (this.owner as Sprite3D)._destroyComponent(element);\r\n            });\r\n        }\r\n        this._customBatchs = value;\r\n        this._customBatchs.forEach(element => {\r\n            (this.owner as Sprite3D).addComponentInstance(element);\r\n        });\r\n        this.enableCustomBatchRender = this._enableCustomBatch;\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method，initialize rendering related settings.\r\n     * @zh 构造方法，初始化渲染相关的设置。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.checkLOD = true;\r\n        this._enableStaticInstanceBatch = false;\r\n        this._enableStaticVertexMergeBatch = false;\r\n        this._cacheRender = new SingletonList<BaseRender>();\r\n        this._batchRender = new SingletonList<BaseRender>();\r\n        this._enableCustomBatch = false;\r\n    }\r\n\r\n    /**     \r\n     * Restoring the Batch Render State\r\n     */\r\n    private _restorRenderNode() {\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element._clear();\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender._clear();\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            this._vertexMergeBatchRender._clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add one RenderNode\r\n     * @param renderNode \r\n     * @returns \r\n     */\r\n    private __addRenderNodeToBatch(renderNode: BaseRender) {\r\n        //动态增加合并批次\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                if (element._batchOneRender(renderNode)) return;\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            if (this._instanceBatchRender._batchOneRender(renderNode)) return;\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            if (this._vertexMergeBatchRender._batchOneRender(renderNode)) return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove one RenderNode\r\n     * @param renderNode \r\n     */\r\n    private __removeRenderNodeFromBatch(renderNode: BaseRender) {\r\n        //动态删除合并批次\r\n        renderNode._batchRender._removeOneRender(renderNode);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        if (this._enableStaticInstanceBatch)\r\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = true);\r\n        if (this._enableStaticVertexMergeBatch)\r\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = true);\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.enabled = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @protected\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        if (this._enableStaticInstanceBatch)\r\n            this._instanceBatchRender && (this._instanceBatchRender.enabled = false);\r\n        if (this._enableStaticVertexMergeBatch)\r\n            this._vertexMergeBatchRender && (this._vertexMergeBatchRender.enabled = false);\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.enabled = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Adds a render node to the volume when it enters.\r\n     * This method handles the addition of static batch render nodes.\r\n     * @param renderNode The render node to be added.\r\n     * @zh 当一个渲染节点进入体积时添加该节点。\r\n     * 此方法处理静态批次渲染节点的添加。\r\n     * @param renderNode 要添加的渲染节点。\r\n     */\r\n    _addRenderNode?(renderNode: BaseRender): void {\r\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\r\n            if (this._cacheRender.indexof(renderNode) != -1) {\r\n                return;\r\n            }\r\n            this._cacheRender.add(renderNode);\r\n            if (this._batchRender.length > 0) {//if batch exited\r\n                this.__addRenderNodeToBatch(renderNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @en Removes a render node from the volume when it exits.\r\n     * This method handles the removal of static batch render nodes.\r\n     * @param renderNode The render node to be removed.\r\n     * @zh 当一个渲染节点移出体积时移除该节点。\r\n     * 此方法处理静态批次渲染节点的移除。\r\n     * @param renderNode 要移除的渲染节点。\r\n     */\r\n    _removeRenderNode(renderNode: BaseRender): void {\r\n        if (renderNode.renderNode.staticMask == StaticFlag.StaticBatch) {\r\n            if (this._batchRender.indexof(renderNode) != -1) {\r\n                this.__removeRenderNodeFromBatch(renderNode);\r\n                this._batchRender.remove(renderNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Volume change\r\n     * @zh 体积变化\r\n     */\r\n    _VolumeChange() {\r\n        super._VolumeChange();\r\n        this._cacheRender.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Called when the component starts.\r\n     * Initiates the rebatching process.\r\n     * @zh 当组件启动时调用。\r\n     * 启动重新合批过程。\r\n     */\r\n    onStart() {\r\n        this.reBatch();\r\n    }\r\n\r\n    /**\r\n     * @en Rebatches the render nodes, clearing previous states.\r\n     * This method should be called manually when necessary. Performs batching based on the values in the Volume.\r\n     * @zh 重新合批渲染节点，清理先前的状态。\r\n     * 必要时需要手动调用此方法。根据 Volume 中的值执行合批。\r\n     */\r\n    reBatch() {\r\n        this._cacheRender.elements.length = this._cacheRender.length;\r\n        this._batchRender.clear();\r\n        this._restorRenderNode();\r\n        if (this.enableCustomBatchRender) {\r\n            this._customBatchs.forEach(element => {\r\n                element.addList(this._cacheRender.elements);\r\n                element.reBatch();\r\n            });\r\n        }\r\n        if (this._enableStaticInstanceBatch) {\r\n            this._instanceBatchRender.addList(this._cacheRender.elements);\r\n            this._instanceBatchRender.reBatch();\r\n        }\r\n        if (this.enableCustomBatchRender) {\r\n            this._vertexMergeBatchRender.addList(this._cacheRender.elements);\r\n            this._vertexMergeBatchRender.reBatch();\r\n        }\r\n        //UpdateBatch Render\r\n        for (var i = 0, n = this._cacheRender.length; i < n; i++) {\r\n            (this._cacheRender.elements[i]._batchRender) && this._batchRender.add(this._cacheRender.elements[i]);\r\n        }\r\n    }\r\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { GeometryElement } from \"../GeometryElement\";\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { UI3D } from \"./UI3D\";\r\n\r\n/**\r\n * @en UI3DGeometry class is used to create and manage the geometry structure of 3D UI elements.\r\n * @zh UI3DGeometry 类用于创建和管理 3D UI元素的几何结构的类。\r\n */\r\nexport class UI3DGeometry extends GeometryElement {\r\n    /**@internal */\r\n    private static tempV0: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private static _type: number = GeometryElement._typeCounter++;\r\n    /* @internal 顶点buffer*/\r\n    private _vertexBuffer: VertexBuffer3D;\r\n    /* @internal 顶点数据*/\r\n    private _vertex: Float32Array;\r\n    /**@internal indexbuffer */\r\n    private _indexBuffer: IndexBuffer3D;\r\n    /**@internal index数据 */\r\n    private _index: Uint16Array;\r\n    /**@internal */\r\n    private _bound: Bounds;\r\n    /**@internal */\r\n    _positionArray: Vector3[];\r\n\r\n    /**\r\n     * @internal\r\n     * @en Constructor method.\r\n     * @zh 构造方法。\r\n     */\r\n    constructor(owner: UI3D) {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n        this._owner = owner;\r\n        //初始化_segementCount\r\n        this.bufferState = new BufferState();\r\n        this._bound = new Bounds();\r\n        this._createBuffer();\r\n        this.indexFormat = IndexFormat.UInt16;\r\n    }\r\n\r\n    /**@internal */\r\n    get bounds() {\r\n        return this._bound;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _createBuffer() {\r\n        var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION,NORMAL,UV\");\r\n        var halfLong: number = 1 / 2;\r\n        var halfWidth: number = 1 / 2;\r\n        this._vertex = new Float32Array([-halfLong, halfWidth, 0, 0, 0, 1, 0, 0,\r\n            halfLong, halfWidth, 0, 0, 0, 1, 1, 0,\r\n        -halfLong, -halfWidth, 0, 0, 0, 1, 0, 1,\r\n            halfLong, -halfWidth, 0, 0, 0, 1, 1, 1]);\r\n        this._index = new Uint16Array([0, 1, 2, 3, 2, 1]);\r\n        //VB\r\n        this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(this._vertex.length * 4, BufferUsage.Dynamic, false);\r\n        this._vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n        this._vertexBuffer.setData(this._vertex.buffer);\r\n        //IB\r\n        this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, this._index.length, BufferUsage.Static, false);\r\n        this._indexBuffer.setData(this._index);\r\n        //VAO\r\n        this.bufferState = new BufferState();\r\n        this.bufferState.applyState([this._vertexBuffer], this._indexBuffer);\r\n        this._bound.setExtent(new Vector3(halfLong, halfWidth, halfLong));\r\n        this._bound.setCenter(new Vector3(0, 0, 0));\r\n        this._positionArray = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n        this._positionArray[0].set(-halfWidth, halfLong, 0.0);\r\n        this._positionArray[1].set(halfWidth, halfLong, 0.0);\r\n        this._positionArray[2].set(-halfWidth, -halfLong, 0.0);\r\n        this._positionArray[3].set(halfWidth, -halfLong, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * reset view vertex data\r\n     */\r\n    _resizeViewVertexData(size: Vector2, cameraDir: Vector3, cameraUp: Vector3, viewMode: boolean, worldPos: Vector3): void {\r\n        var halfwidth = size.x / 2;\r\n        var halfhight = size.y / 2;\r\n        if (viewMode) {\r\n            UI3DGeometry.tempV0.set(-halfwidth, halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[0]);\r\n            UI3DGeometry.tempV0.set(halfwidth, halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[1]);\r\n            UI3DGeometry.tempV0.set(-halfwidth, -halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[2]);\r\n            UI3DGeometry.tempV0.set(halfwidth, -halfhight, 0.0);\r\n            Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[3]);\r\n            this._vertex[3] = this._vertex[11] = this._vertex[19] = this._vertex[27] = -cameraDir.x;\r\n            this._vertex[4] = this._vertex[12] = this._vertex[20] = this._vertex[28] = -cameraDir.y;\r\n            this._vertex[5] = this._vertex[13] = this._vertex[21] = this._vertex[29] = -cameraDir.z;\r\n        } else {\r\n            this._positionArray[0].set(-halfwidth, halfhight, 0.0);\r\n            this._positionArray[1].set(halfwidth, halfhight, 0.0);\r\n            this._positionArray[2].set(-halfwidth, -halfhight, 0.0);\r\n            this._positionArray[3].set(halfwidth, -halfhight, 0.0);\r\n        }\r\n        Vector3.add(this._positionArray[0], worldPos, this._positionArray[0]);\r\n        Vector3.add(this._positionArray[1], worldPos, this._positionArray[1]);\r\n        Vector3.add(this._positionArray[2], worldPos, this._positionArray[2]);\r\n        Vector3.add(this._positionArray[3], worldPos, this._positionArray[3]);\r\n        this._changeVertex(size);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * reset view vertex data\r\n     */\r\n    _resizeVertexData(size: Vector2): void {\r\n        var halfwidth = size.x / 2;\r\n        var halfhight = size.y / 2;\r\n        // if (viewMode) {\r\n        //     UI3DGeometry.tempV0.set(-halfwidth, halfhight, 0.0);\r\n        //     Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[0]);\r\n        //     UI3DGeometry.tempV0.set(halfwidth, halfhight, 0.0);\r\n        //     Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[1]);\r\n        //     UI3DGeometry.tempV0.set(-halfwidth, -halfhight, 0.0);\r\n        //     Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[2]);\r\n        //     UI3DGeometry.tempV0.set(halfwidth, -halfhight, 0.0);\r\n        //     Utils3D.billboardTrans(UI3DGeometry.tempV0, cameraDir, cameraUp, this._positionArray[3]);\r\n        //     this._vertex[3] = this._vertex[11] = this._vertex[19] = this._vertex[27] = -cameraDir.x;\r\n        //     this._vertex[4] = this._vertex[12] = this._vertex[20] = this._vertex[28] = -cameraDir.y;\r\n        //     this._vertex[5] = this._vertex[13] = this._vertex[21] = this._vertex[29] = -cameraDir.z;\r\n        // } else {\r\n        this._positionArray[0].set(-halfwidth, halfhight, 0.0);\r\n        this._positionArray[1].set(halfwidth, halfhight, 0.0);\r\n        this._positionArray[2].set(-halfwidth, -halfhight, 0.0);\r\n        this._positionArray[3].set(halfwidth, -halfhight, 0.0);\r\n        // }\r\n        // Vector3.add(this._positionArray[0], worldPos, this._positionArray[0]);\r\n        // Vector3.add(this._positionArray[1], worldPos, this._positionArray[1]);\r\n        // Vector3.add(this._positionArray[2], worldPos, this._positionArray[2]);\r\n        // Vector3.add(this._positionArray[3], worldPos, this._positionArray[3]);\r\n        this._changeVertex(size);\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * reset vertex data\r\n     */\r\n    _resizeWorldVertexData(size: Vector2, worldMat: Matrix4x4) {\r\n        let applyMat = (v3: Vector3, mat: Matrix4x4) => {\r\n            Vector3.transformV3ToV3(v3, mat, v3);\r\n            return v3;\r\n        }\r\n        var halfwidth = size.x / 2;\r\n        var halfhight = size.y / 2;\r\n        this._positionArray[0].set(-halfwidth, halfhight, 0.0);\r\n        this._positionArray[1].set(halfwidth, halfhight, 0.0);\r\n        this._positionArray[2].set(-halfwidth, -halfhight, 0.0);\r\n        this._positionArray[3].set(halfwidth, -halfhight, 0.0);\r\n        applyMat(this._positionArray[0], worldMat);\r\n        applyMat(this._positionArray[1], worldMat);\r\n        applyMat(this._positionArray[2], worldMat);\r\n        applyMat(this._positionArray[3], worldMat);\r\n        this._changeVertex(size);\r\n    }\r\n\r\n    private _changeVertex(size: Vector2) {\r\n        this._vertex[0] = this._positionArray[0].x;\r\n        this._vertex[1] = this._positionArray[0].y;\r\n        this._vertex[2] = this._positionArray[0].z;\r\n        this._vertex[8] = this._positionArray[1].x;\r\n        this._vertex[9] = this._positionArray[1].y;\r\n        this._vertex[10] = this._positionArray[1].z;\r\n        this._vertex[16] = this._positionArray[2].x;\r\n        this._vertex[17] = this._positionArray[2].y;\r\n        this._vertex[18] = this._positionArray[2].z;\r\n        this._vertex[24] = this._positionArray[3].x;\r\n        this._vertex[25] = this._positionArray[3].y;\r\n        this._vertex[26] = this._positionArray[3].z;\r\n        this._vertexBuffer.setData(this._vertex.buffer, 0, 0, this._vertex.length * 4);\r\n        UI3DGeometry.tempV0.setValue(size.x / 2, size.y / 2, 0.0);\r\n        this._bound.setExtent(UI3DGeometry.tempV0);\r\n        let halfWidth = (this._positionArray[3].x - this._positionArray[2].x) / 2;\r\n        let halfHeight = (this._positionArray[0].y - this._positionArray[2].y) / 2;\r\n        UI3DGeometry.tempV0.setValue(this._positionArray[2].x + halfWidth, this._positionArray[2].y + halfHeight, this._positionArray[2].z);\r\n        this._bound.setCenter(UI3DGeometry.tempV0);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        this.clearRenderParams();\r\n        this.setDrawElemenParams(6, 0);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @en Destroys the instance and releases resources.\r\n     * @zh 销毁实例并释放资源。\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n        this.bufferState.destroy();\r\n        this._vertexBuffer.destroy();\r\n        this._indexBuffer.destroy();\r\n        this.bufferState = null;\r\n        this._vertexBuffer = null;\r\n        this._indexBuffer = null;\r\n        delete this._vertex;\r\n        delete this._index;\r\n    }\r\n}","import { Sprite } from \"../../../display/Sprite\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { BaseTexture } from \"../../../resource/BaseTexture\";\r\nimport { RenderTexture2D } from \"../../../resource/RenderTexture2D\";\r\nimport { Plane } from \"../../math/Plane\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { Material, MaterialRenderMode } from \"../../../resource/Material\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender } from \"../render/BaseRender\";\r\nimport { RenderElement } from \"../render/RenderElement\";\r\nimport { Scene3D } from \"../scene/Scene3D\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { UI3DGeometry } from \"./UI3DGeometry\";\r\nimport { Event } from \"../../../events/Event\";\r\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\r\nimport { Prefab } from \"../../../resource/HierarchyResource\";\r\nimport { InputManager } from \"../../../events/InputManager\";\r\nimport { NodeFlags } from \"../../../Const\";\r\nimport { ILaya } from \"../../../../ILaya\";\r\n\r\nimport { RenderContext3D } from \"../render/RenderContext3D\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { IRenderContext3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\n\r\n/**\r\n * @en UI3D class, used to create 3D UI components.\r\n * @zh UI3D类，用于创建3D UI组件。\r\n */\r\nexport class UI3D extends BaseRender {\r\n\r\n    /**\r\n     * @en The Sprite3D owner of this UI3D component.\r\n     * @zh 3D UI组件所属的3D节点。\r\n     */\r\n    declare owner: Sprite3D;\r\n\r\n    /**@intrtnal */\r\n    static TempMatrix = new Matrix4x4();\r\n    /**@internal */\r\n    static temp0: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static temp1: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static temp2: Vector3 = new Vector3();\r\n    /**@internal */\r\n    static DEBUG: boolean = false;\r\n    //功能,将2DUI显示到3D面板上 并检测射线\r\n    private _shellSprite: Sprite;\r\n    /**@internal UISprite*/\r\n    private _uisprite: Sprite;\r\n    /**@internal */\r\n    private _ui3DMat: Material;\r\n    /**@internal */\r\n    private _rendertexure2D: RenderTexture2D;\r\n    /**@internal */\r\n    private _geometry: UI3DGeometry;\r\n    /**@internal 2D是否需要重新绘制*/\r\n    private _needUpdate: boolean;\r\n    /**@internal */\r\n    private _uiPlane: Plane;\r\n    /**@internal */\r\n    private _size: Vector2;\r\n    /**@internal */\r\n    private _sizeChange: boolean = true;\r\n    /**@internal */\r\n    private _resolutionRate: number;\r\n    /**@internal */\r\n    private _view: boolean = true;\r\n    /**@internal */\r\n    private _bindPropertyName: string = \"u_AlbedoTexture\";\r\n    /**@internal */\r\n    private _hit: boolean = false;\r\n    /**@internal */\r\n    private _prefab: Prefab;\r\n    /**@internal 计算矩阵*/\r\n    private _matrix: Matrix4x4;\r\n    /**@internal 缩放 */\r\n    private _scale: Vector3;\r\n    /**@internal */\r\n    static _ray: Ray = new Ray(new Vector3(), new Vector3());\r\n\r\n    protected _worldParams: Vector4 = new Vector4();\r\n\r\n    /**\r\n     * @en UI nodes for 3D rendering\r\n     * @zh 3D渲染的UI节点\r\n     */\r\n    get sprite() {\r\n        return this._uisprite;\r\n    }\r\n\r\n    set sprite(value: Sprite) {\r\n        if (value == this._uisprite)\r\n            return;\r\n        this._uisprite = value;\r\n        this._shellSprite.removeChildren(0, this._shellSprite.numChildren - 1);\r\n        if (value)\r\n            this._shellSprite.addChild(value);\r\n        this._resizeRT();\r\n        this.boundsChange = true;\r\n    }\r\n\r\n    /**\r\n     * IDE\r\n     * @en The 3D rendering UI prefab.\r\n     * @zh 3D渲染的UI预制体。\r\n     */\r\n    get prefab() {\r\n        return this._prefab;\r\n    }\r\n\r\n    set prefab(value: Prefab) {\r\n        this._prefab = value;\r\n        if (value)\r\n            this.sprite = <Sprite>value.create();\r\n        else\r\n            this.sprite = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Mesh scale for 3D UI.\r\n     * @zh 3D UI的网格缩放。\r\n     */\r\n    get scale() {\r\n        return this._size;\r\n    }\r\n\r\n    set scale(value: Vector2) {\r\n        if (value.x <= 0 || value.y <= 0)\r\n            return;\r\n        value.cloneTo(this._size);\r\n        this._resizeRT();\r\n        this.boundsChange = true;\r\n        this._scale.setValue(value.x, value.y, 1);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The UI render mode.\r\n     * @zh UI渲染模式。\r\n     */\r\n    get renderMode(): MaterialRenderMode {\r\n        if (!this.sharedMaterial)\r\n            this.sharedMaterial = this._ui3DMat;\r\n        return this.sharedMaterial.materialRenderMode;\r\n    }\r\n\r\n    set renderMode(value: MaterialRenderMode) {\r\n        this.sharedMaterial.materialRenderMode = value;\r\n        this.boundsChange = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The UI culling mode.\r\n     * @zh UI剔除模式。\r\n     */\r\n    get cull(): number {\r\n        let mat = this.sharedMaterial;\r\n        if (!mat) {\r\n            mat = this._ui3DMat;\r\n        }\r\n        return mat.cull;\r\n    }\r\n\r\n    set cull(value: number) {\r\n        this.sharedMaterial && (this.sharedMaterial.cull = value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The resolution rate.\r\n     * @zh 分辨率比例。\r\n     */\r\n    get resolutionRate() {\r\n        return this._resolutionRate;\r\n    }\r\n\r\n    set resolutionRate(value: number) {\r\n        if (value <= 0)\r\n            return\r\n        if (this._resolutionRate == value)\r\n            return\r\n        this._resolutionRate = value;\r\n        this._resizeRT();\r\n    }\r\n\r\n    /**\r\n     * @en The UI3D component is billboard mode.\r\n     * @zh 面向相机模式\r\n     */\r\n    get billboard() {\r\n        return this._view;\r\n    }\r\n\r\n    set billboard(value: boolean) {\r\n        this._view = value;\r\n        this._sizeChange = true;\r\n        this.boundsChange = true;\r\n    }\r\n\r\n    /**\r\n     * @en Detect mouse events, disable optimization performance, enable to trigger mouse events.\r\n     * @zh 检测鼠标事件，关闭优化性能，开启可以触发鼠标事件\r\n     */\r\n    get enableHit() {\r\n        return this._hit;\r\n    }\r\n\r\n    set enableHit(value: boolean) {\r\n        this._hit = value;\r\n    }\r\n\r\n    /** @ignore \r\n     * @en constructor method, initialize 3D UI.\r\n     * @zh 构造方法，初始化3D UI。\r\n    */\r\n    constructor() {\r\n        super();\r\n        this._uiPlane = new Plane(new Vector3(), 0);\r\n        this._size = new Vector2(1, 1);\r\n        this._resolutionRate = 128;\r\n        this._shellSprite = new Sprite();\r\n        this._shellSprite.name = \"UI3D\";\r\n        this._shellSprite._setBit(NodeFlags.DISPLAYED_INSTAGE, true);\r\n        this._shellSprite._setBit(NodeFlags.ACTIVE_INHIERARCHY, true);\r\n        this._shellSprite._parent = ILaya.stage;\r\n        this._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n\r\n        this._matrix = new Matrix4x4();\r\n        this._scale = new Vector3(1.0, 1.0, 1.0);\r\n    }\r\n\r\n    private _creatDefaultMat() {\r\n        if (this._ui3DMat) return;\r\n        this._ui3DMat = new UnlitMaterial();\r\n        this._ui3DMat.materialRenderMode = MaterialRenderMode.RENDERMODE_OPAQUE;\r\n        this._ui3DMat.cull = RenderState.CULL_BACK;\r\n    }\r\n\r\n    /**\r\n     * @internal add renderelement\r\n     */\r\n    private _addRenderElement() {\r\n        var elements: RenderElement[] = this._renderElements;\r\n        if (!this.sharedMaterial) {\r\n            this._creatDefaultMat();\r\n            this.sharedMaterial = this._ui3DMat;\r\n        }\r\n        this._setMaterialTexture();\r\n        var material: Material = (<Material>this.sharedMaterial);\r\n        var element: RenderElement = new RenderElement();\r\n        element.setTransform((this.owner as Sprite3D)._transform);\r\n        element.render = this;\r\n        element.material = material;\r\n        element.renderSubShader = element.material.shader.getSubShaderAt(0);\r\n        this._geometry = new UI3DGeometry(this);\r\n        element.setGeometry(this._geometry);\r\n        elements.push(element);\r\n\r\n        this._setRenderElements();\r\n\r\n        this.geometryBounds = this._geometry.bounds;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _resizeRT() {\r\n        let width = this._size.x * this._resolutionRate;\r\n        let height = this._size.y * this._resolutionRate;\r\n\r\n        let invertY = !LayaGL.renderEngine._screenInvertY;\r\n\r\n        if (!this._rendertexure2D) {\r\n            this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\r\n            this._rendertexure2D._invertY = invertY;\r\n        } else {\r\n            if (this._rendertexure2D.width != width || this._rendertexure2D.height != height) {\r\n                this._rendertexure2D.destroy();\r\n                this._rendertexure2D = new RenderTexture2D(width, height, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None);\r\n                this._rendertexure2D._invertY = invertY;\r\n                this._setMaterialTexture();\r\n            }\r\n        }\r\n        this._submitRT();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    onPreRender(): void {\r\n        //this._geometry\r\n        if (this.billboard) {\r\n            this._sizeChange = false;\r\n            let camera = (this.owner.scene as Scene3D).cullInfoCamera;\r\n            Matrix4x4.createAffineTransformation(this._transform.position, camera.transform.rotation, this._scale, this._matrix);\r\n        } else if (this._sizeChange) {\r\n            this._sizeChange = false;\r\n            this._transform.worldMatrix.cloneTo(this._matrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 分析碰撞点\r\n    * @param hit \r\n    */\r\n    private _parseHit(ray: Ray) {\r\n        let _tempRay = UI3D._ray;\r\n        let u, v;\r\n        if (!this._uisprite || !LayaEnv.isPlaying) return null;\r\n        this._matrix.invert(UI3D.TempMatrix);\r\n        Vector3.transformCoordinate(ray.origin, UI3D.TempMatrix, _tempRay.origin);\r\n        Vector3.TransformNormal(ray.direction, UI3D.TempMatrix, _tempRay.direction);\r\n        _tempRay.direction.normalize();\r\n\r\n        let normalizeHitWidth = 0;\r\n        let normalizeHitHeight = 0;\r\n\r\n        let t = -_tempRay.origin.z / _tempRay.direction.z;\r\n        if (t < 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            u = _tempRay.origin.x + t * _tempRay.direction.x;\r\n            v = _tempRay.origin.y + t * _tempRay.direction.y;\r\n        }\r\n\r\n        normalizeHitWidth = u + 0.5;\r\n        normalizeHitHeight = v + 0.5;\r\n\r\n        let cx = normalizeHitWidth * this._rendertexure2D.width;\r\n        let cy = (1.0 - normalizeHitHeight) * this._rendertexure2D.height;\r\n\r\n        // drawCircle to test\r\n        // UI3D.DEBUG && this._uisprite && this._shellSprite.graphics.drawCircle(cx, cy, 10, \"#e53d30\");\r\n\r\n        let target = InputManager.inst.getSpriteUnderPoint(this._uisprite, cx, cy);\r\n        if (target)\r\n            return target;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /**\r\n     * @en Get the UI rendering texture.\r\n     * @zh 获得ui渲染图\r\n     */\r\n    getUITexture(): BaseTexture {\r\n        return this._rendertexure2D;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * get camera distance\r\n     * @param rayOri \r\n     * @returns \r\n     */\r\n    _getCameraDistance(rayOri: Vector3): number {\r\n        return Vector3.distance(rayOri, (this.owner as Sprite3D).transform.position);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: IRenderContext3D): void {\r\n        let shaderData = this._baseRenderNode.shaderData;\r\n\r\n        shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX, this._matrix);\r\n\r\n        let transform = this.owner.transform;\r\n        let worldParams = this._worldParams;\r\n        worldParams.x = transform.getFrontFaceValue();\r\n        shaderData.setVector(Sprite3D.WORLDINVERTFRONT, worldParams);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     * @param context \r\n     */\r\n    renderUpdate(context: RenderContext3D): void {\r\n        this._renderElements.forEach(element => {\r\n            let geometry = element._geometry;\r\n            element._renderElementOBJ.isRender = geometry._prepareRender(context);\r\n            geometry._updateRenderParams(context)\r\n        })\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 更新Sprite的RT\r\n     */\r\n    _submitRT() {\r\n        //判断是否需要重置\r\n        this._rendertexure2D && this._shellSprite.drawToTexture(this._rendertexure2D.width, this._rendertexure2D.height, 0, 0, this._rendertexure2D);\r\n        this._setMaterialTexture();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置材质纹理\r\n     */\r\n    _setMaterialTexture() {\r\n        if (this._rendertexure2D) {\r\n            this.sharedMaterial.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);\r\n            this.sharedMaterial.setTexture(this._bindPropertyName, this._rendertexure2D);\r\n        } else {\r\n            this.sharedMaterial.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * 检测UI事件\r\n     * @internal \r\n     * @param ray \r\n     * @returns \r\n     */\r\n    _checkUIPos(ray: Ray) {\r\n        if (!this.enableHit)\r\n            return false;\r\n        return this._parseHit(ray);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _calculateBoundingBox(): void {\r\n        var worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n        this._geometry.bounds._tranform(worldMat, this._bounds);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this._addRenderElement();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        (this.owner as Sprite3D).transform.off(Event.TRANSFORM_CHANGED, this, this._transByRotate);//如果为合并BaseRender,owner可能为空\r\n        (this.owner.scene as Scene3D)._UI3DManager.remove(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onEnable(): void {\r\n        super._onEnable();\r\n        (this.owner.scene as Scene3D)._UI3DManager.add(this);\r\n        (this.owner as Sprite3D).transform.on(Event.TRANSFORM_CHANGED, this, this._transByRotate);//如果为合并BaseRender,owner可能为空\r\n        this._transByRotate();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n        this._rendertexure2D && this._rendertexure2D.destroy();\r\n        this._uisprite && this._uisprite.destroy();\r\n        this._shellSprite && this._shellSprite.destroy();\r\n        this._ui3DMat && this._ui3DMat.destroy();\r\n        this._resolutionRate = null;\r\n        this._uiPlane = null;\r\n        this._size = null;\r\n        this._scale = null;\r\n        this._matrix = null;\r\n    }\r\n\r\n    private _transByRotate() {\r\n        if (!this.billboard) {\r\n            this._sizeChange = true;\r\n        }\r\n        this.boundsChange = true;\r\n    }\r\n}\r\n\r\n","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { KTXTextureInfo } from \"../../RenderEngine/KTXTextureInfo\";\r\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { TextureDimension } from \"../../RenderEngine/RenderEnum/TextureDimension\";\r\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { Resource } from \"../../resource/Resource\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { TextureCube } from \"../../resource/TextureCube\";\r\n\r\nvar internalResources: Record<string, TextureCube>;\r\n\r\n/**\r\n * @ignore\r\n * @en Used for loading cubemap textures.\r\n * @zh 用于加载立方体纹理资源。\r\n */\r\nexport class CubemapLoader implements IResourceLoader {\r\n    constructor() {\r\n        if (!internalResources) {\r\n            internalResources = {\r\n                \"WhiteTextureCube.ltc\": TextureCube.whiteTexture,\r\n                \"BlackTextureCube.ltc\": TextureCube.blackTexture,\r\n                \"GrayTextureCube.ltc\": TextureCube.grayTexture,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Load a cubemap texture resource.\r\n     * @param task The load task.\r\n     * @returns A Promise, when loaded successfully, it is resolves with the loaded texture or null if loading fails.\r\n     * @zh 加载立方体贴图资源。\r\n     * @param task 加载任务。 \r\n     * @returns 一个Promise, 加载成功时解析为加载的纹理，加载失败时为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        if (task.url.indexOf(\"internal/\") != -1) {\r\n            let tex = internalResources[Utils.getBaseName(task.url)];\r\n            if (tex)\r\n                return Promise.resolve(tex);\r\n        }\r\n\r\n        if (task.ext == \"ktx\" || task.ext == \"cubemap\") {\r\n            let url = task.url;\r\n            if (task.ext == \"cubemap\")\r\n                url = AssetDb.inst.getSubAssetURL(url, task.uuid, \"0\", \"ktx\");\r\n\r\n            return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let ktxInfo = KTXTextureInfo.getKTXTextureInfo(data);\r\n                if (ktxInfo.dimension != TextureDimension.Cube) {\r\n                    Loader.warn(\"ktxInfo.dimension != TextureDimension.Cube! \" + task.url);\r\n                    return null;\r\n                }\r\n\r\n                let tex = new TextureCube(ktxInfo.width, ktxInfo.format, ktxInfo.mipmapCount > 1, ktxInfo.sRGB);\r\n                tex.setKTXData(ktxInfo);\r\n\r\n                let obsoluteInst = task.obsoluteInst;\r\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                    tex = this.move(obsoluteInst, tex);\r\n\r\n                return tex;\r\n            });\r\n        }\r\n        else if (task.ext == \"ltcb\" || task.ext == \"ltcb.ls\") {\r\n            return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let byte: Byte = new Byte(data);\r\n                let version: string = byte.readUTFString();\r\n                if (version !== \"LAYATEXTURECUBE:0000\") {\r\n                    console.warn(`CubemapBinLoader: unknow version. ${version}`);\r\n                    return null;\r\n                }\r\n                let format: TextureFormat = <TextureFormat>byte.readUint8();\r\n                let mipCount: number = byte.getUint8();\r\n                let size: number = byte.readUint16();\r\n                let filterMode: FilterMode = <FilterMode>byte.getUint8();\r\n                let wrapModeU: WrapMode = <WrapMode>byte.getUint8();\r\n                let wrapModev: WrapMode = <WrapMode>byte.getUint8();\r\n                let anisoLevel: FilterMode = byte.getUint8();\r\n\r\n                let tex: TextureCube = new TextureCube(size, format, mipCount > 1 ? true : false);\r\n                tex.setPixelsData(null, false, false);\r\n                tex.filterMode = filterMode;\r\n                tex.wrapModeU = wrapModeU;\r\n                tex.wrapModeV = wrapModev;\r\n                tex.anisoLevel = anisoLevel;\r\n                let pos: number = byte.pos;\r\n                let mipSize: number = size;\r\n                for (let i = 0; i < mipCount; i++) {\r\n                    let uint8Arrays: Array<Uint8Array> = new Array<Uint8Array>(6);\r\n                    let mipPixelLength: number = mipSize * mipSize * tex._getFormatByteCount();\r\n                    for (let j = 0; j < 6; j++) {\r\n                        uint8Arrays[j] = new Uint8Array(data, pos, mipPixelLength);\r\n                        pos += mipPixelLength;\r\n                    }\r\n                    // todo  自动生成 mipmap 与 手动设置 mipmap\r\n                    tex.updateSubPixelsData(uint8Arrays, 0, 0, mipSize, mipSize, i, false, false, false);\r\n                    mipSize /= 2;\r\n                }\r\n\r\n                let obsoluteInst = task.obsoluteInst;\r\n                if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                    tex = this.move(obsoluteInst, tex);\r\n                return tex;\r\n            });\r\n        }\r\n        else {\r\n            return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n                if (!data)\r\n                    return null;\r\n\r\n                let ltcBasePath: string = URL.getPath(task.url);\r\n                let urls: any[] = [\r\n                    URL.join(ltcBasePath, data.front),\r\n                    URL.join(ltcBasePath, data.back),\r\n                    URL.join(ltcBasePath, data.left),\r\n                    URL.join(ltcBasePath, data.right),\r\n                    URL.join(ltcBasePath, data.up),\r\n                    URL.join(ltcBasePath, data.down)\r\n                ];\r\n\r\n                return Promise.all(urls.map(url => {\r\n                    if (url)\r\n                        return task.loader.fetch(url, \"image\", task.progress.createCallback(), task.options);\r\n                    else\r\n                        return Promise.resolve(null);\r\n                })).then(images => {\r\n                    let constructParams = task.options.constructParams;\r\n                    let size = constructParams ? constructParams[0] : ((images[0]?.width) ?? 1);\r\n                    let format = constructParams ? constructParams[1] : TextureFormat.R8G8B8A8;\r\n                    let mipmap = constructParams ? constructParams[3] : false;\r\n                    let srgb = constructParams ? constructParams[5] : true;\r\n                    let tex = new TextureCube(size, format, mipmap, srgb);\r\n                    tex.setImageData(images, false, false);\r\n\r\n                    let obsoluteInst = task.obsoluteInst;\r\n                    if (obsoluteInst && (obsoluteInst instanceof TextureCube))\r\n                        tex = this.move(obsoluteInst, tex);\r\n                    return tex;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private move(obsoluteInst: TextureCube, tex: TextureCube) {\r\n        obsoluteInst._texture = tex._texture;\r\n        (<any>obsoluteInst)._format = tex.format;\r\n        obsoluteInst.width = tex.width;\r\n        obsoluteInst.height = tex.height;\r\n        obsoluteInst.obsolute = false;\r\n        delete Resource._idResourcesMap[tex.id];\r\n        return obsoluteInst;\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"ltc\", \"ltcb\", \"ltcb.ls\", \"cubemap\"], CubemapLoader, Loader.TEXTURECUBE);","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { AnimationClip } from \"../animation/AnimationClip\";\r\n\r\n/**\r\n * @ignore\r\n * @en Used for loading and parsing 3D animation (.lani) resources.\r\n * @zh 用于加载并解析3D动画(.lani)资源。\r\n */\r\nclass AnimationClipLoader implements IResourceLoader {\r\n    /**\r\n     * @ignore\r\n     * @en Loads the resource for the given task.\r\n     * @param task The load task.\r\n     * @returns A promise that resolves with the loaded AnimationClip or null if loading fails.\r\n     * @zh 为给定的任务加载资源。\r\n     * @param task 加载任务。\r\n     * @returns 一个 Promise，解析为加载的 AnimationClip 对象，如果加载失败则返回 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        let url = AssetDb.inst.getSubAssetURL(task.url, task.uuid, null, \"lani\");\r\n        return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            return AnimationClip._parse(data);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lani\"], AnimationClipLoader, Loader.ANIMATIONCLIP);","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\r\nimport { Texture2DArray } from \"../../resource/Texture2DArray\";\r\nimport { URL } from \"../../net/URL\";\r\n\r\nclass Texture2DArrayLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n            let textures = data.textures;\r\n            if (textures) {\r\n                let urls: string[] = [];\r\n                let basePath: string = URL.getPath(task.url);\r\n                for (let i = textures.length - 1; i >= 0; i--) {\r\n                    urls.unshift(URL.join(basePath, textures[i]));\r\n                }\r\n                return Promise.all(urls.map(url => {\r\n                    if (url)\r\n                        return task.loader.fetch(url, \"image\", task.progress.createCallback(), task.options);\r\n                    else\r\n                        return Promise.resolve(null);\r\n                })).then(images => {\r\n                    let rt = new Texture2DArray(data.width, data.height, data.depth, data.format, data.mipmap, false, data.sRGB);\r\n                    rt.setImageData(images, data.premultiplyAlpha, data.invertY);\r\n                    return rt;\r\n                });\r\n            } else {\r\n                return new Texture2DArray(data.width, data.height, data.depth, data.format, data.mipmap, false, data.sRGB);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"tex2darray\"], Texture2DArrayLoader, Loader.TEXTURECUBE);","\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\"\r\n\r\n/**\r\n * @internal\r\n * @en `LoadModelV04` class is used for loading model data.\r\n * @zh `LoadModelV04` 类用于加载模型数据。\r\n */\r\nexport class LoadModelV04 {\r\n\r\n\t/**@internal */\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\t/**@internal */\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\t/**@internal */\r\n\tprivate static _strings: any[] = [];\r\n\t/**@internal */\r\n\tprivate static _readData: Byte;\r\n\t/**@internal */\r\n\tprivate static _version: string;\r\n\t/**@internal */\r\n\tprivate static _mesh: Mesh;\r\n\t/**@internal */\r\n\tprivate static _subMeshes: SubMesh[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n\tstatic parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tLoadModelV04._mesh = mesh;\r\n\t\tLoadModelV04._subMeshes = subMeshes;\r\n\t\tLoadModelV04._version = version;\r\n\t\tLoadModelV04._readData = readData;\r\n\t\tLoadModelV04.READ_DATA();\r\n\t\tLoadModelV04.READ_BLOCK();\r\n\t\tLoadModelV04.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = LoadModelV04._BLOCK.count; i < n; i++) {\r\n\t\t\tLoadModelV04._readData.pos = LoadModelV04._BLOCK.blockStarts[i];\r\n\t\t\tvar index: number = LoadModelV04._readData.getUint16();\r\n\t\t\tvar blockName: string = LoadModelV04._strings[index];\r\n\t\t\tvar fn: Function = (LoadModelV04 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t\tLoadModelV04._strings.length = 0;\r\n\t\tLoadModelV04._readData = null;\r\n\t\tLoadModelV04._version = null;\r\n\t\tLoadModelV04._mesh = null;\r\n\t\tLoadModelV04._subMeshes = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static _readString(): string {\r\n\t\treturn LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_DATA(): void {\r\n\t\tLoadModelV04._DATA.offset = LoadModelV04._readData.getUint32();\r\n\t\tLoadModelV04._DATA.size = LoadModelV04._readData.getUint32();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = LoadModelV04._BLOCK.count = LoadModelV04._readData.getUint16();\r\n\t\tvar blockStarts: any[] = LoadModelV04._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = LoadModelV04._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(LoadModelV04._readData.getUint32());\r\n\t\t\tblockLengths.push(LoadModelV04._readData.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = LoadModelV04._readData.getUint32();\r\n\t\tvar count: number = LoadModelV04._readData.getUint16();\r\n\t\tvar prePos: number = LoadModelV04._readData.pos;\r\n\t\tLoadModelV04._readData.pos = offset + LoadModelV04._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tLoadModelV04._strings[i] = LoadModelV04._readData.readUTFString();\r\n\r\n\t\tLoadModelV04._readData.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_MESH(): boolean {\r\n\t\tvar name: string = LoadModelV04._readString();\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar i: number;\r\n\r\n\t\tvar memorySize: number = 0;\r\n\t\tvar vertexBufferCount: number = LoadModelV04._readData.getInt16();\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tfor (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n\t\t\tvar vbStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbLength: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar vbArrayBuffer: ArrayBuffer = arrayBuffer.slice(vbStart, vbStart + vbLength);\r\n\t\t\tvar vbDatas: Float32Array = new Float32Array(vbArrayBuffer);\r\n\t\t\tvar bufferAttribute: string = LoadModelV04._readString();\r\n\t\t\tvar vertexDeclaration: VertexDeclaration;\r\n\t\t\tswitch (LoadModelV04._version) {\r\n\t\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\t\tvertexDeclaration = VertexMesh.getVertexDeclaration(bufferAttribute, false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"LoadModelV03: unknown version.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (!vertexDeclaration)\r\n\t\t\t\tthrow new Error(\"LoadModelV03: unknown vertexDeclaration.\");\r\n\r\n\t\t\tvar vertexBuffer: VertexBuffer3D = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vbDatas.length * 4, BufferUsage.Static, true);\r\n\t\t\tvertexBuffer.vertexDeclaration = vertexDeclaration;\r\n\t\t\tvertexBuffer.setData(vbDatas.buffer);\r\n\t\t\tLoadModelV04._mesh._vertexBuffer = vertexBuffer;\r\n\t\t\tLoadModelV04._mesh._vertexCount += vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n\t\t\tmemorySize += vbDatas.length * 4;\r\n\t\t}\r\n\r\n\t\tvar ibStart: number = offset + LoadModelV04._readData.getUint32();\r\n\t\tvar ibLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibDatas: Uint16Array = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\t\tvar indexBuffer: IndexBuffer3D = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, ibLength / 2, BufferUsage.Static, true);\r\n\t\tindexBuffer.setData(ibDatas);\r\n\t\tLoadModelV04._mesh._indexBuffer = indexBuffer;\r\n\t\tmemorySize += indexBuffer.indexCount * 2;\r\n\r\n\t\tLoadModelV04._mesh._setBuffer(LoadModelV04._mesh._vertexBuffer, indexBuffer);\r\n\r\n\t\tLoadModelV04._mesh._setCPUMemory(memorySize);\r\n\t\tLoadModelV04._mesh._setGPUMemory(memorySize);\r\n\r\n\t\tvar boneNames: string[] = LoadModelV04._mesh._boneNames = [];\r\n\t\tvar boneCount: number = LoadModelV04._readData.getUint16();\r\n\t\tboneNames.length = boneCount;\r\n\t\tfor (i = 0; i < boneCount; i++)\r\n\t\t\tboneNames[i] = LoadModelV04._strings[LoadModelV04._readData.getUint16()];\r\n\r\n\t\tLoadModelV04._readData.pos += 8;//TODO:优化\r\n\r\n\t\tvar bindPoseDataStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDataLength: number = LoadModelV04._readData.getUint32();\r\n\t\tvar bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n\t\tvar bindPoseFloatCount: number = bindPoseDatas.length;\r\n\t\tvar bindPoseBuffer: ArrayBuffer = LoadModelV04._mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n\t\tLoadModelV04._mesh._inverseBindPoses = [];\r\n\t\tif (bindPoseFloatCount != 0)\r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n\t\telse\r\n\t\t\tLoadModelV04._mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n\t\t//LoadModelV04._mesh._setInstanceBuffer(LoadModelV04._mesh._instanceBufferStateType);\r\n\t\tfor (i = 0; i < bindPoseFloatCount; i += 16) {\r\n\t\t\tvar inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n\t\t\tLoadModelV04._mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate static READ_SUBMESH(): boolean {\r\n\t\tvar arrayBuffer: ArrayBuffer = LoadModelV04._readData.__getBuffer();\r\n\t\tvar subMesh: SubMesh = new SubMesh(LoadModelV04._mesh);\r\n\r\n\t\tLoadModelV04._readData.getInt16();//TODO:vbIndex\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbStart\r\n\t\tLoadModelV04._readData.getUint32();//TODO:vbLength\r\n\r\n\t\tvar ibStart: number = LoadModelV04._readData.getUint32();\r\n\t\tvar ibCount: number = LoadModelV04._readData.getUint32();\r\n\t\tvar indexBuffer: IndexBuffer3D = LoadModelV04._mesh._indexBuffer;\r\n\t\tsubMesh._indexBuffer = indexBuffer;\r\n\t\tsubMesh._setIndexRange(ibStart, ibCount);\r\n\t\tvar vertexBuffer: VertexBuffer3D = LoadModelV04._mesh._vertexBuffer;\r\n\t\tsubMesh._vertexBuffer = vertexBuffer;\r\n\r\n\t\tvar offset: number = LoadModelV04._DATA.offset;\r\n\t\tvar subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n\t\tvar subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n\t\tvar boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n\t\tvar drawCount: number = LoadModelV04._readData.getUint16();\r\n\t\tsubIndexBufferStart.length = drawCount;\r\n\t\tsubIndexBufferCount.length = drawCount;\r\n\t\tboneIndicesList.length = drawCount;\r\n\r\n\t\tvar skinnedCache: skinnedMatrixCache[] = LoadModelV04._mesh._skinnedMatrixCaches;\r\n\t\tvar subMeshIndex: number = LoadModelV04._subMeshes.length;\r\n\t\tskinnedCache.length = LoadModelV04._mesh._inverseBindPoses.length;\r\n\t\tfor (var i: number = 0; i < drawCount; i++) {\r\n\t\t\tsubIndexBufferStart[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tsubIndexBufferCount[i] = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicofs: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneDicCount: number = LoadModelV04._readData.getUint32();\r\n\t\t\tvar boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n\t\t\tvar boneIndexCount: number = boneIndices.length;\r\n\t\t\tfor (var j: number = 0; j < boneIndexCount; j++) {\r\n\t\t\t\tvar index: number = boneIndices[j];\r\n\t\t\t\tskinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n\t\t\t}\r\n\t\t}\r\n\t\tLoadModelV04._subMeshes.push(subMesh);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n","\r\n/**\r\n * @en Represents a morph target in 3D modeling\r\n * @zh 表示3D建模中的变形目标\r\n */\r\nexport class MorphTarget {\r\n\r\n    /** @internal */\r\n    _index: number;\r\n\r\n    /**\r\n     * @en The name of the morph target\r\n     * @zh 变形目标的名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * @en The full weight of the morph target\r\n     * @zh 变形目标的完整权重\r\n     */\r\n    fullWeight: number;\r\n\r\n    /**\r\n     * @en The data of the morph target\r\n     * @zh 变形目标的数据\r\n     */\r\n    data: Float32Array;\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        this.fullWeight = 1;\r\n    }\r\n}\r\n\r\n// todo class name\r\n/**\r\n * @en Represents a channel of morph targets\r\n * @zh 表示变形目标的通道\r\n */\r\nexport class MorphTargetChannel {\r\n\r\n    /** @internal */\r\n    _index: number;\r\n\r\n    /**\r\n     * @en The name of the morph target channel\r\n     * @zh 变形目标通道的名称\r\n     */\r\n    name: string;\r\n\r\n    /** \r\n     * @en The list of morph targets in this channel. \r\n     * @zh 此通道中的变形目标列表。\r\n     */\r\n    targets: Array<MorphTarget>;\r\n\r\n    /**\r\n     * @en The count of targets in this channel\r\n     * @zh 此通道中目标的数量\r\n     */\r\n    targetCount: number = 0;\r\n\r\n    constructor() {\r\n        this.targets = new Array<MorphTarget>();\r\n    }\r\n\r\n    /**\r\n     * @en Get a target by its index\r\n     * @param index The index of the target\r\n     * @returns The MorphTarget at the specified index\r\n     * @zh 通过索引获取目标\r\n     * @param index 目标的索引\r\n     * @returns 指定索引处的MorphTarget\r\n     */\r\n    getTargetByIndex(index: number) {\r\n        return this.targets[index];\r\n    }\r\n\r\n    /**\r\n     * @en Add a target to this channel\r\n     * @param target The MorphTarget to add\r\n     * @zh 向此通道添加目标\r\n     * @param target 要添加的MorphTarget\r\n     */\r\n    addTarget(target: MorphTarget) {\r\n        this.targetCount++;\r\n        this.targets.push(target);\r\n        this.targets.sort((a, b) => {\r\n            return a.fullWeight - b.fullWeight;\r\n        })\r\n    }\r\n\r\n}","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { FilterMode } from \"../../../RenderEngine/RenderEnum/FilterMode\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { RenderParams } from \"../../../RenderEngine/RenderEnum/RenderParams\";\r\nimport { TextureFormat } from \"../../../RenderEngine/RenderEnum/TextureFormat\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { Texture2DArray } from \"../../../resource/Texture2DArray\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { MorphTarget, MorphTargetChannel } from \"./MorphTarget\";\r\n\r\n/**\r\n * @en Morph target data.\r\n * @zh 变形目标数据。\r\n */\r\nexport class MorphTargetData {\r\n\r\n    // keep origin insert order\r\n\r\n    private targets: Array<MorphTarget>;\r\n\r\n    private channels: Array<MorphTargetChannel>;\r\n\r\n    /**\r\n     * @en The count of vertices in the morph target data.\r\n     * @zh 变形目标数据中的顶点计数。\r\n     */\r\n    vertexCount: number;\r\n\r\n    /**\r\n     * @en Removed, replaced by getting it from the VertexDeclaration.\r\n     * @zh 移除，改为从 VertexDeclaration 中获取\r\n     */\r\n    elementCount: number;\r\n\r\n    /**\r\n     * @internal\r\n     * @en The attribute offset vector.\r\n     * @zh 属性偏移向量。\r\n     */\r\n    attributeOffset: Vector4;\r\n    /**\r\n     * @internal\r\n     * @en The parameters vector.\r\n     * @zh 参数向量。\r\n     */\r\n    params: Vector4;\r\n\r\n    /**\r\n     * @internal\r\n     * @en The target texture for morph targets, used internally.\r\n     * @zh 用于变形目标的内部目标纹理。\r\n     */\r\n    targetTexture: Texture2DArray;\r\n\r\n    /**\r\n     * @en The vertex declaration associated with the morph target data.\r\n     * @zh 与变形目标数据关联的顶点声明。\r\n     */\r\n    vertexDec: VertexDeclaration;\r\n\r\n    /**\r\n     * @en The bounding box.\r\n     * @zh 包围盒\r\n     */\r\n    bounds: Bounds;\r\n\r\n    /** @ignore */\r\n    constructor() {\r\n        this.targets = new Array();\r\n        this.channels = new Array();\r\n        this.bounds = new Bounds();\r\n        this.params = new Vector4();\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Adds a morph target channel to the data.\r\n     * @param channel The morph target channel to add.\r\n     * @zh 向数据添加一个变形目标通道。\r\n     * @param channel 要添加的变形目标通道。\r\n     */\r\n    addMorphChannel(channel: MorphTargetChannel) {\r\n\r\n        channel._index = this.channels.length;\r\n        this.channels.push(channel);\r\n\r\n        channel.targets.forEach(target => {\r\n            target._index = this.targets.length;\r\n            this.targets.push(target);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves a morph target channel by its name.\r\n     * @param name The name of the morph target channel to retrieve.\r\n     * @returns The morph target channel with the specified name.\r\n     * @zh 通过名称检索变形目标通道。\r\n     * @param name 要检索的变形目标通道的名称。\r\n     * @returns 具有指定名称的变形目标通道。\r\n     */\r\n    getMorphChannel(name: string): MorphTargetChannel {\r\n        // return this.targets.find(value => value.name == name);\r\n        return this.channels.find(value => value.name == name);\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves a morph target channel by its index.\r\n     * @param index The index of the morph target channel to retrieve.\r\n     * @returns The morph target channel at the specified index.\r\n     * @zh 通过索引检索变形目标通道。\r\n     * @param index 要检索的变形目标通道的索引。\r\n     * @returns 在指定索引处的变形目标通道。\r\n     */\r\n    getMorphChannelbyIndex(index: number) {\r\n        return this.channels[index];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The count of morph targets.\r\n     * @zh 变形目标的计数。\r\n     */\r\n    get targetCount(): number {\r\n        return this.targets.length;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en The count of morph target channels.\r\n     * @zh 变形目标通道的计数。\r\n     */\r\n    get channelCount(): number {\r\n        return this.channels.length;\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the data for the morph targets.\r\n     * @zh 初始化变形目标的数据。\r\n     */\r\n    initData() {\r\n        if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n            let targetNum = this.targets.length;\r\n\r\n            let maxTexSize = LayaGL.renderEngine.getParams(RenderParams.MAX_Texture_Size);\r\n\r\n            let vertexCount = this.vertexCount;\r\n\r\n            let vertexDec = this.vertexDec;\r\n\r\n            let morphStride = vertexDec.vertexStride / 4;\r\n\r\n            let elementCount = vertexDec.vertexElementCount;\r\n            this.elementCount = elementCount;\r\n\r\n            let texHeight = Math.floor(elementCount * vertexCount / maxTexSize) + 1;\r\n\r\n            let texelStride = 4;\r\n            this.targetTexture = new Texture2DArray(maxTexSize, texHeight, targetNum, TextureFormat.R32G32B32A32, false, false, false);\r\n            this.targetTexture.filterMode = FilterMode.Point;\r\n            this.targetTexture.anisoLevel = 1;\r\n            this.targetTexture.lock = true;\r\n\r\n            let data = new Float32Array(maxTexSize * texHeight * targetNum * texelStride).fill(0);\r\n\r\n            /**\r\n             * x: position offset\r\n             * y: normal offset\r\n             * z: tangent offset\r\n             */\r\n            let attributeOffset = this.attributeOffset = new Vector4(0, 0, 0, 0);\r\n            attributeOffset.x = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0));\r\n            attributeOffset.y = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0));\r\n            attributeOffset.z = vertexDec._vertexElements.indexOf(vertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0));\r\n\r\n            let targetStride = maxTexSize * texHeight;\r\n\r\n            for (let targetIndex = 0; targetIndex < targetNum; targetIndex++) {\r\n                let target = this.targets[targetIndex];\r\n                for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++) {\r\n                    let dataOffset = (targetIndex * targetStride + vertexIndex * elementCount) * texelStride;\r\n                    vertexDec._vertexElements.forEach((element, elementIndex) => {\r\n                        let pixelOffset = dataOffset + elementIndex * 4;\r\n\r\n                        let elementOffset = element.offset / 4;\r\n                        let targetDataOffset = vertexIndex * morphStride + elementOffset;\r\n                        switch (element.elementUsage) {\r\n                            case VertexMesh.MESH_POSITION0:\r\n                            case VertexMesh.MESH_NORMAL0:\r\n                                data[pixelOffset] = target.data[targetDataOffset];\r\n                                data[pixelOffset + 1] = target.data[targetDataOffset + 1];\r\n                                data[pixelOffset + 2] = target.data[targetDataOffset + 2];\r\n                                break;\r\n                            case VertexMesh.MESH_TANGENT0:\r\n                                data[pixelOffset] = target.data[targetDataOffset];\r\n                                data[pixelOffset + 1] = target.data[targetDataOffset + 1];\r\n                                data[pixelOffset + 2] = target.data[targetDataOffset + 2];\r\n                                data[pixelOffset + 3] = target.data[targetDataOffset + 3];\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.targetTexture.setPixelsData(data, false, false);\r\n\r\n            this.params.setValue(this.targetTexture.width, this.targetTexture.height, this.elementCount, this.channelCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Cleans up and destroys the resources associated with the morph target data.\r\n     * @zh 清理并销毁与变形目标数据关联的资源。\r\n     */\r\n    destroy() {\r\n        if (this.targetTexture) {\r\n            this.targetTexture.lock = false;\r\n            this.targetTexture.destroy();\r\n            this.targetTexture = null;\r\n        }\r\n\r\n        // todo\r\n        this.targets = null;\r\n        this.channels = null;\r\n    }\r\n\r\n    /**\r\n     * @en Clone the morph target data.\r\n     * @returns A cloned instance of the morph target data.\r\n     * @zh 克隆变形目标数据。\r\n     * @returns 变形目标数据的克隆实例。\r\n     */\r\n    clone(): MorphTargetData {\r\n        let res = new MorphTargetData();\r\n\r\n        res.bounds.setMin(this.bounds.getMin());\r\n        res.bounds.setMax(this.bounds.getMax());\r\n\r\n        res.vertexCount = this.vertexCount;\r\n        res.vertexDec = this.vertexDec;\r\n\r\n        let channelCount = this.channelCount;\r\n        for (let index = 0; index < channelCount; index++) {\r\n            let channel = this.getMorphChannelbyIndex(index);\r\n\r\n            let newChannel = new MorphTargetChannel();\r\n            newChannel.name = channel.name;\r\n\r\n            let targetCount = channel.targetCount;\r\n            for (let targetIndex = 0; targetIndex < targetCount; targetIndex++) {\r\n                let target = channel.getTargetByIndex(targetIndex);\r\n\r\n                let newTarget = new MorphTarget();\r\n                newTarget.name = target.name;\r\n                newTarget.fullWeight = target.fullWeight;\r\n                newTarget.data = new Float32Array(target.data);\r\n\r\n                newChannel.addTarget(newTarget);\r\n            }\r\n\r\n            res.addMorphChannel(newChannel);\r\n        }\r\n\r\n        res.initData();\r\n        return res;\r\n    }\r\n\r\n}","import { Matrix4x4 } from \"../../maths/Matrix4x4\"\r\nimport { Vector3 } from \"../../maths/Vector3\"\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\"\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\"\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\"\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\"\r\nimport { Byte } from \"../../utils/Byte\"\r\nimport { HalfFloatUtils } from \"../../utils/HalfFloatUtils\"\r\nimport { IndexBuffer3D } from \"../graphics/IndexBuffer3D\"\r\nimport { VertexBuffer3D } from \"../graphics/VertexBuffer3D\"\r\nimport { Laya3DRender } from \"../RenderObjs/Laya3DRender\"\r\nimport { Mesh, skinnedMatrixCache } from \"../resource/models/Mesh\"\r\nimport { MorphTarget, MorphTargetChannel } from \"../resource/models/MorphTarget\"\r\nimport { MorphTargetData } from \"../resource/models/MorphTargetData\"\r\nimport { SubMesh } from \"../resource/models/SubMesh\"\r\n\r\n\r\n/**\r\n * @internal\r\n * @en `LoadModelV05` class is used for loading model data.\r\n * @zh `LoadModelV05` 类用于加载模型数据。\r\n */\r\nexport class LoadModelV05 {\r\n\r\n    /**@internal */\r\n    private static _BLOCK: any = { count: 0 };\r\n    /**@internal */\r\n    private static _DATA = { offset: 0, size: 0 };\r\n\r\n    /**@internal */\r\n    private static _strings: any[] = [];\r\n    /**@internal */\r\n    private static _readData: Byte;\r\n    /**@internal */\r\n    private static _version: string;\r\n    /**@internal */\r\n    private static _mesh: Mesh;\r\n    /**@internal */\r\n    private static _subMeshes: SubMesh[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static parse(readData: Byte, version: string, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n        LoadModelV05._mesh = mesh;\r\n        LoadModelV05._subMeshes = subMeshes;\r\n        LoadModelV05._version = version;\r\n        LoadModelV05._readData = readData;\r\n        LoadModelV05.READ_DATA();\r\n        LoadModelV05.READ_BLOCK();\r\n        LoadModelV05.READ_STRINGS();\r\n        for (var i: number = 0, n: number = LoadModelV05._BLOCK.count; i < n; i++) {\r\n            LoadModelV05._readData.pos = LoadModelV05._BLOCK.blockStarts[i];\r\n            var index: number = LoadModelV05._readData.getUint16();\r\n            var blockName: string = LoadModelV05._strings[index];\r\n            var fn: Function = (LoadModelV05 as any)[\"READ_\" + blockName];\r\n            if (fn == null)\r\n                console.warn(\"model file err,no this function:\" + index + \" \" + blockName);\r\n            else\r\n                fn.call(null);\r\n        }\r\n        LoadModelV05._strings.length = 0;\r\n        LoadModelV05._readData = null;\r\n        LoadModelV05._version = null;\r\n        LoadModelV05._mesh = null;\r\n        LoadModelV05._subMeshes = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _readString(): string {\r\n        return LoadModelV05._strings[LoadModelV05._readData.getUint16()];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_DATA(): void {\r\n        LoadModelV05._DATA.offset = LoadModelV05._readData.getUint32();\r\n        LoadModelV05._DATA.size = LoadModelV05._readData.getUint32();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_BLOCK(): void {\r\n        var count: number = LoadModelV05._BLOCK.count = LoadModelV05._readData.getUint16();\r\n        var blockStarts: any[] = LoadModelV05._BLOCK.blockStarts = [];\r\n        var blockLengths: any[] = LoadModelV05._BLOCK.blockLengths = [];\r\n        for (var i: number = 0; i < count; i++) {\r\n            blockStarts.push(LoadModelV05._readData.getUint32());\r\n            blockLengths.push(LoadModelV05._readData.getUint32());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_STRINGS(): void {\r\n        var offset: number = LoadModelV05._readData.getUint32();\r\n        var count: number = LoadModelV05._readData.getUint16();\r\n        var prePos: number = LoadModelV05._readData.pos;\r\n        LoadModelV05._readData.pos = offset + LoadModelV05._DATA.offset;\r\n\r\n        for (var i: number = 0; i < count; i++)\r\n            LoadModelV05._strings[i] = LoadModelV05._readData.readUTFString();\r\n\r\n        LoadModelV05._readData.pos = prePos;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_MESH(): boolean {\r\n        var i: number;\r\n        var memorySize: number = 0;\r\n        var name: string = LoadModelV05._readString();\r\n        var reader: Byte = LoadModelV05._readData;\r\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\r\n\r\n\r\n        var vertexBufferCount: number = reader.getInt16();\r\n        var offset: number = LoadModelV05._DATA.offset;\r\n        for (i = 0; i < vertexBufferCount; i++) {//TODO:始终为1\r\n            var vbStart: number = offset + reader.getUint32();\r\n            var vertexCount: number = reader.getUint32();\r\n            var vertexFlag: string = LoadModelV05._readString();\r\n            var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(vertexFlag, false);\r\n\r\n            var vertexStride: number = vertexDeclaration.vertexStride;\r\n            var vertexData: ArrayBuffer;\r\n            var floatData: Float32Array;\r\n            var uint8Data: Uint8Array;\r\n\r\n            var subVertexFlags: any[] = vertexFlag.split(\",\");\r\n            var subVertexCount: number = subVertexFlags.length;\r\n            var mesh: Mesh = LoadModelV05._mesh;\r\n\r\n            switch (LoadModelV05._version) {\r\n                case \"LAYAMODEL:05\":\r\n                case \"LAYAMODEL:0501\":\r\n                case \"LAYAMODEL:0502\":\r\n                    vertexData = arrayBuffer.slice(vbStart, vbStart + vertexCount * vertexStride);\r\n                    floatData = new Float32Array(vertexData);\r\n                    uint8Data = new Uint8Array(vertexData);\r\n                    break;\r\n                case \"LAYAMODEL:COMPRESSION_05\":\r\n                case \"LAYAMODEL:COMPRESSION_0501\":\r\n                    vertexData = new ArrayBuffer(vertexStride * vertexCount);\r\n                    floatData = new Float32Array(vertexData);\r\n                    uint8Data = new Uint8Array(vertexData);\r\n                    var lastPosition: number = reader.pos;\r\n                    reader.pos = vbStart;\r\n\r\n                    for (var j: number = 0; j < vertexCount; j++) {\r\n                        var subOffset: number;\r\n                        var verOffset: number = j * vertexStride;\r\n                        for (var k: number = 0; k < subVertexCount; k++) {\r\n                            switch (subVertexFlags[k]) {\r\n                                case \"POSITION\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 2] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 12;\r\n                                    break;\r\n                                case \"NORMAL\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n                                    verOffset += 12;\r\n                                    break;\r\n                                case \"COLOR\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                                case \"UV\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 8;\r\n                                    break;\r\n                                case \"UV1\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    floatData[subOffset + 1] = HalfFloatUtils.convertToNumber(reader.getUint16());\r\n                                    verOffset += 8;\r\n                                    break;\r\n                                case \"BLENDWEIGHT\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 255;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 255;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                                case \"BLENDINDICES\":\r\n                                    uint8Data[verOffset] = reader.getUint8();\r\n                                    uint8Data[verOffset + 1] = reader.getUint8();\r\n                                    uint8Data[verOffset + 2] = reader.getUint8();\r\n                                    uint8Data[verOffset + 3] = reader.getUint8();\r\n                                    verOffset += 4;\r\n                                    break;\r\n                                case \"TANGENT\":\r\n                                    subOffset = verOffset / 4;\r\n                                    floatData[subOffset] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 1] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 2] = reader.getUint8() / 127.5 - 1;\r\n                                    floatData[subOffset + 3] = reader.getUint8() / 127.5 - 1;\r\n                                    verOffset += 16;\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    reader.pos = lastPosition;\r\n                    break;\r\n            }\r\n\r\n            var vertexBuffer: VertexBuffer3D = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, true);\r\n            vertexBuffer.vertexDeclaration = vertexDeclaration;\r\n            vertexBuffer.setData(vertexData);\r\n            var vertexCount: number = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\r\n            //TDDO:是否加标记\r\n            if (vertexCount > 65535)\r\n                mesh._indexFormat = IndexFormat.UInt32;\r\n            else\r\n                mesh._indexFormat = IndexFormat.UInt16;\r\n            mesh._vertexBuffer = vertexBuffer;\r\n            mesh._vertexCount += vertexCount;\r\n            memorySize += floatData.length * 4;\r\n        }\r\n\r\n        var ibStart: number = offset + reader.getUint32();\r\n        var ibLength: number = reader.getUint32();\r\n\r\n        var ibDatas: Uint16Array | Uint32Array;\r\n        if (mesh.indexFormat == IndexFormat.UInt32)\r\n            ibDatas = new Uint32Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n        else\r\n            ibDatas = new Uint16Array(arrayBuffer.slice(ibStart, ibStart + ibLength));\r\n\r\n        var indexBuffer: IndexBuffer3D = Laya3DRender.renderOBJCreate.createIndexBuffer3D(mesh.indexFormat, ibDatas.length, BufferUsage.Static, true);\r\n        indexBuffer.setData(ibDatas);\r\n        mesh._indexBuffer = indexBuffer;\r\n\r\n        mesh._setBuffer(mesh._vertexBuffer, indexBuffer);\r\n\r\n        memorySize += indexBuffer.indexCount * 2;\r\n        mesh._setCPUMemory(memorySize);\r\n        mesh._setGPUMemory(memorySize);\r\n\r\n        if (LoadModelV05._version == \"LAYAMODEL:0501\" || LoadModelV05._version == \"LAYAMODEL:COMPRESSION_0501\" || LoadModelV05._version == \"LAYAMODEL:0502\") {\r\n            var bounds = mesh.bounds;\r\n            var min: Vector3 = bounds.getMin();\r\n            var max: Vector3 = bounds.getMax();\r\n            min.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n            max.setValue(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n            bounds.setMin(min);\r\n            bounds.setMax(max);\r\n            mesh.bounds = bounds;\r\n        }\r\n\r\n        var boneNames: string[] = mesh._boneNames = [];\r\n        var boneCount: number = reader.getUint16();\r\n        boneNames.length = boneCount;\r\n        for (i = 0; i < boneCount; i++)\r\n            boneNames[i] = LoadModelV05._strings[reader.getUint16()];//[兼容性]\r\n\r\n        var bindPoseDataStart: number = reader.getUint32();\r\n        var bindPoseDataLength: number = reader.getUint32();\r\n        var bindPoseDatas: Float32Array = new Float32Array(arrayBuffer.slice(offset + bindPoseDataStart, offset + bindPoseDataStart + bindPoseDataLength));\r\n        var bindPoseFloatCount: number = bindPoseDatas.length;\r\n        var bindPoseBuffer: ArrayBuffer = mesh._inverseBindPosesBuffer = new ArrayBuffer(bindPoseFloatCount * 4);//TODO:[NATIVE]临时\r\n        mesh._inverseBindPoses = [];\r\n        if (bindPoseFloatCount != 0)\r\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;\r\n        else\r\n            mesh._instanceBufferStateType = Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;\r\n        //mesh._setInstanceBuffer(mesh._instanceBufferStateType);\r\n        for (i = 0; i < bindPoseFloatCount; i += 16) {\r\n            var inverseGlobalBindPose: Matrix4x4 = new Matrix4x4(bindPoseDatas[i + 0], bindPoseDatas[i + 1], bindPoseDatas[i + 2], bindPoseDatas[i + 3], bindPoseDatas[i + 4], bindPoseDatas[i + 5], bindPoseDatas[i + 6], bindPoseDatas[i + 7], bindPoseDatas[i + 8], bindPoseDatas[i + 9], bindPoseDatas[i + 10], bindPoseDatas[i + 11], bindPoseDatas[i + 12], bindPoseDatas[i + 13], bindPoseDatas[i + 14], bindPoseDatas[i + 15], new Float32Array(bindPoseBuffer, i * 4, 16));\r\n            mesh._inverseBindPoses[i / 16] = inverseGlobalBindPose;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static READ_SUBMESH(): boolean {\r\n        var reader: Byte = LoadModelV05._readData;\r\n        var arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n        var subMesh: SubMesh = new SubMesh(LoadModelV05._mesh);\r\n\r\n        reader.getInt16();//TODO:vbIndex\r\n        var ibStart: number = reader.getUint32();\r\n        var ibCount: number = reader.getUint32();\r\n        var indexBuffer: IndexBuffer3D = LoadModelV05._mesh._indexBuffer;\r\n        subMesh._indexBuffer = indexBuffer;\r\n        subMesh._setIndexRange(ibStart, ibCount);\r\n        var vertexBuffer: VertexBuffer3D = LoadModelV05._mesh._vertexBuffer;\r\n        subMesh._vertexBuffer = vertexBuffer;\r\n\r\n        var offset: number = LoadModelV05._DATA.offset;\r\n        var subIndexBufferStart: number[] = subMesh._subIndexBufferStart;\r\n        var subIndexBufferCount: number[] = subMesh._subIndexBufferCount;\r\n        var boneIndicesList: Uint16Array[] = subMesh._boneIndicesList;\r\n        var drawCount: number = reader.getUint16();\r\n        subIndexBufferStart.length = drawCount;\r\n        subIndexBufferCount.length = drawCount;\r\n        boneIndicesList.length = drawCount;\r\n\r\n        var skinnedCache: skinnedMatrixCache[] = LoadModelV05._mesh._skinnedMatrixCaches;\r\n        var subMeshIndex: number = LoadModelV05._subMeshes.length;\r\n        skinnedCache.length = LoadModelV05._mesh._inverseBindPoses.length;\r\n        for (var i: number = 0; i < drawCount; i++) {\r\n            subIndexBufferStart[i] = reader.getUint32();\r\n            subIndexBufferCount[i] = reader.getUint32();\r\n            var boneDicofs: number = reader.getUint32();\r\n            var boneDicCount: number = reader.getUint32();\r\n            var boneIndices: Uint16Array = boneIndicesList[i] = new Uint16Array(arrayBuffer.slice(offset + boneDicofs, offset + boneDicofs + boneDicCount));\r\n            for (var j: number = 0, m: number = boneIndices.length; j < m; j++) {\r\n                var index: number = boneIndices[j];\r\n                skinnedCache[index] || (skinnedCache[index] = new skinnedMatrixCache(subMeshIndex, i, j));\r\n            }\r\n        }\r\n        LoadModelV05._subMeshes.push(subMesh);\r\n        return true;\r\n    }\r\n\r\n    private static READ_MORPH(): boolean {\r\n\r\n        let reader: Byte = LoadModelV05._readData;\r\n        let arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n        let offset = LoadModelV05._DATA.offset;\r\n        let mesh = LoadModelV05._mesh;\r\n\r\n        let morphData = mesh.morphTargetData = new MorphTargetData();\r\n\r\n        let morphVertexDecStr = LoadModelV05._strings[reader.getUint16()];\r\n\r\n        morphData.vertexDec = VertexMesh.getVertexDeclaration(morphVertexDecStr);\r\n\r\n        let bounds = morphData.bounds;\r\n        let min = bounds.getMin();\r\n        let max = bounds.getMax();\r\n        min.set(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n        max.set(reader.getFloat32(), reader.getFloat32(), reader.getFloat32());\r\n        bounds.setMin(min);\r\n        bounds.setMax(max);\r\n\r\n        let channelCount = reader.readUint16();\r\n\r\n        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\r\n            let channel = new MorphTargetChannel();\r\n            channel.name = LoadModelV05._strings[reader.getUint16()];\r\n            let targetCount = reader.readUint16();\r\n            for (let targetIndex = 0; targetIndex < targetCount; targetIndex++) {\r\n                let target = new MorphTarget();\r\n                let targetName = LoadModelV05._strings[reader.getUint16()];\r\n                target.name = targetName;\r\n                target.fullWeight = reader.readFloat32();\r\n                let bufferStart = reader.readUint32();\r\n                let bufferLength = reader.readUint32();\r\n                target.data = new Float32Array(arrayBuffer.slice(offset + bufferStart, offset + bufferStart + bufferLength));\r\n\r\n                channel.addTarget(target);\r\n            }\r\n            morphData.addMorphChannel(channel);\r\n        }\r\n\r\n        morphData.vertexCount = mesh.vertexCount;\r\n        morphData.initData();\r\n\r\n        return true;\r\n    }\r\n\r\n    private static READ_UVSIZE(): void {\r\n        LoadModelV05._mesh._width = LoadModelV05._readData.readUint16();\r\n        LoadModelV05._mesh._height = LoadModelV05._readData.readUint16();\r\n    }\r\n}\r\n\r\n\r\n","import { Byte } from \"../../utils/Byte\";\r\nimport { Mesh } from \"../resource/models/Mesh\";\r\nimport { SubMesh } from \"../resource/models/SubMesh\";\r\nimport { LoadModelV04 } from \"./LoadModelV04\";\r\nimport { LoadModelV05 } from \"./LoadModelV05\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MeshReader {\r\n\t/**\r\n\t */\r\n\tstatic _parse(data: ArrayBuffer): Mesh {\r\n\t\tvar mesh: Mesh = new Mesh();\r\n\t\tMeshReader.read(data, mesh, mesh._subMeshes);\r\n\t\treturn mesh;\r\n\t}\r\n\r\n\tstatic read(data: ArrayBuffer, mesh: Mesh, subMeshes: SubMesh[]): void {\r\n\t\tvar readData: Byte = new Byte(data);\r\n\t\treadData.pos = 0;\r\n\t\tvar version: string = readData.readUTFString();\r\n\t\tswitch (version) {\r\n\t\t\tcase \"LAYAMODEL:0301\":\r\n\t\t\tcase \"LAYAMODEL:0400\":\r\n\t\t\tcase \"LAYAMODEL:0401\":\r\n\t\t\t\tLoadModelV04.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LAYAMODEL:05\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_05\":\r\n\t\t\tcase \"LAYAMODEL:0501\":\r\n\t\t\tcase \"LAYAMODEL:COMPRESSION_0501\":\r\n\t\t\tcase \"LAYAMODEL:0502\":\r\n\t\t\t\tLoadModelV05.parse(readData, version, mesh, subMeshes);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"unknown mesh version: \" + version);\r\n\t\t}\r\n\t\tmesh._setSubMeshes(subMeshes);\r\n\t\tif (version != \"LAYAMODEL:0501\" && version != \"LAYAMODEL:COMPRESSION_0501\" && version != \"LAYAMODEL:0502\")//compatible\r\n\t\t\tmesh.calculateBounds();\r\n\t}\r\n}\r\n\r\n","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AssetDb } from \"../../resource/AssetDb\";\r\nimport { MeshReader } from \"./MeshReader\";\r\n\r\n/**\r\n * @ignore\r\n * @en Used for loading mesh resources.\r\n * @zh 用于加载模型网格资源(.lm)。\r\n */\r\nclass MeshLoader implements IResourceLoader {\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Load mesh data from the specified URL.\r\n     * @param task The load task that contains the URL and other loading options.\r\n     * @returns A Promise, when loaded successfully, it is resolves with the loaded mesh data or null if loading fails.\r\n     * @zh 加载指定的模型网格数据。\r\n     * @param task 包含 URL 和其他加载选项的加载任务。\r\n     * @returns 一个Promise，当加载成功时解析为加载的网格数据，加载失败时为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        let url = AssetDb.inst.getSubAssetURL(task.url, task.uuid, null, \"lm\");\r\n        return task.loader.fetch(url, \"arraybuffer\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return MeshReader._parse(data);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lm\"], MeshLoader, Loader.MESH);","import { Component } from \"../../components/Component\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { Camera } from \"../core/Camera\";\r\nimport { MeshSprite3D } from \"../core/MeshSprite3D\";\r\nimport { ShuriKenParticle3D } from \"../core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { RenderableSprite3D } from \"../core/RenderableSprite3D\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { SkinnedMeshSprite3D } from \"../core/SkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"../core/SimpleSkinnedMeshSprite3D\";\r\nimport { ILoadURL, Loader } from \"../../net/Loader\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { HierarchyLoader } from \"../../loaders/HierarchyLoader\";\r\nimport { ReflectionProbe } from \"../component/Volume/reflectionProbe/ReflectionProbe\";\r\n\r\n/**\r\n * @internal\r\n * @en `HierarchyParserV2` is a class used for parsing hierarchy data in a 3D scene.\r\n * @zh `HierarchyParserV2` 类用于解析3D场景中的层级数据。\r\n */\r\nclass HierarchyParserV2 {\r\n    /**\r\n     * @internal\r\n     * @param nodeData 创建数据\r\n     * @param spriteMap 精灵集合\r\n     * @param outBatchSprites 渲染精灵集合\r\n     */\r\n    private static _createSprite3DInstance(nodeData: any, spriteMap: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n        let node: Node;\r\n        switch (nodeData.type) {\r\n            case \"Scene3D\":\r\n                node = new Scene3D();\r\n                break;\r\n            case \"Sprite3D\":\r\n                node = new Sprite3D();\r\n                break;\r\n            case \"MeshSprite3D\":\r\n                node = new MeshSprite3D();\r\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n                break;\r\n            case \"SkinnedMeshSprite3D\":\r\n                node = new SkinnedMeshSprite3D();\r\n                break;\r\n            case \"SimpleSkinnedMeshSprite3D\":\r\n                node = new SimpleSkinnedMeshSprite3D();\r\n                break;\r\n            case \"ShuriKenParticle3D\":\r\n                node = new ShuriKenParticle3D();\r\n                break;\r\n            case \"Camera\":\r\n                node = new Camera();\r\n                break;\r\n            case \"ReflectionProbe\":\r\n                node = new Sprite3D();\r\n                node.addComponent(ReflectionProbe);\r\n                break;\r\n            default:\r\n                throw new Error(\"Utils3D:unidentified class type in (.lh) file.\");\r\n        }\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\r\n                let child: any = HierarchyParserV2._createSprite3DInstance(childData[i], spriteMap, outBatchSprites)\r\n                node.addChild(child);\r\n            }\r\n        }\r\n\r\n        spriteMap[nodeData.instanceID] = node;\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param nodeData \r\n     * @param spriteMap \r\n     * @param interactMap \r\n     */\r\n    private static _createComponentInstance(nodeData: any, spriteMap: any, interactMap: any): void {\r\n        let node: Node = spriteMap[nodeData.instanceID];\r\n        node._parse(nodeData.props, spriteMap);\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++)\r\n                HierarchyParserV2._createComponentInstance(childData[i], spriteMap, interactMap)\r\n        }\r\n\r\n        let componentsData: any[] = nodeData.components;\r\n        if (componentsData) {\r\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n                let data: any = componentsData[j];\r\n                let cls: any = ClassUtils.getClass(data.type);\r\n                if (cls) {\r\n                    let component: Component = node.addComponent(cls);\r\n                    component._parse(data, interactMap);\r\n                } else {\r\n                    console.warn(`Unidentified component type: ${data.type}.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createNodeByJson02(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {\r\n        let spriteMap: any = {};\r\n        let interactMap: any = { component: [], data: [] };\r\n        let node: Node = HierarchyParserV2._createSprite3DInstance(nodeData, spriteMap, outBatchSprites);\r\n        HierarchyParserV2._createComponentInstance(nodeData, spriteMap, interactMap);\r\n        HierarchyParserV2._createInteractInstance(interactMap, spriteMap);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createInteractInstance(interatMap: any, spriteMap: any) {\r\n        let components: Component[] = interatMap.component;\r\n        let data = interatMap.data;\r\n        for (let i = 0, n = components.length; i < n; i++) {\r\n            components[i]._parseInteractive(data[i], spriteMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Parses the provided data into a 3D scene hierarchy.\r\n     * @param data The data object containing the hierarchy information and version.\r\n     * @returns A `Sprite3D` or `Scene3D` object representing the parsed hierarchy.\r\n     * @zh 将提供的数据解析为3D场景层级。\r\n     * @param data 包含层级信息和版本的数据对象。\r\n     * @returns 解析后的层级的Sprite3D或Scene3D对象\r\n     */\r\n    static parse(data: any) {\r\n        let json: any = data.data;\r\n        let outBatchSprits: RenderableSprite3D[] = [];\r\n        let sprite: Sprite3D | Scene3D;\r\n        switch (data.version) {\r\n            case \"LAYAHIERARCHY:02\":\r\n            case \"LAYASCENE3D:02\":\r\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson02(json, outBatchSprits));\r\n                break;\r\n            default:\r\n                sprite = (<Sprite3D | Scene3D>HierarchyParserV2._createNodeByJson(json, outBatchSprits));\r\n        }\r\n\r\n        //StaticBatchManager.combine((sprite instanceof Sprite3D) ? sprite : null, outBatchSprits);\r\n        return sprite;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _createNodeByJson(nodeData: any, outBatchSprites: RenderableSprite3D[]): Node {//兼容代码\r\n        let node: Node;\r\n        switch (nodeData.type) {\r\n            case \"Scene3D\":\r\n                node = new Scene3D();\r\n                break;\r\n            case \"Sprite3D\":\r\n                node = new Sprite3D();\r\n                break;\r\n            case \"MeshSprite3D\":\r\n                node = new MeshSprite3D();\r\n                (outBatchSprites && nodeData.props.isStatic) && (outBatchSprites.push(<MeshSprite3D>node));\r\n                break;\r\n            case \"SkinnedMeshSprite3D\":\r\n                node = new SkinnedMeshSprite3D();\r\n                break;\r\n            case \"ShuriKenParticle3D\":\r\n                node = new ShuriKenParticle3D();\r\n                break;\r\n            case \"Camera\":\r\n                node = new Camera();\r\n                break;\r\n            default:\r\n                throw new Error(`Unidentified node type ${nodeData.type}`);\r\n        }\r\n\r\n        let childData: any[] = nodeData.child;\r\n        if (childData) {\r\n            for (let i: number = 0, n: number = childData.length; i < n; i++) {\r\n                let child: any = HierarchyParserV2._createNodeByJson(childData[i], outBatchSprites)\r\n                node.addChild(child);\r\n            }\r\n        }\r\n\r\n        let componentsData: any[] = nodeData.components;\r\n        if (componentsData) {\r\n            for (let j: number = 0, m: number = componentsData.length; j < m; j++) {\r\n                let data: any = componentsData[j];\r\n                let clas: any = ClassUtils.getClass(data.type);\r\n                if (clas) {\r\n                    let component: Component = node.addComponent(clas);\r\n                    component._parse(data);\r\n                } else {\r\n                    console.warn(`Unidentified component type: ${data.type}.`);\r\n                }\r\n            }\r\n        }\r\n        node._parse(nodeData.props, null);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @en Collects all the resource links required for loading from the given data object.\r\n     * @param data The data object containing hierarchy and resource information.\r\n     * @param basePath The base path to resolve relative URLs.\r\n     * @returns An array of resource URLs or `ILoadURL` objects.\r\n     * @zh 从给定的数据对象中收集所有需要加载的资源链接。\r\n     * @param data 包含层级和资源信息的数据对象。\r\n     * @param basePath 用于解析相对URL的基路径。\r\n     * @returns 资源URL或 `ILoadURL` 对象的数组。\r\n     */\r\n    public static collectResourceLinks(data: any, basePath: string): (string | ILoadURL)[] {\r\n        let test: Record<string, string> = {};\r\n        let innerUrls: ILoadURL[] = [];\r\n\r\n        function addInnerUrl(url: string, type: string, constructParams?: any, propertyParams?: any) {\r\n            let url2 = test[url];\r\n            if (url2 === undefined) {\r\n                url2 = URL.join(basePath, url);\r\n                innerUrls.push({ url: url2, type: type, constructParams: constructParams, propertyParams: propertyParams });\r\n                test[url] = url2;\r\n            }\r\n            return url2;\r\n        }\r\n\r\n        function check(nodeData: any) {\r\n            let props: any = nodeData.props;\r\n            switch (nodeData.type) {\r\n                case \"Scene3D\":\r\n                    let lightmaps: any[] = props.lightmaps;\r\n                    if (lightmaps) {\r\n                        for (let i = 0, n = lightmaps.length; i < n; i++) {\r\n                            let lightMap: any = lightmaps[i];\r\n                            if (lightMap.path) {\r\n                                lightMap.path = addInnerUrl(lightMap.path, Loader.TEXTURE2D, lightMap.constructParams, lightMap.propertyParams);\r\n                            }\r\n                            else {\r\n                                let lightmapColorData: any = lightMap.color;\r\n                                lightmapColorData.path = addInnerUrl(lightmapColorData.path, Loader.TEXTURE2D, lightmapColorData.constructParams, lightmapColorData.propertyParams);\r\n                                let lightmapDirectionData: any = lightMap.direction;\r\n                                if (lightmapDirectionData)\r\n                                    lightmapDirectionData.path = addInnerUrl(lightmapDirectionData.path, Loader.TEXTURE2D, lightmapDirectionData.constructParams, lightmapDirectionData.propertyParams);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //兼容\r\n                    let reflectionTextureData: string = props.reflectionTexture;\r\n                    (reflectionTextureData) && (props.reflection = addInnerUrl(reflectionTextureData, Loader.TEXTURECUBE));\r\n\r\n                    let reflectionData: string = props.reflection;\r\n                    (reflectionData) && (props.reflection = addInnerUrl(reflectionData, Loader.TEXTURECUBE));\r\n                    if (props.sky) {\r\n                        let skyboxMaterial: any = props.sky.material;\r\n                        (skyboxMaterial) && (skyboxMaterial.path = addInnerUrl(skyboxMaterial.path, Loader.MATERIAL));\r\n                    }\r\n                    break;\r\n                case \"Camera\":\r\n                    let skyboxMatData: any = props.skyboxMaterial;\r\n                    (skyboxMatData) && (skyboxMatData.path = addInnerUrl(skyboxMatData.path, Loader.MATERIAL));\r\n                    break;\r\n                case \"TrailSprite3D\":\r\n                case \"MeshSprite3D\":\r\n                case \"SkinnedMeshSprite3D\":\r\n                case \"SimpleSkinnedMeshSprite3D\":\r\n                    let meshPath: string = props.meshPath;\r\n                    (meshPath) && (props.meshPath = addInnerUrl(meshPath, Loader.MESH));\r\n                    let materials: any[] = props.materials;\r\n                    if (materials)\r\n                        for (let i = 0, n = materials.length; i < n; i++)\r\n                            materials[i].path = addInnerUrl(materials[i].path, Loader.MATERIAL);\r\n                    if (nodeData.type == \"SimpleSkinnedMeshSprite3D\")\r\n                        if (props.animatorTexture)\r\n                            props.animatorTexture = addInnerUrl(props.animatorTexture, Loader.TEXTURE2D)\r\n                    break;\r\n\r\n                case \"ShuriKenParticle3D\":\r\n                    if (props.main) {\r\n                        let resources: any = props.renderer.resources;\r\n                        let mesh: string = resources.mesh;\r\n                        let material: string = resources.material;\r\n                        (mesh) && (resources.mesh = addInnerUrl(mesh, Loader.MESH));\r\n                        (material) && (resources.material = addInnerUrl(material, Loader.MATERIAL));\r\n                    }\r\n                    else {//兼容代码\r\n                        let parMeshPath: string = props.meshPath;\r\n                        (parMeshPath) && (props.meshPath = addInnerUrl(parMeshPath, Loader.MESH));\r\n                        props.material.path = addInnerUrl(props.material.path, Loader.MATERIAL);\r\n                    }\r\n                    break;\r\n                case \"Terrain\":\r\n                    addInnerUrl(props.dataPath, Loader.TERRAINRES);\r\n                    break;\r\n                case \"ReflectionProbe\":\r\n                    let reflection = props.reflection;\r\n                    (reflection) && (props.reflection = addInnerUrl(reflection, Loader.TEXTURECUBE));\r\n                    break;\r\n            }\r\n\r\n            let components: any[] = nodeData.components;\r\n            if (components) {\r\n                for (let k: number = 0, p: number = components.length; k < p; k++) {\r\n                    let component: any = components[k];\r\n                    switch (component.type) {\r\n                        case \"Animator\":\r\n                            // let avatarData: any = component.avatar;\r\n                            // (avatarData) && (avatarData.path = addInnerUrl(avatarData.path, Loader.AVATAR));\r\n                            let clipPaths: string[] = component.clipPaths;\r\n                            if (!clipPaths) {\r\n                                let layersData: any[] = component.layers;\r\n                                for (let i = 0; i < layersData.length; i++) {\r\n                                    let states: any[] = layersData[i].states;\r\n                                    for (let j: number = 0, m: number = states.length; j < m; j++) {\r\n                                        let clipPath: string = states[j].clipPath;\r\n                                        (clipPath) && (states[j].clipPath = addInnerUrl(clipPath, Loader.ANIMATIONCLIP));\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (let i = 0, n = clipPaths.length; i < n; i++)\r\n                                    clipPaths[i] = addInnerUrl(clipPaths[i], Loader.ANIMATIONCLIP);\r\n                            }\r\n                            break;\r\n                        case \"PhysicsCollider\":\r\n                        case \"Rigidbody3D\":\r\n                        case \"CharacterController\":\r\n                            let shapes: any[] = component.shapes;\r\n                            for (let i = 0; i < shapes.length; i++) {\r\n                                let shape: any = shapes[i];\r\n                                if (shape.type === \"MeshColliderShape\") {\r\n                                    let mesh: string = shape.mesh;\r\n                                    (mesh) && (shape.mesh = addInnerUrl(mesh, Loader.MESH));\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let children: any[] = nodeData.child;\r\n            if (!children) return;\r\n            for (let i = 0, n = children.length; i < n; i++)\r\n                check(children[i]);\r\n        }\r\n\r\n        check(data.data);\r\n\r\n        return innerUrls;\r\n    }\r\n}\r\n\r\nHierarchyLoader.v2 = HierarchyParserV2;","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AvatarMask } from \"../component/Animator/AvatarMask\";\r\n\r\n/**\r\n * @ignore\r\n * @en User for loading avatar masks(.lavm).\r\n * @zh 加载动画遮罩资源（.lavm）。\r\n */\r\nclass AvatarMaskLoader implements IResourceLoader {\r\n    /**\r\n     * @ignore\r\n     * @en Loads the avatar mask resource for the given task.\r\n     * @param task The load task.\r\n     * @returns A promise that resolves with the loaded avatar mask or null if the data is not available.\r\n     * @zh 为给定任务加载动画遮罩资源。\r\n     * @param task 加载任务。\r\n     * @returns 一个 Promise，该 Promise 将在资源可用时解析为已加载的 AvatarMask，否则为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return new AvatarMask(data);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lavm\"], AvatarMaskLoader);","import { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\r\nimport { ShaderCompile } from \"../../webgl/utils/ShaderCompile\";\r\n\r\n/**\r\n * @ignore\r\n * @en Used for loading GLSL shader code(.glsl,.vs,.fs).\r\n * @zh 用于加载着色器代码(.glsl,.vs,.fs)。\r\n */\r\nclass GLSLLoader implements IResourceLoader {\r\n    /**\r\n     * @ignore\r\n     * @en Load GLSL shader code from the given task.\r\n     * @param task The load task.\r\n     * @returns A Promise, when loaded successfully, it is resolves with the loaded shader code or null if loading fails.\r\n     * @zh 从给定的任务加载 GLSL 着色器代码。\r\n     * @param task 加载任务。\r\n     * @returns 一个Promise，当加载成功时解析为加载的着色器代码，加载失败时为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        let url = task.url;\r\n        return task.loader.fetch(url, \"text\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            return ShaderCompile.addInclude(task.url, data, true);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"glsl\", \"vs\", \"fs\"], GLSLLoader);","import { TypeAnimatorLayer, TypeAnimatorState } from \"../../components/AnimatorControllerParse\";\r\nimport { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { AnimatorController } from \"../component/Animator/AnimatorController\";\r\nimport { URL } from \"../../net/URL\";\r\n/**\r\n * @ignore\r\n * @en Used for loading and handling 3D animation controllers.\r\n * @zh 用于加载与处理3D动画状态机。\r\n */\r\nclass AnimationControllerLoader implements IResourceLoader {\r\n    /**\r\n     * @ignore\r\n     * @en Loads the animation controller resource for the given task.\r\n     * @param task The load task.\r\n     * @returns A promise that resolves with the loaded AnimatorController.\r\n     * @zh 为给定任务加载3D动画状态机资源\r\n     * @param task 加载任务。\r\n     * @returns 一个 Promise，解析为加载的 AnimatorController 对象。\r\n     */\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n            let ret = new AnimatorController(data);\r\n            if (ret.data && ret.data.controllerLayers) {\r\n                let layers = ret.data.controllerLayers;\r\n                let promises: Array<any> = [];\r\n                for (let i = layers.length - 1; i >= 0; i--) {\r\n                    if (layers[i].avatarMask) {\r\n                        this.loadAvatarMask(layers[i], promises, task);\r\n                    }\r\n                    let states = layers[i].states;\r\n                    this.loadStates(states, promises, task);\r\n\r\n                }\r\n                return Promise.all(promises).then(() => ret);\r\n            }\r\n            else\r\n                return ret;\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @en Loads the avatar mask for a given animator layer.\r\n     * @param l The animator layer.\r\n     * @param promises The list of promises for asynchronous loading.\r\n     * @param task The load task.\r\n     * @zh 为给定的动画层加载动画遮罩。\r\n     * @param l 动画层。\r\n     * @param promises 异步加载的 Promise 列表。\r\n     * @param task 加载任务。\r\n     */\r\n    loadAvatarMask(l: TypeAnimatorLayer, promises: Array<any>, task: ILoadTask) {\r\n        let basePath = URL.getPath(task.url);\r\n        if (l.avatarMask && l.avatarMask._$uuid && '' != l.avatarMask._$uuid) {\r\n            let url = URL.getResURLByUUID(l.avatarMask._$uuid);\r\n            if (!url.startsWith(\"res://\"))\r\n                url = URL.join(basePath, url);\r\n            promises.push(task.loader.load(url).then(res => {\r\n                l.avatarMask = res;\r\n            }));\r\n        } else {\r\n            l.avatarMask = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Recursively loads states for animator states.\r\n     * @param states The animator states.\r\n     * @param promises The list of promises for asynchronous loading.\r\n     * @param task The load task.\r\n     * @zh 递归地加载动画状态。\r\n     * @param states 动画状态。\r\n     * @param promises 异步加载的 Promise 列表。\r\n     * @param task 加载任务。\r\n     */\r\n    loadStates(states: TypeAnimatorState[], promises: Array<any>, task: ILoadTask) {\r\n        let basePath = URL.getPath(task.url);\r\n        for (let j = states.length - 1; j >= 0; j--) {\r\n            if (states[j].clip && states[j].clip._$uuid) {\r\n                let url = URL.getResURLByUUID(states[j].clip._$uuid);\r\n                if (!url.startsWith(\"res://\"))\r\n                    url = URL.join(basePath, url);\r\n                promises.push(task.loader.load(url).then(res => {\r\n                    states[j].clip = res;\r\n                }));\r\n\r\n                // promises.push(task.loader.load(\"res://\" + states[j].clip._$uuid).then(res => {\r\n                //     states[j].clip = res;\r\n                // }));\r\n            }\r\n\r\n            if (states[j].states) {\r\n                this.loadStates(states[j].states, promises, task);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"controller\"], AnimationControllerLoader);","import { ICollider } from \"../../Physics3D/interface/ICollider\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en The HitResult class is used to store the result of raycasting or shape scanning.\r\n * @zh HitResult 类用于实现射线检测或形状扫描的结果。\r\n */\r\nexport class HitResult {\r\n    /** \r\n     * @en Whether the raycast or shape scan is successful.\r\n     * @zh 射线检测或形状扫描是否成功。 \r\n     */\r\n    succeeded: boolean = false;\r\n    /** \r\n     * @en The collider that was hit.\r\n     * @zh 发生碰撞的碰撞组件。\r\n     */\r\n    collider: ICollider = null;\r\n    /** \r\n     * @en The Collision point.\r\n     * @zh 碰撞点。\r\n     */\r\n    point: Vector3 = new Vector3();\r\n    /** \r\n     * @en Collision normals.\r\n     * @zh 碰撞法线。\r\n     */\r\n    normal: Vector3 = new Vector3();\r\n    /** \r\n     * @en Hit Fraction\r\n     * @zh 碰撞分数。 \r\n     */\r\n    hitFraction: number = 0;\r\n\r\n    /**@internal */\r\n    _inPool: boolean = false;\r\n    /** @ignore */\r\n    constructor() {\r\n    }\r\n}\r\n\r\n\r\n","import { Camera, CameraClearFlags } from \"../Camera\";\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { HitResult } from \"../../physics/HitResult\";\r\nimport { Config3D } from \"../../../../Config3D\";\r\nimport { InputManager } from \"../../../events/InputManager\";\r\nimport { Node } from \"../../../display/Node\";\r\nimport { Scene3D } from \"./Scene3D\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Render } from \"../../../renders/Render\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\n\r\nconst _vec2 = new Vector2();\r\nconst _ray = new Ray(new Vector3(), new Vector3());\r\nconst _hitResult = new HitResult();\r\n\r\nInputManager.prototype.getSprite3DUnderPoint = function (this: InputManager, x: number, y: number): Node {\r\n    _hitResult.succeeded = false;\r\n\r\n    x = x * this._stage.clientScaleX;\r\n    y = y * this._stage.clientScaleY;\r\n    var pageX = x;\r\n    var pageY = y;\r\n\r\n    var normalWidth = x / Render._mainCanvas.width;\r\n    var normalHeight = y / Render._mainCanvas.height;\r\n\r\n    x = this._stage.width * normalWidth;\r\n    y = this._stage.height * normalHeight;\r\n\r\n    _vec2.setValue(x, y);\r\n\r\n    for (let scene of <Scene3D[]>this._stage._scene3Ds) {\r\n        let sim = scene._physicsManager;\r\n        let uiManager = scene._UI3DManager;\r\n\r\n        let cameras = scene._cameraPool;\r\n        for (let i = cameras.length - 1; i >= 0; i--) {\r\n            let camera = <Camera>cameras[i];\r\n            let viewport: Viewport = camera.viewport;\r\n            let ratio = Config3D.pixelRatio;\r\n            if (pageX >= viewport.x && pageY >= viewport.y && pageX <= viewport.width / ratio && pageY <= viewport.height / ratio) {\r\n                //Physics\r\n                camera.viewportPointToRay(_vec2, _ray);\r\n\r\n                //3D UI\r\n                let sprite = uiManager.rayCast(_ray);\r\n                if (sprite)\r\n                    return sprite;\r\n                if (!sim)\r\n                    continue;\r\n                var sucess: boolean = sim.rayCast(_ray, <any>_hitResult);\r\n                if (sucess || (camera.clearFlag === CameraClearFlags.SolidColor || camera.clearFlag === CameraClearFlags.Sky))\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (_hitResult.succeeded)\r\n            return (<Sprite3D>_hitResult.collider.owner);\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { AnimationClip } from \"./animation/AnimationClip\";\r\nimport { Sprite3D } from \"./core/Sprite3D\";\r\nimport { Camera } from \"./core/Camera\";\r\nimport { Gradient } from \"./core/Gradient\";\r\nimport { LightSprite } from \"./core/light/LightSprite\";\r\nimport { BlinnPhongMaterial } from \"./core/material/BlinnPhongMaterial\";\r\nimport { EffectMaterial } from \"./core/material/EffectMaterial\";\r\nimport { ExtendTerrainMaterial } from \"./core/material/ExtendTerrainMaterial\";\r\nimport { Material } from \"../resource/Material\";\r\nimport { PBRStandardMaterial } from \"./core/material/PBRStandardMaterial\";\r\nimport { SkyBoxMaterial } from \"./core/material/SkyBoxMaterial\";\r\nimport { SkyPanoramicMaterial } from \"./core/material/SkyPanoramicMaterial\";\r\nimport { SkyProceduralMaterial } from \"./core/material/SkyProceduralMaterial\";\r\nimport { UnlitMaterial } from \"./core/material/UnlitMaterial\";\r\nimport { MeshFilter } from \"./core/MeshFilter\";\r\nimport { MeshRenderer } from \"./core/MeshRenderer\";\r\nimport { MeshSprite3D } from \"./core/MeshSprite3D\";\r\nimport { Burst } from \"./core/particleShuriKen/module/Burst\";\r\nimport { ColorOverLifetime } from \"./core/particleShuriKen/module/ColorOverLifetime\";\r\nimport { Emission } from \"./core/particleShuriKen/module/Emission\";\r\nimport { FrameOverTime } from \"./core/particleShuriKen/module/FrameOverTime\";\r\nimport { GradientAngularVelocity } from \"./core/particleShuriKen/module/GradientAngularVelocity\";\r\nimport { GradientColor } from \"./core/particleShuriKen/module/GradientColor\";\r\nimport { GradientDataInt } from \"./core/particleShuriKen/module/GradientDataInt\";\r\nimport { GradientDataNumber } from \"./core/particleShuriKen/module/GradientDataNumber\";\r\nimport { GradientSize } from \"./core/particleShuriKen/module/GradientSize\";\r\nimport { GradientVelocity } from \"./core/particleShuriKen/module/GradientVelocity\";\r\nimport { RotationOverLifetime } from \"./core/particleShuriKen/module/RotationOverLifetime\";\r\nimport { BaseShape } from \"./core/particleShuriKen/module/shape/BaseShape\";\r\nimport { BoxShape } from \"./core/particleShuriKen/module/shape/BoxShape\";\r\nimport { CircleShape } from \"./core/particleShuriKen/module/shape/CircleShape\";\r\nimport { ConeShape } from \"./core/particleShuriKen/module/shape/ConeShape\";\r\nimport { HemisphereShape } from \"./core/particleShuriKen/module/shape/HemisphereShape\";\r\nimport { SphereShape } from \"./core/particleShuriKen/module/shape/SphereShape\";\r\nimport { SizeOverLifetime } from \"./core/particleShuriKen/module/SizeOverLifetime\";\r\nimport { StartFrame } from \"./core/particleShuriKen/module/StartFrame\";\r\nimport { TextureSheetAnimation } from \"./core/particleShuriKen/module/TextureSheetAnimation\";\r\nimport { VelocityOverLifetime } from \"./core/particleShuriKen/module/VelocityOverLifetime\";\r\nimport { ShuriKenParticle3D } from \"./core/particleShuriKen/ShuriKenParticle3D\";\r\nimport { ShurikenParticleMaterial } from \"./core/particleShuriKen/ShurikenParticleMaterial\";\r\nimport { ShurikenParticleRenderer } from \"./core/particleShuriKen/ShurikenParticleRenderer\";\r\nimport { ShurikenParticleSystem } from \"./core/particleShuriKen/ShurikenParticleSystem\";\r\nimport { BaseRender } from \"./core/render/BaseRender\";\r\nimport { RenderableSprite3D } from \"./core/RenderableSprite3D\";\r\nimport { Lightmap } from \"./core/scene/Lightmap\";\r\nimport { Scene3D } from \"./core/scene/Scene3D\";\r\nimport { SimpleSkinnedMeshRenderer } from \"./core/SimpleSkinnedMeshRenderer\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"./core/SimpleSkinnedMeshSprite3D\";\r\nimport { SkinnedMeshRenderer } from \"./core/SkinnedMeshRenderer\";\r\nimport { SkinnedMeshSprite3D } from \"./core/SkinnedMeshSprite3D\";\r\nimport { TrailFilter } from \"./core/trail/TrailFilter\";\r\nimport { TrailMaterial } from \"./core/trail/TrailMaterial\";\r\nimport { TrailRenderer } from \"./core/trail/TrailRenderer\";\r\nimport { Transform3D } from \"./core/Transform3D\";\r\nimport { SphericalHarmonicsL2 } from \"./graphics/SphericalHarmonicsL2\";\r\nimport { BoundBox } from \"./math/BoundBox\";\r\nimport { Mesh } from \"./resource/models/Mesh\";\r\nimport { SkyRenderer } from \"./resource/models/SkyRenderer\";\r\nimport { TextureCube } from \"../resource/TextureCube\";\r\nimport { DirectionLightCom } from \"./core/light/DirectionLightCom\";\r\nimport { PointLightCom } from \"./core/light/PointLightCom\";\r\nimport { SpotLightCom } from \"./core/light/SpotLightCom\";\r\nimport { Bounds } from \"./math/Bounds\";\r\nimport { ReflectionProbe } from \"./component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { VolumetricGI } from \"./component/Volume/VolumetricGI/VolumetricGI\";\r\nimport { AreaLightCom } from \"./core/light/AreaLightCom\";\r\nimport { LODGroup, LODInfo } from \"./component/LODGroup\";\r\nimport { PixelLineData } from \"./core/pixelLine/PixelLineData\";\r\nimport { PixelLineRenderer } from \"./core/pixelLine/PixelLineRenderer\";\r\nimport { FloatKeyframe } from \"./core/FloatKeyframe\";\r\nimport { Animator } from \"./component/Animator/Animator\";\r\nimport { AnimatorControllerLayer } from \"./component/Animator/AnimatorControllerLayer\";\r\nimport { AnimatorState } from \"./component/Animator/AnimatorState\";\r\nimport { AvatarMask } from \"./component/Animator/AvatarMask\";\r\nimport { PostProcess } from \"./component/PostProcess\";\r\nimport { PostProcessEffect } from \"./core/render/PostProcessEffect\";\r\nimport { BloomEffect } from \"./core/render/PostEffect/BloomEffect\";\r\nimport { GaussianDoF } from \"./core/render/PostEffect/GaussianDoF\";\r\nimport { ScalableAO } from \"./core/render/PostEffect/ScalableAO\";\r\nimport { AnimatorController } from \"./component/Animator/AnimatorController\";\r\nimport { StaticBatchVolume } from \"./component/Volume/BatchVolume/StaticBatchVolume\";\r\nimport { StaticInstanceBatchRender } from \"./component/Volume/BatchVolume/StaticInstanceBatchRender\";\r\nimport { RenderTexture } from \"../resource/RenderTexture\";\r\nimport { ColorGradEffect } from \"./core/render/PostEffect/ColorGradEffect\";\r\nimport { UI3D } from \"./core/UI3D/UI3D\";\r\nimport { LensFlareData, LensFlareEffect, LensFlareElement } from \"./core/render/PostEffect/LensFlares/LensFlareEffect\";\r\nimport { Physics3DStatInfo } from \"../Physics3D/interface/Physics3DStatInfo\";\r\nimport \"./loaders/AnimationClipLoader\";\r\nimport \"./loaders/CubemapLoader\";\r\nimport \"./loaders/Texture2DArrayLoader\";\r\nimport \"./loaders/MeshLoader\";\r\nimport \"./loaders/HierarchyParserV2\";\r\nimport \"./loaders/AvatarMaskLoader\";\r\nimport \"./loaders/GLSLLoader\";\r\nimport \"./loaders/AnimationControllerLoader\";\r\nimport \"./core/scene/Input3D\";\r\nimport { Viewport } from \"../maths/Viewport\";\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"Sprite3D\", Sprite3D);\r\nc(\"Scene3D\", Scene3D);\r\nc(\"Camera\", Camera);\r\nc(\"LightSprite\", LightSprite);\r\nc(\"AreaLightCom\", AreaLightCom);\r\nc(\"DirectionLightCom\", DirectionLightCom);\r\nc(\"PointLightCom\", PointLightCom);\r\nc(\"SpotLightCom\", SpotLightCom);\r\nc(\"RenderableSprite3D\", RenderableSprite3D);\r\nc(\"MeshSprite3D\", MeshSprite3D);\r\nc(\"MeshFilter\", MeshFilter);\r\nc(\"BaseRender\", BaseRender);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"SimpleSkinnedMeshSprite3D\", SimpleSkinnedMeshSprite3D);\r\nc(\"SkinnedMeshSprite3D\", SkinnedMeshSprite3D);\r\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\r\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\r\nc(\"SkyRenderer\", SkyRenderer);\r\nc(\"TrailFilter\", TrailFilter);\r\nc(\"TrailRenderer\", TrailRenderer);\r\nc(\"PixelLineRenderer\", PixelLineRenderer);\r\nc(\"PixelLineData\", PixelLineData);\r\nc(\"Gradient\", Gradient);\r\nc(\"Transform3D\", Transform3D);\r\nc(\"Lightmap\", Lightmap);\r\nc(\"ReflectionProbe\", ReflectionProbe);\r\nc(\"VolumetricGI\", VolumetricGI);\r\nc(\"StaticBatchVolume\", StaticBatchVolume);\r\nc(\"StaticInstanceBatchRender\", StaticInstanceBatchRender);\r\nc(\"SphericalHarmonicsL2\", SphericalHarmonicsL2);\r\nc(\"Viewport\", Viewport);\r\nc(\"Bounds\", Bounds);\r\nc(\"BoundBox\", BoundBox);\r\nc(\"TextureCube\", TextureCube);\r\nc(\"Mesh\", Mesh);\r\nc(\"FloatKeyframe\", FloatKeyframe);\r\nc(\"RenderTexture\", RenderTexture);\r\nc(\"Animator\", Animator);\r\nc(\"AnimatorController\", AnimatorController);\r\nc(\"AnimatorControllerLayer\", AnimatorControllerLayer);\r\nc(\"AnimatorState\", AnimatorState);\r\nc(\"AnimationClip\", AnimationClip);\r\nc(\"AvatarMask\", AvatarMask);\r\nc(\"UI3D\", UI3D);\r\n\r\nc(\"Material\", Material);\r\nc(\"BlinnPhongMaterial\", BlinnPhongMaterial);\r\nc(\"EffectMaterial\", EffectMaterial);\r\nc(\"ExtendTerrainMaterial\", ExtendTerrainMaterial);\r\nc(\"PBRStandardMaterial\", PBRStandardMaterial);\r\nc(\"SkyBoxMaterial\", SkyBoxMaterial);\r\nc(\"SkyPanoramicMaterial\", SkyPanoramicMaterial);\r\nc(\"SkyProceduralMaterial\", SkyProceduralMaterial);\r\nc(\"UnlitMaterial\", UnlitMaterial);\r\nc(\"ShurikenParticleMaterial\", ShurikenParticleMaterial);\r\nc(\"TrailMaterial\", TrailMaterial);\r\n\r\nc(\"ShuriKenParticle3D\", ShuriKenParticle3D);\r\nc(\"ShurikenParticleRenderer\", ShurikenParticleRenderer);\r\nc(\"ShurikenParticleSystem\", ShurikenParticleSystem);\r\nc(\"Burst\", Burst);\r\nc(\"Emission\", Emission);\r\nc(\"BaseShape\", BaseShape);\r\nc(\"BoxShape\", BoxShape);\r\nc(\"CircleShape\", CircleShape);\r\nc(\"ConeShape\", ConeShape);\r\nc(\"HemisphereShape\", HemisphereShape);\r\nc(\"SphereShape\", SphereShape);\r\nc(\"FrameOverTime\", FrameOverTime);\r\nc(\"GradientAngularVelocity\", GradientAngularVelocity);\r\nc(\"GradientColor\", GradientColor);\r\nc(\"GradientDataInt\", GradientDataInt);\r\nc(\"GradientDataNumber\", GradientDataNumber);\r\nc(\"GradientSize\", GradientSize);\r\nc(\"GradientVelocity\", GradientVelocity);\r\nc(\"StartFrame\", StartFrame);\r\nc(\"TextureSheetAnimation\", TextureSheetAnimation);\r\nc(\"ColorOverLifetime\", ColorOverLifetime);\r\nc(\"RotationOverLifetime\", RotationOverLifetime);\r\nc(\"SizeOverLifetime\", SizeOverLifetime);\r\nc(\"VelocityOverLifetime\", VelocityOverLifetime);\r\nc(\"LODInfo\", LODInfo);\r\nc(\"LODGroup\", LODGroup);\r\n\r\n\r\nc(\"DirectionLightCom\", DirectionLightCom);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"MeshFilter\", MeshFilter);\r\nc(\"MeshRenderer\", MeshRenderer);\r\nc(\"SkinnedMeshRenderer\", SkinnedMeshRenderer);\r\nc(\"SimpleSkinnedMeshRenderer\", SimpleSkinnedMeshRenderer);\r\nc(\"SkyRenderer\", SkyRenderer);\r\n\r\nc(\"PostProcess\", PostProcess);\r\nc(\"PostProcessEffect\", PostProcessEffect);\r\nc(\"BloomEffect\", BloomEffect);\r\nc(\"GaussianDoF\", GaussianDoF);\r\nc(\"ScalableAO\", ScalableAO);\r\nc(\"ColorGradEffect\", ColorGradEffect);\r\n\r\nc(\"LensFlareEffect\", LensFlareEffect);\r\nc(\"LensFlareElement\", LensFlareElement);\r\nc(\"LensFlareData\", LensFlareData);","import { IResourceLoader, ILoadTask, Loader } from \"../../net/Loader\";\r\nimport { LensFlareData, LensFlareElement } from \"../core/render/PostEffect/LensFlares/LensFlareEffect\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector2 } from \"../../maths/Vector2\";\r\n\r\n/**\r\n * @ignore\r\n * @en Usedfor loading lens flare.\r\n * @zh 用于加载镜头光晕数据资源。\r\n */\r\nexport class LensFlareSettingsLoader implements IResourceLoader {\r\n    /**\r\n     * @en Load lens flare from a specified URL.\r\n     * @param task The load task that contains the URL and other loading options.\r\n     * @returns A Promise, when loaded successfully, it is resolves with the loaded `LensFlareData` object or null if loading fails.\r\n     * @zh 加载指定的镜头光晕数据资源。\r\n     * @param task 包含 URL 和其他加载选项的加载任务。\r\n     * @returns 一个Promise，加载成功时解析为加载的 `LensFlareData` 对象，加载失败时为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n            let ret = new LensFlareData();\r\n            let basePath = URL.getPath(task.url);\r\n            let promises: Array<any> = [];\r\n\r\n            let elements = data.elements;\r\n            if (elements)\r\n                for (let i = elements.length - 1; i >= 0; i--) {\r\n                    let e = elements[i];\r\n                    if (e.texture && (e.texture as any)._$uuid && '' != (e.texture as any)._$uuid) {\r\n                        let url = URL.getResURLByUUID((e.texture as any)._$uuid);\r\n                        if (!url.startsWith(\"res://\"))\r\n                            url = URL.join(basePath, url);\r\n                        promises.push(task.loader.load(url).then((t) => {\r\n                            e.texture = t;\r\n                        }))\r\n                    }\r\n                    if (e.tint) {\r\n                        e.tint = new Color(e.tint.r, e.tint.g, e.tint.b, e.tint.a);\r\n                    }\r\n                    if (e.positionOffset) {\r\n                        e.positionOffset = new Vector2(e.positionOffset.x, e.positionOffset.y);\r\n                    }\r\n                    if (e.scale) {\r\n                        e.scale = new Vector2(e.scale.x, e.scale.y);\r\n                    }\r\n                }\r\n\r\n            return Promise.all(promises).then(() => {\r\n                ret.elements = elements;\r\n                return ret;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"lensflare\"], LensFlareSettingsLoader);","import { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { ILoadTask, IResourceLoader, Loader } from \"../../net/Loader\";\r\nimport { Texture2DArray } from \"../../resource/Texture2DArray\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\nvar internalResources: Record<string, any> = {};\r\n\r\n/**\r\n * @ignore\r\n * @en Used for loading 2D texture array resources(.tex2darray).\r\n * @zh 用于加载纹理数组资源（.tex2darray）。\r\n */\r\nexport class Texture2DArrayLoader implements IResourceLoader {\r\n\r\n    constructor() {\r\n        if (!internalResources) {\r\n            internalResources = {\r\n                \"default\": Texture2DArray.defaultTexture\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Load a 2D texture array from the specified URL.\r\n     * @param task The load task that contains the URL and other loading options.\r\n     * @returns A promise that resolves with the loaded texture array or null if loading fails.\r\n     * @zh 加载指定的纹理数组资源。\r\n     * @param task 包含 URL 和其他加载选项的加载任务。\r\n     * @returns 一个Promise，加载成功时解析为加载的纹理数组，加载失败时为 null。\r\n     */\r\n    load(task: ILoadTask) {\r\n        // todo internal resources\r\n        if (task.url.indexOf(\"internal/\") != -1) {\r\n            const tex = internalResources[Utils.getBaseName(task.url)];\r\n            if (tex) {\r\n                return Promise.resolve(tex);\r\n            }\r\n        }\r\n\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then((data) => {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n\r\n            let width = data.width;\r\n            let height = data.height;\r\n            let depth = data.depth;\r\n            let format = data.format;\r\n            let mipmap = data.mipmap;\r\n            let sRGB = data.sRGB;\r\n            let premultiplyAlpha = !!data.premultiplyAlpha;\r\n            let invertY = !!data.invertY;\r\n\r\n            let textures: Array<string> = data.textures;\r\n\r\n            let urls = [];\r\n            for (let index = 0; index < textures.length; index++) {\r\n                urls.push(textures[index]);\r\n            }\r\n\r\n            return Promise.all(urls.map((url) => {\r\n                if (url) {\r\n                    return task.loader.fetch(url, \"image\", task.progress.createCallback(), task.options);\r\n                }\r\n                else {\r\n                    return Promise.resolve(null);\r\n                }\r\n            })).then(images => {\r\n\r\n                if (LayaGL.renderEngine.getCapable(RenderCapable.Texture3D)) {\r\n                    let tex = new Texture2DArray(width, height, depth, format, mipmap, sRGB);\r\n                    tex.setImageData(images, premultiplyAlpha, invertY);\r\n                    return tex;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"tex2darray\"], Texture2DArrayLoader, Loader.TEXTURE2DARRAY);","import { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IClone } from \"../../utils/IClone\";\r\nimport { BoundBox } from \"./BoundBox\";\r\n\r\n/**\r\n * @en BoundsImpl class is used to create a bounding box.\r\n * @zh BoundsImpl 类用于创建包围体。\r\n */\r\nexport class BoundsImpl implements IClone {\r\n    /**@internal */\r\n    static _UPDATE_MIN: number = 0x01;\r\n    /**@internal */\r\n    static _UPDATE_MAX: number = 0x02;\r\n    /**@internal */\r\n    static _UPDATE_CENTER: number = 0x04;\r\n    /**@internal */\r\n    static _UPDATE_EXTENT: number = 0x08;\r\n    /**@internal\t*/\r\n    protected _updateFlag: number = 0;\r\n    /**@internal\t*/\r\n    _center: Vector3 = new Vector3();\r\n    /**@internal\t*/\r\n    _extent: Vector3 = new Vector3();\r\n    /**@internal\t*/\r\n    _boundBox: BoundBox = new BoundBox(new Vector3(), new Vector3());\r\n\r\n    /**\r\n     * @en The minimum point of the bounding box.\r\n     * @zh 包围盒的最小点。\r\n     */\r\n    get min() {\r\n        return this.getMin();\r\n    }\r\n\r\n    set min(value: Vector3) {\r\n        this.setMin(value);\r\n    }\r\n\r\n    /**\r\n     * @en The maximum point of the bounding box.\r\n     * @zh 包围盒的最大点。\r\n     */\r\n    get max() {\r\n        return this.getMax();\r\n    }\r\n\r\n    set max(value: Vector3) {\r\n        this.setMax(value);\r\n    }\r\n\r\n    /**\r\n     * @en Sets the minimum point of the bounding box.\r\n     * @param value The new minimum point to set for the bounding box.\r\n     * @zh 设置包围盒的最小点。\r\n     * @param value 为包围盒设置的新最小点。\r\n     */\r\n    setMin(value: Vector3): void {\r\n        var min: Vector3 = this._boundBox.min;\r\n        if (value !== min)\r\n            value.cloneTo(min);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the minimum point of the bounding box.\r\n     * @return The minimum point of the bounding box.\r\n     * @zh 获取包围盒的最小点。\r\n     * @return 包围盒的最小点。\r\n     */\r\n    getMin(): Vector3 {\r\n        var min: Vector3 = this._boundBox.min;\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MIN)) {\r\n            this._getMin(this.getCenter(), this.getExtent(), min);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the maximum point of the bounding box.\r\n     * @param value The new maximum point to set for the bounding box.\r\n     * @zh 设置包围盒的最大点。\r\n     * @param value\t要设置的包围盒的新最大点。\r\n     */\r\n    setMax(value: Vector3): void {\r\n        var max: Vector3 = this._boundBox.max;\r\n        if (value !== max)\r\n            value.cloneTo(max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the maximum point of the bounding box.\r\n     * @return The maximum point of the bounding box.\r\n     * @zh 获取包围盒的最大点。\r\n     * @return\t包围盒的最大点。\r\n     */\r\n    getMax(): Vector3 {\r\n        var max: Vector3 = this._boundBox.max;\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_MAX)) {\r\n            this._getMax(this.getCenter(), this.getExtent(), max);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the center point of the bounding box.\r\n     * @param value The new center point to set for the bounding box.\r\n     * @zh 设置包围盒的中心点。\r\n     * @param value\t要设置的包围盒的新中心点。\r\n     */\r\n    setCenter(value: Vector3): void {\r\n        if (value !== this._center)\r\n            value.cloneTo(this._center);\r\n        this._getMin(this._center, this._extent, this._boundBox.min);\r\n        this._getMax(this._center, this._extent, this._boundBox.max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, false);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the center point of the bounding box.\r\n     * @return The center point of the bounding box.\r\n     * @zh 获取包围盒的中心点。\r\n     * @return\t包围盒的中心点。\r\n     */\r\n    getCenter(): Vector3 {\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_CENTER)) {\r\n            this._getCenter(this.getMin(), this.getMax(), this._center);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_CENTER, false);\r\n        }\r\n        return this._center;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the range of the bounding box.\r\n     * @param value The new range to set for the bounding box.\r\n     * @zh 设置包围盒的范围。\r\n     * @param value\t要设置的包围盒的新范围。\r\n     */\r\n    setExtent(value: Vector3): void {\r\n        if (value !== this._extent)\r\n            value.cloneTo(this._extent);\r\n        this._getMin(this._center, this._extent, this._boundBox.min);\r\n        this._getMax(this._center, this._extent, this._boundBox.max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, false);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the range of the bounding box.\r\n     * @return The range of the bounding box.\r\n     * @zh 获取包围盒的范围。\r\n     * @return\t包围盒的范围。\r\n     */\r\n    getExtent(): Vector3 {\r\n        if (this._getUpdateFlag(BoundsImpl._UPDATE_EXTENT)) {\r\n            this._getExtent(this.getMin(), this.getMax(), this._extent);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT, false);\r\n        }\r\n        return this._extent;\r\n    }\r\n\r\n    /**\r\n     * @en Constructor method.\r\n     * @param\tmin  The minimum point of the bounding box.\r\n     * @param\tmax  The maximum point of the bounding box.\r\n     * @zh 构造方法。\r\n     * @param\tmin  min 最小坐标\r\n     * @param\tmax  max 最大坐标。\r\n     */\r\n    constructor(min?: Vector3, max?: Vector3) {\r\n        min && min.cloneTo(this._boundBox.min);\r\n        max && max.cloneTo(this._boundBox.max);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_MIN | BoundsImpl._UPDATE_MAX, false);\r\n        this._setUpdateFlag(BoundsImpl._UPDATE_CENTER | BoundsImpl._UPDATE_EXTENT, true);\r\n    }\r\n\r\n    /**\r\n     * 获得跟新标志\r\n     * @internal\r\n     * @param type 类型 \r\n     * @return void\r\n     */\r\n    protected _getUpdateFlag(type: number): boolean {\r\n        return (this._updateFlag & type) != 0;\r\n    }\r\n\r\n    /**\r\n     * 设置跟新标志\r\n     * @internal\r\n     * @param type 类型 \r\n     * @param value 值 \r\n     * @return void\r\n     */\r\n    protected _setUpdateFlag(type: number, value: boolean): void {\r\n        if (value)\r\n            this._updateFlag |= type;\r\n        else\r\n            this._updateFlag &= ~type;\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒中心值\r\n     * @internal\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getCenter(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.add(min, max, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒范围\r\n     * @internal\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getExtent(min: Vector3, max: Vector3, out: Vector3): void {\r\n        Vector3.subtract(max, min, out);\r\n        Vector3.scale(out, 0.5, out);\r\n    }\r\n\r\n    /**\r\n     * 获得包围盒最小值\r\n     * @internal\r\n     * @param center 中心点\r\n     * @param extent 范围\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _getMin(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.subtract(center, extent, out);\r\n    }\r\n\r\n    /**\r\n      * 获得包围盒最大值\r\n      * @internal\r\n      * @param center 中心点\r\n      * @param extent 范围\r\n      * @param out 返回值\r\n      * @return void\r\n      */\r\n    protected _getMax(center: Vector3, extent: Vector3, out: Vector3): void {\r\n        Vector3.add(center, extent, out);\r\n    }\r\n\r\n    /**\r\n     * 旋转范围\r\n     * @internal\r\n     * @param extent 范围\r\n     * @param rotation 旋转矩阵\r\n     * @param out 返回值\r\n     * @return void\r\n     */\r\n    protected _rotateExtents(extents: Vector3, rotation: Matrix4x4, out: Vector3): void {\r\n        var extentsX: number = extents.x;\r\n        var extentsY: number = extents.y;\r\n        var extentsZ: number = extents.z;\r\n        var matE: Float32Array = rotation.elements;\r\n        out.x = Math.abs(matE[0] * extentsX) + Math.abs(matE[4] * extentsY) + Math.abs(matE[8] * extentsZ);\r\n        out.y = Math.abs(matE[1] * extentsX) + Math.abs(matE[5] * extentsY) + Math.abs(matE[9] * extentsZ);\r\n        out.z = Math.abs(matE[2] * extentsX) + Math.abs(matE[6] * extentsY) + Math.abs(matE[10] * extentsZ);\r\n    }\r\n\r\n    /**\r\n     * 转换包围盒\r\n     * @internal\r\n     * @param matrix 转换矩阵\r\n     * @param out 输出包围盒\r\n     */\r\n    _tranform(matrix: Matrix4x4, out: BoundsImpl): void {\r\n        var outCen: Vector3 = out._center;\r\n        var outExt: Vector3 = out._extent;\r\n\r\n        Vector3.transformCoordinate(this.getCenter(), matrix, outCen);\r\n        this._rotateExtents(this.getExtent(), matrix, outExt);\r\n\r\n        out._boundBox.setCenterAndExtent(outCen, outExt);\r\n        out._updateFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * 获得实际的包围值\r\n     * @internal\r\n     * @returns BoundBox\r\n     */\r\n    _getBoundBox(): BoundBox {\r\n        if (this._updateFlag & BoundsImpl._UPDATE_MIN) {\r\n            var min: Vector3 = this._boundBox.min;\r\n            this._getMin(this.getCenter(), this.getExtent(), min);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MIN, false);\r\n        }\r\n        if (this._updateFlag & BoundsImpl._UPDATE_MAX) {\r\n            var max: Vector3 = this._boundBox.max;\r\n            this._getMax(this.getCenter(), this.getExtent(), max);\r\n            this._setUpdateFlag(BoundsImpl._UPDATE_MAX, false);\r\n        }\r\n        return this._boundBox;\r\n    }\r\n\r\n    /**\r\n     * @en Calculates the intersection volume between this bounds implementation and another `BoundsImpl` instance.\r\n     * @param bounds The `BoundsImpl` instance to calculate the intersection with.\r\n     * @returns -1 if the bounds do not intersect; when not 0, the return value is the intersecting volume\r\n     * @zh 计算此边界实现与另一个 `BoundsImpl` 实例之间的相交体积。\r\n     * @param bounds 要计算相交的 `BoundsImpl` 实例。\r\n     * @returns -1 如果边界不相交；不为0的时候返回值为相交体积。\r\n     */\r\n    calculateBoundsintersection(bounds: BoundsImpl): number {\r\n        var ownMax: Vector3 = this.getMax();\r\n        var ownMin: Vector3 = this.getMin();\r\n        var calMax: Vector3 = bounds.getMax();\r\n        var calMin: Vector3 = bounds.getMin();\r\n        var tempV0: Vector3 = TEMP_VECTOR3_MAX0;\r\n        var tempV1: Vector3 = TEMP_VECTOR3_MAX1;\r\n        var thisExtends: Vector3 = this.getExtent();\r\n        var boundExtends: Vector3 = bounds.getExtent();\r\n        tempV0.setValue(Math.max(ownMax.x, calMax.x) - Math.min(ownMin.x, calMin.x),\r\n            Math.max(ownMax.y, calMax.y) - Math.min(ownMin.y, calMin.y),\r\n            Math.max(ownMax.z, calMax.z) - Math.min(ownMin.z, calMin.z));\r\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0,\r\n            (thisExtends.y + boundExtends.y) * 2.0,\r\n            (thisExtends.z + boundExtends.z) * 2.0);\r\n        if ((tempV0.x) > (tempV1.x)) return -1;\r\n        if ((tempV0.y) > (tempV1.y)) return -1;\r\n        if ((tempV0.z) > (tempV1.z)) return -1;\r\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Clones the current bounding box into another object.\r\n     * @param destObject The destination object to clone into.\r\n     * @zh 将当前包围体克隆到另一个对象中。\r\n     * @param destObject  克隆的目标对象。\r\n     */\r\n    cloneTo(destObject: any): void {\r\n        var destBounds: BoundsImpl = (<BoundsImpl>destObject);\r\n        this.getMin().cloneTo(destBounds._boundBox.min);\r\n        this.getMax().cloneTo(destBounds._boundBox.max);\r\n        this.getCenter().cloneTo(destBounds._center);\r\n        this.getExtent().cloneTo(destBounds._extent);\r\n        destBounds._updateFlag = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Creates a clone of the bounding box.\r\n     * @return A new `BoundsImpl` instance that is a clone of the current bounding box.\r\n     * @zh 创建当前包围体的克隆。\r\n     * @return 一个新的 `BoundsImpl` 实例，是当前包围体的克隆。\r\n     */\r\n    clone(): any {\r\n        var dest: BoundsImpl = new BoundsImpl(new Vector3(), new Vector3());\r\n        this.cloneTo(dest);\r\n        return dest;\r\n    }\r\n}\r\n\r\nconst TEMP_VECTOR3_MAX0 = new Vector3();\r\nconst TEMP_VECTOR3_MAX1 = new Vector3();","import { Ray } from \"./Ray\";\r\nimport { CollisionUtils } from \"./CollisionUtils\";\r\nimport { IClone } from \"../../utils/IClone\"\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en The BoundSphere class is used to create bounding balls.\r\n * @zh BoundSphere 类用于创建包围球。\r\n */\r\nexport class BoundSphere implements IClone {\r\n\tprivate static _tempVector3: Vector3 = new Vector3();\r\n\r\n\t/** @internal 包围球的中心。*/\r\n\t_center: Vector3;\r\n\t/** @internal 包围球的半径。*/\r\n\t_radius: number;\r\n\r\n\t/**\r\n\t * @en The center of the bounding sphere.\r\n\t * @zh 包围球的中心。\r\n\t */\r\n\tget center() {\r\n\t\treturn this._center;\r\n\t}\r\n\r\n\tset center(value: Vector3) {\r\n\t\tvalue.cloneTo(this._center);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en The radius of the bounding sphere.\r\n\t * @zh 包围球的半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @en Constructor method.\r\n\t * @param center The center of the bounding sphere.\r\n\t * @param radius The radius of the bounding sphere.\r\n\t * @zh 构造方法\r\n\t * @param center 包围球的中心。\r\n\t * @param radius 包围球的半径。\r\n\t */\r\n\tconstructor(center: Vector3 = new Vector3, radius: number = 0) {\r\n\t\tthis._center = center;\r\n\t\tthis._radius = radius;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Resets the bound sphere to its default state.\r\n\t * @zh 将包围球重置为其默认状态。\r\n\t */\r\n\ttoDefault(): void {\r\n\t\tthis._center.toDefault();\r\n\t\tthis._radius = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a bounding sphere from a subset of vertex points.\r\n\t * @param points The array of vertex points.\r\n\t * @param start The starting offset of the vertex subset.\r\n\t * @param count The number of vertices in the subset.\r\n\t * @param out The resulting bounding sphere.\r\n\t * @zh 从顶点的子队列生成包围球。\r\n\t * @param points 顶点的队列。\r\n\t * @param start 顶点子队列的起始偏移。\r\n\t * @param count 顶点子队列的顶点数。\r\n\t * @param out 生成的包围球。\r\n\t */\r\n\r\n\tstatic createFromSubPoints(points: Vector3[], start: number, count: number, out: BoundSphere): void {\r\n\t\tif (points == null) {\r\n\t\t\tthrow new Error(\"points\");\r\n\t\t}\r\n\r\n\t\t// Check that start is in the correct range \r\n\t\tif (start < 0 || start >= points.length) {\r\n\t\t\tthrow new Error(\"start\" + start + \"Must be in the range [0, \" + (points.length - 1) + \"]\");\r\n\t\t}\r\n\r\n\t\t// Check that count is in the correct range \r\n\t\tif (count < 0 || (start + count) > points.length) {\r\n\t\t\tthrow new Error(\"count\" + count + \"Must be in the range <= \" + points.length + \"}\");\r\n\t\t}\r\n\r\n\t\tvar upperEnd: number = start + count;\r\n\r\n\t\t//Find the center of all points. \r\n\t\tvar center: Vector3 = BoundSphere._tempVector3;\r\n\t\tcenter.x = 0;\r\n\t\tcenter.y = 0;\r\n\t\tcenter.z = 0;\r\n\t\tfor (var i: number = start; i < upperEnd; ++i) {\r\n\t\t\tVector3.add(points[i], center, center);\r\n\t\t}\r\n\r\n\t\tvar outCenter: Vector3 = out.center;\r\n\t\t//This is the center of our sphere. \r\n\t\tVector3.scale(center, 1 / count, outCenter);\r\n\r\n\t\t//Find the radius of the sphere \r\n\t\tvar radius: number = 0.0;\r\n\t\tfor (i = start; i < upperEnd; ++i) {\r\n\t\t\t//We are doing a relative distance comparison to find the maximum distance \r\n\t\t\t//from the center of our sphere. \r\n\t\t\tvar distance: number = Vector3.distanceSquared(outCenter, points[i]);\r\n\r\n\t\t\tif (distance > radius)\r\n\t\t\t\tradius = distance;\r\n\t\t}\r\n\r\n\t\t//Find the real distance from the DistanceSquared. \r\n\t\tout.radius = Math.sqrt(radius);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Generates a bounding sphere from a vertex point array.\r\n\t * @param points The array of vertex points.\r\n\t * @param out The resulting bounding sphere.\r\n\t * @zh 从顶点队列生成包围球。\r\n\t * @param points 顶点的队列。\r\n\t * @param out 生成的包围球。\r\n\t */\r\n\r\n\tstatic createfromPoints(points: Vector3[], out: BoundSphere): void {\r\n\t\tif (points == null) {\r\n\t\t\tthrow new Error(\"points\");\r\n\t\t}\r\n\r\n\t\tBoundSphere.createFromSubPoints(points, 0, points.length, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines whether a ray intersects with the bounding sphere and returns the distance to the intersection point.\r\n\t * @param ray The ray.\r\n\t * @returns The distance to the intersection point, or -1 if there is no intersection.\r\n\t * @zh 判断射线是否与包围球相交，并返回到交点的距离。\r\n\t * @param ray 射线。\r\n\t * @returns 到交点的距离，如果没有交点则为 -1。\r\n\t */\r\n\tintersectsRayDistance(ray: Ray): number {\r\n\t\treturn CollisionUtils.intersectsRayAndSphereRD(ray, this);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Determines whether a ray intersects with the bounding sphere and returns the intersection point.\r\n\t * @param ray The ray.\r\n\t * @param outPoint The intersection point.\r\n\t * @returns The distance to the intersection point, or -1 if there is no intersection.\r\n\t * @zh 判断射线是否与包围球相交，并返回交点。\r\n\t * @param ray 射线。\r\n\t * @param outPoint 交点。\r\n\t * @returns 到交点的距离，如果没有交点则为 -1。\r\n\t */\r\n\tintersectsRayPoint(ray: Ray, outPoint: Vector3): number {\r\n\t\treturn CollisionUtils.intersectsRayAndSphereRP(ray, this, outPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones this bounding sphere into another object.\r\n\t * @param destObject The destination object to clone into.\r\n\t * @zh 克隆这个包围球到另一个对象。\r\n\t * @param destObject 克隆目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar dest: BoundSphere = (<BoundSphere>destObject);\r\n\t\tthis._center.cloneTo(dest._center);\r\n\t\tdest._radius = this._radius;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Creates a clone of this bounding sphere.\r\n\t * @return A new `BoundSphere` instance that is a clone of this one.\r\n\t * @zh 创建这个包围球的克隆。\r\n\t * @return 一个新的 `BoundSphere` 实例，是当前包围球的克隆。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoundSphere = new BoundSphere(new Vector3(), 0);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n}\r\n\r\n","/**\r\n * @en The `RandX` class is used to generate random numbers using a 128-bit integer seed. The algorithm comes from the provided link: https://github.com/AndreasMadsen/xorshift\r\n * @zh `RandX` 类用于通过128位整型种子创建随机数。算法来自提供的链接：https://github.com/AndreasMadsen/xorshift\r\n */\r\nexport class RandX {\r\n\t/**@internal */\r\n\tprivate static _CONVERTION_BUFFER: DataView = new DataView(new ArrayBuffer(8));\r\n\r\n\t/**@internal */\r\n\tprivate _state0U: number;\r\n\t/**@internal */\r\n\tprivate _state0L: number;\r\n\t/**@internal */\r\n\tprivate _state1U: number;\r\n\t/**@internal */\r\n\tprivate _state1L: number;\r\n\r\n\t/**\r\n\t * @en A random number generator seeded based on the current time.\r\n\t * @zh 基于当前时间种子的随机数生成器。\r\n\t */\r\n\tstatic defaultRand: RandX = new RandX([0, Date.now() / 65536, 0, Date.now() % 65536]);\r\n\r\n\t/**\r\n\t * @en Constructor method.\r\n\t * @param seed  Random seed.\r\n\t * @zh 构造方法\r\n\t * @param seed  随机种子。\r\n\t */\r\n\tconstructor(seed: any[]) {\r\n\t\tif (!(seed instanceof Array) || seed.length !== 4)\r\n\t\t\tthrow new Error('Rand:Seed must be an array with 4 numbers');\r\n\r\n\t\tthis._state0U = seed[0] | 0;\r\n\t\tthis._state0L = seed[1] | 0;\r\n\t\tthis._state1U = seed[2] | 0;\r\n\t\tthis._state1L = seed[3] | 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Return a 64 bit random number through a 2x32-bit array.\r\n\t * @returns 64 bit random number.\r\n\t * @zh 通过2x32位的数组，返回64位的随机数。\r\n\t * @returns 64位的随机数。\r\n\t */\r\n\trandomint(): any[] {\r\n\t\t// uint64_t s1 = s[0]\r\n\t\tvar s1U: number = this._state0U, s1L: number = this._state0L;\r\n\t\t// uint64_t s0 = s[1]\r\n\t\tvar s0U: number = this._state1U, s0L: number = this._state1L;\r\n\r\n\t\t// result = s0 + s1\r\n\t\tvar sumL: number = (s0L >>> 0) + (s1L >>> 0);\r\n\t\tvar resU: number = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\r\n\t\tvar resL: number = sumL >>> 0;\r\n\r\n\t\t// s[0] = s0\r\n\t\tthis._state0U = s0U;\r\n\t\tthis._state0L = s0L;\r\n\r\n\t\t// - t1 = [0, 0]\r\n\t\tvar t1U: number = 0, t1L: number = 0;\r\n\t\t// - t2 = [0, 0]\r\n\t\tvar t2U: number = 0, t2L: number = 0;\r\n\r\n\t\t// s1 ^= s1 << 23;\r\n\t\t// :: t1 = s1 << 23\r\n\t\tvar a1: number = 23;\r\n\t\tvar m1: number = 0xFFFFFFFF << (32 - a1);\r\n\t\tt1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\r\n\t\tt1L = s1L << a1;\r\n\t\t// :: s1 = s1 ^ t1\r\n\t\ts1U = s1U ^ t1U;\r\n\t\ts1L = s1L ^ t1L;\r\n\r\n\t\t// t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\r\n\t\t// :: t1 = s1 ^ s0\r\n\t\tt1U = s1U ^ s0U;\r\n\t\tt1L = s1L ^ s0L;\r\n\t\t// :: t2 = s1 >> 18\r\n\t\tvar a2: number = 18;\r\n\t\tvar m2: number = 0xFFFFFFFF >>> (32 - a2);\r\n\t\tt2U = s1U >>> a2;\r\n\t\tt2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\t\t// :: t2 = s0 >> 5\r\n\t\tvar a3: number = 5;\r\n\t\tvar m3: number = 0xFFFFFFFF >>> (32 - a3);\r\n\t\tt2U = s0U >>> a3;\r\n\t\tt2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\r\n\t\t// :: t1 = t1 ^ t2\r\n\t\tt1U = t1U ^ t2U;\r\n\t\tt1L = t1L ^ t2L;\r\n\r\n\t\t// s[1] = t1\r\n\t\tthis._state1U = t1U;\r\n\t\tthis._state1L = t1L;\r\n\r\n\t\t// return result\r\n\t\treturn [resU, resL];\r\n\t}\r\n\r\n\t/**\r\n\t * @en Returns a random number in the range [0, 1).\r\n\t * @returns A random number in the range [0, 1).\r\n\t * @zh 返回一个介于[0, 1)范围内的随机数。\r\n\t * @returns 介于[0, 1)范围内的随机数。\r\n\t */\r\n\trandom(): number {\r\n\t\t// :: t2 = randomint()\r\n\t\tvar t2: any[] = this.randomint();\r\n\t\tvar t2U: number = t2[0];\r\n\t\tvar t2L: number = t2[1];\r\n\r\n\t\t// :: e = UINT64_C(0x3FF) << 52\r\n\t\tvar eU: number = 0x3FF << (52 - 32);\r\n\t\tvar eL: number = 0;\r\n\r\n\t\t// :: s = t2 >> 12\r\n\t\tvar a1: number = 12;\r\n\t\tvar m1: number = 0xFFFFFFFF >>> (32 - a1);\r\n\t\tvar sU: number = t2U >>> a1;\r\n\t\tvar sL: number = (t2L >>> a1) | ((t2U & m1) << (32 - a1));\r\n\r\n\t\t// :: x = e | s\r\n\t\tvar xU: number = eU | sU;\r\n\t\tvar xL: number = eL | sL;\r\n\r\n\t\t// :: double d = *((double *)&x)\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(0, xU, false);\r\n\t\tRandX._CONVERTION_BUFFER.setUint32(4, xL, false);\r\n\t\tvar d: number = RandX._CONVERTION_BUFFER.getFloat64(0, false);\r\n\r\n\t\t// :: d - 1\r\n\t\treturn d - 1;\r\n\t}\r\n}\r\n\r\n\r\n","/**\r\n * @en Shadow Light enum\r\n * @zh 阴影光类型\r\n */\r\n export enum ShadowLightType {\r\n    /**\r\n     * @en Directional Light\r\n     * @zh 方向光 \r\n     */\r\n    DirectionLight,\r\n    /**\r\n     * @en Spot Light\r\n     * @zh 聚光 \r\n     */\r\n    SpotLight,\r\n    /**\r\n     * @en Point Light\r\n     * @zh 点光\r\n     */\r\n    PointLight\r\n}","import { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { IBaseRenderNode } from \"../../RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { ShaderDefine } from \"../../RenderModuleData/Design/ShaderDefine\";\r\nimport { InternalRenderTarget } from \"../RenderDevice/InternalRenderTarget\";\r\nimport { InternalTexture } from \"../RenderDevice/InternalTexture\";\r\nimport { ShaderDataItem, ShaderDataType, ShaderData } from \"../RenderDevice/ShaderData\";\r\nimport { IRenderContext3D, IRenderElement3D } from \"./I3DRenderPass\";\r\n\r\nexport enum RenderCMDType {\r\n    DrawNode,\r\n    DrawElement,\r\n    Blit,\r\n    ChangeData,\r\n    ChangeShaderDefine,\r\n    ChangeViewPort,\r\n    ChangeRenderTarget\r\n}\r\n\r\n//cmd\r\nexport interface IRenderCMD {\r\n    type: RenderCMDType;\r\n    apply(context: IRenderContext3D): void;\r\n}\r\n\r\nexport class DrawNodeCMDData implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _node: IBaseRenderNode;\r\n    protected _destShaderData: ShaderData;\r\n    protected _destSubShader: SubShader;\r\n    protected _subMeshIndex: number;\r\n\r\n    get node(): IBaseRenderNode {\r\n        return this._node;\r\n    }\r\n\r\n    set node(value: IBaseRenderNode) {\r\n        this._node = value;\r\n    }\r\n\r\n    get destShaderData(): ShaderData {\r\n        return this._destShaderData;\r\n    }\r\n\r\n    set destShaderData(value: ShaderData) {\r\n        this._destShaderData = value;\r\n    }\r\n\r\n    get destSubShader(): SubShader {\r\n        return this._destSubShader;\r\n    }\r\n\r\n    set destSubShader(value: SubShader) {\r\n        this._destSubShader = value;\r\n    }\r\n\r\n    get subMeshIndex(): number {\r\n        return this._subMeshIndex;\r\n    }\r\n\r\n    set subMeshIndex(value: number) {\r\n        this._subMeshIndex = value;\r\n    }\r\n    \r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class BlitQuadCMDData implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _dest: InternalRenderTarget;\r\n    protected _viewport: Viewport;\r\n    protected _scissor: Vector4;\r\n    protected _source: InternalTexture;\r\n    protected _offsetScale: Vector4;\r\n    protected _element: IRenderElement3D;\r\n\r\n    public get element(): IRenderElement3D {\r\n        return this._element;\r\n    }\r\n    public set element(value: IRenderElement3D) {\r\n        this._element = value;\r\n    }\r\n\r\n    get dest(): InternalRenderTarget {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: InternalRenderTarget) {\r\n        this._dest = value;\r\n    }\r\n\r\n    get viewport(): Viewport {\r\n        return this._viewport;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        this._viewport = value;\r\n    }\r\n\r\n    get scissor(): Vector4 {\r\n        return this._scissor;\r\n    }\r\n\r\n    set scissor(value: Vector4) {\r\n        this._scissor = value;\r\n    }\r\n\r\n    get source(): InternalTexture {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: InternalTexture) {\r\n        this._source = value;\r\n    }\r\n\r\n    get offsetScale(): Vector4 {\r\n        return this._offsetScale;\r\n    }\r\n\r\n    set offsetScale(value: Vector4) {\r\n        this._offsetScale = value;\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class DrawElementCMDData implements IRenderCMD {\r\n    type: RenderCMDType;\r\n\r\n    setRenderelements(value: IRenderElement3D[]): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class SetViewportCMD implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _viewport: Viewport;\r\n    protected _scissor: Vector4;\r\n\r\n    public get viewport(): Viewport {\r\n        return this._viewport;\r\n    }\r\n\r\n    public set viewport(value: Viewport) {\r\n        this._viewport = value;\r\n    }\r\n\r\n    public get scissor(): Vector4 {\r\n        return this._scissor;\r\n    }\r\n\r\n    public set scissor(value: Vector4) {\r\n        this._scissor = value;\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class SetRenderTargetCMD implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _rt: InternalRenderTarget;\r\n    protected _clearFlag: number;\r\n    protected _clearDepthValue: number;\r\n    protected _clearStencilValue: number;\r\n    protected _clearColorValue: Color;\r\n\r\n    get rt(): InternalRenderTarget {\r\n        return this._rt;\r\n    }\r\n\r\n    set rt(value: InternalRenderTarget) {\r\n        this._rt = value;\r\n    }\r\n\r\n    get clearFlag(): number {\r\n        return this._clearFlag;\r\n    }\r\n\r\n    set clearFlag(value: number) {\r\n        this._clearFlag = value;\r\n    }\r\n\r\n    get clearDepthValue(): number {\r\n        return this._clearDepthValue;\r\n    }\r\n\r\n    set clearDepthValue(value: number) {\r\n        this._clearDepthValue = value;\r\n    }\r\n\r\n    get clearStencilValue(): number {\r\n        return this._clearStencilValue;\r\n    }\r\n\r\n    set clearStencilValue(value: number) {\r\n        this._clearStencilValue = value;\r\n    }\r\n\r\n    get clearColorValue(): Color {\r\n        return this._clearColorValue;\r\n    }\r\n\r\n    set clearColorValue(value: Color) {\r\n        this._clearColorValue = value;\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class SetRenderDataCMD implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _value: ShaderDataItem;\r\n    protected _dataType: ShaderDataType;\r\n    protected _propertyID: number;\r\n    protected _dest: ShaderData;\r\n\r\n    get value(): ShaderDataItem {\r\n        return this._value;\r\n    }\r\n\r\n    set value(value: ShaderDataItem) {\r\n        this._value = value;\r\n    }\r\n\r\n    get dataType(): ShaderDataType {\r\n        return this._dataType;\r\n    }\r\n\r\n    set dataType(value: ShaderDataType) {\r\n        this._dataType = value;\r\n    }\r\n\r\n    get propertyID(): number {\r\n        return this._propertyID;\r\n    }\r\n\r\n    set propertyID(value: number) {\r\n        this._propertyID = value;\r\n    }\r\n\r\n    get dest(): ShaderData {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: ShaderData) {\r\n        this._dest = value;\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\nexport class SetShaderDefineCMD implements IRenderCMD {\r\n    type: RenderCMDType;\r\n    protected _define: ShaderDefine;\r\n    protected _dest: ShaderData;\r\n    protected _add: boolean;\r\n\r\n    get define(): ShaderDefine {\r\n        return this._define;\r\n    }\r\n\r\n    set define(value: ShaderDefine) {\r\n        this._define = value;\r\n    }\r\n\r\n    get dest(): ShaderData {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: ShaderData) {\r\n        this._dest = value;\r\n    }\r\n\r\n    get add(): boolean {\r\n        return this._add;\r\n    }\r\n\r\n    set add(value: boolean) {\r\n        this._add = value;\r\n    }\r\n\r\n    apply(context: IRenderContext3D): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\n\r\n","export enum ECharacterCapable {\r\n    //Charcater_AllowSleep,   // 允许睡眠\r\n    //Charcater_AllowTrigger, // 运行触发器\r\n    /**\r\n     * @en Gravity applied to the character.\r\n     * @zh 应用于角色的重力。\r\n     */\r\n    Charcater_Gravity,  \r\n    /**\r\n     * @en Collision group for the character.\r\n     * @zh 角色的碰撞分组。\r\n     */\r\n    Charcater_CollisionGroup, \r\n    //Charcater_Friction,   // 摩擦力\r\n    //Charcater_RollingFriction,    // 滚动摩擦力\r\n    //Charcater_Restitution,    // 弹力\r\n    /**\r\n     * @en World position of the character.\r\n     * @zh 角色在世界坐标中的位置。\r\n     */\r\n    Charcater_WorldPosition,    \r\n    /**\r\n     * @en Directional movement of the character.\r\n     * @zh 角色的方向移动。\r\n     */\r\n    Charcater_Move, \r\n    /**\r\n     * @en Jump capability of the character.\r\n     * @zh 角色的跳跃能力。\r\n     */\r\n    Charcater_Jump, \r\n    /**\r\n     * @en Step offset for the character.\r\n     * @zh 角色的步幅偏移。\r\n     */\r\n    Charcater_StepOffset,   \r\n    /**\r\n     * @en Up direction of the character.\r\n     * @zh 角色的向上方向。\r\n     */\r\n    Character_UpDirection,  \r\n    /**\r\n     * @en Fall speed of the character.\r\n     * @zh 角色的下落速度。\r\n     */\r\n    Character_FallSpeed, \r\n    /**\r\n     * @en Slope limit for the character.\r\n     * @zh 角色的坡度限制。\r\n     */\r\n    Character_SlopeLimit,   \r\n    /**\r\n     * @en Force when character collides with other objects.\r\n     * @zh 角色碰撞其他物体的力。\r\n     */\r\n    Character_PushForce,    \r\n    /**\r\n     * @en Radius of the character.\r\n     * @zh 角色的半径。\r\n     */\r\n    Character_Radius,   \r\n    /**\r\n     * @en Height of the character.\r\n     * @zh 角色的高度。\r\n     */\r\n    Character_Height,   \r\n    /**\r\n     * @en Offset of the character.\r\n     * @zh 角色的偏移。\r\n     */\r\n    Character_offset,   \r\n    /**\r\n     * @en Skin of the character.\r\n     * @zh 角色的皮肤。\r\n     */\r\n    Character_Skin,   \r\n    /**\r\n     * @en Minimum distance for the character.\r\n     * @zh 角色的最小距离。\r\n     */\r\n    Character_minDistance,\r\n    /**\r\n     * @en Event filter for the character controller.\r\n     * @zh 角色控制器的事件过滤器。\r\n     */\r\n    Character_EventFilter, \r\n    /**\r\n     * @en Simulate gravity for the character controller.\r\n     * @zh 模拟角色控制器的重力。\r\n     */\r\n    Character_SimulateGravity,  \r\n}","export enum EColliderCapable {\r\n    /**\r\n     * @en Collision group for the collider.\r\n     * @zh 碰撞体的碰撞分组。\r\n     */\r\n    Collider_CollisionGroup, \r\n    /**\r\n     * @en Friction of the collider.\r\n     * @zh 碰撞体的摩擦力。\r\n     */\r\n    Collider_Friction,   \r\n    /**\r\n     * @en Rolling friction of the collider.\r\n     * @zh 碰撞体的滚动摩擦力。\r\n     */\r\n    Collider_RollingFriction,    \r\n    /**\r\n     * @en Restitution (bounciness) of the collider.\r\n     * @zh 碰撞体的弹力。\r\n     */\r\n    Collider_Restitution,    \r\n    /**\r\n     * @en Whether the collider supports triggers.\r\n     * @zh 碰撞体是否支持触发器。\r\n     */\r\n    Collider_AllowTrigger, \r\n    /**\r\n     * @en Dynamic friction of the collider.\r\n     * @zh 碰撞体的动态摩擦力。\r\n     */\r\n    Collider_DynamicFriction,\r\n    /**\r\n     * @en Static friction of the collider.\r\n     * @zh 碰撞体的静态摩擦力。\r\n     */\r\n    Collider_StaticFriction,\r\n    /**\r\n     * @en Bounce combine mode of the collider.\r\n     * @zh 碰撞体的弹力组合模式。\r\n     */\r\n    Collider_BounceCombine,\r\n    /**\r\n     * @en Friction combine mode of the collider.\r\n     * @zh 碰撞体的摩擦力组合模式。\r\n     */\r\n    Collider_FrictionCombine,\r\n    /**\r\n     * @en Event filter for the collider.\r\n     * @zh 碰撞体的事件过滤器。\r\n     */\r\n    Collider_EventFilter,   \r\n    /**\r\n     * @en Collision detection mode for the collider.\r\n     * @zh 碰撞体的碰撞检测模式。\r\n     */\r\n    Collider_CollisionDetectionMode, \r\n\r\n    // RigidBody刚体能力\r\n    /**\r\n     * @en Whether the rigid body supports kinematic mode.\r\n     * @zh 刚体是否支持运动学模式。\r\n     */\r\n    RigidBody_CanKinematic,   \r\n    /**\r\n     * @en Whether the rigid body supports sleeping.\r\n     * @zh 刚体是否支持睡眠。\r\n     */\r\n    RigidBody_AllowSleep,   \r\n    /**\r\n     * @en Gravity applied to the rigid body.\r\n     * @zh 应用于刚体的重力。\r\n     */\r\n    RigidBody_Gravity,   \r\n    /**\r\n     * @en Linear damping of the rigid body.\r\n     * @zh 刚体的线性阻尼。\r\n     */\r\n    RigidBody_LinearDamp, \r\n    /**\r\n     * @en Angular damping of the rigid body.\r\n     * @zh 刚体的角度阻尼。\r\n     */\r\n    RigidBody_AngularDamp,    \r\n    /**\r\n     * @en Linear velocity of the rigid body.\r\n     * @zh 刚体的线速度。\r\n     */\r\n    RigidBody_LinearVelocity, \r\n    /**\r\n     * @en Angular velocity of the rigid body.\r\n     * @zh 刚体的角速度。\r\n     */\r\n    RigidBody_AngularVelocity,    \r\n    /**\r\n     * @en Mass of the rigid body.\r\n     * @zh 刚体的质量。\r\n     */\r\n    RigidBody_Mass,  \r\n    /**\r\n     * @en World position of the rigid body.\r\n     * @zh 刚体在世界坐标中的位置。\r\n     */\r\n    RigidBody_WorldPosition,   \r\n    /**\r\n     * @en World orientation of the rigid body.\r\n     * @zh 刚体在世界坐标中的旋转。\r\n     */\r\n    RigidBody_WorldOrientation,   \r\n    /**\r\n     * @en Inertia tensor of the rigid body.\r\n     * @zh 刚体的惯性张量。\r\n     */\r\n    RigidBody_InertiaTensor,  \r\n    /**\r\n     * @en Center of mass of the rigid body.\r\n     * @zh 刚体的重心。\r\n     */\r\n    RigidBody_MassCenter, \r\n    /**\r\n     * @en Maximum angular velocity of the rigid body.\r\n     * @zh 刚体的最大角速度。\r\n     */\r\n    RigidBody_MaxAngularVelocity, \r\n    /**\r\n     * @en Maximum depenetration velocity of the rigid body.\r\n     * @zh 刚体的最大侵入速度。\r\n     */\r\n    RigidBody_MaxDepenetrationVelocity,   \r\n    /**\r\n     * @en Sleep threshold of the rigid body. \r\n     * @zh 刚体的睡眠阈值。\r\n     */\r\n    RigidBody_SleepThreshold, //可能是bug TODO\r\n    /**\r\n     * @en Sleep angular velocity of the rigid body. \r\n     * @zh 刚体的睡眠角速度。\r\n     */\r\n    RigidBody_SleepAngularVelocity,   // 调用的是睡眠阈值接口是否有问题 TODO\r\n    /**\r\n     * @en Number of physics iterations for the rigid body.\r\n     * @zh 刚体的物理迭代次数。\r\n     */\r\n    RigidBody_SolverIterations,   \r\n    /**\r\n     * @en Whether the rigid body supports dynamic switching of object types.\r\n     * @zh 刚体是否支持动态切换物体类型。\r\n     */\r\n    RigidBody_AllowDetectionMode,   \r\n    /**\r\n     * @en Whether the rigid body supports kinematic mode.\r\n     * @zh 刚体是否支持运动学模式。\r\n     */\r\n    RigidBody_AllowKinematic,   \r\n    /**\r\n     * @en Whether the rigid body supports character mode.\r\n     * @zh 刚体是否支持角色模式。\r\n     */\r\n    RigidBody_AllowCharacter,   \r\n    /**\r\n     * @en Linear velocity scale factor of the rigid body.\r\n     * @zh 刚体的线速度缩放因子。\r\n     */\r\n    RigidBody_LinearFactor,   \r\n    /**\r\n     * @en Angular velocity scale factor of the rigid body.\r\n     * @zh 刚体的角速度缩放因子。\r\n     */\r\n    RigidBody_AngularFactor,  \r\n    /**\r\n     * @en Apply force to the rigid body.\r\n     * @zh 对刚体施加力。\r\n     */\r\n    RigidBody_ApplyForce, \r\n    /**\r\n     * @en Clear forces applied to the rigid body.\r\n     * @zh 清除施加在刚体上的力。\r\n     */\r\n    RigidBody_ClearForce, \r\n    /**\r\n     * @en Apply force at an offset position to the rigid body.\r\n     * @zh 对刚体施加偏移位置的力。\r\n     */\r\n    RigidBody_ApplyForceWithOffset,    \r\n    /**\r\n     * @en Apply torque to the rigid body.\r\n     * @zh 对刚体施加扭力。\r\n     */\r\n    RigidBody_ApplyTorque,    \r\n    /**\r\n     * @en Apply impulse to the rigid body.\r\n     * @zh 对刚体施加冲量。\r\n     */\r\n    RigidBody_ApplyImpulse,   \r\n    /**\r\n     * @en Apply torque impulse to the rigid body.\r\n     * @zh 对刚体施加扭力冲量。\r\n     */\r\n    RigidBody_ApplyTorqueImpulse, \r\n}","export enum EJointCapable {\r\n    /**\r\n     * @en The anchor point of the joint.\r\n     * @zh 关节的锚点。\r\n     */\r\n    Joint_Anchor,   \r\n    /**\r\n     * @en The connected anchor point of the joint.\r\n     * @zh 关节的连接锚点。\r\n     */\r\n    Joint_ConnectAnchor,    \r\n}","import { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IJoint } from \"./IJoint\";\r\n/**\r\n * @en Enumeration of motion types for a 6-degree-of-freedom joint.\r\n * @zh 6自由度关节的运动类型枚举。\r\n */\r\nexport enum D6MotionType {\r\n    /**\r\n     * @en Motion along the X axis\r\n     * @zh X轴方向的运动\r\n     */\r\n    eX = 0,\t\r\n    /**\r\n     * @en Motion along the Y axis\r\n     * @zh Y轴方向的运动\r\n     */\r\n    eY = 1,\t\r\n    /**\r\n     * @en Motion along the Z axis\r\n     * @zh Z轴方向的运动\r\n     */\r\n    eZ = 2,\t\r\n    /**\r\n     * @en Motion around the X axis\r\n     * @zh 绕X轴的运动\r\n     */\r\n    eTWIST = 3,\t\r\n    /**\r\n     * @en Motion around the Y axis \r\n     * @zh 绕Y轴的运动\r\n     */\r\n    eSWING1 = 4,\t\r\n    /**\r\n     * @en Motion around the Z axis \r\n     * @zh 绕Z轴的运动\r\n     */\r\n    eSWING2 = 5,\t\r\n}\r\n\r\n/**\r\n * @en Enumeration of axis states for a 6-degree-of-freedom joint.\r\n * @zh 6自由度关节的轴状态枚举。\r\n */\r\nexport enum D6Axis {\r\n    /**\r\n     * @en The degree of freedom is locked, not allowing relative motion.\r\n     * @zh 自由度被锁定，不允许相对运动。\r\n     */\r\n    eLOCKED,\t\r\n    /**\r\n     * @en The degree of freedom is limited, only allowing motion within a specific range.\r\n     * @zh 自由度受限，只允许在特定范围内运动。\r\n     */\r\n    eLIMITED,\t\r\n    /**\r\n     * @en The degree of freedom is free, allowing its full range of motion.\r\n     * @zh 自由度是自由的，允许其全范围运动。\r\n     */\r\n    eFREE\t\r\n}\r\n\r\n/**\r\n * @en Enumeration of drive types for a 6-degree-of-freedom joint.\r\n * @zh 6自由度关节的驱动类型枚举。\r\n */\r\nexport enum D6Drive {\r\n    /**\r\n     * @en Drive along the X-axis\r\n     * @zh 沿X轴驱动\r\n     */\r\n    eX = 0,\t\r\n    /**\r\n     * @en Drive along the Y-axis\r\n     * @zh 沿Y轴驱动\r\n     */\r\n    eY = 1,\t\r\n    /**\r\n     * @en Drive along the Z-axis\r\n     * @zh 沿Z轴驱动\r\n     */\r\n    eZ = 2,\t\r\n    /**\r\n     * @en Drive of displacement from the X-axis\r\n     * @zh 相对于X轴的位移驱动\r\n     */\r\n    eSWING = 3,\t\r\n    /**\r\n     * @en Drive of the displacement around the X-axis\r\n     * @zh 绕X轴的位移驱动\r\n     */\r\n    eTWIST = 4,\t\r\n    /**\r\n     * @en Drive of all three angular degrees along a SLERP-path\r\n     * @zh 沿SLERP路径的三个角度自由度的驱动\r\n     */\r\n    eSLERP = 5,\t\r\n}\r\n\r\n/**\r\n * @en Interface for a 6-degree-of-freedom joint in the physics system.\r\n * @zh 物理系统中6自由度关节的接口。\r\n */\r\nexport interface ID6Joint extends IJoint {\r\n    /**\r\n     * @en Set the primary and secondary axes for the joint.\r\n     * @param axis The primary axis.\r\n     * @param secendary The secondary axis.\r\n     * @zh 设置关节的主轴和次轴。\r\n     * @param axis 主轴。\r\n     * @param secendary 次轴。\r\n     */\r\n    setAxis(axis: Vector3, secendary: Vector3): void;\r\n    /**\r\n     * @en Set the motion type around the specified axis.\r\n     * @param axis The axis to set.\r\n     * @param motionType The type of motion to set.\r\n     * @zh 设置指定轴的运动类型。\r\n     * @param axis 轴。\r\n     * @param motionType 运动类型。\r\n     */\r\n    setMotion(axis: D6Axis, motionType: D6MotionType): void;\r\n    /**\r\n     * @en Set Distance limit Params\r\n     * @param limit The distance limit.\r\n     * @param bounciness The bounciness of the limit.\r\n     * @param bounceThreshold The bounce threshold.\r\n     * @param spring The spring coefficient.\r\n     * @param damp The damping coefficient.\r\n     * @zh 设置关节的距离限制参数。\r\n     * @param limit 距离限制。\r\n     * @param bounciness 限制的弹性。\r\n     * @param bounceThreshold 弹跳阈值。\r\n     * @param spring 弹簧系数。\r\n     * @param damp 阻尼系数。\r\n     */\r\n    setDistanceLimit(limit: number, bounciness: number, bounceThreshold: number, spring: number, damp: number): void;\r\n    /**\r\n     * @en x,y,z linear Limit.\r\n     * @param linearAxis The axis to set the limit for.\r\n     * @param upper The upper limit.\r\n     * @param lower The lower limit.\r\n     * @param bounciness The bounciness of the limit.\r\n     * @param bounceThreshold The bounce threshold.\r\n     * @param spring The spring coefficient.\r\n     * @param damping The damping coefficient.\r\n     * @zh 设置x,y,z轴的线性限制。\r\n     * @param linearAxis 轴。\r\n     * @param upper 上限。\r\n     * @param lower 下限。\r\n     * @param bounciness 弹性。\r\n     * @param bounceThreshold 弹跳阈值。\r\n     * @param spring 弹簧系数。\r\n     * @param damping 阻尼系数。\r\n     */\r\n    setLinearLimit(linearAxis: D6MotionType, upper: number, lower: number, bounciness: number, bounceThreshold: number, spring: number, damping: number): void;\r\n    /**\r\n     * @en The twist limit controls the range of motion around the twist axis.\r\n     * @param upper The upper limit of the twist.\r\n     * @param lower The lower limit of the twist.\r\n     * @param bounciness The bounciness of the limit.\r\n     * @param bounceThreshold The bounce threshold.\r\n     * @param spring The spring coefficient.\r\n     * @param damping The damping coefficient.\r\n     * @zh 扭转限制控制绕扭转轴的运动范围。\r\n     * @param upper 扭转轴的上限。\r\n     * @param lower 扭转轴的下限。\r\n     * @param bounciness 弹性。\r\n     * @param bounceThreshold 弹跳阈值。\r\n     * @param spring 弹簧系数。\r\n     * @param damping 阻尼系数。\r\n     */\r\n    setTwistLimit(upper: number, lower: number, bounciness: number, bounceThreshold: number, spring: number, damping: number): void;\r\n    /**\r\n     * @en Set the cone-like swing limit for the joint.\r\n     * @param yAngle The angle limit around the Y axis.\r\n     * @param zAngle The angle limit around the Z axis.\r\n     * @param bounciness The bounciness of the limit.\r\n     * @param bounceThreshold The bounce threshold.\r\n     * @param spring The spring coefficient.\r\n     * @param damping The damping coefficient.\r\n     * @zh 设置关节的锥形摆动限制。\r\n     * @param yAngle Y轴的角度限制。\r\n     * @param zAngle Z轴的角度限制。\r\n     * @param bounciness 弹性。\r\n     * @param bounceThreshold 弹跳阈值。\r\n     * @param spring 弹簧系数。\r\n     * @param damping 阻尼系数。\r\n     */\r\n    setSwingLimit(yAngle: number, zAngle: number, bounciness: number, bounceThreshold: number, spring: number, damping: number): void;\r\n    /**\r\n     * @en Set the drive parameters for a specific drive type.\r\n     * @param index The drive type to set.\r\n     * @param stiffness The stiffness of the drive.\r\n     * @param damping The damping of the drive.\r\n     * @param forceLimit The force limit of the drive.\r\n     * @zh 设置特定驱动类型的驱动参数。\r\n     * @param index 驱动类型。\r\n     * @param stiffness 刚度。\r\n     * @param damping 阻尼。\r\n     * @param forceLimit 力限。\r\n     */\r\n    setDrive(index: D6Drive, stiffness: number, damping: number, forceLimit: number): void;\r\n    /**\r\n     * @en Set the drive transform for the joint.\r\n     * @param position The target position.\r\n     * @param rotate The target rotation.\r\n     * @zh 设置关节的驱动变换。\r\n     * @param position 目标位置。\r\n     * @param rotate 目标旋转。\r\n     */\r\n    setDriveTransform(position: Vector3, rotate: Quaternion): void;\r\n    /**\r\n     * @en Set the drive velocity for the joint.\r\n     * @param position The linear velocity.\r\n     * @param angular The angular velocity.\r\n     * @zh 设置关节的驱动速度。\r\n     * @param position 线速度。\r\n     * @param angular 角速度。\r\n     */\r\n    setDriveVelocity(position: Vector3, angular: Vector3): void;\r\n    /**\r\n     * @en Get the twist angle of the joint, in the range (-2*Pi, 2*Pi].\r\n     * @zh 获取关节的扭转角度，范围为(-2*Pi, 2*Pi]。\r\n     */\r\n    getTwistAngle(): number\r\n    /**\r\n     * @en Get the swing angle of the joint from the Y axis.\r\n     * @zh 获取关节相对于Y轴的摆动角度。\r\n     */\r\n    getSwingYAngle(): number;\r\n    /**\r\n     * @en Get the swing angle of the joint from the Z axis.\r\n     * @zh 获取关节相对于Z轴的摆动角度。\r\n     */\r\n    getSwingZAngle(): number;\r\n}","import { Plane } from \"../math/Plane\";\r\nimport { BoundSphere } from \"../math/BoundSphere\";\r\nimport { Matrix4x4 } from \"../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BoundFrustum } from \"../math/BoundFrustum\";\r\nimport { ShaderData } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Config3D } from \"../../../Config3D\";\r\nimport { UniformBufferObject } from \"../../RenderEngine/UniformBufferObject\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { BaseCamera } from \"../core/BaseCamera\";\r\nimport { UnifromBufferData } from \"../../RenderEngine/UniformBufferData\";\r\n\r\n\r\n\r\n/**\r\n * @en Camera culling information class.\r\n * @zh 摄像机裁剪信息类。\r\n */\r\nexport class CameraCullInfo {\r\n    /**\r\n     * @en Position of the camera in the scene.\r\n     * @zh 摄像机在场景中的位置。\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * @en Whether to use occlusion culling.\r\n     * @zh 是否遮挡剔除 \r\n     */\r\n    useOcclusionCulling: Boolean;\r\n    /**\r\n     * @en Frustum that bounds the camera's view.\r\n     * @zh 摄像机视锥体的包围盒。\r\n     */\r\n    boundFrustum: BoundFrustum;\r\n    /**\r\n     * @en Occlusion Mask\r\n     * @zh 遮挡标记 \r\n     */\r\n    cullingMask: number;\r\n    /**\r\n     * @en Static Mask\r\n     * @zh 静态标记 \r\n     */\r\n    staticMask: number;\r\n\r\n    /**\r\n     * @en Create a new instance of CameraCullInfo.\r\n     * @zh 创建 CameraCullInfo 类的新实例。\r\n     */\r\n    constructor() {\r\n        this.boundFrustum = new BoundFrustum(new Matrix4x4());\r\n    }\r\n}\r\n\r\n/**\r\n * @en Shadow culling information.\r\n * @zh 阴影裁剪信息\r\n */\r\nexport class ShadowCullInfo {\r\n    /**\r\n     * @en Position.\r\n     * @zh 位置。\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * @en Direction.\r\n     * @zh 方向。\r\n     */\r\n    direction: Vector3;\r\n    /**\r\n     * @en Array of planes used for culling.\r\n     * @zh 用于裁剪的平面数组。\r\n     */\r\n    cullPlanes: Plane[];\r\n    /**\r\n     * @en Sphere used for culling.\r\n     * @zh 用于裁剪的球体。\r\n     */\r\n    cullSphere: BoundSphere;\r\n    /**\r\n     * @en Number of culling planes.\r\n     * @zh 裁剪平面的数量。\r\n     */\r\n    cullPlaneCount: number;\r\n}\r\n\r\n\r\n/**\r\n * @en Spotlight Shadow Data\r\n * @zh 聚光灯阴影数据\r\n */\r\nexport class ShadowSpotData {\r\n    /**\r\n     * @en The camera shader data.\r\n     * @zh 摄像机着色器数据。\r\n     */\r\n    cameraShaderValue: ShaderData;\r\n    /**\r\n     * @en Position of the shadow.\r\n     * @zh 阴影的位置。\r\n     */\r\n    position: Vector3 = new Vector3;\r\n    /**\r\n     * @en Offset on the X-axis for the shadow map.\r\n     * @zh 阴影贴图在X轴上的偏移。\r\n     */\r\n    offsetX: number;\r\n    /**\r\n     * @en Offset on the Y-axis for the shadow map.\r\n     * @zh 阴影贴图在Y轴上的偏移。\r\n     */\r\n    offsetY: number;\r\n    /**\r\n     * @en Resolution of the shadow map.\r\n     * @zh 阴影贴图的分辨率。\r\n     */\r\n    resolution: number;\r\n    /**\r\n     * @en View matrix of the shadow.\r\n     * @zh 阴影的视图矩阵。\r\n     */\r\n    viewMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**\r\n     * @en Projection matrix of the shadow.\r\n     * @zh 阴影的投影矩阵。\r\n     */\r\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**\r\n     * @en Combined view and projection matrix of the shadow.\r\n     * @zh 阴影的视图投影矩阵。\r\n     */\r\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\r\n    /**\r\n     * @en Culling information for the shadow camera.\r\n     * @zh 阴影摄像机的裁剪信息。\r\n     */\r\n    cameraCullInfo: CameraCullInfo;\r\n    /**\r\n     * @en Uniform buffer object for the camera.\r\n     * @zh 摄像机的统一缓冲对象。\r\n     */\r\n    cameraUBO: UniformBufferObject;\r\n    /**\r\n     * @en Uniform buffer data for the camera.\r\n     * @zh 摄像机的统一缓冲数据。\r\n     */\r\n    cameraUBData: UnifromBufferData;\r\n\r\n    /**\r\n     * @en Create a new instance of ShadowSpotData.\r\n     * @zh 创建 ShadowSpotData 类的新实例。\r\n     */\r\n    constructor() {\r\n        this.cameraShaderValue = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\r\n        if (Config3D._uniformBlock) {\r\n            let cameraUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 0);\r\n            let cameraUBData = BaseCamera.createCameraUniformBlock();\r\n\r\n            if (!cameraUBO) {\r\n                cameraUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, cameraUBData.getbyteLength(), false);\r\n            }\r\n\r\n            this.cameraShaderValue._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, cameraUBO, cameraUBData);\r\n            this.cameraShaderValue.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, cameraUBO);\r\n\r\n            this.cameraUBO = cameraUBO;\r\n            this.cameraUBData = cameraUBData;\r\n        }\r\n\r\n        this.cameraCullInfo = new CameraCullInfo();\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n * @en Shadow Slice Data.\r\n * @zh 阴影分割数据。\r\n */\r\nexport class ShadowSliceData {\r\n    /**\r\n     * @en Shader data associated with the shadow slice.\r\n     * @zh 与阴影切片关联的着色器数据。\r\n     */\r\n    cameraShaderValue: ShaderData;\r\n\r\n    /**\r\n     * @en Uniform buffer object for the shadow slice camera.\r\n     * @zh 阴影切片摄像机的统一缓冲对象。\r\n     */\r\n    cameraUBO: UniformBufferObject;\r\n\r\n    /**\r\n     * @en Uniform buffer data for the shadow slice camera.\r\n     * @zh 阴影切片摄像机的统一缓冲数据。\r\n     */\r\n    cameraUBData: UnifromBufferData; \r\n\r\n    /**\r\n     * @en Position of the shadow slice in world space.\r\n     * @zh 阴影切片在世界空间中的位置。\r\n     */\r\n    position: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * @en X-axis offset for the shadow map.\r\n     * @zh 阴影贴图的X轴偏移。\r\n     */\r\n    offsetX: number;\r\n\r\n    /**\r\n     * @en Y-axis offset for the shadow map.\r\n     * @zh 阴影贴图的Y轴偏移。\r\n     */\r\n    offsetY: number;\r\n\r\n    /**\r\n     * @en Resolution of the shadow map for the slice.\r\n     * @zh 阴影切片的阴影贴图分辨率。\r\n     */\r\n    resolution: number;\r\n\r\n    /**\r\n     * @en View matrix of the shadow slice camera.\r\n     * @zh 阴影切片摄像机的视图矩阵。\r\n     */\r\n    viewMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /**\r\n     * @en Projection matrix of the shadow slice camera.\r\n     * @zh 阴影切片摄像机的投影矩阵。\r\n     */\r\n    projectionMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /**\r\n     * @en Combined view and projection matrix for the shadow slice camera.\r\n     * @zh 阴影切片摄像机的视图投影矩阵。\r\n     */\r\n    viewProjectMatrix: Matrix4x4 = new Matrix4x4();\r\n\r\n    /**\r\n     * @en Array of planes used for culling in the shadow slice.\r\n     * @zh 阴影切片中用于裁剪的平面数组。\r\n     */\r\n    cullPlanes: Array<Plane> = [new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0)];\r\n\r\n    /**\r\n     * @en Total count of culling planes.\r\n     * @zh 裁剪平面的总数。\r\n     */\r\n    cullPlaneCount: number;\r\n\r\n    /**\r\n     * @en Bounding sphere for the shadow slice.\r\n     * @zh 阴影切片的包围球体。\r\n     */\r\n    splitBoundSphere: BoundSphere = new BoundSphere(new Vector3(), 0.0);\r\n\r\n    /**\r\n     * @en Center Z coordinate of the bounding sphere for culling.\r\n     * @zh 用于裁剪的包围球体的中心Z坐标。\r\n     */\r\n    sphereCenterZ: number;\r\n\r\n    /**\r\n     * @en Create a new instance of ShadowSliceData.\r\n     * @zh 创建 ShadowSliceData 类的新实例。\r\n     */\r\n    constructor() {\r\n        this.cameraShaderValue = LayaGL.renderDeviceFactory.createShaderData(null);\r\n\r\n        if (Config3D._uniformBlock) {\r\n            let cameraUBO = UniformBufferObject.getBuffer(UniformBufferObject.UBONAME_CAMERA, 0);\r\n            let cameraUBData = BaseCamera.createCameraUniformBlock();\r\n\r\n            if (!cameraUBO) {\r\n                cameraUBO = UniformBufferObject.create(UniformBufferObject.UBONAME_CAMERA, BufferUsage.Dynamic, cameraUBData.getbyteLength(), false);\r\n            }\r\n\r\n            this.cameraShaderValue._addCheckUBO(UniformBufferObject.UBONAME_CAMERA, cameraUBO, cameraUBData);\r\n            this.cameraShaderValue.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK, cameraUBO);\r\n\r\n            this.cameraUBO = cameraUBO;\r\n            this.cameraUBData = cameraUBData;\r\n        }\r\n\r\n    }\r\n}\r\n","/**\r\n * @en Physics3DUtils class represents a 3D physics collision group.\r\n * @zh Physics3DUtils 类表示3D物理碰撞组。\r\n */\r\nexport class Physics3DUtils {\r\n\t/**\r\n\t * @en Default collision filter group.\r\n\t * @zh 默认碰撞组。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_DEFAULTFILTER: number = 0x1;\r\n\t/**\r\n\t * @en Static collision filter group.\r\n\t * @zh 静态碰撞组。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_STATICFILTER: number = 0x2;\r\n\t/**\r\n\t * @en Kinematic rigid body collision filter group.\r\n\t * @zh 运动学刚体碰撞组。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_KINEMATICFILTER: number = 0x4;\r\n\t/**\r\n\t * @en Debris collision filter group.\r\n\t * @zh 碎片碰撞组。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_DEBRISFILTER: number = 0x8;\r\n\t/**\r\n\t * @en Sensor trigger filter group.\r\n\t * @zh 传感器触发器。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_SENSORTRIGGER: number = 0x10;\r\n\t/**\r\n\t * @en Character filter group.\r\n\t * @zh 字符过滤器。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CHARACTERFILTER: number = 0x20;\r\n\t/**\r\n\t * @en Custom filter group 1.\r\n\t * @zh 自定义过滤1。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER1: number = 0x40;\r\n\t/**\r\n\t * @en Custom filter group 2.\r\n\t * @zh 自定义过滤2。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER2: number = 0x80;\r\n\t/**\r\n\t * @en Custom filter group 3.\r\n\t * @zh 自定义过滤3。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER3: number = 0x100;\r\n\t/**\r\n\t * @en Custom filter group 4.\r\n\t * @zh 自定义过滤4。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER4: number = 0x200;\r\n\t/**\r\n\t * @en Custom filter group 5.\r\n\t * @zh 自定义过滤5。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER5: number = 0x400;\r\n\t/**\r\n\t * @en Custom filter group 6.\r\n\t * @zh 自定义过滤6。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER6: number = 0x800;\r\n\t/**\r\n\t * @en Custom filter group 7.\r\n\t * @zh 自定义过滤7。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER7: number = 0x1000;\r\n\t/**\r\n\t * @en Custom filter group 8.\r\n\t * @zh 自定义过滤8。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER8: number = 0x2000;\r\n\t/**\r\n\t * @en Custom filter group 9.\r\n\t * @zh 自定义过滤9。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER9: number = 0x4000;\r\n\t/**\r\n\t * @en Custom filter group 10.\r\n\t * @zh 自定义过滤10。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_CUSTOMFILTER10: number = 0x8000;\r\n\t/**\r\n\t * @en All filter group that includes all other filter groups.\r\n\t * @zh 包含所有其他过滤组的所有过滤组。\r\n\t */\r\n\tstatic COLLISIONFILTERGROUP_ALLFILTER: number = -1;\r\n\t/**\r\n\t * @en Default mask value used in PhysX.\r\n\t * @zh 在PhysX中使用的默认掩码值。\r\n\t */\r\n\tstatic PHYSXDEFAULTMASKVALUE: number = 0xffffffff;\r\n}\r\n\r\n\r\n","import { RenderContext3D } from \"../core/render/RenderContext3D\"\r\n/**\r\n * @en The `Size` class represents the dimensions of a rectangle or other shape in 2D space.\r\n * @zh `Size` 类表示2D空间中矩形或其他形状的尺寸。\r\n */\r\n\texport class Size {\r\n    \t/**\r\n    \t * @en Gets the screen size of the global scene.\r\n    \t * @return Returns a `Size` instance with both width and height set to -1, indicating full screen.\r\n    \t * @zh 获取全局场景的屏幕尺寸。\r\n    \t * @return 返回一个宽度和高度都设置为 -1 的 `Size` 实例，表示全屏。\r\n    \t */\r\n\t\t static get fullScreen():Size {\r\n\t\t\treturn new Size(-1, -1);\r\n\t\t}\r\n\t\t\r\n\t\tprivate _width:number = 0;\r\n\t\tprivate _height:number = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * @en Width.\r\n\t\t * @zh 宽度\r\n\t\t */\r\n\t\tget width():number {\r\n\t\t\tif (this._width === -1)\r\n\t\t\t\treturn RenderContext3D.clientWidth;\r\n\t\t\t\r\n\t\t\treturn this._width;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @en Height.\r\n\t\t * @zh 高度\r\n\t\t */\r\n\t\tget height():number {\r\n\t\t\tif (this._height === -1)\r\n\t\t\t\treturn RenderContext3D.clientHeight;\r\n\t\t\treturn this._height;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @en Creates an instance of  `Size`.\r\n\t\t * @param width  Width.\r\n\t\t * @param height Height.\r\n\t\t * @zh 创建一个 `Size` 实例。\r\n\t\t * @param width 宽度 \r\n\t\t * @param height 高度\r\n\t\t */\r\n\t\tconstructor(width:number, height:number){\r\n\t\t\tthis._width = width;\r\n\t\t\tthis._height = height;\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\r\n","import { IIndexBuffer } from \"../../RenderDriver/DriverDesign/RenderDevice/IIndexBuffer\";\r\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\n/**\r\n * @en IndexBuffer3D class is used to create index buffer. Please use LayaGL.RenderOBJCreate.createIndexBuffer3D to create.\r\n * @zh IndexBuffer3D 类用于创建索引缓冲。请使用LayaGL.RenderOBJCreate.createIndexBuffer3D来创建。\r\n */\r\nexport class IndexBuffer3D {\r\n\t/** @internal */\r\n\tprivate _canRead: boolean;\r\n\tprivate _indexType: IndexFormat = IndexFormat.UInt16;\r\n\t/** @internal */\r\n\tprivate _indexTypeByteCount: number;\r\n\t/** @internal */\r\n\tprivate _indexCount: number;\r\n\t_byteLength: number;\r\n\t_buffer: Float32Array | Uint16Array | Uint8Array | Uint32Array;\r\n\t/**@internal */\r\n\t_deviceBuffer: IIndexBuffer;\r\n\tbufferUsage: BufferUsage;\r\n\r\n\t/**\r\n\t * @en The index type.\r\n\t * @zh 索引类型。\r\n\t */\r\n\tget indexType(): IndexFormat {\r\n\t\treturn this._indexType;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The byte count of the index type.\r\n\t * @zh 索引类型字节数量。\r\n\t */\r\n\tget indexTypeByteCount(): number {\r\n\t\treturn this._indexTypeByteCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en The number of indices.\r\n\t * @zh 索引个数。\r\n\t */\r\n\tget indexCount(): number {\r\n\t\treturn this._indexCount;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the buffer can be read.\r\n\t * @zh 是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Constructor method, create index buffer.\r\n\t * @param\tindexType Index type.\r\n\t * @param\tindexCount Index count.\r\n\t * @param\tbufferUsage IndexBuffer3D usage type.\r\n\t * @param\tcanRead Whether the buffer can be read.\r\n\t * @zh 构造方法,创建索引缓冲。\r\n\t * @param\tindexType 索引类型。\r\n\t * @param\tindexCount 索引个数。\r\n\t * @param\tbufferUsage IndexBuffer3D用途类型。\r\n\t * @param\tcanRead 是否可读。\r\n\t */\r\n\tconstructor(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false) {\r\n\t\tthis._deviceBuffer = LayaGL.renderDeviceFactory.createIndexBuffer(bufferUsage);\r\n\t\tthis._deviceBuffer.indexType = this._indexType = indexType;\r\n\t\tthis._deviceBuffer.indexCount = this._indexCount = indexCount;\r\n\t\tthis._canRead = canRead;\r\n\t\tthis.bufferUsage = bufferUsage;\r\n\t\tswitch (indexType) {\r\n\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\tthis._indexTypeByteCount = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\tthis._indexTypeByteCount = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\tthis._indexTypeByteCount = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"unidentification index type.\");\r\n\t\t}\r\n\t\tvar byteLength: number = this._indexTypeByteCount * indexCount;\r\n\t\tthis._byteLength = byteLength;\r\n\t\tthis._deviceBuffer._setIndexDataLength(byteLength);\r\n\t\tif (canRead) {\r\n\t\t\tswitch (indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tthis._buffer = new Uint32Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tthis._buffer = new Uint16Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tthis._buffer = new Uint8Array(indexCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Sets the data for the index buffer.\r\n\t * @param data The index data.\r\n\t * @param bufferOffset The offset within the index buffer.\r\n\t * @param dataStartIndex The offset within the data.\r\n\t * @param dataCount The number of indices to set.\r\n\t * @zh 设置索引缓冲区的数据。\r\n\t * @param data 索引数据。\r\n\t * @param bufferOffset 索引缓冲中的偏移。\r\n\t * @param dataStartIndex 索引数据的偏移。\r\n\t * @param dataCount 索引数据的数量。\r\n\t */\r\n\tsetData(data: any, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = 4294967295/*uint.MAX_VALUE*/): void {\r\n\t\tvar byteCount: number = this._indexTypeByteCount;\r\n\t\tif (dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\tswitch (this._indexType) {\r\n\t\t\t\tcase IndexFormat.UInt32:\r\n\t\t\t\t\tdata = new Uint32Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt16:\r\n\t\t\t\t\tdata = new Uint16Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase IndexFormat.UInt8:\r\n\t\t\t\t\tdata = new Uint8Array(data.buffer, dataStartIndex * byteCount, dataCount);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._deviceBuffer._setIndexData(data, bufferOffset * byteCount);\r\n\r\n\t\tif (this._canRead) {\r\n\t\t\tif (bufferOffset !== 0 || dataStartIndex !== 0 || dataCount !== 4294967295/*uint.MAX_VALUE*/) {\r\n\t\t\t\tvar maxLength: number = this._buffer.length - bufferOffset;\r\n\t\t\t\tif (dataCount > maxLength)\r\n\t\t\t\t\tdataCount = maxLength;\r\n\t\t\t\tif (typeof data == typeof this._buffer && data.length == dataCount)\r\n\t\t\t\t\tthis._buffer.set(data, bufferOffset);\r\n\t\t\t\telse\r\n\t\t\t\t\tfor (var i: number = 0; i < dataCount; i++)\r\n\t\t\t\t\t\tthis._buffer[bufferOffset + i] = data[i];\r\n\t\t\t} else {\r\n\t\t\t\tthis._buffer = data;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets the index data.\r\n\t * @returns The index data.\r\n\t * @zh 获取索引数据。\r\n\t * @returns 返回索引数据。\r\n\t */\r\n\tgetData(): Uint16Array | Uint32Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn <Uint16Array>this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Destroys this IndexBuffer3D.\r\n\t * @zh 销毁此索引缓冲。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._deviceBuffer.destroy();\r\n\t\tthis._buffer = null;\r\n\t\tthis._byteLength = 0;\r\n\t\tthis._indexCount = 0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { IVertexBuffer } from \"../../RenderDriver/DriverDesign/RenderDevice/IVertexBuffer\";\r\nimport { BufferTargetType, BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\n\r\n\r\n/**\r\n * @en The `VertexBuffer3D` class is used to create vertex buffers. To create an instance of `VertexBuffer3D`, use `LayaGL.RenderOBJCreate.createIndexBuffer3D`.\r\n * @zh `VertexBuffer3D` 类用于创建顶点缓冲。要创建 `VertexBuffer3D` 的实例，请使用 `LayaGL.RenderOBJCreate.createIndexBuffer3D`。\r\n */\r\nexport class VertexBuffer3D {\r\n\r\n\t/** @internal */\r\n\tprivate _canRead: boolean;\r\n\t_byteLength: number;\r\n\t/**@internal */\r\n\t_deviceBuffer: IVertexBuffer;\r\n\t_buffer: Float32Array | Uint16Array | Uint8Array | Uint32Array;\r\n\t/** @internal */\r\n\t_float32Reader: Float32Array | null = null;\r\n\r\n\tbufferUsage:BufferUsage;\r\n\r\n\t/**\r\n\t * @en The vertex declaration.\r\n\t * @zh 顶点声明。\r\n\t */\r\n\tget vertexDeclaration(): VertexDeclaration | null {\r\n\t\treturn this._deviceBuffer.vertexDeclaration;\r\n\t}\r\n\r\n\tset vertexDeclaration(value: VertexDeclaration | null) {\r\n\t\tthis._deviceBuffer.vertexDeclaration = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether this is an instance buffer.\r\n\t * @zh 是否是实例缓冲区。\r\n\t */\r\n\tget instanceBuffer(): boolean {\r\n\t\treturn this._deviceBuffer.instanceBuffer;\r\n\t}\r\n\r\n\tset instanceBuffer(value: boolean) {\r\n\t\tthis._deviceBuffer.instanceBuffer = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Whether the buffer is readable.\r\n\t * @zh 缓冲区是否可读。\r\n\t */\r\n\tget canRead(): boolean {\r\n\t\treturn this._canRead;\r\n\t}\r\n\r\n\t/**\r\n\t * @en Constructor method.\r\n\t * @param byteLength The byte length of the buffer.\r\n\t * @param bufferUsage The usage type of the VertexBuffer3D.\r\n\t * @param canRead Whether the buffer is readable.\r\n\t * @zh 构造方法。\r\n\t * @param byteLength 字节长度。\r\n\t * @param bufferUsage VertexBuffer3D用途类型。\r\n\t * @param canRead 是否可读。\r\n\t */\r\n\tconstructor(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n\t\t//super(BufferTargetType.ARRAY_BUFFER, bufferUsage);\r\n\t\tthis._deviceBuffer = LayaGL.renderDeviceFactory.createVertexBuffer(bufferUsage);\r\n\t\tthis._canRead = canRead;\r\n\t\tthis._byteLength = byteLength;\r\n\t\tthis._deviceBuffer.setDataLength(byteLength)\r\n\t\tthis.bufferUsage = bufferUsage;\r\n\t\tif (this._canRead) {\r\n\t\t\tthis._buffer = new Uint8Array(byteLength);\r\n\t\t\tthis._float32Reader = new Float32Array(this._buffer.buffer);\r\n\t\t}\r\n\t}\r\n\r\n\t// /**\r\n\t//  * 剥离内存块存储。\r\n\t//  */\r\n\t// orphanStorage(): void {\r\n\t// \tthis.bind();\r\n\t// \tthis._glBuffer.setDataLength(this._byteLength);\r\n\t// }\r\n\r\n\t/**\r\n\t * @en Sets the data for the vertex buffer.\r\n\t * @param buffer The data to set.\r\n\t * @param bufferOffset The offset within the vertex buffer, in bytes.\r\n\t * @param dataStartIndex The starting index within the data, in bytes.\r\n\t * @param dataCount The number of bytes to set.\r\n\t * @zh 设置顶点缓冲区的数据。\r\n\t * @param buffer 要设置的数据。\r\n\t * @param bufferOffset 顶点缓冲中的偏移,以字节为单位。\r\n\t * @param dataStartIndex 顶点数据的偏移,以字节为单位。\r\n\t * @param dataCount 顶点数据的长度,以字节为单位。\r\n\t */\r\n\tsetData(buffer: ArrayBuffer, bufferOffset: number = 0, dataStartIndex: number = 0, dataCount: number = Number.MAX_SAFE_INTEGER): void {\r\n\t\tthis._deviceBuffer.setData(buffer, bufferOffset, dataStartIndex, dataCount);\r\n\t\tvar needSubData: boolean = dataStartIndex !== 0 || dataCount !== Number.MAX_SAFE_INTEGER;\r\n\t\tif (needSubData) {\r\n\t\t\tvar subData: Uint8Array = new Uint8Array(buffer, dataStartIndex, dataCount);\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(subData, bufferOffset);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._canRead)\r\n\t\t\t\tthis._buffer.set(new Uint8Array(buffer), bufferOffset);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Gets the vertex data as a `Uint8Array`.\r\n\t * @zh 以 `Uint8Array` 形式获取顶点数据。\r\n\t */\r\n\tgetUint8Data(): Uint8Array {\r\n\t\tif (this._canRead)\r\n\t\t\treturn <Uint8Array>this._buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Gets the vertex data as a `Float32Array`, if the buffer is readable.\r\n\t * @zh 如果缓冲区可读，以 `Float32Array` 形式获取顶点数据。\r\n\t */\r\n\tgetFloat32Data(): Float32Array | null {\r\n\t\tif (this._canRead)\r\n\t\t\treturn this._float32Reader;\r\n\t\telse\r\n\t\t\tthrow new Error(\"Can't read data from VertexBuffer with only write flag!\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Marks the buffer as unreadable and releases the data.\r\n\t * @zh 将缓冲区标记为不可读并释放数据。\r\n\t */\r\n\tmarkAsUnreadbale(): void {\r\n\t\tthis._canRead = false;\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @en Destroys the vertex buffer and releases the resources.\r\n\t * @zh 销毁顶点缓冲区并释放资源。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tthis._deviceBuffer.destroy();\r\n\t\tthis._buffer = null;\r\n\t\tthis._float32Reader = null;\r\n\t\tthis._byteLength = 0;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","import { Laya } from \"../../../../Laya\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Laya3DRender } from \"../../../d3/RenderObjs/Laya3DRender\";\r\nimport { IndexBuffer3D } from \"../../../d3/graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../../d3/graphics/VertexBuffer3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { IRenderEngine3DOBJFactory } from \"./IRenderEngine3DOBJFactory\";\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class LengencyRenderEngine3DFactory implements IRenderEngine3DOBJFactory {\r\n\r\n    /**\r\n     * @deprecated use new VertexBuffer3D\r\n     * @param byteLength \r\n     * @param bufferUsage \r\n     * @param canRead \r\n     * @returns \r\n     */\r\n    createVertexBuffer3D(byteLength: number, bufferUsage: BufferUsage, canRead: boolean = false) {\r\n        return new VertexBuffer3D(byteLength, bufferUsage, canRead);\r\n    }\r\n\r\n    /**\r\n     * @deprecated use new IndexBuffer3D\r\n     * @param indexType \r\n     * @param indexCount \r\n     * @param bufferUsage \r\n     * @param canRead \r\n     * @returns \r\n     */\r\n    createIndexBuffer3D(indexType: IndexFormat, indexCount: number, bufferUsage: BufferUsage = BufferUsage.Static, canRead: boolean = false): IndexBuffer3D {\r\n        return new IndexBuffer3D(indexType, indexCount, bufferUsage, canRead);\r\n    }\r\n}\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!Laya3DRender.renderOBJCreate)\r\n        Laya3DRender.renderOBJCreate = new LengencyRenderEngine3DFactory();\r\n})","import { Plane } from \"../math/Plane\";\r\nimport { Bounds } from \"../math/Bounds\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @internal\r\n * @en The `FrustumCulling` class is used for performing frustum culling calculations to determine visibility of objects within the camera's view.\r\n * @zh `FrustumCulling` 类用于执行视锥体剔除计算，以确定对象是否在相机视图中可见。\r\n */\r\nexport class FrustumCulling {\r\n\r\n\t/**@internal */\r\n\tprivate static _tempV30: Vector3 = new Vector3();\r\n\t/**@internal */\r\n\tprivate static _tempV31: Vector3 = new Vector3();\r\n\r\n\t// /**\r\n\t//  * @internal\r\n\t//  */\r\n\t// private static _drawTraversalCullingBound(renderList: SingletonList<ISingletonElement>, debugTool: PixelLineSprite3D): void {\r\n\t// \tvar renders: ISingletonElement[] = renderList.elements;\r\n\t// \tfor (var i: number = 0, n: number = renderList.length; i < n; i++) {\r\n\t// \t\tvar color: Color = FrustumCulling._tempColor0;\r\n\t// \t\tcolor.r = 0;\r\n\t// \t\tcolor.g = 1;\r\n\t// \t\tcolor.b = 0;\r\n\t// \t\tcolor.a = 1;\r\n\t// \t\tUtils3D._drawBound(debugTool, ((<BaseRender>renders[i])).bounds._getBoundBox(), color);\r\n\t// \t}\r\n\t// }\r\n\r\n    /**\r\n     * @en Calculates whether the given bounds are culled based on the provided culling information.\r\n     * @param bounds The bounds to test for culling.\r\n     * @param cullInfo The culling information containing plane data.\r\n     * @returns  True if the bounds are not culled and are therefore visible, otherwise false.\r\n\t * @zh 根据提供的剔除信息，计算给定的边界是否被剔除。\r\n\t * @param bounds 要测试剔除的边界。\r\n     * @param cullInfo 包含剔除平面数据的剔除信息。\r\n     * @returns 如果边界没有被剔除并且因此可见，则返回 true，否则返回 false。\r\n     */\r\n\tstatic cullingRenderBounds(bounds: Bounds, cullInfo: any): boolean {\r\n\t\tvar cullPlaneCount: number = cullInfo.cullPlaneCount;\r\n\t\tvar cullPlanes: Plane[] = cullInfo.cullPlanes;\r\n\r\n\t\tvar min: Vector3 = bounds._imp.getMin();\r\n\t\tvar max: Vector3 = bounds._imp.getMax();\r\n\t\tvar minX: number = min.x;\r\n\t\tvar minY: number = min.y;\r\n\t\tvar minZ: number = min.z;\r\n\t\tvar maxX: number = max.x;\r\n\t\tvar maxY: number = max.y;\r\n\t\tvar maxZ: number = max.z;\r\n\t\t//TODO:通过相机裁剪直接pass\r\n\r\n\t\tvar pass: boolean = true;\r\n\t\t// cull by planes\r\n\t\t// Improve:Maybe use sphre and direction cull can savle the far plane cull\r\n\t\tfor (var j: number = 0; j < cullPlaneCount; j++) {\r\n\t\t\tvar plane: Plane = cullPlanes[j];\r\n\t\t\tvar normal: Vector3 = plane.normal;\r\n\t\t\tif (plane.distance + (normal.x * (normal.x < 0.0 ? minX : maxX)) + (normal.y * (normal.y < 0.0 ? minY : maxY)) + (normal.z * (normal.z < 0.0 ? minZ : maxZ)) < 0.0) {\r\n\t\t\t\tpass = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pass;\r\n\t}\r\n\r\n\t// /**\r\n\t//  * caculate Bounds by ShadowCullInfo\r\n\t//  * @param bounds \r\n\t//  * @param cullInfo \r\n\t//  * @returns \r\n\t//  */\r\n\t// static cullingRenderBoundsState(bounds: Bounds, cullInfo: ShadowCullInfo): ContainmentType {\r\n\t// \tvar p: Vector3 = FrustumCulling._tempV30, n: Vector3 = FrustumCulling._tempV31;\r\n\t// \tvar boxMin: Vector3 = bounds.min;\r\n\t// \tvar boxMax: Vector3 = bounds.max;\r\n\t// \tvar result: number = ContainmentType.Contains;\r\n\t// \tfor (var i = 0, nn = cullInfo.cullPlaneCount; i < nn; i++) {\r\n\t// \t\tvar plane: Plane = cullInfo.cullPlanes[i];\r\n\t// \t\tvar planeNor: Vector3 = plane.normal;\r\n\r\n\t// \t\tif (planeNor.x >= 0) {\r\n\t// \t\t\tp.x = boxMax.x;\r\n\t// \t\t\tn.x = boxMin.x;\r\n\t// \t\t} else {\r\n\t// \t\t\tp.x = boxMin.x;\r\n\t// \t\t\tn.x = boxMax.x;\r\n\t// \t\t}\r\n\t// \t\tif (planeNor.y >= 0) {\r\n\t// \t\t\tp.y = boxMax.y;\r\n\t// \t\t\tn.y = boxMin.y;\r\n\t// \t\t} else {\r\n\t// \t\t\tp.y = boxMin.y;\r\n\t// \t\t\tn.y = boxMax.y;\r\n\t// \t\t}\r\n\t// \t\tif (planeNor.z >= 0) {\r\n\t// \t\t\tp.z = boxMax.z;\r\n\t// \t\t\tn.z = boxMin.z;\r\n\t// \t\t} else {\r\n\t// \t\t\tp.z = boxMin.z;\r\n\t// \t\t\tn.z = boxMax.z;\r\n\t// \t\t}\r\n\r\n\t// \t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, p) === Plane.PlaneIntersectionType_Back)\r\n\t// \t\t\treturn ContainmentType.Disjoint;\r\n\r\n\t// \t\tif (CollisionUtils.intersectsPlaneAndPoint(plane, n) === Plane.PlaneIntersectionType_Back)\r\n\t// \t\t\tresult = ContainmentType.Intersects;\r\n\t// \t}\r\n\t// \treturn result;\r\n\t// }\r\n\r\n\r\n}\r\n\r\n","import { Camera } from \"../../core/Camera\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { RenderStateContext } from \"../../../RenderEngine/RenderStateContext\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\n\r\n\r\n/**\r\n * @ignore 功能还没有实现完，开发者请勿使用。\r\n * @internal\r\n * 类用于创建WebXR摄像机。\r\n */\r\nexport class WebXRCamera extends Camera {\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tpublic isWebXR = true;\r\n\t/**\r\n\t * WebXRSessionManager\r\n\t */\r\n\tprivate _webXRManager: WebXRCameraManager;\r\n\r\n\t/**\r\n\t * override client\r\n\t */\r\n\tprivate _clientWidth: number;\r\n\t/**\r\n\t * override client\r\n\t */\r\n\tprivate _clientHeight: number;\r\n\r\n\t/**\r\n\t * 自定义渲染场景的渲染目标。\r\n\t */\r\n\tget renderTarget(): RenderTexture {\r\n\t\treturn this._internalRenderTexture;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset renderTarget(value: RenderTexture) {\r\n\t\tthis._internalRenderTexture = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset clientWidth(value: number) {\r\n\t\tthis._clientWidth = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tset clientHeight(value: number) {\r\n\t\tthis._clientHeight = value;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget clientWidth(): number {\r\n\t\treturn this._clientWidth;\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tget clientHeight(): number {\r\n\t\treturn this._clientHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * restore view state\r\n\t * @internal\r\n\t */\r\n\tprivate _restoreView(gl: WebGLRenderingContext) {\r\n\t\t//恢复渲染区\r\n\t\tvar viewport: Viewport = this.viewport;\r\n\t\tvar vpX: number, vpY: number;\r\n\t\tvar vpW: number = viewport.width;\r\n\t\tvar vpH: number = viewport.height;\r\n\t\tif (this._needInternalRenderTexture()) {\r\n\t\t\tvpX = 0;\r\n\t\t\tvpY = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvpX = viewport.x;\r\n\t\t\tvpY = this._getCanvasHeight() - viewport.y - vpH;\r\n\t\t}\r\n\t\tgl.viewport(vpX, vpY, vpW, vpH);\r\n\t}\r\n\r\n\t/**\r\n\t * 渲染\r\n\t * @override\r\n\t * @param shader \r\n\t * @param replacementTag \r\n\t */\r\n\trender(): void {\r\n\t\tif (!this.activeInHierarchy) //custom render should protected with activeInHierarchy=true\r\n\t\t\treturn;\r\n\r\n\t\tvar viewport: Viewport = this.viewport;\r\n\t\tvar needInternalRT: boolean = true;\r\n\t\tvar context: RenderContext3D = RenderContext3D._instance;\r\n\t\tvar scene: Scene3D = context.scene = <Scene3D>this._scene;\r\n\t\tcontext.pipelineMode = context.configPipeLineMode;\r\n\t\t// context.replaceTag = replacementTag;\r\n\t\t// context.customShader = shader;\r\n\t\t// //var needShadowCasterPass: boolean = this._renderShadowMap(scene, context);\r\n\t\t// this._preRenderMainPass(context, scene, needInternalRT, viewport);\r\n\t\t// this._renderMainPass(context, viewport, scene, shader, replacementTag, needInternalRT);\r\n\t\t// this._aftRenderMainPass(needShadowCasterPass);\r\n\t}\r\n\r\n\t/**\r\n * 渲染主流程\r\n * @internal\r\n * @param context 渲染上下文\r\n * @param viewport 视口\r\n * @param scene 场景\r\n * @param shader shader\r\n * @param replacementTag 替换标签\r\n * @param needInternalRT 是否需要内部RT\r\n */\r\n\t_renderMainPass(context: RenderContext3D, viewport: Viewport, scene: Scene3D, shader: Shader3D, replacementTag: string, needInternalRT: boolean) {\r\n\t\t// var gl: WebGLRenderingContext = WebXRExperienceHelper.glInstance;\r\n\t\t// var renderTex: RenderTexture = this._internalRenderTexture;\r\n\r\n\t\t// context.viewport = viewport;\r\n\t\t// this._prepareCameraToRender();\r\n\t\t// var multiLighting: boolean = Config3D._multiLighting;\r\n\t\t// (multiLighting) && (Cluster.instance.update(this, <Scene3D>(scene)));\r\n\t\t// scene._preCulling(context, this);\r\n\r\n\t\t// if (renderTex && renderTex._isCameraTarget)//保证反转Y状态正确\r\n\t\t// \tcontext.invertY = true;\r\n\t\t// this._applyViewProject(context, this.viewMatrix, this._projectionMatrix);\r\n\t\t// if (this.depthTextureMode != 0) {\r\n\t\t// \t//TODO:是否可以不多次\r\n\t\t// \tthis._renderDepthMode(context);\r\n\t\t// }\r\n\t\t// (renderTex) && (renderTex._start());\r\n\t\t// if ((renderTex as any).frameLoop != Scene3D._updateMark) {\r\n\t\t// \t(renderTex as any).frameLoop = Scene3D._updateMark;\r\n\t\t// \t//scene._clear(gl, context);\r\n\t\t// \tthis.clear(gl);\r\n\t\t// }\r\n\t\t// this._restoreView(gl);\r\n\t\t// this._prepareCameraToRender();\r\n\r\n\t\t// this._applyCommandBuffer(CameraEventFlags.BeforeForwardOpaque, context);\r\n\t\t// scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERQPAQUE);\r\n\t\t// this._applyCommandBuffer(CameraEventFlags.BeforeSkyBox, context);\r\n\t\t// scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_SKYBOX);\r\n\t\t// this._applyCommandBuffer(CameraEventFlags.BeforeTransparent, context);\r\n\t\t// scene._renderScene(context, ILaya3D.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT);\r\n\t\t// scene._componentDriver.callPostRender();//TODO:duo相机是否重复\r\n\t\t// this._applyCommandBuffer(CameraEventFlags.BeforeImageEffect, context);\r\n\t\t// (renderTex) && (renderTex._end());\r\n\t\t//PostProcess TODO\r\n\t\t// if (needInternalRT) {\r\n\t\t// \tif (this._postProcess && this._postProcess.enable) {\r\n\t\t// \t\tthis._postProcess.commandContext = context;\r\n\t\t// \t\tthis._postProcess._render();\r\n\t\t// \t\tthis._postProcess._applyPostProcessCommandBuffers();\r\n\t\t// \t} else if (this._enableHDR || this._needBuiltInRenderTexture) {\r\n\t\t// \t\tvar canvasWidth: number = this._getCanvasWidth(), canvasHeight: number = this._getCanvasHeight();\r\n\t\t// \t\tif (this._offScreenRenderTexture) {\r\n\t\t// \t\t\tthis._screenOffsetScale.setValue(viewport.x / canvasWidth, viewport.y / canvasHeight, viewport.width / canvasWidth, viewport.height / canvasHeight);\r\n\t\t// \t\t\tthis._internalCommandBuffer._camera = this;\r\n\t\t// \t\t\tthis._internalCommandBuffer._context = context;\r\n\t\t// \t\t\tthis._internalCommandBuffer.blitScreenQuad(this._internalRenderTexture, this._offScreenRenderTexture, this._screenOffsetScale, null, null, 0, true);\r\n\t\t// \t\t\tthis._internalCommandBuffer._apply();\r\n\t\t// \t\t\tthis._internalCommandBuffer.clear();\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// \tRenderTexture.bindCanvasRender = this._internalRenderTexture;\r\n\t\t// \t//RenderTexture.recoverToPool(this._internalRenderTexture);\r\n\t\t// } else {\r\n\t\t// \tRenderTexture.bindCanvasRender = null;\r\n\t\t// }\r\n\t\t//this._applyCommandBuffer(CameraEventFlags.AfterEveryThing, context);\r\n\t}\r\n\r\n\t/**\r\n\t * null function\r\n\t */\r\n\tprotected _calculateProjectionMatrix(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tclear(gl: WebGLRenderingContext) {\r\n\t\tgl.viewport(0, 0, this._clientWidth, this._clientHeight);\r\n\t\tgl.scissor(0, 0, this._clientWidth, this._clientHeight);\r\n\t\tgl.clearColor(this.clearColor.r, this.clearColor.g, this.clearColor.b, this.clearColor.a);\r\n\t\tRenderStateContext.setDepthMask(true);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\t}\r\n\r\n\t/**\r\n\t * destroy\r\n\t */\r\n\tdestroy() {\r\n\t\tsuper.destroy(true);\r\n\t}\r\n}\r\n\r\n\r\n","import { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { RenderTexture } from \"../../../resource/RenderTexture\";\r\n\r\n\r\n/**\r\n * @en The `WebXRRenderTexture` class is used to create a render texture for WebXR rendering.\r\n * @zh `WebXRRenderTexture` 类用来创建 WebXR 渲染的渲染纹理。\r\n */\r\nexport class WebXRRenderTexture extends RenderTexture {\r\n\r\n\t/** @internal */\r\n\tprotected _frameBuffer: any;\r\n\t/**\r\n\t * @en The frame loop counter for the render texture.\r\n\t * @zh 渲染纹理的帧循环计数器。\r\n\t */\r\n\tpublic frameLoop: number = -1;\r\n\r\n\t/**\r\n\t * @en Creates a new instance of the `WebXRRenderTexture` class.\r\n\t * @zh 创建 WebXRRenderTexture 类的新实例\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(1, 1, 1, RenderTargetFormat.STENCIL_8, false, 1);\r\n\t}\r\n\r\n    /**\r\n     * @en The frame buffer for the render texture.\r\n     * @zh 渲染纹理的帧缓冲。。\r\n     */\r\n\tset frameBuffer(value: any) {\r\n\t\tthis._frameBuffer = value;\r\n\t}\r\n\r\n\t/**\r\n\t * No glframeBuffer create\r\n\t * @param width \r\n\t * @param height \r\n\t */\r\n\tprotected _create(width: number, height: number): void {\r\n\t}\r\n\r\n}","import { ILaya } from \"../../../../ILaya\";\r\nimport { EventDispatcher } from \"../../../events/EventDispatcher\";\r\n\r\n/**\r\n * @en Manages an XRSession to work with the LayaAir engine.\r\n * @zh 管理 XRSession 用以与 LayaAir 引擎协同工作。\r\n */\r\nexport class WebXRSessionManager extends EventDispatcher {\r\n\r\n    static EVENT_MANAGER_END: string = \"xrManagerDestory\";\r\n    static EVENT_FRAME_LOOP: string = \"xrFrameLoop\";\r\n\r\n\r\n    /**\r\n     * @en The underlying XR session being managed.\r\n     * @zh 被管理的底层 XR 会话。\r\n     */\r\n    public session: any//: \r\n    /**\r\n     * @en The XRReferenceSpace used for setting up the viewer's reference space.\r\n     * @zh 用于设置观察者参考空间的 XRReferenceSpace。\r\n     */\r\n    public viewerReferenceSpace: any; //XRReferenceSpace;\r\n\r\n    /**\r\n     * @en The base reference space for the XR session.\r\n     * @zh XR 会话的基参考空间。\r\n     */\r\n    public baseReferenceSpace: any;//;\r\n    /**\r\n     * @en The current XR frame in the session.\r\n     * @zh 会话中的当前 XR 帧。\r\n     */\r\n    public currentFrame: any;//\r\n    /**\r\n     * @en The WebXR timestamp updated every frame.\r\n     * @zh 每帧更新的 WebXR 时间戳。\r\n     */\r\n    public currentTimestamp: number = -1;\r\n    /**\r\n     * @en The default height compensation used when initialization fails.\r\n     * @zh 初始化失败后使用的高度补偿默认值。\r\n     */\r\n    public defaultHeightCompensation = 1.7;\r\n\r\n    /**\r\n     * XRReferenceSpace\r\n     */\r\n    private _referenceSpace: any;\r\n    /** \"inline\" | \"immersive-vr\" | \"immersive-ar\"*/\r\n    private _sessionMode: any;\r\n    /** session enable state */\r\n    private _sessionEnded: boolean = false;\r\n    /**WebXR Base Layer */\r\n    private _baseLayer:any;\r\n    /**web XRSystem */\r\n    private _xrNavigator: any;\r\n    /**\r\n     * @internal\r\n     * 类用来管理WebXR状态\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en The current reference space used in this session.\r\n     * @zh 当前会话中使用参考空间。\r\n     */\r\n    public get referenceSpace() {\r\n        return this._referenceSpace;\r\n    }\r\n\r\n    public set referenceSpace(newReferenceSpace) {\r\n        this._referenceSpace = newReferenceSpace;\r\n    }\r\n\r\n    /**\r\n     * @en The mode for the managed XR session.\r\n     * @zh 管理 XR 会话的模式。\r\n     */\r\n    public get sessionMode() {\r\n        return this._sessionMode;\r\n    }\r\n\r\n    /**\r\n     * @en Stops the XR session and restores the render loop.\r\n     * @zh 停止 XR 会话并恢复渲染循环。\r\n     */\r\n    exitXR() {\r\n        this.endXRRenderLoop();\r\n        this.event(WebXRSessionManager.EVENT_MANAGER_END);\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the XR layer for the session.\r\n     * @param xrSession The XR session to initialize.\r\n     * @param gl The WebGL rendering context.\r\n     * @returns A promise that resolves to true if the XR layer is successfully initialized.\r\n     * @zh 为会话初始化 XR 层。\r\n     * @param xrSession 要初始化的 XR 会话。\r\n     * @param gl WebGL 渲染上下文。\r\n     * @returns 一个承诺，该承诺在 XR 层成功初始化时解决为 true。。\r\n     */\r\n    public initializeXRGL(xrSession: any, gl: WebGLRenderingContext): Promise<boolean> {//: XRWebGLLayer {\r\n        return (gl as any).makeXRCompatible().then(()=> {\r\n            return true;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @en Checks if the browser supports WebXR.\r\n     * @returns A promise that resolves if WebXR is supported.\r\n     * @zh 检查浏览器是否支持 WebXR。\r\n     * @returns 如果支持 WebXR 则返回一个解决的承诺。\r\n     */\r\n    public initializeAsync(): Promise<void> {\r\n        // Check if the browser supports webXR\r\n        this._xrNavigator = navigator;\r\n        if (!this._xrNavigator.xr) {\r\n            return Promise.reject(\"WebXR not available\");\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @en Checks if the session mode is supported by the browser.\r\n     * @param sessionMode The session mode to check, \"inline\", \"immersive-vr\", or \"immersive-ar\".\r\n     * @returns A promise that resolves to true if the session mode is supported, and false if not.\r\n     * @zh 检查会话模式是否得到浏览器支持。\r\n     * @param sessionMode 要检查的会话模式，可以是 \"inline\"、\"immersive-vr\" 或 \"immersive-ar\"。\r\n     * @returns 如果会话模式得到支持则返回一个解决为 true 的承诺，如果不支持则为 false。\r\n     */\r\n    public isSessionSupportedAsync(sessionMode: string): Promise<boolean> {\r\n        if (!(navigator as any).xr) {\r\n            return Promise.resolve(false);\r\n        } else {\r\n            this._xrNavigator = navigator;\r\n        }\r\n        const functionToUse = (navigator as any).xr.isSessionSupported || (navigator as any).xr.supportsSession;\r\n        if (!functionToUse)\r\n            return Promise.resolve(false);\r\n        else {\r\n            return (navigator as any).xr.isSessionSupported(sessionMode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Initializes the XR session with the specified mode and initialization info.\r\n     * @param xrSessionMode The mode for the XR session.\r\n     * @param xrSessionInit The initialization info for the XR session.\r\n     * @returns A promise that resolves with the XR session if successful.\r\n     * @zh 使用指定的模式和初始化信息初始化 XR 会话。\r\n     * @param xrSessionMode XR 会话的模式。\r\n     * @param xrSessionInit XR 会话的初始化信息。\r\n     * @returns 如果成功，返回一个解决为 XR 会话的承诺。\r\n     */\r\n    public initializeSessionAsync(xrSessionMode = 'immersive-vr', xrSessionInit = {}): Promise<any> {\r\n        return this._xrNavigator.xr.requestSession('immersive-vr').then((session: any) => {\r\n            this.session = session;\r\n            this._sessionMode = xrSessionMode;\r\n            this._sessionEnded = false;\r\n\r\n            // 增加结束handle\r\n            this.session.addEventListener(\r\n                \"end\",\r\n                () => {\r\n                    this._sessionEnded = true;\r\n                    this.exitXR();\r\n                },\r\n                { once: true }\r\n            );\r\n\r\n            return this.session;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Resets the reference space to the one used at the start of the session.\r\n     * @zh 将参考空间重置为会话开始时使用的空间。\r\n     */\r\n    public resetReferenceSpace() {\r\n        this.referenceSpace = this.baseReferenceSpace;\r\n    }\r\n\r\n    /**\r\n     * @en Starts the rendering loop for the XR session and binds it to the session's animation frame request.\r\n     * @zh 启动 XR 会话的渲染循环，并将其绑定到会话的动画帧请求。\r\n     */\r\n    public runXRRenderLoop() {\r\n        this.session.requestAnimationFrame.bind(this.session);\r\n        let fn = (timestamp: any, xrFrame: any) => {\r\n            this._updateByXrFrame(xrFrame, timestamp);\r\n            this.event(WebXRSessionManager.EVENT_FRAME_LOOP, [xrFrame]);\r\n            ILaya.stage._loop();\r\n            this.session.requestAnimationFrame(fn);\r\n        };\r\n        this.session.requestAnimationFrame(fn);\r\n    }\r\n\r\n    /**\r\n     * @en Ends the rendering loop for the XR session.\r\n     * @zh 结束 XR 会话的渲染循环。\r\n     */\r\n    public endXRRenderLoop(){\r\n\r\n    }\r\n\r\n    /**\r\n     * Update\r\n     * @param xrFrame \r\n     */\r\n    private _updateByXrFrame(xrFrame: any, timestamp: number) {\r\n        this.currentFrame = xrFrame;\r\n        this.currentTimestamp = timestamp;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the reference space on the XR session.\r\n     * @param referenceSpaceType The type of space to set, defaults to \"local-floor\".\r\n     * @returns A promise that resolves once the reference space has been set.\r\n     * @zh 在 XR 会话上设置参考空间。\r\n     * @param referenceSpaceType 要设置的参考空间类型，默认为 \"local-floor\"。\r\n     * @returns 一个promise，该promise在参考空间已被设置时解决。\r\n     */\r\n    public setReferenceSpaceTypeAsync(referenceSpaceType = \"local-floor\"): Promise<any> {//XRReferenceSpace\r\n        return this.session\r\n            .requestReferenceSpace(referenceSpaceType)\r\n            .then(\r\n                (referenceSpace: any) => {\r\n                    return referenceSpace;\r\n                },\r\n                (rejectionReason: any) => {\r\n                    return this.session.requestReferenceSpace(\"viewer\").then(\r\n                        (referenceSpace: any) => {\r\n                            //@ts-ignore\r\n                            const heightCompensation = new XRRigidTransform({ x: 0, y: -this.defaultHeightCompensation, z: 0 });\r\n                            return (referenceSpace).getOffsetReferenceSpace(heightCompensation);\r\n                        },\r\n                        (rejectionReason: any) => {\r\n\r\n                            throw 'XR initialization failed: required \"viewer\" reference space type not supported.';\r\n                        }\r\n                    );\r\n                }\r\n            ).then((referenceSpace: any) => {\r\n                // initialize the base and offset (currently the same)\r\n                this.referenceSpace = this.baseReferenceSpace = referenceSpace;\r\n                return this.referenceSpace;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @en Updates the render state of the WebXR session.\r\n     * @param state The new render state to be applied.\r\n     * @returns A promise that resolves once the render state has been updated.\r\n     * @zh 更新 WebXR 会话的渲染状态。\r\n     * @param state 要应用的新渲染状态。\r\n     * @returns 一个promise，该promise在渲染状态已被更新时解决。\r\n     */\r\n    public updateRenderStateAsync(state: any) {//: XRRenderState) {\r\n        if (state.baseLayer) {\r\n            this._baseLayer = state.baseLayer;\r\n        }\r\n        return this.session.updateRenderState(state);\r\n    }\r\n\r\n    /**\r\n     * @en The current frame rate reported by the device.\r\n     * @zh 设备报告的当前帧率。\r\n     */\r\n    public get currentFrameRate(): number | undefined {\r\n        return this.session?.frameRate;\r\n    }\r\n\r\n    /**\r\n     * @en A list of supported frame rates, available only while in a session.\r\n     * @zh 支持的帧率列表，此属性仅在会话中可用。\r\n     */\r\n    public get supportedFrameRates(): Float32Array | undefined {\r\n        return this.session?.supportedFrameRates;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the frame rate for the WebXR session.\r\n     * @param rate The new frame rate to be set, must be within the supportedFrameRates range.\r\n     * @returns A promise that resolves once the frame rate has been set.\r\n     * @zh 为 WebXR 会话设置帧率。\r\n     * @param rate 要设置的新帧率，必须在支持的帧率范围内。\r\n     * @returns 一个承诺，该承诺在帧率已被设置时解决。\r\n     */\r\n    public updateTargetFrameRate(rate: number): Promise<void> {\r\n        return this.session.updateTargetFrameRate(rate);\r\n    }\r\n\r\n    /**\r\n     * @en Cleans up and destroys the WebXR session manager.\r\n     * @zh 清理并销毁 WebXR 会话管理器。\r\n     */\r\n    destroy() {\r\n        if (!this._sessionEnded) {\r\n            this.exitXR();\r\n        }\r\n    }\r\n}","import { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { WebXRCamera } from \"./WebXRCamera\";\r\nimport { WebXRRenderTexture } from \"./WebXRRenderTexture\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\n\r\n\r\n/**\r\n * @en This class is used to manage XRCamera\r\n * @zh 此类用来管理XRCamera\r\n */\r\nexport class WebXRCameraManager {\r\n    /**\r\n     * reference Quaternin\r\n     */\r\n    private _referenceQuaternion: Quaternion = new Quaternion();\r\n    /**\r\n     * reference Position\r\n     */\r\n    private _referencedPosition: Vector3 = new Vector3();\r\n    /**\r\n     * WebXR Session Manager\r\n     */\r\n    private _webXRSessionManager: WebXRSessionManager;\r\n    /**\r\n     * first Frame Flag\r\n     */\r\n    private _firstFrame = true;//初始帧\r\n    /**\r\n     * WebXR RenderTexture\r\n     */\r\n    private _XRRenderTexture: WebXRRenderTexture = new WebXRRenderTexture();\r\n    /**\r\n     * WebXRCamera Array\r\n     */\r\n    private _rigCameras = new Array<WebXRCamera>();\r\n    /**\r\n     * Reference position\r\n     */\r\n    private _position = new Vector3();\r\n\r\n    /**\r\n     * @en The parent object that owns this camera manager.\r\n     * @zh 拥有此摄像机管理器的父对象。\r\n     */\r\n    public owner: any;\r\n\r\n    /**\r\n     * @en The position of the camera.\r\n     * @zh 摄像机的位置。\r\n     */\r\n    get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    set position(newPosition: Vector3) {\r\n\r\n        newPosition.cloneTo(this._position);\r\n    }\r\n\r\n    /**\r\n     * @en The rotation of the camera.\r\n     * @zh 摄像机的旋转\r\n     */\r\n    get rotationQuaternion(): Quaternion {\r\n        return this._referenceQuaternion;\r\n    }\r\n    set rotationQuaternion(value: Quaternion) {\r\n        value.cloneTo(this._referenceQuaternion);\r\n    }\r\n\r\n    /** \r\n     * @en The array of rig cameras.\r\n     * @zh 绑定在此摄像机管理器上的摄像机数组。\r\n     */\r\n    get rigCameras(): WebXRCamera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * @en Creates a new instance of the WebXRCameraManager class.\r\n     * @param camera The parent object that owns this camera manager.\r\n     * @param manager WebXR Session Manager.\r\n     * @zh 创建 WebXRCameraManager 类的新实例。\r\n     * @param camera 父对象，拥有此摄像机管理器。\r\n     * @param manager WebXR管理器。\r\n     */\r\n    constructor(camera: any, manager: WebXRSessionManager = null) {\r\n        this.owner = camera;\r\n        this.owner.enableRender = false;\r\n        if (!this.owner.aspectRatio) {\r\n            console.warn(\"owner is not Camera\");\r\n        }\r\n        this._webXRSessionManager = manager;\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\r\n        this._webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\r\n    }\r\n\r\n    /**\r\n     * @en Updates the frame by the WebXR session, adjusting the camera's position, rotation, and viewport based on the XR session's viewer pose.\r\n     * @zh 通过WebXR会话更新帧，根据XR会话的观察者姿势调整相机的位置、旋转和视口。\r\n     */\r\n    _updateFromXRSession() {\r\n        //XRViewerPose\r\n        let pose = this._webXRSessionManager.currentFrame && this._webXRSessionManager.currentFrame.getViewerPose(this._webXRSessionManager.referenceSpace);\r\n        //update pose data\r\n        const pos = pose.transform.position;\r\n        const orientation = pose.transform.orientation;\r\n        this._referenceQuaternion.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n        this._referencedPosition.setValue(pos.x, pos.y, pos.z);\r\n        if (this._firstFrame) {\r\n            this._firstFrame = false;\r\n            this.position.y += this._referencedPosition.y;\r\n            // avoid using the head rotation on the first frame.\r\n            this._referenceQuaternion.setValue(0, 0, 0, 1);\r\n        } else {\r\n            // update position and rotation as reference\r\n            this.rotationQuaternion = this._referenceQuaternion;\r\n            this.position = this._referencedPosition;\r\n        }\r\n        // Update camera rigs\r\n        if (this.rigCameras.length !== pose.views.length) {\r\n            this._updateNumberOfRigCameras(pose.views.length);\r\n        }\r\n        //XRView\r\n        pose.views.forEach((view: any, i: any) => {\r\n            const currentRig = this.rigCameras[i];\r\n            if (view.eye === \"right\")\r\n                currentRig.name = \"right\";\r\n            else if (view.eye === \"left\")\r\n                currentRig.name = \"left\";\r\n            // Update view/projection matrix\r\n            const pos = view.transform.position;\r\n            const orientation = view.transform.orientation;\r\n            currentRig.transform.position.setValue(pos.x, pos.y, pos.z);\r\n            currentRig.transform.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            currentRig.transform.position = currentRig.transform.position;\r\n            currentRig.transform.rotation = currentRig.transform.rotation;\r\n            // Update viewport\r\n            if (this._webXRSessionManager.session.renderState.baseLayer) {\r\n                var viewport = this._webXRSessionManager.session.renderState.baseLayer.getViewport(view);\r\n                var width = this._webXRSessionManager.session.renderState.baseLayer.framebufferWidth;\r\n                var height = this._webXRSessionManager.session.renderState.baseLayer.framebufferHeight;\r\n                this._XRRenderTexture.frameBuffer = this._webXRSessionManager.session.renderState.baseLayer.framebuffer;\r\n                //update FrameBuffer\r\n                currentRig.renderTarget = this._XRRenderTexture;\r\n                //update clientSize\r\n                currentRig.clientWidth = width;\r\n                currentRig.clientHeight = height;\r\n                //update viewPort\r\n                var cameraViewPort = currentRig.viewport;\r\n                cameraViewPort.x = viewport.x;\r\n                cameraViewPort.y = viewport.y;\r\n                cameraViewPort.width = viewport.width;\r\n                cameraViewPort.height = viewport.height;\r\n                currentRig.viewport = cameraViewPort;\r\n                currentRig.projectionMatrix.cloneByArray(view.projectionMatrix);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update number of WebXRCamera\r\n     * @param viewCount \r\n     */\r\n    private _updateNumberOfRigCameras(viewCount = 1) {\r\n        while (this.rigCameras.length < viewCount) {\r\n            //add camera\r\n            var xrcamera = new WebXRCamera(this.owner.aspectRatio, this.owner.nearPlane, this.owner.farPlane);\r\n            xrcamera.clearFlag = this.owner.clearFlag;\r\n            xrcamera.clearColor = this.owner.clearColor;\r\n            this.owner.addChild(xrcamera);\r\n            this.rigCameras.push(xrcamera);\r\n        }\r\n        while (this.rigCameras.length > viewCount) {\r\n            //remove camera\r\n            let xrcamera = this.rigCameras.pop();\r\n            this.owner.removeChild(xrcamera);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO:update of Reference Space\r\n     */\r\n    private _updateReferenceSpace() {\r\n        //TODO:\r\n    }\r\n\r\n    /**\r\n     * @en Destroys and cleans up resources used by the WebXRCameraManager.\r\n     * @zh 销毁 WebXRCameraManager 并清理使用的资源。\r\n     */\r\n    destroy() {\r\n        this.owner.enableRender = true;\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRSession);\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateReferenceSpace);\r\n        this._webXRSessionManager.off(WebXRSessionManager.EVENT_MANAGER_END, this, this.destroy);\r\n        this._rigCameras.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._rigCameras = null;\r\n        this._XRRenderTexture.destroy();\r\n    }\r\n\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\n\r\n/**\r\n * @en The class used to describe the gamepad axis\r\n * @zh 用于描述设备手柄上的摇杆轴\r\n */\r\nexport class AxiGamepad extends EventDispatcher {\r\n    /**\r\n     * @en Static event name for output axis events.\r\n     * @zh 事件名称，用于输出轴事件。\r\n     */\r\n    static EVENT_OUTPUT: string = \"outputAxi_id\";\r\n    /**\r\n     * @en The name of the axis device.\r\n     * @zh 轴设备名字。\r\n     */\r\n    public handness: string;\r\n    /**\r\n     * @en The number of axes.\r\n     * @zh 轴数量。\r\n     */\r\n    public axisLength: number;\r\n    /**\r\n     * axis Array\r\n     */\r\n    private axisData: Array<Vector2> = new Array();\r\n\r\n    /**\r\n     * 类用于创建轴数据\r\n     * @internal\r\n     * @param handness 轴设备名字\r\n     * @param length 轴数量\r\n     */\r\n    constructor(handness: string, length: number) {\r\n        super();\r\n        this.handness = handness;\r\n        this.axisData.length = length;\r\n        this.axisLength = length;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param padGameAxi 轴数据\r\n     */\r\n    update(padGameAxi: any) {\r\n        for (let i = 0, j = 0; i < padGameAxi.axes.length; i += 2, ++j) {\r\n            if (!this.axisData[j])\r\n                this.axisData[j] = new Vector2();\r\n            this.axisData[j].setValue(padGameAxi.axes[i], padGameAxi.axes[i + 1]);\r\n            this.outPutStickValue(this.axisData[j], j);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 派发轴事件\r\n     * @internal\r\n     * @param value \r\n     * @param index \r\n     */\r\n    outPutStickValue(value: Vector2, index: number) {\r\n        const eventnam = AxiGamepad.EVENT_OUTPUT + index.toString();\r\n        this.event(eventnam, [value]);\r\n    }\r\n\r\n    /**\r\n     * @en Cleans up and removes all listeners for this gamepad's axis events.\r\n     * @zh 清理并移除此游戏手柄轴的所有事件监听器。\r\n     */\r\n    destroy() {\r\n        for (let i = 0; i < this.axisLength; i++) {\r\n            let eventname = AxiGamepad.EVENT_OUTPUT + i.toString();\r\n            this.offAll(eventname);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @en The `ButtonGamepad` class is used to describe gamepad buttons.\r\n * @zh `ButtonGamepad` 类用来描述游戏手柄上的按钮。\r\n */\r\nexport class ButtonGamepad extends EventDispatcher {\r\n    static EVENT_TOUCH_ENTER: string = \"touchEnter\";\r\n    static EVENT_TOUCH_STAY: string = \"touchStay\";\r\n    static EVENT_TOUCH_OUT: string = \"touchOut\";\r\n    static EVENT_PRESS_ENTER: string = \"pressEnter\";\r\n    static EVENT_PRESS_STAY: string = \"pressStay\";\r\n    static EVENT_PRESS_OUT: string = \"pressOut\";\r\n    static EVENT_PRESS_VALUE: string = \"outpressed\";\r\n\r\n    /**\r\n     * @en The handness of the gamepad.\r\n     * @zh 游戏手柄的名称。\r\n     */\r\n    public handness: string;\r\n    /**\r\n     * @en The index of the button on the gamepad.\r\n     * @zh 游戏手柄上按钮的索引。\r\n     */\r\n    public index: number;\r\n\r\n    /**\r\n     * front touch state\r\n     */\r\n    private lastTouch: boolean = false;\r\n    private lastPress: boolean = false;\r\n    private lastPressValue: number = 0;\r\n\r\n    /**\r\n     * current touch state\r\n     */\r\n    private touch: boolean = false;\r\n    private press: boolean = false;\r\n    private pressValue: number = 0;\r\n\r\n\r\n    /**\r\n     * @en Creates a new instance of the `ButtonGamepad` class.\r\n     * @param handness The name of the gamepad.\r\n     * @param index The index of the button on the gamepad.\r\n     * @zh 创建 ButtonGamepad 类的新实例。\r\n     * @param handness 设备名称\r\n     * @param index button索引\r\n     */\r\n    constructor(handness: string, index: number) {\r\n        super();\r\n        this.handness = handness;\r\n        this.index = index;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * GamePadButton update\r\n     */\r\n    update(padButton: any) {\r\n        //set Data\r\n        this.lastTouch = this.touch;\r\n        this.lastPress = this.press;\r\n        this.lastPressValue = this.pressValue;\r\n        this.touch = padButton.touched;\r\n        this.press = padButton.pressed;\r\n        this.pressValue = padButton.value;\r\n        if (!this.lastTouch && !this.touch) {\r\n            return;\r\n        }\r\n        if (this.lastTouch != this.touch && this.touch) {\r\n            this.touchEnter();\r\n        } else if (this.lastTouch == this.touch && this.touch) {\r\n            this.touchStay();\r\n        } else if (this.lastTouch != this.touch && !this.touch) {\r\n            this.touchOut();\r\n        }\r\n        if (this.lastPress != this.press && this.press) {\r\n            this.pressEnter();\r\n        } else if (this.lastPress == this.press && this.press) {\r\n            this.pressStay();\r\n        } else if (this.lastPress != this.press && !this.press) {\r\n            this.pressOut();\r\n        }\r\n        if (this.touch) {\r\n            this.outpressed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch enter\r\n     */\r\n    private touchEnter() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_ENTER);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch Stay\r\n     */\r\n    private touchStay() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_STAY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event touch Out\r\n     */\r\n    private touchOut() {\r\n        this.event(ButtonGamepad.EVENT_TOUCH_OUT);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press enter\r\n     */\r\n    private pressEnter() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_ENTER);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press Stay\r\n     */\r\n    private pressStay() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_STAY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press Out\r\n     */\r\n    private pressOut() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_OUT);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * event press value\r\n     */\r\n    private outpressed() {\r\n        this.event(ButtonGamepad.EVENT_PRESS_VALUE, [this.pressValue]);\r\n    }\r\n\r\n    /**\r\n     * @en Cleans up and removes all listeners for this gamepad's button events.\r\n     * @zh 清理并移除此游戏手柄按钮的所有事件监听器。\r\n     */\r\n    destroy() {\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_ENTER);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_STAY);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_OUT);\r\n        this.offAll(ButtonGamepad.EVENT_PRESS_VALUE);\r\n    }\r\n}","import { EventDispatcher } from \"../../../events/EventDispatcher\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Ray } from \"../../math/Ray\";\r\nimport { ButtonGamepad, AxiGamepad } from \"./WebXRGamepad\";\r\n\r\n\r\n/**\r\n * @en The `WebXRInput` class is used to describe input devices for WebXR.\r\n * @zh `WebXRInput` 类用来描述 WebXR 的输入设备。\r\n */\r\nexport class WebXRInput extends EventDispatcher {\r\n    static HANDNESS_LEFT: string = \"left\";\r\n    static HANDNESS_RIGHT: string = \"right\";\r\n    static EVENT_FRAMEUPDATA_WEBXRINPUT: string = \"frameXRInputUpdate\";\r\n    private static tempQua: Quaternion = new Quaternion();\r\n    /**\r\n     * 预处理Button事件\r\n     */\r\n    private preButtonEventList: Array<any> = [];\r\n    /**\r\n     * 预处理axis事件\r\n     */\r\n    private preAxisEventList: Array<any> = [];\r\n    /**\r\n     * @internal\r\n     */\r\n    public _inputSource: any;//XRInputSource\r\n\r\n    /**\r\n     * @en The last XR pose data.\r\n     * @zh 上一次的 XR 姿态数据。\r\n     */\r\n    public lastXRPose: any;\r\n    /**\r\n     * @en The handness of the device, \"left\" or \"right\".\r\n     * @zh 设备名称，\"left\" 或 \"right\"。\r\n     */\r\n    public handness: string;\r\n    /**\r\n     * @en The input ray representing the direction of the hand or controller.\r\n     * @zh 表示手或控制器方向的输入射线。\r\n     */\r\n    public ray: Ray;\r\n    /**\r\n     * @en The position of the hand or controller.\r\n     * @zh 手或控制器的位置。\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * @en The rotation of the hand or controller.\r\n     * @zh 手或控制器的旋转。\r\n     */\r\n    public rotation: Quaternion;\r\n    /**\r\n     * @en The last position of the input ray.\r\n     * @zh 输入射线的上一个位置。\r\n     */\r\n    public _lastXRPose: any;\r\n\r\n    /**\r\n     * @en Information about the gamepad buttons.\r\n     * @zh 游戏手柄按钮的信息。\r\n     */\r\n    public gamepadButton: Array<ButtonGamepad>;\r\n\r\n    /**\r\n     * @en Information about the gamepad axes.\r\n     * @zh 游戏手柄轴的信息。\r\n     */\r\n    public gamepadAxis: AxiGamepad;\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Creates a new instance of the `WebXRInput` class.\r\n     * @param handness  The handness of the device, \"left\" or \"right\".\r\n     * @zh 创建 `WebXRInput` 类的新实例。\r\n     * @param handness 设备名称，\"left\" 或 \"right\"。\r\n     */\r\n    constructor(handness: string) {\r\n        super();\r\n        this.handness = handness;\r\n        this.position = new Vector3();\r\n        this.rotation = new Quaternion();\r\n        this.ray = new Ray(new Vector3(), new Vector3());\r\n    }\r\n\r\n    /**\r\n     * 更新XRInput数据\r\n     * @internal\r\n     * @param xrFrame WebXR帧数据\r\n     * @param referenceSpace 参考空间\r\n     */\r\n    _updateByXRPose(xrFrame: any, referenceSpace: any) {\r\n        //updateRay\r\n        const rayPose = xrFrame.getPose(this._inputSource.targetRaySpace, referenceSpace);\r\n        this._lastXRPose = rayPose;\r\n        if (rayPose) {\r\n            const pos = rayPose.transform.position;\r\n            const orientation = rayPose.transform.orientation;\r\n            WebXRInput.tempQua.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            this.ray.origin.setValue(pos.x, pos.y, pos.z);\r\n            Vector3.transformQuat(Vector3.UnitZ, WebXRInput.tempQua, this.ray.direction);\r\n            Vector3.scale(this.ray.direction, -1, this.ray.direction);\r\n        }\r\n        //updateMesh\r\n        if (this._inputSource.gripSpace) {\r\n            let meshPose = xrFrame.getPose(this._inputSource.gripSpace, referenceSpace);\r\n            if (meshPose) {\r\n                const pos = meshPose.transform.position;\r\n                const orientation = meshPose.transform.orientation;\r\n                this.position.setValue(pos.x, pos.y, pos.z);\r\n                this.rotation.setValue(orientation.x, orientation.y, orientation.z, orientation.w);\r\n            }\r\n        }\r\n        this.event(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, [this]);\r\n        //handle gamepad\r\n        this._handleProcessGamepad();\r\n    }\r\n\r\n\r\n    /**\r\n     * handle gamepad Event\r\n     */\r\n    private _handleProcessGamepad() {\r\n        //axis init\r\n        const gamepad = this._inputSource.gamepad;\r\n        if (!this.gamepadAxis) {\r\n            this.gamepadAxis = new AxiGamepad(this.handness, gamepad.axes.length);\r\n            //preEvent\r\n            this.preAxisEventList.forEach(element => {\r\n                this.gamepadAxis.on(element.eventnam, element.caller, element.listener);\r\n            });\r\n        }\r\n        if (!this.gamepadButton) {\r\n            this.gamepadButton = [];\r\n            for (let i = 0; i < gamepad.buttons.length; ++i) {\r\n                this.gamepadButton.push(new ButtonGamepad(this.handness, i));\r\n            }\r\n            //preEvent\r\n            this.preButtonEventList.forEach(element => {\r\n                this.addButtonEvent(element.index, element.type, element.caller, element.listener);\r\n            });\r\n        }\r\n        //axis\r\n        this.gamepadAxis.update(gamepad);\r\n        //button\r\n        for (let i = 0; i < gamepad.buttons.length; ++i) {\r\n            let button = this.gamepadButton[i];\r\n            button.update(gamepad.buttons[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Adds an event listener for a gamepad button.\r\n     * @param index The index of the button.\r\n     * @param type The type of event.\r\n     * @param caller The execution scope of the event listener function.\r\n     * @param listener The event listener function.\r\n     * @zh 为游戏手柄按钮添加事件侦听器\r\n     * @param index 按钮索引。\r\n     * @param type 事件类型。\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    addButtonEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (!this.gamepadButton) {\r\n            this.preButtonEventList.push({\r\n                \"index\": index,\r\n                \"type\": type,\r\n                \"caller\": caller,\r\n                \"listener\": listener\r\n            });\r\n        } else {\r\n            let button = this.gamepadButton[index];\r\n            button.on(type, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Adds an event listener for a gamepad axis.\r\n     * @param index The index of the axis.\r\n     * @param type The type of event.\r\n     * @param caller The execution scope of the event listener function.\r\n     * @param list ener The event listener function.\r\n     * @zh 为游戏手柄轴添加事件侦听器。\r\n     * @param index 轴索引。\r\n     * @param type 事件类型。\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    addAxisEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (!this.gamepadAxis) {\r\n            this.preAxisEventList.push({\r\n                \"eventnam\": type + index.toString(),\r\n                \"caller\": caller,\r\n                \"listener\": listener\r\n            });\r\n        } else {\r\n            const eventnam = type + index.toString();\r\n            this.gamepadAxis.on(eventnam, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes an event listener for a gamepad axis.\r\n     * @param index The index of the axis.\r\n     * @param type The type of event.\r\n     * @param caller The execution scope of the event listener function.\r\n     * @param listener The event listener function.\r\n     * @zh 移除游戏手柄轴的事件侦听器。\r\n     * @param index 轴索引。\r\n     * @param type 事件类型。\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    offAxisEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (this.gamepadAxis) {\r\n            const eventnam = type + index.toString();\r\n            this.gamepadAxis.off(eventnam, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Removes an event listener for a gamepad button.\r\n     * @param index The index of the button.\r\n     * @param type The type of event.\r\n     * @param caller The execution scope of the event listener function.\r\n     * @param listener The event listener function.\r\n     * @zh 移除游戏手柄按钮的事件侦听器\r\n     * @param index 按钮索引。\r\n     * @param type 事件类型。\r\n     * @param caller 事件侦听函数的执行域。\r\n     * @param listener 事件侦听函数。\r\n     */\r\n    offButtonEvent(index: number, type: string, caller: any, listener: Function) {\r\n        if (this.gamepadButton) {\r\n            let button = this.gamepadButton[index];\r\n            button.off(type, caller, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroys and cleans up the WebXR input instance.\r\n     * @zh 销毁并清理 WebXR 输入实例。\r\n     */\r\n    destroy() {\r\n        this.preButtonEventList = null;\r\n        this.ray = null;\r\n        this.position = null;\r\n        this.rotation = null;\r\n        this.gamepadAxis.destroy();\r\n        this.gamepadButton.forEach(element => {\r\n            element.destroy();\r\n        });\r\n    }\r\n}","import { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { PixelLineSprite3D } from \"../../core/pixelLine/PixelLineSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { WebXRInput } from \"./WebXRInput\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\n\r\n\r\n/**\r\n * @en The `WebXRInputManager` class is responsible for managing input devices in a WebXR environment.\r\n * - The path of the CDN from which the sample will fetch controller models:\r\n * - MeshSource https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0.9/dist/profiles/\r\n * @zh `WebXRInputManager` 类用来在 WebXR 环境中管理输入设备。\r\n * - 样本将从此 CDN 路径获取控制器模型的路径：\r\n * - MeshSource <https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0.9/dist/profiles/>\r\n */\r\nexport class WebXRInputManager {\r\n    /**\r\n     * @en A temporary Vector3 for calculations.\r\n     * @zh 用于计算的临时 Vector3。\r\n     */\r\n    static tempVec: Vector3 = new Vector3();\r\n    /**\r\n     * @en Another temporary Vector3 for calculations.\r\n     * @zh 另一个用于计算的临时 Vector3。\r\n     */\r\n    static tempVec1: Vector3 = new Vector3();\r\n    /**\r\n     * Session Manager\r\n     */\r\n    private webXRSessionManager: WebXRSessionManager;\r\n    /**\r\n     * webXRCamera Manager\r\n     */\r\n    private webXRCameraManager: WebXRCameraManager;\r\n    /**\r\n     * array of XRInput\r\n     */\r\n    private controllers: Map<string, WebXRInput> = new Map();\r\n    /**\r\n     * bind of XRInput Node Render\r\n     */\r\n    private controllerHandMesh: Map<string, Sprite3D> = new Map();\r\n    /**\r\n     * bind of XRInput Ray Render\r\n     */\r\n    private controllerLineRender: Map<string, PixelLineSprite3D> = new Map();\r\n    /**\r\n     * line Color\r\n     */\r\n    private lineColor: Color = Color.RED;\r\n    /**\r\n     * Ray length\r\n     */\r\n    private rayLength: number = 2;\r\n\r\n    /**\r\n     * @en Creates a new instance of the `WebXRInputManager` class.\r\n     * @param webxrManager WebXR Session manager\r\n     * @param webXRCamera WebXR Manager\r\n     * @zh 创建 WebXRInputManager 类的新实例\r\n     * @param webxrManager WebXR 会话管理器\r\n     * @param webXRCamera WebXR 管理器\r\n     */\r\n    constructor(webxrManager: WebXRSessionManager, webXRCamera: WebXRCameraManager) {\r\n        this.webXRSessionManager = webxrManager;\r\n        this.webXRCameraManager = webXRCamera;\r\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END, this, this.destory);\r\n        this.webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\r\n    }\r\n\r\n    /**\r\n     * 更新输入挂点\r\n     * @param xrInput \r\n     */\r\n    private _updataMeshRender(xrInput: WebXRInput) {\r\n        const handness = xrInput.handness;\r\n        //mesh\r\n        if (this.controllerHandMesh.has(handness)) {\r\n            let meshNode = this.controllerHandMesh.get(handness);\r\n            meshNode.transform.position = xrInput.position;\r\n            meshNode.transform.rotation = xrInput.rotation;\r\n        }\r\n        //rayLine\r\n        if (this.controllerLineRender.has(handness)) {\r\n            let line = this.controllerLineRender.get(handness);\r\n            line.clear();\r\n            let ray = xrInput.ray;\r\n            WebXRInputManager.tempVec.setValue(ray.origin.x, ray.origin.y, ray.origin.z);\r\n            Vector3.scale(ray.direction, this.rayLength, WebXRInputManager.tempVec1);\r\n            Vector3.add(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, WebXRInputManager.tempVec1);\r\n            line.addLine(WebXRInputManager.tempVec, WebXRInputManager.tempVec1, this.lineColor, this.lineColor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * WebXRInput帧循环\r\n     * @param xrFrame \r\n     */\r\n    private _updateFromXRFrame(xrFrame: any) {\r\n        //frame, this.xrSessionManager.referenceSpace, this.xrCamera\r\n        const session = this.webXRSessionManager.session;\r\n        const refSpace = this.webXRSessionManager.referenceSpace;\r\n        for (let inputSource of session.inputSources) {\r\n            const key = inputSource.handedness;\r\n            let xrInput: WebXRInput;\r\n            if (!this.controllers.has(key)) {\r\n                xrInput = this.getController(key);\r\n            }else\r\n                xrInput = this.controllers.get(key);\r\n            if(xrInput){\r\n                xrInput = this.controllers.get(key);\r\n                xrInput._inputSource = inputSource;\r\n                xrInput._updateByXRPose(xrFrame, refSpace);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Binds a rendering node to the input device.\r\n     * @param meshSprite The rendering sprite to bind.\r\n     * @param handness The handness of the device, \"left\" or \"right\".\r\n     * @zh 将渲染节点绑定到输入设备。\r\n     * @param meshSprite 渲染挂点。\r\n     * @param handness 设备名称，\"left\" 或 \"right\"。\r\n     */\r\n    bindMeshNode(meshSprite: Sprite3D, handness: string) {\r\n        this.controllerHandMesh.set(handness, meshSprite);\r\n    }\r\n\r\n    /**\r\n     * @en Binds a ray to the input device for visual representation.\r\n     * @param lineSprite The line sprite to bind as a ray.\r\n     * @param handness The handness of the device, \"left\" or \"right\".\r\n     * @zh 为输入设备绑定射线以进行可视化表示。\r\n     * @param lineSprite 作为射线绑定的线条精灵。\r\n     * @param handness 设备名称，\"left\" 或 \"right\"。\r\n     */\r\n    bindRayNode(lineSprite: PixelLineSprite3D, handness: string) {\r\n        this.controllerLineRender.set(handness, lineSprite);\r\n    }\r\n\r\n    /**\r\n     * @en Retrieves the input device based on the specified handness.\r\n     * @param handness The handness of the device, \"left\" or \"right\".\r\n     * @returns The WebXRInput instance or null if handness is not valid.\r\n     * @zh 根据指定的设备名称获得输入设备。\r\n     * @param handness 设备名称，\"left\" 或 \"right\"。\r\n     * @returns 返回 WebXRInput 实例，如果手部设备名称无效则返回 null。\r\n     */\r\n    getController(handness: string): WebXRInput {\r\n        if (handness != \"left\" && handness != \"right\")\r\n            return null;\r\n        if (!this.controllers.has(handness)) {\r\n            let value = new WebXRInput(handness);\r\n            this.controllers.set(handness, value);\r\n            value.on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT, this, this._updataMeshRender);\r\n        }\r\n        return this.controllers.get(handness);\r\n    }\r\n\r\n    /**\r\n     * @en Destroys and cleans up the WebXR input manager.\r\n     * @zh 销毁并清理 WebXR 输入管理器。\r\n     */\r\n    destory() {\r\n        this.webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP, this, this._updateFromXRFrame);\r\n        for (let key in this.controllers) {\r\n            this.controllers.get(key).off(\"frameXRInputUpdate\", this, this._updataMeshRender);\r\n            this.controllers.get(key).destroy();\r\n        }\r\n        this.controllers = null;\r\n        this.controllerHandMesh = null;\r\n        this.controllerLineRender = null;\r\n    }\r\n}\r\n\r\n","import { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { WebXRCameraManager } from \"./WebXRCameraManager\";\r\nimport { WebXRInputManager } from \"./WebXRInputManager\";\r\nimport { WebXRSessionManager } from \"./WebXRSessionManager\";\r\nexport class WebXRCameraInfo {\r\n    /**depth far */\r\n    depthFar: number;\r\n    /**depth near */\r\n    depthNear: number;\r\n    /**camera */\r\n    camera: any;\r\n}\r\n\r\n/**\r\n * @en Used to manage WebXR\r\n * @zh 用来管理WebXR\r\n */\r\nexport class WebXRExperienceHelper {\r\n    /**\r\n     * @en The WebGL instance.\r\n     * @zh WebGL 实例。\r\n     */\r\n    static glInstance: any;\r\n    /**\r\n     * @en The singleton instance of the XR session manager.\r\n     * @zh XR 会话管理器的单例实例。\r\n     */\r\n    public static xr_Manager = new WebXRSessionManager();\r\n    /**\r\n     * @en Indicates whether WebXR is supported in the current environment.\r\n     * @zh 表示当前环境是否支持 WebXR。\r\n     */\r\n    public static supported = false;\r\n    /**\r\n     * @en Default options for the XRWebGLLayer.\r\n     * @zh XRWebGLLayer 的默认选项。\r\n     */\r\n    public static canvasOptions = {\r\n        antialias: true,\r\n        depth: true,\r\n        stencil: false,\r\n        alpha: true,\r\n        multiview: false,\r\n        framebufferScaleFactor: 1,\r\n    };\r\n\r\n    /**\r\n     * @en Checks if a specific XRSession mode is supported.\r\n     * @param sessionMode The session mode to check, e.g., \"inline\", \"immersive-vr\", \"immersive-ar\".\r\n     * @returns A promise that resolves to a boolean indicating whether the mode is supported.\r\n     * @zh 检查是否支持特定的 XRSession 模式。\r\n     * @param sessionMode 要检查的会话模式，例如：\"inline\"、\"immersive-vr\"、\"immersive-ar\"。\r\n     * @returns 一个 Promise，该 Promise 将解析为一个布尔值，表示是否支持。\r\n     */\r\n    public static supportXR(sessionMode: string): Promise<boolean> {\r\n        return WebXRExperienceHelper.xr_Manager.isSessionSupportedAsync(sessionMode).then(value => {\r\n            WebXRExperienceHelper.supported = value;\r\n            return value;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Enters the specified XR session mode and sets up the reference space and WebGL layer.\r\n     * @param sessionMode The session mode, e.g., \"inline\", \"immersive-vr\", \"immersive-ar\".\r\n     * @param referenceSpaceType The reference space type, e.g., \"viewer\", \"local\", \"local-floor\", \"unbounded\".\r\n     * @param cameraInfo The WebXR camera settings.\r\n     * @returns A promise that resolves to the WebXRSessionManager.\r\n     * @zh 进入指定的 XR 会话模式，并设置引用空间和 WebGL 层。\r\n     * @param sessionMode 要进入的会话模式，例如：\"inline\"、\"immersive-vr\"、\"immersive-ar\"。\r\n     * @param referenceSpaceType 要使用的参考空间类型，例如：\"viewer\"、\"local\"、\"local-floor\"、\"unbounded\"。\r\n     * @param cameraInfo WebXR相机设置。\r\n     * @returns 一个 Promise，该 Promise 将解析为 WebXRSessionManager。\r\n     */\r\n    public static enterXRAsync(sessionMode: string, referenceSpaceType: string, cameraInfo: WebXRCameraInfo): Promise<WebXRSessionManager> {\r\n        if (sessionMode === \"immersive-ar\" && referenceSpaceType !== \"unbounded\") {\r\n            console.warn(\"We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode\");\r\n        }\r\n\r\n        //session\r\n        return WebXRExperienceHelper.xr_Manager.initializeSessionAsync(sessionMode).then(() => {\r\n            //refernceSpace\r\n            return WebXRExperienceHelper.xr_Manager.setReferenceSpaceTypeAsync(referenceSpaceType);\r\n        }).then(() => {\r\n            //webglSurport\r\n            //@ts-ignore\r\n            return WebXRExperienceHelper.xr_Manager.initializeXRGL(sessionMode, LayaGL.renderEngine.gl);\r\n        }).then(() => {\r\n            //@ts-ignore\r\n            WebXRExperienceHelper.glInstance = LayaGL.renderEngine.gl;\r\n            return WebXRExperienceHelper.xr_Manager.updateRenderStateAsync({\r\n                depthFar: cameraInfo.depthFar,\r\n                depthNear: cameraInfo.depthNear,\r\n                //@ts-ignore\r\n                baseLayer: new XRWebGLLayer(WebXRExperienceHelper.xr_Manager.session, LayaGL.renderEngine.gl),\r\n            });\r\n        }).then(() => {\r\n            WebXRExperienceHelper.xr_Manager.runXRRenderLoop();\r\n            return WebXRExperienceHelper.xr_Manager;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Configures a WebXRCameraManager with the given camera and session manager.\r\n     * @param camera The camera to configure.\r\n     * @param manager The WebXR session manager.\r\n     * @returns A new WebXRCameraManager instance.\r\n     * @zh 使用给定的摄像机和会话管理器配置 WebXRCameraManager。\r\n     * @param camera 要配置的摄像机。\r\n     * @param manager WebXR 会话管理器。\r\n     * @returns 一个新的 WebXRCameraManager 实例。\r\n     */\r\n    public static setWebXRCamera(camera: Camera, manager: WebXRSessionManager): WebXRCameraManager {\r\n        return new WebXRCameraManager(camera, manager);\r\n    }\r\n\r\n    /**\r\n     * @en Configures a WebXRInputManager with the given session and camera managers.\r\n     * @param sessionManager The WebXR session manager.\r\n     * @param cameraManager The WebXR camera manager.\r\n     * @returns A new WebXRInputManager instance.\r\n     * @zh 使用给定的会话和摄像机管理器配置 WebXRInputManager。\r\n     * @param sessionManager WebXR 会话管理器。\r\n     * @param cameraManager WebXR 摄像机管理器。\r\n     * @returns 一个新的 WebXRInputManager 实例。\r\n     */\r\n    public static setWebXRInput(sessionManager: WebXRSessionManager, cameraManager: WebXRCameraManager): WebXRInputManager {\r\n        return new WebXRInputManager(sessionManager, cameraManager);\r\n    }\r\n}","import { IUniformBufferUser } from \"./IUniformBufferUser\";\r\nimport { UniformBufferCluster } from \"./UniformBufferCluster\";\r\n\r\n/**\r\n * Uniform内存块（小内存块）\r\n */\r\nexport class UniformBufferBlock {\r\n    sn: number; //序列号\r\n    cluster: UniformBufferCluster; //大内存管理对象\r\n    index: number; //在大内存中的序号\r\n    offset: number; //在大内存中的偏移\r\n    size: number; //实际尺寸\r\n    alignedSize: number; //字节对齐后的尺寸\r\n    uploadNum: number; //上传次数\r\n    moved: boolean; //是否已经完成移动\r\n    user: IUniformBufferUser; //内存块使用者\r\n    destroyed: boolean = false; //该对象是否已经销毁\r\n\r\n    constructor(sn: number, cluster: UniformBufferCluster, index: number, size: number, alignedSize: number, user: IUniformBufferUser) {\r\n        this.sn = sn;\r\n        this.cluster = cluster;\r\n        this.index = index;\r\n        this.size = size;\r\n        this.alignedSize = alignedSize;\r\n        this.offset = alignedSize * index;\r\n        this.user = user;\r\n        this.uploadNum = 0;\r\n        this.moved = false;\r\n    }\r\n\r\n    /**\r\n     * 标记块需要上传\r\n     */\r\n    needUpload() {\r\n        this.uploadNum++;\r\n        this.cluster.needUpload[this.index] = true;\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            this.cluster = null;\r\n            this.user = null;\r\n            this.destroyed = true;\r\n            return true;\r\n        }\r\n        console.warn('UniformBufferBlock: object alreay destroyed!');\r\n        return false;\r\n    }\r\n}","import { IUniformBufferUser } from \"./IUniformBufferUser\";\r\nimport { UniformBufferBlock } from \"./UniformBufferBlock\";\r\nimport { UniformBufferManager, roundUp } from \"./UniformBufferManager\";\r\n\r\n/**\r\n * Uniform内存块（大内存块）\r\n */\r\nexport class UniformBufferCluster {\r\n    sn: number = 0; //序号\r\n    totalSize: number; //总体尺寸\r\n    blockSize: number; //小块尺寸\r\n    blockNum: number; //小块总数量\r\n    needUpload: boolean[] = []; //哪些块需要上传\r\n    destroyed: boolean = false; //该对象是否已经销毁\r\n\r\n    buffer: any; //GPU内存对象\r\n    blocks: UniformBufferBlock[] = []; //小内存块，如果成员为null，表示空洞\r\n    expand: number = 10; //每次扩展数量\r\n\r\n    data: ArrayBuffer; //数据\r\n    move: Uint8Array; //移动时的临时数据\r\n\r\n    manager: UniformBufferManager; //管理器\r\n\r\n    constructor(blockSize: number, blockNum: number, manager: UniformBufferManager) {\r\n        this.manager = manager;\r\n        this.blockSize = blockSize;\r\n        this.blockNum = blockNum;\r\n        this.totalSize = blockSize * blockNum;\r\n\r\n        this.data = new ArrayBuffer(this.totalSize);\r\n        this.move = new Uint8Array(this.blockSize);\r\n\r\n        this.buffer = this.manager.createGPUBuffer(this.totalSize);\r\n\r\n        this.needUpload.length = this.blockNum;\r\n        this.needUpload.fill(false);\r\n        this.manager.statisGPUMemory(this.totalSize);\r\n    }\r\n\r\n    get usedNum() {\r\n        return this.blocks.length;\r\n    }\r\n\r\n    /**\r\n     * 扩展GPU缓冲区\r\n     */\r\n    private _expandBuffer() {\r\n        //计算扩展尺寸\r\n        let expandNum = this.blockNum;\r\n        this.blockNum += this.expand;\r\n        if (this.blockNum > this.manager.clusterMaxBlock)\r\n            this.blockNum = this.manager.clusterMaxBlock;\r\n        expandNum = this.blockNum - expandNum;\r\n        this.totalSize = this.blockSize * this.blockNum;\r\n        const expandSize = this.blockSize * this.expand;\r\n        this.needUpload = this.needUpload.concat(new Array(expandNum).fill(false));\r\n\r\n        //创建一个新的CPUBuffer，将旧数据拷贝过来\r\n        const newArrayBuffer = new ArrayBuffer(this.totalSize);\r\n        new Uint8Array(newArrayBuffer).set(new Uint8Array(this.data));\r\n        this.data = newArrayBuffer;\r\n\r\n        //创建一个新的GPUBuffer\r\n        this.buffer = this.manager.createGPUBuffer(this.totalSize);\r\n\r\n        //统计GPU内存使用量\r\n        this.manager.statisGPUMemory(expandSize);\r\n\r\n        //通知所有使用者\r\n        this.blocks.forEach(block => block && block.user.notifyGPUBufferChange());\r\n\r\n        //通知渲染上下文\r\n        this.manager.renderContext.notifyGPUBufferChange();\r\n\r\n        //console.log(\"GPUBuffer expand, newSize =\", this.totalSize / 1024 + 'KB,', 'blockSize = ' + this.blockSize, 'blockNum = ' + this.blockNum);\r\n    }\r\n\r\n    /**\r\n     * 移动内存块，后面的块向前移动，填补指定的内存空洞\r\n     * @param index \r\n     */\r\n    private _moveBlock(index: number) {\r\n        const len = this.blocks.length;\r\n        if (index >= len) return;\r\n        const dataView = new Uint8Array(this.data);\r\n        const size = this.blockSize;\r\n        for (let i = index + 1; i < len; i++) {\r\n            const start = i * size;\r\n            const end = start + size;\r\n            const target = start - size;\r\n            dataView.copyWithin(target, start, end);\r\n            this.needUpload[i - 1] = this.needUpload[i];\r\n            this.blocks[i - 1] = this.blocks[i];\r\n            if (this.blocks[i - 1]) {\r\n                this.blocks[i - 1].index--;\r\n                this.blocks[i - 1].offset -= size;\r\n                this.blocks[i - 1].user.notifyGPUBufferChange();\r\n            }\r\n        }\r\n        this.blocks.length--;\r\n\r\n        //通知渲染上下文\r\n        this.manager.renderContext.notifyGPUBufferChange();\r\n    }\r\n\r\n    /**\r\n     * 获取内存块\r\n     * @param size 需求尺寸\r\n     * @param user 使用者\r\n     */\r\n    getBlock(size: number, user: IUniformBufferUser) {\r\n        const alignedSize = roundUp(size, this.manager.byteAlign);\r\n        if (alignedSize !== this.blockSize) {\r\n            console.warn('WebGPUBufferCluster: 获取内存块时, 长度错误!');\r\n            return null;\r\n        }\r\n\r\n        const index = this._getBlockWithExpand();\r\n        const bb = new UniformBufferBlock(this.manager.snCounter++, this, index, size, alignedSize, user);\r\n        this.blocks[index] = bb;\r\n        return bb;\r\n    }\r\n\r\n    /**\r\n     * 释放内存块\r\n     */\r\n    freeBlock(bb: UniformBufferBlock) {\r\n        //根据传入的块信息，将块信息从used数组中移除，并添加到free数组中\r\n        const index = this.blocks.indexOf(bb);\r\n        if (index !== -1) {\r\n            if (index === this.blocks.length - 1) { //删除最后一个\r\n                this.blocks.length--;\r\n            } else {\r\n                this.blocks[index] = null; //变成空洞\r\n                this.needUpload[index] = false;\r\n            }\r\n            bb.destroy();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 将数据上传到GPU内存，合并相邻块，尽可能减少上传次数\r\n     */\r\n    upload() {\r\n        let count = 0;\r\n        let bytes = 0;\r\n        let next = false;\r\n        let startIndex = -1;\r\n        let endIndex = -1;\r\n        let offset = 0;\r\n        let size = 0;\r\n\r\n        //遍历needUpload数组，找到需要上传的块，然后合并相邻块，上传数据\r\n        for (let i = 0, len = this.blocks.length; i < len; i++) {\r\n            if (this.needUpload[i]) {\r\n                if (startIndex === -1)\r\n                    startIndex = i;\r\n                endIndex = i;\r\n                next = true;\r\n                this.needUpload[i] = false;\r\n            } else {\r\n                //如果当前块不需要上传，且之前有需要上传的块，则上传数据\r\n                if (next) {\r\n                    offset = startIndex * this.blockSize;\r\n                    size = (endIndex - startIndex + 1) * this.blockSize;\r\n                    this.manager.writeBuffer(this.buffer, this.data, offset, size);\r\n                    count++;\r\n                    bytes += size;\r\n                    startIndex = -1;\r\n                    endIndex = -1;\r\n                    next = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        //如果最后一个块需要上传，则上传数据\r\n        if (next) {\r\n            offset = startIndex * this.blockSize;\r\n            size = (endIndex - startIndex + 1) * this.blockSize;\r\n            this.manager.writeBuffer(this.buffer, this.data, offset, size);\r\n            count++;\r\n            bytes += size;\r\n        }\r\n\r\n        //记录上传次数，字节数\r\n        this.manager.uploadNum += count;\r\n        this.manager.uploadByte += bytes;\r\n        this.manager.statisUpload(count, bytes);\r\n    }\r\n\r\n    /**\r\n     * 优化块顺序，上传频繁的块排前面\r\n     */\r\n    optimize() {\r\n        for (let i = this.blocks.length - 1; i > -1; i--) {\r\n            const bb = this.blocks[i];\r\n            if (bb && bb.uploadNum > this.manager.uploadThreshold && !bb.moved && i > 0) {\r\n                const needUpload = this.needUpload[i];\r\n                const size = this.blockSize;\r\n                const dataView = new Uint8Array(this.data);\r\n                this.move.set(new Uint8Array(this.data, size * i, size));\r\n                for (let j = i - 1; j >= 0; j--) {\r\n                    const start = j * size;\r\n                    const end = start + size;\r\n                    const target = start + size;\r\n                    dataView.copyWithin(target, start, end);\r\n                    this.needUpload[j + 1] = this.needUpload[j];\r\n                    this.blocks[j + 1] = this.blocks[j];\r\n                    if (this.blocks[j + 1]) {\r\n                        this.blocks[j + 1].index++;\r\n                        this.blocks[j + 1].offset += size;\r\n                        this.blocks[j + 1].user.notifyGPUBufferChange();\r\n                    }\r\n                }\r\n                dataView.set(this.move);\r\n                this.needUpload[0] = needUpload;\r\n                bb.index = 0;\r\n                bb.offset = 0;\r\n                bb.moved = true;\r\n                this.blocks[0] = bb;\r\n                this.blocks[0].user.notifyGPUBufferChange();\r\n                this.manager.renderContext.notifyGPUBufferChange(); //清理renderBuddle\r\n                this.manager.moveNum++;\r\n                break; //每帧只处理一个块\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除空洞\r\n     */\r\n    removeHole() {\r\n        for (let i = this.blocks.length - 1; i > -1; i--) {\r\n            if (!this.blocks[i]) {\r\n                this._moveBlock(i);\r\n                break; //每帧只处理一个块\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理，释放所有内存块，回到内存未占用状态\r\n     * @param blockNum 保留多少小块\r\n     */\r\n    clear(blockNum?: number) {\r\n        this.blocks.forEach(block => block && block.destroy());\r\n        this.blocks.length = 0;\r\n        if (blockNum != undefined && blockNum > 0 && blockNum !== this.blockNum) {\r\n            this.blockNum = blockNum;\r\n            this.totalSize = this.blockSize * this.blockNum;\r\n            this.buffer = this.manager.createGPUBuffer(this.totalSize);\r\n            this.data = new ArrayBuffer(this.totalSize);\r\n        } else {\r\n            this.blockNum = 0;\r\n            this.totalSize = 0;\r\n            this.buffer = null;\r\n            this.data = null;\r\n        }\r\n        this.needUpload.length = this.blockNum;\r\n        this.needUpload.fill(false);\r\n    }\r\n\r\n    /**\r\n     * 获取一个空闲块，如果空间不够，扩大内存块\r\n     */\r\n    private _getBlockWithExpand() {\r\n        //先查找空洞\r\n        for (let i = this.blocks.length - 1; i > -1; i--) {\r\n            if (!this.blocks[i])\r\n                return i;\r\n        }\r\n        if (this.blocks.length < this.blockNum)\r\n            return this.blocks.length;\r\n        else {\r\n            this._expandBuffer();\r\n            return this.blocks.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            this.clear();\r\n            this.buffer.destroy ?? this.buffer.destroy();\r\n            this.manager.statisGPUMemory(-this.totalSize);\r\n            this.destroyed = true;\r\n            return true;\r\n        }\r\n        console.warn('UniformBufferCluster: object alreay destroyed!');\r\n        return false;\r\n    }\r\n}","import { IUniformBufferUser } from \"./IUniformBufferUser\";\r\nimport { UniformBufferBlock } from \"./UniformBufferBlock\";\r\nimport { UniformBufferCluster } from \"./UniformBufferCluster\";\r\n\r\nexport type TypedArray =\r\n    | Int8Array\r\n    | Uint8Array\r\n    | Int16Array\r\n    | Uint16Array\r\n    | Int32Array\r\n    | Uint32Array\r\n    | Float32Array\r\n    | Float64Array;\r\n\r\nexport type TypedArrayConstructor =\r\n    | Int8ArrayConstructor\r\n    | Uint8ArrayConstructor\r\n    | Int16ArrayConstructor\r\n    | Uint16ArrayConstructor\r\n    | Int32ArrayConstructor\r\n    | Uint32ArrayConstructor\r\n    | Float32ArrayConstructor\r\n    | Float64ArrayConstructor;\r\n\r\n/**\r\n * 向上圆整到align的整数倍\r\n * @param n \r\n * @param align \r\n */\r\nexport function roundUp(n: number, align: number) {\r\n    return (((n + align - 1) / align) | 0) * align;\r\n}\r\n\r\n/**\r\n * 向下圆整到align的整数倍\r\n * @param n \r\n * @param align \r\n */\r\nexport function roundDown(n: number, align: number) {\r\n    const res = (((n + align - 1) / align) | 0) * align;\r\n    return res > n ? res - align : res;\r\n}\r\n\r\n/**\r\n * Uniform内存块管理\r\n */\r\nexport class UniformBufferManager {\r\n    renderContext: any; //渲染上下文对象\r\n    clustersAll: Map<number, UniformBufferCluster[]>; //所有大内存块，按尺寸分组\r\n    clustersCur: Map<number, UniformBufferCluster> //当前大内存块，按尺寸分组\r\n    useBigBuffer: boolean = true; //是否使用大内存模式\r\n    destroyed: boolean = false; //该对象是否已经销毁\r\n\r\n    snCounter: number = 0; //序号计数器\r\n    byteAlign: number = 256; //字节对齐\r\n    clusterMaxBlock: number = 256; //每个Cluster最多容纳的Block数量\r\n    uploadThreshold: number = 200; //判定为动态块的上传次数阈值\r\n\r\n    moveNum: number = 0; //内存块的移动次数\r\n    uploadNum: number = 0; //每帧上传次数\r\n    uploadByte: number = 0; //每帧上传字节数\r\n    removeHoleTimer: number = 0; //移除空洞的计时器\r\n\r\n    timeCostAvg: number = 0; //花费时间（帧平均）\r\n    timeCostSum: number = 0; //花费时间（总数）\r\n    timeCostCount: number = 0; //统计花费时间的计数器\r\n\r\n    constructor(useBigBuffer: boolean) {\r\n        this.clustersAll = new Map();\r\n        this.clustersCur = new Map();\r\n        this.useBigBuffer = useBigBuffer;\r\n    }\r\n\r\n    /**\r\n     * 添加大内存块\r\n     * @param size \r\n     * @param blockNum \r\n     */\r\n    private _addCluster(size: number, blockNum: number = 10) {\r\n        const alignedSize = roundUp(size, this.byteAlign);\r\n        const cluster = new UniformBufferCluster(alignedSize, blockNum, this);\r\n        const clusters = this.clustersAll.get(alignedSize);\r\n        if (clusters) {\r\n            clusters.push(cluster);\r\n            cluster.sn = clusters.length - 1;\r\n        }\r\n        else this.clustersAll.set(alignedSize, [cluster]);\r\n        this.clustersCur.set(alignedSize, cluster);\r\n        return cluster;\r\n    }\r\n\r\n    /**\r\n     * 移除空洞\r\n     */\r\n    private _removeHole() {\r\n        if (this.useBigBuffer) {\r\n            this.clustersAll.forEach(clusters => {\r\n                for (let i = clusters.length - 1; i > -1; i--)\r\n                    clusters[i].removeHole();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始新的一帧\r\n     */\r\n    startFrame() {\r\n        //显示上传统计信息\r\n        // const info = 'timeCost = ' + this.timeCostAvg + 'us, moveNum = ' + this.moveNum + ', uploadNum = ' + this.uploadNum + ', uploadByte = ' + this.uploadByte;\r\n        // if (this.useBigBuffer)\r\n        //     console.log('BigBuffer ' + info);\r\n        // else console.log('AloneBuffer ' + info);\r\n\r\n        //按帧计数的清零\r\n        this.uploadNum = 0;\r\n        this.uploadByte = 0;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染上下文\r\n     * @param renderContext \r\n     */\r\n    setRenderContext(renderContext: any) {\r\n        this.renderContext = renderContext;\r\n    }\r\n\r\n    /**\r\n     * 获取单独的UniformBuffer\r\n     * @param size \r\n     * @param name \r\n     */\r\n    getBufferAlone(size: number, name?: string) {\r\n        const alignedSize = roundUp(size, this.byteAlign);\r\n        this.statisGPUMemory(alignedSize);\r\n        return this.createGPUBuffer(alignedSize, name);\r\n    }\r\n\r\n    /**\r\n     * 删除大内存块\r\n     * @param size \r\n     * @param sn\r\n     */\r\n    removeCluster(size: number, sn: number) {\r\n        const alignedSize = roundUp(size, this.byteAlign);\r\n        if (sn === -1) {\r\n            this.clustersAll.delete(alignedSize);\r\n            this.clustersCur.delete(alignedSize);\r\n            return;\r\n        }\r\n        const cluster = this.clustersCur.get(alignedSize);\r\n        const clusters = this.clustersAll.get(alignedSize);\r\n        if (clusters.length > sn) {\r\n            clusters.splice(sn, 1);\r\n            if (clusters.length === 0) {\r\n                this.clustersAll.delete(alignedSize);\r\n                this.clustersCur.delete(alignedSize);\r\n                return;\r\n            } else {\r\n                for (let i = sn; i < clusters.length; i++)\r\n                    clusters[i].sn--;\r\n            }\r\n        } else return;\r\n        if (cluster.sn === sn) {\r\n            if (clusters.length === 1)\r\n                this.clustersCur.set(alignedSize, clusters[0]);\r\n            else {\r\n                let index = 0;\r\n                let usedNum = clusters[0].usedNum;\r\n                for (let i = 1; i < clusters.length; i++) {\r\n                    if (clusters[i].usedNum < usedNum) {\r\n                        index = i;\r\n                        usedNum = clusters[i].usedNum;\r\n                    }\r\n                }\r\n                this.clustersCur.set(alignedSize, clusters[index]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取小内存块\r\n     * @param size \r\n     * @param user \r\n     */\r\n    getBlock(size: number, user: IUniformBufferUser) {\r\n        const alignedSize = roundUp(size, this.byteAlign);\r\n        let cluster = this.clustersCur.get(alignedSize);\r\n        if (!cluster)\r\n            return this._addCluster(alignedSize).getBlock(size, user);\r\n        if (cluster.usedNum < this.clusterMaxBlock)\r\n            return cluster.getBlock(size, user);\r\n\r\n        cluster = null;\r\n        const clusters = this.clustersAll.get(alignedSize);\r\n        for (let i = clusters.length - 1; i > -1; i--) {\r\n            if (clusters[i].usedNum < this.clusterMaxBlock) {\r\n                cluster = clusters[i];\r\n                this.clustersCur.set(alignedSize, cluster);\r\n                break;\r\n            }\r\n        }\r\n        if (cluster)\r\n            return cluster.getBlock(size, user);\r\n        return this._addCluster(alignedSize).getBlock(size, user);\r\n    }\r\n\r\n    /**\r\n     * 释放小内存块\r\n     * @param bb \r\n     */\r\n    freeBlock(bb: UniformBufferBlock) {\r\n        const cluster = bb.cluster;\r\n        if (cluster) {\r\n            if (cluster.freeBlock(bb)) {\r\n                if (cluster.usedNum === 0)\r\n                    this.removeCluster(cluster.blockSize, cluster.sn);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 上传数据\r\n     */\r\n    upload() {\r\n        if (this.useBigBuffer) {\r\n            const t = performance.now();\r\n            this.clustersAll.forEach(clusters => {\r\n                for (let i = clusters.length - 1; i > -1; i--) {\r\n                    clusters[i].upload();\r\n                    clusters[i].optimize();\r\n                }\r\n            });\r\n            this.timeCostSum += performance.now() - t;\r\n            this.timeCostCount++;\r\n            if (this.timeCostCount > 100) {\r\n                this.timeCostAvg = (this.timeCostSum / this.timeCostCount) * 1000 | 0;\r\n                this.timeCostSum = 0;\r\n                this.timeCostCount = 0;\r\n            }\r\n            this.removeHoleTimer++;\r\n            if (this.removeHoleTimer > 1000) { //定期移除内存空洞\r\n                this.removeHoleTimer = 0;\r\n                this._removeHole();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理所有内存\r\n     */\r\n    clear() {\r\n        this.clustersAll.forEach(clusters => {\r\n            for (let i = clusters.length - 1; i > -1; i--)\r\n                clusters[i].clear();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            this.clear();\r\n            this.clustersAll.clear();\r\n            this.clustersCur.clear();\r\n            this.destroyed = true;\r\n            return true;\r\n        }\r\n        console.warn('UniformBufferManager: object alreay destroyed!');\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 创建GPU内存对象\r\n     * @param size 字节长度\r\n     * @param name 名称\r\n     */\r\n    createGPUBuffer(size: number, name?: string) {\r\n        //todo\r\n    }\r\n\r\n    /**\r\n     * 将数据写入GPU内存\r\n     * @param buffer GPU内存对象\r\n     * @param data CPU数据对象\r\n     * @param offset 数据在大内存中的偏移量（字节）\r\n     * @param size 写入的数据长度（字节）\r\n     */\r\n    writeBuffer(buffer: any, data: ArrayBuffer, offset: number, size: number) {\r\n        //todo\r\n    }\r\n\r\n    /**\r\n     * 统计GPU内存使用量\r\n     * @param bytes 字节\r\n     */\r\n    statisGPUMemory(bytes: number) {\r\n        //todo\r\n    }\r\n\r\n    /**\r\n     * 统计上传次数\r\n     * @param count 上传次数\r\n     * @param bytes 上传字节\r\n     */\r\n    statisUpload(count: number, bytes: number) {\r\n        //todo\r\n    }\r\n}","import { roundUp, UniformBufferManager } from \"./UniformBufferManager\";\r\n\r\n/**\r\n * 单独的UniformBuffer\r\n */\r\nexport class UniformBufferAlone {\r\n    buffer: any; //GPU内存\r\n    data: ArrayBuffer;\r\n    size: number; //尺寸\r\n    alignedSize: number; //字节对齐后的尺寸\r\n    manager: UniformBufferManager; //管理器\r\n    destroyed: boolean = false; //该对象是否已经销毁\r\n\r\n    constructor(size: number, manager: UniformBufferManager) {\r\n        this.data = new ArrayBuffer(size);\r\n        this.buffer = manager.getBufferAlone(size);\r\n        this.manager = manager;\r\n        this.size = size;\r\n        this.alignedSize = roundUp(size, manager.byteAlign);\r\n    }\r\n\r\n    /**\r\n     * 上传数据\r\n     */\r\n    upload() {\r\n        //上传数据\r\n        const t = performance.now();\r\n        this.manager.writeBuffer(this.buffer, this.data, 0, this.size);\r\n        this.manager.timeCostSum += performance.now() - t;\r\n        this.manager.timeCostCount++;\r\n        if (this.manager.timeCostCount > 100) {\r\n            this.manager.timeCostAvg = (this.manager.timeCostSum / this.manager.timeCostCount) * 1000 | 0;\r\n            this.manager.timeCostSum = 0;\r\n            this.manager.timeCostCount = 0;\r\n        }\r\n\r\n        //记录上传次数，字节数\r\n        this.manager.uploadNum++;\r\n        this.manager.uploadByte += this.size;\r\n        this.manager.statisUpload(1, this.size);\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            this.data = null;\r\n            this.buffer.destroy ?? this.buffer.destroy();\r\n            this.manager.statisGPUMemory(-this.size);\r\n            this.destroyed = true;\r\n            return true;\r\n        }\r\n        console.warn('UniformBufferAlone: object alreay destroyed!');\r\n        return false;\r\n    }\r\n}","import { Matrix3x3 } from \"../../../../maths/Matrix3x3\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { ShaderData } from \"../ShaderData\";\r\nimport { IUniformBufferUser } from \"./IUniformBufferUser\";\r\nimport { UniformBufferAlone } from \"./UniformBufferAlone\";\r\nimport { UniformBufferBlock } from \"./UniformBufferBlock\";\r\nimport { TypedArray, TypedArrayConstructor, UniformBufferManager } from \"./UniformBufferManager\";\r\n\r\ntype ItemType = {\r\n    name: string, //名称\r\n    view: TypedArray, //ArrayBufferView\r\n    type: string, //int, float, vec2 ...\r\n    align: number, //字节对齐\r\n    size: number, //字节长度\r\n    elements: number, //每个数据有多少个成员，比如vec2有2个float成员\r\n    count: number, //非数组count=1，否则count=数组长度\r\n};\r\n\r\n/**\r\n * UniformBuffer使用者\r\n */\r\nexport class UniformBufferUser implements IUniformBufferUser {\r\n    name: string;\r\n    strId: string;\r\n    size: number;\r\n    items: Map<number, ItemType>;\r\n    itemNum: number;\r\n    destroyed: boolean = false; //该对象是否已经销毁\r\n\r\n    needUpload: boolean;\r\n    bufferBlock: UniformBufferBlock;\r\n    bufferAlone: UniformBufferAlone;\r\n    manager: UniformBufferManager;\r\n    data: ShaderData;\r\n    offset: number;\r\n\r\n    constructor(name: string, size: number, manager: UniformBufferManager, data: ShaderData) {\r\n        this.name = name;\r\n        this.strId = '';\r\n        this.items = new Map();\r\n        this.itemNum = 0;\r\n        this.data = data;\r\n        this.size = size;\r\n        this.manager = manager;\r\n        this.needUpload = false;\r\n\r\n        if (manager.useBigBuffer) {\r\n            this.bufferBlock = manager.getBlock(size, this);\r\n            this.offset = this.bufferBlock.offset;\r\n        } else this.bufferAlone = new UniformBufferAlone(size, manager);\r\n    }\r\n\r\n    /**\r\n     * 通知GPUBuffer改变\r\n     */\r\n    notifyGPUBufferChange() {\r\n        const offset = this.bufferBlock.offset - this.offset;\r\n        this.offset = this.bufferBlock.offset;\r\n        this.items.forEach(item => {\r\n            const tac = UniformBufferUser._typeArray(item.type);\r\n            item.view = new tac(this.bufferBlock.cluster.data, item.view.byteOffset + offset, item.size / tac.BYTES_PER_ELEMENT);\r\n        });\r\n        this.clearGPUBufferBind();\r\n        this.needUpload = true;\r\n    }\r\n\r\n    /**\r\n     * 清除GPUBuffer绑定\r\n     */\r\n    clearGPUBufferBind() { }\r\n\r\n    /**\r\n     * 添加uniform字段\r\n     * @param id \r\n     * @param name \r\n     * @param type \r\n     * @param offset \r\n     * @param align \r\n     * @param size \r\n     * @param elements \r\n     * @param count \r\n     */\r\n    addUniform(id: number, name: string, type: string, offset: number, align: number, size: number, elements: number, count: number) {\r\n        if (this.items.has(id)) return; //该Uniform已经存在\r\n        this.items.set(id, this._getUniformItem(name, UniformBufferUser._typeArray(type), type, offset, align, size, elements, count));\r\n        if (this.strId.length > 0)\r\n            this.strId += '|';\r\n        this.strId += id;\r\n        this.itemNum++;\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setUniformData(id: number, data: any) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            this.needUpload = true;\r\n            if (item.count == 1) {\r\n                switch (item.type) {\r\n                    case 'int':\r\n                    case 'float':\r\n                        item.view[0] = data;\r\n                        break;\r\n                    case 'vec2':\r\n                        item.view[0] = data.x;\r\n                        item.view[1] = data.y;\r\n                        break;\r\n                    case 'vec3':\r\n                        item.view[0] = data.x;\r\n                        item.view[1] = data.y;\r\n                        item.view[2] = data.z;\r\n                        break;\r\n                    case 'vec4':\r\n                        item.view[0] = data.x;\r\n                        item.view[1] = data.y;\r\n                        item.view[2] = data.z;\r\n                        item.view[3] = data.w;\r\n                        break;\r\n                    case 'mat3':\r\n                        for (let i = 0; i < 3; i++) {\r\n                            item.view[i * 4 + 0] = data.elements[i * 3 + 0];\r\n                            item.view[i * 4 + 1] = data.elements[i * 3 + 1];\r\n                            item.view[i * 4 + 2] = data.elements[i * 3 + 2];\r\n                        }\r\n                        break;\r\n                    case 'mat4':\r\n                        item.view.set(data.elements);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            } else {\r\n                const arraySize = item.count * item.elements;\r\n                const alignElements = item.size / item.count / item.view.BYTES_PER_ELEMENT;\r\n                for (let i = 0, j = 0; i < arraySize; i += item.elements, j += alignElements)\r\n                    item.view.set(data.subarray(i, i + item.elements), j);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setBool(id: number, data: boolean) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data ? 1 : 0;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setBoolArray(id: number, data: boolean[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++)\r\n                item.view[i] = data[i] ? 1 : 0;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setInt(id: number, data: number) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setIntArray(id: number, data: number[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++)\r\n                item.view[i] = data[i];\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setFloat(id: number, data: number) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setFloatArray(id: number, data: number[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++)\r\n                item.view[i] = data[i];\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector2(id: number, data: Vector2) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data.x;\r\n            item.view[1] = data.y;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector2Array(id: number, data: Vector2[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++) {\r\n                item.view[i * 2 + 0] = data[i].x;\r\n                item.view[i * 2 + 1] = data[i].y;\r\n            }\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector3(id: number, data: Vector3) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data.x;\r\n            item.view[1] = data.y;\r\n            item.view[2] = data.z;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector3Array(id: number, data: Vector3[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++) {\r\n                item.view[i * 4 + 0] = data[i].x;\r\n                item.view[i * 4 + 1] = data[i].y;\r\n                item.view[i * 4 + 2] = data[i].z;\r\n            }\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector4(id: number, data: Vector4) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view[0] = data.x;\r\n            item.view[1] = data.y;\r\n            item.view[2] = data.z;\r\n            item.view[3] = data.w;\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setVector4Array(id: number, data: Vector4[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++) {\r\n                item.view[i * 4 + 0] = data[i].x;\r\n                item.view[i * 4 + 1] = data[i].y;\r\n                item.view[i * 4 + 2] = data[i].z;\r\n                item.view[i * 4 + 3] = data[i].w;\r\n            }\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setMatrix3x3(id: number, data: Matrix3x3) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0; i < 3; i++) {\r\n                item.view[i * 4 + 0] = data.elements[i * 3 + 0];\r\n                item.view[i * 4 + 1] = data.elements[i * 3 + 1];\r\n                item.view[i * 4 + 2] = data.elements[i * 3 + 2];\r\n            }\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setMatrix3x3Array(id: number, data: Matrix3x3[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let j = 0, len = Math.min(item.count, data.length); j < len; j++) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    item.view[j * 16 + i * 4 + 0] = data[j].elements[i * 3 + 0];\r\n                    item.view[j * 16 + i * 4 + 1] = data[j].elements[i * 3 + 1];\r\n                    item.view[j * 16 + i * 4 + 2] = data[j].elements[i * 3 + 2];\r\n                }\r\n            }\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setMatrix4x4(id: number, data: Matrix4x4) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            item.view.set(data.elements);\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setMatrix4x4Array(id: number, data: Matrix4x4[]) {\r\n        const item = this.items.get(id);\r\n        if (item) {\r\n            for (let i = 0, len = Math.min(item.count, data.length); i < len; i++)\r\n                item.view.set(data[i].elements, i * 16);\r\n            this.needUpload = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置uniform数据\r\n     * @param id \r\n     * @param data \r\n     */\r\n    setBuffer(id: number, data: Float32Array) {\r\n        this.setUniformData(id, data);\r\n    }\r\n\r\n    /**\r\n     * 获取uniformItem\r\n     * @param id \r\n     */\r\n    getUniform(id: number) {\r\n        return this.items.get(id);\r\n    }\r\n\r\n    /**\r\n     * 是否存在指定的uniform\r\n     * @param id  \r\n     */\r\n    hasUniform(id: number) {\r\n        return this.items.has(id);\r\n    }\r\n\r\n    /**\r\n     * 根据strId判断是否命中\r\n     * @param strId \r\n     */\r\n    isMe(strId: string) {\r\n        return this.strId === strId;\r\n    }\r\n\r\n    /**\r\n     * 上传数据\r\n     */\r\n    upload() {\r\n        if (this.needUpload) {\r\n            if (this.manager.useBigBuffer)\r\n                this.bufferBlock.needUpload();\r\n            else this.bufferAlone.upload();\r\n            this.needUpload = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除所有uniform\r\n     */\r\n    clear() {\r\n        if (this.manager.useBigBuffer)\r\n            new Uint8Array(this.bufferBlock.cluster.data).fill(0, this.bufferBlock.offset, this.bufferBlock.offset + this.bufferBlock.size);\r\n        else new Uint8Array(this.bufferAlone.data).fill(0);\r\n        this.strId = '';\r\n        this.items.clear();\r\n        this.itemNum = 0;\r\n        this.needUpload = false;\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            if (this.manager.useBigBuffer)\r\n                this.manager.freeBlock(this.bufferBlock);\r\n            else this.bufferAlone.destroy();\r\n            this.destroyed = true;\r\n            return true;\r\n        }\r\n        console.warn('UniformBufferUser: object alreay destroyed!');\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 获取一个unifromItem\r\n     * @param name \r\n     * @param tac \r\n     * @param type \r\n     * @param offset \r\n     * @param align \r\n     * @param size \r\n     * @param elements \r\n     * @param count \r\n     */\r\n    protected _getUniformItem(name: string, tac: TypedArrayConstructor, type: string, offset: number, align: number, size: number, elements: number, count: number) {\r\n        let view: TypedArray;\r\n        if (this.manager.useBigBuffer)\r\n            view = new tac(this.bufferBlock.cluster.data, this.bufferBlock.offset + offset, size / tac.BYTES_PER_ELEMENT);\r\n        else view = new tac(this.bufferAlone.data, offset, size / tac.BYTES_PER_ELEMENT);\r\n        return { name, view, type, align, size, elements, count };\r\n    }\r\n\r\n    /**\r\n     * 根据type获取TypeArray类型\r\n     * @param type \r\n     */\r\n    protected static _typeArray(type: string) {\r\n        switch (type) {\r\n            case 'int':\r\n                return Int32Array;\r\n            case 'float':\r\n            case 'vec2':\r\n            case 'vec3':\r\n            case 'vec4':\r\n            case 'mat3':\r\n            case 'mat4':\r\n                return Float32Array;\r\n            default:\r\n                return Float32Array;\r\n        }\r\n    }\r\n}","import { Script } from \"../../components/Script\";\r\n\r\n/**\r\n * @en Maintain compatibility with 2.0. The new script supports the use of scripts.\r\n * @zh 保持对2.0的兼容。新脚本支持使用Script即可。\r\n */\r\nexport var Script3D = Script;\r\nexport type Script3D = Script;\r\n","import { IRenderContext3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ShaderData } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { MeshFilter } from \"../../core/MeshFilter\";\r\nimport { RenderableSprite3D } from \"../../core/RenderableSprite3D\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { RenderElement } from \"../../core/render/RenderElement\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { MeshUtil } from \"../../resource/models/MeshUtil\";\r\nimport { HLODBatchMesh } from \"./HLODBatchMesh\";\r\nimport { HLODElement } from \"./HLODUtil\";\r\n\r\n/**\r\n * @en Handles the rendering of a hierarchical level of detail (HLOD) element. This class is responsible for managing LODs for objects to achieve better performance by rendering simpler meshes when objects are further from the camera.\r\n * @zh HLOD渲染处理类，负责管理场景中对象的层级细节层次（HLOD），以提高渲染性能。通过在相机较远时渲染更简单的网格来实现。\r\n */\r\nexport class HLODRender extends BaseRender {\r\n\r\n    /**@internal */\r\n    _singleton: boolean;\r\n\r\n    /**@internal */\r\n    _curHLODRS: HLODElement;\r\n\r\n    /**@internal */\r\n    _curSubBatchMeshBounds: Bounds[];\r\n\r\n    constructor() {\r\n        super();\r\n        this._singleton = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The current HLOD rendering state.\r\n     * @zh 当前的 HLOD 渲染状态。\r\n     */\r\n    get curHLODRS() {\r\n        return this._curHLODRS;\r\n    }\r\n\r\n    set curHLODRS(value: HLODElement) {\r\n        if (!this._curHLODRS) {\r\n            this._renderElements = [];\r\n            this._renderElements.push(new RenderElement());\r\n            this._renderElements[0].render = this;\r\n        }\r\n        if (value != this._curHLODRS) {\r\n            this._changeMesh(value.HLODMesh);\r\n            this._curHLODRS = value;//顺序不可变换\r\n            this._createRenderelementByHLODElement(this._curHLODRS, this._renderElements[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Set the geometry and material of the RenderElement based on the given HLODElement resource.\r\n     * @param source The HLODElement containing mesh and material information.\r\n     * @param out The RenderElement to be set.\r\n     * @zh 根据给定的 HLOD 资源设置渲染节点的几何体和材质。\r\n     * @param source 包含网格和材料信息的 HLODElement。\r\n     * @param out 要设置的 RenderElement。\r\n     */\r\n    private _createRenderelementByHLODElement(source: HLODElement, out: RenderElement) {\r\n        out.setGeometry(source.HLODMesh);\r\n        out.material = source.material;\r\n    }\r\n\r\n    /**\r\n     * @en Change the current rendering mesh to a new LOD mesh.\r\n     * @param lodMesh The new LOD mesh for rendering.\r\n     * @zh 将当前渲染网格更改为新的 LOD 网格。\r\n     * @param lodMesh 新的 LOD 网格，用于渲染。\r\n     */\r\n    private _changeMesh(lodMesh: HLODBatchMesh) {\r\n        var defineDatas: ShaderData = this._baseRenderNode.shaderData;\r\n        this.boundsChange = true;\r\n        let meshDefines = MeshFilter._meshVerticeDefine;\r\n        if (this.curHLODRS) {\r\n            MeshUtil.getMeshDefine(this.curHLODRS.HLODMesh.batchMesh, meshDefines);\r\n            for (var i: number = 0, n: number = meshDefines.length; i < n; i++)\r\n                defineDatas.removeDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        if (lodMesh) {\r\n            MeshUtil.getMeshDefine(lodMesh.batchMesh, meshDefines);\r\n            for (var i: number = 0, n: number = MeshFilter._meshVerticeDefine.length; i < n; i++)\r\n                defineDatas.addDefine(MeshFilter._meshVerticeDefine[i]);\r\n        }\r\n        //update submesh Bounds\r\n        this._curSubBatchMeshBounds.length = lodMesh.batchSubMeshInfo.length;\r\n        for (let i = 0, n = lodMesh.batchSubMeshInfo.length; i < n; i++) {\r\n            this._curSubBatchMeshBounds[i] = this._curSubBatchMeshBounds[i] ? this._curSubBatchMeshBounds[i] : new Bounds();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     * @en Apply the lightmap parameters of the current HLOD element to the shader.\r\n     * @zh 将当前 HLOD 元素的光照图参数应用到着色器上。\r\n     */\r\n    _applyLightMapParams() {\r\n        if (!this._scene) return;\r\n        var shaderValues = this._baseRenderNode.shaderData;\r\n        var lightMap = this._curHLODRS.lightmap;\r\n        if (lightMap && lightMap.lightmapColor) {\r\n            shaderValues.setTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\r\n            shaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            if (lightMap.lightmapDirection) {\r\n                shaderValues.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\r\n                shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n        } else {\r\n            shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en re caculate BoundBox\r\n     * @zh 重新计算包围盒\r\n     */\r\n    _calculateBoundingBox() {\r\n        // todo 根节点移动更新包围盒\r\n        if (this._curHLODRS) {\r\n            var sharedMesh: HLODBatchMesh = this._curHLODRS.HLODMesh;\r\n            if (sharedMesh) {\r\n                var worldMat: Matrix4x4 = this._transform.worldMatrix;\r\n                sharedMesh.batchMesh.bounds._tranform(worldMat, this._bounds);\r\n            }\r\n            //Update \r\n            for (let i = 0, n = this._curSubBatchMeshBounds.length; i < n; i++) {\r\n                sharedMesh.batchSubMeshInfo[i].bounds._tranform(worldMat, this._curSubBatchMeshBounds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update rendering data.\r\n     * @zh 更新渲染数据。\r\n     */\r\n    _renderUpdate(context: IRenderContext3D): void {\r\n        this._applyLightMapParams();\r\n        // // todo 若有根节点, 在这里更新 worldmatrix\r\n        this._baseRenderNode.shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX, this._transform.worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * @en Determine if the object needs to be rendered based on its visibility within the bounding frustum.\r\n     * @param boundFrustum The bounding frustum used for culling.\r\n     * @param context The rendering context.\r\n     * @returns True if the object needs to be rendered, false otherwise.\r\n     * @zh 根据对象在边界视锥体内的可见性确定是否需要渲染该对象。\r\n     * @param boundFrustum 用于裁剪的边界视锥体。\r\n     * @param context 渲染上下文。\r\n     * @returns 如果对象需要被渲染则返回 true，否则返回 false。\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (boundFrustum) {\r\n            if (boundFrustum.intersects(this.bounds)) {\r\n                let hodMesh = this.curHLODRS.HLODMesh.drawSubMeshs;\r\n                let lodbatchMesh = this._curHLODRS.HLODMesh.batchSubMeshInfo;\r\n                hodMesh.length = 0;\r\n                for (let i = 0, n = this._curSubBatchMeshBounds.length; i < n; i++) {\r\n                    if (boundFrustum.intersects(this._curSubBatchMeshBounds[i])) {\r\n                        hodMesh.push(lodbatchMesh[i]);\r\n                    }\r\n                }\r\n                //sort TODO\r\n                // let position = context.camera.transform.position;\r\n                // let oriPisition = (this.owner as Sprite3D)\r\n                // hodMesh = hodMesh.sort((a,b)=>{\r\n\r\n                //     return 10;\r\n                // });\r\n                this._curHLODRS.HLODMesh.drawSubMeshs = hodMesh;\r\n                return true;\r\n            }\r\n            else\r\n                return false\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is enabled.\r\n     * @zh 当组件被启用时调用。\r\n     */\r\n    onEnable() {\r\n        super.onEnable();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is disabled.\r\n     * @zh 当组件被禁用时调用。\r\n     */\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is being destroyed.\r\n     * @zh 当组件被销毁时调用。\r\n     */\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        });\r\n        this._renderElements = null;\r\n    }\r\n\r\n    /**\r\n     * @en Clone the current HLODRender to another instance.\r\n     * @param dest The destination HLODRender instance to clone to.\r\n     * @zh 将当前 HLODRender 克隆到另一个实例。\r\n     * @param dest 要克隆到的目标 HLODRender 实例。\r\n     */\r\n    _cloneTo(dest: HLODRender) {\r\n        //TODO\r\n    }\r\n}","import { Component } from \"../../../components/Component\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Camera } from \"../../core/Camera\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { HLODRender } from \"./HLODRender\";\r\nimport { HLODConfig, HLODResourceGroup } from \"./HLODUtil\";\r\n\r\nconst tempVec = new Vector3();\r\n\r\n/**\r\n * @en HLOD (Hierarchical Level of Detail) component for optimizing rendering performance.\r\n * @zh HLOD（分层细节层次）组件，用于优化渲染性能。\r\n */\r\nexport class HLOD extends Component {\r\n    /**@internal */\r\n    _resourceList: HLODResourceGroup[];\r\n    /**@internal */\r\n    _curLODSource: HLODResourceGroup;\r\n    /**@internal 包围盒*/\r\n    _bounds: Bounds;\r\n    /**@internal */\r\n    _curRender: HLODRender[];\r\n    /**@internal TODO*/\r\n    //_crossRender: HLODRender[];\r\n    /**@internal TODO*/\r\n    //_renderMode:\r\n    /**@internal TODO*/\r\n    //cacheRender:HLODRender[];\r\n    /**@internal */\r\n    _HLODConfig: HLODConfig;\r\n    /**@internal */\r\n    private _lodRateArray: number[];\r\n    /**@internal */\r\n    private _size: number;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this._singleton = true;\r\n    }\r\n\r\n    /**\r\n     * @en The bounds of the HLOD.\r\n     * @zh HLOD 的边界。\r\n     */\r\n    get bounds() {\r\n        return this._bounds;\r\n    }\r\n\r\n    set bounds(value: Bounds) {\r\n        this._bounds = value;\r\n        this.recalculateBounds();\r\n    }\r\n\r\n    /**\r\n     * @en The LOD resources for the HLOD.\r\n     * @zh HLOD 的 LOD 资源。\r\n     */\r\n    get lodResource() {\r\n        return this._resourceList;\r\n    }\r\n    set lodResource(value: HLODResourceGroup[]) {\r\n        this._resourceList = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The LOD culling rate array. The array will be sorted in descending order.\r\n     * @zh LOD 裁剪率数组。数组将按降序排列。\r\n     */\r\n    get lodCullRateArray() {\r\n        return this._lodRateArray;\r\n    }\r\n\r\n    set lodCullRateArray(value: number[]) {\r\n        value.sort((a, b) => b - a);\r\n        this._lodRateArray = value;\r\n    }\r\n\r\n\r\n    private _applyLODResource(resource: HLODResourceGroup) {\r\n        this._curLODSource = resource;\r\n        let element = resource.resources;\r\n        for (let i = 0, n = element.length; i < n; i++) {\r\n            let hlodRender = this.owner.addComponent(HLODRender);\r\n            this._curRender.push(hlodRender);\r\n            hlodRender.curHLODRS = element[i];\r\n        }\r\n    }\r\n\r\n    private _releaseGroupRender() {\r\n        this._curRender.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this._curRender = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en Recalculates the bounding box.\r\n     * @zh 重新计算包围盒。\r\n     */\r\n    recalculateBounds() {\r\n        //如果移动了就修改Bounds\r\n        let extend = this._bounds.getExtent();\r\n        this._size = 2 * Math.max(extend.x, extend.y, extend.z);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @en Updates before rendering.\r\n     * @zh 渲染之前的更新。\r\n     */\r\n    onPreRender() {\r\n        // this.recalculateBounds();\r\n        // //查看相机的距离\r\n        let checkCamera = (this.owner.scene as Scene3D).cullInfoCamera as Camera;\r\n        let maxYDistance = checkCamera.maxlocalYDistance;\r\n        let cameraFrustum = checkCamera.boundFrustum;\r\n        Vector3.subtract((this.owner as Sprite3D).transform.position, checkCamera.transform.position, tempVec);\r\n        //大于farplane,或者不在视锥内.不做lod操作\r\n        let length = tempVec.length();\r\n        if (length > checkCamera.farPlane || cameraFrustum.containsPoint((this.owner as Sprite3D).transform.position) == 0) {\r\n            return;\r\n        }\r\n        let rateYDistance = length / checkCamera.farPlane * maxYDistance;\r\n        let rate = (this._size / rateYDistance);\r\n        for (let i = 0; i < this._lodRateArray.length; i++) {\r\n            if (rate < this._lodRateArray[i])\r\n                continue;\r\n            this.applyResource(this._resourceList[i]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Executed every frame during the update phase.\r\n     * @zh 每帧更新时执行。\r\n     */\r\n    onUpdate(): void {\r\n        this._curLODSource.updateMark = Camera._updateMark;\r\n        //GC TODO\r\n    }\r\n\r\n    /**\r\n     * @en Applies the specified HLOD resource.\r\n     * @param resource The HLOD resource group to apply.\r\n     * @zh 应用指定的 HLOD 资源。\r\n     * @param resource 要应用的 HLOD 资源组。\r\n     */\r\n    applyResource(resource: HLODResourceGroup) {\r\n        if (resource == this._curLODSource)\r\n            return;\r\n        if (resource.loaded) {\r\n            if (this._curLODSource) {\r\n                //Cache TODO\r\n                //是否有Cross fade Render \r\n                this._releaseGroupRender();\r\n                this._applyLODResource(resource);\r\n\r\n            }\r\n        } else {\r\n            resource.load(this.applyResource, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is enabled.\r\n     * @zh 当组件启用时调用。\r\n     */\r\n    onEnable() {\r\n        super.onEnable();\r\n        //根据\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is disabled.\r\n     * @zh 当组件禁用时调用。\r\n     */\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is destroyed.\r\n     * @zh 当组件被销毁时调用。\r\n     */\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        //TODO删除\r\n    }\r\n\r\n    /**\r\n     * @en Clones the HLOD component to another object.\r\n     * @zh 将 HLOD 组件克隆到另一个对象。\r\n     */\r\n    _cloneTo(dest: HLOD) {\r\n        //Clone to\r\n        throw \"cant clone HLOD\"\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\n\r\n/**\r\n * @en represents information for a sub-batch in static batch rendering.\r\n * @zh 静态批处理渲染中子批次的信息。\r\n */\r\nexport class StaticBatchSubInfo {\r\n\r\n    /**\r\n     * @en The starting index of the sub-batch in the index buffer.\r\n     * @zh 子批次在索引缓冲区中的起始索引。\r\n     */\r\n    indexStart: number;\r\n    /**\r\n     * @en The number of indices in the sub-batch.\r\n     * @zh 子批次中的索引数量。\r\n     */\r\n    indexCount: number;\r\n    /**\r\n     * @en The bounding volume of the sub-batch mesh.\r\n     * @zh 子批次网格的边界体积。\r\n     */\r\n    meshBounds: Bounds;\r\n    /**\r\n     * @en Indicates whether this sub-batch needs to be rendered.\r\n     * @zh 指示是否需要渲染此子批次。\r\n     */\r\n    needRender: boolean;\r\n\r\n    /**\r\n     * @en Constructor method, initializes data.\r\n     * @zh 构造方法，初始化数据\r\n     */\r\n    constructor() {\r\n        this.indexStart = 0;\r\n        this.indexCount = 0;\r\n        this.meshBounds = new Bounds(new Vector3(), new Vector3());\r\n        this.needRender = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @en static batch sub-mesh rendering.\r\n * @zh 用于静态批处理子网格渲染。\r\n */\r\nexport class StaticBatchSubMesh extends GeometryElement {\r\n\r\n    /**@internal */\r\n    private static _type: number = GeometryElement._typeCounter++;\r\n\r\n    /**\r\n     * @en Array of StaticBatchSubInfo objects representing sub-mesh information.\r\n     * @zh StaticBatchSubInfo 对象数组，表示子网格信息。\r\n     */\r\n    subInfos: StaticBatchSubInfo[];\r\n\r\n    /**\r\n     * @en The byte count of indices in the sub-mesh.\r\n     * @zh 子网格中索引的字节数。\r\n     */\r\n    indexByteCount: number;\r\n\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n        this.subInfos = [];\r\n    }\r\n\r\n    /**\r\n     * @en Adds a sub-mesh to the StaticBatchSubMesh.\r\n     * @param indexCount The number of indices in the sub-mesh.\r\n     * @param indexStart The starting index of the sub-mesh.\r\n     * @param bounds The bounding volume of the sub-mesh.\r\n     * @zh 向 StaticBatchSubMesh 添加一个子网格。\r\n     * @param indexCount 子网格中的索引数量。\r\n     * @param indexStart 子网格的起始索引。\r\n     * @param bounds 子网格的边界体积。\r\n     */\r\n    addSubMesh(indexCount: number, indexStart: number, bounds: Bounds) {\r\n\r\n        let info = new StaticBatchSubInfo();\r\n        info.indexCount = indexCount;\r\n        info.indexStart = indexStart;\r\n        bounds.cloneTo(info.meshBounds);\r\n\r\n        this.subInfos.push(info);\r\n    }\r\n\r\n    /**\r\n     * @en Gets the type of the StaticBatchSubMesh.\r\n     * @zh 获取 StaticBatchSubMesh 的类型。\r\n     */\r\n    _getType(): number {\r\n        return StaticBatchSubMesh._type;\r\n    }\r\n    /**\r\n     * @en Updates render parameters based on the current render context.\r\n     * @param state The current render context.\r\n     * @zh 根据当前渲染上下文更新渲染参数。\r\n     * @param state 当前渲染上下文。\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n\r\n        this.clearRenderParams();\r\n        // todo\r\n        let cameraPos = state.camera.transform.position;\r\n        this.subInfos.sort((a, b) => {\r\n            let centerA = a.meshBounds.getCenter();\r\n            let distanceA = Vector3.distanceSquared(centerA, cameraPos);\r\n            let centerB = b.meshBounds.getCenter();\r\n            let distanceB = Vector3.distanceSquared(centerB, cameraPos);\r\n            return distanceA - distanceB;\r\n        });\r\n        for (const info of this.subInfos) {\r\n            if (info.needRender) {\r\n                this.setDrawElemenParams(info.indexCount, info.indexStart * this.indexByteCount);\r\n            }\r\n        }\r\n\r\n    }\r\n    /**\r\n     * @en Prepares the sub-mesh for rendering.\r\n     * @param state The current render context.(Not used)\r\n     * @returns True if any sub-info needs rendering, false otherwise.\r\n     * @zh 准备子网格进行渲染。\r\n     * @param state 当前渲染上下文。（未使用）\r\n     * @returns 如果有任何子信息需要渲染则返回 true，否则返回 false。\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        return !!this.subInfos.find(info => info.needRender);\r\n    }\r\n    \r\n    /**\r\n     * @en Destroys the StaticBatchSubMesh and its resources.\r\n     * @zh 销毁 StaticBatchSubMesh 及其资源。\r\n     */\r\n    destroy() {\r\n        for (const info of this.subInfos) {\r\n        }\r\n        this.subInfos = null;\r\n    }\r\n}","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\r\nimport { BlinnPhongMaterial } from \"../../core/material/BlinnPhongMaterial\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\nimport { IndexBuffer3D } from \"../../graphics/IndexBuffer3D\";\r\nimport { VertexBuffer3D } from \"../../graphics/VertexBuffer3D\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\r\nimport { Utils3D } from \"../../utils/Utils3D\";\r\nimport { StaticBatchSubMesh } from \"./StaticBatchSubMesh\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\n\r\nconst tempMatrix = new Matrix4x4;\r\n\r\nconst TriangleIndices = [0, 1, 2];\r\nconst InvertTriangleIndices = [0, 2, 1];\r\n\r\n/**\r\n * @en Represents a static batch mesh for efficient rendering of multiple static meshes.\r\n * @zh 用于高效渲染多个静态网格的静态批处理网格。\r\n */\r\nexport class StaticBatchMesh {\r\n\r\n    /**\r\n     * @en Creates a new StaticBatchMesh instance based on the provided merge information.\r\n     * @param info The static mesh merge information.\r\n     * @returns A new StaticBatchMesh instance.\r\n     * @zh 根据提供的合并信息创建一个新的静态合批实例。\r\n     * @param info 静态网格合并信息。\r\n     * @returns 一个新的静态合批实例。\r\n     */\r\n    static create(info: StaticMeshMergeInfo): StaticBatchMesh {\r\n        let staticMesh = new StaticBatchMesh();\r\n\r\n        let vertexCount = info.vertexCount;\r\n        let indexCount = info.indexCount;\r\n        let vertexDec = info.vertexDec;\r\n        let vertexFloatStride = vertexDec.vertexStride / 4;\r\n        let vertexData = new ArrayBuffer(vertexDec.vertexStride * vertexCount);\r\n        let vertexFloatArray = new Float32Array(vertexData);\r\n\r\n        let mergeIndexFormat = IndexFormat.UInt16;\r\n        let mergeIndexByteCount = 2;\r\n\r\n        let indexArray: Uint16Array | Uint32Array;\r\n\r\n        if (vertexCount > 65535) {\r\n            mergeIndexFormat = IndexFormat.UInt32;\r\n            mergeIndexByteCount = 4;\r\n            indexArray = new Uint32Array(indexCount);\r\n        }\r\n        else {\r\n            indexArray = new Uint16Array(indexCount);\r\n        }\r\n\r\n        // let positionElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0);\r\n        // let normalElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\r\n        // let lightmapUVElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TEXTURECOORDINATE1);\r\n        // let tangentElement = vertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\r\n\r\n        let vertexDataOffset = 0;\r\n        let vertexCountOffset = 0;\r\n        let indexOffset = 0;\r\n\r\n        let bounds: Bounds;\r\n\r\n        for (const render of info.renders) {\r\n            let lightmapScaleOffset = render.lightmapScaleOffset;\r\n\r\n            if (!bounds) {\r\n                bounds = staticMesh.bounds;\r\n                render.bounds.cloneTo(bounds);\r\n            }\r\n\r\n            Bounds.merge(bounds, render.bounds, bounds);\r\n\r\n            let sp = <Sprite3D>render.owner;\r\n            let invertFront = sp.transform._isFrontFaceInvert;\r\n            let worldMat = sp.transform.worldMatrix;\r\n            let normalMat = tempMatrix;\r\n            worldMat.invert(normalMat);\r\n            normalMat.transpose();\r\n\r\n            let mesh = render.getMesh();\r\n            let meshVertexCount = mesh.vertexCount;\r\n            let meshIndexCount = mesh.indexCount;\r\n\r\n            // todo 复制数据\r\n            // todo 是否存在根节点\r\n            let meshVertexData = mesh._vertexBuffer.getFloat32Data();\r\n            vertexFloatArray.set(meshVertexData, vertexDataOffset);\r\n\r\n            // todo 根据 vertex element 数据类型转换数据\r\n            for (let index = 0; index < meshVertexCount; index++) {\r\n                let elementOffset = index * vertexFloatStride;\r\n                for (const element of vertexDec._vertexElements) {\r\n                    elementOffset += element.offset / 4;\r\n                    switch (element.elementUsage) {\r\n                        case VertexMesh.MESH_POSITION0:\r\n                            Utils3D.transformVector3ArrayToVector3ArrayCoordinate(meshVertexData, elementOffset, worldMat, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                        case VertexMesh.MESH_NORMAL0:\r\n                        case VertexMesh.MESH_TANGENT0:\r\n                            Utils3D.transformVector3ArrayToVector3ArrayNormal(meshVertexData, elementOffset, normalMat, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                        case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                            Utils3D.transformLightingMapTexcoordArray(meshVertexData, elementOffset, lightmapScaleOffset, vertexFloatArray, vertexDataOffset + elementOffset);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let meshIndexData = mesh._indexBuffer.getData();\r\n            // todo 非三角形渲染方式\r\n            let triangleIndices = invertFront ? InvertTriangleIndices : TriangleIndices;\r\n            for (let index = 0; index < meshIndexCount; index += 3) {\r\n                indexArray[indexOffset + index] = meshIndexData[index + triangleIndices[0]] + vertexCountOffset;\r\n                indexArray[indexOffset + index + 1] = meshIndexData[index + triangleIndices[1]] + vertexCountOffset;\r\n                indexArray[indexOffset + index + 2] = meshIndexData[index + triangleIndices[2]] + vertexCountOffset;\r\n            }\r\n\r\n            let subMeshCount = mesh.subMeshCount;\r\n\r\n            for (let index = 0; index < subMeshCount; index++) {\r\n                // todo default material\r\n                let material = render.sharedMaterials[index] || BlinnPhongMaterial.defaultMaterial;\r\n                let staticSubMesh = staticMesh._staticSubMeshes.get(material);\r\n                if (!staticSubMesh) {\r\n                    staticSubMesh = new StaticBatchSubMesh();\r\n                    staticSubMesh.indexByteCount = mergeIndexByteCount;\r\n                    staticMesh._staticSubMeshes.set(material, staticSubMesh);\r\n                    staticSubMesh.bufferState = staticMesh._bufferState;\r\n                    staticSubMesh.indexFormat = mergeIndexFormat;\r\n                }\r\n\r\n                let subMesh = mesh.getSubMesh(index);\r\n                // submesh bounds 使用 mesh bounds 代替\r\n                // 视锥裁剪仍按照整个mesh\r\n                // todo 换成单独的包围盒 ？\r\n                staticSubMesh.addSubMesh(subMesh.indexCount, subMesh._indexStart + indexOffset, render.bounds);\r\n            }\r\n\r\n            vertexDataOffset += meshVertexData.length;\r\n            vertexCountOffset += meshVertexCount;\r\n            indexOffset += meshIndexData.length;\r\n        }\r\n\r\n        let vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertexData.byteLength, BufferUsage.Static, false);\r\n        vertexBuffer.vertexDeclaration = vertexDec;\r\n        vertexBuffer.setData(vertexData);\r\n\r\n        let indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(mergeIndexFormat, indexCount, BufferUsage.Static, false);\r\n        indexBuffer.setData(indexArray);\r\n\r\n        staticMesh.setBuffer(vertexBuffer, indexBuffer);\r\n\r\n        return staticMesh;\r\n    }\r\n    /**@internal */\r\n    _bufferState: BufferState;\r\n    /**@internal */\r\n    _vertexBuffer: VertexBuffer3D;\r\n    /**@internal */\r\n    _indexBuffer: IndexBuffer3D;\r\n    /**@internal */\r\n    _staticSubMeshes: Map<Material, StaticBatchSubMesh>;\r\n\r\n    /**\r\n     * @en The bounding volume of the static batch mesh.\r\n     * @zh 静态批处理网格的边界体积。\r\n     */\r\n    bounds: Bounds;\r\n\r\n    /**\r\n     * @en Constructs, initializes a new static batch mesh.\r\n     * @zh 构造方法，初始化静态网格合批。\r\n     */\r\n    constructor() {\r\n        this._bufferState = new BufferState();\r\n        this._staticSubMeshes = new Map();\r\n        this.bounds = new Bounds();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the vertex and index buffers for this static batch mesh.\r\n     * @param vertex The vertex buffer to set.\r\n     * @param index The index buffer to set.\r\n     * @zh 为此静态批处理网格设置顶点和索引缓冲区。\r\n     * @param vertex 要设置的顶点缓冲区。\r\n     * @param index 要设置的索引缓冲区。\r\n     */\r\n    setBuffer(vertex: VertexBuffer3D, index: IndexBuffer3D) {\r\n        let bufferState = this._bufferState;\r\n\r\n        this._vertexBuffer = vertex;\r\n        this._indexBuffer = index;\r\n\r\n        bufferState.applyState([vertex], index);\r\n    }\r\n\r\n    /**\r\n     * @en Destroys this static batch mesh and releases all associated resources.\r\n     * @zh 销毁此静态批处理网格并释放所有相关资源。\r\n     */\r\n    destroy() {\r\n        this._staticSubMeshes.forEach(submesh => {\r\n            submesh.destroy();\r\n        });\r\n        this._staticSubMeshes.clear();\r\n        this._staticSubMeshes = null;\r\n        this._bufferState.destroy();\r\n    }\r\n\r\n\r\n}","import { RenderElement } from \"../../core/render/RenderElement\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class StaticBatchMeshRenderElement extends RenderElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** @internal */\r\n    getInvertFront(): boolean {\r\n        return false;\r\n    }\r\n\r\n}","import { IRenderContext3D } from \"../../../RenderDriver/DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ShaderDefine } from \"../../../RenderDriver/RenderModuleData/Design/ShaderDefine\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MeshFilter } from \"../../core/MeshFilter\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../core/MeshSprite3DShaderDeclaration\";\r\nimport { BaseRender, RenderBitFlag } from \"../../core/render/BaseRender\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { BoundFrustum } from \"../../math/BoundFrustum\";\r\nimport { StaticBatchMesh } from \"./StaticBatchMesh\";\r\nimport { StaticBatchMeshRenderElement } from \"./StaticBatchMeshRenderElement\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\n/**\r\n * @en StaticBatchMeshRender class, extends BaseRender for static batch mesh rendering.\r\n * @zh StaticBatchMeshRender 类，继承自 BaseRender，用于静态批处理网格渲染。\r\n */\r\nexport class StaticBatchMeshRender extends BaseRender {\r\n    /**\r\n     * @en Creates a new StaticBatchMeshRender instance.\r\n     * @param info The static mesh merge information.\r\n     * @returns A new StaticBatchMeshRender instance.\r\n     * @zh 创建一个新的 StaticBatchMeshRender 实例。\r\n     * @param info 静态网格合并信息。\r\n     * @returns 新的 StaticBatchMeshRender 实例。\r\n     */\r\n    static create(info: StaticMeshMergeInfo): StaticBatchMeshRender {\r\n\r\n        let render = new StaticBatchMeshRender();\r\n\r\n        render.mergeInfo = info;\r\n\r\n        return render;\r\n    }\r\n\r\n    private _staticMesh: StaticBatchMesh;\r\n    /**\r\n     * @en The static batch mesh.\r\n     * @zh 静态批处理网格。\r\n     */\r\n    public get staticMesh(): StaticBatchMesh {\r\n        return this._staticMesh;\r\n    }\r\n\r\n    private _mergeInfo: StaticMeshMergeInfo;\r\n    /**\r\n     * @en The static mesh merge information.\r\n     * @zh 静态网格合并信息。\r\n     */\r\n    public get mergeInfo(): StaticMeshMergeInfo {\r\n        return this._mergeInfo;\r\n    }\r\n    public set mergeInfo(value: StaticMeshMergeInfo) {\r\n        this._mergeInfo = value;\r\n\r\n        let staticMesh = StaticBatchMesh.create(value);\r\n        this._staticMesh = staticMesh;\r\n        this.lightmapIndex = value.lightmapIndex;\r\n\r\n        this._staticMesh = staticMesh;\r\n        this.geometryBounds = staticMesh.bounds;\r\n        let meshDefines = MeshFilter._meshVerticeDefine;\r\n        let defineDatas = this._baseRenderNode.shaderData;\r\n        this._getMeshDefine(staticMesh, meshDefines);\r\n\r\n        for (const meshDef of meshDefines) {\r\n            defineDatas.addDefine(meshDef);\r\n        }\r\n\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        })\r\n\r\n        this._renderElements = [];\r\n\r\n        staticMesh._staticSubMeshes.forEach((subMesh, material) => {\r\n            let element = new StaticBatchMeshRenderElement();\r\n            this._renderElements.push(element);\r\n            element.render = this;\r\n            element.material = material;\r\n            element.setGeometry(subMesh);\r\n\r\n            material._addReference();\r\n        });\r\n\r\n        staticMesh.bounds.cloneTo(this.bounds);\r\n\r\n    }\r\n\r\n    _singleton: boolean;\r\n\r\n    private constructor() {\r\n        super();\r\n        this._singleton = false;\r\n    }\r\n\r\n    _calculateBoundingBox() {\r\n        // todo 根节点移动更新包围盒\r\n        // this._bounds.setCenter(Vector3.ZERO);\r\n        // this._bounds.setExtent(Vector3.ONE);\r\n    }\r\n\r\n    _renderUpdate(context: IRenderContext3D): void {\r\n        // this._applyLightMapParams();\r\n        // // todo 若有根节点, 在这里更新 worldmatrix\r\n        // this._setShaderValue(Sprite3D.WORLDMATRIX, ShaderDataType.Matrix4x4, Matrix4x4.DEFAULT);\r\n        // this._worldParams.x = 1.0;\r\n        // this._setShaderValue(Sprite3D.WORLDINVERTFRONT, ShaderDataType.Vector4, this._worldParams);//TODO\r\n    }\r\n\r\n    /**\r\n     * @en Gets mesh defines based on vertex elements.\r\n     * @param mesh The static batch mesh.\r\n     * @param out Array to store the resulting shader defines.\r\n     * @zh 根据顶点元素获取网格定义。\r\n     * @param mesh 静态批处理网格。\r\n     * @param out 用于存储结果着色器定义的数组。\r\n     */\r\n    _getMeshDefine(mesh: StaticBatchMesh, out: Array<ShaderDefine>) {\r\n        let vertexElements = mesh._vertexBuffer.vertexDeclaration._vertexElements;\r\n        for (const element of vertexElements) {\r\n            switch (element.elementUsage) {\r\n                case VertexMesh.MESH_COLOR0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);\r\n                    break;\r\n                case VertexMesh.MESH_TEXTURECOORDINATE1:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                    break;\r\n                case VertexMesh.MESH_TANGENT0:\r\n                    out.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Determines if the mesh needs to be rendered based on frustum culling.\r\n     * @param boundFrustum The bounding frustum for culling.\r\n     * @param context The 3D render context.(Not used)\r\n     * @returns True if the mesh needs to be rendered, false otherwise.\r\n     * @zh 根据视锥体剔除确定是否需要渲染网格。\r\n     * @param boundFrustum 用于剔除的边界视锥体。\r\n     * @param context 3D渲染上下文。(未使用)\r\n     * @returns 如果需要渲染网格则返回true，否则返回false。\r\n     */\r\n    _needRender(boundFrustum: BoundFrustum, context: RenderContext3D): boolean {\r\n        if (boundFrustum) {\r\n            if (boundFrustum.intersects(this.bounds)) {\r\n                let needRender = false;\r\n                this.staticMesh._staticSubMeshes.forEach(subMesh => {\r\n                    for (const info of subMesh.subInfos) {\r\n                        info.needRender = boundFrustum.intersects(info.meshBounds);\r\n                        needRender = needRender || info.needRender;\r\n                    }\r\n                });\r\n                return needRender;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is enabled.\r\n     * Sets the batch render flag for all renders in the merge info.\r\n     * @zh 当组件启用时调用。\r\n     * 为合并信息中的所有渲染器设置批处理渲染标志。\r\n     */\r\n    onEnable() {\r\n        super.onEnable();\r\n        this.mergeInfo.renders.forEach(render => {\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, true);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is disabled.\r\n     * Unsets the batch render flag for all renders in the merge info.\r\n     * @zh 当组件禁用时调用。\r\n     * 为合并信息中的所有渲染器取消设置批处理渲染标志。\r\n     */\r\n    onDisable() {\r\n        super.onDisable();\r\n        this.mergeInfo.renders.forEach(render => {\r\n            render.setRenderbitFlag(RenderBitFlag.RenderBitFlag_Batch, false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Called when the component is being destroyed.\r\n     * Cleans up resources including render elements and static mesh.\r\n     * @zh 当组件被销毁时调用。\r\n     * 清理资源，包括渲染元素和静态网格。\r\n     */\r\n    onDestroy() {\r\n        super.onDestroy();\r\n        this._renderElements.forEach(element => {\r\n            element.material._removeReference();\r\n            element.destroy();\r\n        });\r\n        this._renderElements = null;\r\n        this._staticMesh.destroy();\r\n        this._staticMesh = null;\r\n    }\r\n\r\n    /**\r\n     * @en Clones the current StaticBatchMeshRender to another instance.\r\n     * @param dest The destination StaticBatchMeshRender instance.\r\n     * @zh 将当前 StaticBatchMeshRender 克隆到另一个实例。\r\n     * @param dest 目标 StaticBatchMeshRender 实例。\r\n     */\r\n    _cloneTo(dest: StaticBatchMeshRender) {\r\n        dest.mergeInfo = this.mergeInfo;\r\n    }\r\n}","import { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\r\nimport { MeshRenderer } from \"../../core/MeshRenderer\";\r\nimport { Sprite3D } from \"../../core/Sprite3D\";\r\n\r\n/**\r\n * @en StaticMeshMergeInfo class represents information for merging static meshes.\r\n * @zh StaticMeshMergeInfo 类表示用于合并静态网格的信息。\r\n */\r\nexport class StaticMeshMergeInfo {\r\n\r\n    /**\r\n     * @en Creates a new StaticMeshMergeInfo instance from a MeshRenderer.\r\n     * @param render The MeshRenderer to create the merge info from.\r\n     * @returns A new StaticMeshMergeInfo instance.\r\n     * @zh 从 MeshRenderer 创建新的 StaticMeshMergeInfo 实例。\r\n     * @param render 用于创建合并信息的 MeshRenderer。\r\n     * @returns 新的 StaticMeshMergeInfo 实例。\r\n     */\r\n    static create(render: MeshRenderer) {\r\n\r\n        let mesh = render.getMesh();\r\n        // let owner = <Sprite3D>render.owner;\r\n\r\n        let info = new StaticMeshMergeInfo();\r\n        info.lightmapIndex = render.lightmapIndex;\r\n        info.receiveShadow = render.receiveShadow;\r\n        info.vertexDec = mesh ? mesh.getVertexDeclaration() : null;\r\n        // info.invertFrontFace = owner ? owner.transform._isFrontFaceInvert : false;\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether the object receives shadows.\r\n     * @zh 表示对象是否接收阴影。\r\n     */\r\n    receiveShadow: boolean;\r\n\r\n    /**\r\n     * @en The index of the lightmap used by this object.\r\n     * @zh 此对象使用的光照贴图索引。\r\n     */\r\n    lightmapIndex: number;\r\n\r\n    /**\r\n     * @en The vertex declaration describing the structure of vertex data.\r\n     * @zh 描述顶点数据结构的顶点声明。\r\n     */\r\n    vertexDec: VertexDeclaration;\r\n\r\n    private _renders: MeshRenderer[];\r\n    /**\r\n     * @en The array of MeshRenderer components attached to this object.\r\n     * @zh 附加到此对象的 MeshRenderer 组件数组。\r\n     */\r\n    public get renders(): MeshRenderer[] {\r\n        return this._renders;\r\n    }\r\n    /**\r\n     * @en The total number of vertices in this batch.\r\n     * @zh 此批次中的顶点总数。\r\n     */\r\n    vertexCount: number;\r\n    /**\r\n     * @en The total number of indices in this batch.\r\n     * @zh 此批次中的索引总数。\r\n     */\r\n    indexCount: number;\r\n\r\n    private constructor() {\r\n        this._renders = [];\r\n        this.vertexCount = 0;\r\n        this.indexCount = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Checks if a MeshRenderer matches the criteria for this batch.\r\n     * @param render The MeshRenderer to check.\r\n     * @returns True if the renderer matches, false otherwise.\r\n     * @zh 检查 MeshRenderer 是否符合此批次的条件。\r\n     * @param render 要检查的 MeshRenderer。\r\n     * @returns 如果渲染器匹配则返回 true，否则返回 false。\r\n     */\r\n    match(render: MeshRenderer): boolean {\r\n\r\n        let mesh = render.getMesh();\r\n        let owner = <Sprite3D>render.owner;\r\n\r\n        let match = true;\r\n\r\n        match = match && this.lightmapIndex == render.lightmapIndex;\r\n        match = match && this.receiveShadow == render.receiveShadow;\r\n        match = match && this.vertexDec == mesh.getVertexDeclaration();\r\n        // match = match && this.invertFrontFace == owner.transform._isFrontFaceInvert;\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * @en Adds a MeshRenderer to this batch.\r\n     * @param render The MeshRenderer to add.\r\n     * @zh 将 MeshRenderer 添加到此批次。\r\n     * @param render 要添加的 MeshRenderer。\r\n     */\r\n    addElement(render: MeshRenderer) {\r\n        this.renders.push(render);\r\n        let mesh = render.getMesh();\r\n        this.vertexCount += mesh.vertexCount;\r\n        this.indexCount += mesh.indexCount;\r\n    }\r\n\r\n    /**\r\n     * @en Destroys this batch and releases its resources.\r\n     * @zh 销毁此批次并释放其资源。\r\n     */\r\n    destroy() {\r\n        this._renders = null;\r\n    }\r\n}","import { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { IClone } from \"../../../../utils/IClone\"\r\n\r\n/**\r\n * @en The `GradientDataVector2` class is used to create two-dimensional vector gradients.\r\n * @zh `GradientDataVector2` 类用于创建二维向量渐变。\r\n */\r\nexport class GradientDataVector2 implements IClone {\r\n\tprivate _currentLength: number = 0;\r\n\t/**\r\n\t * @internal\r\n\t * @en Developers are prohibited from modifying this.\r\n\t * @zh 开发者禁止修改。\r\n\t */\r\n\t_elements: Float32Array;\r\n\r\n\t/**\r\n\t * @en The number of two-dimensional vector gradients.\r\n\t * @zh 二维向量渐变数量。\r\n\t */\r\n\tget gradientCount(): number {\r\n\t\treturn this._currentLength / 3;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en creates an instance of the `GradientDataVector2` class.\r\n\t * @zh 创建一个 `GradientDataVector2` 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._elements = new Float32Array(12);\r\n\t}\r\n\r\n\t/**\r\n\t * @en Add a two-dimensional vector gradient.\r\n\t * @param key Lifecycle, ranging from 0 to 1.\r\n\t * @param value The two-dimensional vector value.\r\n\t * @zh 增加二维向量渐变。\r\n\t * @param key 生命周期，范围为 0 到 1。\r\n\t * @param value 二维向量值。\r\n\t */\r\n\tadd(key: number, value: Vector2): void {\r\n\t\tif (this._currentLength < 8) {\r\n\r\n\t\t\tif ((this._currentLength === 6) && ((key !== 1))) {\r\n\t\t\t\tkey = 1;\r\n\t\t\t\tconsole.log(\"GradientDataVector2 warning:the forth key is  be force set to 1.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._elements[this._currentLength++] = key;\r\n\t\t\tthis._elements[this._currentLength++] = value.x;\r\n\t\t\tthis._elements[this._currentLength++] = value.y;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"GradientDataVector2 warning:data count must lessEqual than 4\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clones to a target object.\r\n\t * @param destObject The target object to clone to.\r\n\t * @zh 克隆到目标对象。\r\n\t * @param destObject 要克隆到的目标对象。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = <GradientDataVector2>destObject;\r\n\t\tdestGradientDataVector2._currentLength = this._currentLength;\r\n\t\tvar destElements: Float32Array = destGradientDataVector2._elements;\r\n\t\tfor (var i: number = 0, n: number = this._elements.length; i < n; i++) {\r\n\t\t\tdestElements[i] = this._elements[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @en Clone.\r\n\t * @returns Clone copy.\r\n\t * @zh 克隆。\r\n\t * @returns 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\tvar destGradientDataVector2: GradientDataVector2 = new GradientDataVector2();\r\n\t\tthis.cloneTo(destGradientDataVector2);\r\n\t\treturn destGradientDataVector2;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { BufferUsage } from \"../../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexBuffer3D } from \"../../../graphics/VertexBuffer3D\";\r\nimport { Laya3DRender } from \"../../../RenderObjs/Laya3DRender\";\r\nimport { DrawMeshInstancedCMD } from \"./DrawMeshInstancedCMD\";\r\n\r\n/**\r\n * @internal\r\n * <code>Mesh</code> 类用于创建CustomInstance属性。\r\n */\r\nexport class MaterialInstanceProperty {\r\n\t/**@internal instanceProperty name*/\r\n\tpublic _name: string;\r\n\t/**@internal property Data*/\r\n\tpublic _value: Vector4[] | Vector3[] | Vector2[] | Float32Array;\r\n\t/**@internal vertex Declaration */\r\n\tpublic _vertexDeclaration: VertexDeclaration;\r\n\t/**@internal */\r\n\tpublic _isNeedUpdate: boolean = false;\r\n\t/**@internal */\r\n\tpublic _vertexStride: number;\r\n\t/**@internal */\r\n\tpublic _instanceData: Float32Array;\r\n\t/**@internal */\r\n\tpublic _vertexBuffer: VertexBuffer3D;\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 创建instance顶点Buffer\r\n\t */\r\n\tcreateInstanceVertexBuffer3D() {\r\n\t\tthis._instanceData = new Float32Array(DrawMeshInstancedCMD.maxInstanceCount * this._vertexStride);\r\n\t\tthis._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(this._instanceData.length * 4, BufferUsage.Dynamic, false);\r\n\t\tthis._vertexBuffer.vertexDeclaration = this._vertexDeclaration;\r\n\t\tthis._vertexBuffer.instanceBuffer = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 更新顶点数据\r\n\t */\r\n\tupdateVertexBufferData(drawNums: number) {\r\n\t\t//更新数据\r\n\t\tif (!this._isNeedUpdate)\r\n\t\t\treturn;\r\n\t\tlet instanceData = this._instanceData;\r\n\t\tlet dataValue = this._value;\r\n\t\tlet datalength = this._value.length;\r\n\t\tlet data: Vector2 | Vector3 | Vector4;\r\n\t\tlet stride = this._vertexStride;\r\n\t\tlet updateType = 0;\r\n\t\tif (!(this._value instanceof Float32Array)) {\r\n\t\t\tupdateType = 1;//判断为Vector数据\r\n\t\t}\r\n\r\n\t\tswitch (updateType) {\r\n\t\t\tcase 0:\r\n\t\t\t\tinstanceData.set(<Float32Array>dataValue, 0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tfor (let i = 0; i < datalength; i++) {\r\n\t\t\t\t\tdata = <Vector2 | Vector3 | Vector4>dataValue[i];\r\n\t\t\t\t\tdata.writeTo(instanceData, i * stride);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis._vertexBuffer._deviceBuffer.setDataLength(this._vertexBuffer._byteLength);\r\n\t\tthis._vertexBuffer.setData(instanceData.buffer, 0, 0, drawNums * 4 * stride);\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tdelete this._value;\r\n\t\tdelete this._instanceData;\r\n\t\tthis._vertexDeclaration = null;\r\n\t\tthis._vertexBuffer.destroy();\r\n\t}\r\n}","import { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { VertexDeclaration } from \"../../../../RenderEngine/VertexDeclaration\";\r\nimport { VertexElement } from \"../../../../renders/VertexElement\";\r\nimport { VertexElementFormat } from \"../../../../renders/VertexElementFormat\";\r\nimport { MaterialInstanceProperty } from \"./MaterialInstanceProperty\";\r\n\r\nexport enum InstanceLocation{\r\n\tCUSTOME0 = 12,\r\n\tCUSTOME1 = 13,\r\n\tCUSTOME2 = 14,\r\n\tCUSTOME3 = 15\r\n}\r\n\r\n/**\r\n * @en Material instance property block.\r\n * @zh 材质实例属性块。\r\n */\r\nexport class MaterialInstancePropertyBlock{\r\n\t\r\n\t/**Instance合并方案 */\r\n    /**\r\n     * @en Attribute instance rendering scheme. Advantages: High merge quantity, high merge efficiency, good rendering performance. Disadvantages: Few instance variable elements.\r\n     * @zh 属性实例渲染方案。优点：合并数量多，合并效率高，渲染性能优。缺点：实例变量元素少。\r\n     */\r\n\tpublic static INSTANCETYPE_ATTRIBUTE:number = 0;\r\n    /**\r\n     * @en Uniform instance rendering scheme. Advantages: Many instance variables, flexible. Disadvantages: Merge quantity affected by WebGLContext._maxUniformFragmentVectors, low merge efficiency.\r\n     * @zh 统一实例渲染方案。优点：实例变量多，灵活。缺点：合并数量受 WebGLContext._maxUniformFragmentVectors 的影响，合并效率低。\r\n     */\r\n\tpublic static INSTANCETYPE_UNIFORMBUFFER:number = 1;\r\n\r\n\r\n\t/**@internal instance type*/\r\n\tprotected _type:number = 0;\r\n\r\n\r\n\t/**@internal property map*/\r\n\t_propertyMap:{[key:number]:MaterialInstanceProperty} = {};\r\n\r\n\tconstructor(){\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @internal 检查传入的参数是否符合规则\r\n\t * @param vertexElementFormat 顶点元素\r\n\t * @param propertyName 属性名\r\n\t * @param attributeLocation attribute位置\r\n\t * @param prob 材质属性\r\n\t */\r\n\tprivate _checkPropertyLegal(vertexElementFormat:VertexElementFormat,propertyName:string,attributeLocation:InstanceLocation,prob:MaterialInstanceProperty){\r\n\t\t\tvar vecDec = prob._vertexDeclaration;\r\n\t\t\t//顶点描述是否保持一致\r\n\t\t\tif(vecDec._vertexElements[0]._elementFormat !== vertexElementFormat)\r\n\t\t\t\tthrow \"Data exists and format does not match\";//数据存在且类型不匹配\r\n\t\t\tif(prob._name !== propertyName)\r\n\t\t\t\tthrow \"You cannot add a new property to an existing attributeLocation,Please use another attributeLocation\";//属性名字不匹配\t\r\n\t}\r\n\r\n\t/**\r\n\t * 创建instance属性\r\n\t * @param attributeName name\r\n\t * @param arrays data\r\n\t * @param vertexStride vertex size\r\n\t * @param vertexformat vertexFormat\r\n\t * @param attributeLocation  attribute location\r\n\t */\r\n\tprivate _creatProperty(attributeName:string,arrays:Vector4[]|Vector3[]|Vector2[]|Float32Array,vertexStride:number,vertexformat:string,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation] = new MaterialInstanceProperty();\r\n\t\tprob._name = attributeName;\r\n\t\tprob._value = arrays;\r\n\t\tprob._vertexDeclaration = new VertexDeclaration(vertexStride,[new VertexElement(0,vertexformat,attributeLocation)]);\r\n\t\tprob._isNeedUpdate = true;\r\n\t\tprob._vertexStride = vertexStride / 4;\r\n\t\tprob.createInstanceVertexBuffer3D();\r\n\t}\r\n\t\r\n    /**\r\n     * @en Set Vector4 material array property.\r\n     * @param attributeName The attribute name (should correspond to the Shader).\r\n     * @param arrays The data.\r\n     * @param attributeLocation The attribute Shader location (needs to correspond one-to-one with the Attribute declaration in the shader).\r\n     * @zh 设置 Vector4 材质数组属性。\r\n     * @param attributeName 属性名称（要对应到 Shader 中）。\r\n     * @param arrays 数据。\r\n     * @param attributeLocation 属性 Shader 位置（需要与 shader 中的声明 Attribute 一一对应）。\r\n     */\r\n\tsetVectorArray(attributeName:string,arrays:Vector4[]|Float32Array,attributeLocation:InstanceLocation):void{\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector4,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,16,VertexElementFormat.Vector4,attributeLocation);\r\n\t}\r\n\r\n    /**\r\n     * @en Set Vector3 material array property.\r\n     * @param attributeName The attribute name (should correspond to the Shader).\r\n     * @param arrays The data.\r\n     * @param attributeLocation The attribute Shader location (needs to correspond one-to-one with the Attribute declaration in the shader).\r\n     * @zh 设置 Vector3 材质数组属性。\r\n     * @param attributeName 属性名称（要对应到 Shader 中）。\r\n     * @param arrays 数据。\r\n     * @param attributeLocation 属性 Shader 位置（需要与 shader 中的声明 Attribute 一一对应）。\r\n     */\r\n\tsetVector3Array(attributeName:string,arrays:Vector3[]|Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector3,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,12,VertexElementFormat.Vector3,attributeLocation);\r\n\t}\r\n\r\n    /**\r\n     * @en Set Vector2 material array property.\r\n     * @param attributeName The attribute name (should correspond to the Shader).\r\n     * @param arrays The data.\r\n     * @param attributeLocation The attribute Shader location (needs to correspond one-to-one with the Attribute declaration in the shader).\r\n     * @zh 设置 Vector2 材质数组属性。\r\n     * @param attributeName 属性名称（要对应到 Shader 中）。\r\n     * @param arrays 数据。\r\n     * @param attributeLocation 属性 Shader 位置（需要与 shader 中的声明 Attribute 一一对应）。\r\n     */\r\n\tsetVector2Array(attributeName:string,arrays:Vector2[]|Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Vector2,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,8,VertexElementFormat.Vector2,attributeLocation);\r\n\t}\r\n\r\n    /**\r\n     * @en Set Number material array property.\r\n     * @param attributeName The attribute name (should correspond to the Shader).\r\n     * @param arrays The data.\r\n     * @param attributeLocation The attribute Shader location (needs to correspond one-to-one with the Attribute declaration in the shader).\r\n     * @zh 设置 Number 材质数组属性。\r\n     * @param attributeName 属性名称（要对应到 Shader 中）。\r\n     * @param arrays 数据。\r\n     * @param attributeLocation 属性 Shader 位置（需要与 shader 中的声明 Attribute 一一对应）。\r\n     */\r\n\tsetNumberArray(attributeName:string,arrays:Float32Array,attributeLocation:InstanceLocation){\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\tif(prob){\r\n\t\t\t//判断匹配\r\n\t\t\tthis._checkPropertyLegal(VertexElementFormat.Single,attributeName,attributeLocation,prob);\r\n\t\t\tprob._value = arrays;\r\n\t\t\tprob._isNeedUpdate = true;\r\n\t\t}else//创建自定义属性\r\n\t\t\tthis._creatProperty(attributeName,arrays,4,VertexElementFormat.Single,attributeLocation);\r\n\t}\r\n\r\n    /**\r\n     * @en Get property data.\r\n     * @param attributeLocation The attribute Shader location.\r\n     * @zh 获得属性数据。\r\n     * @param attributeLocation 属性 Shader 位置。\r\n     */\r\n\tgetPropertyArray(attributeLocation:InstanceLocation):Vector4[]|Vector3[]|Vector2[]|Float32Array{\r\n\t\tvar prob = this._propertyMap[attributeLocation];\r\n\t\treturn prob?prob._value:null;\r\n\t}\r\n\r\n    /**\r\n     * @en Clear all properties.\r\n     * @zh 清除所有属性。\r\n     */\r\n\tclear(){\r\n\t\tfor(var i in this._propertyMap){\r\n\t\t\tthis._propertyMap[i].destroy();\r\n\t\t}\r\n\t\tthis._propertyMap = {};\r\n\t}\r\n\r\n}","import { Animator } from \"../component/Animator/Animator\"\r\nimport { AnimatorState } from \"../component/Animator/AnimatorState\";\r\n\r\ninterface AnimatorPlayScriptInfo {\r\n\tanimator: Animator;\r\n\tlayerindex: number;\r\n\tplayState: AnimatorState;\r\n}\r\n/**\r\n * @en The AnimatorStateScript class is the base class for animation state scripts. This is an abstract class and cannot be instantiated.\r\n * @zh AnimatorStateScript 类用于动画状态脚本的父类,该类为抽象类,不允许实例。\r\n */\r\nexport class AnimatorStateScript {\r\n\r\n\t/**\r\n\t * @internal\r\n\t * 动画播放脚本的相关信息。\r\n\t */\r\n\tplayStateInfo: AnimatorPlayScriptInfo = { animator: null, layerindex: -1, playState: null };\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @en Set the play script information.\r\n\t * @param animator The animator instance.\r\n\t * @param layerindex The index of the layer.\r\n\t * @param playstate The animator state.\r\n\t * @zh 设置播放脚本信息。\r\n\t * @param animator 动画器实例。\r\n\t * @param layerindex 层索引。\r\n\t * @param playstate 动画状态。\r\n\t */\r\n\tsetPlayScriptInfo(animator: Animator, layerindex: number, playstate: AnimatorState) {\r\n\t\tthis.playStateInfo.animator = animator;\r\n\t\tthis.playStateInfo.layerindex = layerindex;\r\n\t\tthis.playStateInfo.playState = playstate;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @en Creates an instance of AnimatorStateScript.\r\n\t * @zh 创建 AnimatorStateScript 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Executed when the animation state begins.\r\n\t * @zh 动画状态开始时执行。\r\n\t */\r\n\tonStateEnter(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @en Executed when the animation state is running.\r\n\t * @param normalizeTime The animation playback state (0-1).\r\n\t * @zh 动画状态运行中。\r\n\t * @param normalizeTime 0-1动画播放状态。\r\n\t */\r\n\tonStateUpdate(normalizeTime: number): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t  * @en Executed when the animation state exits.\r\n\t  * @zh 动画状态退出时执行。\r\n\t  */\r\n\tonStateExit(): void {\r\n\r\n\t}\r\n    /**\r\n     * @en Executed at the end of each loop if the animation is set to loop.\r\n     * @zh 如果动画设置了循环，则在每次循环结束时执行。\r\n     */\r\n\tonStateLoop(): void {\r\n\r\n\t}\r\n}\r\n\r\n\r\n","import { ICollider } from \"../../Physics3D/interface/ICollider\";\r\nimport { ContactPoint } from \"./ContactPoint\";\r\nimport { PhysicsColliderComponent } from \"./PhysicsColliderComponent\";\r\n\r\n/**\r\n * @en The Collision class is used to create physical collision information.\r\n * @zh Collision 类用于创建物理碰撞信息。\r\n */\r\nexport class Collision {\r\n    /**@internal */\r\n    _lastUpdateFrame = -2147483648/*int.MIN_VALUE*/;\r\n    /**@internal */\r\n    _updateFrame = -2147483648/*int.MIN_VALUE*/;\r\n    /**@internal */\r\n    _isTrigger = false;\r\n\r\n    /**@internal */\r\n    _colliderA: ICollider;\r\n    /**@internal */\r\n    _colliderB: ICollider;\r\n\r\n    /**\r\n     * @readonly\r\n     * @en List of collision information generated by collision.\r\n     * @zh 碰撞产生的碰撞信息列表。\r\n     */\r\n    contacts: ContactPoint[] = [];\r\n    /**\r\n     * @readonly\r\n     * @en Another collision object involved in the collision.\r\n     * @zh 碰撞中涉及的另一个碰撞体组件。\r\n     */\r\n    other: PhysicsColliderComponent;\r\n\r\n    /**@internal */\r\n    _inPool: boolean = false;\r\n    /**\r\n     * @en constructor of Collision.\r\n     * @zh Collision构造方法。\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setUpdateFrame(farme: number): void {\r\n        this._lastUpdateFrame = this._updateFrame;//TODO:为啥整两个\r\n        this._updateFrame = farme;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ShaderDataType } from \"./ShaderData\";\r\n\r\nexport type UniformProperty = { id: number, propertyName: string, uniformtype: ShaderDataType }\r\nexport class CommandUniformMap {\r\n\r\n    constructor(stateName: string) {\r\n\r\n    }\r\n    /**\r\n     * 增加一个Uniform参数\r\n     * @param propertyID \r\n     * @param propertyKey \r\n     */\r\n    addShaderUniform(propertyID: number, propertyKey: string, uniformtype: ShaderDataType, block: string = null): void {\r\n        throw \"need override it\";\r\n    }\r\n\r\n    /**\r\n     * 增加一个UniformArray参数\r\n     * @param propertyID \r\n     * @param propertyName \r\n     */\r\n    addShaderUniformArray(propertyID: number, propertyName: string, uniformtype: ShaderDataType, arrayLength: number, block: string = \"\"): void {\r\n        throw \"need override it\";\r\n    } //兼容WGSL\r\n\r\n    /**\r\n     * 增加一个Uniform\r\n     * @param propertyID \r\n     * @param propertyKey \r\n     */\r\n    addShaderBlockUniform(propertyID: number, blockname: string, blockProperty: UniformProperty[]): void {\r\n        throw \"need override it\";\r\n    }\r\n}","import { ICollider } from \"../../Physics3D/interface/ICollider\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\n\r\n/**\r\n * @en ContactPoint class used to create physical contact information.\r\n * @zh ContactPoint 类用于创建物理碰撞信息。\r\n */\r\nexport class ContactPoint {\r\n\t/**@internal */\r\n\t_idCounter: number = 0;\r\n\r\n\t/**@internal */\r\n\t_id: number;\r\n\r\n\t/**\r\n\t * @en Collider A.\r\n\t * @zh 碰撞器A。\r\n\t */\r\n\t_colliderA: ICollider = null;\r\n\t/**\r\n\t * @en Collider B.\r\n\t * @zh 碰撞器B。\r\n\t */\r\n\t_colliderB: ICollider = null;\r\n\t/**\r\n\t * @en Distance.\r\n\t * @zh 距离。\r\n\t */\r\n\tdistance: number = 0;\r\n\t/**\r\n\t * @en Normal.\r\n\t * @zh 法线。\r\n\t */\r\n\tnormal: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en Collider A's contact point.\r\n\t * @zh 碰撞器A的碰撞点。\r\n\t */\r\n\tpositionOnA: Vector3 = new Vector3();\r\n\t/**\r\n\t * @en Collider B's contact point.\r\n\t * @zh 碰撞器B的碰撞点。\r\n\t */\r\n\tpositionOnB: Vector3 = new Vector3();\r\n\r\n\t/**\r\n\t * @en constructor of ContactPoint.\t\r\n\t * @zh ContactPoint 构造函数。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._id = ++this._idCounter;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { GeometryElement } from \"../../core/GeometryElement\";\r\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\r\nimport { Mesh } from \"../../resource/models/Mesh\";\r\nimport { HLODBatchSubMesh } from \"./HLODUtil\";\r\n\r\n/**\r\n * @en a batched mesh for hierarchical level of detail (HLOD) in 3D rendering. This class optimizes rendering performance by combining multiple sub-meshes into a single rendering unit, reducing draw calls.\r\n * @zh 用于层次化细节级别（HLOD）的批处理网格。该类通过合并多个子网格为单一的渲染单元来优化渲染性能，减少绘制调用。\r\n */\r\nexport class HLODBatchMesh extends GeometryElement {\r\n    /**@internal batchMesh */\r\n    private _mesh: Mesh;\r\n    /**@internal */\r\n    private _batchSubMeshInfos: HLODBatchSubMesh[];\r\n\r\n    /**@internal */\r\n    private _drawSubMeshs: HLODBatchSubMesh[];\r\n    /**\r\n     * @en construct method of HLODBatchMesh.\r\n     * @zh HLODBatchMesh的构造方法。\r\n     */\r\n    constructor() {\r\n        super(MeshTopology.Triangles, DrawType.DrawElement);\r\n    }\r\n\r\n    /**\r\n     * @en The batched mesh.\r\n     * @zh 合批后的网格。\r\n     */\r\n    get batchMesh() {\r\n        return this._mesh;\r\n    }\r\n    set batchMesh(mesh: Mesh) {\r\n        if (this._mesh != mesh) {\r\n            this._mesh && (this._mesh._removeReference());\r\n            this.indexFormat = mesh.indexFormat;\r\n            this._mesh = mesh;\r\n            this._mesh._addReference();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @en The batch sub-mesh information.\r\n     * @zh 合批子网格信息。\r\n     */\r\n    get batchSubMeshInfo() {\r\n        return this._batchSubMeshInfos;\r\n    }\r\n\r\n    set batchSubMeshInfo(value: HLODBatchSubMesh[]) {\r\n        this._batchSubMeshInfos = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @en The draw sub-meshes.\r\n     * @zh 绘制的子网格。\r\n     */\r\n    get drawSubMeshs(): HLODBatchSubMesh[] {\r\n        return this._drawSubMeshs;\r\n    }\r\n\r\n    set drawSubMeshs(value: HLODBatchSubMesh[]) {\r\n        this._drawSubMeshs = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _prepareRender(state: RenderContext3D): boolean {\r\n        this._mesh._uploadVerticesData();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override\r\n     */\r\n    _updateRenderParams(state: RenderContext3D): void {\r\n        var mesh: Mesh = this._mesh;\r\n        var byteCount: number;\r\n        switch (mesh.indexFormat) {\r\n            case IndexFormat.UInt32:\r\n                byteCount = 4;\r\n                break;\r\n            case IndexFormat.UInt16:\r\n                byteCount = 2;\r\n                break;\r\n            case IndexFormat.UInt8:\r\n                byteCount = 1;\r\n                break;\r\n        }\r\n        this.clearRenderParams();\r\n        this.bufferState = mesh._bufferState;\r\n        if (this._drawSubMeshs) {\r\n            this._drawSubMeshs.forEach(element => {\r\n                this.setDrawElemenParams(element.drawPramas.y, element.drawPramas.x * byteCount);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the HLODBatchMesh.\r\n     * @zh 销毁 HLODBatchMesh。\r\n     */\r\n    destroy(): void {\r\n        this._mesh && this._mesh._removeReference();\r\n        delete this._batchSubMeshInfos;\r\n        delete this._drawSubMeshs;\r\n    }\r\n\r\n\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { Vector2 } from \"../../../maths/Vector2\";\r\nimport { Handler } from \"../../../utils/Handler\";\r\nimport { Material } from \"../../../resource/Material\";\r\nimport { Lightmap } from \"../../core/scene/Lightmap\";\r\nimport { Bounds } from \"../../math/Bounds\";\r\nimport { HLODBatchMesh } from \"./HLODBatchMesh\";\r\n/**\r\n * @en Configuration for Hierarchical Level of Detail (HLOD) settings.\r\n * @zh 分层细节层次(HLOD)的配置设置。\r\n */\r\nexport class HLODConfig {\r\n    releaseCallTime: number;//CG调用时间\r\n    releaseTime: number;//资源闲置时间\r\n}\r\n\r\n\r\n/**\r\n * @en Represents a sub-mesh within an HLOD batch resource, describing geometric bounds and render parameters.\r\n * @zh 在 HLOD 批处理资源中表示一个子网格，包括几何边界和渲染参数。\r\n */\r\nexport class HLODBatchSubMesh {\r\n    bounds: Bounds;\r\n    drawPramas: Vector2;\r\n}\r\n\r\n/**\r\n * @en An element representing a set of HLOD renderable resources.\r\n * @zh 表示一组 HLOD 可渲染资源的元素。\r\n */\r\nexport class HLODElement {\r\n    /**\r\n     * @en The batch mesh for this HLOD element.\r\n     * @zh 此 HLOD 元素的批处理网格。\r\n     */\r\n    HLODMesh: HLODBatchMesh;\r\n\r\n    /**material */\r\n    private _material: Material;\r\n    /**\r\n     * @en The material for this HLOD element.\r\n     * @zh 此 HLOD 元素的材质。\r\n     */\r\n    public get material(): Material {\r\n        return this._material;\r\n    }\r\n    public set material(value: Material) {\r\n        if (this._material != value) {\r\n            this._material && this._material._removeReference();\r\n            this._material = value;\r\n            this._material._addReference();\r\n        }\r\n\r\n    }\r\n\r\n    /**lightmap */\r\n    private _lightmap: Lightmap;\r\n    /**\r\n     * @en The lightmap for this HLOD element.\r\n     * @zh 此 HLOD 元素的光照贴图。\r\n     */\r\n    public get lightmap(): Lightmap {\r\n        return this._lightmap;\r\n    }\r\n    public set lightmap(value: Lightmap) {\r\n        if (this._lightmap != value) {\r\n            if (this._lightmap) {\r\n                this._lightmap.lightmapColor._removeReference();\r\n                this._lightmap.lightmapDirection._removeReference();\r\n            }\r\n            this._lightmap = value;\r\n            this._lightmap.lightmapColor._addReference();\r\n            this._lightmap.lightmapDirection._addReference();\r\n\r\n        }\r\n        this._lightmap = value;\r\n    }\r\n\r\n    /**\r\n     * @en Release resources associated with this HLOD element.\r\n     * Lightmap is directly destroyed.\r\n     * @zh 释放与此 HLOD 元素关联的资源。\r\n     * 光照贴图会被直接销毁。\r\n     */\r\n    release() {\r\n        this.HLODMesh.destroy();\r\n        this.material.destroy();\r\n        if (this.lightmap) {\r\n            this._lightmap.lightmapColor.destroy();\r\n            this._lightmap.lightmapDirection.destroy();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @en A resource group for managing the lifecycle of HLOD resources, handling their load and release state.\r\n * @zh 用于管理 HLOD 资源生命周期的资源组，处理其加载和释放状态。\r\n */\r\nexport class HLODResourceGroup {\r\n    /**\r\n     * @en The URL of the HLOD resource.\r\n     * @zh HLOD 资源的 URL。\r\n     */\r\n    url: string;\r\n    /**\r\n     * @en Update marker for the resource group.\r\n     * @zh 资源组的更新标记。\r\n     */\r\n    updateMark: number;\r\n    /**\r\n     * @en Array of HLOD elements in this resource group.\r\n     * @zh 此资源组中的 HLOD 元素数组。\r\n     */\r\n    resources: HLODElement[];\r\n    /**\r\n     * @en Indicates whether the resource group is loaded.\r\n     * @zh 资源组是否已加载。\r\n     */\r\n    loaded: boolean;\r\n\r\n    /**\r\n     * @en Load the HLOD resource group.\r\n     * @param callFun The callback function to be called after loading.\r\n     * @param hlod The HLOD instance.\r\n     * @zh 加载 HLOD 资源组。\r\n     * @param callFun 加载完成后要调用的回调函数。\r\n     * @param hlod HLOD 实例。\r\n     */\r\n    load(callFun: Function, hlod: any) {\r\n        if (!this.loaded) {\r\n            Laya.loader.load(this.url, Handler.create(\r\n                this, (res: any) => {\r\n                    callFun.apply(hlod, [this]);\r\n                    this.loaded = true;\r\n                }, [this]\r\n            ));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Releases all the resources of the HLOD group, marking the group as unloaded.\r\n     * @zh 释放 HLOD 组的所有资源，并标记组为未加载。\r\n     */\r\n    release() {\r\n        this.resources.forEach(element => {\r\n            element.release();\r\n        });\r\n        this.loaded = false;\r\n    }\r\n}","import { PixelLineFilter } from \"./PixelLineFilter\";\r\nimport { PixelLineRenderer } from \"./PixelLineRenderer\";\r\nimport { PixelLineData } from \"./PixelLineData\";\r\nimport { RenderableSprite3D } from \"../RenderableSprite3D\"\r\nimport { Node } from \"../../../display/Node\"\r\nimport { Sprite3D } from \"../Sprite3D\";\r\nimport { UnlitMaterial } from \"../material/UnlitMaterial\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * @en PixelLineSprite3D class is used for pixel line rendering sprites.\r\n * @zh PixelLineSprite3D 类用于像素线渲染精灵。\r\n */\r\nexport class PixelLineSprite3D extends RenderableSprite3D {\r\n\r\n    declare _render: PixelLineRenderer;\r\n\r\n    /** @private 是否调用active */\r\n    private _isRenderActive: Boolean = false;\r\n    /** @private 是否加入渲染队列*/\r\n    private _isInRenders: Boolean = false;\r\n    /** @internal */\r\n    public _geometryFilter: PixelLineFilter;\r\n\r\n    /**\r\n     * @en The maximum line count.\r\n     * @zh 最大线数量。\r\n     */\r\n    get maxLineCount(): number {\r\n        return (this._render as PixelLineRenderer).maxLineCount;\r\n    }\r\n\r\n    set maxLineCount(value: number) {\r\n        (this._render as PixelLineRenderer).maxLineCount = value;\r\n    }\r\n\r\n    /**\r\n     * @en The current line count.\r\n     * @zh 当前线数量。\r\n     */\r\n    get lineCount(): number {\r\n        return (this._render as PixelLineRenderer).lineCount;\r\n    }\r\n\r\n    /**\r\n     * @en The pixel line renderer.\r\n     * @zh 像素线渲染器。\r\n     */\r\n    get pixelLineRenderer(): PixelLineRenderer {\r\n        return (<PixelLineRenderer>this._render);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @en Initaialize pixelLineSprite3D instance.\r\n     * @param maxCount Maximum number of line segments. \r\n     * @param name Name of the instance. \r\n     * @zh 初始化PixeLineSprite3D实例。\r\n     * @param maxCount 最大线段数量。\r\n     * @param name  实例的名称。\r\n     */\r\n    constructor(maxCount: number = 2, name: string = null) {\r\n        super(name);\r\n\r\n        this._render = this.addComponent(PixelLineRenderer);\r\n        this._geometryFilter = (this._render as PixelLineRenderer)._pixelLineFilter;\r\n        (this._render as PixelLineRenderer).maxLineCount = maxCount;\r\n        let material = this._render.material = new UnlitMaterial();\r\n        material.enableVertexColor = true;\r\n    }\r\n\r\n    /**\r\n     * @en Add a single line.\r\n     * @param startPosition  Start position of the line. \r\n     * @param endPosition  End position of the line.\r\n     * @param startColor  Start color of the line. \r\n     * @param endColor  End color of the line.\r\n     * @zh 增加一条线。\r\n     * @param startPosition  线段起点位置。\r\n     * @param endPosition  线段终点位置。\r\n     * @param startColor  线段起点颜色。\r\n     * @param endColor  线段终点颜色。\r\n     */\r\n    addLine(startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        this._render.addLine(startPosition, endPosition, startColor, endColor);\r\n    }\r\n\r\n    /**\r\n     * @en Add multiple line segments.\r\n     * @param lines  Array of line segment data.\r\n     * @zh 添加多条线段。\r\n     * @param lines  线段数据\r\n     */\r\n    addLines(lines: PixelLineData[]): void {\r\n        this._render.addLines(lines);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a line segment.\r\n     * @param index Index of the line to remove.\r\n     * @zh 移除一条线段。\r\n     * @param index 要移除的线段索引。\r\n     */\r\n    removeLine(index: number): void {\r\n        this._render.removeLine(index);\r\n    }\r\n\r\n    /**\r\n     * @en Update a line segment.\r\n     * @param index  Index of the line to update. \r\n     * @param startPosition  New start position of the line.\r\n     * @param endPosition  New end position of the line. \r\n     * @param startColor - New start color of the line. \r\n     * @param endColor  New end color of the line. \r\n     * @zh 更新一条线段。\r\n     * @param index  要更新的线段索引。\r\n     * @param startPosition  新的线段起点位置。\r\n     * @param endPosition  新的线段终点位置。\r\n     * @param startColor  新的线段起点颜色。\r\n     * @param endColor  新的线段终点颜色。\r\n     */\r\n    setLine(index: number, startPosition: Vector3, endPosition: Vector3, startColor: Color, endColor: Color): void {\r\n        (this._render as PixelLineRenderer).setLine(index, startPosition, endPosition, startColor, endColor);\r\n    }\r\n\r\n    /**\r\n     * @en Get line segment data.\r\n     * @param index  Index of the line to get.\r\n     * @param out  Output object to store the line data. \r\n     * @zh 获取线段数据。\r\n     * @param index  要获取的线段索引。\r\n     * @param out  输出对象，用于存储线段数据。\r\n     */\r\n    getLine(index: number, out: PixelLineData): void {\r\n        (this._render as PixelLineRenderer).getLine(index, out);\r\n    }\r\n\r\n    /**\r\n     * @en Clear all line segments.\r\n     * @zh 清除所有线段。\r\n     */\r\n    clear(): void {\r\n        (this._render as PixelLineRenderer).clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _create(): Node {\r\n        return new Sprite3D();\r\n    }\r\n\r\n}\r\n\r\n","import { ISceneRenderManager } from \"../../../RenderDriver/DriverDesign/3DRenderPass/ISceneRenderManager\";\r\nimport { IBaseRenderNode } from \"../../../RenderDriver/RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { SingletonList } from \"../../../utils/SingletonList\";\r\nimport { BaseRender } from \"../../core/render/BaseRender\";\r\n\r\n/**\r\n * @en The `SceneRenderManagerOBJ` class is used to manage the rendering nodes of a scene.\r\n * @zh `SceneRenderManagerOBJ` 类用于管理场景的渲染节点。\r\n */\r\nexport class SceneRenderManagerOBJ implements ISceneRenderManager {\r\n    /** @internal */\r\n    _renders: SingletonList<BaseRender> = new SingletonList();\r\n    _motionRenders: SingletonList<BaseRender> = new SingletonList();\r\n    /** @ignore */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @en The base render list.\r\n     * @zh 基础渲染节点列表。\r\n     */\r\n    baseRenderList: SingletonList<IBaseRenderNode> = new SingletonList();\r\n\r\n    /**\r\n     * @en The list of render objects.\r\n     * @zh 渲染对象列表。\r\n     */\r\n    get list() {\r\n        return this._renders;\r\n    }\r\n\r\n    set list(value) {\r\n        this._renders = value;\r\n    }\r\n\r\n    /**\r\n     * @en Adds a render object to the render list.\r\n     * @param object The render object to add.\r\n     * @zh 向渲染列表添加渲染对象。\r\n     * @param object 要添加的渲染对象。\r\n     */\r\n    addRenderObject(object: BaseRender): void {\r\n        this._renders.add(object);\r\n        this.baseRenderList.add(object._baseRenderNode);\r\n    }\r\n\r\n    /**\r\n     * @en Removes a render object from the render list and the base render list.\r\n     * @param object The render object to remove.\r\n     * @zh 从渲染列表和基础渲染列表中移除渲染对象。\r\n     * @param object 要移除的渲染对象。\r\n     */\r\n    removeRenderObject(object: BaseRender): void {\r\n        this._renders.remove(object);\r\n        this.baseRenderList.remove(object._baseRenderNode);\r\n        this.removeMotionObject(object);\r\n    }\r\n\r\n\r\n    /**\r\n     * @en Removes a motion render object.\r\n     * @param object The motion render object to remove.\r\n     * @zh 移除运动渲染对象。\r\n     * @param object  要移除的运动渲染对象。\r\n     */\r\n    removeMotionObject(object: BaseRender): void {\r\n        //override\r\n    }\r\n\r\n    /**\r\n     * @en Updates all motion render objects.\r\n     * @zh 更新所有运动渲染对象。\r\n     */\r\n    updateMotionObjects(): void {\r\n        //override\r\n    }\r\n\r\n    /**\r\n     * @en Adds a motion render object.\r\n     * @param object The motion render object to add.\r\n     * @zh 向管理器添加运动渲染对象。\r\n     * @param object 要添加的运动渲染对象。\r\n     */\r\n    addMotionObject(object: BaseRender): void {\r\n        //override\r\n    }\r\n\r\n    /**\r\n     * @en Destroys the render objects and cleans up resources.\r\n     * @zh 销毁渲染对象并清理资源。\r\n     */\r\n    destroy(): void {\r\n        this._renders.destroy();\r\n    }\r\n\r\n}","/**\r\n * <code>ShaderDefine</code> 类用于定义宏数据。\r\n */\r\nexport class ShaderDefine {\r\n\t/**@internal */\r\n\t_index: number;\r\n\t/**@internal */\r\n\t_value: number;\r\n\t/**\r\n\t * 创建一个宏定义的实例`\t\r\n\t * @param index 宏索引\r\n\t * @param value 宏值\r\n\t */\r\n\tconstructor(index: number, value: number) {\r\n\t\tthis._index = index;\r\n\t\tthis._value = value;\r\n\t}\r\n}","import { MeshRenderer } from \"laya/d3/core/MeshRenderer\";\r\nimport { StaticBatchMeshRender } from \"./StaticBatchMeshRender\";\r\nimport { StaticMeshMergeInfo } from \"./StaticMeshMergeInfo\";\r\n\r\n/**\r\n * @internal\r\n * @en Manages static mesh batching.\r\n * @zh 管理静态网格批处理。\r\n */\r\nexport class StaticMeshBatchManager {\r\n\r\n    private meshVertexDecSet: Set<StaticMeshMergeInfo>;\r\n\r\n    constructor() {\r\n        this.meshVertexDecSet = new Set();\r\n    }\r\n\r\n    /**\r\n     * @en Combines multiple MeshRenderers into static batch renders.\r\n     * @param renders Array of MeshRenderer objects to be combined.\r\n     * @returns Array of StaticBatchMeshRender objects created from the combination.\r\n     * @zh 将多个 MeshRenderer 合并为静态批处理渲染器。\r\n     * @param renders 要合并的 MeshRenderer 对象数组。\r\n     * @returns 由合并创建的 StaticBatchMeshRender 对象数组。\r\n     */\r\n    combine(renders: MeshRenderer[]) {\r\n        // todo 检测方式\r\n        for (const render of renders) {\r\n            let haveMatch = false;\r\n            for (const info of this.meshVertexDecSet) {\r\n                if (info.match(render)) {\r\n                    haveMatch = true;\r\n                    info.addElement(render);\r\n                }\r\n            }\r\n            if (!haveMatch) {\r\n                let info = StaticMeshMergeInfo.create(render);\r\n                info.addElement(render);\r\n                this.meshVertexDecSet.add(info);\r\n            }\r\n        }\r\n\r\n        let staticRenders: StaticBatchMeshRender[] = [];\r\n        for (const info of this.meshVertexDecSet) {\r\n            staticRenders.push(StaticBatchMeshRender.create(info));\r\n        }\r\n        this.meshVertexDecSet.clear();\r\n        return staticRenders;\r\n    }\r\n\r\n    /**\r\n     * @en Merges a single StaticMeshMergeInfo into a StaticBatchMeshRender.\r\n     * @param info The StaticMeshMergeInfo to be merged.\r\n     * @returns A new StaticBatchMeshRender created from the merge info.\r\n     * @zh 将单个 StaticMeshMergeInfo 合并为 StaticBatchMeshRender。\r\n     * @param info 要合并的 StaticMeshMergeInfo。\r\n     * @returns 从合并信息创建的新 StaticBatchMeshRender。\r\n     */\r\n    merge(info: StaticMeshMergeInfo) {\r\n        let staticMeshRender = StaticBatchMeshRender.create(info);\r\n        return staticMeshRender;\r\n    }\r\n\r\n}","import { Color } from \"../../maths/Color\";\r\n\r\n\t\r\n/**\r\n * @en TextMesh class used to create text mesh.\r\n * @zh TextMesh 类用于创建文本网格。\r\n */\r\n\texport class TextMesh {\r\n\t\tprivate _text:string;\r\n\t\tprivate _fontSize:number;\r\n\t\tprivate _color:Color;\r\n\t\t\r\n    \t/**\r\n    \t * @en The text of the TextMesh.\r\n    \t * @zh 文本网格的文本。\r\n         */\r\n\t\t get text():string {\r\n\t\t\treturn this._text;\r\n\t\t}\r\n\t\t\r\n\t\t set text(value:string) {\r\n\t\t\tthis._text = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @en The font size of the TextMesh.\r\n\t\t * @zh 字体尺寸。\r\n\t\t */\r\n\t\t get fontSize():number {\r\n\t\t\treturn this._fontSize;\r\n\t\t}\r\n\t\t\r\n\t\t set fontSize(value:number) {\r\n\t\t\tthis._fontSize = value;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @en The color of the TextMesh.\r\n\t\t * @zh 文本网格的颜色\r\n\t\t */\r\n\t\t get color():Color {\r\n\t\t\treturn this._color;\r\n\t\t}\r\n\t\t\r\n\t\t set color(value:Color) {\r\n\t\t\tthis._color = value;\r\n\t\t}\r\n\t\t\r\n\t\t/** @ignore */\r\n\t\tconstructor(){\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}