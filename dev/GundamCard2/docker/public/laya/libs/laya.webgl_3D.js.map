{"version":3,"names":["WebBaseRenderNode","_renderUpdatePre_StatUse","context3D","this","_updateMark","cameraUpdateMask","time","performance","now","_renderUpdatePreFun","call","_renderUpdatePreCall","Stat","renderPassStatArray","RenderPassStatisticsInfo","T_RenderPreUpdate","_renderUpdatePre","_calculateBoundingBox","_caculateBoundingBoxFun","_caculateBoundingBoxCall","bounds","boundsChange","_bounds","value","constructor","renderelements","_commonUniformMap","_worldParams","Vector4","lightmapDirtyFlag","lightmapScaleOffset","set_caculateBoundingBox","_ownerCalculateBoundingBox","set_renderUpdatePreCall","fun","_needRender","boundFrustum","intersects","setRenderelements","length","i","push","owner","setOneMaterial","index","mat","materialShaderData","shaderData","materialRenderQueue","renderQueue","subShader","shader","getSubShaderAt","materialId","_id","setLightmapScaleOffset","cloneTo","setCommonUniformMap","forEach","element","shadowCullPass","castShadow","enable","renderbitFlag","baseGeometryBounds","_tranform","transform","worldMatrix","_applyLightMapParams","shaderValues","lightmap","lightMap","setVector","RenderableSprite3D","LIGHTMAPSCALEOFFSET","_setInternalTexture","LIGHTMAP","lightmapColor","addDefine","SAHDERDEFINE_LIGHTMAP","lightmapDirection","LIGHTMAP_DIRECTION","SHADERDEFINE_LIGHTMAP_DIRECTIONAL","removeDefine","_applyLightProb","lightmapIndex","volumetricGI","updateMark","lightProbUpdateMark","applyRenderData","_applyReflection","probeReflection","reflectionMode","ReflectionProbeMode","off","probeReflectionUpdateMark","destroy","WebDirectLight","_shadowFourCascadeSplits","Vector3","_direction","setShadowFourCascadeSplits","setDirection","WebLightmap","WebMeshRenderNode","super","_renderUpdate","context","sceneModuleData","trans","setMatrix4x4","Sprite3D","WORLDMATRIX","x","getFrontFaceValue","WORLDINVERTFRONT","WebCameraNodeData","_projectViewMatrix","Matrix4x4","setProjectionViewMatrix","WebSceneNodeData","WebPointLight","WebReflectionProbe","_idCounter","_shCoefficients","_probePosition","_ambientColor","Color","bound","_ambientSH","setAmbientSH","setShCoefficients","v4","setProbePosition","setreflectionHDRParams","_reflectionHDRParams","setAmbientColor","data","boxProjection","Sprite3DRenderDeclaration","SHADERDEFINE_SPECCUBE_BOX_PROJECTION","setVector3","REFLECTIONCUBE_PROBEPOSITION","REFLECTIONCUBE_PROBEBOXMAX","getMax","REFLECTIONCUBE_PROBEBOXMIN","getMin","ambientMode","AmbientMode","SolidColor","SHADERDEFINE_GI_LEGACYIBL","SHADERDEFINE_GI_IBL","setColor","AMBIENTCOLOR","iblTex","IBLTEX","setNumber","IBLROUGHNESSLEVEL","maxMipmapLevel","iblTexRGBD","SHADERDEFINE_IBL_RGBD","setBuffer","AMBIENTSH","AMBIENTINTENSITY","ambientIntensity","REFLECTIONINTENSITY","reflectionIntensity","WebSimpleSkinRenderNode","_simpleAnimatorParams","setSimpleAnimatorParams","SimpleSkinnedMeshSprite3D","SIMPLE_SIMPLEANIMATORPARAMS","worldMat","worldParams","WebSkinRenderNode","_bones","setRootBoneTransfom","_cacheRootBone","setOwnerTransform","_owner","setCacheMesh","cacheMesh","_cacheMesh","_skinnedDataLoopMarks","Uint32Array","_inverseBindPoses","setBones","setSkinnedData","_skinnedData","computeSkinnedData","bindPoses","pathMarks","_skinnedMatrixCaches","n","subMeshCount","subMeshBoneIndices","getSubMesh","_boneIndicesList","subData","j","m","boneIndices","_computeSubSkinnedData","matrixCaches","k","q","loopCount","c","preData","subMeshIndex","batchIndex","srcIndex","batchBoneIndex","dstIndex","d","bone","Utils3D","_mulMatrixArray","elements","DEFAULT","WebSpotLight","getWorldMatrix","out","position","quaterian","rotation","createAffineTransformation","ONE","WebVolumetricGI","_probeCounts","_probeStep","_params","Bounds","setParams","setProbeCounts","setProbeStep","SHADERDEFINE_VOLUMETRICGI","VOLUMETRICGI_PROBECOUNTS","VOLUMETRICGI_PROBESTEPS","VOLUMETRICGI_PROBESTARTPOS","VOLUMETRICGI_PROBEPARAMS","VOLUMETRICGI_IRRADIANCE","irradiance","VOLUMETRICGI_DISTANCE","distance","intensity","Web3DRenderModuleFactory","createSimpleSkinRenderNode","createTransform","Transform3D","createBounds","min","max","BoundsImpl","createVolumetricGI","createReflectionProbe","createLightmapData","createDirectLight","createSpotLight","createPointLight","createCameraModuleData","createSceneModuleData","createBaseRenderNode","renderNode","enableRenderPassStatArray","createMeshRenderNode","createSkinRenderNode","Laya","addBeforeInitCallback","Laya3DRender","Render3DModuleDataFactory","RenderCullUtil","cullByCameraCullInfo","cameraCullInfo","list","count","opaqueList","transparent","cullMask","cullingMask","staticMask","render","canPass","layer","frustumCulling","useOcclusionCulling","distanceForSort","distanceSquared","_imp","getCenter","len","addRenderElement","cullDirectLightShadow","shadowCullInfo","clear","FrustumCulling","cullingRenderBounds","cullSpotShadow","RenderPassUtil","renderCmd","cmds","runCMDList","_renderCMDs","recoverRenderContext3D","renderTarget","setViewPort","contextViewPortCache","setScissor","contextScissorCache","setRenderTarget","RenderClearFlag","Nothing","Viewport","RenderQuickSort","sort","isTransparent","left","right","elementArray","_quickSort","_partitionRenderObject","leftIndex","pivot","Math","floor","_compare","temp","sortingFudge","RenderListQueue","_elements","isTransParent","FastSinglelist","_isTransparent","_batch","Render3DPassFactory","createInstanceBatch","renderelement","add","_batchQueue","batch","drawRenderElementList","clearRenderData","fill","WebGLRenderElement3D","_shaderInstances","_addShaderInstance","_clearShaderInstance","_preUpdatePre","_compileShader","_invertFront","_getInvertFront","_a","_isFrontFaceInvert","_render","forceInvertFace","invertY","sceneShaderData","sceneData","cameraShaderData","cameraData","isRender","passes","shaderIns","complete","switchShader","bind","switchUpdateMark","_uploadMark","uploadScene","_uploadScene","uploadUniforms","_sceneUniformParamsMap","renderShaderData","uploadSprite3D","_uploadRender","_spriteUniformParamsMap","uploadCamera","_uploadCameraShaderValue","_cameraUniformParamsMap","uploadMaterial","_uploadMaterial","_materialUniformParamsMap","globalShaderData","uploadRenderStateBlendDepth","uploadRenderStateFrontFace","drawGeometry","_passes","pass","pipelineMode","comDef","_compileDefine","_defineDatas","_globalConfigShaderData","addDefineDatas","getDefineData","nodeCommonMap","withCompile","WebGLEngine","instance","getDrawContext","drawGeometryElement","geometry","WebDefineDatas","WebGLInstanceRenderBatch","_batchOpaqueMarks","_updateCountMark","recoverList","getBatchMark","invertFrontFaceFlag","receiveShadowFlag","receiveShadow","geometryFlag","renderId","giId","BatchMark","Config3D","enableDynamicBatch","LayaGL","renderEngine","getCapable","RenderCapable","DrawElement_Instance","elementCount","maxInstanceCount","MaxInstanceCount","canDynamicBatch","_enableInstancing","instanceMark","instanceIndex","indexInList","batched","instanceElements","instanceElementList","originElement","instanceRenderElement","createInstanceRenderElement3D","setGeometry","_invertFrontFace","recoverData","recover","WebGLInstanceRenderElement3D","getInstanceBufferState","renderType","spriteDefine","stateinfo","_instanceBufferStateMap","get","state","WebGLBufferState","vertexArray","bufferState","_vertexBuffers","slice","worldMatVertex","WebGLVertexBuffer","BufferTargetType","ARRAY_BUFFER","BufferUsage","Dynamic","setDataLength","vertexDeclaration","VertexMesh","instanceWorldMatrixDeclaration","instanceBuffer","worldInstanceVB","BaseRenderType","MeshRender","has","MeshSprite3DShaderDeclaration","SHADERDEFINE_UV1","instanceLightMapVertexBuffer","instanceLightMapScaleOffsetDeclaration","lightmapScaleOffsetVB","SimpleSkinRender","instanceSimpleAnimatorBuffer","instanceSimpleAnimatorDeclaration","simpleAnimatorVB","applyState","_bindedIndexBuffer","set","create","_pool","pop","_instanceBufferCreate","array","_bufferPool","Float32Array","_updateData","_updateDataNum","drawCount","updateNums","addUpdateData","vb","elementLength","SHADERDEFINE_GPU_INSTANCE","_updateInstanceData","renderNodeType","worldMatrixData","_instanceStateInfo","insBatches","instanceCount","hasDefine","lightMapData","offset","y","z","w","simpleAnimatorData","simpleAnimatorParams","getVector","WebGLRenderGeometryElement","mode","drawType","DrawType","DrawElementInstance","buffer","orphanStorage","setData","Map","WebGLDirectLightShadowRP","shadowCasterCommanBuffer","_shadowCasterCommanBuffer","light","_light","lightWorld","TEMPMatrix0","lightWorldE","lightUp","_lightup","lightSide","_lightSide","lightForward","_lightForward","createFromQuaternion","setValue","atlasResolution","shadowResolution","cascadesMode","shadowCastMode","shadowCascadesMode","ShadowCascadesMode","NoCascades","_cascadeCount","_shadowTileResolution","_shadowMapWidth","_shadowMapHeight","TwoCascades","shadowTileResolution","ShadowUtils","getMaxTileResolutionInAtlas","_cascadesSplitDistance","Array","_maxCascades","_shadowMatrices","_splitBoundSpheres","_shadowSliceDatas","ShadowSliceData","_shadowMapSize","_shadowBias","_renderQueue","_frustumPlanes","Plane","_shadowCullInfo","ShadowCullInfo","update","splitDistance","frustumPlanes","cameraNear","camera","nearplane","shadowFar","farplane","shadowDistance","shadowMatrices","boundSpheres","getCascadesSplitDistance","shadowTwoCascadeSplits","fieldOfView","MathUtils3D","Deg2Rad","aspectRatio","getCameraFrustumPlanes","forward","_tempVector3","getForward","normalize","sliceData","sphereCenterZ","getBoundSphereByFrustum","splitBoundSphere","getDirectionLightShadowCullPlanes","getDirectionalLightMatrices","shadowNearPlane","applySliceTransform","prepareShadowReceiverShaderValues","shadowMap","destTarget","Depth","setClearData","BLACK","originCameraData","getShadowBias","projectionMatrix","resolution","_setupShadowCasterShaderValues","cullPlanes","cullPlaneCount","cullSphere","direction","T_ShadowMapCull","cameraShaderValue","offsetX","offsetY","_tempViewport","tempVec4","cameraUBO","cameraUBData","setDataByUniformBufferData","shadowMapDrawCall","_applyCasterPassCommandBuffer","_applyRenderData","scene","Scene3DShaderDeclaration","SHADERDEFINE_SHADOW_CASCADE","shadowMode","ShadowMode","Hard","SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW","SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH","SoftLow","SoftHigh","ShadowCasterPass","SHADOW_MATRICES","SHADOW_MAP_SIZE","SHADOW_SPLIT_SPHERES","_apply","shadowProjectionMatrix","texelSize","depthBias","shadowDepthBias","normalBias","shadowNormalBias","kernelRadius","shadowSliceData","LightParam","shadowBias","SHADOW_BIAS","SHADOW_LIGHT_DIRECTION","cameraSV","BaseCamera","VIEWMATRIX","viewMatrix","PROJECTMATRIX","VIEWPROJECTMATRIX","viewProjectMatrix","WebGLForwardAddClusterRP","enableOpaqueTexture","_enableOpaqueTexture","_viewPort","_scissor","blitOpaqueBuffer","CommandBuffer","CameraCullInfo","_zBufferParams","_defaultNormalDepthColor","clearColor","depthPipelineMode","depthNormalPipelineMode","setCameraCullInfo","_transform","setBeforeForwardCmds","beforeForwardCmds","setBeforeSkyboxCmds","beforeSkyboxCmds","setBeforeTransparentCmds","beforeTransparentCmds","T_CameraMainCull","depthTextureMode","DepthTextureMode","_renderDepthPass","DepthNormals","_renderDepthNormalPass","T_Render_CameraOtherDest","_context3DViewPortCatch","_contextScissorPortCatch","_mainPass","viewport","shadervalue","DepthPass","DEPTHPASS","DEFINE_SHADOW_BIAS","ZERO","width","height","depthTarget","depthCastDrawCall","far","near","DEPTHZBUFFERPARAMS","_transparentListRender","transDrawCall","_opaqueListRender","opaqueDrawCall","depthNormalTarget","opaqueTexturePass","commanbuffer","_rendercmd","_recoverRenderContext3D","clearFlag","enableOpaque","T_Render_OpaqueRender","skyRenderNode","skyRenderElement","drawRenderElementOne","T_Render_TransparentRender","T_Render_CameraEventCMD","cacheViewPor","cacheScissor","WebGLSpotLightShadowRP","_shadowResolution","_lightWorldMatrix","_lightPos","_spotAngle","spotAngle","_spotRange","spotRange","_shadowStrength","shadowStrength","_shadowSpotMapSize","_shadowSpotMatrices","_shadowSpotData","ShadowSpotData","shadowSpotData","_getSpotLightShadowData","_getShadowBias","shadowSpotMatrices","shadowMapSize","spotWorldMatrix","projectMatrix","BoundFrustum","invert","createPerspective","multiply","matrix","tan","_shadowMode","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH","SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW","SHADOW_SPOTMATRICES","SHADOW_SPOTMAP_SIZE","WebGLForwardAddRP","shadowCastPass","enableDirectLightShadow","enableSpotLightShadowPass","enablePostProcess","directLightShadowPass","spotLightShadowPass","shadowParams","renderpass","finalize","setBeforeImageEffect","_beforeImageEffectCMDS","setAfterEventCmd","_afterAllRenderCMDS","offsetScale","WebGLRender3DProcess","initRenderpass","renderRT","_getRenderTexture","clearConst","CameraClearFlags","Sky","skyRenderer","_isAvailable","stencilFlag","depthStencilFormat","RenderTargetFormat","DEPTHSTENCIL_24_8","Stencil","DepthOnly","ColorOnly","clearValue","_linearClearColor","gammaCorrection","_renderDataModule","_renderTarget","needInternalRT","_needInternalRenderTexture","scissor","enableTransparent","enableCMD","enableCameraCMD","_cameraEventCommandBuffer","CameraEventFlags","BeforeSkyBox","BeforeForwardOpaque","BeforeTransparent","BeforeImageEffect","AfterEveryThing","_baseRenderNode","RenderContext3D","_instance","configPipeLineMode","enableShadow","Scene3D","_ShadowMapupdateFrequency","mainDirectionLight","_mainDirectionLight","needDirectionShadow","None","_dataModule","directionShadowMap","ILaya3D","_shadowCasterPass","getDirectLightShadowMap","_shaderValues","setTexture","SHADOW_MAP","mainSpotLight","_mainSpotLight","needSpotShadow","spotShadowMap","getSpotLightShadowPassData","SHADOW_SPOTMAP","SHADOW_PARAMS","needBlitOpaque","opaquePass","opaqueTexture","_opaqueTexture","blitScreenQuad","enablePostprocess","postProcess","effects","_context","command","_offScreenRenderTexture","dst","normalizedViewport","renderDepth","depthMode","cameraDepthTextureMode","canblitDepth","_internalRenderTexture","depthStencilTexture","depthTexture","_cacheDepthTexture","Camera","depthPass","_depthTexture","DEPTHTEXTURE","_setupDepthModeShaderValue","getTarget","depthTextureFormat","depthNormalTexture","DEPTHNORMALSTEXTURE","fowardRender","renderList","sceneRenderableManager","renderBaselist","renderFowarAddCameraPass","cleanUp","SHADERDEFINE_SHADOW","SHADERDEFINE_SHADOW_SPOT","T_Render_ShadowPassMode","_renderPostProcess","T_Render_PostProcess","postprocessCMD","WebGLDrawNodeCMDData","DrawNodeCMDData","node","_node","destShaderData","_destShaderData","destSubShader","_destSubShader","_subMeshIndex","type","RenderCMDType","DrawNode","apply","oriSubShader","oriMatShaderData","WebGLBlitQuadCMDData","BlitQuadCMDData","dest","_dest","_viewport","source","_source","_sourceTexelSize","_offsetScale","_element","Blit","Command","SCREENTEXTURE_ID","SCREENTEXTUREOFFSETSCALE_ID","MAINTEXTURE_TEXELSIZE_ID","WebGLDrawElementCMDData","DrawElementCMDData","DrawElement","_elemets","WebGLSetViewportCMD","SetViewportCMD","ChangeViewPort","WebGLSetRenderTargetCMD","SetRenderTargetCMD","rt","_rt","_clearFlag","clearColorValue","_clearColorValue","clearDepthValue","_clearDepthValue","clearStencilValue","_clearStencilValue","ChangeRenderTarget","_textures","WebGLSetRenderData","SetRenderDataCMD","dataType","_dataType","propertyID","_propertyID","_value","ShaderDataType","Int","Float","Bool","data_number","data_mat","data_Color","Texture2D","data_texture","data_v4","Vector2","data_v2","data_v3","Buffer","data_Buffer","ChangeData","setInt","setBool","setVector2","WebGLSetShaderDefine","SetShaderDefineCMD","define","_define","_add","ChangeShaderDefine","WebGLRenderContext3D","_sceneData","_cameraData","_sceneModuleData","cameraModuleData","_cameraModuleData","_globalShaderData","_needStart","sceneUpdataMask","_sceneUpdataMask","_cameraUpdateMask","_pipelineMode","_invertY","_clearColor","Shader3D","_configDefineValues","runOneCMD","cmd","color","depth","stencil","_clearDepth","_clearStencil","_bindRenderTarget","_start","drawRenderElementList_StatUse","T_OtherRender","T_OnlyMeshRender","T_OnlyShurikenParticleRender","T_OnlySkinnedMeshRender","drawRenderElementOne_StatUse","textureContext","bindRenderTarget","bindoutScreenTarget","scissorTest","clearRenderTexture","WebGLSkinRenderElement3D","drawParams","skinnedData","subSkinnedDatas","uploadCustomUniform","SkinnedMeshSprite3D","BONES","drawElements","_glmode","_glindexFormat","WebGL3DRenderPassFactory","createSetRenderDataCMD","createSetShaderDefineCMD","createDrawNodeCMDData","createBlitQuadCMDData","createDrawElementCMDData","createSetViewportCMD","createSetRenderTargetCMD","createSceneRenderManager","SceneRenderManagerOBJ","createSkinRenderElement","createRenderContext3D","createRenderElement3D","createRender3DProcess","_opaqueList","_transparent","_clearRenderList","_cacheViewPortAndScissor","_opaqueTexturePass","addUpdateBuffer","_vertexBuffer3D","getUpdateData","_deviceBuffer"],"sources":["../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebBaseRenderNode.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebDirectLight.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebLightmap.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebMeshRenderNode.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebModuleData.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebPointLight.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebReflectionProb.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebSimpleSkinRenderNode.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebSkinRenderNode.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebSpotLight.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/WebVolumetricGI.ts","../../src/layaAir/laya/RenderDriver/RenderModuleData/WebModuleData/3D/Web3DRenderModuleFactory.ts","../../src/layaAir/laya/RenderDriver/DriverCommon/RenderCullUtil.ts","../../src/layaAir/laya/RenderDriver/DriverCommon/RenderPassUtil.ts","../../src/layaAir/laya/RenderDriver/DriverCommon/RenderQuickSort.ts","../../src/layaAir/laya/RenderDriver/DriverCommon/RenderListQueue.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLRenderElement3D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLInstanceRenderBatch.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLInstanceRenderElement3D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLDirectLightShadowRP.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLForwardAddClusterRP.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLSpotLightShadowRP.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLForwardAddRP.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLRender3DProcess.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLRenderCMD/WebGLRenderCMD.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLRenderContext3D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGLSkinRenderElement3D.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/WebGL3DRenderPassFactory.ts","../../src/layaAir/laya/RenderDriver/DriverCommon/ForwardAddClusterRP.ts","../../src/layaAir/laya/RenderDriver/WebGLDriver/3DRenderPass/InstanceRenderElementOBJ.ts"],"sourcesContent":["\r\nimport { RenderPassStatisticsInfo } from \"../../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { ReflectionProbeMode } from \"../../../../d3/component/Volume/reflectionProbe/ReflectionProbe\";\r\nimport { RenderableSprite3D } from \"../../../../d3/core/RenderableSprite3D\";\r\nimport { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { IrradianceMode } from \"../../../../d3/core/render/BaseRender\";\r\nimport { BoundFrustum } from \"../../../../d3/math/BoundFrustum\";\r\nimport { Bounds } from \"../../../../d3/math/Bounds\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { Material } from \"../../../../resource/Material\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { IRenderElement3D, IRenderContext3D } from \"../../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ShaderData } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { IBaseRenderNode } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { WebLightmap } from \"./WebLightmap\";\r\nimport { WebReflectionProbe } from \"./WebReflectionProb\";\r\nimport { WebVolumetricGI } from \"./WebVolumetricGI\";\r\n\r\n\r\n\r\nexport class WebBaseRenderNode implements IBaseRenderNode {\r\n    renderNodeType: number;\r\n    boundsChange: boolean;\r\n    distanceForSort: number;\r\n    sortingFudge: number;\r\n    castShadow: boolean;\r\n    receiveShadow: boolean;\r\n    enable: boolean;\r\n    renderbitFlag: number;\r\n    layer: number;\r\n    customCull: boolean;//TODO\r\n    customCullResoult: boolean;//TODO\r\n    staticMask: number;\r\n    lightmapIndex: number;\r\n    lightmapDirtyFlag: number;\r\n    probeReflectionUpdateMark: number;\r\n    reflectionMode: number;\r\n    lightProbUpdateMark: number;\r\n    irradientMode: IrradianceMode;\r\n    renderelements: IRenderElement3D[];\r\n    lightmapScaleOffset: Vector4;\r\n    lightmap: WebLightmap;\r\n    probeReflection: WebReflectionProbe;\r\n    volumetricGI: WebVolumetricGI;\r\n    shaderData: ShaderData;\r\n    baseGeometryBounds: Bounds;\r\n    transform: Transform3D;\r\n    _worldParams: Vector4;\r\n    _commonUniformMap: string[];\r\n    private _bounds: Bounds;\r\n    private _caculateBoundingBoxCall: any;\r\n    private _caculateBoundingBoxFun: Function;\r\n    private _renderUpdatePreCall: any;\r\n    private _renderUpdatePreFun: Function;\r\n    private _updateMark: number;\r\n\r\n    /**\r\n    * context3D:GLESRenderContext3D\r\n    * @internal\r\n    */\r\n    _renderUpdatePre_StatUse(context3D: IRenderContext3D): void {\r\n        if (this._updateMark == context3D.cameraUpdateMask)\r\n            return;\r\n        var time = performance.now();//T_RenderPreUpdate Stat\r\n        this._renderUpdatePreFun.call(this._renderUpdatePreCall, context3D);\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_RenderPreUpdate] += (performance.now() - time);//Stat\r\n        this._updateMark = context3D.cameraUpdateMask;\r\n    }\r\n\r\n    /**\r\n     * context3D:GLESRenderContext3D\r\n     * @internal\r\n     */\r\n    _renderUpdatePre(context3D: IRenderContext3D): void {\r\n        if (this._updateMark == context3D.cameraUpdateMask)\r\n            return;\r\n        this._renderUpdatePreFun.call(this._renderUpdatePreCall, context3D);\r\n        this._updateMark = context3D.cameraUpdateMask;\r\n    }\r\n\r\n    _calculateBoundingBox() {\r\n        this._caculateBoundingBoxFun.call(this._caculateBoundingBoxCall);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * get bounds\r\n     */\r\n    get bounds() {\r\n        if (this.boundsChange) {\r\n            this._calculateBoundingBox();\r\n            this.boundsChange = false;\r\n        }\r\n        return this._bounds;\r\n    }\r\n\r\n    set bounds(value: Bounds) {\r\n        this._bounds = value;\r\n    }\r\n\r\n    constructor() {\r\n        this.renderelements = [];\r\n        this._commonUniformMap = [];\r\n        this._worldParams = new Vector4(1, 0, 0, 0);\r\n        this.lightmapDirtyFlag = -1;\r\n        this.lightmapScaleOffset = new Vector4(1, 1, 0, 0);\r\n        this.set_caculateBoundingBox(this, this._ownerCalculateBoundingBox);\r\n    }\r\n\r\n    /**\r\n     * 设置更新数据\r\n     * @param call \r\n     * @param fun \r\n     */\r\n    set_renderUpdatePreCall(call: any, fun: any): void {\r\n        this._renderUpdatePreCall = call;\r\n        this._renderUpdatePreFun = fun;\r\n    }\r\n\r\n    /**\r\n     * 设置更新包围盒方法\r\n     * @param call \r\n     * @param fun \r\n     */\r\n    set_caculateBoundingBox(call: any, fun: any): void {\r\n        this._caculateBoundingBoxCall = call;\r\n        this._caculateBoundingBoxFun = fun;\r\n    }\r\n\r\n\r\n    /**\r\n     * 视锥检测包围盒\r\n     * @param boundFrustum \r\n     * @returns \r\n     */\r\n    _needRender(boundFrustum: BoundFrustum): boolean {\r\n        if (boundFrustum)\r\n            return boundFrustum.intersects(this.bounds);\r\n        else\r\n            return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * @param value :RenderElementObj\r\n     */\r\n    setRenderelements(value: IRenderElement3D[]): void {\r\n        this.renderelements.length = 0;\r\n        for (var i = 0; i < value.length; i++) {\r\n            this.renderelements.push(value[i]);\r\n            value[i].owner = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param index \r\n     * @param mat \r\n     * @returns \r\n     */\r\n    setOneMaterial(index: number, mat: Material): void {\r\n        if (!this.renderelements[index])\r\n            return;\r\n        this.renderelements[index].materialShaderData = mat.shaderData;\r\n        this.renderelements[index].materialRenderQueue = mat.renderQueue;\r\n        this.renderelements[index].subShader = mat.shader.getSubShaderAt(0);\r\n        this.renderelements[index].materialId = mat._id;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param value \r\n     */\r\n    setLightmapScaleOffset(value: Vector4) {\r\n        value && value.cloneTo(this.lightmapScaleOffset);\r\n    }\r\n\r\n    /**@internal */\r\n    setCommonUniformMap(value: string[]) {\r\n        this._commonUniformMap.length = 0;\r\n        value.forEach(element => {\r\n            this._commonUniformMap.push(element);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @returns \r\n     */\r\n    shadowCullPass(): boolean {\r\n        return this.castShadow && this.enable && (this.renderbitFlag == 0);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _ownerCalculateBoundingBox() {\r\n        this.baseGeometryBounds._tranform(this.transform.worldMatrix, this._bounds)\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 全局贴图\r\n     */\r\n    _applyLightMapParams(): void {\r\n        let shaderValues = this.shaderData;\r\n        if (this.lightmap) {\r\n            let lightMap = this.lightmap;\r\n            shaderValues.setVector(RenderableSprite3D.LIGHTMAPSCALEOFFSET, this.lightmapScaleOffset);\r\n            shaderValues._setInternalTexture(RenderableSprite3D.LIGHTMAP, lightMap.lightmapColor);\r\n            shaderValues.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            if (lightMap.lightmapDirection) {\r\n                shaderValues._setInternalTexture(RenderableSprite3D.LIGHTMAP_DIRECTION, lightMap.lightmapDirection);\r\n                shaderValues.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n            else {\r\n                shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n            }\r\n        } else {\r\n            shaderValues.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP);\r\n            shaderValues.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * apply lightProb\r\n    * @returns \r\n    */\r\n    _applyLightProb() {\r\n        if (this.lightmapIndex >= 0 || !this.volumetricGI) return;\r\n        if (this.volumetricGI.updateMark != this.lightProbUpdateMark) {\r\n            this.lightProbUpdateMark = this.volumetricGI.updateMark;\r\n            this.volumetricGI.applyRenderData(this.shaderData);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * apply reflection\r\n     * @returns \r\n     */\r\n    _applyReflection() {\r\n        if (!this.probeReflection || this.reflectionMode == ReflectionProbeMode.off) return;\r\n        if (this.probeReflection.updateMark != this.probeReflectionUpdateMark) {\r\n            this.probeReflectionUpdateMark = this.probeReflection.updateMark;\r\n            this.probeReflection.applyRenderData(this.shaderData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * destroy\r\n     */\r\n    destroy() {\r\n        this.renderelements.forEach(element => {\r\n            element.destroy();\r\n        });\r\n        this.baseGeometryBounds = null;\r\n        this.transform = null;\r\n        this.lightmapScaleOffset = null;\r\n        this.lightmap = null;\r\n        this.probeReflection = null;\r\n        this.volumetricGI = null;\r\n        this.renderelements.length = 0;\r\n        this.renderelements = null;\r\n        this._commonUniformMap.length = 0;\r\n        this._commonUniformMap = null;\r\n    }\r\n\r\n}","import { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { ShadowCascadesMode } from \"../../../../d3/core/light/ShadowCascadesMode\";\r\nimport { ShadowMode } from \"../../../../d3/core/light/ShadowMode\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { IDirectLightData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\n\r\nexport class WebDirectLight implements IDirectLightData {\r\n    shadowNearPlane: number;\r\n    shadowCascadesMode: ShadowCascadesMode;\r\n    transform: Transform3D;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowTwoCascadeSplits: number;\r\n\r\n    _shadowFourCascadeSplits: Vector3;\r\n    _direction: Vector3;\r\n\r\n    constructor() {\r\n        this._shadowFourCascadeSplits = new Vector3();\r\n        this._direction = new Vector3();\r\n    }\r\n\r\n    setShadowFourCascadeSplits(value: Vector3): void {\r\n        value && value.cloneTo(this._shadowFourCascadeSplits);\r\n    }\r\n\r\n    setDirection(value: Vector3): void {\r\n        value && value.cloneTo(this._direction)\r\n    }\r\n}","import { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ILightMapData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\nexport class WebLightmap implements ILightMapData {\r\n    /**@internal */\r\n    lightmapColor: InternalTexture;\r\n    /**@internal */\r\n    lightmapDirection: InternalTexture;\r\n    /**@internal */\r\n    destroy(): void {\r\n        this.lightmapColor = null;\r\n        this.lightmapDirection = null;\r\n    }\r\n}","import { Sprite3D } from \"../../../../d3/core/Sprite3D\";\r\nimport { IRenderContext3D } from \"../../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { IMeshRenderNode } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { WebBaseRenderNode } from \"./WebBaseRenderNode\";\r\n\r\n\r\nexport class WebMeshRenderNode extends WebBaseRenderNode implements IMeshRenderNode {\r\n    constructor() {\r\n        super();\r\n        this.set_renderUpdatePreCall(this, this._renderUpdate);\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _renderUpdate(context: IRenderContext3D): void {\r\n        if (context.sceneModuleData.lightmapDirtyFlag != this.lightmapDirtyFlag) {\r\n            this._applyLightMapParams();\r\n            this.lightmapDirtyFlag = context.sceneModuleData.lightmapDirtyFlag;\r\n        }\r\n        this._applyReflection();\r\n        this._applyLightProb();\r\n        let trans = this.transform;\r\n        this.shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX, trans.worldMatrix);\r\n        this._worldParams.x = trans.getFrontFaceValue();\r\n        this.shaderData.setVector(Sprite3D.WORLDINVERTFRONT, this._worldParams);\r\n    }\r\n\r\n}","import { ShaderPass } from \"../../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { IShaderInstance } from \"../../../DriverDesign/RenderDevice/IShaderInstance\";\r\nimport { ICameraNodeData, ISceneNodeData } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { RenderState } from \"../../Design/RenderState\";\r\nimport { WebDefineDatas } from \"../WebDefineDatas\";\r\n\r\n\r\n\r\nexport class WebCameraNodeData implements ICameraNodeData {\r\n    transform: Transform3D;\r\n    farplane: number;\r\n    nearplane: number;\r\n    fieldOfView: number;\r\n    aspectRatio: number;\r\n    _projectViewMatrix: Matrix4x4;\r\n    constructor() {\r\n        this._projectViewMatrix = new Matrix4x4();\r\n    }\r\n    setProjectionViewMatrix(value: Matrix4x4): void {\r\n        value && value.cloneTo(this._projectViewMatrix);\r\n    }\r\n}\r\n\r\nexport class WebSceneNodeData implements ISceneNodeData {\r\n    lightmapDirtyFlag: number;\r\n}\r\n\r\n\r\n\r\n","import { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { ShadowMode } from \"../../../../d3/core/light/ShadowMode\";\r\nimport { IPointLightData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\nexport class WebPointLight implements IPointLightData {\r\n    transform: Transform3D;\r\n    range: number;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowNearPlane: number;\r\n\r\n}","import { RenderableSprite3D } from \"../../../../d3/core/RenderableSprite3D\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../../d3/core/render/Sprite3DRenderDeclaration\";\r\nimport { AmbientMode } from \"../../../../d3/core/scene/AmbientMode\";\r\nimport { Bounds } from \"../../../../d3/math/Bounds\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ShaderData } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { IReflectionProbeData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\n\r\n\r\nexport class WebReflectionProbe implements IReflectionProbeData {\r\n\r\n    private static _idCounter: number = 0;\r\n\r\n    /** @internal */\r\n    _id: number = ++WebReflectionProbe._idCounter;\r\n\r\n    /**@internal */\r\n    boxProjection: boolean;\r\n    /**@internal */\r\n    bound: Bounds;\r\n    /**@internal */\r\n    ambientMode: AmbientMode;\r\n\r\n    /**@internal */\r\n    ambientIntensity: number;\r\n    /**@internal */\r\n    reflectionIntensity: number;\r\n    /**@internal */\r\n    reflectionTexture: InternalTexture;\r\n    /**@internal */\r\n    iblTex: InternalTexture;\r\n    /**@internal */\r\n    updateMark: number;\r\n    /**@internal */\r\n    iblTexRGBD: boolean;\r\n    /**@internal */\r\n    private _reflectionHDRParams: Vector4\r\n    /**@internal */\r\n    private _shCoefficients: Vector4[];\r\n    /**@internal */\r\n    private _probePosition: Vector3;\r\n    /**@internal */\r\n    private _ambientColor: Color;\r\n    /**@internal */\r\n    private _ambientSH: Float32Array;\r\n    /**@internal */\r\n    constructor() {\r\n        this._shCoefficients = [];\r\n        this._probePosition = new Vector3();\r\n        this._ambientColor = new Color();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    destroy(): void {\r\n        this.bound = null;\r\n        delete this._shCoefficients;\r\n        delete this._ambientSH;\r\n\r\n    }\r\n    /**@internal */\r\n    setAmbientSH(value: Float32Array): void {\r\n        this._ambientSH = value;\r\n    }\r\n    /**@internal */\r\n    setShCoefficients(value: Vector4[]): void {\r\n        this._shCoefficients.length = 0;\r\n        value.forEach(element => {\r\n            var v4 = new Vector4();\r\n            element.cloneTo(v4);\r\n            this._shCoefficients.push(v4);\r\n        });\r\n    }\r\n    /**@internal */\r\n    setProbePosition(value: Vector3): void {\r\n        value && value.cloneTo(this._probePosition);\r\n    }\r\n    /**@internal */\r\n    setreflectionHDRParams(value: Vector4): void {\r\n        value && value.cloneTo(this._reflectionHDRParams);\r\n    }\r\n    /**@internal */\r\n    setAmbientColor(value: Color): void {\r\n        value && value.cloneTo(this._ambientColor);\r\n    }\r\n    /**@internal */\r\n    applyRenderData(data: ShaderData): void {\r\n        //boxProjection\r\n        if (!this.boxProjection) {\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n        } else {\r\n            data.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION);\r\n            data.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION, this._probePosition);\r\n            data.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX, this.bound.getMax());\r\n            data.setVector3(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN, this.bound.getMin());\r\n        }\r\n        if (this.ambientMode == AmbientMode.SolidColor) {\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n            data.setColor(RenderableSprite3D.AMBIENTCOLOR, this._ambientColor);\r\n        } else if (this.iblTex && this._ambientSH) {\r\n            data.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n            if (this.iblTex) {\r\n                data._setInternalTexture(RenderableSprite3D.IBLTEX, this.iblTex);\r\n                data.setNumber(RenderableSprite3D.IBLROUGHNESSLEVEL, this.iblTex.maxMipmapLevel);\r\n            };\r\n            this.iblTexRGBD ? data.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD) : data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD);\r\n            this._ambientSH && data.setBuffer(RenderableSprite3D.AMBIENTSH, this._ambientSH);\r\n        } else {\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL);\r\n            data.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL);\r\n        }\r\n        data.setNumber(RenderableSprite3D.AMBIENTINTENSITY, this.ambientIntensity);\r\n        data.setNumber(RenderableSprite3D.REFLECTIONINTENSITY, this.reflectionIntensity);\r\n    }\r\n\r\n}","import { SimpleSkinnedMeshSprite3D } from \"../../../../d3/core/SimpleSkinnedMeshSprite3D\";\r\nimport { Sprite3D } from \"../../../../d3/core/Sprite3D\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { IRenderContext3D } from \"../../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ISimpleSkinRenderNode } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { WebBaseRenderNode } from \"./WebBaseRenderNode\";\r\n\r\nexport class WebSimpleSkinRenderNode extends WebBaseRenderNode implements ISimpleSkinRenderNode{\r\n    _simpleAnimatorParams: Vector4;\r\n\r\n    constructor() {\r\n        super();\r\n        this.set_renderUpdatePreCall(this, this._renderUpdate);\r\n        this._simpleAnimatorParams = new Vector4();\r\n    }\r\n\r\n    setSimpleAnimatorParams(value:Vector4){\r\n        value.cloneTo(this._simpleAnimatorParams);  \r\n        this.shaderData.setVector(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, this._simpleAnimatorParams);\r\n    }\r\n\r\n    _renderUpdate(context3D: IRenderContext3D): void {\r\n        let shaderData = this.shaderData;\r\n        //let \r\n        let worldMat = this.transform.worldMatrix;\r\n        let worldParams = this._worldParams;\r\n        worldParams.x = this.transform.getFrontFaceValue();\r\n        shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX, worldMat);\r\n        shaderData.setVector(Sprite3D.WORLDINVERTFRONT, worldParams);\r\n        this._applyLightProb();\r\n        this._applyReflection();\r\n        shaderData.setVector(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS, this._simpleAnimatorParams);\r\n    }\r\n}","import { Sprite3D } from \"../../../../d3/core/Sprite3D\";\r\nimport { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { Mesh, skinnedMatrixCache } from \"../../../../d3/resource/models/Mesh\";\r\nimport { Utils3D } from \"../../../../d3/utils/Utils3D\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { IRenderContext3D } from \"../../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { ISkinRenderNode } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { WebBaseRenderNode } from \"./WebBaseRenderNode\";\r\n\r\nexport class WebSkinRenderNode extends WebBaseRenderNode implements ISkinRenderNode {\r\n    constructor() {\r\n        super();\r\n        this.set_renderUpdatePreCall(this, this._renderUpdate);\r\n    }\r\n    /** @internal */\r\n    private _cacheRootBone: Transform3D;\r\n    /** @internal */\r\n    private _owner: Transform3D;\r\n    /** @internal */\r\n    private _cacheMesh: Mesh;\r\n    /** @internal */\r\n    private _skinnedData: any[];\r\n    /** @internal */\r\n    private _skinnedDataLoopMarks: Uint32Array;\r\n\r\n    /**@internal */\r\n    private _bones: Sprite3D[] = [];\r\n    setRootBoneTransfom(value: Sprite3D) {\r\n        this._cacheRootBone = value.transform;\r\n    }\r\n\r\n    setOwnerTransform(value: Sprite3D) {\r\n        this._owner = value.transform;\r\n    }\r\n\r\n    setCacheMesh(cacheMesh: Mesh) {\r\n        this._cacheMesh = cacheMesh;\r\n        this._skinnedDataLoopMarks = new Uint32Array(cacheMesh._inverseBindPoses.length);\r\n    }\r\n\r\n    setBones(value: Sprite3D[]) {\r\n        this._bones = value;\r\n    }\r\n\r\n    setSkinnedData(value: any[]) {\r\n        this._skinnedData = value;\r\n    }\r\n\r\n    /**\r\n     * 计算动画数据\r\n     */\r\n    computeSkinnedData(): void {\r\n        //TODO\r\n        var bindPoses: Matrix4x4[] = this._cacheMesh._inverseBindPoses;\r\n        var pathMarks: skinnedMatrixCache[] = this._cacheMesh._skinnedMatrixCaches;\r\n        for (var i: number = 0, n: number = this._cacheMesh.subMeshCount; i < n; i++) {\r\n            var subMeshBoneIndices: Uint16Array[] = ((this._cacheMesh.getSubMesh(i)))._boneIndicesList;\r\n            var subData: Float32Array[] = this._skinnedData[i];\r\n            for (var j: number = 0, m: number = subMeshBoneIndices.length; j < m; j++) {\r\n                var boneIndices: Uint16Array = subMeshBoneIndices[j];\r\n                this._computeSubSkinnedData(bindPoses, boneIndices, subData[j], pathMarks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _computeSubSkinnedData(bindPoses: Matrix4x4[], boneIndices: Uint16Array, data: Float32Array, matrixCaches: skinnedMatrixCache[]): void {\r\n        for (let k: number = 0, q: number = boneIndices.length; k < q; k++) {\r\n            let index: number = boneIndices[k];\r\n            if (this._skinnedDataLoopMarks[index] === Stat.loopCount) {\r\n                let c: skinnedMatrixCache = matrixCaches[index];\r\n                let preData: Float32Array = this._skinnedData[c.subMeshIndex][c.batchIndex];\r\n                let srcIndex: number = c.batchBoneIndex * 16;\r\n                let dstIndex: number = k * 16;\r\n                for (let d: number = 0; d < 16; d++)\r\n                    data[dstIndex + d] = preData[srcIndex + d];\r\n            } else {\r\n                let bone = this._bones[index];\r\n                if (bone)\r\n                    Utils3D._mulMatrixArray(bone.transform.worldMatrix.elements, bindPoses[index].elements, 0, data, k * 16);\r\n                this._skinnedDataLoopMarks[index] = Stat.loopCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    _renderUpdate(context3D: IRenderContext3D): void {\r\n        let mat = this._owner.worldMatrix;\r\n        let worldParams = this._worldParams;\r\n        worldParams.x = this._owner.getFrontFaceValue();\r\n        if (this._cacheRootBone) {\r\n            mat = Matrix4x4.DEFAULT;\r\n            worldParams.x = 1;\r\n        }\r\n        this._applyLightProb();\r\n        this._applyReflection();\r\n        this.shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX, mat);\r\n        this.shaderData.setVector(Sprite3D.WORLDINVERTFRONT, worldParams);\r\n    }\r\n\r\n}","import { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { ShadowMode } from \"../../../../d3/core/light/ShadowMode\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { ISpotLightData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\nexport class WebSpotLight implements ISpotLightData {\r\n    transform: Transform3D;\r\n    shadowResolution: number;\r\n    shadowDistance: number;\r\n    shadowMode: ShadowMode;\r\n    shadowStrength: number;\r\n    shadowDepthBias: number;\r\n    shadowNormalBias: number;\r\n    shadowNearPlane: number;\r\n    spotRange: number;\r\n    spotAngle: number;\r\n    _direction: Vector3;\r\n    setDirection(value: Vector3): void {\r\n        value.cloneTo(this._direction);\r\n    }\r\n\r\n    getWorldMatrix(out: Matrix4x4) {\r\n        var position = this.transform.position;\r\n        var quaterian = this.transform.rotation;\r\n        Matrix4x4.createAffineTransformation(position, quaterian, Vector3.ONE, out);\r\n        return out;\r\n    }\r\n\r\n}","\r\nimport { RenderableSprite3D } from \"../../../../d3/core/RenderableSprite3D\";\r\nimport { Sprite3DRenderDeclaration } from \"../../../../d3/core/render/Sprite3DRenderDeclaration\";\r\nimport { Bounds } from \"../../../../d3/math/Bounds\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ShaderData } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { IVolumetricGIData } from \"../../Design/3D/I3DRenderModuleData\";\r\n\r\n\r\nexport class WebVolumetricGI implements IVolumetricGIData {\r\n\r\n    private static _idCounter: number = 0;\r\n\r\n    _id: number = ++WebVolumetricGI._idCounter;\r\n\r\n    private _probeCounts: Vector3 = new Vector3();\r\n    private _probeStep: Vector3 = new Vector3();\r\n    irradiance: InternalTexture;\r\n    distance: InternalTexture;\r\n    bound: Bounds;\r\n    intensity: number;\r\n    updateMark: number;\r\n    /**\r\n     * @internal\r\n     * x: irradiance probe texel size\r\n     * y: distance probe texel size\r\n     * z: normalBias\r\n     * w: viewBias\r\n     */\r\n    private _params: Vector4 = new Vector4();\r\n\r\n    constructor() {\r\n        this._params = new Vector4();\r\n        this.bound = new Bounds();\r\n    }\r\n    setParams(value: Vector4): void {\r\n        value.cloneTo(this._params)\r\n    }\r\n    setProbeCounts(value: Vector3): void {\r\n        value.cloneTo(this._probeCounts);\r\n    }\r\n\r\n    setProbeStep(value: Vector3): void {\r\n        value.cloneTo(this._probeStep);\r\n    }\r\n\r\n    applyRenderData(data: ShaderData): void {\r\n        data.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI);\r\n        data.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS, this._probeCounts);\r\n        data.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBESTEPS, this._probeStep);\r\n        data.setVector3(RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS, this.bound.getMin());\r\n        data.setVector(RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS, this._params);\r\n        data._setInternalTexture(RenderableSprite3D.VOLUMETRICGI_IRRADIANCE, this.irradiance);\r\n        data._setInternalTexture(RenderableSprite3D.VOLUMETRICGI_DISTANCE, this.distance);\r\n        data.setNumber(RenderableSprite3D.AMBIENTINTENSITY, this.intensity);\r\n    }\r\n}","import { stat } from \"fs\";\r\nimport { Laya } from \"../../../../../Laya\";\r\nimport { Laya3DRender } from \"../../../../d3/RenderObjs/Laya3DRender\";\r\nimport { Sprite3D } from \"../../../../d3/core/Sprite3D\";\r\nimport { Transform3D } from \"../../../../d3/core/Transform3D\";\r\nimport { BoundsImpl } from \"../../../../d3/math/BoundsImpl\";\r\nimport { LayaGL } from \"../../../../layagl/LayaGL\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Stat } from \"../../../../utils/Stat\";\r\nimport { IPointLightData, ISimpleSkinRenderNode, ISkinRenderNode } from \"../../Design/3D/I3DRenderModuleData\";\r\nimport { I3DRenderModuleFactory } from \"../../Design/3D/I3DRenderModuleFactory\";\r\nimport { WebBaseRenderNode } from \"./WebBaseRenderNode\";\r\nimport { WebDirectLight } from \"./WebDirectLight\";\r\nimport { WebLightmap } from \"./WebLightmap\";\r\nimport { WebMeshRenderNode } from \"./WebMeshRenderNode\";\r\nimport { WebCameraNodeData, WebSceneNodeData } from \"./WebModuleData\";\r\nimport { WebPointLight } from \"./WebPointLight\";\r\nimport { WebReflectionProbe } from \"./WebReflectionProb\";\r\nimport { WebSimpleSkinRenderNode } from \"./WebSimpleSkinRenderNode\";\r\nimport { WebSkinRenderNode } from \"./WebSkinRenderNode\";\r\nimport { WebSpotLight } from \"./WebSpotLight\";\r\nimport { WebVolumetricGI } from \"./WebVolumetricGI\";\r\n\r\nexport class Web3DRenderModuleFactory implements I3DRenderModuleFactory {\r\n  createSimpleSkinRenderNode(): ISimpleSkinRenderNode {\r\n    return new WebSimpleSkinRenderNode();\r\n  }\r\n\r\n  createTransform(owner: Sprite3D): Transform3D {\r\n    return new Transform3D(owner);\r\n  }\r\n\r\n  createBounds(min: Vector3, max: Vector3): BoundsImpl {\r\n    return new BoundsImpl(min, max);\r\n  }\r\n\r\n  createVolumetricGI(): WebVolumetricGI {\r\n    return new WebVolumetricGI();\r\n  }\r\n\r\n  createReflectionProbe(): WebReflectionProbe {\r\n    return new WebReflectionProbe();\r\n  }\r\n\r\n  createLightmapData(): WebLightmap {\r\n    return new WebLightmap();\r\n  }\r\n\r\n  createDirectLight(): WebDirectLight {\r\n    return new WebDirectLight();\r\n  }\r\n\r\n  createSpotLight(): WebSpotLight {\r\n    return new WebSpotLight();\r\n  }\r\n\r\n  createPointLight(): IPointLightData {\r\n    return new WebPointLight();\r\n  }\r\n\r\n  createCameraModuleData(): WebCameraNodeData {\r\n    return new WebCameraNodeData();\r\n  }\r\n\r\n  createSceneModuleData(): WebSceneNodeData {\r\n    return new WebSceneNodeData();\r\n  }\r\n\r\n\r\n\r\n  createBaseRenderNode(): WebBaseRenderNode {\r\n\r\n    let renderNode = new WebBaseRenderNode();\r\n    if (Stat.enableRenderPassStatArray) {\r\n      renderNode._renderUpdatePre = renderNode._renderUpdatePre_StatUse;\r\n    }\r\n    return renderNode;\r\n  }\r\n\r\n  createMeshRenderNode(): WebMeshRenderNode {\r\n    return new WebMeshRenderNode();\r\n  }\r\n\r\n  createSkinRenderNode(): ISkinRenderNode {\r\n    return new WebSkinRenderNode();\r\n  }\r\n\r\n}\r\n\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n  if (!Laya3DRender.Render3DModuleDataFactory) {\r\n    Laya3DRender.Render3DModuleDataFactory = new Web3DRenderModuleFactory();\r\n  }\r\n})","import { FrustumCulling } from \"../../d3/graphics/FrustumCulling\";\r\nimport { CameraCullInfo, ShadowCullInfo } from \"../../d3/shadowMap/ShadowSliceData\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Stat } from \"../../utils/Stat\";\r\nimport { IRenderContext3D, IRenderElement3D } from \"../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { WebBaseRenderNode } from \"../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { RenderListQueue } from \"./RenderListQueue\";\r\n\r\n/**\r\n * 裁剪通用工具类\r\n */\r\nexport class RenderCullUtil {\r\n    /**\r\n     * 相机裁剪\r\n     * @param cameraCullInfo 相机裁剪信息\r\n     * @param list 渲染节点列表\r\n     * @param count 渲染节点数量（为什么不是list.length?）\r\n     * @param opaqueList 不透明队列\r\n     * @param transparent 透明队列\r\n     * @param context 渲染上下文\r\n     */\r\n    static cullByCameraCullInfo(cameraCullInfo: CameraCullInfo, list: WebBaseRenderNode[],\r\n        count: number, opaqueList: RenderListQueue, transparent: RenderListQueue, context: IRenderContext3D) {\r\n        const boundFrustum = cameraCullInfo.boundFrustum;\r\n        const cullMask = cameraCullInfo.cullingMask;\r\n        const staticMask = cameraCullInfo.staticMask;\r\n        let render: WebBaseRenderNode;\r\n        let canPass: boolean;\r\n        for (let i = 0; i < count; i++) {\r\n            render = list[i];\r\n            canPass = ((1 << render.layer) & cullMask) != 0 && (render.renderbitFlag == 0);\r\n            canPass = canPass && ((render.staticMask & staticMask) != 0);\r\n            if (canPass) {\r\n                Stat.frustumCulling++;\r\n                //needRender方案有问题, 会造成native和js的差异\r\n                if (!cameraCullInfo.useOcclusionCulling || render._needRender(boundFrustum)) {\r\n                    render.distanceForSort = Vector3.distanceSquared(render.bounds._imp.getCenter(), cameraCullInfo.position);\r\n                    render._renderUpdatePre(context);\r\n                    let element: IRenderElement3D;\r\n                    const elements = render.renderelements as IRenderElement3D[];\r\n                    for (let j = 0, len = elements.length; j < len; j++) {\r\n                        element = elements[j];\r\n                        if (element.materialRenderQueue > 2500)\r\n                            transparent.addRenderElement(element);\r\n                        else opaqueList.addRenderElement(element);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 方向光源裁剪\r\n     * @param shadowCullInfo \r\n     * @param list \r\n     * @param count \r\n     * @param opaqueList \r\n     * @param context \r\n     */\r\n    static cullDirectLightShadow(shadowCullInfo: ShadowCullInfo, list: WebBaseRenderNode[],\r\n        count: number, opaqueList: RenderListQueue, context: IRenderContext3D) {\r\n        opaqueList.clear();\r\n        for (let i = 0; i < count; i++) {\r\n            const render = list[i];\r\n            if (render.shadowCullPass()) {\r\n                Stat.frustumCulling++;\r\n                if (FrustumCulling.cullingRenderBounds(render.bounds, shadowCullInfo)) {\r\n                    render.distanceForSort = Vector3.distanceSquared(render.bounds._imp.getCenter(), shadowCullInfo.position); //TODO:合并计算浪费,或者合并后取平均值\r\n                    render._renderUpdatePre(context);\r\n                    let element: IRenderElement3D;\r\n                    const elements = render.renderelements as IRenderElement3D[];\r\n                    for (let j = 0, len = elements.length; j < len; j++) {\r\n                        element = elements[j];\r\n                        if (element.materialRenderQueue < 2500)\r\n                            opaqueList.addRenderElement(element);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 聚光灯裁剪\r\n     * @param cameraCullInfo \r\n     * @param list \r\n     * @param count \r\n     * @param opaqueList \r\n     * @param context \r\n     */\r\n    static cullSpotShadow(cameraCullInfo: CameraCullInfo, list: WebBaseRenderNode[],\r\n        count: number, opaqueList: RenderListQueue, context: IRenderContext3D) {\r\n        opaqueList.clear();\r\n        const boundFrustum = cameraCullInfo.boundFrustum;\r\n        for (let i = 0; i < count; i++) {\r\n            const render = list[i];\r\n            render._renderUpdatePre(context);\r\n            if (render.shadowCullPass()) {\r\n                Stat.frustumCulling++;\r\n                render.distanceForSort = Vector3.distanceSquared(render.bounds._imp.getCenter(), cameraCullInfo.position);\r\n                if (render._needRender(boundFrustum)) {\r\n                    let element: IRenderElement3D;\r\n                    const elements = render.renderelements as IRenderElement3D[];\r\n                    for (let j = 0, len = elements.length; j < len; j++) {\r\n                        element = elements[j];\r\n                        if (element.materialRenderQueue < 2500)\r\n                            opaqueList.addRenderElement(element);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { CommandBuffer } from \"../../d3/core/render/command/CommandBuffer\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { Viewport } from \"../../maths/Viewport\";\r\nimport { IRenderContext3D } from \"../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { InternalRenderTarget } from \"../DriverDesign/RenderDevice/InternalRenderTarget\";\r\n\r\n/**\r\n * 渲染流程通用工具类\r\n */\r\nexport class RenderPassUtil {\r\n    static contextViewPortCache: Viewport = new Viewport();\r\n    static contextScissorCache: Vector4 = new Vector4();\r\n\r\n    /**\r\n     * 执行渲染命令\r\n     * @param cmds \r\n     * @param context \r\n     */\r\n    static renderCmd(cmds: CommandBuffer[], context: IRenderContext3D) {\r\n        if (cmds && cmds.length > 0)\r\n            cmds.forEach(value => context.runCMDList(value._renderCMDs));\r\n    }\r\n\r\n    /**\r\n     * 恢复渲染上下文\r\n     * @param context \r\n     * @param renderTarget \r\n     */\r\n    static recoverRenderContext3D(context: IRenderContext3D, renderTarget: InternalRenderTarget) {\r\n        context.setViewPort(this.contextViewPortCache);\r\n        context.setScissor(this.contextScissorCache);\r\n        context.setRenderTarget(renderTarget, RenderClearFlag.Nothing);\r\n    }\r\n}","import { FastSinglelist } from \"../../utils/SingletonList\";\r\nimport { IRenderElement3D } from \"../DriverDesign/3DRenderPass/I3DRenderPass\";\r\n\r\n/**\r\n * 渲染节点快速排序\r\n */\r\nexport class RenderQuickSort {\r\n    private elementArray: FastSinglelist<IRenderElement3D>;\r\n    private isTransparent: boolean;\r\n\r\n    /**\r\n     * 快速排序\r\n     * @param elements \r\n     * @param isTransparent \r\n     * @param left \r\n     * @param right \r\n     */\r\n    sort(elements: FastSinglelist<IRenderElement3D>, isTransparent: boolean, left: number, right: number): void {\r\n        this.elementArray = elements;\r\n        this.isTransparent = isTransparent;\r\n        this._quickSort(left, right);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _quickSort(left: number, right: number): void {\r\n        if (this.elementArray.length > 1) {\r\n            const index = this._partitionRenderObject(left, right);\r\n            const leftIndex = index - 1;\r\n            if (left < leftIndex)\r\n                this._quickSort(left, leftIndex);\r\n            if (index < right)\r\n                this._quickSort(index, right);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _partitionRenderObject(left: number, right: number): number {\r\n        const elements: IRenderElement3D[] = this.elementArray.elements;\r\n        const pivot: IRenderElement3D = elements[Math.floor((right + left) / 2)];\r\n        while (left <= right) {\r\n            while (this._compare(elements[left], pivot) < 0) left++;\r\n            while (this._compare(elements[right], pivot) > 0) right--;\r\n            if (left < right) {\r\n                const temp = elements[left];\r\n                elements[left] = elements[right];\r\n                elements[right] = temp;\r\n                left++;\r\n                right--;\r\n            } else if (left === right) {\r\n                left++;\r\n                break;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _compare(left: IRenderElement3D, right: IRenderElement3D): number {\r\n        const renderQueue = left.materialRenderQueue - right.materialRenderQueue;\r\n        if (renderQueue === 0) {\r\n            const sort = this.isTransparent ? right.owner.distanceForSort - left.owner.distanceForSort : left.owner.distanceForSort - right.owner.distanceForSort;\r\n            return sort + right.owner.sortingFudge - left.owner.sortingFudge;\r\n        } else return renderQueue;\r\n    }\r\n}","import { Laya3DRender } from \"../../d3/RenderObjs/Laya3DRender\";\r\nimport { FastSinglelist } from \"../../utils/SingletonList\";\r\nimport { IInstanceRenderBatch, IRenderContext3D, IRenderElement3D } from \"../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { RenderQuickSort } from \"./RenderQuickSort\";\r\n\r\n/**\r\n * 渲染节点队列\r\n */\r\nexport class RenderListQueue {\r\n    private _elements: FastSinglelist<IRenderElement3D> = new FastSinglelist<IRenderElement3D>();\r\n    get elements() { return this._elements; }\r\n    private _quickSort: RenderQuickSort;\r\n    private _isTransparent: boolean;\r\n\r\n    _batch: IInstanceRenderBatch;\r\n\r\n    constructor(isTransParent: boolean) {\r\n        this._isTransparent = isTransParent;\r\n        this._quickSort = new RenderQuickSort();\r\n        this._batch = Laya3DRender.Render3DPassFactory.createInstanceBatch();\r\n    }\r\n\r\n    /**\r\n     * 添加渲染元素\r\n     * @param renderelement \r\n     */\r\n    addRenderElement(renderelement: IRenderElement3D) {\r\n        renderelement.materialShaderData && this._elements.add(renderelement);\r\n    }\r\n\r\n    /**\r\n     * 合并渲染队列\r\n     */\r\n    private _batchQueue() {\r\n        if (!this._isTransparent)\r\n            this._batch.batch(this._elements);\r\n    }\r\n\r\n    /**\r\n     * 渲染队列\r\n     * @param context \r\n     */\r\n    renderQueue(context: IRenderContext3D) {\r\n        this._batchQueue(); //合并的地方\r\n        const count = this._elements.length;\r\n        this._quickSort.sort(this._elements, this._isTransparent, 0, count - 1);\r\n        context.drawRenderElementList(this._elements);\r\n        this._batch.clearRenderData();\r\n    }\r\n\r\n    /**\r\n     * 清空队列\r\n     */\r\n    clear() {\r\n        //下面是避免this.elements.elements太长，以及避免引用对象\r\n        if (this.elements.elements.length > 100) {\r\n            this.elements.elements.length = 100;\r\n        }\r\n        this.elements.elements.fill(null);  //避免引用js对象导致无法gc\r\n        this._elements.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this.clear();\r\n    }\r\n}","\r\nimport { ShaderPass } from \"../../../RenderEngine/RenderShader/ShaderPass\";\r\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\r\nimport { Transform3D } from \"../../../d3/core/Transform3D\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { IRenderElement3D } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { WebBaseRenderNode } from \"../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebDefineDatas } from \"../../RenderModuleData/WebModuleData/WebDefineDatas\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLRenderGeometryElement } from \"../RenderDevice/WebGLRenderGeometryElement\";\r\nimport { WebGLShaderInstance } from \"../RenderDevice/WebGLShaderInstance\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\n\r\nexport class WebGLRenderElement3D implements IRenderElement3D {\r\n    /** @internal */\r\n    static _compileDefine: WebDefineDatas = new WebDefineDatas();\r\n\r\n    protected _shaderInstances: FastSinglelist<WebGLShaderInstance>;\r\n\r\n    geometry: WebGLRenderGeometryElement;\r\n\r\n    subShader: SubShader;\r\n\r\n    materialId: number;\r\n\r\n    canDynamicBatch: boolean;\r\n\r\n    materialShaderData: WebGLShaderData;\r\n\r\n    materialRenderQueue: number;\r\n\r\n    renderShaderData: WebGLShaderData;\r\n\r\n    transform: Transform3D;\r\n\r\n    isRender: boolean;\r\n\r\n    owner: WebBaseRenderNode;//GLESRenderNode\r\n\r\n    protected _invertFront: boolean;\r\n\r\n    constructor() {\r\n        this._shaderInstances = new FastSinglelist();\r\n    }\r\n\r\n    _addShaderInstance(shader: WebGLShaderInstance) {\r\n        this._shaderInstances.add(shader);\r\n    }\r\n\r\n    _clearShaderInstance() {\r\n        this._shaderInstances.length = 0;\r\n    }\r\n\r\n    _preUpdatePre(context: WebGLRenderContext3D) {\r\n        this._compileShader(context);\r\n        this._invertFront = this._getInvertFront();\r\n    }\r\n\r\n    protected _getInvertFront(): boolean {\r\n        let transform = this.owner?.transform;\r\n        return transform ? transform._isFrontFaceInvert : false;\r\n    }\r\n\r\n    /**\r\n     * render RenderElement\r\n     * context:GLESRenderContext3D\r\n     * @param renderqueue \r\n     */\r\n    _render(context: WebGLRenderContext3D): void {\r\n        var forceInvertFace: boolean = context.invertY;\r\n        var updateMark: number = context.cameraUpdateMask;\r\n        var sceneShaderData = context.sceneData as WebGLShaderData;\r\n        var cameraShaderData = context.cameraData as WebGLShaderData;\r\n        if (this.isRender) {\r\n            var passes: WebGLShaderInstance[] = this._shaderInstances.elements;\r\n            for (var j: number = 0, m: number = this._shaderInstances.length; j < m; j++) {\r\n                const shaderIns: WebGLShaderInstance = passes[j];\r\n                if (!shaderIns.complete)\r\n                    continue;\r\n                var switchShader: boolean = shaderIns.bind();\r\n                var switchUpdateMark: boolean = (updateMark !== shaderIns._uploadMark);\r\n                var uploadScene: boolean = (shaderIns._uploadScene !== sceneShaderData) || switchUpdateMark;\r\n                //Scene\r\n                if (uploadScene || switchShader) {\r\n                    sceneShaderData && shaderIns.uploadUniforms(shaderIns._sceneUniformParamsMap, sceneShaderData, uploadScene);\r\n                    shaderIns._uploadScene = sceneShaderData;\r\n                }\r\n                //render\r\n                if (this.renderShaderData) {\r\n                    var uploadSprite3D: boolean = (shaderIns._uploadRender !== this.renderShaderData) || switchUpdateMark;\r\n                    if (uploadSprite3D || switchShader) {\r\n                        shaderIns.uploadUniforms(shaderIns._spriteUniformParamsMap, this.renderShaderData, uploadSprite3D);\r\n                        shaderIns._uploadRender = this.renderShaderData;\r\n                    }\r\n                }\r\n                //camera\r\n                var uploadCamera: boolean = shaderIns._uploadCameraShaderValue !== cameraShaderData || switchUpdateMark;\r\n                if (uploadCamera || switchShader) {\r\n                    cameraShaderData && shaderIns.uploadUniforms(shaderIns._cameraUniformParamsMap, cameraShaderData, uploadCamera);\r\n                    shaderIns._uploadCameraShaderValue = cameraShaderData;\r\n                }\r\n                //material\r\n                var uploadMaterial: boolean = (shaderIns._uploadMaterial !== this.materialShaderData) || switchUpdateMark;\r\n                if (uploadMaterial || switchShader) {\r\n                    shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, this.materialShaderData, uploadMaterial);\r\n                    shaderIns._uploadMaterial = this.materialShaderData;\r\n                    //GlobalData\r\n                    context.globalShaderData && shaderIns.uploadUniforms(shaderIns._materialUniformParamsMap, context.globalShaderData, uploadMaterial);\r\n                }\r\n                //renderData update\r\n                //TODO：Renderstate as a Object to less upload\r\n                shaderIns.uploadRenderStateBlendDepth(this.materialShaderData);\r\n                shaderIns.uploadRenderStateFrontFace(this.materialShaderData, forceInvertFace, this._invertFront);\r\n                this.drawGeometry(shaderIns);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _compileShader(context: WebGLRenderContext3D) {\r\n        var passes: ShaderPass[] = this.subShader._passes;\r\n        this._clearShaderInstance();\r\n        for (var j: number = 0, m: number = passes.length; j < m; j++) {\r\n            var pass: ShaderPass = passes[j];\r\n            //NOTE:this will cause maybe a shader not render but do prepare before，but the developer can avoide this manual,for example shaderCaster=false.\r\n            if (pass.pipelineMode !== context.pipelineMode)\r\n                continue;\r\n\r\n            var comDef = WebGLRenderElement3D._compileDefine;\r\n\r\n            if (context.sceneData) {\r\n                context.sceneData._defineDatas.cloneTo(comDef);\r\n            } else {\r\n                context._globalConfigShaderData.cloneTo(comDef);\r\n            }\r\n\r\n            context.cameraData && comDef.addDefineDatas(context.cameraData._defineDatas);\r\n            if (this.renderShaderData) {\r\n                comDef.addDefineDatas(this.renderShaderData.getDefineData());\r\n                pass.nodeCommonMap = this.owner._commonUniformMap;\r\n            } else {\r\n                pass.nodeCommonMap = null;\r\n            }\r\n            comDef.addDefineDatas(this.materialShaderData._defineDatas);\r\n\r\n            var shaderIns = pass.withCompile(comDef) as WebGLShaderInstance;\r\n\r\n            //get shaderInstance\r\n            //create ShaderInstance\r\n\r\n            this._addShaderInstance(shaderIns);\r\n        }\r\n    }\r\n\r\n    drawGeometry(shaderIns: WebGLShaderInstance) {\r\n        WebGLEngine.instance.getDrawContext().drawGeometryElement(this.geometry);\r\n    }\r\n\r\n    destroy() {\r\n        this.geometry = null;\r\n        this._shaderInstances = null;\r\n        this.materialShaderData = null;\r\n        this.renderShaderData = null;\r\n        this.transform = null;\r\n        this.isRender = null;\r\n    }\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { RenderCapable } from \"../../../RenderEngine/RenderEnum/RenderCapable\";\r\nimport { Laya3DRender } from \"../../../d3/RenderObjs/Laya3DRender\";\r\nimport { BatchMark } from \"../../../d3/core/render/BatchMark\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { FastSinglelist, SingletonList } from \"../../../utils/SingletonList\";\r\nimport { IInstanceRenderElement3D, IRenderElement3D } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\n\r\n\r\n/**\r\n * 动态合批通用类（目前由WebGPU专用）\r\n */\r\nexport class WebGLInstanceRenderBatch {\r\n\r\n    static MaxInstanceCount: number = 1024;\r\n\r\n    private recoverList: FastSinglelist<IInstanceRenderElement3D>;\r\n    private _batchOpaqueMarks: any[] = [];\r\n    private _updateCountMark: number = 0;\r\n\r\n    constructor() {\r\n        this.recoverList = new FastSinglelist();\r\n    }\r\n\r\n    getBatchMark(element: IRenderElement3D) {\r\n        const renderNode = element.owner;\r\n        const geometry = element.geometry;\r\n\r\n        const invertFrontFace = element.transform ? element.transform._isFrontFaceInvert : false;\r\n        const invertFrontFaceFlag = invertFrontFace ? 1 : 0;\r\n        const receiveShadowFlag = renderNode.receiveShadow ? 1 : 0;\r\n        //@ts-ignore\r\n        const geometryFlag = geometry._id;\r\n        const materialFlag = element.materialId;\r\n\r\n        const renderId = (materialFlag << 17) + (geometryFlag << 2) + (invertFrontFaceFlag << 1) + (receiveShadowFlag);\r\n        const reflectFlag = (renderNode.probeReflection ? renderNode.probeReflection._id : -1) + 1;\r\n        const lightmapFlag = renderNode.lightmapIndex + 1;\r\n        const lightProbeFlag = (renderNode.volumetricGI ? renderNode.volumetricGI._id : -1) + 1;\r\n        const giId = (reflectFlag << 10) + (lightmapFlag << 20) + lightProbeFlag;\r\n\r\n        const data = this._batchOpaqueMarks[renderId] || (this._batchOpaqueMarks[renderId] = {});\r\n        return data[giId] || (data[giId] = new BatchMark());\r\n    }\r\n\r\n    batch(elements: SingletonList<IRenderElement3D>) {\r\n        if (!Config3D.enableDynamicBatch\r\n            || !LayaGL.renderEngine.getCapable(RenderCapable.DrawElement_Instance))\r\n            return;\r\n\r\n        const elementCount = elements.length;\r\n        const elementArray = elements.elements;\r\n        const maxInstanceCount = WebGLInstanceRenderBatch.MaxInstanceCount;\r\n\r\n        elements.length = 0;\r\n        this._updateCountMark++;\r\n\r\n        for (let i = 0; i < elementCount; i++) {\r\n            const element = elementArray[i];\r\n            if (element.canDynamicBatch && element.subShader._owner._enableInstancing) {\r\n                // shader 支持 instance\r\n                const instanceMark = this.getBatchMark(element);\r\n                if (this._updateCountMark == instanceMark.updateMark) {\r\n                    const instanceIndex = instanceMark.indexInList;\r\n                    if (instanceMark.batched) {\r\n                        const originElement = <IInstanceRenderElement3D>elementArray[instanceIndex];\r\n                        const instanceElements = originElement.instanceElementList;\r\n                        // 达到 最大 instance 数量 放弃合并 // todo\r\n                        if (instanceElements.length === maxInstanceCount) {\r\n                            instanceMark.indexInList = elements.length;\r\n                            instanceMark.batched = false;\r\n                            elements.add(element);\r\n                        } else {\r\n                            // 加入合并队列\r\n                            instanceElements.add(element);\r\n                        }\r\n                    } else {\r\n                        const originElement = elementArray[instanceIndex];\r\n                        // 替换 renderElement\r\n                        const instanceRenderElement = Laya3DRender.Render3DPassFactory.createInstanceRenderElement3D()\r\n                        this.recoverList.add(instanceRenderElement);\r\n                        instanceRenderElement.subShader = element.subShader;\r\n                        instanceRenderElement.materialShaderData = element.materialShaderData;\r\n                        instanceRenderElement.materialRenderQueue = element.materialRenderQueue;\r\n                        instanceRenderElement.renderShaderData = element.renderShaderData;\r\n                        instanceRenderElement.owner = element.owner;\r\n                        instanceRenderElement.setGeometry(element.geometry);\r\n\r\n                        const list = instanceRenderElement.instanceElementList;\r\n                        list.length = 0;\r\n                        list.add(originElement);\r\n                        list.add(element);\r\n                        elementArray[instanceIndex] = instanceRenderElement;\r\n                        instanceMark.batched = true; //@ts-ignore\r\n                        instanceRenderElement._invertFrontFace = element.transform ? element.transform._isFrontFaceInvert : false;\r\n                    }\r\n                } else {\r\n                    instanceMark.updateMark = this._updateCountMark;\r\n                    instanceMark.indexInList = elements.length;\r\n                    instanceMark.batched = false;\r\n                    elements.add(element);\r\n                }\r\n            } else {\r\n                // can not instance\r\n                elements.add(element);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearRenderData() {\r\n        for (let i = this.recoverList.length - 1; i > -1; i--) {\r\n            let element = this.recoverList.elements[i];\r\n            element.clearRenderData();\r\n        }\r\n    }\r\n\r\n    recoverData() {\r\n        for (let i = this.recoverList.length - 1; i > -1; i--) {\r\n            let element = this.recoverList.elements[i];\r\n            element.recover();\r\n        }\r\n        this.recoverList.length = 0;\r\n    }\r\n}","import { BufferTargetType, BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\r\nimport { VertexMesh } from \"../../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { MeshSprite3DShaderDeclaration } from \"../../../d3/core/MeshSprite3DShaderDeclaration\";\r\nimport { RenderableSprite3D } from \"../../../d3/core/RenderableSprite3D\";\r\nimport { SimpleSkinnedMeshSprite3D } from \"../../../d3/core/SimpleSkinnedMeshSprite3D\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { IInstanceRenderElement3D } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { BaseRenderType } from \"../../RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { WebDefineDatas } from \"../../RenderModuleData/WebModuleData/WebDefineDatas\";\r\nimport { WebGLBufferState } from \"../RenderDevice/WebGLBufferState\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLRenderGeometryElement } from \"../RenderDevice/WebGLRenderGeometryElement\";\r\nimport { WebGLShaderInstance } from \"../RenderDevice/WebGLShaderInstance\";\r\nimport { WebGLVertexBuffer } from \"../RenderDevice/WebGLVertexBuffer\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\nimport { WebGLRenderElement3D } from \"./WebGLRenderElement3D\";\r\nexport interface WebGLInstanceStateInfo {\r\n    state: WebGLBufferState;\r\n    worldInstanceVB?: WebGLVertexBuffer;\r\n    lightmapScaleOffsetVB?: WebGLVertexBuffer;\r\n    simpleAnimatorVB?: WebGLVertexBuffer;\r\n}\r\nexport class WebGLInstanceRenderElement3D extends WebGLRenderElement3D implements IInstanceRenderElement3D {\r\n    /**\r\n     * get Instance BufferState\r\n     */\r\n    private static _instanceBufferStateMap: Map<number, WebGLInstanceStateInfo> = new Map();\r\n\r\n    static getInstanceBufferState(geometry: WebGLRenderGeometryElement, renderType: number, spriteDefine: WebDefineDatas) {\r\n        let stateinfo = WebGLInstanceRenderElement3D._instanceBufferStateMap.get(geometry._id);\r\n        if (!stateinfo) {\r\n            stateinfo = { state: new WebGLBufferState() };\r\n            let oriBufferState = geometry.bufferState;\r\n            let vertexArray = oriBufferState._vertexBuffers.slice();\r\n            let worldMatVertex = new WebGLVertexBuffer(BufferTargetType.ARRAY_BUFFER, BufferUsage.Dynamic);\r\n            worldMatVertex.setDataLength(WebGLInstanceRenderElement3D.MaxInstanceCount * 16 * 4)\r\n            worldMatVertex.vertexDeclaration = VertexMesh.instanceWorldMatrixDeclaration;\r\n            worldMatVertex.instanceBuffer = true;\r\n            vertexArray.push(worldMatVertex);\r\n            stateinfo.worldInstanceVB = worldMatVertex;\r\n            switch (renderType) {\r\n                case BaseRenderType.MeshRender:\r\n                    if (spriteDefine.has(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1)) {\r\n                        let instanceLightMapVertexBuffer = new WebGLVertexBuffer(BufferTargetType.ARRAY_BUFFER, BufferUsage.Dynamic);\r\n                        instanceLightMapVertexBuffer.setDataLength(WebGLInstanceRenderElement3D.MaxInstanceCount * 4 * 4)\r\n                        instanceLightMapVertexBuffer.vertexDeclaration = VertexMesh.instanceLightMapScaleOffsetDeclaration;\r\n                        instanceLightMapVertexBuffer.instanceBuffer = true;\r\n                        vertexArray.push(instanceLightMapVertexBuffer);\r\n                        stateinfo.lightmapScaleOffsetVB = instanceLightMapVertexBuffer;\r\n                    }\r\n                    break;\r\n                case BaseRenderType.SimpleSkinRender:\r\n                    let instanceSimpleAnimatorBuffer = new WebGLVertexBuffer(BufferTargetType.ARRAY_BUFFER, BufferUsage.Dynamic);\r\n                    instanceSimpleAnimatorBuffer.setDataLength(WebGLInstanceRenderElement3D.MaxInstanceCount * 4 * 4)\r\n                    instanceSimpleAnimatorBuffer.vertexDeclaration = VertexMesh.instanceSimpleAnimatorDeclaration;\r\n                    instanceSimpleAnimatorBuffer.instanceBuffer = true;\r\n                    vertexArray.push(instanceSimpleAnimatorBuffer);\r\n                    stateinfo.simpleAnimatorVB = instanceSimpleAnimatorBuffer;\r\n                    break;\r\n            }\r\n            stateinfo.state.applyState(vertexArray, geometry.bufferState._bindedIndexBuffer);\r\n            WebGLInstanceRenderElement3D._instanceBufferStateMap.set(geometry._id, stateinfo);\r\n        }\r\n        return stateinfo;\r\n    }\r\n\r\n    /**\r\n     * max instance count\r\n     */\r\n    static MaxInstanceCount: number = 1024;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private static _pool: WebGLInstanceRenderElement3D[] = [];\r\n\r\n    static create(): WebGLInstanceRenderElement3D {\r\n        let element = this._pool.pop() || new WebGLInstanceRenderElement3D();\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * pool of Buffer\r\n     * @internal\r\n     */\r\n    private static _bufferPool: Map<number, Float32Array[]> = new Map();\r\n\r\n    static _instanceBufferCreate(length: number): Float32Array {\r\n        let array = WebGLInstanceRenderElement3D._bufferPool.get(length);\r\n        if (!array) {\r\n            WebGLInstanceRenderElement3D._bufferPool.set(length, []);\r\n            array = WebGLInstanceRenderElement3D._bufferPool.get(length)\r\n        }\r\n\r\n        let element = array.pop() || new Float32Array(length);\r\n        return element;\r\n    }\r\n\r\n    instanceElementList: FastSinglelist<WebGLRenderElement3D>;\r\n\r\n    private _vertexBuffers: Array<WebGLVertexBuffer> = [];\r\n    private _updateData: Array<Float32Array> = [];\r\n    private _updateDataNum: Array<number> = [];\r\n    private _instanceStateInfo: WebGLInstanceStateInfo;\r\n    _invertFrontFace: boolean = true;\r\n    drawCount: number;\r\n    updateNums: number;\r\n    protected _getInvertFront(): boolean {\r\n        return this._invertFrontFace;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.instanceElementList = new FastSinglelist();\r\n        this.drawCount = 0;\r\n        this.updateNums = 0;\r\n        this.isRender = true;\r\n    }\r\n\r\n    addUpdateData(vb: WebGLVertexBuffer, elementLength: number, maxInstanceCount: number): Float32Array {\r\n        this._vertexBuffers[this.updateNums] = vb;\r\n        this._updateDataNum[this.updateNums] = elementLength;\r\n        let data = this._updateData[this.updateNums] = WebGLInstanceRenderElement3D._instanceBufferCreate(elementLength * maxInstanceCount);\r\n        this.updateNums++;\r\n        return data;\r\n    }\r\n\r\n    protected _compileShader(context: WebGLRenderContext3D) {\r\n        this._clearShaderInstance();\r\n        let passes = this.subShader._passes;\r\n        for (let i = 0; i < passes.length; i++) {\r\n            let pass = passes[i];\r\n            if (pass.pipelineMode != context.pipelineMode)\r\n                continue;\r\n\r\n            let comDef = WebGLRenderElement3D._compileDefine;\r\n            if (context.sceneData) {\r\n                context.sceneData._defineDatas.cloneTo(comDef);\r\n            }\r\n            else {\r\n                context._globalConfigShaderData.cloneTo(comDef);\r\n            }\r\n\r\n            context.cameraData && comDef.addDefineDatas(context.cameraData._defineDatas);\r\n\r\n            if (this.renderShaderData) {\r\n                comDef.addDefineDatas(this.renderShaderData.getDefineData());\r\n                pass.nodeCommonMap = this.owner._commonUniformMap;\r\n            }\r\n            else {\r\n                pass.nodeCommonMap = null;\r\n            }\r\n\r\n            comDef.addDefineDatas(this.materialShaderData._defineDatas);\r\n\r\n            comDef.add(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE);\r\n\r\n            let shaderIns = <WebGLShaderInstance>pass.withCompile(comDef);\r\n            this._addShaderInstance(shaderIns);\r\n        }\r\n        this._shaderInstances.length > 0 && this._updateInstanceData();\r\n    }\r\n\r\n    private _updateInstanceData() {\r\n        switch (this.owner.renderNodeType) {\r\n            case BaseRenderType.MeshRender: {\r\n                let worldMatrixData = this.addUpdateData(this._instanceStateInfo.worldInstanceVB, 16, WebGLInstanceRenderElement3D.MaxInstanceCount);\r\n                var insBatches = this.instanceElementList;\r\n                var elements: WebGLRenderElement3D[] = insBatches.elements;\r\n                var count: number = insBatches.length;\r\n                this.drawCount = count;\r\n                this.geometry.instanceCount = this.drawCount;\r\n                for (var i: number = 0; i < count; i++)\r\n                    worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\r\n\r\n                let haveLightMap: boolean = this.renderShaderData.hasDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP) && this.renderShaderData.hasDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);\r\n                if (haveLightMap) {\r\n                    let lightMapData = this.addUpdateData(this._instanceStateInfo.lightmapScaleOffsetVB, 4, WebGLInstanceRenderElement3D.MaxInstanceCount);\r\n                    for (var i: number = 0; i < count; i++) {\r\n                        let lightmapScaleOffset = elements[i].owner.lightmapScaleOffset;\r\n                        var offset: number = i * 4;\r\n                        lightMapData[offset] = lightmapScaleOffset.x;\r\n                        lightMapData[offset + 1] = lightmapScaleOffset.y;\r\n                        lightMapData[offset + 2] = lightmapScaleOffset.z;\r\n                        lightMapData[offset + 3] = lightmapScaleOffset.w;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case BaseRenderType.SimpleSkinRender: {\r\n                //worldMatrix\r\n                let worldMatrixData = this.addUpdateData(this._instanceStateInfo.worldInstanceVB, 16, WebGLInstanceRenderElement3D.MaxInstanceCount);\r\n                var insBatches = this.instanceElementList;\r\n                var elements: WebGLRenderElement3D[] = insBatches.elements;\r\n                var count: number = insBatches.length;\r\n                this.drawCount = count;\r\n                this.geometry.instanceCount = this.drawCount;\r\n                for (var i: number = 0; i < count; i++)\r\n                    worldMatrixData.set(elements[i].transform.worldMatrix.elements, i * 16);\r\n                //simpleAnimationData\r\n                let simpleAnimatorData = this.addUpdateData(this._instanceStateInfo.simpleAnimatorVB, 4, WebGLInstanceRenderElement3D.MaxInstanceCount);\r\n                for (var i: number = 0; i < count; i++) {\r\n                    var simpleAnimatorParams = elements[i].renderShaderData.getVector(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS);\r\n                    var offset: number = i * 4;\r\n                    simpleAnimatorData[offset] = simpleAnimatorParams.x;\r\n                    simpleAnimatorData[offset + 1] = simpleAnimatorParams.y;\r\n                    simpleAnimatorData[offset + 2] = simpleAnimatorParams.z;\r\n                    simpleAnimatorData[offset + 3] = simpleAnimatorParams.w;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * get correct geometry\r\n     * @param geometry \r\n     */\r\n    setGeometry(geometry: WebGLRenderGeometryElement) {\r\n        if (!this.geometry) {\r\n            this.geometry = new WebGLRenderGeometryElement(geometry.mode, geometry.drawType);\r\n        }\r\n        geometry.cloneTo(this.geometry);\r\n        this.geometry.drawType = DrawType.DrawElementInstance;\r\n        this._instanceStateInfo = WebGLInstanceRenderElement3D.getInstanceBufferState(geometry, this.owner.renderNodeType, this.renderShaderData._defineDatas);\r\n        this.geometry.bufferState = this._instanceStateInfo.state;\r\n    }\r\n\r\n    /**\r\n    * render RenderElement\r\n    * context:GLESRenderContext3D\r\n    * @param renderqueue \r\n    */\r\n    _render(context: WebGLRenderContext3D): void {\r\n        for (let i = 0; i < this.updateNums; i++) {\r\n            let buffer = this._vertexBuffers[i];\r\n            if (!buffer)\r\n                break;\r\n            let data = this._updateData[i];\r\n            buffer.orphanStorage();\r\n            buffer.setData(data.buffer, 0, 0, this.drawCount * this._updateDataNum[i] * 4);\r\n        }\r\n        super._render(context);\r\n        this.clearRenderData();\r\n    }\r\n\r\n    /**\r\n     * 清理单次渲染生成的数据\r\n     */\r\n    clearRenderData(): void {\r\n        this.drawCount = 0;\r\n        this.updateNums = 0;\r\n        this._vertexBuffers.length = 0;\r\n        this._updateData.forEach((data) => {\r\n            WebGLInstanceRenderElement3D._bufferPool.get(data.length).push(data);\r\n        });\r\n        this._updateData.length = 0;\r\n        this._updateDataNum.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 回收\r\n     */\r\n    recover() {\r\n        WebGLInstanceRenderElement3D._pool.push(this);\r\n        this.instanceElementList.clear();\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n    }\r\n}\r\n","import { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderPassStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { BaseCamera } from \"../../../d3/core/BaseCamera\";\r\nimport { ShadowCascadesMode } from \"../../../d3/core/light/ShadowCascadesMode\";\r\nimport { ShadowMode } from \"../../../d3/core/light/ShadowMode\";\r\nimport { ShadowUtils } from \"../../../d3/core/light/ShadowUtils\";\r\nimport { CommandBuffer } from \"../../../d3/core/render/command/CommandBuffer\";\r\nimport { Scene3DShaderDeclaration } from \"../../../d3/core/scene/Scene3DShaderDeclaration\";\r\nimport { BoundSphere } from \"../../../d3/math/BoundSphere\";\r\nimport { Plane } from \"../../../d3/math/Plane\";\r\nimport { ShadowCasterPass } from \"../../../d3/shadowMap/ShadowCasterPass\";\r\nimport { ShadowCullInfo, ShadowSliceData } from \"../../../d3/shadowMap/ShadowSliceData\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { RenderCullUtil } from \"../../DriverCommon/RenderCullUtil\";\r\nimport { RenderListQueue } from \"../../DriverCommon/RenderListQueue\";\r\nimport { WebBaseRenderNode } from \"../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebDirectLight } from \"../../RenderModuleData/WebModuleData/3D/WebDirectLight\";\r\nimport { WebCameraNodeData } from \"../../RenderModuleData/WebModuleData/3D/WebModuleData\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLInternalRT } from \"../RenderDevice/WebGLInternalRT\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\n\r\n\r\nexport class WebGLDirectLightShadowRP {\r\n    /** @internal 最大cascade*/\r\n    private static _maxCascades: number = 4;\r\n\r\n    /**@internal */\r\n    shadowCastMode: ShadowCascadesMode;\r\n\r\n    camera: WebCameraNodeData;\r\n\r\n    destTarget: WebGLInternalRT;\r\n\r\n    private _shadowCasterCommanBuffer: CommandBuffer[];\r\n    public get shadowCasterCommanBuffer(): CommandBuffer[] {\r\n        return this._shadowCasterCommanBuffer;\r\n    }\r\n    public set shadowCasterCommanBuffer(value: CommandBuffer[]) {\r\n        this._shadowCasterCommanBuffer = value;\r\n    }\r\n\r\n    /**light */\r\n    private _light: WebDirectLight\r\n    /**@internal */\r\n    private _lightup: Vector3;\r\n    /**@internal */\r\n    private _lightSide: Vector3;\r\n    /**@internal */\r\n    private _lightForward: Vector3;\r\n\r\n    //caculate data\r\n    /**@internal 分割distance*/\r\n    private _cascadesSplitDistance: number[] = new Array(WebGLDirectLightShadowRP._maxCascades + 1);\r\n    /** @internal */\r\n    private _frustumPlanes: Plane[];\r\n    /** @internal */\r\n    private _shadowMatrices: Float32Array = new Float32Array(16 * (WebGLDirectLightShadowRP._maxCascades));\r\n    /**@internal */\r\n    private _splitBoundSpheres: Float32Array = new Float32Array(WebGLDirectLightShadowRP._maxCascades * 4);\r\n    /** @internal */\r\n    private _shadowSliceDatas: ShadowSliceData[] = [new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData(), new ShadowSliceData()];\r\n    /** @internal */\r\n    private _shadowMapSize: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowBias: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _cascadeCount: number = 0;\r\n    /** @internal */\r\n    private _shadowMapWidth: number = 0;\r\n    /** @internal */\r\n    private _shadowMapHeight: number = 0;\r\n    /** @internal */\r\n    private _shadowTileResolution: number = 0;\r\n    /** @internal */\r\n    private _shadowCullInfo: ShadowCullInfo;\r\n\r\n    /**@internal */\r\n    private _renderQueue: RenderListQueue;\r\n\r\n    set light(value: WebDirectLight) {\r\n        this._light = value;\r\n        var lightWorld: Matrix4x4 = Matrix4x4.TEMPMatrix0;\r\n        var lightWorldE: Float32Array = lightWorld.elements;\r\n        var lightUp: Vector3 = this._lightup;\r\n        var lightSide: Vector3 = this._lightSide;\r\n        var lightForward: Vector3 = this._lightForward;\r\n        Matrix4x4.createFromQuaternion(this._light.transform.rotation, lightWorld);\r\n        lightSide.setValue(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\r\n        lightUp.setValue(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\r\n        lightForward.setValue(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\r\n        //设置分辨率\r\n        var atlasResolution = this._light.shadowResolution;\r\n        var cascadesMode = this.shadowCastMode = this._light.shadowCascadesMode;\r\n\r\n        if (cascadesMode == ShadowCascadesMode.NoCascades) {\r\n            this._cascadeCount = 1;\r\n            this._shadowTileResolution = atlasResolution;\r\n            this._shadowMapWidth = atlasResolution;\r\n            this._shadowMapHeight = atlasResolution;\r\n        }\r\n        else {\r\n            this._cascadeCount = cascadesMode == ShadowCascadesMode.TwoCascades ? 2 : 4;\r\n            let shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(atlasResolution, atlasResolution, this._cascadeCount);\r\n            this._shadowTileResolution = shadowTileResolution;\r\n            this._shadowMapWidth = shadowTileResolution * 2;\r\n            this._shadowMapHeight = cascadesMode == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\r\n        }\r\n    }\r\n\r\n    get light(): WebDirectLight {\r\n        return this._light;\r\n    }\r\n\r\n    constructor() {\r\n        this._lightup = new Vector3();\r\n        this._lightSide = new Vector3();\r\n        this._lightForward = new Vector3();\r\n        this._cascadesSplitDistance = new Array(WebGLDirectLightShadowRP._maxCascades + 1);\r\n        this._renderQueue = new RenderListQueue(false);\r\n        this._frustumPlanes = new Array(new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0), new Plane(new Vector3(), 0));\r\n        this._shadowCullInfo = new ShadowCullInfo();\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     */\r\n    update(context: WebGLRenderContext3D): void {\r\n        var splitDistance: number[] = this._cascadesSplitDistance;\r\n        var frustumPlanes: Plane[] = this._frustumPlanes;\r\n        var cameraNear: number = this.camera.nearplane;\r\n        var shadowFar: number = Math.min(this.camera.farplane, this._light.shadowDistance);\r\n        var shadowMatrices: Float32Array = this._shadowMatrices;\r\n        var boundSpheres: Float32Array = this._splitBoundSpheres;\r\n        ShadowUtils.getCascadesSplitDistance(this._light.shadowTwoCascadeSplits, this._light._shadowFourCascadeSplits, cameraNear, shadowFar, this.camera.fieldOfView * MathUtils3D.Deg2Rad, this.camera.aspectRatio, this.shadowCastMode, splitDistance);\r\n        ShadowUtils.getCameraFrustumPlanes(this.camera._projectViewMatrix, frustumPlanes);\r\n        var forward: Vector3 = Vector3._tempVector3;\r\n        this.camera.transform.getForward(forward);\r\n        Vector3.normalize(forward, forward);\r\n        for (var i: number = 0; i < this._cascadeCount; i++) {\r\n            var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n            sliceData.sphereCenterZ = ShadowUtils.getBoundSphereByFrustum(splitDistance[i], splitDistance[i + 1], this.camera.fieldOfView * MathUtils3D.Deg2Rad, this.camera.aspectRatio, this.camera.transform.position, forward, sliceData.splitBoundSphere);\r\n            ShadowUtils.getDirectionLightShadowCullPlanes(frustumPlanes, i, splitDistance, cameraNear, this._lightForward, sliceData);\r\n            ShadowUtils.getDirectionalLightMatrices(this._lightup, this._lightSide, this._lightForward, i, this._light.shadowNearPlane, this._shadowTileResolution, sliceData, shadowMatrices);\r\n            if (this._cascadeCount > 1)\r\n                ShadowUtils.applySliceTransform(sliceData, this._shadowMapWidth, this._shadowMapHeight, i, shadowMatrices);\r\n        }\r\n        ShadowUtils.prepareShadowReceiverShaderValues(this._shadowMapWidth, this._shadowMapHeight, this._shadowSliceDatas, this._cascadeCount, this._shadowMapSize, shadowMatrices, boundSpheres);\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param list\r\n     * @param count\r\n     */\r\n    render(context: WebGLRenderContext3D, list: WebBaseRenderNode[], count: number): void {\r\n        var shaderValues: WebGLShaderData = context.sceneData;\r\n        context.pipelineMode = \"ShadowCaster\";\r\n        var shadowMap = this.destTarget\r\n        context.setRenderTarget(shadowMap, RenderClearFlag.Depth);\r\n        context.setClearData(RenderClearFlag.Depth, Color.BLACK, 1, 0);\r\n\r\n        let originCameraData = context.cameraData;\r\n\r\n        //需要把shadowmap clear Depth;\r\n        for (var i: number = 0, n: number = this._cascadeCount; i < n; i++) {\r\n            var sliceData: ShadowSliceData = this._shadowSliceDatas[i];\r\n            this.getShadowBias(sliceData.projectionMatrix, sliceData.resolution, this._shadowBias);\r\n            this._setupShadowCasterShaderValues(shaderValues, sliceData, this._lightForward, this._shadowBias);\r\n            var shadowCullInfo: ShadowCullInfo = this._shadowCullInfo;\r\n            shadowCullInfo.position = sliceData.position;\r\n            shadowCullInfo.cullPlanes = sliceData.cullPlanes;\r\n            shadowCullInfo.cullPlaneCount = sliceData.cullPlaneCount;\r\n            shadowCullInfo.cullSphere = sliceData.splitBoundSphere;\r\n            shadowCullInfo.direction = this._lightForward;\r\n            //cull\r\n            var time = performance.now();//T_ShadowMapCull Stat\r\n            RenderCullUtil.cullDirectLightShadow(shadowCullInfo, list, count, this._renderQueue, context);\r\n            Stat.renderPassStatArray[RenderPassStatisticsInfo.T_ShadowMapCull] += (performance.now() - time);//Stat\r\n\r\n            context.cameraData = sliceData.cameraShaderValue as WebGLShaderData;\r\n            context.cameraUpdateMask++;\r\n\r\n            var resolution: number = sliceData.resolution;\r\n            var offsetX: number = sliceData.offsetX;\r\n            var offsetY: number = sliceData.offsetY;\r\n\r\n\r\n            if (this._renderQueue.elements.length > 0) {// if one cascade have anything to render.\r\n                Viewport._tempViewport.set(offsetX, offsetY, resolution, resolution);\r\n                Vector4.tempVec4.setValue(offsetX + 1, offsetY + 1, resolution - 2, resolution - 2);\r\n                context.setViewPort(Viewport._tempViewport);\r\n                context.setScissor(Vector4.tempVec4);\r\n            }\r\n            else {\r\n                Viewport._tempViewport.set(offsetX, offsetY, resolution, resolution);\r\n                context.setViewPort(Viewport._tempViewport);\r\n                Vector4.tempVec4.setValue(offsetX, offsetY, resolution, resolution);\r\n                context.setScissor(Vector4.tempVec4);\r\n            }\r\n\r\n            if (sliceData.cameraUBO && sliceData.cameraUBData) {\r\n                sliceData.cameraUBO.setDataByUniformBufferData(sliceData.cameraUBData);\r\n            }\r\n\r\n            context.setClearData(RenderClearFlag.Depth, Color.BLACK, 1, 0);\r\n            this._renderQueue.renderQueue(context);\r\n            Stat.shadowMapDrawCall += this._renderQueue.elements.length;\r\n            this._applyCasterPassCommandBuffer(context);\r\n        }\r\n        this._applyRenderData(context.sceneData, context.cameraData);\r\n        this._renderQueue._batch.recoverData();\r\n        context.cameraData = originCameraData;\r\n        context.cameraUpdateMask++;\r\n    }\r\n\r\n    /**\r\n     * set shaderData after Render shadow\r\n     * @param scene \r\n     * @param camera \r\n     */\r\n    private _applyRenderData(scene: WebGLShaderData, camera: WebGLShaderData) {\r\n        var light = this._light;\r\n        if (light.shadowCascadesMode !== ShadowCascadesMode.NoCascades)\r\n            scene.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n        else\r\n            scene.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE);\r\n        switch (light.shadowMode) {\r\n            case ShadowMode.Hard:\r\n                scene.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                scene.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftLow:\r\n                scene.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                scene.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftHigh:\r\n                scene.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH);\r\n                scene.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW);\r\n                break;\r\n        }\r\n        scene.setBuffer(ShadowCasterPass.SHADOW_MATRICES, this._shadowMatrices);\r\n        scene.setVector(ShadowCasterPass.SHADOW_MAP_SIZE, this._shadowMapSize);\r\n        scene.setBuffer(ShadowCasterPass.SHADOW_SPLIT_SPHERES, this._splitBoundSpheres);\r\n    }\r\n\r\n    /**\r\n     * apply shadowCast cmd array\r\n     */\r\n    private _applyCasterPassCommandBuffer(context: WebGLRenderContext3D) {\r\n        if (!this.shadowCasterCommanBuffer || this.shadowCasterCommanBuffer.length == 0)\r\n            return;\r\n        this.shadowCasterCommanBuffer.forEach(function (value) {\r\n            value._apply();\r\n        });\r\n    }\r\n\r\n    private getShadowBias(shadowProjectionMatrix: Matrix4x4, shadowResolution: number, out: Vector4) {\r\n        var frustumSize: number;\r\n\r\n        // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\r\n        // elements[0] = 2.0 / (right - left)\r\n        frustumSize = 2.0 / shadowProjectionMatrix.elements[0];\r\n\r\n\r\n        // depth and normal bias scale is in shadowmap texel size in world space\r\n        var texelSize: number = frustumSize / shadowResolution;\r\n        var depthBias: number = -this._light.shadowDepthBias * texelSize;\r\n        var normalBias: number = -this._light.shadowNormalBias * texelSize;\r\n\r\n        if (this._light.shadowMode == ShadowMode.SoftHigh) {\r\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\r\n            // This is not true with PCF. Ideally we need to do either\r\n            // cone base bias (based on distance to center sample)\r\n            // or receiver place bias based on derivatives.\r\n            // For now we scale it by the PCF kernel size (5x5)\r\n            const kernelRadius: number = 2.5;\r\n            depthBias *= kernelRadius;\r\n            normalBias *= kernelRadius;\r\n        }\r\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n    * 设置阴影级联数据模式\r\n    * @internal\r\n    */\r\n    private _setupShadowCasterShaderValues(shaderValues: WebGLShaderData, shadowSliceData: ShadowSliceData, LightParam: Vector3, shadowBias: Vector4): void {\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\r\n        shaderValues.setVector3(ShadowCasterPass.SHADOW_LIGHT_DIRECTION, LightParam);\r\n        var cameraSV: WebGLShaderData = shadowSliceData.cameraShaderValue as WebGLShaderData;//TODO:should optimization with shader upload.\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWMATRIX, shadowSliceData.viewMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.PROJECTMATRIX, shadowSliceData.projectionMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n        shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n    }\r\n}","import { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderPassStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { Camera } from \"../../../d3/core/Camera\";\r\nimport { CommandBuffer } from \"../../../d3/core/render/command/CommandBuffer\";\r\nimport { DepthPass } from \"../../../d3/depthMap/DepthPass\";\r\nimport { CameraCullInfo } from \"../../../d3/shadowMap/ShadowSliceData\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { DepthTextureMode } from \"../../../resource/RenderTexture\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { RenderCullUtil } from \"../../DriverCommon/RenderCullUtil\";\r\nimport { RenderListQueue } from \"../../DriverCommon/RenderListQueue\";\r\nimport { PipelineMode } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { InternalRenderTarget } from \"../../DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { WebBaseRenderNode } from \"../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebCameraNodeData } from \"../../RenderModuleData/WebModuleData/3D/WebModuleData\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\nimport { WebGLRenderElement3D } from \"./WebGLRenderElement3D\";\r\nexport class WebGLForwardAddClusterRP {\r\n\r\n    /** @internal*/\r\n    static _context3DViewPortCatch: Viewport = new Viewport(0, 0, 0, 0);\r\n    /** @internal*/\r\n    static _contextScissorPortCatch: Vector4 = new Vector4(0, 0, 0, 0);\r\n    /**@internal */\r\n    cameraCullInfo: CameraCullInfo;\r\n    /**@internal */\r\n    beforeForwardCmds: Array<CommandBuffer>;\r\n    /**@internal */\r\n    beforeSkyboxCmds: Array<CommandBuffer>;\r\n    /**@internal */\r\n    beforeTransparentCmds: Array<CommandBuffer>;\r\n\r\n    /**enable */\r\n    enableOpaque: boolean;\r\n    enableCMD: boolean;\r\n    enableTransparent: boolean;\r\n\r\n    /**@internal */\r\n    destTarget: InternalRenderTarget;\r\n    /**@internal */\r\n    pipelineMode: PipelineMode;\r\n\r\n    /**@internal */\r\n    depthTarget: InternalRenderTarget;\r\n    /**@internal */\r\n    depthPipelineMode: PipelineMode;\r\n\r\n    /**@internal */\r\n    depthNormalTarget: InternalRenderTarget;\r\n    /**@internal */\r\n    depthNormalPipelineMode: PipelineMode\r\n\r\n    /**@internal sky TODO*/\r\n    skyRenderNode: WebBaseRenderNode;\r\n    /**@internal */\r\n    depthTextureMode: DepthTextureMode;\r\n\r\n    opaqueTexture: InternalRenderTarget;\r\n\r\n    blitOpaqueBuffer: CommandBuffer = new CommandBuffer();\r\n\r\n    private _enableOpaqueTexture: boolean;\r\n\r\n    public get enableOpaqueTexture(): boolean {\r\n        return this._enableOpaqueTexture;\r\n    }\r\n    public set enableOpaqueTexture(value: boolean) {\r\n        this._enableOpaqueTexture = value;\r\n    }\r\n\r\n    clearColor: Color;\r\n    clearFlag: number;\r\n\r\n    /**@internal */\r\n    camera: WebCameraNodeData;\r\n\r\n    private _viewPort: Viewport;\r\n    setViewPort(value: Viewport) {\r\n        value.cloneTo(this._viewPort);\r\n    };\r\n\r\n    private _scissor: Vector4;\r\n    setScissor(value: Vector4) {\r\n        value.cloneTo(this._scissor);\r\n    }\r\n\r\n\r\n    private opaqueList: RenderListQueue;\r\n    private transparent: RenderListQueue;\r\n\r\n    private _zBufferParams: Vector4;\r\n    private _defaultNormalDepthColor;\r\n\r\n    constructor() {\r\n        this.opaqueList = new RenderListQueue(false);\r\n        this.transparent = new RenderListQueue(true);\r\n        this.cameraCullInfo = new CameraCullInfo();\r\n        this._zBufferParams = new Vector4();\r\n        this._scissor = new Vector4();\r\n        this._viewPort = new Viewport();\r\n        this._defaultNormalDepthColor = new Color(0.5, 0.5, 1.0, 0.0);\r\n        this.clearColor = new Color();\r\n\r\n        this.depthPipelineMode = \"ShadowCaster\";\r\n        this.depthNormalPipelineMode = \"DepthNormal\";\r\n    }\r\n\r\n    setCameraCullInfo(value: Camera): void {\r\n        this.cameraCullInfo.position = value._transform.position;\r\n        this.cameraCullInfo.cullingMask = value.cullingMask;\r\n        this.cameraCullInfo.staticMask = value.staticMask;\r\n        this.cameraCullInfo.boundFrustum = value.boundFrustum;\r\n        this.cameraCullInfo.useOcclusionCulling = value.useOcclusionCulling;\r\n    }\r\n\r\n    setBeforeForwardCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeForwardCmds = value;\r\n            value.forEach(element => {\r\n                element._apply(false);\r\n            });\r\n        }\r\n    }\r\n    setBeforeSkyboxCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeSkyboxCmds = value;\r\n            value.forEach(element => {\r\n                element._apply(false);\r\n            });\r\n        }\r\n\r\n    }\r\n    setBeforeTransparentCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeTransparentCmds = value;\r\n            value.forEach(element => {\r\n                element._apply(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染主流程（TODO:其他两个pass合并MulTargetRT）\r\n     * @param context \r\n     * @param list \r\n     */\r\n    render(context: WebGLRenderContext3D, list: WebBaseRenderNode[], count: number): void {\r\n        context.cameraUpdateMask++\r\n        this.opaqueList.clear();\r\n        this.transparent.clear();\r\n\r\n        var time = performance.now();//T_CameraMainCull Stat\r\n        RenderCullUtil.cullByCameraCullInfo(this.cameraCullInfo, list, count, this.opaqueList, this.transparent, context)\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_CameraMainCull] += (performance.now() - time);//Stat\r\n\r\n        time = performance.now();//T_Render_CameraOtherDest Stat\r\n        if ((this.depthTextureMode & DepthTextureMode.Depth) != 0) {\r\n            this._renderDepthPass(context);\r\n        }\r\n        if ((this.depthTextureMode & DepthTextureMode.DepthNormals) != 0) {\r\n            this._renderDepthNormalPass(context);\r\n        }\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_CameraOtherDest] += (performance.now() - time);//Stat\r\n\r\n        this._viewPort.cloneTo(WebGLForwardAddClusterRP._context3DViewPortCatch);\r\n        this._scissor.cloneTo(WebGLForwardAddClusterRP._contextScissorPortCatch);\r\n        this._mainPass(context);\r\n\r\n        this.opaqueList._batch.recoverData();\r\n    }\r\n\r\n    /**\r\n     * 渲染深度Pass\r\n     * @param context\r\n     * @param list\r\n     */\r\n    private _renderDepthPass(context: WebGLRenderContext3D): void {\r\n        context.pipelineMode = this.depthPipelineMode;\r\n        var viewport = this._viewPort;\r\n        var shadervalue = context.sceneData;\r\n        shadervalue.addDefine(DepthPass.DEPTHPASS);\r\n        shadervalue.setVector(DepthPass.DEFINE_SHADOW_BIAS, Vector4.ZERO);\r\n        Viewport._tempViewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        Vector4.tempVec4.setValue(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        context.setViewPort(Viewport._tempViewport);\r\n        context.setScissor(Vector4.tempVec4);\r\n        context.setRenderTarget(this.depthTarget, RenderClearFlag.Depth);\r\n        context.setClearData(RenderClearFlag.Depth, Color.BLACK, 1, 0);\r\n\r\n        // render\r\n        this.opaqueList.renderQueue(context);\r\n        Stat.depthCastDrawCall += this.opaqueList.elements.length;\r\n        //渲染完后传入使用的参数\r\n        var far = this.camera.farplane;\r\n        var near = this.camera.nearplane;\r\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n        context.cameraData.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\r\n\r\n        context.cameraData.setVector(DepthPass.DEPTHZBUFFERPARAMS, this._zBufferParams);\r\n        shadervalue.removeDefine(DepthPass.DEPTHPASS);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param context\r\n     * @private\r\n     */\r\n    private _transparentListRender(context: WebGLRenderContext3D) {\r\n        this.transparent.renderQueue(context);\r\n        Stat.transDrawCall+=this.transparent.elements.length;\r\n    }\r\n\r\n    /**\r\n     * 渲染非透明物体Pass\r\n     * @param context \r\n     * @param list\r\n     */\r\n    private _opaqueListRender(context: WebGLRenderContext3D) {\r\n        this.opaqueList.renderQueue(context);\r\n        Stat.opaqueDrawCall+=this.opaqueList.elements.length;\r\n    }\r\n\r\n    /**\r\n     * 渲染法线深度Pass\r\n     * @param context \r\n     * @param list\r\n     */\r\n    private _renderDepthNormalPass(context: WebGLRenderContext3D): void {\r\n        context.pipelineMode = this.depthNormalPipelineMode;\r\n        //传入shader该传的值\r\n        var viewport = this._viewPort;\r\n        Viewport._tempViewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        Vector4.tempVec4.setValue(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        context.setViewPort(Viewport._tempViewport);\r\n        context.setScissor(Vector4.tempVec4);\r\n        context.setClearData(RenderClearFlag.Color | RenderClearFlag.Depth, this._defaultNormalDepthColor, 1, 0);\r\n        context.setRenderTarget(this.depthNormalTarget, RenderClearFlag.Color | RenderClearFlag.Depth);\r\n        this.opaqueList.renderQueue(context);\r\n        Stat.depthCastDrawCall += this.opaqueList.elements.length;\r\n    }\r\n\r\n    private opaqueTexturePass(context: WebGLRenderContext3D) {\r\n        let commanbuffer = this.blitOpaqueBuffer;\r\n        commanbuffer._apply(false);\r\n        context.runCMDList(commanbuffer._renderCMDs);\r\n    }\r\n\r\n    private _mainPass(context: WebGLRenderContext3D): void {\r\n        context.pipelineMode = this.pipelineMode;\r\n        this._rendercmd(this.beforeForwardCmds, context);\r\n        this._recoverRenderContext3D(context);\r\n        context.setClearData(this.clearFlag, this.clearColor, 1, 0);\r\n\r\n        var time = performance.now();//T_Render_OpaqueRender Stat\r\n        this.enableOpaque && this._opaqueListRender(context);\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_OpaqueRender] += (performance.now() - time);//Stat\r\n\r\n        this._rendercmd(this.beforeSkyboxCmds, context);\r\n\r\n        if (this.skyRenderNode) {\r\n            let skyRenderNode = <WebBaseRenderNode>this.skyRenderNode;\r\n            let skyRenderElement = skyRenderNode.renderelements[0] as WebGLRenderElement3D;\r\n            context.drawRenderElementOne(skyRenderElement);\r\n        }\r\n\r\n        if (this.enableOpaque) {\r\n            this.opaqueTexturePass(context);\r\n        }\r\n\r\n        this._rendercmd(this.beforeTransparentCmds, context);\r\n        this._recoverRenderContext3D(context);\r\n\r\n        time = performance.now();//T_Render_TransparentRender Stat\r\n        this.transparent && this._transparentListRender(context);\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_TransparentRender] += (performance.now() - time);//Stat\r\n\r\n    }\r\n\r\n    /**\r\n     * @param cmds\r\n     * @param context\r\n     * @private\r\n     */\r\n    private _rendercmd(cmds: Array<CommandBuffer>, context: WebGLRenderContext3D) {\r\n        if (!cmds || cmds.length == 0)\r\n            return;\r\n        var time = performance.now();//T_Render_CameraEventCMD Stat\r\n        cmds.forEach(function (value) {\r\n            context.runCMDList(value._renderCMDs);\r\n        });\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_CameraEventCMD] += (performance.now() - time);//Stat\r\n    }\r\n\r\n    private _recoverRenderContext3D(context: WebGLRenderContext3D) {\r\n        const cacheViewPor = WebGLForwardAddClusterRP._context3DViewPortCatch;\r\n        const cacheScissor = WebGLForwardAddClusterRP._contextScissorPortCatch;\r\n        context.setViewPort(cacheViewPor);\r\n        context.setScissor(cacheScissor);\r\n        context.setRenderTarget(this.destTarget, RenderClearFlag.Nothing);\r\n    }\r\n\r\n}","import { Config3D } from \"../../../../Config3D\";\r\nimport { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderPassStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { UnifromBufferData } from \"../../../RenderEngine/UniformBufferData\";\r\nimport { UniformBufferObject } from \"../../../RenderEngine/UniformBufferObject\";\r\nimport { BaseCamera } from \"../../../d3/core/BaseCamera\";\r\nimport { ShadowMode } from \"../../../d3/core/light/ShadowMode\";\r\nimport { SpotLightCom } from \"../../../d3/core/light/SpotLightCom\";\r\nimport { CommandBuffer } from \"../../../d3/core/render/command/CommandBuffer\";\r\nimport { Scene3DShaderDeclaration } from \"../../../d3/core/scene/Scene3DShaderDeclaration\";\r\nimport { ShadowCasterPass } from \"../../../d3/shadowMap/ShadowCasterPass\";\r\nimport { CameraCullInfo, ShadowSpotData } from \"../../../d3/shadowMap/ShadowSliceData\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { RenderCullUtil } from \"../../DriverCommon/RenderCullUtil\";\r\nimport { RenderListQueue } from \"../../DriverCommon/RenderListQueue\";\r\nimport { InternalRenderTarget } from \"../../DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { WebBaseRenderNode } from \"../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebSpotLight } from \"../../RenderModuleData/WebModuleData/3D/WebSpotLight\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\n\r\n\r\nexport class WebGLSpotLightShadowRP {\r\n    destTarget: InternalRenderTarget;\r\n    /**@internal */\r\n    shadowCasterCommanBuffer: CommandBuffer[];\r\n    /**light */\r\n    /**@internal */\r\n    private _light: WebSpotLight;\r\n    /**@internal */\r\n    private _lightPos: Vector3;\r\n    /**@internal */\r\n    private _lightWorldMatrix: Matrix4x4;\r\n    /**@internal */\r\n    private _shadowResolution: number;\r\n    /**@internal */\r\n    private _spotAngle: number;\r\n    /**@internal */\r\n    private _spotRange: number;\r\n    /**@internal */\r\n    private _shadowStrength: number;\r\n    /**@internal */\r\n    private _shadowDepthBias: number;\r\n    /**@internal */\r\n    private _shadowNormalBias: number;\r\n    /**@internal */\r\n    private _shadowMode: ShadowMode;\r\n\r\n    //caculate\r\n    /** @internal */\r\n    private _shadowSpotData: ShadowSpotData;\r\n    /** @internal */\r\n    private _shadowSpotMapSize: Vector4 = new Vector4();\r\n    /** @internal */\r\n    private _shadowSpotMatrices: Matrix4x4 = new Matrix4x4();\r\n    /**@internal */\r\n    private _shadowBias: Vector4;\r\n\r\n    private _renderQueue: RenderListQueue;\r\n\r\n    set light(value: WebSpotLight) {\r\n        this._light = value;\r\n        this._shadowResolution = this._light.shadowResolution;\r\n        this._lightWorldMatrix = this._light.getWorldMatrix(this._lightWorldMatrix);\r\n        this._lightPos = this._light.transform.position;\r\n        this._spotAngle = this._light.spotAngle;\r\n        this._spotRange = this._light.spotRange;\r\n        this._shadowStrength = this._light.shadowStrength;\r\n        // this.destTarget && RenderTexture.recoverToPool(this.destTarget);// TODO 优化\r\n        //this.destTarget = ShadowUtils.getTemporaryShadowTexture(this._shadowResolution, this._shadowResolution, ShadowMapFormat.bit16);\r\n    }\r\n\r\n    get light(): WebSpotLight {\r\n        return this._light;\r\n    }\r\n\r\n    constructor() {\r\n        this._renderQueue = new RenderListQueue(false);\r\n        this._shadowSpotData = new ShadowSpotData();\r\n        this._lightWorldMatrix = new Matrix4x4();\r\n        this._shadowBias = new Vector4();\r\n    }\r\n\r\n    /**\r\n    * 更新阴影数据\r\n    */\r\n    update(context: WebGLRenderContext3D): void {\r\n        var shadowSpotData: ShadowSpotData = this._shadowSpotData;\r\n        this._getSpotLightShadowData(shadowSpotData, this._shadowResolution, this._shadowSpotMatrices, this._shadowSpotMapSize);\r\n    }\r\n\r\n    /**\r\n     * render\r\n     * @param context \r\n     * @param list\r\n     */\r\n    render(context: WebGLRenderContext3D, list: WebBaseRenderNode[], count: number): void {\r\n\r\n        let originCameraData = context.cameraData;\r\n\r\n        var shaderValues: WebGLShaderData = context.sceneData;\r\n        context.pipelineMode = \"ShadowCaster\";\r\n        context.setRenderTarget(this.destTarget, RenderClearFlag.Depth);\r\n        var shadowSpotData: ShadowSpotData = this._shadowSpotData;\r\n        this._getShadowBias(shadowSpotData.resolution, this._shadowBias);\r\n        this._setupShadowCasterShaderValues(shaderValues, shadowSpotData, this._shadowBias);\r\n        //cull\r\n        var time = performance.now();//T_ShadowMapCull Stat\r\n        RenderCullUtil.cullSpotShadow(shadowSpotData.cameraCullInfo, list, count, this._renderQueue, context);\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_ShadowMapCull] += (performance.now() - time);//Stat\r\n\r\n        context.cameraData = <WebGLShaderData>shadowSpotData.cameraShaderValue;\r\n        context.cameraUpdateMask++;;\r\n        //if (this._renderQueue._elements.length > 0) {\r\n        Viewport._tempViewport.set(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n        Vector4.tempVec4.setValue(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n        //} else {\r\n        //    Viewport._tempViewport.set(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n        //    Vector4.tempVec4.setValue(shadowSpotData.offsetX, shadowSpotData.offsetY, shadowSpotData.resolution, shadowSpotData.resolution);\r\n        //}\r\n        context.setViewPort(Viewport._tempViewport);\r\n        context.setScissor(Vector4.tempVec4);\r\n\r\n        if (shadowSpotData.cameraUBO && shadowSpotData.cameraUBData) {\r\n            shadowSpotData.cameraUBO.setDataByUniformBufferData(shadowSpotData.cameraUBData);\r\n        }\r\n\r\n        context.setClearData(RenderClearFlag.Depth, Color.BLACK, 1, 0);\r\n        this._renderQueue.renderQueue(context);\r\n        Stat.shadowMapDrawCall += this._renderQueue.elements.length;\r\n        this._applyCasterPassCommandBuffer(context);\r\n        this._applyRenderData(context.sceneData, context.cameraData);\r\n        this._renderQueue._batch.recoverData();\r\n        context.cameraData = originCameraData;\r\n        context.cameraUpdateMask++;\r\n    }\r\n\r\n\r\n    /** \r\n    * @internal\r\n    */\r\n    private _getSpotLightShadowData(shadowSpotData: ShadowSpotData, resolution: number, shadowSpotMatrices: Matrix4x4, shadowMapSize: Vector4) {\r\n        var out: Vector3 = shadowSpotData.position = this._lightPos;\r\n        shadowSpotData.resolution = resolution;\r\n        shadowMapSize.setValue(1.0 / resolution, 1.0 / resolution, resolution, resolution);\r\n        shadowSpotData.offsetX = 0;\r\n        shadowSpotData.offsetY = 0;\r\n\r\n        var spotWorldMatrix: Matrix4x4 = this._lightWorldMatrix;\r\n        var viewMatrix: Matrix4x4 = shadowSpotData.viewMatrix;\r\n        var projectMatrix: Matrix4x4 = shadowSpotData.projectionMatrix;\r\n        var viewProjectMatrix: Matrix4x4 = shadowSpotData.viewProjectMatrix;\r\n        var BoundFrustum = shadowSpotData.cameraCullInfo.boundFrustum;\r\n        spotWorldMatrix.invert(viewMatrix);\r\n        Matrix4x4.createPerspective(3.1416 * this._spotAngle / 180.0, 1, 0.1, this._spotRange, projectMatrix);\r\n        Matrix4x4.multiply(projectMatrix, viewMatrix, viewProjectMatrix);\r\n        BoundFrustum.matrix = viewProjectMatrix;\r\n        viewProjectMatrix.cloneTo(shadowSpotMatrices);\r\n        shadowSpotData.cameraCullInfo.position = out;\r\n    }\r\n\r\n    /**\r\n     * get shadow bias\r\n     * @param shadowResolution \r\n     * @param out \r\n     */\r\n    private _getShadowBias(shadowResolution: number, out: Vector4): void {\r\n        // For perspective projections, shadow texel size varies with depth\r\n        // It will only work well if done in receiver side in the pixel shader. Currently We\r\n        // do bias on caster side in vertex shader. When we add shader quality tiers we can properly\r\n        // handle this. For now, as a poor approximation we do a constant bias and compute the size of\r\n        // the frustum as if it was orthogonal considering the size at mid point between near and far planes.\r\n        // Depending on how big the light range is, it will be good enough with some tweaks in bias\r\n        var frustumSize = Math.tan(this._spotAngle * 0.5 * MathUtils3D.Deg2Rad) * this._spotRange;\r\n\r\n        // depth and normal bias scale is in shadowmap texel size in world space\r\n        var texelSize: number = frustumSize / shadowResolution;\r\n        var depthBias: number = -this._light.shadowDepthBias * texelSize;\r\n        var normalBias: number = -this._light.shadowNormalBias * texelSize;\r\n\r\n        if (this._shadowMode == ShadowMode.SoftHigh) {\r\n            // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\r\n            // This is not true with PCF. Ideally we need to do either\r\n            // cone base bias (based on distance to center sample)\r\n            // or receiver place bias based on derivatives.\r\n            // For now we scale it by the PCF kernel size (5x5)\r\n            const kernelRadius: number = 2.5;\r\n            depthBias *= kernelRadius;\r\n            normalBias *= kernelRadius;\r\n        }\r\n        out.setValue(depthBias, normalBias, 0.0, 0.0);\r\n    }\r\n\r\n    private _setupShadowCasterShaderValues(shaderValues: WebGLShaderData, shadowSliceData: ShadowSpotData, shadowBias: Vector4): void {\r\n        shaderValues.setVector(ShadowCasterPass.SHADOW_BIAS, shadowBias);\r\n        var cameraSV = <WebGLShaderData>shadowSliceData.cameraShaderValue;//TODO:should optimization with shader upload.\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWMATRIX, shadowSliceData.viewMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.PROJECTMATRIX, shadowSliceData.projectionMatrix);\r\n        cameraSV.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n        shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX, shadowSliceData.viewProjectMatrix);\r\n    }\r\n\r\n    /**\r\n     * apply shadowCast cmd array\r\n     */\r\n    private _applyCasterPassCommandBuffer(context: WebGLRenderContext3D) {\r\n        if (!this.shadowCasterCommanBuffer || this.shadowCasterCommanBuffer.length == 0)\r\n            return;\r\n        this.shadowCasterCommanBuffer.forEach(function (value) {\r\n            //value._context = context;TODO\r\n            value._apply();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置聚光接受阴影的模式\r\n     * @internal\r\n     * @param shaderValues 渲染数据\r\n     */\r\n    private _applyRenderData(sceneData: WebGLShaderData, cameraData: WebGLShaderData): void {\r\n        var spotLight: WebSpotLight = this._light;\r\n        switch (spotLight.shadowMode) {\r\n            case ShadowMode.Hard:\r\n                sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                break;\r\n            case ShadowMode.SoftLow:\r\n                sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                break;\r\n            case ShadowMode.SoftHigh:\r\n                sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH);\r\n                sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW);\r\n                break;\r\n        }\r\n        sceneData.setMatrix4x4(ShadowCasterPass.SHADOW_SPOTMATRICES, this._shadowSpotMatrices)\r\n        sceneData.setVector(ShadowCasterPass.SHADOW_SPOTMAP_SIZE, this._shadowSpotMapSize);\r\n    }\r\n}","import { CommandBuffer } from \"../../../d3/core/render/command/CommandBuffer\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { WebGLDirectLightShadowRP } from \"./WebGLDirectLightShadowRP\";\r\nimport { WebGLForwardAddClusterRP } from \"./WebGLForwardAddClusterRP\";\r\nimport { WebGLSpotLightShadowRP } from \"./WebGLSpotLightShadowRP\";\r\n\r\n\r\nexport class WebGLForwardAddRP {\r\n    constructor() {\r\n        this.directLightShadowPass = new WebGLDirectLightShadowRP();\r\n        this.spotLightShadowPass = new WebGLSpotLightShadowRP();\r\n        this.shadowParams = new Vector4();\r\n        this.renderpass = new WebGLForwardAddClusterRP();\r\n        this.finalize = new CommandBuffer();\r\n    }\r\n\r\n    setBeforeImageEffect(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this._beforeImageEffectCMDS = value;\r\n            value.forEach(element => {\r\n                element._apply(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    setAfterEventCmd(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this._afterAllRenderCMDS = value;\r\n            value.forEach(element => {\r\n                element._apply(false);\r\n            });\r\n        }\r\n    }\r\n    /**是否开启阴影 */\r\n    shadowCastPass: boolean = false;\r\n\r\n    /**directlight shadow */\r\n    directLightShadowPass: WebGLDirectLightShadowRP;\r\n\r\n    /**enable directlight */\r\n    enableDirectLightShadow: boolean = false;\r\n\r\n    /**spot shadow */\r\n    spotLightShadowPass: WebGLSpotLightShadowRP;\r\n\r\n    /**enable spot */\r\n    enableSpotLightShadowPass: boolean = false;\r\n\r\n    shadowParams: Vector4;\r\n\r\n    /**Render end commanbuffer */\r\n    /**@internal */\r\n    _afterAllRenderCMDS: Array<CommandBuffer>;\r\n    /**@internal */\r\n    _beforeImageEffectCMDS: Array<CommandBuffer>;\r\n    \r\n    enablePostProcess: boolean = true;\r\n    /**@internal */\r\n    postProcess: CommandBuffer;\r\n    /**main pass */\r\n    renderpass: WebGLForwardAddClusterRP;\r\n\r\n    finalize: CommandBuffer;\r\n}","import { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderPassStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { RenderTargetFormat } from \"../../../RenderEngine/RenderEnum/RenderTargetFormat\";\r\nimport { Camera, CameraClearFlags, CameraEventFlags } from \"../../../d3/core/Camera\";\r\nimport { ShadowMode } from \"../../../d3/core/light/ShadowMode\";\r\nimport { RenderContext3D } from \"../../../d3/core/render/RenderContext3D\";\r\nimport { CommandBuffer } from \"../../../d3/core/render/command/CommandBuffer\";\r\nimport { Scene3D } from \"../../../d3/core/scene/Scene3D\";\r\nimport { Scene3DShaderDeclaration } from \"../../../d3/core/scene/Scene3DShaderDeclaration\";\r\nimport { DepthPass } from \"../../../d3/depthMap/DepthPass\";\r\nimport { ShadowCasterPass } from \"../../../d3/shadowMap/ShadowCasterPass\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { DepthTextureMode, RenderTexture } from \"../../../resource/RenderTexture\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IRender3DProcess } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { WebBaseRenderNode } from \"../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebDirectLight } from \"../../RenderModuleData/WebModuleData/3D/WebDirectLight\";\r\nimport { WebCameraNodeData } from \"../../RenderModuleData/WebModuleData/3D/WebModuleData\";\r\nimport { WebSpotLight } from \"../../RenderModuleData/WebModuleData/3D/WebSpotLight\";\r\nimport { WebGLInternalRT } from \"../RenderDevice/WebGLInternalRT\";\r\nimport { WebGLForwardAddRP } from \"./WebGLForwardAddRP\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\n\r\nconst viewport = new Viewport(0, 0, 0, 0);\r\nconst offsetScale = new Vector4();\r\n\r\nexport class WebGLRender3DProcess implements IRender3DProcess {\r\n\r\n    private renderpass: WebGLForwardAddRP = new WebGLForwardAddRP();\r\n\r\n    initRenderpass(camera: Camera, context: WebGLRenderContext3D) {\r\n        let renderpass = this.renderpass.renderpass;\r\n\r\n        let renderRT = camera._getRenderTexture();\r\n\r\n        // clear\r\n        let clearConst = 0;\r\n        let clearFlag: CameraClearFlags = camera.clearFlag;\r\n\r\n        if (clearFlag == CameraClearFlags.Sky && !camera.scene.skyRenderer._isAvailable()) {\r\n            clearFlag = CameraClearFlags.SolidColor;\r\n        }\r\n\r\n        let hasStencil = renderRT.depthStencilFormat == RenderTargetFormat.DEPTHSTENCIL_24_8;\r\n        let stencilFlag = hasStencil ? RenderClearFlag.Stencil : 0;\r\n\r\n        switch (clearFlag) {\r\n            case CameraClearFlags.DepthOnly:\r\n            case CameraClearFlags.Sky:\r\n                clearConst = RenderClearFlag.Depth | stencilFlag;\r\n                break;\r\n            case CameraClearFlags.Nothing:\r\n                clearConst = 0;\r\n                break;\r\n            case CameraClearFlags.ColorOnly:\r\n                clearConst = RenderClearFlag.Color;\r\n                break;\r\n            case CameraClearFlags.SolidColor:\r\n            default:\r\n                clearConst = RenderClearFlag.Color | RenderClearFlag.Depth | stencilFlag;\r\n                break;\r\n        }\r\n\r\n        let clearValue = camera._linearClearColor;\r\n        clearValue = renderRT.gammaCorrection != 1 ? camera.clearColor : camera._linearClearColor;\r\n\r\n        renderpass.camera = <WebCameraNodeData>camera._renderDataModule;\r\n\r\n        renderpass.destTarget = renderRT._renderTarget;\r\n        renderpass.clearFlag = clearConst;\r\n        renderpass.clearColor = clearValue;\r\n\r\n        let needInternalRT = camera._needInternalRenderTexture();\r\n\r\n        if (needInternalRT) {\r\n            viewport.set(0, 0, renderRT.width, renderRT.height);\r\n        }\r\n        else {\r\n            camera.viewport.cloneTo(viewport);\r\n        }\r\n\r\n        renderpass.setViewPort(viewport);\r\n        let scissor = Vector4.tempVec4;\r\n        scissor.setValue(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        // todo\r\n        renderpass.setScissor(scissor);\r\n\r\n        renderpass.enableOpaque = Stat.enableOpaque;\r\n        renderpass.enableTransparent = Stat.enableTransparent;\r\n        renderpass.enableCMD = Stat.enableCameraCMD;\r\n        renderpass.setBeforeSkyboxCmds(camera._cameraEventCommandBuffer[CameraEventFlags.BeforeSkyBox]);\r\n        renderpass.setBeforeForwardCmds(camera._cameraEventCommandBuffer[CameraEventFlags.BeforeForwardOpaque]);\r\n        renderpass.setBeforeTransparentCmds(camera._cameraEventCommandBuffer[CameraEventFlags.BeforeTransparent]);\r\n        this.renderpass.setBeforeImageEffect(camera._cameraEventCommandBuffer[CameraEventFlags.BeforeImageEffect]);\r\n        this.renderpass.setAfterEventCmd(camera._cameraEventCommandBuffer[CameraEventFlags.AfterEveryThing]);\r\n\r\n        renderpass.setCameraCullInfo(camera);\r\n\r\n        if (clearFlag == CameraClearFlags.Sky) {\r\n            renderpass.skyRenderNode = <WebBaseRenderNode>camera.scene.skyRenderer._baseRenderNode;\r\n        }\r\n        else {\r\n            renderpass.skyRenderNode = null;\r\n        }\r\n\r\n        // todo \r\n        renderpass.pipelineMode = RenderContext3D._instance.configPipeLineMode;\r\n\r\n        let enableShadow = Scene3D._updateMark % camera.scene._ShadowMapupdateFrequency == 0 && Stat.enableShadow;\r\n        this.renderpass.shadowCastPass = enableShadow;\r\n\r\n        if (enableShadow) {\r\n            let shadowParams = this.renderpass.shadowParams;\r\n            shadowParams.setValue(0, 0, 0, 0);\r\n\r\n            // direction light shadow\r\n            let mainDirectionLight = camera.scene._mainDirectionLight;\r\n            let needDirectionShadow = mainDirectionLight && mainDirectionLight.shadowMode != ShadowMode.None;\r\n            this.renderpass.enableDirectLightShadow = needDirectionShadow;\r\n            if (needDirectionShadow) {\r\n                this.renderpass.directLightShadowPass.camera = <WebCameraNodeData>camera._renderDataModule;\r\n                this.renderpass.directLightShadowPass.light = <WebDirectLight>mainDirectionLight._dataModule;\r\n                let directionShadowMap = ILaya3D.Scene3D._shadowCasterPass.getDirectLightShadowMap(mainDirectionLight);\r\n                this.renderpass.directLightShadowPass.destTarget = directionShadowMap._renderTarget as WebGLInternalRT;\r\n                shadowParams.x = this.renderpass.directLightShadowPass.light.shadowStrength;\r\n\r\n                camera.scene._shaderValues.setTexture(ShadowCasterPass.SHADOW_MAP, directionShadowMap);\r\n            }\r\n\r\n            // spot light shadow\r\n            let mainSpotLight = camera.scene._mainSpotLight;\r\n            let needSpotShadow = mainSpotLight && mainSpotLight.shadowMode != ShadowMode.None;\r\n            this.renderpass.enableSpotLightShadowPass = needSpotShadow;\r\n            if (needSpotShadow) {\r\n                this.renderpass.spotLightShadowPass.light = <WebSpotLight>mainSpotLight._dataModule;\r\n                let spotShadowMap = ILaya3D.Scene3D._shadowCasterPass.getSpotLightShadowPassData(mainSpotLight);\r\n                this.renderpass.spotLightShadowPass.destTarget = spotShadowMap._renderTarget;\r\n                shadowParams.y = this.renderpass.spotLightShadowPass.light.shadowStrength;\r\n\r\n                camera.scene._shaderValues.setTexture(ShadowCasterPass.SHADOW_SPOTMAP, spotShadowMap);\r\n            }\r\n            camera.scene._shaderValues.setVector(ShadowCasterPass.SHADOW_PARAMS, this.renderpass.shadowParams);\r\n        }\r\n\r\n        renderpass.blitOpaqueBuffer.clear();\r\n        let needBlitOpaque = camera.opaquePass;\r\n        renderpass.enableOpaqueTexture = needBlitOpaque;\r\n        if (needBlitOpaque) {\r\n            renderpass.opaqueTexture = camera._opaqueTexture._renderTarget;\r\n            renderpass.blitOpaqueBuffer.blitScreenQuad(renderRT, camera._opaqueTexture);\r\n        }\r\n\r\n        if (Stat.enablePostprocess && camera.postProcess && camera.postProcess.enable && camera.postProcess.effects.length > 0) {\r\n            this.renderpass.enablePostProcess = Stat.enablePostprocess;\r\n            this.renderpass.postProcess = camera.postProcess._context.command;\r\n            camera.postProcess._render(camera);\r\n            this.renderpass.postProcess._apply(false);\r\n        } else {\r\n            this.renderpass.enablePostProcess = false;\r\n        }\r\n\r\n        this.renderpass.finalize.clear();\r\n        if (!this.renderpass.enablePostProcess && needInternalRT && camera._offScreenRenderTexture) {\r\n            let dst = camera._offScreenRenderTexture;\r\n\r\n            offsetScale.setValue(camera.normalizedViewport.x, 1.0 - camera.normalizedViewport.y, renderRT.width / dst.width, -renderRT.height / dst.height);\r\n            this.renderpass.finalize.blitScreenQuad(renderRT, camera._offScreenRenderTexture, offsetScale);\r\n        }\r\n\r\n    }\r\n\r\n    renderDepth(camera: Camera) {\r\n        let depthMode = camera.depthTextureMode;\r\n        if (camera.postProcess && camera.postProcess.enable) {\r\n            depthMode |= camera.postProcess.cameraDepthTextureMode;\r\n        }\r\n        if ((depthMode & DepthTextureMode.Depth) != 0) {\r\n            let needDepthTex = camera.canblitDepth && camera._internalRenderTexture.depthStencilTexture;\r\n            if (needDepthTex) {\r\n                camera.depthTexture = camera._cacheDepthTexture.depthStencilTexture;\r\n                // @ts-ignore\r\n                Camera.depthPass._depthTexture = camera.depthTexture;\r\n                camera._shaderValues.setTexture(DepthPass.DEPTHTEXTURE, camera.depthTexture);\r\n                Camera.depthPass._setupDepthModeShaderValue(DepthTextureMode.Depth, camera);\r\n                depthMode &= ~DepthTextureMode.Depth;\r\n            }\r\n            else {\r\n                Camera.depthPass.getTarget(camera, DepthTextureMode.Depth, camera.depthTextureFormat);\r\n                this.renderpass.renderpass.depthTarget = (<RenderTexture>camera.depthTexture)._renderTarget;\r\n                camera._shaderValues.setTexture(DepthPass.DEPTHTEXTURE, camera.depthTexture);\r\n            }\r\n        }\r\n        if ((depthMode & DepthTextureMode.DepthNormals) != 0) {\r\n            Camera.depthPass.getTarget(camera, DepthTextureMode.DepthNormals, camera.depthTextureFormat);\r\n            this.renderpass.renderpass.depthNormalTarget = (<RenderTexture>camera.depthNormalTexture)._renderTarget;\r\n            camera._shaderValues.setTexture(DepthPass.DEPTHNORMALSTEXTURE, camera.depthNormalTexture);\r\n        }\r\n        this.renderpass.renderpass.depthTextureMode = depthMode;\r\n    }\r\n\r\n    fowardRender(context: WebGLRenderContext3D, camera: Camera): void {\r\n        let time: number;\r\n        this.initRenderpass(camera, context);\r\n\r\n        this.renderDepth(camera);\r\n\r\n        let renderList = <WebBaseRenderNode[]>camera.scene.sceneRenderableManager.renderBaselist.elements;\r\n        let count = camera.scene.sceneRenderableManager.renderBaselist.length;\r\n\r\n        this.renderFowarAddCameraPass(context, this.renderpass, renderList, count);\r\n\r\n        Camera.depthPass.cleanUp();\r\n    }\r\n\r\n    renderFowarAddCameraPass(context: WebGLRenderContext3D, renderpass: WebGLForwardAddRP, list: WebBaseRenderNode[], count: number): void {\r\n        //先渲染ShadowTexture\r\n        var time = performance.now();//T_Render_ShadowPassMode Stat\r\n        if (renderpass.shadowCastPass) {\r\n            if (renderpass.enableDirectLightShadow) {\r\n                context.sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n                context.sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n                renderpass.directLightShadowPass.update(context);\r\n                renderpass.directLightShadowPass.render(context, list, count);\r\n            }\r\n            if (renderpass.enableSpotLightShadowPass) {\r\n                context.sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n                context.sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n                renderpass.spotLightShadowPass.update(context);\r\n                renderpass.spotLightShadowPass.render(context, list, count);\r\n            }\r\n\r\n            if (renderpass.enableDirectLightShadow) {\r\n                context.sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n            }\r\n            else {\r\n                context.sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW);\r\n            }\r\n            if (renderpass.enableSpotLightShadowPass) {\r\n                context.sceneData.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n            }\r\n            else {\r\n                context.sceneData.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT);\r\n            }\r\n        }\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_ShadowPassMode] += (performance.now() - time);//Stat\r\n\r\n        renderpass.renderpass.render(context, list, count);\r\n        renderpass._beforeImageEffectCMDS && this._rendercmd(renderpass._beforeImageEffectCMDS, context)\r\n\r\n        if (renderpass.enablePostProcess) {\r\n            time = performance.now();//T_Render_PostProcess Stat\r\n            renderpass.postProcess && this._renderPostProcess(renderpass.postProcess, context);\r\n            Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_PostProcess] += (performance.now() - time);//Stat\r\n        }\r\n        renderpass._afterAllRenderCMDS && this._rendercmd(renderpass._afterAllRenderCMDS, context);\r\n\r\n        renderpass.finalize._apply(false);\r\n        context.runCMDList(renderpass.finalize._renderCMDs);\r\n    }\r\n\r\n    /**\r\n     * @param cmds\r\n     * @param context\r\n     * @private\r\n     */\r\n    private _rendercmd(cmds: CommandBuffer[], context: WebGLRenderContext3D) {\r\n        if (!cmds || cmds.length == 0)\r\n            return;\r\n\r\n        var time = performance.now();//T_Render_CameraEventCMD Stat\r\n        cmds.forEach(function (value) {\r\n            context.runCMDList(value._renderCMDs);\r\n        });\r\n        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_Render_CameraEventCMD] += (performance.now() - time);//Stat\r\n    }\r\n\r\n    /**\r\n     * @param postprocessCMD\r\n     * @param context\r\n     * @private\r\n     */\r\n    private _renderPostProcess(postprocessCMD: CommandBuffer, context: WebGLRenderContext3D) {\r\n        context.runCMDList(postprocessCMD._renderCMDs);\r\n    }\r\n\r\n}","import { RenderClearFlag } from \"../../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { SubShader } from \"../../../../RenderEngine/RenderShader/SubShader\";\r\nimport { Command } from \"../../../../d3/core/render/command/Command\";\r\nimport { Color } from \"../../../../maths/Color\";\r\nimport { Matrix4x4 } from \"../../../../maths/Matrix4x4\";\r\nimport { Vector2 } from \"../../../../maths/Vector2\";\r\nimport { Vector3 } from \"../../../../maths/Vector3\";\r\nimport { Vector4 } from \"../../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../../maths/Viewport\";\r\nimport { BaseTexture } from \"../../../../resource/BaseTexture\";\r\nimport { BlitQuadCMDData, DrawElementCMDData, DrawNodeCMDData, SetRenderTargetCMD, SetViewportCMD, RenderCMDType, SetRenderDataCMD, SetShaderDefineCMD } from \"../../../DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { InternalRenderTarget } from \"../../../DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { InternalTexture } from \"../../../DriverDesign/RenderDevice/InternalTexture\";\r\nimport { ShaderDataItem, ShaderDataType } from \"../../../DriverDesign/RenderDevice/ShaderData\";\r\nimport { ShaderDefine } from \"../../../RenderModuleData/Design/ShaderDefine\";\r\nimport { WebBaseRenderNode } from \"../../../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { WebGLShaderData } from \"../../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLInternalRT } from \"../../RenderDevice/WebGLInternalRT\";\r\nimport { WebGLRenderContext3D } from \"../WebGLRenderContext3D\";\r\nimport { WebGLRenderElement3D } from \"../WebGLRenderElement3D\";\r\n\r\n\r\nexport class WebGLDrawNodeCMDData extends DrawNodeCMDData {\r\n    type: RenderCMDType;\r\n\r\n    protected _node: WebBaseRenderNode;\r\n    protected _destShaderData: WebGLShaderData;\r\n    protected _destSubShader: SubShader;\r\n    protected _subMeshIndex: number;\r\n\r\n    get node(): WebBaseRenderNode {\r\n        return this._node;\r\n    }\r\n\r\n    set node(value: WebBaseRenderNode) {\r\n        this._node = value;\r\n    }\r\n\r\n    get destShaderData(): WebGLShaderData {\r\n        return this._destShaderData;\r\n    }\r\n\r\n    set destShaderData(value: WebGLShaderData) {\r\n        this._destShaderData = value;\r\n    }\r\n\r\n    get destSubShader(): SubShader {\r\n        return this._destSubShader;\r\n    }\r\n\r\n    set destSubShader(value: SubShader) {\r\n        this._destSubShader = value;\r\n    }\r\n\r\n    get subMeshIndex(): number {\r\n        return this._subMeshIndex;\r\n    }\r\n\r\n    set subMeshIndex(value: number) {\r\n        this._subMeshIndex = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.DrawNode;\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        if (this.destShaderData && this.destSubShader) {\r\n            this.node._renderUpdatePre(context);\r\n            if (this.subMeshIndex == -1) {\r\n                this.node.renderelements.forEach(element => {\r\n                    let oriSubShader = element.subShader;\r\n                    let oriMatShaderData = element.materialShaderData;\r\n                    element.subShader = this._destSubShader;\r\n                    element.materialShaderData = this._destShaderData;\r\n                    context.drawRenderElementOne(element as WebGLRenderElement3D);\r\n                    element.subShader = oriSubShader;\r\n                    element.materialShaderData = oriMatShaderData;\r\n                });\r\n            }\r\n            else {\r\n                let element = this.node.renderelements[this.subMeshIndex];\r\n                let oriSubShader = element.subShader;\r\n                let oriMatShaderData = element.materialShaderData;\r\n                element.subShader = this._destSubShader;\r\n                element.materialShaderData = this._destShaderData;\r\n                context.drawRenderElementOne(element as WebGLRenderElement3D);\r\n                element.subShader = oriSubShader;\r\n                element.materialShaderData = oriMatShaderData;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class WebGLBlitQuadCMDData extends BlitQuadCMDData {\r\n    type: RenderCMDType;\r\n    private _sourceTexelSize: Vector4;\r\n    protected _dest: WebGLInternalRT;\r\n    protected _viewport: Viewport;\r\n    protected _source: InternalTexture;\r\n    protected _scissor: Vector4;\r\n    protected _offsetScale: Vector4;\r\n    protected _element: WebGLRenderElement3D;\r\n\r\n    get dest(): WebGLInternalRT {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: WebGLInternalRT) {\r\n        this._dest = value;\r\n    }\r\n\r\n    get viewport(): Viewport {\r\n        return this._viewport;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        value.cloneTo(this._viewport);\r\n    }\r\n\r\n    get scissor(): Vector4 {\r\n        return this._scissor;\r\n    }\r\n\r\n    set scissor(value: Vector4) {\r\n        value.cloneTo(this._scissor);\r\n    }\r\n\r\n    get source(): InternalTexture {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: InternalTexture) {\r\n        this._source = value;\r\n        if (this._source) {\r\n            this._sourceTexelSize.setValue(1.0 / this._source.width, 1.0 / this._source.height, this._source.width, this._source.height);\r\n        }\r\n    }\r\n\r\n    get offsetScale(): Vector4 {\r\n        return this._offsetScale;\r\n    }\r\n\r\n    set offsetScale(value: Vector4) {\r\n        value.cloneTo(this._offsetScale);\r\n    }\r\n\r\n    get element(): WebGLRenderElement3D {\r\n        return this._element;\r\n    }\r\n    set element(value: WebGLRenderElement3D) {\r\n        this._element = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.Blit;\r\n        this._viewport = new Viewport();\r\n        this._scissor = new Vector4();\r\n        this._offsetScale = new Vector4();\r\n        this._sourceTexelSize = new Vector4();\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        this.element.materialShaderData._setInternalTexture(Command.SCREENTEXTURE_ID, this._source);\r\n        this.element.materialShaderData.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale);\r\n        this.element.materialShaderData.setVector(Command.MAINTEXTURE_TEXELSIZE_ID, this._sourceTexelSize);\r\n        context.setViewPort(this._viewport);\r\n        context.setScissor(this._scissor);\r\n        context.setRenderTarget(this.dest, RenderClearFlag.Nothing);\r\n        context.drawRenderElementOne(this.element);\r\n    }\r\n}\r\n\r\nexport class WebGLDrawElementCMDData extends DrawElementCMDData {\r\n    type: RenderCMDType;\r\n    private _elemets: WebGLRenderElement3D[];\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.DrawElement;\r\n    }\r\n\r\n    setRenderelements(value: WebGLRenderElement3D[]): void {\r\n        this._elemets = value;\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        if (this._elemets.length == 1) {\r\n            context.drawRenderElementOne(this._elemets[0]);\r\n        } else {\r\n            this._elemets.forEach(element => {\r\n                context.drawRenderElementOne(element);\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class WebGLSetViewportCMD extends SetViewportCMD {\r\n    type: RenderCMDType;\r\n    protected _viewport: Viewport;\r\n    protected _scissor: Vector4;\r\n\r\n    get viewport(): Viewport {\r\n        return this._viewport;\r\n    }\r\n\r\n    set viewport(value: Viewport) {\r\n        this._viewport = value;\r\n    }\r\n\r\n    get scissor(): Vector4 {\r\n        return this._scissor;\r\n    }\r\n\r\n    set scissor(value: Vector4) {\r\n        this._scissor = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.ChangeViewPort;\r\n        this.scissor = new Vector4();\r\n        this.viewport = new Viewport();\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        context.setViewPort(this.viewport);\r\n        context.setScissor(this.scissor);\r\n    }\r\n}\r\n\r\nconst viewport = new Viewport();\r\nconst scissor = new Vector4();\r\nexport class WebGLSetRenderTargetCMD extends SetRenderTargetCMD {\r\n    type: RenderCMDType;\r\n    protected _rt: InternalRenderTarget;\r\n    protected _clearFlag: number;\r\n    protected _clearColorValue: Color;\r\n    protected _clearDepthValue: number;\r\n    protected _clearStencilValue: number;\r\n\r\n    get rt(): InternalRenderTarget {\r\n        return this._rt;\r\n    }\r\n\r\n    set rt(value: InternalRenderTarget) {\r\n        this._rt = value;\r\n    }\r\n\r\n    get clearFlag(): number {\r\n        return this._clearFlag;\r\n    }\r\n    set clearFlag(value: number) {\r\n        this._clearFlag = value;\r\n    }\r\n\r\n    get clearColorValue(): Color {\r\n        return this._clearColorValue;\r\n    }\r\n\r\n    set clearColorValue(value: Color) {\r\n        value.cloneTo(this._clearColorValue);\r\n    }\r\n\r\n    get clearDepthValue(): number {\r\n        return this._clearDepthValue;\r\n    }\r\n\r\n    set clearDepthValue(value: number) {\r\n        this._clearDepthValue = value;\r\n    }\r\n\r\n    get clearStencilValue(): number {\r\n        return this._clearStencilValue;\r\n    }\r\n\r\n    set clearStencilValue(value: number) {\r\n        this._clearStencilValue = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.ChangeRenderTarget;\r\n        this._clearColorValue = new Color();\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        context.setRenderTarget(this.rt, RenderClearFlag.Nothing);\r\n        context.setClearData(this.clearFlag, this.clearColorValue, this.clearDepthValue, this.clearStencilValue);\r\n\r\n        if (this.rt) {\r\n            // todo\r\n            viewport.set(0, 0, this.rt._textures[0].width, this.rt._textures[0].height);\r\n            scissor.setValue(0, 0, this.rt._textures[0].width, this.rt._textures[0].height);\r\n            context.setViewPort(viewport);\r\n            context.setScissor(scissor);\r\n        }\r\n\r\n    }\r\n}\r\nexport class WebGLSetRenderData extends SetRenderDataCMD {\r\n    type: RenderCMDType;\r\n    protected _dataType: ShaderDataType;\r\n    protected _propertyID: number;\r\n    protected _dest: WebGLShaderData;\r\n    protected _value: ShaderDataItem;\r\n\r\n    data_v4: Vector4;\r\n    data_v3: Vector3;\r\n    data_v2: Vector2;\r\n    data_mat: Matrix4x4;\r\n    data_number: number;\r\n    data_texture: BaseTexture;\r\n    data_Color: Color;\r\n    data_Buffer: Float32Array;\r\n    get dataType(): ShaderDataType {\r\n        return this._dataType;\r\n    }\r\n\r\n    set dataType(value: ShaderDataType) {\r\n        this._dataType = value;\r\n    }\r\n\r\n    get propertyID(): number {\r\n        return this._propertyID;\r\n    }\r\n\r\n    set propertyID(value: number) {\r\n        this._propertyID = value;\r\n    }\r\n\r\n    get dest(): WebGLShaderData {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: WebGLShaderData) {\r\n        this._dest = value;\r\n    }\r\n\r\n    get value(): ShaderDataItem {\r\n        return this._value;\r\n    }\r\n    set value(value: ShaderDataItem) {\r\n        switch (this.dataType) {\r\n            case ShaderDataType.Int:\r\n            case ShaderDataType.Float:\r\n            case ShaderDataType.Bool:\r\n                this.data_number = value as number;\r\n                this._value = this.data_number;\r\n                break;\r\n            case ShaderDataType.Matrix4x4:\r\n                !this.data_mat && (this.data_mat = new Matrix4x4());\r\n                (value as Matrix4x4).cloneTo(this.data_mat);\r\n                this._value = this.data_mat;\r\n                break;\r\n            case ShaderDataType.Color:\r\n                !this.data_Color && (this.data_Color = new Color());\r\n                (value as Color).cloneTo(this.data_Color);\r\n                this._value = this.data_Color;\r\n                break;\r\n            case ShaderDataType.Texture2D:\r\n                this._value = this.data_texture = value as BaseTexture;\r\n                break;\r\n            case ShaderDataType.Vector4:\r\n                !this.data_v4 && (this.data_v4 = new Vector4());\r\n                (value as Vector4).cloneTo(this.data_v4);\r\n                this._value = this.data_v4;\r\n                break;\r\n            case ShaderDataType.Vector2:\r\n                !this.data_v2 && (this.data_v2 = new Vector2());\r\n                (value as Vector2).cloneTo(this.data_v2);\r\n                this._value = this.data_v2;\r\n                break;\r\n            case ShaderDataType.Vector3:\r\n                !this.data_v3 && (this.data_v3 = new Vector3());\r\n                (value as Vector3).cloneTo(this.data_v3);\r\n                this._value = this.data_v3;\r\n                break;\r\n            case ShaderDataType.Buffer:\r\n                this._value = this.data_Buffer = value as Float32Array;\r\n                break;\r\n            default:\r\n                //TODO  shaderDefine\r\n                break;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.ChangeData;\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        switch (this.dataType) {\r\n            case ShaderDataType.Int:\r\n                this.dest.setInt(this.propertyID as number, this.value as number);\r\n                break;\r\n            case ShaderDataType.Float:\r\n                this.dest.setNumber(this.propertyID as number, this.value as number);\r\n                break;\r\n            case ShaderDataType.Bool:\r\n                this.dest.setBool(this.propertyID as number, this.value as boolean);\r\n                break;\r\n            case ShaderDataType.Matrix4x4:\r\n                this.dest.setMatrix4x4(this.propertyID as number, this.value as Matrix4x4);\r\n                break;\r\n            case ShaderDataType.Color:\r\n                this.dest.setColor(this.propertyID as number, this.value as Color);\r\n                break;\r\n            case ShaderDataType.Texture2D:\r\n                this.dest.setTexture(this.propertyID as number, this.value as BaseTexture);\r\n                break;\r\n            case ShaderDataType.Vector4:\r\n                this.dest.setVector(this.propertyID as number, this.value as Vector4);\r\n                break;\r\n            case ShaderDataType.Vector2:\r\n                this.dest.setVector2(this.propertyID as number, this.value as Vector2);\r\n                break;\r\n            case ShaderDataType.Vector3:\r\n                this.dest.setVector3(this.propertyID as number, this.value as Vector3);\r\n                break;\r\n            case ShaderDataType.Buffer:\r\n                this.dest.setBuffer(this.propertyID as number, this.value as Float32Array);\r\n                break;\r\n            default:\r\n                //TODO  shaderDefine\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class WebGLSetShaderDefine extends SetShaderDefineCMD {\r\n    type: RenderCMDType;\r\n    protected _define: ShaderDefine;\r\n    protected _dest: WebGLShaderData;\r\n    protected _add: boolean;\r\n\r\n    get define(): ShaderDefine {\r\n        return this._define;\r\n    }\r\n\r\n    set define(value: ShaderDefine) {\r\n        this._define = value;\r\n    }\r\n\r\n    get dest(): WebGLShaderData {\r\n        return this._dest;\r\n    }\r\n\r\n    set dest(value: WebGLShaderData) {\r\n        this._dest = value;\r\n    }\r\n\r\n    get add(): boolean {\r\n        return this._add;\r\n    }\r\n\r\n    set add(value: boolean) {\r\n        this._add = value;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.type = RenderCMDType.ChangeShaderDefine;\r\n    }\r\n\r\n    apply(context: WebGLRenderContext3D): void {\r\n        if (this.add) {\r\n            this._dest.addDefine(this.define);\r\n        } else {\r\n            this._dest.removeDefine(this.define);\r\n        }\r\n    }\r\n}","import { RenderClearFlag } from \"../../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { RenderPassStatisticsInfo } from \"../../../RenderEngine/RenderEnum/RenderStatInfo\";\r\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\r\nimport { LayaGL } from \"../../../layagl/LayaGL\";\r\nimport { Color } from \"../../../maths/Color\";\r\nimport { Vector4 } from \"../../../maths/Vector4\";\r\nimport { Viewport } from \"../../../maths/Viewport\";\r\nimport { FastSinglelist } from \"../../../utils/SingletonList\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IRenderContext3D, PipelineMode } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { IRenderCMD } from \"../../DriverDesign/3DRenderPass/IRendderCMD\";\r\nimport { InternalRenderTarget } from \"../../DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { WebCameraNodeData, WebSceneNodeData } from \"../../RenderModuleData/WebModuleData/3D/WebModuleData\";\r\nimport { WebDefineDatas } from \"../../RenderModuleData/WebModuleData/WebDefineDatas\";\r\nimport { WebGLShaderData } from \"../../RenderModuleData/WebModuleData/WebGLShaderData\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLRenderElement3D } from \"./WebGLRenderElement3D\";\r\n\r\n\r\nexport class WebGLRenderContext3D implements IRenderContext3D {\r\n    _globalConfigShaderData: WebDefineDatas;\r\n    private _globalShaderData: WebGLShaderData;\r\n    /**@internal */\r\n    private _sceneData: WebGLShaderData;\r\n    /**@internal */\r\n    private _sceneModuleData: WebSceneNodeData;\r\n    private _cameraModuleData: WebCameraNodeData;\r\n    /**@internal */\r\n    private _cameraData: WebGLShaderData;\r\n    /**@internal */\r\n    private _renderTarget: InternalRenderTarget;\r\n    /**@internal */\r\n    private _viewPort: Viewport;\r\n    /**@internal */\r\n    private _scissor: Vector4;\r\n    /**@internal */\r\n    private _sceneUpdataMask: number;\r\n    /**@internal */\r\n    private _cameraUpdateMask: number;\r\n    /**@internal */\r\n    private _pipelineMode: PipelineMode;\r\n    /**@internal */\r\n    private _invertY: boolean;\r\n    /**@internal */\r\n    private _clearFlag: number;\r\n    /**@internal */\r\n    private _clearColor: Color;\r\n    /**@internal */\r\n    private _clearDepth: number;\r\n    /**@internal */\r\n    private _clearStencil: number;\r\n    /**@internal */\r\n    private _needStart: boolean = true;\r\n\r\n\r\n    get sceneData(): WebGLShaderData {\r\n        return this._sceneData;\r\n    }\r\n\r\n    set sceneData(value: WebGLShaderData) {\r\n        this._sceneData = value;\r\n    }\r\n\r\n\r\n    get cameraData(): WebGLShaderData {\r\n        return this._cameraData;\r\n    }\r\n\r\n    set cameraData(value: WebGLShaderData) {\r\n        this._cameraData = value;\r\n    }\r\n\r\n    get sceneModuleData(): WebSceneNodeData {\r\n        return this._sceneModuleData;\r\n    }\r\n\r\n    set sceneModuleData(value: WebSceneNodeData) {\r\n        this._sceneModuleData = value;\r\n    }\r\n\r\n\r\n    get cameraModuleData(): WebCameraNodeData {\r\n        return this._cameraModuleData;\r\n    }\r\n\r\n    set cameraModuleData(value: WebCameraNodeData) {\r\n        this._cameraModuleData = value;\r\n    }\r\n\r\n    get globalShaderData(): WebGLShaderData {\r\n        return this._globalShaderData;\r\n    }\r\n\r\n    set globalShaderData(value: WebGLShaderData) {\r\n        this._globalShaderData = value;\r\n    }\r\n\r\n    setRenderTarget(value: InternalRenderTarget, clearFlag: RenderClearFlag) {\r\n        this._clearFlag = clearFlag;\r\n        if (value == this._renderTarget)\r\n            return;\r\n        this._renderTarget = value;\r\n        this._needStart = true;\r\n    }\r\n\r\n    setViewPort(value: Viewport) {\r\n        this._viewPort = value;\r\n        this._needStart = true;\r\n    }\r\n\r\n    setScissor(value: Vector4) {\r\n        this._scissor = value;\r\n        this._needStart = true;\r\n    }\r\n\r\n\r\n    get sceneUpdataMask(): number {\r\n        return this._sceneUpdataMask;\r\n    }\r\n\r\n    set sceneUpdataMask(value: number) {\r\n        this._sceneUpdataMask = value;\r\n    }\r\n\r\n\r\n    get cameraUpdateMask(): number {\r\n        return this._cameraUpdateMask;\r\n    }\r\n\r\n    set cameraUpdateMask(value: number) {\r\n        this._cameraUpdateMask = value;\r\n    }\r\n\r\n\r\n    get pipelineMode(): PipelineMode {\r\n        return this._pipelineMode;\r\n    }\r\n\r\n    set pipelineMode(value: PipelineMode) {\r\n        this._pipelineMode = value;\r\n    }\r\n\r\n\r\n    get invertY(): boolean {\r\n        return this._invertY;\r\n    }\r\n\r\n    set invertY(value: boolean) {\r\n        this._invertY = value;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * <code>GLESRenderContext3D<code/>\r\n     */\r\n    constructor() {\r\n        this._clearColor = new Color();\r\n        this._globalConfigShaderData = Shader3D._configDefineValues;\r\n        this.cameraUpdateMask = 0;\r\n    }\r\n\r\n    runOneCMD(cmd: IRenderCMD): void {\r\n        cmd.apply(this);\r\n    }\r\n\r\n    runCMDList(cmds: IRenderCMD[]): void {\r\n        cmds.forEach(element => {\r\n            element.apply(this);\r\n        });\r\n    }\r\n\r\n    setClearData(clearFlag: number, color: Color, depth: number, stencil: number): number {\r\n        this._clearFlag = clearFlag;\r\n        color.cloneTo(this._clearColor);\r\n        this._clearDepth = depth;\r\n        this._clearStencil = stencil;\r\n        return 0;\r\n    }\r\n\r\n    drawRenderElementList(list: FastSinglelist<WebGLRenderElement3D>): number {\r\n        if (this._needStart) {\r\n            this._bindRenderTarget();\r\n            this._start();\r\n            this._needStart = false;\r\n        }\r\n        let elements = list.elements;\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            elements[i]._preUpdatePre(this);//render\r\n        }\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            elements[i]._render(this);//render\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    drawRenderElementOne(node: WebGLRenderElement3D): number {\r\n        if (this._needStart) {\r\n            this._bindRenderTarget();\r\n            this._start();\r\n            this._needStart = false;\r\n        }\r\n\r\n        node._preUpdatePre(this);\r\n        node._render(this);\r\n        return 0;\r\n    }\r\n\r\n\r\n    drawRenderElementList_StatUse(list: FastSinglelist<WebGLRenderElement3D>): number {\r\n        if (this._needStart) {\r\n            this._bindRenderTarget();\r\n            this._start();\r\n            this._needStart = false;\r\n        }\r\n        let elements = list.elements;\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            elements[i]._preUpdatePre(this);//render\r\n        }\r\n        for (var i: number = 0, n: number = list.length; i < n; i++) {\r\n            var time = performance.now();//T_Render_CameraOtherDest Stat\r\n            elements[i]._render(this);//render\r\n            if (elements[i].owner) {\r\n                switch (elements[i].owner.renderNodeType) {\r\n                    case 0:\r\n                        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OtherRender] += (performance.now() - time);//Stat\r\n                        break;\r\n                    case 1:\r\n                        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlyMeshRender] += (performance.now() - time);//Stat\r\n                        break;\r\n                    case 2:\r\n                        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlyShurikenParticleRender] += (performance.now() - time);//Stat\r\n                        break;\r\n                    case 9:\r\n                        Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlySkinnedMeshRender] += (performance.now() - time);//Stat\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    drawRenderElementOne_StatUse(node: WebGLRenderElement3D): number {\r\n        if (this._needStart) {\r\n            this._bindRenderTarget();\r\n            this._start();\r\n            this._needStart = false;\r\n        }\r\n\r\n        node._preUpdatePre(this);\r\n        var time = performance.now();//T_Render_CameraOtherDest Stat\r\n        node._render(this);\r\n        if (node.owner) {\r\n            switch (node.owner.renderNodeType) {\r\n                case 0:\r\n                    Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OtherRender] += (performance.now() - time);//Stat\r\n                    break;\r\n                case 1:\r\n                    Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlyMeshRender] += (performance.now() - time);//Stat\r\n                    break;\r\n                case 2:\r\n                    Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlyShurikenParticleRender] += (performance.now() - time);//Stat\r\n                    break;\r\n                case 9:\r\n                    Stat.renderPassStatArray[RenderPassStatisticsInfo.T_OnlySkinnedMeshRender] += (performance.now() - time);//Stat\r\n                    break;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private _bindRenderTarget() {\r\n        if (this._renderTarget) {\r\n            LayaGL.textureContext.bindRenderTarget(this._renderTarget);\r\n        } else {\r\n            LayaGL.textureContext.bindoutScreenTarget();\r\n        }\r\n    }\r\n\r\n    private _start() {\r\n        WebGLEngine.instance.scissorTest(true);\r\n        WebGLEngine.instance.viewport(this._viewPort.x, this._viewPort.y, this._viewPort.width, this._viewPort.height);\r\n        WebGLEngine.instance.scissor(this._viewPort.x, this._viewPort.y, this._viewPort.width, this._viewPort.height);\r\n        if (this._clearFlag != RenderClearFlag.Nothing)\r\n            WebGLEngine.instance.clearRenderTexture(this._clearFlag, this._clearColor, this._clearDepth, this._clearStencil);\r\n        WebGLEngine.instance.scissor(this._scissor.x, this._scissor.y, this._scissor.z, this._scissor.w);\r\n    }\r\n\r\n}","\r\nimport { SkinnedMeshSprite3D } from \"../../../d3/core/SkinnedMeshSprite3D\";\r\nimport { ISkinRenderElement3D } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\nimport { WebGLRenderGeometryElement } from \"../RenderDevice/WebGLRenderGeometryElement\";\r\nimport { WebGLShaderInstance } from \"../RenderDevice/WebGLShaderInstance\";\r\nimport { WebGLRenderElement3D } from \"./WebGLRenderElement3D\";\r\n\r\n\r\nexport class WebGLSkinRenderElement3D extends WebGLRenderElement3D implements ISkinRenderElement3D {\r\n\r\n    skinnedData: Float32Array[];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** 更新数据并且 */\r\n    drawGeometry(shaderIns: WebGLShaderInstance) {\r\n\r\n        let element = this.geometry.drawParams.elements;\r\n        if (!this.skinnedData)\r\n            return;\r\n        this.geometry.bufferState.bind();\r\n        for (var j = 0, m = this.geometry.drawParams.length / 2; j < m; j++) {\r\n            var subSkinnedDatas: Float32Array = this.skinnedData[j];\r\n            shaderIns.uploadCustomUniform(SkinnedMeshSprite3D.BONES, subSkinnedDatas);\r\n            var offset = j * 2;\r\n            WebGLEngine.instance.getDrawContext().drawElements((this.geometry as WebGLRenderGeometryElement)._glmode, element[offset + 1], (this.geometry as WebGLRenderGeometryElement)._glindexFormat, element[offset]);\r\n        }\r\n    }\r\n}","import { Laya } from \"../../../../Laya\";\r\nimport { Laya3DRender } from \"../../../d3/RenderObjs/Laya3DRender\";\r\nimport { SceneRenderManagerOBJ } from \"../../../d3/core/scene/SceneRenderManagerOBJ\";\r\nimport { Stat } from \"../../../utils/Stat\";\r\nimport { IInstanceRenderBatch, IInstanceRenderElement3D } from \"../../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { I3DRenderPassFactory } from \"../../DriverDesign/3DRenderPass/I3DRenderPassFactory\";\r\nimport { WebGLInstanceRenderBatch } from \"./WebGLInstanceRenderBatch\";\r\nimport { WebGLInstanceRenderElement3D } from \"./WebGLInstanceRenderElement3D\";\r\nimport { WebGLRender3DProcess } from \"./WebGLRender3DProcess\";\r\nimport { WebGLBlitQuadCMDData, WebGLDrawElementCMDData, WebGLDrawNodeCMDData, WebGLSetRenderData, WebGLSetRenderTargetCMD, WebGLSetShaderDefine, WebGLSetViewportCMD } from \"./WebGLRenderCMD/WebGLRenderCMD\";\r\nimport { WebGLRenderContext3D } from \"./WebGLRenderContext3D\";\r\nimport { WebGLRenderElement3D } from \"./WebGLRenderElement3D\";\r\nimport { WebGLSkinRenderElement3D } from \"./WebGLSkinRenderElement3D\";\r\n\r\n\r\nexport class WebGL3DRenderPassFactory implements I3DRenderPassFactory {\r\n    createInstanceBatch(): IInstanceRenderBatch {\r\n        return new WebGLInstanceRenderBatch();\r\n    }\r\n    createSetRenderDataCMD(): WebGLSetRenderData {\r\n        return new WebGLSetRenderData();\r\n    }\r\n    createSetShaderDefineCMD(): WebGLSetShaderDefine {\r\n        return new WebGLSetShaderDefine();\r\n    }\r\n    createDrawNodeCMDData(): WebGLDrawNodeCMDData {\r\n        return new WebGLDrawNodeCMDData();\r\n    }\r\n    createBlitQuadCMDData(): WebGLBlitQuadCMDData {\r\n        return new WebGLBlitQuadCMDData();\r\n    }\r\n    createDrawElementCMDData(): WebGLDrawElementCMDData {\r\n        return new WebGLDrawElementCMDData();\r\n    }\r\n    createSetViewportCMD(): WebGLSetViewportCMD {\r\n        return new WebGLSetViewportCMD();\r\n    }\r\n    createSetRenderTargetCMD(): WebGLSetRenderTargetCMD {\r\n        return new WebGLSetRenderTargetCMD();\r\n    }\r\n    createSceneRenderManager(): SceneRenderManagerOBJ {\r\n        return new SceneRenderManagerOBJ();\r\n    }\r\n\r\n    createSkinRenderElement(): WebGLSkinRenderElement3D {\r\n        return new WebGLSkinRenderElement3D();\r\n    }\r\n    createRenderContext3D(): WebGLRenderContext3D {\r\n        let context = new WebGLRenderContext3D();\r\n        if (Stat.enableRenderPassStatArray) {\r\n            context.drawRenderElementOne = context.drawRenderElementOne_StatUse;\r\n            context.drawRenderElementList = context.drawRenderElementList_StatUse;\r\n        }\r\n        return context;\r\n    }\r\n    createRenderElement3D(): WebGLRenderElement3D {\r\n        return new WebGLRenderElement3D();\r\n    }\r\n\r\n    createInstanceRenderElement3D(): WebGLInstanceRenderElement3D {\r\n        return WebGLInstanceRenderElement3D.create();\r\n    }\r\n\r\n    createRender3DProcess(): WebGLRender3DProcess {\r\n        return new WebGLRender3DProcess();\r\n    }\r\n}\r\n\r\n\r\nLaya.addBeforeInitCallback(() => {\r\n    if (!Laya3DRender.Render3DPassFactory)\r\n        Laya3DRender.Render3DPassFactory = new WebGL3DRenderPassFactory();\r\n});","import { Camera } from \"../../d3/core/Camera\";\r\nimport { CommandBuffer } from \"../../d3/core/render/command/CommandBuffer\";\r\nimport { DepthPass } from \"../../d3/depthMap/DepthPass\";\r\nimport { CameraCullInfo } from \"../../d3/shadowMap/ShadowSliceData\";\r\nimport { Color } from \"../../maths/Color\";\r\nimport { Vector4 } from \"../../maths/Vector4\";\r\nimport { RenderClearFlag } from \"../../RenderEngine/RenderEnum/RenderClearFlag\";\r\nimport { DepthTextureMode } from \"../../resource/RenderTexture\";\r\nimport { IRenderContext3D, PipelineMode } from \"../DriverDesign/3DRenderPass/I3DRenderPass\";\r\nimport { InternalRenderTarget } from \"../DriverDesign/RenderDevice/InternalRenderTarget\";\r\nimport { ICameraNodeData } from \"../RenderModuleData/Design/3D/I3DRenderModuleData\";\r\nimport { WebBaseRenderNode } from \"../RenderModuleData/WebModuleData/3D/WebBaseRenderNode\";\r\nimport { RenderCullUtil } from \"./RenderCullUtil\";\r\nimport { RenderPassUtil } from \"./RenderPassUtil\";\r\nimport { RenderListQueue } from \"./RenderListQueue\";\r\nimport { Viewport } from \"../../maths/Viewport\";\r\n\r\n/**\r\n * 前向渲染流程通用类\r\n */\r\nexport class ForwardAddClusterRP {\r\n    pipelineMode: PipelineMode;\r\n    depthPipelineMode: PipelineMode;\r\n    depthNormalPipelineMode: PipelineMode\r\n    depthTarget: InternalRenderTarget;\r\n    destTarget: InternalRenderTarget;\r\n    camera: ICameraNodeData;\r\n    cameraCullInfo: CameraCullInfo;\r\n    depthTextureMode: DepthTextureMode;\r\n    depthNormalTarget: InternalRenderTarget;\r\n    beforeForwardCmds: CommandBuffer[];\r\n    beforeSkyboxCmds: CommandBuffer[];\r\n    beforeTransparentCmds: CommandBuffer[];\r\n    skyRenderNode: WebBaseRenderNode;\r\n    clearColor: Color;\r\n    clearFlag: number;\r\n    enableCMD: boolean;\r\n    enableOpaque: boolean;\r\n    enableTransparent: boolean;\r\n    protected _opaqueList: RenderListQueue;\r\n    protected _transparent: RenderListQueue;\r\n    protected _zBufferParams: Vector4;\r\n    protected _defaultNormalDepthColor: Color;\r\n\r\n    protected _viewPort: Viewport;\r\n    setViewPort(value: Viewport) {\r\n        value.cloneTo(this._viewPort);\r\n    }\r\n\r\n    protected _scissor: Vector4;\r\n    setScissor(value: Vector4) {\r\n        value.cloneTo(this._scissor);\r\n    }\r\n\r\n    constructor() {\r\n        this._opaqueList = new RenderListQueue(false);\r\n        this._transparent = new RenderListQueue(true);\r\n        this.cameraCullInfo = new CameraCullInfo();\r\n        this._zBufferParams = new Vector4();\r\n        this._scissor = new Vector4();\r\n        this._viewPort = new Viewport();\r\n        this._defaultNormalDepthColor = new Color(0.5, 0.5, 1, 0);\r\n        this.clearColor = new Color();\r\n        this.depthPipelineMode = \"ShadowCaster\";\r\n        this.depthNormalPipelineMode = \"DepthNormal\";\r\n    }\r\n\r\n    /**\r\n     * 设置相机裁剪信息\r\n     * @param camera \r\n     */\r\n    setCameraCullInfo(camera: Camera): void {\r\n        this.cameraCullInfo.position = camera._transform.position;\r\n        this.cameraCullInfo.cullingMask = camera.cullingMask;\r\n        this.cameraCullInfo.staticMask = camera.staticMask;\r\n        this.cameraCullInfo.boundFrustum = camera.boundFrustum;\r\n        this.cameraCullInfo.useOcclusionCulling = camera.useOcclusionCulling;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染命令（前向渲染之前）\r\n     * @param value \r\n     */\r\n    setBeforeForwardCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeForwardCmds = value;\r\n            value.forEach(element => element._apply(false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置渲染命令（天空渲染之前）\r\n     * @param value \r\n     */\r\n    setBeforeSkyboxCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeSkyboxCmds = value;\r\n            value.forEach(element => element._apply(false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置渲染命令（透明物体渲染之前）\r\n     * @param value \r\n     */\r\n    setBeforeTransparentCmds(value: CommandBuffer[]): void {\r\n        if (value && value.length > 0) {\r\n            this.beforeTransparentCmds = value;\r\n            value.forEach(element => element._apply(false));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染流程（TODO:其他两个pass合并MulTargetRT）\r\n     * @param context \r\n     * @param list \r\n     * @param count \r\n     */\r\n    render(context: IRenderContext3D, list: WebBaseRenderNode[], count: number): void {\r\n        context.cameraUpdateMask++\r\n        this._clearRenderList();\r\n        RenderCullUtil.cullByCameraCullInfo(this.cameraCullInfo, list, count, this._opaqueList, this._transparent, context)\r\n        if ((this.depthTextureMode & DepthTextureMode.Depth) != 0)\r\n            this._renderDepthPass(context);\r\n        if ((this.depthTextureMode & DepthTextureMode.DepthNormals) != 0)\r\n            this._renderDepthNormalPass(context);\r\n        this._cacheViewPortAndScissor();\r\n        this._mainPass(context);\r\n\r\n        this._opaqueList._batch.recoverData();\r\n    }\r\n\r\n    /**\r\n     * 清除渲染队列\r\n     */\r\n    protected _clearRenderList() {\r\n        this._opaqueList.clear();\r\n        this._transparent.clear();\r\n    }\r\n\r\n    /**\r\n     * 缓存视口和裁剪\r\n     */\r\n    protected _cacheViewPortAndScissor(): void {\r\n        this._viewPort.cloneTo(RenderPassUtil.contextViewPortCache);\r\n        this._scissor.cloneTo(RenderPassUtil.contextScissorCache);\r\n    }\r\n\r\n    /**\r\n     * 渲染深度流程\r\n     * @param context \r\n     */\r\n    protected _renderDepthPass(context: IRenderContext3D,): void {\r\n        context.pipelineMode = this.depthPipelineMode;\r\n        const viewport = this._viewPort;\r\n        const shadervalue = context.sceneData;\r\n        shadervalue.addDefine(DepthPass.DEPTHPASS);\r\n        shadervalue.setVector(DepthPass.DEFINE_SHADOW_BIAS, Vector4.ZERO);\r\n        Viewport._tempViewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        Vector4.tempVec4.setValue(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        context.setViewPort(Viewport._tempViewport);\r\n        context.setScissor(Vector4.tempVec4);\r\n        context.setRenderTarget(this.depthTarget, RenderClearFlag.Depth);\r\n        context.setClearData(RenderClearFlag.Depth, Color.BLACK, 1, 0);\r\n        this._opaqueList.renderQueue(context);\r\n        //渲染完后传入使用的参数\r\n        const far = this.camera.farplane;\r\n        const near = this.camera.nearplane;\r\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\r\n        context.cameraData.setVector(DepthPass.DEFINE_SHADOW_BIAS, DepthPass.SHADOW_BIAS);\r\n        context.cameraData.setVector(DepthPass.DEPTHZBUFFERPARAMS, this._zBufferParams);\r\n        shadervalue.removeDefine(DepthPass.DEPTHPASS);\r\n    }\r\n\r\n    /**\r\n     * 渲染法线深度流程\r\n     * @param context \r\n     */\r\n    protected _renderDepthNormalPass(context: IRenderContext3D): void {\r\n        context.pipelineMode = this.depthNormalPipelineMode;\r\n        //传入shader该传的值\r\n        const viewport = this._viewPort;\r\n        Viewport._tempViewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        Vector4.tempVec4.setValue(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        context.setViewPort(Viewport._tempViewport);\r\n        context.setScissor(Vector4.tempVec4);\r\n        context.setClearData(RenderClearFlag.Color | RenderClearFlag.Depth, this._defaultNormalDepthColor, 1, 0);\r\n        context.setRenderTarget(this.depthNormalTarget, RenderClearFlag.Color | RenderClearFlag.Depth);\r\n        this._opaqueList.renderQueue(context);\r\n    }\r\n\r\n    /**\r\n     * 主渲染流程\r\n     * @param context \r\n     */\r\n    protected _mainPass(context: IRenderContext3D): void {\r\n        context.pipelineMode = this.pipelineMode;\r\n        RenderPassUtil.renderCmd(this.beforeForwardCmds, context);\r\n        RenderPassUtil.recoverRenderContext3D(context, this.destTarget);\r\n        context.setClearData(this.clearFlag, this.clearColor, 1, 0);\r\n        this.enableOpaque && this._opaqueList.renderQueue(context);\r\n        RenderPassUtil.renderCmd(this.beforeSkyboxCmds, context);\r\n\r\n        if (this.skyRenderNode) {\r\n            const skyRenderElement = this.skyRenderNode.renderelements[0];\r\n            if (skyRenderElement.subShader)\r\n                context.drawRenderElementOne(skyRenderElement);\r\n        }\r\n        if (this.enableOpaque)\r\n            this._opaqueTexturePass();\r\n        RenderPassUtil.renderCmd(this.beforeTransparentCmds, context);\r\n        RenderPassUtil.recoverRenderContext3D(context, this.destTarget);\r\n        this._transparent.renderQueue(context);\r\n    }\r\n\r\n    /**\r\n     * 渲染不透明贴图流程\r\n     */\r\n    protected _opaqueTexturePass() {\r\n        // const blit = BlitScreenQuadCMD.create(currentTarget, this._opaqueTexture);\r\n        // blit.setContext(renderContext);\r\n        // blit.run();\r\n        // blit.recover();\r\n    }\r\n}","import { IShaderInstance } from \"../../../RenderDriver/DriverDesign/RenderDevice/IShaderInstance\";\r\nimport { WebGLRenderElement3D } from \"../../../RenderDriver/WebGLDriver/3DRenderPass/WebGLRenderElement3D\";\r\nimport { WebGLVertexBuffer } from \"../../../RenderDriver/WebGLDriver/RenderDevice/WebGLVertexBuffer\";\r\nimport { VertexBuffer3D } from \"../../../d3/graphics/VertexBuffer3D\";\r\nimport { WebGLEngine } from \"../RenderDevice/WebGLEngine\";\r\n//TODO  改成新的方式\r\nexport class InstanceRenderElementOBJ extends WebGLRenderElement3D {\r\n\r\n    /**@internal 当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据*/\r\n    private _vertexBuffer3D: Array<VertexBuffer3D> = [];\r\n\r\n    private _updateData: Array<Float32Array> = [];\r\n\r\n    private _updateDataNum: Array<number> = [];\r\n\r\n    drawCount: number;\r\n\r\n    updateNums: number;\r\n\r\n    /**\r\n     * 增加UpdateBuffer\r\n     * @param vb \r\n     * @param length 每个instance属性的数据长度\r\n     */\r\n    addUpdateBuffer(vb: VertexBuffer3D,length:number) {\r\n        this._vertexBuffer3D[this.updateNums] = vb;\r\n        this._updateDataNum[this.updateNums++] = length;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index index of Buffer3D\r\n     * @param length length of array\r\n     */\r\n    getUpdateData(index: number,length:number): Float32Array {\r\n        let data = this._updateData[index];\r\n        if (!data || data.length < length) {\r\n            data = this._updateData[index] = new Float32Array(length);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * draw geometry\r\n     * @param shaderIns \r\n     */\r\n    drawGeometry(shaderIns: IShaderInstance) {\r\n        //当instance数量特别大时可能需要一段一段数据来画,所以需要更新顶点数据\r\n        let data: Float32Array;\r\n        let buffer: WebGLVertexBuffer;\r\n        for (let i = 0; i < this.updateNums; i++) {\r\n            buffer = this._vertexBuffer3D[i]._deviceBuffer as WebGLVertexBuffer;\r\n            if (!buffer) break;\r\n            data = this._updateData[i];\r\n            buffer.orphanStorage();\r\n            buffer.setData(data.buffer, 0, 0, this.drawCount * this._updateDataNum[i] * 4);\r\n        }\r\n        WebGLEngine.instance.getDrawContext().drawGeometryElement(this.geometry);\r\n    }\r\n\r\n    clear() {\r\n        this.updateNums = 0;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]}