
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public interface IEventSender{
	void OnAddReceiver(object receiver);
	void OnRemoveReceiver(object receiver);
}

public interface IEventManager{
	void AddSender(IEventSender sender);
	void AddReceiver(object receiver);
	void RemoveSender(IEventSender sender);
	void RemoveReceiver(object receiver);
}


public class EventManager : IEventManager{
	HashSet<IEventSender> _senders = new HashSet<IEventSender>();
	HashSet<object> _receivers = new HashSet<object>();

	public static IEventManager Singleton = new EventManager();

	public void AddSender(IEventSender sender){
		_senders.Add(sender);
		_receivers.ToList().ForEach(receiver=>sender.OnAddReceiver(receiver));
	}

	public void AddReceiver(object receiver){
		_receivers.Add(receiver);
		_senders.ToList().ForEach(sender=>sender.OnAddReceiver(receiver));
	}

	public void RemoveSender(IEventSender sender){
		_receivers.ToList().ForEach(receiver=>sender.OnRemoveReceiver(receiver));
		_senders.Remove(sender);
	}

	public void RemoveReceiver(object receiver){
		_senders.ToList().ForEach(sender=>sender.OnRemoveReceiver(receiver));
		_receivers.Remove(receiver);
	}
}



public delegate bool VerifyReceiverDelegate(object receiver);

public class DefaultEventSender : IEventSender{
	public event VerifyReceiverDelegate VerifyReceiverDelegate;
	HashSet<object> _receivers = new HashSet<object>();
	public IEnumerable<object> Receivers{ get{ return _receivers; } }
	public void OnAddReceiver(object receiver){
		if(VerifyReceiverDelegate(receiver))
			_receivers.Add(receiver);
	}
	public void OnRemoveReceiver(object receiver){
		if(VerifyReceiverDelegate(receiver))
			_receivers.Remove(receiver);
	}
}