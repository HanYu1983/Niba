// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package types

import "fmt"

// KesStringMemory is
func KesStringMemory(dict map[string]Memory) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringMemory is
func ValsStringMemory(dict map[string]Memory) []Memory {
	ret := make([]Memory, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringMemory is
func MergeStringMemory(a map[string]Memory, b map[string]Memory) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringMemory is
func AssocStringMemory(a map[string]Memory, k string, v Memory) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringMemory is
func DissocStringMemory(a map[string]Memory, k string) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringMemory(a map[string]Memory, k string) (Memory, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringMemory] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringMemory(a map[string]Memory, b map[string]Memory) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVStringMemory(a map[string]Memory, mapF func(k string, v Memory) Memory) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterStringMemory(a map[string]Memory, filterF func(k string, v Memory) bool) map[string]Memory {
	ret := map[string]Memory{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
