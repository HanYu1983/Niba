// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package uidata

import "fmt"

// KesStringBool is
func KesStringBool(dict map[string]bool) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringBool is
func ValsStringBool(dict map[string]bool) []bool {
	ret := make([]bool, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringBool is
func MergeStringBool(a map[string]bool, b map[string]bool) map[string]bool {
	ret := map[string]bool{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringBool is
func AssocStringBool(a map[string]bool, k string, v bool) map[string]bool {
	ret := map[string]bool{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringBool is
func DissocStringBool(a map[string]bool, k string) map[string]bool {
	ret := map[string]bool{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringBool(a map[string]bool, k string) (bool, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringBool] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringBool(a map[string]bool, b map[string]bool) map[string]bool {
	ret := map[string]bool{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}
