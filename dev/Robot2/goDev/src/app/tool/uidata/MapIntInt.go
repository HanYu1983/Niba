// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package uidata

import "fmt"

// KesIntInt is
func KesIntInt(dict map[int]int) []int {
	ret := make([]int, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsIntInt is
func ValsIntInt(dict map[int]int) []int {
	ret := make([]int, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeIntInt is
func MergeIntInt(a map[int]int, b map[int]int) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocIntInt is
func AssocIntInt(a map[int]int, k int, v int) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocIntInt is
func DissocIntInt(a map[int]int, k int) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetIntInt(a map[int]int, k int) (int, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetIntInt] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceIntInt(a map[int]int, b map[int]int) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVIntInt(a map[int]int, mapF func(k int, v int) int) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterIntInt(a map[int]int, filterF func(k int, v int) bool) map[int]int {
	ret := map[int]int{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
