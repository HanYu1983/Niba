// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package uidata

import "fmt"

// KesStringInt is
func KesStringInt(dict map[string]int) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringInt is
func ValsStringInt(dict map[string]int) []int {
	ret := make([]int, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringInt is
func MergeStringInt(a map[string]int, b map[string]int) map[string]int {
	ret := map[string]int{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringInt is
func AssocStringInt(a map[string]int, k string, v int) map[string]int {
	ret := map[string]int{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringInt is
func DissocStringInt(a map[string]int, k string) map[string]int {
	ret := map[string]int{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringInt(a map[string]int, k string) (int, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringInt] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringInt(a map[string]int, b map[string]int) map[string]int {
	ret := map[string]int{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}
