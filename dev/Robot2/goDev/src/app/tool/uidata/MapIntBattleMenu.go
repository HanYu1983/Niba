// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package uidata

import "fmt"

// KesIntBattleMenu is
func KesIntBattleMenu(dict map[int]BattleMenu) []int {
	ret := make([]int, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsIntBattleMenu is
func ValsIntBattleMenu(dict map[int]BattleMenu) []BattleMenu {
	ret := make([]BattleMenu, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeIntBattleMenu is
func MergeIntBattleMenu(a map[int]BattleMenu, b map[int]BattleMenu) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocIntBattleMenu is
func AssocIntBattleMenu(a map[int]BattleMenu, k int, v BattleMenu) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocIntBattleMenu is
func DissocIntBattleMenu(a map[int]BattleMenu, k int) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetIntBattleMenu(a map[int]BattleMenu, k int) (BattleMenu, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetIntBattleMenu] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceIntBattleMenu(a map[int]BattleMenu, b map[int]BattleMenu) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVIntBattleMenu(a map[int]BattleMenu, mapF func(k int, v BattleMenu) BattleMenu) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterIntBattleMenu(a map[int]BattleMenu, filterF func(k int, v BattleMenu) bool) map[int]BattleMenu {
	ret := map[int]BattleMenu{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
