// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package protocol

import "fmt"

// KesStringRobot is
func KesStringRobot(dict map[string]Robot) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringRobot is
func ValsStringRobot(dict map[string]Robot) []Robot {
	ret := make([]Robot, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringRobot is
func MergeStringRobot(a map[string]Robot, b map[string]Robot) map[string]Robot {
	ret := map[string]Robot{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringRobot is
func AssocStringRobot(a map[string]Robot, k string, v Robot) map[string]Robot {
	ret := map[string]Robot{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringRobot is
func DissocStringRobot(a map[string]Robot, k string) map[string]Robot {
	ret := map[string]Robot{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringRobot(a map[string]Robot, k string) (Robot, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringRobot] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringRobot(a map[string]Robot, b map[string]Robot) map[string]Robot {
	ret := map[string]Robot{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}
