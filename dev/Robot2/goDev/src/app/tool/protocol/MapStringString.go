// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package protocol

import "fmt"

// KesStringString is
func KesStringString(dict map[string]string) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringString is
func ValsStringString(dict map[string]string) []string {
	ret := make([]string, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringString is
func MergeStringString(a map[string]string, b map[string]string) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringString is
func AssocStringString(a map[string]string, k string, v string) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringString is
func DissocStringString(a map[string]string, k string) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringString(a map[string]string, k string) (string, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringString] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringString(a map[string]string, b map[string]string) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVStringString(a map[string]string, mapF func(k string, v string) string) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterStringString(a map[string]string, filterF func(k string, v string) bool) map[string]string {
	ret := map[string]string{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
