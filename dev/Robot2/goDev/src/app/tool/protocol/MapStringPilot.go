// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package protocol

import "fmt"

// KesStringPilot is
func KesStringPilot(dict map[string]Pilot) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringPilot is
func ValsStringPilot(dict map[string]Pilot) []Pilot {
	ret := make([]Pilot, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringPilot is
func MergeStringPilot(a map[string]Pilot, b map[string]Pilot) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringPilot is
func AssocStringPilot(a map[string]Pilot, k string, v Pilot) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringPilot is
func DissocStringPilot(a map[string]Pilot, k string) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringPilot(a map[string]Pilot, k string) (Pilot, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringPilot] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringPilot(a map[string]Pilot, b map[string]Pilot) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVStringPilot(a map[string]Pilot, mapF func(k string, v Pilot) Pilot) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterStringPilot(a map[string]Pilot, filterF func(k string, v Pilot) bool) map[string]Pilot {
	ret := map[string]Pilot{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
