// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package protocol

import "fmt"

// KesStringItem is
func KesStringItem(dict map[string]Item) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringItem is
func ValsStringItem(dict map[string]Item) []Item {
	ret := make([]Item, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringItem is
func MergeStringItem(a map[string]Item, b map[string]Item) map[string]Item {
	ret := map[string]Item{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringItem is
func AssocStringItem(a map[string]Item, k string, v Item) map[string]Item {
	ret := map[string]Item{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringItem is
func DissocStringItem(a map[string]Item, k string) map[string]Item {
	ret := map[string]Item{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringItem(a map[string]Item, k string) (Item, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringItem] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringItem(a map[string]Item, b map[string]Item) map[string]Item {
	ret := map[string]Item{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}
