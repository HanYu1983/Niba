// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package protocol

import "fmt"

// KesStringWeapons is
func KesStringWeapons(dict map[string]Weapons) []string {
	ret := make([]string, 0, len(dict))
	for k := range dict {
		ret = append(ret, k)
	}
	return ret
}

// ValsStringWeapons is
func ValsStringWeapons(dict map[string]Weapons) []Weapons {
	ret := make([]Weapons, 0, len(dict))
	for _, v := range dict {
		ret = append(ret, v)
	}
	return ret
}

// MergeStringWeapons is
func MergeStringWeapons(a map[string]Weapons, b map[string]Weapons) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		ret[k] = v
	}
	for k, v := range b {
		ret[k] = v
	}
	return ret
}

// AssocStringWeapons is
func AssocStringWeapons(a map[string]Weapons, k string, v Weapons) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		ret[k] = v
	}
	ret[k] = v
	return ret
}

// DissocStringWeapons is
func DissocStringWeapons(a map[string]Weapons, k string) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		ret[k] = v
	}
	delete(ret, k)
	return ret
}

func TryGetStringWeapons(a map[string]Weapons, k string) (Weapons, error) {
	ret, has := a[k]
	if has == false {
		return ret, fmt.Errorf("[TryGetStringWeapons] key not found: %v", k)
	}
	return ret, nil
}

func DifferenceStringWeapons(a map[string]Weapons, b map[string]Weapons) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		_, has := b[k]
		if has == false {
			ret[k] = v
		}
	}
	return ret
}

func MapKVStringWeapons(a map[string]Weapons, mapF func(k string, v Weapons) Weapons) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		ret[k] = mapF(k, v)
	}
	return ret
}
func FilterStringWeapons(a map[string]Weapons, filterF func(k string, v Weapons) bool) map[string]Weapons {
	ret := map[string]Weapons{}
	for k, v := range a {
		if filterF(k, v) {
			ret[k] = v
		}
	}
	return ret
}
