(ns game.data.dynamic)

(defmulti cut-in (fn [ctx effect-id effect] (-> ctx :data-dynamic)))
(defmulti add-text :data-dynamic)
(defmulti delete-text :data-dynamic)
(defmulti get-card-proto :data-dynamic)
(defmulti add-immediate-effect :data-dynamic)
(defmulti get-my-g :data-dynamic)
(defmulti get-my-g-can-tap :data-dynamic)
(defmulti get-card-chars :data-dynamic)
(defmulti get-card-color :data-dynamic)
(defmulti is-card-color-blue :data-dynamic)
(defmulti get-my-hand :data-dynamic)
(defmulti get-card-state :data-dynamic)
(defmulti set-card-state :data-dynamic)
(defmulti move-card (fn [ctx from to card-id] (-> ctx :data-dynamic)))
(defmulti get-runtime-card-id (fn [ctx runtime] (-> ctx :data-dynamic)))
(defmulti get-runtime-player-id (fn [ctx runtime] (-> ctx :data-dynamic)))
(defmulti get-card-runtime-type (fn [ctx card-id] (-> ctx :data-dynamic)))
(defmulti get-my-units-can-set-character (fn [ctx player-id] (-> ctx :data-dynamic)))
(defmulti get-card-basyou (fn [ctx card-id] (-> ctx :data-dynamic)))
(defmulti get-card-type (fn [ctx card-id] (-> ctx :data-dynamic)))
(defmulti get-selection (fn [ctx selection-id] (-> ctx :data-dynamic)))
(defmulti set-setgroup-character (fn [ctx to-card-id card-id] (-> ctx :data-dynamic)))
(defmulti set-setgroup-operation-unit (fn [ctx to-card-id card-id] (-> ctx :data-dynamic)))
(defmulti get-setgroup (fn [ctx card-id] (-> ctx :data-dynamic)))