// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        main_texture: {value: [white]}
        flow_texture: {value: [white]}
        resetUV: {value: [1,1,1,1], editor:{type:vec4}}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  out vec3 v_position;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_position = a_position;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <cc-global>
  #include <alpha-test>

  in vec4 v_color;
  in vec3 v_position;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform sampler2D main_texture;
  uniform sampler2D flow_texture;

  uniform Constant{
    vec4 resetUV;
  };

  void main () {
    vec2 h5uv = vec2((v_uv0.x - resetUV.x) / resetUV.y, (v_uv0.y - resetUV.z) / resetUV.w);
    vec2 flowuv = h5uv;
    flowuv.x += cc_time.x + v_position.x * .001;
    flowuv = fract(flowuv);
    vec4 flow_texture = texture(flow_texture, flowuv);
    h5uv.x += (flow_texture.x - .5) * .2;
    h5uv.y += (flow_texture.y - .5) * .1;
    h5uv = fract(h5uv);
    vec4 main_color = texture(main_texture, h5uv);
    main_color *= v_color;
    ALPHA_TEST(main_color);
    gl_FragColor = main_color;
  }
}%
